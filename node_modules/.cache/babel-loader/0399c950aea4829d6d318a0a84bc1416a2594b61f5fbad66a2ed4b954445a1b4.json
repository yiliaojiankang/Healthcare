{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nvar DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: function () {},\n  reuseWorkers: true\n};\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nvar WorkerFarm = /** @class */function () {\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  function WorkerFarm(props) {\n    this.workerPools = new Map();\n    this.props = __assign({}, DEFAULT_PROPS);\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n  /** Check if Workers are supported */\n  WorkerFarm.isSupported = function () {\n    return WorkerThread.isSupported();\n  };\n  /** Get the singleton instance of the global worker farm */\n  WorkerFarm.getWorkerFarm = function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n    WorkerFarm.workerFarm = WorkerFarm.workerFarm || new WorkerFarm({});\n    WorkerFarm.workerFarm.setProps(props);\n    return WorkerFarm.workerFarm;\n  };\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  WorkerFarm.prototype.destroy = function () {\n    var e_1, _a;\n    try {\n      for (var _b = __values(this.workerPools.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var workerPool = _c.value;\n        workerPool.destroy();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  WorkerFarm.prototype.setProps = function (props) {\n    var e_2, _a;\n    this.props = __assign(__assign({}, this.props), props);\n    try {\n      // Update worker pool props\n      for (var _b = __values(this.workerPools.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var workerPool = _c.value;\n        workerPool.setProps(this.getWorkerPoolProps());\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  WorkerFarm.prototype.getWorkerPool = function (options) {\n    var name = options.name,\n      source = options.source,\n      url = options.url;\n    var workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name: name,\n        source: source,\n        url: url\n      });\n      workerPool.setProps(this.getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  };\n  WorkerFarm.prototype.getWorkerPoolProps = function () {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  };\n  return WorkerFarm;\n}();\nexport default WorkerFarm;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__values","o","Symbol","iterator","m","next","value","done","TypeError","WorkerPool","WorkerThread","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","WorkerFarm","props","workerPools","Map","setProps","isSupported","getWorkerFarm","workerFarm","destroy","e_1","_a","_b","values","_c","workerPool","e_1_1","error","return","e_2","getWorkerPoolProps","e_2_1","getWorkerPool","options","name","source","url","get","set"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/worker-farm/worker-farm.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nvar DEFAULT_PROPS = {\n    maxConcurrency: 3,\n    maxMobileConcurrency: 1,\n    onDebug: function () { },\n    reuseWorkers: true,\n};\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nvar WorkerFarm = /** @class */ (function () {\n    /** get global instance with WorkerFarm.getWorkerFarm() */\n    function WorkerFarm(props) {\n        this.workerPools = new Map();\n        this.props = __assign({}, DEFAULT_PROPS);\n        this.setProps(props);\n        this.workerPools = new Map();\n    }\n    /** Check if Workers are supported */\n    WorkerFarm.isSupported = function () {\n        return WorkerThread.isSupported();\n    };\n    /** Get the singleton instance of the global worker farm */\n    WorkerFarm.getWorkerFarm = function (props) {\n        if (props === void 0) { props = {}; }\n        WorkerFarm.workerFarm = WorkerFarm.workerFarm || new WorkerFarm({});\n        WorkerFarm.workerFarm.setProps(props);\n        return WorkerFarm.workerFarm;\n    };\n    /**\n     * Terminate all workers in the farm\n     * @note Can free up significant memory\n     */\n    WorkerFarm.prototype.destroy = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.workerPools.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var workerPool = _c.value;\n                workerPool.destroy();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Set props used when initializing worker pools\n     * @param props\n     */\n    WorkerFarm.prototype.setProps = function (props) {\n        var e_2, _a;\n        this.props = __assign(__assign({}, this.props), props);\n        try {\n            // Update worker pool props\n            for (var _b = __values(this.workerPools.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var workerPool = _c.value;\n                workerPool.setProps(this.getWorkerPoolProps());\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    /**\n     * Returns a worker pool for the specified worker\n     * @param options - only used first time for a specific worker name\n     * @param options.name - the name of the worker - used to identify worker pool\n     * @param options.url -\n     * @param options.source -\n     * @example\n     *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n     */\n    WorkerFarm.prototype.getWorkerPool = function (options) {\n        var name = options.name, source = options.source, url = options.url;\n        var workerPool = this.workerPools.get(name);\n        if (!workerPool) {\n            workerPool = new WorkerPool({\n                name: name,\n                source: source,\n                url: url,\n            });\n            workerPool.setProps(this.getWorkerPoolProps());\n            this.workerPools.set(name, workerPool);\n        }\n        return workerPool;\n    };\n    WorkerFarm.prototype.getWorkerPoolProps = function () {\n        return {\n            maxConcurrency: this.props.maxConcurrency,\n            maxMobileConcurrency: this.props.maxMobileConcurrency,\n            reuseWorkers: this.props.reuseWorkers,\n            onDebug: this.props.onDebug,\n        };\n    };\n    return WorkerFarm;\n}());\nexport default WorkerFarm;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,IAAIO,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,UAASC,CAAC,EAAE;EAClD,IAAIX,CAAC,GAAG,OAAOY,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,QAAQ;IAAEC,CAAC,GAAGd,CAAC,IAAIW,CAAC,CAACX,CAAC,CAAC;IAAEC,CAAC,GAAG,CAAC;EAC7E,IAAIa,CAAC,EAAE,OAAOA,CAAC,CAACN,IAAI,CAACG,CAAC,CAAC;EACvB,IAAIA,CAAC,IAAI,OAAOA,CAAC,CAACP,MAAM,KAAK,QAAQ,EAAE,OAAO;IAC1CW,IAAI,EAAE,SAAAA,CAAA,EAAY;MACd,IAAIJ,CAAC,IAAIV,CAAC,IAAIU,CAAC,CAACP,MAAM,EAAEO,CAAC,GAAG,KAAK,CAAC;MAClC,OAAO;QAAEK,KAAK,EAAEL,CAAC,IAAIA,CAAC,CAACV,CAAC,EAAE,CAAC;QAAEgB,IAAI,EAAE,CAACN;MAAE,CAAC;IAC3C;EACJ,CAAC;EACD,MAAM,IAAIO,SAAS,CAAClB,CAAC,GAAG,yBAAyB,GAAG,iCAAiC,CAAC;AAC1F,CAAC;AACD,OAAOmB,UAAU,MAAM,eAAe;AACtC,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,IAAIC,aAAa,GAAG;EAChBC,cAAc,EAAE,CAAC;EACjBC,oBAAoB,EAAE,CAAC;EACvBC,OAAO,EAAE,SAAAA,CAAA,EAAY,CAAE,CAAC;EACxBC,YAAY,EAAE;AAClB,CAAC;AACD;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC;EACA,SAASA,UAAUA,CAACC,KAAK,EAAE;IACvB,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACF,KAAK,GAAG/B,QAAQ,CAAC,CAAC,CAAC,EAAEyB,aAAa,CAAC;IACxC,IAAI,CAACS,QAAQ,CAACH,KAAK,CAAC;IACpB,IAAI,CAACC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;EAChC;EACA;EACAH,UAAU,CAACK,WAAW,GAAG,YAAY;IACjC,OAAOX,YAAY,CAACW,WAAW,CAAC,CAAC;EACrC,CAAC;EACD;EACAL,UAAU,CAACM,aAAa,GAAG,UAAUL,KAAK,EAAE;IACxC,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,CAAC,CAAC;IAAE;IACpCD,UAAU,CAACO,UAAU,GAAGP,UAAU,CAACO,UAAU,IAAI,IAAIP,UAAU,CAAC,CAAC,CAAC,CAAC;IACnEA,UAAU,CAACO,UAAU,CAACH,QAAQ,CAACH,KAAK,CAAC;IACrC,OAAOD,UAAU,CAACO,UAAU;EAChC,CAAC;EACD;AACJ;AACA;AACA;EACIP,UAAU,CAACpB,SAAS,CAAC4B,OAAO,GAAG,YAAY;IACvC,IAAIC,GAAG,EAAEC,EAAE;IACX,IAAI;MACA,KAAK,IAAIC,EAAE,GAAG3B,QAAQ,CAAC,IAAI,CAACkB,WAAW,CAACU,MAAM,CAAC,CAAC,CAAC,EAAEC,EAAE,GAAGF,EAAE,CAACtB,IAAI,CAAC,CAAC,EAAE,CAACwB,EAAE,CAACtB,IAAI,EAAEsB,EAAE,GAAGF,EAAE,CAACtB,IAAI,CAAC,CAAC,EAAE;QACzF,IAAIyB,UAAU,GAAGD,EAAE,CAACvB,KAAK;QACzBwB,UAAU,CAACN,OAAO,CAAC,CAAC;MACxB;IACJ,CAAC,CACD,OAAOO,KAAK,EAAE;MAAEN,GAAG,GAAG;QAAEO,KAAK,EAAED;MAAM,CAAC;IAAE,CAAC,SACjC;MACJ,IAAI;QACA,IAAIF,EAAE,IAAI,CAACA,EAAE,CAACtB,IAAI,KAAKmB,EAAE,GAAGC,EAAE,CAACM,MAAM,CAAC,EAAEP,EAAE,CAAC5B,IAAI,CAAC6B,EAAE,CAAC;MACvD,CAAC,SACO;QAAE,IAAIF,GAAG,EAAE,MAAMA,GAAG,CAACO,KAAK;MAAE;IACxC;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIhB,UAAU,CAACpB,SAAS,CAACwB,QAAQ,GAAG,UAAUH,KAAK,EAAE;IAC7C,IAAIiB,GAAG,EAAER,EAAE;IACX,IAAI,CAACT,KAAK,GAAG/B,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC+B,KAAK,CAAC,EAAEA,KAAK,CAAC;IACtD,IAAI;MACA;MACA,KAAK,IAAIU,EAAE,GAAG3B,QAAQ,CAAC,IAAI,CAACkB,WAAW,CAACU,MAAM,CAAC,CAAC,CAAC,EAAEC,EAAE,GAAGF,EAAE,CAACtB,IAAI,CAAC,CAAC,EAAE,CAACwB,EAAE,CAACtB,IAAI,EAAEsB,EAAE,GAAGF,EAAE,CAACtB,IAAI,CAAC,CAAC,EAAE;QACzF,IAAIyB,UAAU,GAAGD,EAAE,CAACvB,KAAK;QACzBwB,UAAU,CAACV,QAAQ,CAAC,IAAI,CAACe,kBAAkB,CAAC,CAAC,CAAC;MAClD;IACJ,CAAC,CACD,OAAOC,KAAK,EAAE;MAAEF,GAAG,GAAG;QAAEF,KAAK,EAAEI;MAAM,CAAC;IAAE,CAAC,SACjC;MACJ,IAAI;QACA,IAAIP,EAAE,IAAI,CAACA,EAAE,CAACtB,IAAI,KAAKmB,EAAE,GAAGC,EAAE,CAACM,MAAM,CAAC,EAAEP,EAAE,CAAC5B,IAAI,CAAC6B,EAAE,CAAC;MACvD,CAAC,SACO;QAAE,IAAIO,GAAG,EAAE,MAAMA,GAAG,CAACF,KAAK;MAAE;IACxC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIhB,UAAU,CAACpB,SAAS,CAACyC,aAAa,GAAG,UAAUC,OAAO,EAAE;IACpD,IAAIC,IAAI,GAAGD,OAAO,CAACC,IAAI;MAAEC,MAAM,GAAGF,OAAO,CAACE,MAAM;MAAEC,GAAG,GAAGH,OAAO,CAACG,GAAG;IACnE,IAAIX,UAAU,GAAG,IAAI,CAACZ,WAAW,CAACwB,GAAG,CAACH,IAAI,CAAC;IAC3C,IAAI,CAACT,UAAU,EAAE;MACbA,UAAU,GAAG,IAAIrB,UAAU,CAAC;QACxB8B,IAAI,EAAEA,IAAI;QACVC,MAAM,EAAEA,MAAM;QACdC,GAAG,EAAEA;MACT,CAAC,CAAC;MACFX,UAAU,CAACV,QAAQ,CAAC,IAAI,CAACe,kBAAkB,CAAC,CAAC,CAAC;MAC9C,IAAI,CAACjB,WAAW,CAACyB,GAAG,CAACJ,IAAI,EAAET,UAAU,CAAC;IAC1C;IACA,OAAOA,UAAU;EACrB,CAAC;EACDd,UAAU,CAACpB,SAAS,CAACuC,kBAAkB,GAAG,YAAY;IAClD,OAAO;MACHvB,cAAc,EAAE,IAAI,CAACK,KAAK,CAACL,cAAc;MACzCC,oBAAoB,EAAE,IAAI,CAACI,KAAK,CAACJ,oBAAoB;MACrDE,YAAY,EAAE,IAAI,CAACE,KAAK,CAACF,YAAY;MACrCD,OAAO,EAAE,IAAI,CAACG,KAAK,CAACH;IACxB,CAAC;EACL,CAAC;EACD,OAAOE,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}