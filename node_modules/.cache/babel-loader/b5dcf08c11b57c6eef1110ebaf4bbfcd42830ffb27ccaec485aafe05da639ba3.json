{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values, field, index) {\n  return values.length > 1 ? \"\".concat(field, \"_\").concat(index) : \"\".concat(field);\n}\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options) {\n  var data = options.data,\n    xField = options.xField,\n    measureField = options.measureField,\n    rangeField = options.rangeField,\n    targetField = options.targetField,\n    layout = options.layout;\n  var ds = [];\n  var scales = [];\n  data.forEach(function (item, index) {\n    // 构建 title * range\n    var rangeValues = [item[rangeField]].flat();\n    rangeValues.sort(function (a, b) {\n      return a - b;\n    });\n    rangeValues.forEach(function (d, i) {\n      var _a;\n      var range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push((_a = {\n        rKey: \"\".concat(rangeField, \"_\").concat(i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[rangeField] = range, _a));\n    });\n    // 构建 title * measure\n    var measureValues = [item[measureField]].flat();\n    measureValues.forEach(function (d, i) {\n      var _a;\n      ds.push((_a = {\n        mKey: getSeriesFieldKey(measureValues, measureField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[measureField] = d, _a));\n    });\n    // 构建 title * target\n    var targetValues = [item[targetField]].flat();\n    targetValues.forEach(function (d, i) {\n      var _a;\n      ds.push((_a = {\n        tKey: getSeriesFieldKey(targetValues, targetField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[targetField] = d, _a));\n    });\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  var min = Math.min.apply(Math, scales.flat(Infinity));\n  var max = Math.max.apply(Math, scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return {\n    min: min,\n    max: max,\n    ds: ds\n  };\n}","map":{"version":3,"names":["getSeriesFieldKey","values","field","index","length","concat","transformData","options","data","xField","measureField","rangeField","targetField","layout","ds","scales","forEach","item","rangeValues","flat","sort","a","b","d","i","range","push","_a","rKey","String","measureValues","mKey","targetValues","tKey","min","Math","apply","Infinity","max","reverse"],"sources":["../../../src/plots/bullet/utils.ts"],"sourcesContent":["import { BulletOptions } from './types';\n\ntype TransformData = {\n  min: number;\n  max: number;\n  ds: any[];\n};\n\n/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values: number[], field: string, index: number): string {\n  return values.length > 1 ? `${field}_${index}` : `${field}`;\n}\n\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options: BulletOptions): TransformData {\n  const { data, xField, measureField, rangeField, targetField, layout } = options;\n  const ds: any[] = [];\n  const scales: number[] = [];\n  data.forEach((item: any, index: number) => {\n    // 构建 title * range\n    const rangeValues = [item[rangeField]].flat();\n    rangeValues.sort((a: number, b: number) => a - b);\n    rangeValues.forEach((d: number, i: number) => {\n      const range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push({\n        rKey: `${rangeField}_${i}`,\n        [xField]: xField ? item[xField] : String(index), // 没有xField就用索引\n        [rangeField]: range,\n      });\n    });\n\n    // 构建 title * measure\n    const measureValues = [item[measureField]].flat();\n    measureValues.forEach((d: number, i: number) => {\n      ds.push({\n        mKey: getSeriesFieldKey(measureValues, measureField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [measureField]: d,\n      });\n    });\n\n    // 构建 title * target\n    const targetValues = [item[targetField]].flat();\n    targetValues.forEach((d: number, i: number) => {\n      ds.push({\n        tKey: getSeriesFieldKey(targetValues, targetField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [targetField]: d,\n      });\n    });\n\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  let min = Math.min(...scales.flat(Infinity));\n  const max = Math.max(...scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return { min, max, ds };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}