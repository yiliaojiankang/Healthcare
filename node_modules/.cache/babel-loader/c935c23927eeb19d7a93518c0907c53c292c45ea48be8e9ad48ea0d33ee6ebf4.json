{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n  return (max - min) * Math.random() + min;\n}\nvar Jitter = /** @class */function (_super) {\n  __extends(Jitter, _super);\n  function Jitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Jitter.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray);\n    // 之前分组之后的数据，然后有合并回去（和分组前可以理解成是一样的）\n    var mergeData = _.flatten(groupedDataArray);\n    // 返回值\n    this.adjustData(groupedDataArray, mergeData);\n    return groupedDataArray;\n  };\n  /**\n   * 当前数据分组（index）中，按照维度 dim 进行 jitter 调整\n   * @param dim\n   * @param values\n   * @param dataArray\n   */\n  Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n    var _this = this;\n    // 在每一个分组中，将数据再按照 dim 分组，用于散列\n    var groupDataArray = this.groupData(dataArray, dim);\n    return _.each(groupDataArray, function (data, dimValue) {\n      return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n    });\n  };\n  // 随机出来的字段值\n  Jitter.prototype.getAdjustOffset = function (range) {\n    var pre = range.pre,\n      next = range.next;\n    // 随机的范围\n    var margin = (next - pre) * GAP;\n    return randomNumber(pre + margin, next - margin);\n  };\n  // adjust group data\n  Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n    var _this = this;\n    // 调整范围\n    var range = this.getAdjustRange(dim, dimValue, values);\n    _.each(group, function (data) {\n      data[dim] = _this.getAdjustOffset(range); // 获取调整的位置\n    });\n\n    return group;\n  };\n  return Jitter;\n}(Adjust);\nexport default Jitter;","map":{"version":3,"names":["_","GAP","Adjust","randomNumber","min","max","Math","random","Jitter","_super","__extends","prototype","process","groupDataArray","groupedDataArray","clone","mergeData","flatten","adjustData","adjustDim","dim","values","dataArray","_this","groupData","each","data","dimValue","adjustGroup","parseFloat","getAdjustOffset","range","pre","next","margin","group","getAdjustRange"],"sources":["../../src/adjusts/jitter.ts"],"sourcesContent":[null],"mappings":";AAAA,OAAO,KAAKA,CAAC,MAAM,YAAY;AAC/B,SAASC,GAAG,QAAQ,aAAa;AAEjC,OAAOC,MAAM,MAAM,UAAU;AAE7B,SAASC,YAAYA,CAACC,GAAW,EAAEC,GAAW;EAC5C,OAAO,CAACA,GAAG,GAAGD,GAAG,IAAIE,IAAI,CAACC,MAAM,EAAE,GAAGH,GAAG;AAC1C;AAEA,IAAAI,MAAA,0BAAAC,MAAA;EAAoCC,SAAA,CAAAF,MAAA,EAAAC,MAAA;EAApC,SAAAD,OAAA;;EA6CA;EA5CSA,MAAA,CAAAG,SAAA,CAAAC,OAAO,GAAd,UAAeC,cAAwB;IACrC,IAAMC,gBAAgB,GAAGd,CAAC,CAACe,KAAK,CAACF,cAAc,CAAC;IAEhD;IACA,IAAMG,SAAS,GAAGhB,CAAC,CAACiB,OAAO,CAACH,gBAAgB,CAAW;IAEvD;IACA,IAAI,CAACI,UAAU,CAACJ,gBAAgB,EAAEE,SAAS,CAAC;IAE5C,OAAOF,gBAAgB;EACzB,CAAC;EAED;;;;;;EAMUN,MAAA,CAAAG,SAAA,CAAAQ,SAAS,GAAnB,UAAoBC,GAAW,EAAEC,MAAgB,EAAEC,SAAiB;IAApE,IAAAC,KAAA;IACE;IACA,IAAMV,cAAc,GAAG,IAAI,CAACW,SAAS,CAACF,SAAS,EAAEF,GAAG,CAAC;IACrD,OAAOpB,CAAC,CAACyB,IAAI,CAACZ,cAAc,EAAE,UAACa,IAAY,EAAEC,QAAgB;MAC3D,OAAOJ,KAAI,CAACK,WAAW,CAACF,IAAI,EAAEN,GAAG,EAAES,UAAU,CAACF,QAAQ,CAAC,EAAEN,MAAM,CAAC;IAClE,CAAC,CAAC;EACJ,CAAC;EAED;EACQb,MAAA,CAAAG,SAAA,CAAAmB,eAAe,GAAvB,UAAwBC,KAAY;IAC1B,IAAAC,GAAG,GAAWD,KAAK,CAAAC,GAAhB;MAAEC,IAAI,GAAKF,KAAK,CAAAE,IAAV;IACjB;IACA,IAAMC,MAAM,GAAG,CAACD,IAAI,GAAGD,GAAG,IAAI/B,GAAG;IACjC,OAAOE,YAAY,CAAC6B,GAAG,GAAGE,MAAM,EAAED,IAAI,GAAGC,MAAM,CAAC;EAClD,CAAC;EAED;EACQ1B,MAAA,CAAAG,SAAA,CAAAiB,WAAW,GAAnB,UAAoBO,KAAa,EAAEf,GAAW,EAAEO,QAAgB,EAAEN,MAAgB;IAAlF,IAAAE,KAAA;IACE;IACA,IAAMQ,KAAK,GAAG,IAAI,CAACK,cAAc,CAAChB,GAAG,EAAEO,QAAQ,EAAEN,MAAM,CAAC;IAExDrB,CAAC,CAACyB,IAAI,CAACU,KAAK,EAAE,UAACT,IAAU;MACvBA,IAAI,CAACN,GAAG,CAAC,GAAGG,KAAI,CAACO,eAAe,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC;;IACF,OAAOI,KAAK;EACd,CAAC;EACH,OAAA3B,MAAC;AAAD,CAAC,CA7CmCN,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}