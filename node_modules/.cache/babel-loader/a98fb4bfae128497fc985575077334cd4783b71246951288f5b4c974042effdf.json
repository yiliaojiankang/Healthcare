{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { getArcParams } from '@antv/g-canvas';\nimport { isNumberEqual, isEqual, isFunction } from '@antv/util';\nimport { getArcPath, getSectorPath } from '../../util/graphics';\nfunction getAngle(startPoint, arcPath) {\n  var _a;\n  var _b = getArcParams(startPoint, arcPath),\n    startAngle = _b.startAngle,\n    endAngle = _b.endAngle;\n  if (!isNumberEqual(startAngle, -Math.PI * 0.5) && startAngle < -Math.PI * 0.5) {\n    startAngle += Math.PI * 2;\n  }\n  if (!isNumberEqual(endAngle, -Math.PI * 0.5) && endAngle < -Math.PI * 0.5) {\n    endAngle += Math.PI * 2;\n  }\n  if (arcPath[5] === 0) {\n    // 逆时针，需要将 startAngle 和 endAngle 转置，因为 G2 极坐标系为顺时针方向\n    _a = __read([endAngle, startAngle], 2), startAngle = _a[0], endAngle = _a[1];\n  }\n  if (isNumberEqual(startAngle, Math.PI * 1.5)) {\n    startAngle = Math.PI * -0.5;\n  }\n  // 当 startAngle, endAngle 接近相等时，不进行 endAngle = Math.PI * 1.5 防止变化从整个圆开始\n  if (isNumberEqual(endAngle, Math.PI * -0.5) && !isNumberEqual(startAngle, endAngle)) {\n    endAngle = Math.PI * 1.5;\n  }\n  return {\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\nfunction getArcStartPoint(path) {\n  var startPoint;\n  if (path[0] === 'M' || path[0] === 'L') {\n    startPoint = [path[1], path[2]];\n  } else if (path[0] === 'a' || path[0] === 'A' || path[0] === 'C') {\n    startPoint = [path[path.length - 2], path[path.length - 1]];\n  }\n  return startPoint;\n}\n/**\n * path 存在以下情况\n * 1. 饼图不为整圆的 path，命令为 M, L, A, L, Z\n * 2. 饼图为整圆的 path，命令为 M, M, A, A, M, Z\n * 3. 环图不为整圆的 path，命令为 M, A, L, A, L, Z\n * 4. 环图为整圆的 path，命令为 M, A, A, M, A, A, M, Z\n * 5. radial-line, 不为整圆时的 path, 命令为 M, A, A, Z\n * 6. radial-line, 为整圆时的 path，命令为 M, A, A, A, A, Z\n * @param path theta 坐标系下圆弧的 path 命令\n */\nexport function getArcInfo(path) {\n  var _a;\n  var startAngle;\n  var endAngle;\n  var arcPaths = path.filter(function (command) {\n    return command[0] === 'A' || command[0] === 'a';\n  });\n  if (arcPaths.length === 0) {\n    return {\n      startAngle: 0,\n      endAngle: 0,\n      radius: 0,\n      innerRadius: 0\n    };\n  }\n  var firstArcPathCommand = arcPaths[0];\n  var lastArcPathCommand = arcPaths.length > 1 ? arcPaths[1] : arcPaths[0];\n  var firstIndex = path.indexOf(firstArcPathCommand);\n  var lastIndex = path.indexOf(lastArcPathCommand);\n  var firstStartPoint = getArcStartPoint(path[firstIndex - 1]);\n  var lastStartPoint = getArcStartPoint(path[lastIndex - 1]);\n  var _b = getAngle(firstStartPoint, firstArcPathCommand),\n    firstStartAngle = _b.startAngle,\n    firstEndAngle = _b.endAngle;\n  var _c = getAngle(lastStartPoint, lastArcPathCommand),\n    lastStartAngle = _c.startAngle,\n    lastEndAngle = _c.endAngle;\n  if (isNumberEqual(firstStartAngle, lastStartAngle) && isNumberEqual(firstEndAngle, lastEndAngle)) {\n    startAngle = firstStartAngle;\n    endAngle = firstEndAngle;\n  } else {\n    startAngle = Math.min(firstStartAngle, lastStartAngle);\n    endAngle = Math.max(firstEndAngle, lastEndAngle);\n  }\n  var radius = firstArcPathCommand[1];\n  var innerRadius = arcPaths[arcPaths.length - 1][1];\n  if (radius < innerRadius) {\n    _a = __read([innerRadius, radius], 2), radius = _a[0], innerRadius = _a[1];\n  } else if (radius === innerRadius) {\n    innerRadius = 0;\n  }\n  return {\n    startAngle: startAngle,\n    endAngle: endAngle,\n    radius: radius,\n    innerRadius: innerRadius\n  };\n}\n/**\n * @ignore\n * 饼图更新动画\n * @param shape 文本图形\n * @param animateCfg\n * @param cfg\n */\nexport function sectorPathUpdate(shape, animateCfg, cfg) {\n  var toAttrs = cfg.toAttrs,\n    coordinate = cfg.coordinate;\n  var path = toAttrs.path || [];\n  var pathCommands = path.map(function (command) {\n    return command[0];\n  });\n  if (path.length < 1) return;\n  var _a = getArcInfo(path),\n    curStartAngle = _a.startAngle,\n    curEndAngle = _a.endAngle,\n    radius = _a.radius,\n    innerRadius = _a.innerRadius;\n  var _b = getArcInfo(shape.attr('path')),\n    preStartAngle = _b.startAngle,\n    preEndAngle = _b.endAngle;\n  var center = coordinate.getCenter();\n  var diffStartAngle = curStartAngle - preStartAngle;\n  var diffEndAngle = curEndAngle - preEndAngle;\n  // 没有 diff 时直接返回最终 attrs，不需要额外动画\n  if (diffStartAngle === 0 && diffEndAngle === 0) {\n    shape.attr('path', path);\n    return;\n  }\n  shape.animate(function (ratio) {\n    var onFrameStartAngle = preStartAngle + ratio * diffStartAngle;\n    var onFrameEndAngle = preEndAngle + ratio * diffEndAngle;\n    return __assign(__assign({}, toAttrs), {\n      path:\n      // hack, 兼容 /examples/bar/basic/demo/radial-line.ts 动画\n      isEqual(pathCommands, ['M', 'A', 'A', 'Z']) ? getArcPath(center.x, center.y, radius, onFrameStartAngle, onFrameEndAngle) : getSectorPath(center.x, center.y, radius, onFrameStartAngle, onFrameEndAngle, innerRadius)\n    });\n  }, __assign(__assign({}, animateCfg), {\n    callback: function () {\n      // 将 path 保持原始态，否则会影响 setState() 的动画\n      shape.attr('path', path);\n      isFunction(animateCfg.callback) && animateCfg.callback();\n    }\n  }));\n}","map":{"version":3,"names":["getArcParams","isNumberEqual","isEqual","isFunction","getArcPath","getSectorPath","getAngle","startPoint","arcPath","_b","startAngle","endAngle","Math","PI","_a","__read","getArcStartPoint","path","length","getArcInfo","arcPaths","filter","command","radius","innerRadius","firstArcPathCommand","lastArcPathCommand","firstIndex","indexOf","lastIndex","firstStartPoint","lastStartPoint","firstStartAngle","firstEndAngle","_c","lastStartAngle","lastEndAngle","min","max","sectorPathUpdate","shape","animateCfg","cfg","toAttrs","coordinate","pathCommands","map","curStartAngle","curEndAngle","attr","preStartAngle","preEndAngle","center","getCenter","diffStartAngle","diffEndAngle","animate","ratio","onFrameStartAngle","onFrameEndAngle","__assign","x","y","callback"],"sources":["../../../src/animate/animation/sector-path-update.ts"],"sourcesContent":["import { getArcParams } from '@antv/g-canvas';\nimport { isNumberEqual, isEqual, isFunction } from '@antv/util';\n\nimport { IShape, PathCommand } from '../../dependents';\nimport { GAnimateCfg } from '../../interface';\nimport { AnimateExtraCfg } from '../interface';\n\nimport { getArcPath, getSectorPath } from '../../util/graphics';\n\nfunction getAngle(startPoint: number[], arcPath: PathCommand) {\n  let { startAngle, endAngle } = getArcParams(startPoint, arcPath);\n\n  if (!isNumberEqual(startAngle, -Math.PI * 0.5) && startAngle < -Math.PI * 0.5) {\n    startAngle += Math.PI * 2;\n  }\n  if (!isNumberEqual(endAngle, -Math.PI * 0.5) && endAngle < -Math.PI * 0.5) {\n    endAngle += Math.PI * 2;\n  }\n\n  if (arcPath[5] === 0) {\n    // 逆时针，需要将 startAngle 和 endAngle 转置，因为 G2 极坐标系为顺时针方向\n    [startAngle, endAngle] = [endAngle, startAngle];\n  }\n\n  if (isNumberEqual(startAngle, Math.PI * 1.5)) {\n    startAngle = Math.PI * -0.5;\n  }\n\n  // 当 startAngle, endAngle 接近相等时，不进行 endAngle = Math.PI * 1.5 防止变化从整个圆开始\n  if (isNumberEqual(endAngle, Math.PI * -0.5) && !isNumberEqual(startAngle, endAngle)) {\n    endAngle = Math.PI * 1.5;\n  }\n\n  return {\n    startAngle,\n    endAngle,\n  };\n}\n\nfunction getArcStartPoint(path: PathCommand) {\n  let startPoint;\n  if (path[0] === 'M' || path[0] === 'L') {\n    startPoint = [path[1], path[2]];\n  } else if (path[0] === 'a' || path[0] === 'A' || path[0] === 'C') {\n    startPoint = [path[path.length - 2], path[path.length - 1]];\n  }\n\n  return startPoint;\n}\n\n/**\n * path 存在以下情况\n * 1. 饼图不为整圆的 path，命令为 M, L, A, L, Z\n * 2. 饼图为整圆的 path，命令为 M, M, A, A, M, Z\n * 3. 环图不为整圆的 path，命令为 M, A, L, A, L, Z\n * 4. 环图为整圆的 path，命令为 M, A, A, M, A, A, M, Z\n * 5. radial-line, 不为整圆时的 path, 命令为 M, A, A, Z\n * 6. radial-line, 为整圆时的 path，命令为 M, A, A, A, A, Z\n * @param path theta 坐标系下圆弧的 path 命令\n */\nexport function getArcInfo(path: PathCommand[]) {\n  let startAngle;\n  let endAngle;\n\n  const arcPaths = path.filter((command) => {\n    return command[0] === 'A' || command[0] === 'a';\n  });\n\n  if (arcPaths.length === 0) {\n    return {\n      startAngle: 0,\n      endAngle: 0,\n      radius: 0,\n      innerRadius: 0,\n    };\n  }\n\n  const firstArcPathCommand = arcPaths[0];\n  const lastArcPathCommand = arcPaths.length > 1 ? arcPaths[1] : arcPaths[0];\n  const firstIndex = path.indexOf(firstArcPathCommand);\n  const lastIndex = path.indexOf(lastArcPathCommand);\n  const firstStartPoint = getArcStartPoint(path[firstIndex - 1]);\n  const lastStartPoint = getArcStartPoint(path[lastIndex - 1]);\n\n  const { startAngle: firstStartAngle, endAngle: firstEndAngle } = getAngle(firstStartPoint, firstArcPathCommand);\n  const { startAngle: lastStartAngle, endAngle: lastEndAngle } = getAngle(lastStartPoint, lastArcPathCommand);\n\n  if (isNumberEqual(firstStartAngle, lastStartAngle) && isNumberEqual(firstEndAngle, lastEndAngle)) {\n    startAngle = firstStartAngle;\n    endAngle = firstEndAngle;\n  } else {\n    startAngle = Math.min(firstStartAngle, lastStartAngle);\n    endAngle = Math.max(firstEndAngle, lastEndAngle);\n  }\n\n  let radius = firstArcPathCommand[1];\n  let innerRadius = arcPaths[arcPaths.length - 1][1];\n  if (radius < innerRadius) {\n    [radius, innerRadius] = [innerRadius, radius];\n  } else if (radius === innerRadius) {\n    innerRadius = 0;\n  }\n\n  return {\n    startAngle,\n    endAngle,\n    radius,\n    innerRadius,\n  };\n}\n\n/**\n * @ignore\n * 饼图更新动画\n * @param shape 文本图形\n * @param animateCfg\n * @param cfg\n */\nexport function sectorPathUpdate(shape: IShape, animateCfg: GAnimateCfg, cfg: AnimateExtraCfg) {\n  const { toAttrs, coordinate } = cfg;\n  const path = (toAttrs as { path: PathCommand[] }).path || [];\n  const pathCommands = path.map((command) => command[0]);\n\n  if (path.length < 1) return;\n\n  const { startAngle: curStartAngle, endAngle: curEndAngle, radius, innerRadius } = getArcInfo(path);\n  const { startAngle: preStartAngle, endAngle: preEndAngle } = getArcInfo(shape.attr('path'));\n\n  const center = coordinate.getCenter();\n  const diffStartAngle = curStartAngle - preStartAngle;\n  const diffEndAngle = curEndAngle - preEndAngle;\n  // 没有 diff 时直接返回最终 attrs，不需要额外动画\n  if (diffStartAngle === 0 && diffEndAngle === 0) {\n    shape.attr('path', path);\n    return;\n  }\n\n  shape.animate(\n    (ratio) => {\n      const onFrameStartAngle = preStartAngle + ratio * diffStartAngle;\n      const onFrameEndAngle = preEndAngle + ratio * diffEndAngle;\n      return {\n        ...toAttrs,\n        path:\n          // hack, 兼容 /examples/bar/basic/demo/radial-line.ts 动画\n          isEqual(pathCommands, ['M', 'A', 'A', 'Z'])\n            ? getArcPath(center.x, center.y, radius, onFrameStartAngle, onFrameEndAngle)\n            : getSectorPath(center.x, center.y, radius, onFrameStartAngle, onFrameEndAngle, innerRadius),\n      };\n    },\n    {\n      ...animateCfg,\n      callback: () => {\n        // 将 path 保持原始态，否则会影响 setState() 的动画\n        shape.attr('path', path);\n        isFunction(animateCfg.callback) && animateCfg.callback();\n      },\n    }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}