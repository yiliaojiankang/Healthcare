{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { each } from '@antv/util';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nfunction getPath(points, isInCircle, smooth, registeredShape, constraint) {\n  var path = [];\n  if (points.length) {\n    var topLinePoints_1 = []; // area 区域上部分\n    var bottomLinePoints_1 = []; // area 区域下部分\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point = points[i];\n      topLinePoints_1.push(point[1]);\n      bottomLinePoints_1.push(point[0]);\n    }\n    bottomLinePoints_1 = bottomLinePoints_1.reverse();\n    each([topLinePoints_1, bottomLinePoints_1], function (pointsData, index) {\n      var subPath = [];\n      var parsedPoints = registeredShape.parsePoints(pointsData);\n      var p1 = parsedPoints[0];\n      if (topLinePoints_1.length === 1 && bottomLinePoints_1.length === 1) {\n        // 都只有一个点，绘制一条竖线\n        subPath = index === 0 ? [['M', p1.x - 0.5, p1.y], ['L', p1.x + 0.5, p1.y]] : [['L', p1.x + 0.5, p1.y], ['L', p1.x - 0.5, p1.y]];\n      } else {\n        if (isInCircle) {\n          parsedPoints.push({\n            x: p1.x,\n            y: p1.y\n          });\n        }\n        if (smooth) {\n          subPath = getSplinePath(parsedPoints, false, constraint);\n        } else {\n          subPath = getLinePath(parsedPoints, false);\n        }\n        if (index > 0) {\n          subPath[0][0] = 'L';\n        }\n      }\n      path = path.concat(subPath);\n    });\n    path.push(['Z']);\n  }\n  return path;\n}\n/**\n * @ignore\n * Gets shape attrs\n * @param cfg\n * @param isStroke\n * @param smooth\n * @param registeredShape\n * @param [constraint]\n * @returns\n */\nexport function getShapeAttrs(cfg, isStroke, smooth, registeredShape, constraint) {\n  var attrs = getStyle(cfg, isStroke, !isStroke, 'lineWidth');\n  var connectNulls = cfg.connectNulls,\n    isInCircle = cfg.isInCircle,\n    points = cfg.points,\n    showSinglePoint = cfg.showSinglePoint;\n  var pathPoints = getPathPoints(points, connectNulls, showSinglePoint); // 根据 connectNulls 配置获取图形关键点\n  var path = [];\n  for (var i = 0, len = pathPoints.length; i < len; i++) {\n    var eachPoints = pathPoints[i];\n    path = path.concat(getPath(eachPoints, isInCircle, smooth, registeredShape, constraint));\n  }\n  attrs.path = path;\n  return attrs;\n}\n/**\n * @ignore\n * Gets constraint\n * @param coordinate\n * @returns constraint\n */\nexport function getConstraint(coordinate) {\n  var start = coordinate.start,\n    end = coordinate.end;\n  return [[start.x, end.y], [end.x, start.y]];\n}","map":{"version":3,"names":["each","getPathPoints","getStyle","getLinePath","getSplinePath","getPath","points","isInCircle","smooth","registeredShape","constraint","path","length","topLinePoints_1","bottomLinePoints_1","i","len","point","push","reverse","pointsData","index","subPath","parsedPoints","parsePoints","p1","x","y","concat","getShapeAttrs","cfg","isStroke","attrs","connectNulls","showSinglePoint","pathPoints","eachPoints","getConstraint","coordinate","start","end"],"sources":["../../../../src/geometry/shape/area/util.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { Coordinate, PathCommand } from '../../../dependents';\nimport { Point, Position, Shape, ShapeInfo } from '../../../interface';\n\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\n\nfunction getPath(\n  points: Point[],\n  isInCircle: boolean,\n  smooth: boolean,\n  registeredShape: Shape,\n  constraint?: Position[]\n): PathCommand[] {\n  let path = [];\n\n  if (points.length) {\n    const topLinePoints = []; // area 区域上部分\n    let bottomLinePoints = []; // area 区域下部分\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      topLinePoints.push(point[1]);\n      bottomLinePoints.push(point[0]);\n    }\n    bottomLinePoints = bottomLinePoints.reverse();\n\n    each([topLinePoints, bottomLinePoints], (pointsData, index) => {\n      let subPath = [];\n      const parsedPoints = registeredShape.parsePoints(pointsData);\n      const p1 = parsedPoints[0];\n\n      if (topLinePoints.length === 1 && bottomLinePoints.length === 1) {\n        // 都只有一个点，绘制一条竖线\n        subPath =\n          index === 0\n            ? [\n                ['M', p1.x - 0.5, p1.y],\n                ['L', p1.x + 0.5, p1.y],\n              ]\n            : [\n                ['L', p1.x + 0.5, p1.y],\n                ['L', p1.x - 0.5, p1.y],\n              ];\n      } else {\n        if (isInCircle) {\n          parsedPoints.push({ x: p1.x, y: p1.y });\n        }\n        if (smooth) {\n          subPath = getSplinePath(parsedPoints, false, constraint);\n        } else {\n          subPath = getLinePath(parsedPoints, false);\n        }\n        if (index > 0) {\n          subPath[0][0] = 'L';\n        }\n      }\n\n      path = path.concat(subPath);\n    });\n\n    path.push(['Z']);\n  }\n\n  return path;\n}\n\n/**\n * @ignore\n * Gets shape attrs\n * @param cfg\n * @param isStroke\n * @param smooth\n * @param registeredShape\n * @param [constraint]\n * @returns\n */\nexport function getShapeAttrs(\n  cfg: ShapeInfo,\n  isStroke: boolean,\n  smooth: boolean,\n  registeredShape: Shape,\n  constraint?: Position[]\n) {\n  const attrs = getStyle(cfg, isStroke, !isStroke, 'lineWidth');\n  const { connectNulls, isInCircle, points, showSinglePoint } = cfg;\n  const pathPoints = getPathPoints(points, connectNulls, showSinglePoint); // 根据 connectNulls 配置获取图形关键点\n\n  let path = [];\n  for (let i = 0, len = pathPoints.length; i < len; i++) {\n    const eachPoints = pathPoints[i];\n    path = path.concat(getPath(eachPoints, isInCircle, smooth, registeredShape, constraint));\n  }\n  attrs.path = path;\n\n  return attrs;\n}\n\n/**\n * @ignore\n * Gets constraint\n * @param coordinate\n * @returns constraint\n */\nexport function getConstraint(coordinate: Coordinate): Position[] {\n  const { start, end } = coordinate;\n  return [\n    [start.x, end.y],\n    [end.x, start.y],\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}