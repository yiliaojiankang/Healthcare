{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n// @ts-ignore\nimport { clamp, interpolate as _interpolate } from \"../util\";\nimport Point from \"./point\";\n\n/**\n * An `EdgeInset` object represents screen space padding applied to the edges of the viewport.\n * This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements\n * on top of the map and having the vanishing point shift as UI elements resize.\n *\n * @param {number} [top=0]\n * @param {number} [bottom=0]\n * @param {number} [left=0]\n * @param {number} [right=0]\n */\nvar EdgeInsets = /*#__PURE__*/function () {\n  function EdgeInsets() {\n    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var bottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, EdgeInsets);\n    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {\n      throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');\n    }\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Interpolates the inset in-place.\n   * This maintains the current inset value for any inset not present in `target`.\n   *\n   * @param {PaddingOptions} target\n   * @param {number} t\n   * @returns {EdgeInsets}\n   * @memberof EdgeInsets\n   */\n  _createClass(EdgeInsets, [{\n    key: \"interpolate\",\n    value: function interpolate(start, target, t) {\n      if (target.top != null && start.top != null) {\n        this.top = _interpolate(start.top, target.top, t);\n      }\n      if (target.bottom != null && start.bottom != null) {\n        this.bottom = _interpolate(start.bottom, target.bottom, t);\n      }\n      if (target.left != null && start.left != null) {\n        this.left = _interpolate(start.left, target.left, t);\n      }\n      if (target.right != null && start.right != null) {\n        this.right = _interpolate(start.right, target.right, t);\n      }\n      return this;\n    }\n\n    /**\n     * Utility method that computes the new apprent center or vanishing point after applying insets.\n     * This is in pixels and with the top left being (0.0) and +y being downwards.\n     *\n     * @param {number} width\n     * @param {number} height\n     * @returns {Point}\n     * @memberof EdgeInsets\n     */\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(width, height) {\n      // Clamp insets so they never overflow width/height and always calculate a valid center\n      var x = clamp((this.left + width - this.right) / 2, 0, width);\n      var y = clamp((this.top + height - this.bottom) / 2, 0, height);\n      return new Point(x, y);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new EdgeInsets(this.top, this.bottom, this.left, this.right);\n    }\n\n    /**\n     * Returns the current sdtate as json, useful when you want to have a\n     * read-only representation of the inset.\n     *\n     * @returns {PaddingOptions}\n     * @memberof EdgeInsets\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        top: this.top,\n        bottom: this.bottom,\n        left: this.left,\n        right: this.right\n      };\n    }\n  }]);\n  return EdgeInsets;\n}();\nexport { EdgeInsets as default };","map":{"version":3,"names":["_classCallCheck","_createClass","clamp","interpolate","_interpolate","Point","EdgeInsets","top","arguments","length","undefined","bottom","left","right","isNaN","Error","key","value","start","target","t","getCenter","width","height","x","y","equals","other","clone","toJSON","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-map/es/geo/edge_insets.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n// @ts-ignore\nimport { clamp, interpolate as _interpolate } from \"../util\";\nimport Point from \"./point\";\n\n/**\n * An `EdgeInset` object represents screen space padding applied to the edges of the viewport.\n * This shifts the apprent center or the vanishing point of the map. This is useful for adding floating UI elements\n * on top of the map and having the vanishing point shift as UI elements resize.\n *\n * @param {number} [top=0]\n * @param {number} [bottom=0]\n * @param {number} [left=0]\n * @param {number} [right=0]\n */\nvar EdgeInsets = /*#__PURE__*/function () {\n  function EdgeInsets() {\n    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var bottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, EdgeInsets);\n    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {\n      throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');\n    }\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Interpolates the inset in-place.\n   * This maintains the current inset value for any inset not present in `target`.\n   *\n   * @param {PaddingOptions} target\n   * @param {number} t\n   * @returns {EdgeInsets}\n   * @memberof EdgeInsets\n   */\n  _createClass(EdgeInsets, [{\n    key: \"interpolate\",\n    value: function interpolate(start, target, t) {\n      if (target.top != null && start.top != null) {\n        this.top = _interpolate(start.top, target.top, t);\n      }\n      if (target.bottom != null && start.bottom != null) {\n        this.bottom = _interpolate(start.bottom, target.bottom, t);\n      }\n      if (target.left != null && start.left != null) {\n        this.left = _interpolate(start.left, target.left, t);\n      }\n      if (target.right != null && start.right != null) {\n        this.right = _interpolate(start.right, target.right, t);\n      }\n      return this;\n    }\n\n    /**\n     * Utility method that computes the new apprent center or vanishing point after applying insets.\n     * This is in pixels and with the top left being (0.0) and +y being downwards.\n     *\n     * @param {number} width\n     * @param {number} height\n     * @returns {Point}\n     * @memberof EdgeInsets\n     */\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(width, height) {\n      // Clamp insets so they never overflow width/height and always calculate a valid center\n      var x = clamp((this.left + width - this.right) / 2, 0, width);\n      var y = clamp((this.top + height - this.bottom) / 2, 0, height);\n      return new Point(x, y);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new EdgeInsets(this.top, this.bottom, this.left, this.right);\n    }\n\n    /**\n     * Returns the current sdtate as json, useful when you want to have a\n     * read-only representation of the inset.\n     *\n     * @returns {PaddingOptions}\n     * @memberof EdgeInsets\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        top: this.top,\n        bottom: this.bottom,\n        left: this.left,\n        right: this.right\n      };\n    }\n  }]);\n  return EdgeInsets;\n}();\nexport { EdgeInsets as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}