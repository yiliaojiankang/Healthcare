{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { PolygonExtrudeTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_frag.glsl' */\nvar polygonExtrudeFrag = \"layout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nin vec4 v_Color;\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\nout vec4 outputColor;\\nvoid main() {\\n\\n     // top face\\n    if(u_topsurface < 1.0) {\\n      discard;\\n    }\\n\\n    outputColor = v_Color;\\n  \\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_vert.glsl' */\nvar polygonExtrudeVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec3 a_uvs;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nout vec4 v_Color;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n \\nfloat isSide = a_Position.z;\\n float topU = a_uvs[0];\\n float topV = 1.0 - a_uvs[1];\\n float sidey = a_uvs[2];\\n\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  float lightWeight = calc_lighting(pos);\\n\\n  vec4 project_pos = project_position(pos);\\n\\n  if(u_heightfixed > 0.0) { // \\u5224\\u65AD\\u51E0\\u4F55\\u4F53\\u662F\\u5426\\u56FA\\u5B9A\\u9AD8\\u5EA6\\n    project_pos.z = a_Position.z * a_Size;\\n    project_pos.z += u_raisingHeight;\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\\n      project_pos.z *= mapboxZoomScale;\\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\\n    }\\n  }\\n\\n\\n gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n\\n  // Tip: \\u90E8\\u5206\\u673A\\u578B GPU \\u8BA1\\u7B97\\u7CBE\\u5EA6\\u517C\\u5BB9\\n  if(isSide < 0.999) {\\n    // side face\\n    // if(u_sidesurface < 1.0) {\\n    //   discard;\\n    // }\\n\\n    if(u_linearColor == 1.0) {\\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\\n      linearColor.rgb *= lightWeight;\\n      v_Color = linearColor;\\n    } else {\\n      v_Color = a_Color;\\n    }\\n\\n  } else {\\n    v_Color = a_Color;\\n  }\\n\\n  v_Color = vec4(v_Color.rgb * lightWeight, v_Color.w * opacity);\\n\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\"; // extrude\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrudetex_frag.glsl' */\nvar polygonExtrudeTexFrag = \"uniform sampler2D u_texture;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nin vec4 v_Color;\\nin vec3 v_uvs;\\nin vec2 v_texture_data;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\n\\nout vec4 outputColor;\\n\\nvoid main() {\\n  float opacity = u_opacity;\\n  float isSide = v_texture_data.x;\\n  float lightWeight = v_texture_data.y;\\n  float topU = v_uvs[0];\\n  float topV = 1.0 - v_uvs[1];\\n  float sidey = v_uvs[2];\\n\\n  outputColor = texture(SAMPLER_2D(u_texture), vec2(topU, topV));\\n  // Tip: \\u90E8\\u5206\\u673A\\u578B GPU \\u8BA1\\u7B97\\u7CBE\\u5EA6\\u517C\\u5BB9\\n  if (isSide < 0.999) {// \\u662F\\u5426\\u662F\\u8FB9\\u7F18\\n    // side face\\n    if (u_sidesurface < 1.0) {\\n      discard;\\n    }\\n\\n    if (u_linearColor == 1.0) {\\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\\n      linearColor.rgb *= lightWeight;\\n      outputColor = linearColor;\\n    } else {\\n      outputColor = v_Color;\\n    }\\n  } else {\\n     // top face\\n    if (u_topsurface < 1.0) {\\n      discard;\\n    }\\n  }\\n  \\n  outputColor.a *= opacity;\\n  outputColor = filterColor(outputColor);\\n}\\n\"; // texture\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrudetex_vert.glsl' */\nvar polygonExtrudeTexVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec3 a_uvs;\\n\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nout vec4 v_Color;\\nout vec3 v_uvs;\\nout vec2 v_texture_data;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n \\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  float lightWeight = calc_lighting(pos);\\n  vec4 project_pos = project_position(pos);\\n  v_uvs = a_uvs;\\n  v_Color = a_Color;\\n  v_Color.a *= opacity;\\n   \\n  v_texture_data = vec2(a_Position.z, lightWeight);\\n\\n  if(u_heightfixed > 0.0) { // \\u5224\\u65AD\\u51E0\\u4F55\\u4F53\\u662F\\u5426\\u56FA\\u5B9A\\u9AD8\\u5EA6\\n    project_pos.z = a_Position.z * a_Size;\\n    project_pos.z += u_raisingHeight;\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\\n      project_pos.z *= mapboxZoomScale;\\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\\n    }\\n  }\\n\\n\\n    gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n\\n\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\"; // extrude picking\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nimport { loadImage } from \"../../utils/load-image\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_picklight_frag.glsl' */\nvar polygonExtrudePickLightFrag = \"\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nin vec4 v_Color;\\nin vec3 v_uvs;\\nin vec2 v_texture_data;\\nout vec4 outputColor;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float isSide =  v_texture_data.x;\\n  float sidey = v_uvs[2];\\n  float lightWeight = v_texture_data.y;\\n\\n  // Tip: \\u90E8\\u5206\\u673A\\u578B GPU \\u8BA1\\u7B97\\u7CBE\\u5EA6\\u517C\\u5BB9\\n  if(isSide < 0.999) {\\n    // side face\\n    if(u_sidesurface < 1.0) {\\n      discard;\\n    }\\n    \\n    if( u_linearColor == 1.0) {\\n      // side use linear\\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\\n      linearColor.rgb *= lightWeight;\\n      outputColor = linearColor;\\n    } else {\\n      // side notuse linear\\n       outputColor = v_Color;\\n    }\\n  } else {\\n    // top face\\n    if(u_topsurface < 1.0) {\\n      discard;\\n    }\\n    outputColor = v_Color;\\n  }\\n\\n  outputColor = filterColorAlpha(outputColor, lightWeight);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_picklight_vert.glsl' */\nvar polygonExtrudePickLightVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec3 a_uvs;\\n\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nout vec4 v_Color;\\nout vec3 v_uvs;\\nout vec2 v_texture_data;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n\\n\\n  v_uvs = a_uvs;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  vec4 project_pos = project_position(pos);\\n\\n  if(u_heightfixed > 0.0) { // \\u5224\\u65AD\\u51E0\\u4F55\\u4F53\\u662F\\u5426\\u56FA\\u5B9A\\u9AD8\\u5EA6\\n    project_pos.z = a_Position.z * a_Size;\\n    project_pos.z += u_raisingHeight;\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\\n      project_pos.z *= mapboxZoomScale;\\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\\n    }\\n  }\\n\\n  gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n  float lightWeight = calc_lighting(pos);\\n  v_texture_data = vec2(a_Position.z,lightWeight);\\n\\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w * opacity);\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar ExtrudeModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(ExtrudeModel, _BaseModel);\n  var _super = _createSuper(ExtrudeModel);\n  function ExtrudeModel() {\n    _classCallCheck(this, ExtrudeModel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExtrudeModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var commoninfo = this.getCommonUniformsInfo();\n      var attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n      this.updateStyleUnifoms();\n      return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n    }\n  }, {\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        mapTexture = _ref.mapTexture,\n        _ref$heightfixed = _ref.heightfixed,\n        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,\n        _ref$raisingHeight = _ref.raisingHeight,\n        raisingHeight = _ref$raisingHeight === void 0 ? 0 : _ref$raisingHeight,\n        _ref$topsurface = _ref.topsurface,\n        topsurface = _ref$topsurface === void 0 ? true : _ref$topsurface,\n        _ref$sidesurface = _ref.sidesurface,\n        sidesurface = _ref$sidesurface === void 0 ? true : _ref$sidesurface,\n        sourceColor = _ref.sourceColor,\n        targetColor = _ref.targetColor;\n\n      // 转化渐变色\n      var useLinearColor = 0; // 默认不生效\n      var sourceColorArr = [1, 1, 1, 1];\n      var targetColorArr = [1, 1, 1, 1];\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n      var commonOptions = {\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_linearColor: useLinearColor,\n        // 控制侧面和顶面的显示隐藏\n        u_topsurface: Number(topsurface),\n        u_sidesurface: Number(sidesurface),\n        u_heightfixed: Number(heightfixed),\n        u_raisingHeight: Number(raisingHeight)\n      };\n      if (mapTexture && this.texture) {\n        // @ts-ignore\n        commonOptions.u_texture = this.texture;\n        this.textures = [this.texture];\n      }\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.loadTexture();\n            case 2:\n              return _context.abrupt(\"return\", this.buildModels());\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$getShaders, frag, vert, type, model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;\n              this.initUniformsBuffer();\n              _context2.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: type,\n                vertexShader: vert,\n                fragmentShader: frag,\n                depth: {\n                  enable: true\n                },\n                inject: this.getInject(),\n                triangulation: PolygonExtrudeTriangulation\n              });\n            case 4:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      var _ref2 = this.layer.getLayerConfig(),\n        pickLight = _ref2.pickLight,\n        mapTexture = _ref2.mapTexture;\n      if (mapTexture) {\n        return {\n          frag: polygonExtrudeTexFrag,\n          vert: polygonExtrudeTexVert,\n          type: 'polygonExtrudeTexture'\n        };\n      }\n      if (pickLight) {\n        return {\n          frag: polygonExtrudePickLightFrag,\n          vert: polygonExtrudePickLightVert,\n          type: 'polygonExtrudePickLight'\n        };\n      } else {\n        return {\n          frag: polygonExtrudeFrag,\n          vert: polygonExtrudeVert,\n          type: 'polygonExtrude'\n        };\n      }\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n      this.textures = [];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var bbox = this.layer.getSource().extent;\n      var bounds = bbox;\n      var layerCenter = this.layer.coordCenter || this.layer.getSource().center;\n      var lngLen = bounds[2] - bounds[0];\n      var latLen = bounds[3] - bounds[1];\n      if (this.mapService.version === 'GAODE2.x') {\n        // @ts-ignore\n        var _this$mapService$coor = this.mapService.coordToAMap2RelativeCoordinates([bbox[0], bbox[1]], layerCenter),\n          _this$mapService$coor2 = _slicedToArray(_this$mapService$coor, 2),\n          minX = _this$mapService$coor2[0],\n          minY = _this$mapService$coor2[1];\n        // @ts-ignore\n        var _this$mapService$coor3 = this.mapService.coordToAMap2RelativeCoordinates([bbox[2], bbox[3]], layerCenter),\n          _this$mapService$coor4 = _slicedToArray(_this$mapService$coor3, 2),\n          maxX = _this$mapService$coor4[0],\n          maxY = _this$mapService$coor4[1];\n        lngLen = maxX - minX;\n        latLen = maxY - minY;\n        bounds = [minX, minY, maxX, maxY];\n      }\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uvs',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_uvs',\n          shaderLocation: ShaderLocation.UV,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex) {\n            var lng = vertex[0];\n            var lat = vertex[1];\n            // console.log((lng - bounds[0]) / lngLen, (lat - bounds[1]) / latLen, vertex[4])\n            // 临时 兼容高德V2\n            return [(lng - bounds[0]) / lngLen, (lat - bounds[1]) / latLen, vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function () {\n      var _loadTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _ref3, mapTexture, createTexture2D, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref3 = this.layer.getLayerConfig(), mapTexture = _ref3.mapTexture;\n              createTexture2D = this.rendererService.createTexture2D;\n              this.texture = createTexture2D({\n                height: 1,\n                width: 1\n              });\n              if (!mapTexture) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 6;\n              return loadImage(mapTexture);\n            case 6:\n              image = _context3.sent;\n              this.texture = createTexture2D({\n                data: image,\n                width: image.width,\n                height: image.height,\n                wrapS: gl.CLAMP_TO_EDGE,\n                wrapT: gl.CLAMP_TO_EDGE,\n                min: gl.LINEAR,\n                mag: gl.LINEAR\n              });\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function loadTexture() {\n        return _loadTexture.apply(this, arguments);\n      }\n      return loadTexture;\n    }()\n  }]);\n  return ExtrudeModel;\n}(BaseModel);\nexport { ExtrudeModel as default };","map":{"version":3,"names":["_slicedToArray","_asyncToGenerator","_objectSpread","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_regeneratorRuntime","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AttributeType","gl","rgb2arr","BaseModel","PolygonExtrudeTriangulation","polygonExtrudeFrag","polygonExtrudeVert","polygonExtrudeTexFrag","polygonExtrudeTexVert","ShaderLocation","loadImage","polygonExtrudePickLightFrag","polygonExtrudePickLightVert","ExtrudeModel","_BaseModel","_super","key","value","getUninforms","commoninfo","getCommonUniformsInfo","attributeInfo","getUniformsBufferInfo","getStyleAttribute","updateStyleUnifoms","uniformsOption","_ref","layer","getLayerConfig","mapTexture","_ref$heightfixed","heightfixed","_ref$raisingHeight","raisingHeight","_ref$topsurface","topsurface","_ref$sidesurface","sidesurface","sourceColor","targetColor","useLinearColor","sourceColorArr","targetColorArr","commonOptions","u_sourceColor","u_targetColor","u_linearColor","u_topsurface","Number","u_sidesurface","u_heightfixed","u_raisingHeight","texture","u_texture","textures","commonBufferInfo","_initModels","mark","_callee","wrap","_callee$","_context","prev","next","loadTexture","abrupt","buildModels","stop","initModels","_buildModels","_callee2","_this$getShaders","frag","vert","type","model","_callee2$","_context2","getShaders","initUniformsBuffer","buildLayerModel","moduleName","vertexShader","fragmentShader","depth","enable","inject","getInject","triangulation","sent","_ref2","pickLight","clearModels","_this$texture","destroy","registerBuiltinAttributes","bbox","getSource","extent","bounds","layerCenter","coordCenter","center","lngLen","latLen","mapService","version","_this$mapService$coor","coordToAMap2RelativeCoordinates","_this$mapService$coor2","minX","minY","_this$mapService$coor3","_this$mapService$coor4","maxX","maxY","styleAttributeService","registerStyleAttribute","name","Attribute","descriptor","shaderLocation","UV","buffer","usage","STATIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","lng","lat","NORMAL","attributeIdx","normal","SIZE","DYNAMIC_DRAW","_feature$size","Array","isArray","_loadTexture","_callee3","_ref3","createTexture2D","image","_callee3$","_context3","rendererService","height","width","wrapS","CLAMP_TO_EDGE","wrapT","min","LINEAR","mag","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/polygon/models/extrude.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { PolygonExtrudeTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_frag.glsl' */\nvar polygonExtrudeFrag = \"layout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nin vec4 v_Color;\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\nout vec4 outputColor;\\nvoid main() {\\n\\n     // top face\\n    if(u_topsurface < 1.0) {\\n      discard;\\n    }\\n\\n    outputColor = v_Color;\\n  \\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_vert.glsl' */\nvar polygonExtrudeVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec3 a_uvs;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nout vec4 v_Color;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n \\nfloat isSide = a_Position.z;\\n float topU = a_uvs[0];\\n float topV = 1.0 - a_uvs[1];\\n float sidey = a_uvs[2];\\n\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  float lightWeight = calc_lighting(pos);\\n\\n  vec4 project_pos = project_position(pos);\\n\\n  if(u_heightfixed > 0.0) { // \\u5224\\u65AD\\u51E0\\u4F55\\u4F53\\u662F\\u5426\\u56FA\\u5B9A\\u9AD8\\u5EA6\\n    project_pos.z = a_Position.z * a_Size;\\n    project_pos.z += u_raisingHeight;\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\\n      project_pos.z *= mapboxZoomScale;\\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\\n    }\\n  }\\n\\n\\n gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n\\n  // Tip: \\u90E8\\u5206\\u673A\\u578B GPU \\u8BA1\\u7B97\\u7CBE\\u5EA6\\u517C\\u5BB9\\n  if(isSide < 0.999) {\\n    // side face\\n    // if(u_sidesurface < 1.0) {\\n    //   discard;\\n    // }\\n\\n    if(u_linearColor == 1.0) {\\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\\n      linearColor.rgb *= lightWeight;\\n      v_Color = linearColor;\\n    } else {\\n      v_Color = a_Color;\\n    }\\n\\n  } else {\\n    v_Color = a_Color;\\n  }\\n\\n  v_Color = vec4(v_Color.rgb * lightWeight, v_Color.w * opacity);\\n\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\"; // extrude\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrudetex_frag.glsl' */\nvar polygonExtrudeTexFrag = \"uniform sampler2D u_texture;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nin vec4 v_Color;\\nin vec3 v_uvs;\\nin vec2 v_texture_data;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\n\\nout vec4 outputColor;\\n\\nvoid main() {\\n  float opacity = u_opacity;\\n  float isSide = v_texture_data.x;\\n  float lightWeight = v_texture_data.y;\\n  float topU = v_uvs[0];\\n  float topV = 1.0 - v_uvs[1];\\n  float sidey = v_uvs[2];\\n\\n  outputColor = texture(SAMPLER_2D(u_texture), vec2(topU, topV));\\n  // Tip: \\u90E8\\u5206\\u673A\\u578B GPU \\u8BA1\\u7B97\\u7CBE\\u5EA6\\u517C\\u5BB9\\n  if (isSide < 0.999) {// \\u662F\\u5426\\u662F\\u8FB9\\u7F18\\n    // side face\\n    if (u_sidesurface < 1.0) {\\n      discard;\\n    }\\n\\n    if (u_linearColor == 1.0) {\\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\\n      linearColor.rgb *= lightWeight;\\n      outputColor = linearColor;\\n    } else {\\n      outputColor = v_Color;\\n    }\\n  } else {\\n     // top face\\n    if (u_topsurface < 1.0) {\\n      discard;\\n    }\\n  }\\n  \\n  outputColor.a *= opacity;\\n  outputColor = filterColor(outputColor);\\n}\\n\"; // texture\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrudetex_vert.glsl' */\nvar polygonExtrudeTexVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec3 a_uvs;\\n\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nout vec4 v_Color;\\nout vec3 v_uvs;\\nout vec2 v_texture_data;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n \\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  float lightWeight = calc_lighting(pos);\\n  vec4 project_pos = project_position(pos);\\n  v_uvs = a_uvs;\\n  v_Color = a_Color;\\n  v_Color.a *= opacity;\\n   \\n  v_texture_data = vec2(a_Position.z, lightWeight);\\n\\n  if(u_heightfixed > 0.0) { // \\u5224\\u65AD\\u51E0\\u4F55\\u4F53\\u662F\\u5426\\u56FA\\u5B9A\\u9AD8\\u5EA6\\n    project_pos.z = a_Position.z * a_Size;\\n    project_pos.z += u_raisingHeight;\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\\n      project_pos.z *= mapboxZoomScale;\\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\\n    }\\n  }\\n\\n\\n    gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n\\n\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\"; // extrude picking\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nimport { loadImage } from \"../../utils/load-image\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_picklight_frag.glsl' */\nvar polygonExtrudePickLightFrag = \"\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nin vec4 v_Color;\\nin vec3 v_uvs;\\nin vec2 v_texture_data;\\nout vec4 outputColor;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float isSide =  v_texture_data.x;\\n  float sidey = v_uvs[2];\\n  float lightWeight = v_texture_data.y;\\n\\n  // Tip: \\u90E8\\u5206\\u673A\\u578B GPU \\u8BA1\\u7B97\\u7CBE\\u5EA6\\u517C\\u5BB9\\n  if(isSide < 0.999) {\\n    // side face\\n    if(u_sidesurface < 1.0) {\\n      discard;\\n    }\\n    \\n    if( u_linearColor == 1.0) {\\n      // side use linear\\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\\n      linearColor.rgb *= lightWeight;\\n      outputColor = linearColor;\\n    } else {\\n      // side notuse linear\\n       outputColor = v_Color;\\n    }\\n  } else {\\n    // top face\\n    if(u_topsurface < 1.0) {\\n      discard;\\n    }\\n    outputColor = v_Color;\\n  }\\n\\n  outputColor = filterColorAlpha(outputColor, lightWeight);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_picklight_vert.glsl' */\nvar polygonExtrudePickLightVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec3 a_uvs;\\n\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  float u_linearColor;\\n  float u_topsurface;\\n  float u_sidesurface;\\n  float u_heightfixed; // \\u9ED8\\u8BA4\\u4E0D\\u56FA\\u5B9A\\n  float u_raisingHeight;\\n};\\n\\nout vec4 v_Color;\\nout vec3 v_uvs;\\nout vec2 v_texture_data;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n\\n\\n  v_uvs = a_uvs;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  vec4 project_pos = project_position(pos);\\n\\n  if(u_heightfixed > 0.0) { // \\u5224\\u65AD\\u51E0\\u4F55\\u4F53\\u662F\\u5426\\u56FA\\u5B9A\\u9AD8\\u5EA6\\n    project_pos.z = a_Position.z * a_Size;\\n    project_pos.z += u_raisingHeight;\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\\n      project_pos.z *= mapboxZoomScale;\\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\\n    }\\n  }\\n\\n  gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n  float lightWeight = calc_lighting(pos);\\n  v_texture_data = vec2(a_Position.z,lightWeight);\\n\\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w * opacity);\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar ExtrudeModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(ExtrudeModel, _BaseModel);\n  var _super = _createSuper(ExtrudeModel);\n  function ExtrudeModel() {\n    _classCallCheck(this, ExtrudeModel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExtrudeModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var commoninfo = this.getCommonUniformsInfo();\n      var attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n      this.updateStyleUnifoms();\n      return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n    }\n  }, {\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        mapTexture = _ref.mapTexture,\n        _ref$heightfixed = _ref.heightfixed,\n        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,\n        _ref$raisingHeight = _ref.raisingHeight,\n        raisingHeight = _ref$raisingHeight === void 0 ? 0 : _ref$raisingHeight,\n        _ref$topsurface = _ref.topsurface,\n        topsurface = _ref$topsurface === void 0 ? true : _ref$topsurface,\n        _ref$sidesurface = _ref.sidesurface,\n        sidesurface = _ref$sidesurface === void 0 ? true : _ref$sidesurface,\n        sourceColor = _ref.sourceColor,\n        targetColor = _ref.targetColor;\n\n      // 转化渐变色\n      var useLinearColor = 0; // 默认不生效\n      var sourceColorArr = [1, 1, 1, 1];\n      var targetColorArr = [1, 1, 1, 1];\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n      var commonOptions = {\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_linearColor: useLinearColor,\n        // 控制侧面和顶面的显示隐藏\n        u_topsurface: Number(topsurface),\n        u_sidesurface: Number(sidesurface),\n        u_heightfixed: Number(heightfixed),\n        u_raisingHeight: Number(raisingHeight)\n      };\n      if (mapTexture && this.texture) {\n        // @ts-ignore\n        commonOptions.u_texture = this.texture;\n        this.textures = [this.texture];\n      }\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.loadTexture();\n            case 2:\n              return _context.abrupt(\"return\", this.buildModels());\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$getShaders, frag, vert, type, model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;\n              this.initUniformsBuffer();\n              _context2.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: type,\n                vertexShader: vert,\n                fragmentShader: frag,\n                depth: {\n                  enable: true\n                },\n                inject: this.getInject(),\n                triangulation: PolygonExtrudeTriangulation\n              });\n            case 4:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      var _ref2 = this.layer.getLayerConfig(),\n        pickLight = _ref2.pickLight,\n        mapTexture = _ref2.mapTexture;\n      if (mapTexture) {\n        return {\n          frag: polygonExtrudeTexFrag,\n          vert: polygonExtrudeTexVert,\n          type: 'polygonExtrudeTexture'\n        };\n      }\n      if (pickLight) {\n        return {\n          frag: polygonExtrudePickLightFrag,\n          vert: polygonExtrudePickLightVert,\n          type: 'polygonExtrudePickLight'\n        };\n      } else {\n        return {\n          frag: polygonExtrudeFrag,\n          vert: polygonExtrudeVert,\n          type: 'polygonExtrude'\n        };\n      }\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n      this.textures = [];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var bbox = this.layer.getSource().extent;\n      var bounds = bbox;\n      var layerCenter = this.layer.coordCenter || this.layer.getSource().center;\n      var lngLen = bounds[2] - bounds[0];\n      var latLen = bounds[3] - bounds[1];\n      if (this.mapService.version === 'GAODE2.x') {\n        // @ts-ignore\n        var _this$mapService$coor = this.mapService.coordToAMap2RelativeCoordinates([bbox[0], bbox[1]], layerCenter),\n          _this$mapService$coor2 = _slicedToArray(_this$mapService$coor, 2),\n          minX = _this$mapService$coor2[0],\n          minY = _this$mapService$coor2[1];\n        // @ts-ignore\n        var _this$mapService$coor3 = this.mapService.coordToAMap2RelativeCoordinates([bbox[2], bbox[3]], layerCenter),\n          _this$mapService$coor4 = _slicedToArray(_this$mapService$coor3, 2),\n          maxX = _this$mapService$coor4[0],\n          maxY = _this$mapService$coor4[1];\n        lngLen = maxX - minX;\n        latLen = maxY - minY;\n        bounds = [minX, minY, maxX, maxY];\n      }\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uvs',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_uvs',\n          shaderLocation: ShaderLocation.UV,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex) {\n            var lng = vertex[0];\n            var lat = vertex[1];\n            // console.log((lng - bounds[0]) / lngLen, (lat - bounds[1]) / latLen, vertex[4])\n            // 临时 兼容高德V2\n            return [(lng - bounds[0]) / lngLen, (lat - bounds[1]) / latLen, vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function () {\n      var _loadTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _ref3, mapTexture, createTexture2D, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref3 = this.layer.getLayerConfig(), mapTexture = _ref3.mapTexture;\n              createTexture2D = this.rendererService.createTexture2D;\n              this.texture = createTexture2D({\n                height: 1,\n                width: 1\n              });\n              if (!mapTexture) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 6;\n              return loadImage(mapTexture);\n            case 6:\n              image = _context3.sent;\n              this.texture = createTexture2D({\n                data: image,\n                width: image.width,\n                height: image.height,\n                wrapS: gl.CLAMP_TO_EDGE,\n                wrapT: gl.CLAMP_TO_EDGE,\n                min: gl.LINEAR,\n                mag: gl.LINEAR\n              });\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function loadTexture() {\n        return _loadTexture.apply(this, arguments);\n      }\n      return loadTexture;\n    }()\n  }]);\n  return ExtrudeModel;\n}(BaseModel);\nexport { ExtrudeModel as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}