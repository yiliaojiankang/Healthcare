{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { LineArcTriangulation } from \"../../core/triangulation\";\nimport { EARTH_RADIUS } from \"../../earth/utils\";\n// arc3d line layer\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\n/* babel-plugin-inline-import '../shaders/arc3d/line_arc_3d_frag.glsl' */\nvar arc3d_line_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform sampler2D u_texture;\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_globel;\\n  float u_globel_radius;\\n  float u_global_height: 10;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\n\\n// varying vec2 v_normal;\\nin vec4 v_dash_array;\\nin vec4 v_color;\\nin vec4 v_line_data;\\nin float v_segmentIndex;\\nin vec2 v_iconMapUV;\\n\\nout vec4 outputColor;\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = v_line_data.g; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  outputColor = v_color;\\n\\n  if(u_line_type == LineTypeDash) {\\n    float flag = 0.;\\n    float dashLength = mod(d_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      flag = 1.;\\n    }\\n    outputColor.a *=flag;\\n  }\\n\\n  if(u_animate.x == Animate && u_line_texture != LineTexture) {\\n      animateSpeed = u_time / u_animate.y;\\n      float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + u_time / u_animate.y);\\n\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      outputColor.a *= alpha;\\n\\n      // u_animate \\n      // x enable\\n      // y duration\\n      // z interval\\n      // w trailLength\\n  }\\n\\n  if(u_line_texture == LineTexture && u_line_type != LineTypeDash) { // while load texture\\n    // float arcRadio = smoothstep( 0.0, 1.0, (v_segmentIndex / segmentNumber));\\n    float arcRadio = v_segmentIndex / (segmentNumber - 1.0);\\n    float count = v_line_data.b; // // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float time = 0.0;\\n    if(u_animate.x == Animate) {\\n      time = u_time / u_animate.y;\\n    }\\n    float redioCount = arcRadio * count;\\n\\n    float u = fract(redioCount - time);\\n\\n    float v = v_line_data.a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    if(u_animate.x == Animate) {\\n      float currentPlane = floor(redioCount - time);\\n      float textureStep = floor(count * u_animate.z);\\n      float a = mod(currentPlane, textureStep);\\n      if(a < textureStep - 1.0) {\\n        pattern = vec4(0.0);\\n      }\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n          discard;\\n        } else {\\n          outputColor = filterColor(pattern);\\n        }\\n    }\\n\\n  } else {\\n    outputColor = filterColor(outputColor);\\n  }\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/arc3d/line_arc_3d_vert.glsl' */\nvar arc3d_line_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 12) in vec4 a_Instance;\\nlayout(location = 14) in vec2 a_iconMapUV;\\n\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_globel;\\n  float u_globel_radius;\\n  float u_global_height: 10;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\nout vec4 v_color;\\nout vec4 v_dash_array;\\nout float v_segmentIndex;\\nout vec2 v_iconMapUV;\\nout vec4 v_line_data;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat maps (float value, float start1, float stop1, float start2, float stop2) {\\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return smoothstep(0.0, 1.0, index / (segmentNumber - 1.0));\\n}\\n\\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\\n  vec2 x = mix(source, target, ratio);\\n  vec2 center = mix(source, target, 0.5);\\n  float dSourceCenter = distance(source, center);\\n  float dXCenter = distance(x, center);\\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\\n}\\n\\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\\n  float vertex_height = paraboloid(source, target, segmentRatio);\\n\\n  return vec3(\\n    mix(source, target, segmentRatio),\\n    sqrt(max(0.0, vertex_height))\\n  );\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  return reverse_offset_normal(vec3(dir_screenspace,1.0)).xy * sign(offset_direction);\\n}\\n\\nfloat torad(float deg) {\\n  return (deg / 180.0) * acos(-1.0);\\n}\\n\\nvec3 lglt2xyz(vec2 lnglat) {\\n  float pi = 3.1415926;\\n  // + Math.PI/2 \\u662F\\u4E3A\\u4E86\\u5BF9\\u9F50\\u5750\\u6807\\n  float lng = torad(lnglat.x) + pi / 2.0;\\n  float lat = torad(lnglat.y);\\n\\n  // \\u624B\\u52A8\\u589E\\u52A0\\u4E00\\u4E9B\\u504F\\u79FB\\uFF0C\\u51CF\\u8F7B\\u9762\\u7684\\u51B2\\u7A81\\n  float radius = u_globel_radius;\\n\\n  float z = radius * cos(lat) * cos(lng);\\n  float x = radius * cos(lat) * sin(lng);\\n  float y = radius * sin(lat);\\n  return vec3(x, y, z);\\n}\\n\\nvoid main() {\\n  //vs\\u4E2D\\u8BA1\\u7B97\\u6E10\\u53D8\\u8272\\n  if(u_linearColor==1.0){\\n    float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n    v_color = mix(u_sourceColor, u_targetColor, d_segmentIndex/segmentNumber);\\n  }\\n  else{\\n    v_color = a_Color;\\n  }\\n  v_color.a = v_color.a * opacity;\\n  vec2 source = project_position(vec4(a_Instance.rg, 0, 0)).xy;\\n  vec2 target = project_position(vec4(a_Instance.ba, 0, 0)).xy;\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n\\n  float d_distance_ratio;\\n   if(u_line_type == LineTypeDash) {\\n    d_distance_ratio = segmentIndex / segmentNumber;\\n    vec2 s = source;\\n    vec2 t = target;\\n    \\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      s = unProjCustomCoord(source);\\n      t = unProjCustomCoord(target);\\n    }\\n    float total_Distance = pixelDistance(s, t) / 2.0 * PI;\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / (total_Distance / segmentNumber * segmentIndex);\\n  }\\n    if(u_animate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n  }\\n  v_line_data.g = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  vec3 curr = getPos(source, target, segmentRatio);\\n  vec3 next = getPos(source, target, nextSegmentRatio);\\n  vec2 offset = getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y);\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n\\n\\n  v_segmentIndex = a_Position.x;\\n  if(LineTexture == u_line_texture && u_line_type != LineTypeDash) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F  \\n\\n    float arcDistrance = length(source - target);\\n    float pixelLen =  project_pixel_texture(u_icon_step);\\n    v_line_data.b = floor(arcDistrance/pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    vec2 projectOffset = project_pixel(offset);\\n    float lineOffsetWidth = length(projectOffset + projectOffset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size);  // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB\\n    v_line_data.a = lineOffsetWidth/linePixelSize;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v_iconMapUV = a_iconMapUV;\\n  }\\n\\n\\n  gl_Position = project_common_position_to_clipspace_v2(vec4(curr.xy + project_pixel(offset), curr.z * thetaOffset, 1.0));\\n\\n  // \\u5730\\u7403\\u6A21\\u5F0F\\n  if(u_globel > 0.0) {\\n    vec3 startLngLat = lglt2xyz(a_Instance.rg);\\n    vec3 endLngLat = lglt2xyz(a_Instance.ba);\\n    float globalRadius = length(startLngLat);\\n\\n    vec3 lineDir = normalize(endLngLat - startLngLat);\\n    vec3 midPointDir = normalize((startLngLat + endLngLat)/2.0);\\n\\n    // \\u7EBF\\u7684\\u504F\\u79FB\\n    vec3 lnglatOffset = cross(lineDir, midPointDir) * a_Position.y;\\n    // \\u8BA1\\u7B97\\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u6B62\\u70B9\\u7684\\u8DDD\\u79BB\\n    float lnglatLength = length(a_Instance.rg - a_Instance.ba)/50.0;\\n    // \\u8BA1\\u7B97\\u98DE\\u7EBF\\u5404\\u4E2A\\u8282\\u70B9\\u76F8\\u5E94\\u7684\\u9AD8\\u5EA6\\n    float lineHeight = u_global_height * (-4.0*segmentRatio*segmentRatio + 4.0 * segmentRatio) * lnglatLength;\\n    // \\u5730\\u7403\\u70B9\\u4F4D\\n    vec3 globalPoint = normalize(mix(startLngLat, endLngLat, segmentRatio)) * (globalRadius + lineHeight) + lnglatOffset * a_Size;\\n    \\n    gl_Position = u_ViewProjectionMatrix * vec4(globalPoint, 1.0);\\n  }\\n \\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\nvar Arc3DModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(Arc3DModel, _BaseModel);\n  var _super = _createSuper(Arc3DModel);\n  function Arc3DModel() {\n    var _this;\n    _classCallCheck(this, Arc3DModel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n        _this.layer.render();\n        return;\n      }\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n      _this.textures = [_this.texture];\n    });\n    return _this;\n  }\n  _createClass(Arc3DModel, [{\n    key: \"getCommonUniformsInfo\",\n    value:\n    // public enableShaderEncodeStyles = ['opacity'];\n    function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        sourceColor = _ref.sourceColor,\n        targetColor = _ref.targetColor,\n        _ref$textureBlend = _ref.textureBlend,\n        textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n        _ref$lineType = _ref.lineType,\n        lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,\n        _ref$dashArray = _ref.dashArray,\n        dashArray = _ref$dashArray === void 0 ? [10, 5] : _ref$dashArray,\n        _ref$lineTexture = _ref.lineTexture,\n        lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n        _ref$iconStep = _ref.iconStep,\n        iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n        _ref$segmentNumber = _ref.segmentNumber,\n        segmentNumber = _ref$segmentNumber === void 0 ? 30 : _ref$segmentNumber,\n        _ref$globalArcHeight = _ref.globalArcHeight,\n        globalArcHeight = _ref$globalArcHeight === void 0 ? 10 : _ref$globalArcHeight;\n      var _ref2 = this.layer.getLayerConfig(),\n        animateOption = _ref2.animateOption;\n      if (dashArray.length === 2) {\n        dashArray.push(0, 0);\n      }\n      // 转化渐变色\n      var useLinearColor = 0; // 默认不生效\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n      var commonOptions = {\n        u_animate: this.animateOption2Array(animateOption),\n        u_dash_array: dashArray,\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n        u_globel_radius: EARTH_RADIUS,\n        // 地球半径\n        u_global_height: globalArcHeight,\n        segmentNumber: segmentNumber,\n        u_line_type: lineStyleObj[lineType] || 0.0,\n        u_icon_step: iconStep,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        // 传入线的标识\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        u_time: this.layer.getLayerAnimateTime() || 0,\n        u_linearColor: useLinearColor //是否使用渐变色\n      };\n\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n\n    // public getAnimateUniforms(): IModelUniform {\n    //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    //   return {\n    //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n    //     u_time: this.layer.getLayerAnimateTime(),\n    //   };\n    // }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.initUniformsBuffer();\n              this.updateTexture();\n              this.iconService.on('imageUpdate', this.updateTexture);\n              return _context.abrupt(\"return\", this.buildModels());\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        frag: arc3d_line_frag,\n        vert: arc3d_line_vert,\n        type: ''\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _ref3, _ref3$segmentNumber, segmentNumber, _this$getShaders, frag, vert, type, model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref3 = this.layer.getLayerConfig(), _ref3$segmentNumber = _ref3.segmentNumber, segmentNumber = _ref3$segmentNumber === void 0 ? 30 : _ref3$segmentNumber;\n              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;\n              _context2.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: 'lineArc3d' + type,\n                vertexShader: vert,\n                fragmentShader: frag,\n                inject: this.getInject(),\n                triangulation: LineArcTriangulation,\n                styleOption: {\n                  segmentNumber: segmentNumber\n                }\n              });\n            case 4:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'instance',\n        // 弧线起始点信息\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Instance',\n          shaderLocation: 12,\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3], vertex[4], vertex[5], vertex[6]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          shaderLocation: 14,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature) {\n            var iconMap = _this2.iconService.getIconMap();\n            var texture = feature.texture;\n            var _ref4 = iconMap[texture] || {\n                x: 0,\n                y: 0\n              },\n              x = _ref4.x,\n              y = _ref4.y;\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n  return Arc3DModel;\n}(BaseModel);\nexport { Arc3DModel as default };","map":{"version":3,"names":["_asyncToGenerator","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_regeneratorRuntime","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AttributeType","gl","rgb2arr","BaseModel","LineArcTriangulation","EARTH_RADIUS","ShaderLocation","arc3d_line_frag","arc3d_line_vert","lineStyleObj","solid","dash","Arc3DModel","_BaseModel","_super","_this","_len","length","args","Array","_key","concat","createTexture2D","rendererService","texture","update","data","iconService","getCanvas","layer","render","mag","NEAREST","min","premultiplyAlpha","width","height","canvasHeight","textures","key","value","getCommonUniformsInfo","_ref","getLayerConfig","sourceColor","targetColor","_ref$textureBlend","textureBlend","_ref$lineType","lineType","_ref$dashArray","dashArray","_ref$lineTexture","lineTexture","_ref$iconStep","iconStep","_ref$segmentNumber","segmentNumber","_ref$globalArcHeight","globalArcHeight","_ref2","animateOption","push","useLinearColor","sourceColorArr","targetColorArr","getDirty","bind","commonOptions","u_animate","animateOption2Array","u_dash_array","u_sourceColor","u_targetColor","u_textSize","u_globel","mapService","version","u_globel_radius","u_global_height","u_line_type","u_icon_step","u_line_texture","u_textureBlend","u_time","getLayerAnimateTime","u_linearColor","commonBufferInfo","getUniformsBufferInfo","_initModels","mark","_callee","wrap","_callee$","_context","prev","next","initUniformsBuffer","updateTexture","on","abrupt","buildModels","stop","initModels","clearModels","_this$texture","destroy","off","getShaders","frag","vert","type","_buildModels","_callee2","_ref3","_ref3$segmentNumber","_this$getShaders","model","_callee2$","_context2","buildLayerModel","moduleName","vertexShader","fragmentShader","inject","getInject","triangulation","styleOption","sent","registerBuiltinAttributes","_this2","styleAttributeService","registerStyleAttribute","name","Attribute","descriptor","shaderLocation","SIZE","buffer","usage","DYNAMIC_DRAW","FLOAT","size","feature","_feature$size","isArray","STATIC_DRAW","featureIdx","vertex","iconMap","getIconMap","_ref4","x","y","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/line/models/arc_3d.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { LineArcTriangulation } from \"../../core/triangulation\";\nimport { EARTH_RADIUS } from \"../../earth/utils\";\n// arc3d line layer\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\n/* babel-plugin-inline-import '../shaders/arc3d/line_arc_3d_frag.glsl' */\nvar arc3d_line_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform sampler2D u_texture;\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_globel;\\n  float u_globel_radius;\\n  float u_global_height: 10;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\n\\n// varying vec2 v_normal;\\nin vec4 v_dash_array;\\nin vec4 v_color;\\nin vec4 v_line_data;\\nin float v_segmentIndex;\\nin vec2 v_iconMapUV;\\n\\nout vec4 outputColor;\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = v_line_data.g; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  outputColor = v_color;\\n\\n  if(u_line_type == LineTypeDash) {\\n    float flag = 0.;\\n    float dashLength = mod(d_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      flag = 1.;\\n    }\\n    outputColor.a *=flag;\\n  }\\n\\n  if(u_animate.x == Animate && u_line_texture != LineTexture) {\\n      animateSpeed = u_time / u_animate.y;\\n      float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + u_time / u_animate.y);\\n\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      outputColor.a *= alpha;\\n\\n      // u_animate \\n      // x enable\\n      // y duration\\n      // z interval\\n      // w trailLength\\n  }\\n\\n  if(u_line_texture == LineTexture && u_line_type != LineTypeDash) { // while load texture\\n    // float arcRadio = smoothstep( 0.0, 1.0, (v_segmentIndex / segmentNumber));\\n    float arcRadio = v_segmentIndex / (segmentNumber - 1.0);\\n    float count = v_line_data.b; // // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float time = 0.0;\\n    if(u_animate.x == Animate) {\\n      time = u_time / u_animate.y;\\n    }\\n    float redioCount = arcRadio * count;\\n\\n    float u = fract(redioCount - time);\\n\\n    float v = v_line_data.a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    if(u_animate.x == Animate) {\\n      float currentPlane = floor(redioCount - time);\\n      float textureStep = floor(count * u_animate.z);\\n      float a = mod(currentPlane, textureStep);\\n      if(a < textureStep - 1.0) {\\n        pattern = vec4(0.0);\\n      }\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n          discard;\\n        } else {\\n          outputColor = filterColor(pattern);\\n        }\\n    }\\n\\n  } else {\\n    outputColor = filterColor(outputColor);\\n  }\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/arc3d/line_arc_3d_vert.glsl' */\nvar arc3d_line_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 12) in vec4 a_Instance;\\nlayout(location = 14) in vec2 a_iconMapUV;\\n\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_dash_array: [10.0, 5., 0, 0];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_globel;\\n  float u_globel_radius;\\n  float u_global_height: 10;\\n  float segmentNumber;\\n  float u_line_type: 0.0;\\n  float u_icon_step: 100;\\n  float u_line_texture: 0.0;\\n  float u_textureBlend;\\n  float u_time;\\n  float u_linearColor: 0.0;\\n};\\nout vec4 v_color;\\nout vec4 v_dash_array;\\nout float v_segmentIndex;\\nout vec2 v_iconMapUV;\\nout vec4 v_line_data;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat maps (float value, float start1, float stop1, float start2, float stop2) {\\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return smoothstep(0.0, 1.0, index / (segmentNumber - 1.0));\\n}\\n\\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\\n  vec2 x = mix(source, target, ratio);\\n  vec2 center = mix(source, target, 0.5);\\n  float dSourceCenter = distance(source, center);\\n  float dXCenter = distance(x, center);\\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\\n}\\n\\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\\n  float vertex_height = paraboloid(source, target, segmentRatio);\\n\\n  return vec3(\\n    mix(source, target, segmentRatio),\\n    sqrt(max(0.0, vertex_height))\\n  );\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  return reverse_offset_normal(vec3(dir_screenspace,1.0)).xy * sign(offset_direction);\\n}\\n\\nfloat torad(float deg) {\\n  return (deg / 180.0) * acos(-1.0);\\n}\\n\\nvec3 lglt2xyz(vec2 lnglat) {\\n  float pi = 3.1415926;\\n  // + Math.PI/2 \\u662F\\u4E3A\\u4E86\\u5BF9\\u9F50\\u5750\\u6807\\n  float lng = torad(lnglat.x) + pi / 2.0;\\n  float lat = torad(lnglat.y);\\n\\n  // \\u624B\\u52A8\\u589E\\u52A0\\u4E00\\u4E9B\\u504F\\u79FB\\uFF0C\\u51CF\\u8F7B\\u9762\\u7684\\u51B2\\u7A81\\n  float radius = u_globel_radius;\\n\\n  float z = radius * cos(lat) * cos(lng);\\n  float x = radius * cos(lat) * sin(lng);\\n  float y = radius * sin(lat);\\n  return vec3(x, y, z);\\n}\\n\\nvoid main() {\\n  //vs\\u4E2D\\u8BA1\\u7B97\\u6E10\\u53D8\\u8272\\n  if(u_linearColor==1.0){\\n    float d_segmentIndex = a_Position.x + 1.0; // \\u5F53\\u524D\\u9876\\u70B9\\u5728\\u5F27\\u7EBF\\u4E2D\\u6240\\u5904\\u7684\\u5206\\u6BB5\\u4F4D\\u7F6E\\n    v_color = mix(u_sourceColor, u_targetColor, d_segmentIndex/segmentNumber);\\n  }\\n  else{\\n    v_color = a_Color;\\n  }\\n  v_color.a = v_color.a * opacity;\\n  vec2 source = project_position(vec4(a_Instance.rg, 0, 0)).xy;\\n  vec2 target = project_position(vec4(a_Instance.ba, 0, 0)).xy;\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n\\n  float d_distance_ratio;\\n   if(u_line_type == LineTypeDash) {\\n    d_distance_ratio = segmentIndex / segmentNumber;\\n    vec2 s = source;\\n    vec2 t = target;\\n    \\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      s = unProjCustomCoord(source);\\n      t = unProjCustomCoord(target);\\n    }\\n    float total_Distance = pixelDistance(s, t) / 2.0 * PI;\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / (total_Distance / segmentNumber * segmentIndex);\\n  }\\n    if(u_animate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n  }\\n  v_line_data.g = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  vec3 curr = getPos(source, target, segmentRatio);\\n  vec3 next = getPos(source, target, nextSegmentRatio);\\n  vec2 offset = getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y);\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n\\n\\n  v_segmentIndex = a_Position.x;\\n  if(LineTexture == u_line_texture && u_line_type != LineTypeDash) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F  \\n\\n    float arcDistrance = length(source - target);\\n    float pixelLen =  project_pixel_texture(u_icon_step);\\n    v_line_data.b = floor(arcDistrance/pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    vec2 projectOffset = project_pixel(offset);\\n    float lineOffsetWidth = length(projectOffset + projectOffset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size);  // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB\\n    v_line_data.a = lineOffsetWidth/linePixelSize;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v_iconMapUV = a_iconMapUV;\\n  }\\n\\n\\n  gl_Position = project_common_position_to_clipspace_v2(vec4(curr.xy + project_pixel(offset), curr.z * thetaOffset, 1.0));\\n\\n  // \\u5730\\u7403\\u6A21\\u5F0F\\n  if(u_globel > 0.0) {\\n    vec3 startLngLat = lglt2xyz(a_Instance.rg);\\n    vec3 endLngLat = lglt2xyz(a_Instance.ba);\\n    float globalRadius = length(startLngLat);\\n\\n    vec3 lineDir = normalize(endLngLat - startLngLat);\\n    vec3 midPointDir = normalize((startLngLat + endLngLat)/2.0);\\n\\n    // \\u7EBF\\u7684\\u504F\\u79FB\\n    vec3 lnglatOffset = cross(lineDir, midPointDir) * a_Position.y;\\n    // \\u8BA1\\u7B97\\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u6B62\\u70B9\\u7684\\u8DDD\\u79BB\\n    float lnglatLength = length(a_Instance.rg - a_Instance.ba)/50.0;\\n    // \\u8BA1\\u7B97\\u98DE\\u7EBF\\u5404\\u4E2A\\u8282\\u70B9\\u76F8\\u5E94\\u7684\\u9AD8\\u5EA6\\n    float lineHeight = u_global_height * (-4.0*segmentRatio*segmentRatio + 4.0 * segmentRatio) * lnglatLength;\\n    // \\u5730\\u7403\\u70B9\\u4F4D\\n    vec3 globalPoint = normalize(mix(startLngLat, endLngLat, segmentRatio)) * (globalRadius + lineHeight) + lnglatOffset * a_Size;\\n    \\n    gl_Position = u_ViewProjectionMatrix * vec4(globalPoint, 1.0);\\n  }\\n \\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\nvar Arc3DModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(Arc3DModel, _BaseModel);\n  var _super = _createSuper(Arc3DModel);\n  function Arc3DModel() {\n    var _this;\n    _classCallCheck(this, Arc3DModel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n        _this.layer.render();\n        return;\n      }\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n      _this.textures = [_this.texture];\n    });\n    return _this;\n  }\n  _createClass(Arc3DModel, [{\n    key: \"getCommonUniformsInfo\",\n    value:\n    // public enableShaderEncodeStyles = ['opacity'];\n    function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        sourceColor = _ref.sourceColor,\n        targetColor = _ref.targetColor,\n        _ref$textureBlend = _ref.textureBlend,\n        textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n        _ref$lineType = _ref.lineType,\n        lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,\n        _ref$dashArray = _ref.dashArray,\n        dashArray = _ref$dashArray === void 0 ? [10, 5] : _ref$dashArray,\n        _ref$lineTexture = _ref.lineTexture,\n        lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n        _ref$iconStep = _ref.iconStep,\n        iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n        _ref$segmentNumber = _ref.segmentNumber,\n        segmentNumber = _ref$segmentNumber === void 0 ? 30 : _ref$segmentNumber,\n        _ref$globalArcHeight = _ref.globalArcHeight,\n        globalArcHeight = _ref$globalArcHeight === void 0 ? 10 : _ref$globalArcHeight;\n      var _ref2 = this.layer.getLayerConfig(),\n        animateOption = _ref2.animateOption;\n      if (dashArray.length === 2) {\n        dashArray.push(0, 0);\n      }\n      // 转化渐变色\n      var useLinearColor = 0; // 默认不生效\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n      var commonOptions = {\n        u_animate: this.animateOption2Array(animateOption),\n        u_dash_array: dashArray,\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n        u_globel_radius: EARTH_RADIUS,\n        // 地球半径\n        u_global_height: globalArcHeight,\n        segmentNumber: segmentNumber,\n        u_line_type: lineStyleObj[lineType] || 0.0,\n        u_icon_step: iconStep,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        // 传入线的标识\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        u_time: this.layer.getLayerAnimateTime() || 0,\n        u_linearColor: useLinearColor //是否使用渐变色\n      };\n\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n\n    // public getAnimateUniforms(): IModelUniform {\n    //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    //   return {\n    //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n    //     u_time: this.layer.getLayerAnimateTime(),\n    //   };\n    // }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.initUniformsBuffer();\n              this.updateTexture();\n              this.iconService.on('imageUpdate', this.updateTexture);\n              return _context.abrupt(\"return\", this.buildModels());\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        frag: arc3d_line_frag,\n        vert: arc3d_line_vert,\n        type: ''\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _ref3, _ref3$segmentNumber, segmentNumber, _this$getShaders, frag, vert, type, model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref3 = this.layer.getLayerConfig(), _ref3$segmentNumber = _ref3.segmentNumber, segmentNumber = _ref3$segmentNumber === void 0 ? 30 : _ref3$segmentNumber;\n              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;\n              _context2.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: 'lineArc3d' + type,\n                vertexShader: vert,\n                fragmentShader: frag,\n                inject: this.getInject(),\n                triangulation: LineArcTriangulation,\n                styleOption: {\n                  segmentNumber: segmentNumber\n                }\n              });\n            case 4:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'instance',\n        // 弧线起始点信息\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Instance',\n          shaderLocation: 12,\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3], vertex[4], vertex[5], vertex[6]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          shaderLocation: 14,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature) {\n            var iconMap = _this2.iconService.getIconMap();\n            var texture = feature.texture;\n            var _ref4 = iconMap[texture] || {\n                x: 0,\n                y: 0\n              },\n              x = _ref4.x,\n              y = _ref4.y;\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n  return Arc3DModel;\n}(BaseModel);\nexport { Arc3DModel as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}