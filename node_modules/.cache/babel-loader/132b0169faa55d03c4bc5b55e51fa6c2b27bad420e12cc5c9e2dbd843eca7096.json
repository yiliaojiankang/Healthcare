{"ast":null,"code":"var MAX_MIX_LEVEL = 5; // 最大比对层级\nvar toString = {}.toString;\n// 类型检测\nvar isType = function (value, type) {\n  return toString.call(value) === '[object ' + type + ']';\n};\nvar isArray = function (value) {\n  return isType(value, 'Array');\n};\nvar isObjectLike = function (value) {\n  /**\n   * isObjectLike({}) => true\n   * isObjectLike([1, 2, 3]) => true\n   * isObjectLike(Function) => false\n   */\n  return typeof value === 'object' && value !== null;\n};\nvar isPlainObject = function (value) {\n  /**\n   * isObjectLike(new Foo) => false\n   * isObjectLike([1, 2, 3]) => false\n   * isObjectLike({ x: 0, y: 0 }) => true\n   */\n  if (!isObjectLike(value) || !isType(value, 'Object')) {\n    return false;\n  }\n  var proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n};\n/***\n * @param {any} dist\n * @param {any} src\n * @param {number} level 当前层级\n * @param {number} maxLevel 最大层级\n */\nvar deep = function (dist, src, level, maxLevel) {\n  level = level || 0;\n  maxLevel = maxLevel || MAX_MIX_LEVEL;\n  for (var key in src) {\n    if (Object.prototype.hasOwnProperty.call(src, key)) {\n      var value = src[key];\n      if (!value) {\n        // null 、 undefined 等情况直接赋值\n        dist[key] = value;\n      } else {\n        if (isPlainObject(value)) {\n          if (!isPlainObject(dist[key])) {\n            dist[key] = {};\n          }\n          if (level < maxLevel) {\n            deep(dist[key], value, level + 1, maxLevel);\n          } else {\n            // 层级过深直接赋值，性能问题\n            dist[key] = src[key];\n          }\n        } else if (isArray(value)) {\n          dist[key] = [];\n          dist[key] = dist[key].concat(value);\n        } else {\n          dist[key] = value;\n        }\n      }\n    }\n  }\n};\n/**\n * deepAssign 功能类似 deepMix\n * 不同点在于 deepAssign 会将 null undefined 等类型直接覆盖给 source\n * 详细参考： __tests__/unit/utils/deep-assign-spec.ts\n */\nexport var deepAssign = function (rst) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  for (var i = 0; i < args.length; i += 1) {\n    deep(rst, args[i]);\n  }\n  return rst;\n};","map":{"version":3,"names":["MAX_MIX_LEVEL","toString","isType","value","type","call","isArray","isObjectLike","isPlainObject","proto","Object","getPrototypeOf","deep","dist","src","level","maxLevel","key","prototype","hasOwnProperty","concat","deepAssign","rst","args","_i","arguments","length","i"],"sources":["../../src/utils/deep-assign.ts"],"sourcesContent":["const MAX_MIX_LEVEL = 5; // 最大比对层级\n\nconst toString = {}.toString;\n\n// 类型检测\nconst isType = (value: any, type: string): boolean => toString.call(value) === '[object ' + type + ']';\n\nconst isArray = (value: any): value is Array<any> => {\n  return isType(value, 'Array');\n};\n\nconst isObjectLike = (value: any): value is object => {\n  /**\n   * isObjectLike({}) => true\n   * isObjectLike([1, 2, 3]) => true\n   * isObjectLike(Function) => false\n   */\n  return typeof value === 'object' && value !== null;\n};\n\nconst isPlainObject = (value: any): value is object => {\n  /**\n   * isObjectLike(new Foo) => false\n   * isObjectLike([1, 2, 3]) => false\n   * isObjectLike({ x: 0, y: 0 }) => true\n   */\n  if (!isObjectLike(value) || !isType(value, 'Object')) {\n    return false;\n  }\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n};\n\n/***\n * @param {any} dist\n * @param {any} src\n * @param {number} level 当前层级\n * @param {number} maxLevel 最大层级\n */\nconst deep = (dist, src, level?, maxLevel?) => {\n  level = level || 0;\n  maxLevel = maxLevel || MAX_MIX_LEVEL;\n  for (const key in src) {\n    if (Object.prototype.hasOwnProperty.call(src, key)) {\n      const value = src[key];\n      if (!value) {\n        // null 、 undefined 等情况直接赋值\n        dist[key] = value;\n      } else {\n        if (isPlainObject(value)) {\n          if (!isPlainObject(dist[key])) {\n            dist[key] = {};\n          }\n          if (level < maxLevel) {\n            deep(dist[key], value, level + 1, maxLevel);\n          } else {\n            // 层级过深直接赋值，性能问题\n            dist[key] = src[key];\n          }\n        } else if (isArray(value)) {\n          dist[key] = [];\n          dist[key] = dist[key].concat(value);\n        } else {\n          dist[key] = value;\n        }\n      }\n    }\n  }\n};\n\n/**\n * deepAssign 功能类似 deepMix\n * 不同点在于 deepAssign 会将 null undefined 等类型直接覆盖给 source\n * 详细参考： __tests__/unit/utils/deep-assign-spec.ts\n */\nexport const deepAssign = (rst: any, ...args: any[]) => {\n  for (let i = 0; i < args.length; i += 1) {\n    deep(rst, args[i]);\n  }\n  return rst;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}