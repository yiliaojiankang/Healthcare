{"ast":null,"code":"/**\n * 获取设备像素比\n */\nexport function getPixelRatio() {\n  return typeof window === 'object' ? window === null || window === void 0 ? void 0 : window.devicePixelRatio : 2;\n}\n/**\n * 初始化 cavnas，设置宽高等\n */\nexport function initCanvas(width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n  var canvas = document.createElement('canvas');\n  var pixelRatio = getPixelRatio();\n  // 画布尺寸\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  // 显示尺寸\n  canvas.style.width = \"\".concat(width, \"px\");\n  canvas.style.height = \"\".concat(height, \"px\");\n  var ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n  return canvas;\n}\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\nexport function drawBackground(context, cfg, width, height) {\n  if (height === void 0) {\n    height = width;\n  }\n  var backgroundColor = cfg.backgroundColor,\n    opacity = cfg.opacity;\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\nexport function getUnitPatternSize(size, padding, isStagger) {\n  // 如果交错, unitSize 放大两倍\n  var unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\nexport function getSymbolsPosition(unitSize, isStagger) {\n  // 如果交错, 交错绘制 dot\n  var symbolsPos = isStagger ? [[unitSize * (1 / 4), unitSize * (1 / 4)], [unitSize * (3 / 4), unitSize * (3 / 4)]] : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\nexport function transformMatrix(dpr, rotation) {\n  var radian = rotation * Math.PI / 180;\n  var matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0\n  };\n  return matrix;\n}","map":{"version":3,"names":["getPixelRatio","window","devicePixelRatio","initCanvas","width","height","canvas","document","createElement","pixelRatio","style","concat","ctx","getContext","scale","drawBackground","context","cfg","backgroundColor","opacity","globalAlpha","fillStyle","beginPath","fillRect","closePath","getUnitPatternSize","size","padding","isStagger","unitSize","getSymbolsPosition","symbolsPos","transformMatrix","dpr","rotation","radian","Math","PI","matrix","a","cos","b","sin","c","d","e","f"],"sources":["../../../src/utils/pattern/util.ts"],"sourcesContent":["import { PatternCfg } from '../../types/pattern';\n\n/**\n * 获取设备像素比\n */\nexport function getPixelRatio(): number {\n  return typeof window === 'object' ? window?.devicePixelRatio : 2;\n}\n\n/**\n * 初始化 cavnas，设置宽高等\n */\nexport function initCanvas(width: number, height: number = width): HTMLCanvasElement {\n  const canvas = document.createElement('canvas');\n\n  const pixelRatio = getPixelRatio();\n  // 画布尺寸\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  // 显示尺寸\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n\n  const ctx = canvas.getContext('2d');\n  ctx.scale(pixelRatio, pixelRatio);\n\n  return canvas;\n}\n\n/**\n * 绘制背景\n *\n * @param context\n * @param cfg\n * @param width\n * @param height\n */\nexport function drawBackground(\n  context: CanvasRenderingContext2D,\n  cfg: PatternCfg,\n  width: number,\n  height: number = width\n) {\n  const { backgroundColor, opacity } = cfg;\n\n  context.globalAlpha = opacity;\n  context.fillStyle = backgroundColor;\n\n  context.beginPath();\n  context.fillRect(0, 0, width, height);\n  context.closePath();\n}\n\n/**\n * 计算贴图单元大小\n *\n * @param size 元素大小\n * @param padding 圆点间隔\n * @param isStagger 是否交错\n * @reutrn 返回贴图单元大小\n */\nexport function getUnitPatternSize(size: number, padding: number, isStagger: boolean): number {\n  // 如果交错, unitSize 放大两倍\n  const unitSize = size + padding;\n  return isStagger ? unitSize * 2 : unitSize;\n}\n\n/**\n * 计算有交错情况的元素坐标\n *\n * @param unitSize 贴图单元大小\n * @param isStagger 是否交错\n * @reutrn 元素中心坐标 x,y 数组集合\n */\nexport function getSymbolsPosition(unitSize: number, isStagger: boolean): number[][] {\n  // 如果交错, 交错绘制 dot\n  const symbolsPos = isStagger\n    ? [\n        [unitSize * (1 / 4), unitSize * (1 / 4)],\n        [unitSize * (3 / 4), unitSize * (3 / 4)],\n      ]\n    : [[unitSize * (1 / 2), unitSize * (1 / 2)]];\n  return symbolsPos;\n}\n\n/**\n * 给整个 pattern贴图 做变换, 目前支持旋转\n *\n * @param pattern 整个贴图\n * @param dpr  设备像素比\n * @param rotation 旋转角度\n */\nexport function transformMatrix(dpr: number, rotation: number) {\n  const radian = (rotation * Math.PI) / 180;\n  const matrix = {\n    a: Math.cos(radian) * (1 / dpr),\n    b: Math.sin(radian) * (1 / dpr),\n    c: -Math.sin(radian) * (1 / dpr),\n    d: Math.cos(radian) * (1 / dpr),\n    e: 0,\n    f: 0,\n  };\n  return matrix;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}