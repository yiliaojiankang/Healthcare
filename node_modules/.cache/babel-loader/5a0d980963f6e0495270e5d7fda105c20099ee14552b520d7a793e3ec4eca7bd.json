{"ast":null,"code":"import { assign, isArray } from '@antv/util';\nimport * as d3Hierarchy from 'd3-hierarchy';\nimport { getAllNodes, getField } from './util';\nvar DEFAULT_OPTIONS = {\n  field: 'value',\n  tile: 'treemapSquarify',\n  size: [1, 1],\n  round: false,\n  ignoreParentValue: true,\n  padding: 0,\n  paddingInner: 0,\n  paddingOuter: 0,\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  as: ['x', 'y'],\n  // 默认降序\n  sort: function (a, b) {\n    return b.value - a.value;\n  },\n  // 纵横比, treemapSquarify 布局时可用，默认黄金分割比例\n  ratio: 0.5 * (1 + Math.sqrt(5))\n};\nexport function getTileMethod(tile, ratio) {\n  return tile === 'treemapSquarify' ? d3Hierarchy[tile].ratio(ratio) : d3Hierarchy[tile];\n}\nexport function treemap(data, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  var as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n  var field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n  var tileMethod = getTileMethod(options.tile, options.ratio);\n  var partition = function (data) {\n    return d3Hierarchy.treemap().tile(tileMethod).size(options.size).round(options.round).padding(options.padding).paddingInner(options.paddingInner).paddingOuter(options.paddingOuter).paddingTop(options.paddingTop).paddingRight(options.paddingRight).paddingBottom(options.paddingBottom).paddingLeft(options.paddingLeft)(\n    /**\n     * d3Hierarchy 布局中需指定 sum 函数计算 node 值，规则是：从当前 node 开始以 post-order traversal 的次序为当前节点以及每个后代节点调用指定的 value 函数，并返回当前 node。\n     * for example:\n     * { node: 'parent', value: 10, children: [{node: 'child1', value: 5}, {node: 'child2', value: 5}, ]}\n     * parent 所得的计算值是 sum(node(parent)) + sum(node(child1)) + sum(node(child2))\n     * ignoreParentValue 为 true(默认) 时，父元素的值由子元素累加而来，该值为 0 + 5 + 5 = 10\n     * ignoreParentValue 为 false 时，父元素的值由当前节点 及子元素累加而来，该值为 10 + 5 + 5 = 20\n     * sum 函数中，d 为用户传入的 data, children 为保留字段\n     */\n    d3Hierarchy.hierarchy(data).sum(function (d) {\n      return options.ignoreParentValue && d.children ? 0 : d[field];\n    }).sort(options.sort));\n  };\n  var root = partition(data);\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n  var x = as[0];\n  var y = as[1];\n  root.each(function (node) {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n  return getAllNodes(root);\n}","map":{"version":3,"names":["assign","isArray","d3Hierarchy","getAllNodes","getField","DEFAULT_OPTIONS","field","tile","size","round","ignoreParentValue","padding","paddingInner","paddingOuter","paddingTop","paddingRight","paddingBottom","paddingLeft","as","sort","a","b","value","ratio","Math","sqrt","getTileMethod","treemap","data","options","length","TypeError","e","console","warn","tileMethod","partition","hierarchy","sum","d","children","root","x","y","each","node","x0","x1","y1","y0","forEach","prop","indexOf"],"sources":["../../../src/utils/hierarchy/treemap.ts"],"sourcesContent":["import { assign, isArray } from '@antv/util';\nimport * as d3Hierarchy from 'd3-hierarchy';\nimport { HierarchyOption } from './types';\nimport { getAllNodes, getField } from './util';\n\nconst DEFAULT_OPTIONS: HierarchyOption = {\n  field: 'value',\n  tile: 'treemapSquarify', // treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify\n  size: [1, 1], // width, height\n  round: false,\n  ignoreParentValue: true,\n  padding: 0,\n  paddingInner: 0,\n  paddingOuter: 0,\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  as: ['x', 'y'],\n  // 默认降序\n  sort: (a, b) => b.value - a.value,\n  // 纵横比, treemapSquarify 布局时可用，默认黄金分割比例\n  ratio: 0.5 * (1 + Math.sqrt(5)),\n};\n\nexport function getTileMethod(tile: string, ratio: number) {\n  return tile === 'treemapSquarify' ? d3Hierarchy[tile].ratio(ratio) : d3Hierarchy[tile];\n}\n\nexport function treemap(data: any, options: HierarchyOption): any[] {\n  options = assign({} as HierarchyOption, DEFAULT_OPTIONS, options);\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n\n  let field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  const tileMethod = getTileMethod(options.tile, options.ratio);\n\n  const partition = (data) =>\n    d3Hierarchy\n      .treemap()\n      .tile(tileMethod)\n      .size(options.size)\n      .round(options.round)\n      .padding(options.padding)\n      .paddingInner(options.paddingInner)\n      .paddingOuter(options.paddingOuter)\n      .paddingTop(options.paddingTop)\n      .paddingRight(options.paddingRight)\n      .paddingBottom(options.paddingBottom)\n      .paddingLeft(options.paddingLeft)(\n      /**\n       * d3Hierarchy 布局中需指定 sum 函数计算 node 值，规则是：从当前 node 开始以 post-order traversal 的次序为当前节点以及每个后代节点调用指定的 value 函数，并返回当前 node。\n       * for example:\n       * { node: 'parent', value: 10, children: [{node: 'child1', value: 5}, {node: 'child2', value: 5}, ]}\n       * parent 所得的计算值是 sum(node(parent)) + sum(node(child1)) + sum(node(child2))\n       * ignoreParentValue 为 true(默认) 时，父元素的值由子元素累加而来，该值为 0 + 5 + 5 = 10\n       * ignoreParentValue 为 false 时，父元素的值由当前节点 及子元素累加而来，该值为 10 + 5 + 5 = 20\n       * sum 函数中，d 为用户传入的 data, children 为保留字段\n       */\n      d3Hierarchy\n        .hierarchy(data)\n        .sum((d) => (options.ignoreParentValue && d.children ? 0 : d[field]))\n        .sort(options.sort)\n    );\n  const root = partition(data);\n\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n  const x = as[0];\n  const y = as[1];\n  root.each((node) => {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach((prop) => {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n\n  return getAllNodes(root);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}