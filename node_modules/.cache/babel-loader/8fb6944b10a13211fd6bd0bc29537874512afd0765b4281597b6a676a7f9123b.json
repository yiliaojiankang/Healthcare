{"ast":null,"code":"import { get, reduce } from '@antv/util';\n/**\n * 在 View 中查找第一个指定 type 类型的 geometry\n * @param view\n * @param type\n */\nexport function findGeometry(view, type) {\n  return view.geometries.find(function (g) {\n    return g.type === type;\n  });\n}\n/**\n * 获取 View 的 所有 elements\n */\nexport function getAllElements(view) {\n  return reduce(view.geometries, function (r, geometry) {\n    return r.concat(geometry.elements);\n  }, []);\n}\n/**\n * 递归获取 View 的 所有 elements, 包括 View 的子 View\n */\nexport function getAllElementsRecursively(view) {\n  if (get(view, ['views', 'length'], 0) <= 0) {\n    return getAllElements(view);\n  }\n  return reduce(view.views, function (ele, subView) {\n    return ele.concat(getAllElementsRecursively(subView));\n  }, getAllElements(view));\n}\n/**\n * 递归获取 View 的 所有 geometries, 包括 View 的子 View\n */\nexport function getAllGeometriesRecursively(view) {\n  if (get(view, ['views', 'length'], 0) <= 0) {\n    return view.geometries;\n  }\n  return reduce(view.views, function (ele, subView) {\n    return ele.concat(subView.geometries);\n  }, view.geometries);\n}","map":{"version":3,"names":["get","reduce","findGeometry","view","type","geometries","find","g","getAllElements","r","geometry","concat","elements","getAllElementsRecursively","views","ele","subView","getAllGeometriesRecursively"],"sources":["../../src/utils/geometry.ts"],"sourcesContent":["import { Element, Geometry, View } from '@antv/g2';\nimport { get, reduce } from '@antv/util';\n\n/**\n * 在 View 中查找第一个指定 type 类型的 geometry\n * @param view\n * @param type\n */\nexport function findGeometry(view: View, type: string): Geometry {\n  return view.geometries.find((g: Geometry) => g.type === type);\n}\n\n/**\n * 获取 View 的 所有 elements\n */\nexport function getAllElements(view: View): Element[] {\n  return reduce(\n    view.geometries,\n    (r: Element[], geometry: Geometry) => {\n      return r.concat(geometry.elements);\n    },\n    []\n  );\n}\n\n/**\n * 递归获取 View 的 所有 elements, 包括 View 的子 View\n */\nexport function getAllElementsRecursively(view: View): Element[] {\n  if (get(view, ['views', 'length'], 0) <= 0) {\n    return getAllElements(view);\n  }\n\n  return reduce(\n    view.views,\n    (ele: Element[], subView: View) => {\n      return ele.concat(getAllElementsRecursively(subView));\n    },\n    getAllElements(view)\n  );\n}\n\n/**\n * 递归获取 View 的 所有 geometries, 包括 View 的子 View\n */\nexport function getAllGeometriesRecursively(view: View): Geometry[] {\n  if (get(view, ['views', 'length'], 0) <= 0) {\n    return view.geometries;\n  }\n\n  return reduce(\n    view.views,\n    (ele: Geometry[], subView: View) => {\n      return ele.concat(subView.geometries);\n    },\n    view.geometries\n  );\n}\n"],"mappings":"AACA,SAASA,GAAG,EAAEC,MAAM,QAAQ,YAAY;AAExC;;;;;AAKA,OAAM,SAAUC,YAAYA,CAACC,IAAU,EAAEC,IAAY;EACnD,OAAOD,IAAI,CAACE,UAAU,CAACC,IAAI,CAAC,UAACC,CAAW;IAAK,OAAAA,CAAC,CAACH,IAAI,KAAKA,IAAI;EAAf,CAAe,CAAC;AAC/D;AAEA;;;AAGA,OAAM,SAAUI,cAAcA,CAACL,IAAU;EACvC,OAAOF,MAAM,CACXE,IAAI,CAACE,UAAU,EACf,UAACI,CAAY,EAAEC,QAAkB;IAC/B,OAAOD,CAAC,CAACE,MAAM,CAACD,QAAQ,CAACE,QAAQ,CAAC;EACpC,CAAC,EACD,EAAE,CACH;AACH;AAEA;;;AAGA,OAAM,SAAUC,yBAAyBA,CAACV,IAAU;EAClD,IAAIH,GAAG,CAACG,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;IAC1C,OAAOK,cAAc,CAACL,IAAI,CAAC;;EAG7B,OAAOF,MAAM,CACXE,IAAI,CAACW,KAAK,EACV,UAACC,GAAc,EAAEC,OAAa;IAC5B,OAAOD,GAAG,CAACJ,MAAM,CAACE,yBAAyB,CAACG,OAAO,CAAC,CAAC;EACvD,CAAC,EACDR,cAAc,CAACL,IAAI,CAAC,CACrB;AACH;AAEA;;;AAGA,OAAM,SAAUc,2BAA2BA,CAACd,IAAU;EACpD,IAAIH,GAAG,CAACG,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;IAC1C,OAAOA,IAAI,CAACE,UAAU;;EAGxB,OAAOJ,MAAM,CACXE,IAAI,CAACW,KAAK,EACV,UAACC,GAAe,EAAEC,OAAa;IAC7B,OAAOD,GAAG,CAACJ,MAAM,CAACK,OAAO,CAACX,UAAU,CAAC;EACvC,CAAC,EACDF,IAAI,CAACE,UAAU,CAChB;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}