{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nvar Chart = /** @class */function (_super) {\n  __extends(Chart, _super);\n  // @ts-ignore\n  function Chart(props) {\n    var _this = this;\n    var container = props.container,\n      width = props.width,\n      height = props.height,\n      _a = props.autoFit,\n      autoFit = _a === void 0 ? false : _a,\n      padding = props.padding,\n      appendPadding = props.appendPadding,\n      _b = props.renderer,\n      renderer = _b === void 0 ? 'canvas' : _b,\n      pixelRatio = props.pixelRatio,\n      _c = props.localRefresh,\n      localRefresh = _c === void 0 ? true : _c,\n      _d = props.visible,\n      visible = _d === void 0 ? true : _d,\n      _e = props.supportCSSTransform,\n      supportCSSTransform = _e === void 0 ? false : _e,\n      _f = props.defaultInteractions,\n      defaultInteractions = _f === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'] : _f,\n      options = props.options,\n      limitInPlot = props.limitInPlot,\n      theme = props.theme,\n      syncViewPadding = props.syncViewPadding;\n    var ele = isString(container) ? document.getElementById(container) : container;\n    // 生成内部正式绘制的 div 元素\n    var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n    // if autoFit, use the container size, to avoid the graph render twice.\n    var size = getChartSize(ele, autoFit, width, height);\n    var G = getEngine(renderer);\n    var canvas = new G.Canvas(__assign({\n      container: wrapperElement,\n      pixelRatio: pixelRatio,\n      localRefresh: localRefresh,\n      supportCSSTransform: supportCSSTransform\n    }, size));\n    // 调用 view 的创建\n    _this = _super.call(this, {\n      parent: null,\n      canvas: canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      padding: padding,\n      appendPadding: appendPadding,\n      visible: visible,\n      options: options,\n      limitInPlot: limitInPlot,\n      theme: theme,\n      syncViewPadding: syncViewPadding\n    }) || this;\n    /**\n     * when container size changed, change chart size props, and re-render.\n     */\n    _this.onResize = debounce(function () {\n      _this.forceFit();\n    }, 300);\n    _this.ele = ele;\n    _this.canvas = canvas;\n    _this.width = size.width;\n    _this.height = size.height;\n    _this.autoFit = autoFit;\n    _this.localRefresh = localRefresh;\n    _this.renderer = renderer;\n    _this.wrapperElement = wrapperElement;\n    // 自适应大小\n    _this.updateCanvasStyle();\n    _this.bindAutoFit();\n    _this.initDefaultInteractions(defaultInteractions);\n    return _this;\n  }\n  Chart.prototype.initDefaultInteractions = function (interactions) {\n    var _this = this;\n    each(interactions, function (interaction) {\n      _this.interaction(interaction);\n    });\n  };\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  Chart.prototype.aria = function (ariaOption) {\n    var ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  };\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  Chart.prototype.changeSize = function (width, height) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n    // 重新渲染\n    this.render(true);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n    return this;\n  };\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  Chart.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.aria(false);\n  };\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  Chart.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.unbindAutoFit();\n    this.canvas.destroy();\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  };\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  Chart.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n    return this;\n  };\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  Chart.prototype.forceFit = function () {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      var _a = getChartSize(this.ele, true, this.width, this.height),\n        width = _a.width,\n        height = _a.height;\n      this.changeSize(width, height);\n    }\n  };\n  Chart.prototype.updateCanvasStyle = function () {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n  Chart.prototype.bindAutoFit = function () {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n  Chart.prototype.unbindAutoFit = function () {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n  return Chart;\n}(View);\nexport default Chart;","map":{"version":3,"names":["debounce","each","isString","GROUP_Z_INDEX","VIEW_LIFE_CIRCLE","getEngine","createDom","getChartSize","removeDom","modifyCSS","View","Chart","_super","__extends","props","_this","container","width","height","_a","autoFit","padding","appendPadding","_b","renderer","pixelRatio","_c","localRefresh","_d","visible","_e","supportCSSTransform","_f","defaultInteractions","options","limitInPlot","theme","syncViewPadding","ele","document","getElementById","wrapperElement","appendChild","size","G","canvas","Canvas","__assign","call","parent","backgroundGroup","addGroup","zIndex","BG","middleGroup","MID","foregroundGroup","FORE","onResize","forceFit","updateCanvasStyle","bindAutoFit","initDefaultInteractions","prototype","interactions","interaction","aria","ariaOption","ATTR","removeAttribute","setAttribute","label","changeSize","emit","BEFORE_CHANGE_SIZE","render","AFTER_CHANGE_SIZE","clear","destroy","unbindAutoFit","changeVisible","style","display","destroyed","get","verticalAlign","window","addEventListener","removeEventListener"],"sources":["../../src/chart/chart.ts"],"sourcesContent":["import { debounce, each, isString } from '@antv/util';\nimport { ChartCfg } from '../interface';\nimport { GROUP_Z_INDEX, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\nimport { AriaOption } from '../interface';\n\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nexport default class Chart extends View {\n  /** Chart 的 DOM 容器 */\n  public ele: HTMLElement;\n\n  /** 图表宽度 */\n  public width: number;\n  /** 图表高度 */\n  public height: number;\n  /** 是否开启局部刷新 */\n  public localRefresh: boolean;\n  /** 是否自适应 DOM 容器宽高，默认为 false，需要用户手动指定宽高 */\n  public autoFit: boolean;\n  /** 图表渲染引擎 */\n  public renderer: 'canvas' | 'svg';\n\n  private wrapperElement: HTMLElement;\n\n  // @ts-ignore\n  constructor(props: ChartCfg) {\n    const {\n      container,\n      width,\n      height,\n      autoFit = false,\n      padding,\n      appendPadding,\n      renderer = 'canvas',\n      pixelRatio,\n      localRefresh = true,\n      visible = true,\n      supportCSSTransform = false,\n      defaultInteractions = ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text', 'axis-description'],\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    } = props;\n\n    const ele: HTMLElement = isString(container) ? document.getElementById(container) : container;\n\n    // 生成内部正式绘制的 div 元素\n    const wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n\n    // if autoFit, use the container size, to avoid the graph render twice.\n    const size = getChartSize(ele, autoFit, width, height);\n\n    const G = getEngine(renderer);\n\n    const canvas = new G.Canvas({\n      container: wrapperElement,\n      pixelRatio,\n      localRefresh,\n      supportCSSTransform,\n      ...size,\n    });\n\n    // 调用 view 的创建\n    super({\n      parent: null,\n      canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      padding,\n      appendPadding,\n      visible,\n      options,\n      limitInPlot,\n      theme,\n      syncViewPadding,\n    });\n\n    this.ele = ele;\n    this.canvas = canvas;\n    this.width = size.width;\n    this.height = size.height;\n    this.autoFit = autoFit;\n    this.localRefresh = localRefresh;\n    this.renderer = renderer;\n    this.wrapperElement = wrapperElement;\n\n    // 自适应大小\n    this.updateCanvasStyle();\n    this.bindAutoFit();\n    this.initDefaultInteractions(defaultInteractions);\n  }\n\n  private initDefaultInteractions(interactions) {\n    each(interactions, (interaction) => {\n      this.interaction(interaction);\n    });\n  }\n\n  /**\n   * 设置 WAI-ARIA 无障碍标签。如何根据图形语法自动生成 arial 内容？\n   * @param ariaOption\n   */\n  public aria(ariaOption: AriaOption) {\n    const ATTR = 'aria-label';\n    if (ariaOption === false) {\n      this.ele.removeAttribute(ATTR);\n    } else {\n      this.ele.setAttribute(ATTR, ariaOption.label);\n    }\n  }\n\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  public changeSize(width: number, height: number) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE);\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n\n    // 重新渲染\n    this.render(true);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_SIZE);\n\n    return this;\n  }\n\n  /**\n   * 清空图表，同时清除掉 aria 配置\n   */\n  public clear() {\n    super.clear();\n\n    this.aria(false);\n  }\n\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  public destroy() {\n    super.destroy();\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  }\n\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n\n    return this;\n  }\n\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  public forceFit() {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      const { width, height } = getChartSize(this.ele, true, this.width, this.height);\n      this.changeSize(width, height);\n    }\n  }\n\n  private updateCanvasStyle() {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  private bindAutoFit() {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  }\n\n  private unbindAutoFit() {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }\n\n  /**\n   * when container size changed, change chart size props, and re-render.\n   */\n  private onResize = debounce(() => {\n    this.forceFit();\n  }, 300);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}