{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport Util from '../util';\nvar isPolygonsIntersect = Util.isPolygonsIntersect,\n  pathToPoints = Util.pathToPoints;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      shouldDeselect: undefined,\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n      // multiple: false,\n    };\n  },\n\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item;\n    // 排除在节点上拖动\n    if (item) {\n      return;\n    }\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates('dragstart');\n    }\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n    return path;\n  },\n  clearStates: function clearStates(action) {\n    if (action === void 0) {\n      action = 'canvas:click';\n    }\n    var _a = this,\n      graph = _a.graph,\n      selectedState = _a.selectedState,\n      shouldDeselect = _a.shouldDeselect;\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    if (!shouldDeselect || shouldDeselect({\n      action: action,\n      nodes: nodes,\n      edges: edges\n    })) {\n      nodes.forEach(function (node) {\n        return graph.setItemState(node, selectedState, false);\n      });\n      edges.forEach(function (edge) {\n        return graph.setItemState(edge, selectedState, false);\n      });\n    }\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n    var _a = this,\n      graph = _a.graph,\n      shouldUpdate = _a.shouldUpdate;\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) return; // 隐藏节点不能被选中\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select', _this)) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return; // 隐藏边不能够被选中\n          var model = edge.getModel();\n          var source = model.source,\n            target = model.target;\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select', _this)) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.delegate = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n    if (!code) {\n      return;\n    }\n    // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n    this.keydown = false;\n  }\n};","map":{"version":3,"names":["__assign","Util","isPolygonsIntersect","pathToPoints","DEFAULT_TRIGGER","ALLOW_EVENTS","isItemIntersecPolygon","item","polyPoints","shapePoints","shape","getKeyShape","get","attr","shapeBBox","getCanvasBBox","minX","minY","maxX","maxY","getDefaultCfg","delegateStyle","fill","fillOpacity","stroke","lineWidth","onSelect","onDeselect","shouldDeselect","undefined","selectedState","trigger","includeEdges","selectedEdges","selectedNodes","getEvents","indexOf","toLowerCase","console","warn","dragstart","drag","dragend","keyup","keydown","onDragStart","e","lasso","length","clearStates","createLasso","dragging","originPoint","x","y","points","push","show","onDragMove","updateLasso","onDragEnd","getSelectedItems","remove","getLassoPath","path","forEach","point","index","action","_a","graph","nodes","findAllByState","edges","node","setItemState","edge","emit","selectedItems","select","_this","shouldUpdate","lassoContour","map","getCanvasByPoint","state","selectedIds","getNodes","isVisible","model","getModel","id","getOutEdges","source","target","includes","self","addShape","attrs","capture","name","delegate","onKeyDown","code","key","onKeyUp"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-pc/es/behavior/lasso-select.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport Util from '../util';\nvar isPolygonsIntersect = Util.isPolygonsIntersect,\n  pathToPoints = Util.pathToPoints;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      shouldDeselect: undefined,\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n      // multiple: false,\n    };\n  },\n\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item;\n    // 排除在节点上拖动\n    if (item) {\n      return;\n    }\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates('dragstart');\n    }\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n    return path;\n  },\n  clearStates: function clearStates(action) {\n    if (action === void 0) {\n      action = 'canvas:click';\n    }\n    var _a = this,\n      graph = _a.graph,\n      selectedState = _a.selectedState,\n      shouldDeselect = _a.shouldDeselect;\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    if (!shouldDeselect || shouldDeselect({\n      action: action,\n      nodes: nodes,\n      edges: edges\n    })) {\n      nodes.forEach(function (node) {\n        return graph.setItemState(node, selectedState, false);\n      });\n      edges.forEach(function (edge) {\n        return graph.setItemState(edge, selectedState, false);\n      });\n    }\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n    var _a = this,\n      graph = _a.graph,\n      shouldUpdate = _a.shouldUpdate;\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) return; // 隐藏节点不能被选中\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select', _this)) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return; // 隐藏边不能够被选中\n          var model = edge.getModel();\n          var source = model.source,\n            target = model.target;\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select', _this)) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.delegate = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n    if (!code) {\n      return;\n    }\n    // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n    this.keydown = false;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}