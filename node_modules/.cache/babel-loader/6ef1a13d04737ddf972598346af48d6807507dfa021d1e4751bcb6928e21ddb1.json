{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor, meta, transformOptions } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\nvar Scatter = /** @class */function (_super) {\n  __extends(Scatter, _super);\n  function Scatter(container, options) {\n    var _this = _super.call(this, container, options) || this;\n    /** 图表类型 */\n    _this.type = 'scatter';\n    // 监听 brush 事件，处理 meta\n    _this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, function (evt) {\n      var _a, _b;\n      // 运行时，读取 option\n      var _c = _this,\n        options = _c.options,\n        chart = _c.chart;\n      if (((_a = evt.data) === null || _a === void 0 ? void 0 : _a.source) === BRUSH_FILTER_EVENTS.FILTER) {\n        var filteredData = _this.chart.filterData(_this.chart.getData());\n        meta({\n          chart: chart,\n          options: __assign(__assign({}, options), {\n            data: filteredData\n          })\n        });\n      }\n      if (((_b = evt.data) === null || _b === void 0 ? void 0 : _b.source) === BRUSH_FILTER_EVENTS.RESET) {\n        meta({\n          chart: chart,\n          options: options\n        });\n      }\n    });\n    return _this;\n  }\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n  Scatter.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n  Scatter.prototype.changeData = function (data) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, {\n      data: data\n    })));\n    var _a = this,\n      options = _a.options,\n      chart = _a.chart;\n    meta({\n      chart: chart,\n      options: options\n    });\n    this.chart.changeData(data);\n  };\n  /**\n   * 获取 散点图 的适配器\n   */\n  Scatter.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  Scatter.prototype.getDefaultOptions = function () {\n    return Scatter.getDefaultOptions();\n  };\n  return Scatter;\n}(Plot);\nexport { Scatter };","map":{"version":3,"names":["BRUSH_FILTER_EVENTS","VIEW_LIFE_CIRCLE","Plot","deepAssign","adaptor","meta","transformOptions","DEFAULT_OPTIONS","Scatter","_super","__extends","container","options","_this","call","type","on","BEFORE_RENDER","evt","_c","chart","_a","data","source","FILTER","filteredData","filterData","getData","__assign","_b","RESET","getDefaultOptions","prototype","changeData","updateOption","getSchemaAdaptor"],"sources":["../../../src/plots/scatter/index.ts"],"sourcesContent":["import { BRUSH_FILTER_EVENTS, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor, meta, transformOptions } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\nimport './interactions';\nimport { ScatterOptions } from './types';\n\nexport type { ScatterOptions };\n\nexport class Scatter extends Plot<ScatterOptions> {\n  /**\n   * 获取 散点图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<ScatterOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'scatter';\n\n  constructor(container: string | HTMLElement, options: ScatterOptions) {\n    super(container, options);\n\n    // 监听 brush 事件，处理 meta\n    this.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, (evt) => {\n      // 运行时，读取 option\n      const { options, chart } = this;\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.FILTER) {\n        const filteredData = this.chart.filterData(this.chart.getData());\n        meta({ chart, options: { ...options, data: filteredData } });\n      }\n\n      if (evt.data?.source === BRUSH_FILTER_EVENTS.RESET) {\n        meta({ chart, options });\n      }\n    });\n  }\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data: ScatterOptions['data']) {\n    this.updateOption(transformOptions(deepAssign({}, this.options, { data })));\n    const { options, chart } = this;\n    meta({ chart, options });\n    this.chart.changeData(data);\n  }\n\n  /**\n   * 获取 散点图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<ScatterOptions> {\n    return adaptor;\n  }\n\n  protected getDefaultOptions() {\n    return Scatter.getDefaultOptions();\n  }\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,EAAEC,gBAAgB,QAAQ,UAAU;AAEhE,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,UAAU,QAAQ,aAAa;AACxC,SAASC,OAAO,EAAEC,IAAI,EAAEC,gBAAgB,QAAQ,WAAW;AAC3D,SAASC,eAAe,QAAQ,YAAY;AAC5C,OAAO,gBAAgB;AAKvB,IAAAC,OAAA,0BAAAC,MAAA;EAA6BC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EAY3B,SAAAD,QAAYG,SAA+B,EAAEC,OAAuB;IAApE,IAAAC,KAAA,GACEJ,MAAA,CAAAK,IAAA,OAAMH,SAAS,EAAEC,OAAO,CAAC;IAJ3B;IACOC,KAAA,CAAAE,IAAI,GAAW,SAAS;IAK7B;IACAF,KAAI,CAACG,EAAE,CAACf,gBAAgB,CAACgB,aAAa,EAAE,UAACC,GAAG;;MAC1C;MACM,IAAAC,EAAA,GAAqBN,KAAI;QAAvBD,OAAO,GAAAO,EAAA,CAAAP,OAAA;QAAEQ,KAAK,GAAAD,EAAA,CAAAC,KAAS;MAC/B,IAAI,EAAAC,EAAA,GAAAH,GAAG,CAACI,IAAI,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,MAAM,MAAKvB,mBAAmB,CAACwB,MAAM,EAAE;QACnD,IAAMC,YAAY,GAAGZ,KAAI,CAACO,KAAK,CAACM,UAAU,CAACb,KAAI,CAACO,KAAK,CAACO,OAAO,EAAE,CAAC;QAChEtB,IAAI,CAAC;UAAEe,KAAK,EAAAA,KAAA;UAAER,OAAO,EAAAgB,QAAA,CAAAA,QAAA,KAAOhB,OAAO;YAAEU,IAAI,EAAEG;UAAY;QAAE,CAAE,CAAC;;MAG9D,IAAI,EAAAI,EAAA,GAAAX,GAAG,CAACI,IAAI,cAAAO,EAAA,uBAAAA,EAAA,CAAEN,MAAM,MAAKvB,mBAAmB,CAAC8B,KAAK,EAAE;QAClDzB,IAAI,CAAC;UAAEe,KAAK,EAAAA,KAAA;UAAER,OAAO,EAAAA;QAAA,CAAE,CAAC;;IAE5B,CAAC,CAAC;;EACJ;EA3BA;;;;EAIOJ,OAAA,CAAAuB,iBAAiB,GAAxB;IACE,OAAOxB,eAAe;EACxB,CAAC;EAuBD;;;;EAIOC,OAAA,CAAAwB,SAAA,CAAAC,UAAU,GAAjB,UAAkBX,IAA4B;IAC5C,IAAI,CAACY,YAAY,CAAC5B,gBAAgB,CAACH,UAAU,CAAC,EAAE,EAAE,IAAI,CAACS,OAAO,EAAE;MAAEU,IAAI,EAAAA;IAAA,CAAE,CAAC,CAAC,CAAC;IACrE,IAAAD,EAAA,GAAqB,IAAI;MAAvBT,OAAO,GAAAS,EAAA,CAAAT,OAAA;MAAEQ,KAAK,GAAAC,EAAA,CAAAD,KAAS;IAC/Bf,IAAI,CAAC;MAAEe,KAAK,EAAAA,KAAA;MAAER,OAAO,EAAAA;IAAA,CAAE,CAAC;IACxB,IAAI,CAACQ,KAAK,CAACa,UAAU,CAACX,IAAI,CAAC;EAC7B,CAAC;EAED;;;EAGUd,OAAA,CAAAwB,SAAA,CAAAG,gBAAgB,GAA1B;IACE,OAAO/B,OAAO;EAChB,CAAC;EAESI,OAAA,CAAAwB,SAAA,CAAAD,iBAAiB,GAA3B;IACE,OAAOvB,OAAO,CAACuB,iBAAiB,EAAE;EACpC,CAAC;EACH,OAAAvB,OAAC;AAAD,CAAC,CAnD4BN,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}