{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\nimport { PolygonExtrudeTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/extrusion/polygon_extrusion_frag.glsl' */\nvar polygonExtrudeFrag = \"\\nin vec4 v_Color;\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\nout vec4 outputColor;\\nvoid main() {\\n\\n  outputColor = v_Color;\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/extrusion/polygon_extrusion_vert.glsl' */\nvar polygonExtrudeVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\n\\nout vec4 v_Color;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n \\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size + (1.0 - a_Position.z) * extrusionBase, 1.0);\\n\\n  vec4 project_pos = project_position(pos);\\n   float lightWeight = calc_lighting(project_pos);\\n  v_Color = a_Color;\\n  v_Color = vec4(v_Color.rgb * lightWeight, v_Color.w * opacity);\\n\\n  gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nvar ExtrusionModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(ExtrusionModel, _BaseModel);\n  var _super = _createSuper(ExtrusionModel);\n  function ExtrusionModel() {\n    _classCallCheck(this, ExtrusionModel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExtrusionModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var commoninfo = this.getCommonUniformsInfo();\n      var attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n      this.updateStyleUnifoms();\n      return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n    }\n  }, {\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var commonOptions = {};\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.buildModels());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$getShaders, frag, vert, type, model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;\n              this.initUniformsBuffer();\n              _context2.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: type,\n                vertexShader: vert,\n                fragmentShader: frag,\n                inject: this.getInject(),\n                triangulation: PolygonExtrudeTriangulation,\n                depth: {\n                  enable: true\n                }\n              });\n            case 4:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        frag: polygonExtrudeFrag,\n        vert: polygonExtrudeVert,\n        type: 'polygonExtrude'\n      };\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n    }\n  }]);\n  return ExtrusionModel;\n}(BaseModel);\nexport { ExtrusionModel as default };","map":{"version":3,"names":["_asyncToGenerator","_objectSpread","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_regeneratorRuntime","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AttributeType","gl","BaseModel","PolygonExtrudeTriangulation","polygonExtrudeFrag","polygonExtrudeVert","ShaderLocation","ExtrusionModel","_BaseModel","_super","key","value","getUninforms","commoninfo","getCommonUniformsInfo","attributeInfo","getUniformsBufferInfo","getStyleAttribute","updateStyleUnifoms","uniformsOption","commonOptions","commonBufferInfo","_initModels","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","buildModels","stop","initModels","_buildModels","_callee2","_this$getShaders","frag","vert","type","model","_callee2$","_context2","getShaders","initUniformsBuffer","layer","buildLayerModel","moduleName","vertexShader","fragmentShader","inject","getInject","triangulation","depth","enable","sent","clearModels","_this$texture","texture","destroy","registerBuiltinAttributes","styleAttributeService","registerStyleAttribute","name","Attribute","descriptor","shaderLocation","NORMAL","buffer","usage","STATIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","normal","SIZE","DYNAMIC_DRAW","_feature$size","Array","isArray","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/polygon/models/extrusion.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from \"../../core/BaseModel\";\nimport { PolygonExtrudeTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/extrusion/polygon_extrusion_frag.glsl' */\nvar polygonExtrudeFrag = \"\\nin vec4 v_Color;\\n#pragma include \\\"scene_uniforms\\\"\\n#pragma include \\\"picking\\\"\\nout vec4 outputColor;\\nvoid main() {\\n\\n  outputColor = v_Color;\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/extrusion/polygon_extrusion_vert.glsl' */\nvar polygonExtrudeVert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\n\\nout vec4 v_Color;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n \\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size + (1.0 - a_Position.z) * extrusionBase, 1.0);\\n\\n  vec4 project_pos = project_position(pos);\\n   float lightWeight = calc_lighting(project_pos);\\n  v_Color = a_Color;\\n  v_Color = vec4(v_Color.rgb * lightWeight, v_Color.w * opacity);\\n\\n  gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xyz, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nvar ExtrusionModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(ExtrusionModel, _BaseModel);\n  var _super = _createSuper(ExtrusionModel);\n  function ExtrusionModel() {\n    _classCallCheck(this, ExtrusionModel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExtrusionModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var commoninfo = this.getCommonUniformsInfo();\n      var attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());\n      this.updateStyleUnifoms();\n      return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);\n    }\n  }, {\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var commonOptions = {};\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.buildModels());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$getShaders, frag, vert, type, model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type;\n              this.initUniformsBuffer();\n              _context2.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: type,\n                vertexShader: vert,\n                fragmentShader: frag,\n                inject: this.getInject(),\n                triangulation: PolygonExtrudeTriangulation,\n                depth: {\n                  enable: true\n                }\n              });\n            case 4:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        frag: polygonExtrudeFrag,\n        vert: polygonExtrudeVert,\n        type: 'polygonExtrude'\n      };\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n    }\n  }]);\n  return ExtrusionModel;\n}(BaseModel);\nexport { ExtrusionModel as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}