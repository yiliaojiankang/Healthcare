{"ast":null,"code":"import { assign, isArray } from '@antv/util';\nimport * as d3Hierarchy from 'd3-hierarchy';\nimport { getAllNodes, getField } from './util';\nvar DEFAULT_OPTIONS = {\n  field: 'value',\n  as: ['x', 'y', 'r'],\n  // 默认降序\n  sort: function (a, b) {\n    return b.value - a.value;\n  }\n};\nexport function pack(data, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  var as = options.as;\n  if (!isArray(as) || as.length !== 3) {\n    throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ \"x\", \"y\", \"r\" ])!');\n  }\n  var field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n  var packLayout = function (data) {\n    return d3Hierarchy.pack().size(options.size).padding(options.padding)(d3Hierarchy.hierarchy(data).sum(function (d) {\n      return d[field];\n    }).sort(options.sort));\n  };\n  var root = packLayout(data);\n  var x = as[0];\n  var y = as[1];\n  var r = as[2];\n  root.each(function (node) {\n    node[x] = node.x;\n    node[y] = node.y;\n    node[r] = node.r;\n  });\n  return getAllNodes(root);\n}","map":{"version":3,"names":["assign","isArray","d3Hierarchy","getAllNodes","getField","DEFAULT_OPTIONS","field","as","sort","a","b","value","pack","data","options","length","TypeError","e","console","warn","packLayout","size","padding","hierarchy","sum","d","root","x","y","r","each","node"],"sources":["../../../src/utils/hierarchy/pack.ts"],"sourcesContent":["import { assign, isArray } from '@antv/util';\nimport * as d3Hierarchy from 'd3-hierarchy';\nimport { HierarchyOption } from './types';\nimport { getAllNodes, getField } from './util';\n\ntype Options = Omit<HierarchyOption, 'as'> & { as?: [string, string, string] };\n\nconst DEFAULT_OPTIONS: Options = {\n  field: 'value',\n  as: ['x', 'y', 'r'],\n  // 默认降序\n  sort: (a, b) => b.value - a.value,\n};\n\nexport function pack(data: any, options: Options): any[] {\n  options = assign({} as Options, DEFAULT_OPTIONS, options);\n  const as = options.as;\n  if (!isArray(as) || as.length !== 3) {\n    throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ \"x\", \"y\", \"r\" ])!');\n  }\n\n  let field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  const packLayout = (data) =>\n    d3Hierarchy.pack().size(options.size).padding(options.padding)(\n      d3Hierarchy\n        .hierarchy(data)\n        .sum((d) => d[field])\n        .sort(options.sort)\n    );\n\n  const root = packLayout(data);\n\n  const x = as[0];\n  const y = as[1];\n  const r = as[2];\n  root.each((node) => {\n    node[x] = node.x;\n    node[y] = node.y;\n    node[r] = node.r;\n  });\n\n  return getAllNodes(root);\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,OAAO,QAAQ,YAAY;AAC5C,OAAO,KAAKC,WAAW,MAAM,cAAc;AAE3C,SAASC,WAAW,EAAEC,QAAQ,QAAQ,QAAQ;AAI9C,IAAMC,eAAe,GAAY;EAC/BC,KAAK,EAAE,OAAO;EACdC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACnB;EACAC,IAAI,EAAE,SAAAA,CAACC,CAAC,EAAEC,CAAC;IAAK,OAAAA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK;EAAjB;CACjB;AAED,OAAM,SAAUC,IAAIA,CAACC,IAAS,EAAEC,OAAgB;EAC9CA,OAAO,GAAGd,MAAM,CAAC,EAAa,EAAEK,eAAe,EAAES,OAAO,CAAC;EACzD,IAAMP,EAAE,GAAGO,OAAO,CAACP,EAAE;EACrB,IAAI,CAACN,OAAO,CAACM,EAAE,CAAC,IAAIA,EAAE,CAACQ,MAAM,KAAK,CAAC,EAAE;IACnC,MAAM,IAAIC,SAAS,CAAC,0EAA0E,CAAC;;EAGjG,IAAIV,KAAK;EACT,IAAI;IACFA,KAAK,GAAGF,QAAQ,CAACU,OAAO,CAAC;GAC1B,CAAC,OAAOG,CAAC,EAAE;IACVC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;;EAGjB,IAAMG,UAAU,GAAG,SAAAA,CAACP,IAAI;IACtB,OAAAX,WAAW,CAACU,IAAI,EAAE,CAACS,IAAI,CAACP,OAAO,CAACO,IAAI,CAAC,CAACC,OAAO,CAACR,OAAO,CAACQ,OAAO,CAAC,CAC5DpB,WAAW,CACRqB,SAAS,CAACV,IAAI,CAAC,CACfW,GAAG,CAAC,UAACC,CAAC;MAAK,OAAAA,CAAC,CAACnB,KAAK,CAAC;IAAR,CAAQ,CAAC,CACpBE,IAAI,CAACM,OAAO,CAACN,IAAI,CAAC,CACtB;EALD,CAKC;EAEH,IAAMkB,IAAI,GAAGN,UAAU,CAACP,IAAI,CAAC;EAE7B,IAAMc,CAAC,GAAGpB,EAAE,CAAC,CAAC,CAAC;EACf,IAAMqB,CAAC,GAAGrB,EAAE,CAAC,CAAC,CAAC;EACf,IAAMsB,CAAC,GAAGtB,EAAE,CAAC,CAAC,CAAC;EACfmB,IAAI,CAACI,IAAI,CAAC,UAACC,IAAI;IACbA,IAAI,CAACJ,CAAC,CAAC,GAAGI,IAAI,CAACJ,CAAC;IAChBI,IAAI,CAACH,CAAC,CAAC,GAAGG,IAAI,CAACH,CAAC;IAChBG,IAAI,CAACF,CAAC,CAAC,GAAGE,IAAI,CAACF,CAAC;EAClB,CAAC,CAAC;EAEF,OAAO1B,WAAW,CAACuB,IAAI,CAAC;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}