{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/**\n * The `TouchZoomRotateHandler` allows the user to zoom and rotate the map by\n * pinching on a touchscreen.\n *\n * They can zoom with one finger by double tapping and dragging. On the second tap,\n * hold the finger down and drag up or down to zoom in or out.\n */\nvar TouchZoomRotateHandler = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n  function TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom) {\n    _classCallCheck(this, TouchZoomRotateHandler);\n    this.el = el;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.tapDragZoom = tapDragZoom;\n    this.rotationDisabled = false;\n    this.enabled = true;\n  }\n\n  /**\n   * Enables the \"pinch to rotate and zoom\" interaction.\n   *\n   * @param {Object} [options] Options object.\n   * @param {string} [options.around] If \"center\" is passed, map will zoom around the center\n   *\n   * @example\n   *   map.touchZoomRotate.enable();\n   * @example\n   *   map.touchZoomRotate.enable({ around: 'center' });\n   */\n  _createClass(TouchZoomRotateHandler, [{\n    key: \"enable\",\n    value: function enable(options) {\n      this.touchZoom.enable(options);\n      if (!this.rotationDisabled) {\n        this.touchRotate.enable(options);\n      }\n      this.tapDragZoom.enable();\n      this.el.classList.add('l7-touch-zoom-rotate');\n    }\n\n    /**\n     * Disables the \"pinch to rotate and zoom\" interaction.\n     *\n     * @example\n     *   map.touchZoomRotate.disable();\n     */\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.touchZoom.disable();\n      this.touchRotate.disable();\n      this.tapDragZoom.disable();\n      this.el.classList.remove('l7-touch-zoom-rotate');\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"pinch to rotate and zoom\" interaction is enabled.\n     */\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.touchZoom.isEnabled() && (this.rotationDisabled || this.touchRotate.isEnabled()) && this.tapDragZoom.isEnabled();\n    }\n\n    /**\n     * Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.\n     *\n     * @returns {boolean} //eslint-disable-line\n     */\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.touchZoom.isActive() || this.touchRotate.isActive() || this.tapDragZoom.isActive();\n    }\n\n    /**\n     * Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\"\n     * interaction enabled.\n     *\n     * @example\n     *   map.touchZoomRotate.disableRotation();\n     */\n  }, {\n    key: \"disableRotation\",\n    value: function disableRotation() {\n      this.rotationDisabled = true;\n      this.touchRotate.disable();\n    }\n\n    /**\n     * Enables the \"pinch to rotate\" interaction.\n     *\n     * @example\n     *   map.touchZoomRotate.enable();\n     *   map.touchZoomRotate.enableRotation();\n     */\n  }, {\n    key: \"enableRotation\",\n    value: function enableRotation() {\n      this.rotationDisabled = false;\n      if (this.touchZoom.isEnabled()) {\n        this.touchRotate.enable();\n      }\n    }\n  }]);\n  return TouchZoomRotateHandler;\n}();\nexport { TouchZoomRotateHandler as default };","map":{"version":3,"names":["_classCallCheck","_createClass","TouchZoomRotateHandler","el","touchZoom","touchRotate","tapDragZoom","rotationDisabled","enabled","key","value","enable","options","classList","add","disable","remove","isEnabled","isActive","disableRotation","enableRotation","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-map/es/handler/shim/touch_zoom_rotate.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/**\n * The `TouchZoomRotateHandler` allows the user to zoom and rotate the map by\n * pinching on a touchscreen.\n *\n * They can zoom with one finger by double tapping and dragging. On the second tap,\n * hold the finger down and drag up or down to zoom in or out.\n */\nvar TouchZoomRotateHandler = /*#__PURE__*/function () {\n  /**\n   * @private\n   */\n  function TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom) {\n    _classCallCheck(this, TouchZoomRotateHandler);\n    this.el = el;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.tapDragZoom = tapDragZoom;\n    this.rotationDisabled = false;\n    this.enabled = true;\n  }\n\n  /**\n   * Enables the \"pinch to rotate and zoom\" interaction.\n   *\n   * @param {Object} [options] Options object.\n   * @param {string} [options.around] If \"center\" is passed, map will zoom around the center\n   *\n   * @example\n   *   map.touchZoomRotate.enable();\n   * @example\n   *   map.touchZoomRotate.enable({ around: 'center' });\n   */\n  _createClass(TouchZoomRotateHandler, [{\n    key: \"enable\",\n    value: function enable(options) {\n      this.touchZoom.enable(options);\n      if (!this.rotationDisabled) {\n        this.touchRotate.enable(options);\n      }\n      this.tapDragZoom.enable();\n      this.el.classList.add('l7-touch-zoom-rotate');\n    }\n\n    /**\n     * Disables the \"pinch to rotate and zoom\" interaction.\n     *\n     * @example\n     *   map.touchZoomRotate.disable();\n     */\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.touchZoom.disable();\n      this.touchRotate.disable();\n      this.tapDragZoom.disable();\n      this.el.classList.remove('l7-touch-zoom-rotate');\n    }\n\n    /**\n     * Returns a Boolean indicating whether the \"pinch to rotate and zoom\" interaction is enabled.\n     *\n     * @returns {boolean} `true` if the \"pinch to rotate and zoom\" interaction is enabled.\n     */\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.touchZoom.isEnabled() && (this.rotationDisabled || this.touchRotate.isEnabled()) && this.tapDragZoom.isEnabled();\n    }\n\n    /**\n     * Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.\n     *\n     * @returns {boolean} //eslint-disable-line\n     */\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.touchZoom.isActive() || this.touchRotate.isActive() || this.tapDragZoom.isActive();\n    }\n\n    /**\n     * Disables the \"pinch to rotate\" interaction, leaving the \"pinch to zoom\"\n     * interaction enabled.\n     *\n     * @example\n     *   map.touchZoomRotate.disableRotation();\n     */\n  }, {\n    key: \"disableRotation\",\n    value: function disableRotation() {\n      this.rotationDisabled = true;\n      this.touchRotate.disable();\n    }\n\n    /**\n     * Enables the \"pinch to rotate\" interaction.\n     *\n     * @example\n     *   map.touchZoomRotate.enable();\n     *   map.touchZoomRotate.enableRotation();\n     */\n  }, {\n    key: \"enableRotation\",\n    value: function enableRotation() {\n      this.rotationDisabled = false;\n      if (this.touchZoom.isEnabled()) {\n        this.touchRotate.enable();\n      }\n    }\n  }]);\n  return TouchZoomRotateHandler;\n}();\nexport { TouchZoomRotateHandler as default };"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,OAAOC,YAAY,MAAM,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,sBAAsB,GAAG,aAAa,YAAY;EACpD;AACF;AACA;EACE,SAASA,sBAAsBA,CAACC,EAAE,EAAEC,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAAE;IACvEN,eAAe,CAAC,IAAI,EAAEE,sBAAsB,CAAC;IAC7C,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,OAAO,GAAG,IAAI;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEP,YAAY,CAACC,sBAAsB,EAAE,CAAC;IACpCO,GAAG,EAAE,QAAQ;IACbC,KAAK,EAAE,SAASC,MAAMA,CAACC,OAAO,EAAE;MAC9B,IAAI,CAACR,SAAS,CAACO,MAAM,CAACC,OAAO,CAAC;MAC9B,IAAI,CAAC,IAAI,CAACL,gBAAgB,EAAE;QAC1B,IAAI,CAACF,WAAW,CAACM,MAAM,CAACC,OAAO,CAAC;MAClC;MACA,IAAI,CAACN,WAAW,CAACK,MAAM,CAAC,CAAC;MACzB,IAAI,CAACR,EAAE,CAACU,SAAS,CAACC,GAAG,CAAC,sBAAsB,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDL,GAAG,EAAE,SAAS;IACdC,KAAK,EAAE,SAASK,OAAOA,CAAA,EAAG;MACxB,IAAI,CAACX,SAAS,CAACW,OAAO,CAAC,CAAC;MACxB,IAAI,CAACV,WAAW,CAACU,OAAO,CAAC,CAAC;MAC1B,IAAI,CAACT,WAAW,CAACS,OAAO,CAAC,CAAC;MAC1B,IAAI,CAACZ,EAAE,CAACU,SAAS,CAACG,MAAM,CAAC,sBAAsB,CAAC;IAClD;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDP,GAAG,EAAE,WAAW;IAChBC,KAAK,EAAE,SAASO,SAASA,CAAA,EAAG;MAC1B,OAAO,IAAI,CAACb,SAAS,CAACa,SAAS,CAAC,CAAC,KAAK,IAAI,CAACV,gBAAgB,IAAI,IAAI,CAACF,WAAW,CAACY,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAACX,WAAW,CAACW,SAAS,CAAC,CAAC;IAC9H;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDR,GAAG,EAAE,UAAU;IACfC,KAAK,EAAE,SAASQ,QAAQA,CAAA,EAAG;MACzB,OAAO,IAAI,CAACd,SAAS,CAACc,QAAQ,CAAC,CAAC,IAAI,IAAI,CAACb,WAAW,CAACa,QAAQ,CAAC,CAAC,IAAI,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAAC;IAChG;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDT,GAAG,EAAE,iBAAiB;IACtBC,KAAK,EAAE,SAASS,eAAeA,CAAA,EAAG;MAChC,IAAI,CAACZ,gBAAgB,GAAG,IAAI;MAC5B,IAAI,CAACF,WAAW,CAACU,OAAO,CAAC,CAAC;IAC5B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDN,GAAG,EAAE,gBAAgB;IACrBC,KAAK,EAAE,SAASU,cAAcA,CAAA,EAAG;MAC/B,IAAI,CAACb,gBAAgB,GAAG,KAAK;MAC7B,IAAI,IAAI,CAACH,SAAS,CAACa,SAAS,CAAC,CAAC,EAAE;QAC9B,IAAI,CAACZ,WAAW,CAACM,MAAM,CAAC,CAAC;MAC3B;IACF;EACF,CAAC,CAAC,CAAC;EACH,OAAOT,sBAAsB;AAC/B,CAAC,CAAC,CAAC;AACH,SAASA,sBAAsB,IAAImB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}