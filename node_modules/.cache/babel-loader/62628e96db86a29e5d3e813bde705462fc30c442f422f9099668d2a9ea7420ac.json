{"ast":null,"code":"import colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\nvar each = function (f) {\n  return function (c0, c1) {\n    var out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n};\n/**\n * 混合方法集合\n */\nvar blendObject = {\n  normal: function (a) {\n    return a;\n  },\n  multiply: function (a, b) {\n    return a * b / 255;\n  },\n  screen: function (a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  },\n  overlay: function (a, b) {\n    return b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n  },\n  darken: function (a, b) {\n    return a > b ? b : a;\n  },\n  lighten: function (a, b) {\n    return a > b ? a : b;\n  },\n  dodge: function (a, b) {\n    if (a === 255) return 255;\n    a = 255 * (b / 255) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: function (a, b) {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;else if (a === 0) return 0;else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  }\n};\n/**\n * 获取混合方法\n */\nexport var innerBlend = function (mode) {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n  return blendObject[mode];\n};\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\nexport function blend(c0, c1, mode) {\n  if (mode === void 0) {\n    mode = 'normal';\n  }\n  // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n  var blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n  var _a = colorToArr(c0),\n    r0 = _a[0],\n    g0 = _a[1],\n    b0 = _a[2],\n    a0 = _a[3];\n  var _b = colorToArr(c1),\n    r1 = _b[0],\n    g1 = _b[1],\n    b1 = _b[2],\n    a1 = _b[3];\n  var a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n  var r = Math.round((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a * 255);\n  var g = Math.round((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a * 255);\n  var b = Math.round((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a * 255);\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n}\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\nexport function colorToArr(c) {\n  var color = c.replace('/s+/g', ''); // 去除所有空格\n  var rgbaArr;\n  // 'red' -> [r, g, b, 1]\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]);\n  }\n  // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(',');\n  // '#fff000' -> [r, g, b, 1]\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n  // [r, g, b, a] 前三位取整\n  return rgbaArr.map(function (item, index) {\n    return index === 3 ? Number(item) : item | 0;\n  });\n}","map":{"version":3,"names":["colorUtil","each","f","c0","c1","out","blendObject","normal","a","multiply","b","screen","overlay","darken","lighten","dodge","burn","Math","min","innerBlend","mode","Error","blend","blendRgbArr","colorToArr","_a","r0","g0","b0","a0","_b","r1","g1","b1","a1","Number","toFixed","r","round","g","concat","c","color","replace","rgbaArr","startsWith","rgb2arr","toRGB","split","map","item","index"],"sources":["../../../src/utils/color/blend.ts"],"sourcesContent":["import colorUtil from '@antv/color-util';\n/*\n * interpolates between a set of colors uzing a bezier spline\n * blend mode formulas taken from http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/\n */\n\nconst each =\n  (f) =>\n  (c0: number[], c1: number[]): number[] => {\n    const out = [];\n    out[0] = f(c0[0], c1[0]);\n    out[1] = f(c0[1], c1[1]);\n    out[2] = f(c0[2], c1[2]);\n    return out;\n  };\n\n/**\n * 混合方法集合\n */\nconst blendObject = {\n  normal: (a: number) => a,\n  multiply: (a: number, b: number) => (a * b) / 255,\n  screen: (a: number, b: number) => 255 * (1 - (1 - a / 255) * (1 - b / 255)),\n  overlay: (a: number, b: number) => (b < 128 ? (2 * a * b) / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))),\n  darken: (a: number, b: number) => (a > b ? b : a),\n  lighten: (a: number, b: number) => (a > b ? a : b),\n  dodge: (a: number, b: number) => {\n    if (a === 255) return 255;\n    a = (255 * (b / 255)) / (1 - a / 255);\n    return a > 255 ? 255 : a;\n  },\n  burn: (a: number, b: number) => {\n    // 参考 w3c 的写法，考虑除数为 0 的情况\n    if (b === 255) return 255;\n    else if (a === 0) return 0;\n    else return 255 * (1 - Math.min(1, (1 - b / 255) / (a / 255)));\n  },\n};\n\n/**\n * 获取混合方法\n */\nexport const innerBlend = (mode: string) => {\n  if (!blendObject[mode]) {\n    throw new Error('unknown blend mode ' + mode);\n  }\n  return blendObject[mode];\n};\n\n/**\n * 混合颜色，并处理透明度情况\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c0\n * @param c1\n * @param mode 混合模式\n * @return rbga\n */\nexport function blend(c0: string, c1: string, mode = 'normal') {\n  // blendRgbArr: 生成不考虑透明度的 blend color: [r, g, b]\n  const blendRgbArr = each(innerBlend(mode))(colorToArr(c0), colorToArr(c1));\n\n  const [r0, g0, b0, a0] = colorToArr(c0);\n  const [r1, g1, b1, a1] = colorToArr(c1);\n\n  const a = Number((a0 + a1 * (1 - a0)).toFixed(2));\n\n  const r = Math.round(\n    ((a0 * (1 - a1) * (r0 / 255) + a0 * a1 * (blendRgbArr[0] / 255) + (1 - a0) * a1 * (r1 / 255)) / a) * 255\n  );\n  const g = Math.round(\n    ((a0 * (1 - a1) * (g0 / 255) + a0 * a1 * (blendRgbArr[1] / 255) + (1 - a0) * a1 * (g1 / 255)) / a) * 255\n  );\n  const b = Math.round(\n    ((a0 * (1 - a1) * (b0 / 255) + a0 * a1 * (blendRgbArr[2] / 255) + (1 - a0) * a1 * (b1 / 255)) / a) * 255\n  );\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\n/**\n * 统一颜色输入的格式 [r, g, b, a]\n * 参考：https://www.w3.org/TR/compositing/#blending\n * @param c color\n * @return [r, g, b, a]\n */\nexport function colorToArr(c: string): number[] {\n  const color = c.replace('/s+/g', ''); // 去除所有空格\n  let rgbaArr: any[];\n\n  // 'red' -> [r, g, b, 1]\n  if (typeof color === 'string' && !color.startsWith('rgba') && !color.startsWith('#')) {\n    return (rgbaArr = colorUtil.rgb2arr(colorUtil.toRGB(color)).concat([1]));\n  }\n\n  // rgba(255, 200, 125, 0.5) -> [r, g, b, a]\n  if (color.startsWith('rgba')) rgbaArr = color.replace('rgba(', '').replace(')', '').split(',');\n\n  // '#fff000' -> [r, g, b, 1]\n  if (color.startsWith('#')) rgbaArr = colorUtil.rgb2arr(color).concat([1]); // 如果是 16 进制（6 位数），默认透明度 1\n\n  // [r, g, b, a] 前三位取整\n  return rgbaArr.map((item, index) => (index === 3 ? Number(item) : item | 0));\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,kBAAkB;AACxC;;;;AAKA,IAAMC,IAAI,GACR,SAAAA,CAACC,CAAC;EACF,iBAACC,EAAY,EAAEC,EAAY;IACzB,IAAMC,GAAG,GAAG,EAAE;IACdA,GAAG,CAAC,CAAC,CAAC,GAAGH,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxBC,GAAG,CAAC,CAAC,CAAC,GAAGH,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxBC,GAAG,CAAC,CAAC,CAAC,GAAGH,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB,OAAOC,GAAG;EACZ,CAAC;AAND,CAMC;AAEH;;;AAGA,IAAMC,WAAW,GAAG;EAClBC,MAAM,EAAE,SAAAA,CAACC,CAAS;IAAK,OAAAA,CAAC;EAAD,CAAC;EACxBC,QAAQ,EAAE,SAAAA,CAACD,CAAS,EAAEE,CAAS;IAAK,OAACF,CAAC,GAAGE,CAAC,GAAI,GAAG;EAAb,CAAa;EACjDC,MAAM,EAAE,SAAAA,CAACH,CAAS,EAAEE,CAAS;IAAK,UAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGF,CAAC,GAAG,GAAG,KAAK,CAAC,GAAGE,CAAC,GAAG,GAAG,CAAC,CAAC;EAAzC,CAAyC;EAC3EE,OAAO,EAAE,SAAAA,CAACJ,CAAS,EAAEE,CAAS;IAAK,OAACA,CAAC,GAAG,GAAG,GAAI,CAAC,GAAGF,CAAC,GAAGE,CAAC,GAAI,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGF,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAGE,CAAC,GAAG,GAAG,CAAC,CAAC;EAA5E,CAA6E;EAChHG,MAAM,EAAE,SAAAA,CAACL,CAAS,EAAEE,CAAS;IAAK,OAACF,CAAC,GAAGE,CAAC,GAAGA,CAAC,GAAGF,CAAC;EAAd,CAAe;EACjDM,OAAO,EAAE,SAAAA,CAACN,CAAS,EAAEE,CAAS;IAAK,OAACF,CAAC,GAAGE,CAAC,GAAGF,CAAC,GAAGE,CAAC;EAAd,CAAe;EAClDK,KAAK,EAAE,SAAAA,CAACP,CAAS,EAAEE,CAAS;IAC1B,IAAIF,CAAC,KAAK,GAAG,EAAE,OAAO,GAAG;IACzBA,CAAC,GAAI,GAAG,IAAIE,CAAC,GAAG,GAAG,CAAC,IAAK,CAAC,GAAGF,CAAC,GAAG,GAAG,CAAC;IACrC,OAAOA,CAAC,GAAG,GAAG,GAAG,GAAG,GAAGA,CAAC;EAC1B,CAAC;EACDQ,IAAI,EAAE,SAAAA,CAACR,CAAS,EAAEE,CAAS;IACzB;IACA,IAAIA,CAAC,KAAK,GAAG,EAAE,OAAO,GAAG,CAAC,KACrB,IAAIF,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,KACtB,OAAO,GAAG,IAAI,CAAC,GAAGS,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGR,CAAC,GAAG,GAAG,KAAKF,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;EAChE;CACD;AAED;;;AAGA,OAAO,IAAMW,UAAU,GAAG,SAAAA,CAACC,IAAY;EACrC,IAAI,CAACd,WAAW,CAACc,IAAI,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,GAAGD,IAAI,CAAC;;EAE/C,OAAOd,WAAW,CAACc,IAAI,CAAC;AAC1B,CAAC;AAED;;;;;;;;AAQA,OAAM,SAAUE,KAAKA,CAACnB,EAAU,EAAEC,EAAU,EAAEgB,IAAe;EAAf,IAAAA,IAAA;IAAAA,IAAA,WAAe;EAAA;EAC3D;EACA,IAAMG,WAAW,GAAGtB,IAAI,CAACkB,UAAU,CAACC,IAAI,CAAC,CAAC,CAACI,UAAU,CAACrB,EAAE,CAAC,EAAEqB,UAAU,CAACpB,EAAE,CAAC,CAAC;EAEpE,IAAAqB,EAAA,GAAmBD,UAAU,CAACrB,EAAE,CAAC;IAAhCuB,EAAE,GAAAD,EAAA;IAAEE,EAAE,GAAAF,EAAA;IAAEG,EAAE,GAAAH,EAAA;IAAEI,EAAE,GAAAJ,EAAA,GAAkB;EACjC,IAAAK,EAAA,GAAmBN,UAAU,CAACpB,EAAE,CAAC;IAAhC2B,EAAE,GAAAD,EAAA;IAAEE,EAAE,GAAAF,EAAA;IAAEG,EAAE,GAAAH,EAAA;IAAEI,EAAE,GAAAJ,EAAA,GAAkB;EAEvC,IAAMtB,CAAC,GAAG2B,MAAM,CAAC,CAACN,EAAE,GAAGK,EAAE,IAAI,CAAC,GAAGL,EAAE,CAAC,EAAEO,OAAO,CAAC,CAAC,CAAC,CAAC;EAEjD,IAAMC,CAAC,GAAGpB,IAAI,CAACqB,KAAK,CACjB,CAACT,EAAE,IAAI,CAAC,GAAGK,EAAE,CAAC,IAAIR,EAAE,GAAG,GAAG,CAAC,GAAGG,EAAE,GAAGK,EAAE,IAAIX,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGM,EAAE,IAAIK,EAAE,IAAIH,EAAE,GAAG,GAAG,CAAC,IAAIvB,CAAC,GAAI,GAAG,CACzG;EACD,IAAM+B,CAAC,GAAGtB,IAAI,CAACqB,KAAK,CACjB,CAACT,EAAE,IAAI,CAAC,GAAGK,EAAE,CAAC,IAAIP,EAAE,GAAG,GAAG,CAAC,GAAGE,EAAE,GAAGK,EAAE,IAAIX,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGM,EAAE,IAAIK,EAAE,IAAIF,EAAE,GAAG,GAAG,CAAC,IAAIxB,CAAC,GAAI,GAAG,CACzG;EACD,IAAME,CAAC,GAAGO,IAAI,CAACqB,KAAK,CACjB,CAACT,EAAE,IAAI,CAAC,GAAGK,EAAE,CAAC,IAAIN,EAAE,GAAG,GAAG,CAAC,GAAGC,EAAE,GAAGK,EAAE,IAAIX,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGM,EAAE,IAAIK,EAAE,IAAID,EAAE,GAAG,GAAG,CAAC,IAAIzB,CAAC,GAAI,GAAG,CACzG;EAED,OAAO,QAAAgC,MAAA,CAAQH,CAAC,QAAAG,MAAA,CAAKD,CAAC,QAAAC,MAAA,CAAK9B,CAAC,QAAA8B,MAAA,CAAKhC,CAAC,MAAG;AACvC;AAEA;;;;;;AAMA,OAAM,SAAUgB,UAAUA,CAACiB,CAAS;EAClC,IAAMC,KAAK,GAAGD,CAAC,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;EACtC,IAAIC,OAAc;EAElB;EACA,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACG,UAAU,CAAC,MAAM,CAAC,IAAI,CAACH,KAAK,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;IACpF,OAAQD,OAAO,GAAG5C,SAAS,CAAC8C,OAAO,CAAC9C,SAAS,CAAC+C,KAAK,CAACL,KAAK,CAAC,CAAC,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;EAGzE;EACA,IAAIE,KAAK,CAACG,UAAU,CAAC,MAAM,CAAC,EAAED,OAAO,GAAGF,KAAK,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACK,KAAK,CAAC,GAAG,CAAC;EAE9F;EACA,IAAIN,KAAK,CAACG,UAAU,CAAC,GAAG,CAAC,EAAED,OAAO,GAAG5C,SAAS,CAAC8C,OAAO,CAACJ,KAAK,CAAC,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAE3E;EACA,OAAOI,OAAO,CAACK,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;IAAK,OAACA,KAAK,KAAK,CAAC,GAAGhB,MAAM,CAACe,IAAI,CAAC,GAAGA,IAAI,GAAG,CAAC;EAAtC,CAAuC,CAAC;AAC9E"},"metadata":{},"sourceType":"module","externalDependencies":[]}