{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar init_order_1 = __importDefault(require(\"./init-order\"));\nvar cross_count_1 = __importDefault(require(\"./cross-count\"));\nvar build_layer_graph_1 = __importDefault(require(\"./build-layer-graph\"));\nvar add_subgraph_constraints_1 = __importDefault(require(\"./add-subgraph-constraints\"));\nvar sort_subgraph_1 = __importDefault(require(\"./sort-subgraph\"));\nvar util_1 = require(\"../../../../util\");\nvar graph_1 = require(\"../../graph\");\nvar util_2 = require(\"../util\");\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nvar order = function (g, keepNodeOrder) {\n  var mxRank = (0, util_2.maxRank)(g);\n  var range1 = [];\n  var range2 = [];\n  for (var i = 1; i < mxRank + 1; i++) range1.push(i);\n  for (var i = mxRank - 1; i > -1; i--) range2.push(i);\n  var downLayerGraphs = buildLayerGraphs(g, range1, \"inEdges\");\n  var upLayerGraphs = buildLayerGraphs(g, range2, \"outEdges\");\n  var layering = (0, init_order_1.default)(g);\n  assignOrder(g, layering);\n  var bestCC = Number.POSITIVE_INFINITY;\n  var best;\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, false, keepNodeOrder);\n    layering = (0, util_2.buildLayerMatrix)(g);\n    var cc = (0, cross_count_1.default)(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = (0, util_1.clone)(layering);\n      bestCC = cc;\n    }\n  }\n  // consider use previous result, maybe somewhat reduendant\n  layering = (0, init_order_1.default)(g);\n  assignOrder(g, layering);\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true, keepNodeOrder);\n    layering = (0, util_2.buildLayerMatrix)(g);\n    var cc = (0, cross_count_1.default)(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = (0, util_1.clone)(layering);\n      bestCC = cc;\n    }\n  }\n  assignOrder(g, best);\n};\nvar buildLayerGraphs = function (g, ranks, relationship) {\n  return ranks.map(function (rank) {\n    return (0, build_layer_graph_1.default)(g, rank, relationship);\n  });\n};\nvar sweepLayerGraphs = function (layerGraphs, biasRight, usePrev, keepNodeOrder) {\n  var cg = new graph_1.Graph();\n  layerGraphs === null || layerGraphs === void 0 ? void 0 : layerGraphs.forEach(function (lg) {\n    var _a;\n    var root = lg.graph().root;\n    var sorted = (0, sort_subgraph_1.default)(lg, root, cg, biasRight, usePrev, keepNodeOrder);\n    for (var i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n      var lnode = lg.node(sorted.vs[i]);\n      if (lnode) {\n        lnode.order = i;\n      }\n    }\n    (0, add_subgraph_constraints_1.default)(lg, cg, sorted.vs);\n  });\n};\nvar assignOrder = function (g, layering) {\n  layering === null || layering === void 0 ? void 0 : layering.forEach(function (layer) {\n    layer === null || layer === void 0 ? void 0 : layer.forEach(function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n};\nexports.default = order;","map":{"version":3,"names":["init_order_1","__importDefault","require","cross_count_1","build_layer_graph_1","add_subgraph_constraints_1","sort_subgraph_1","util_1","graph_1","util_2","order","g","keepNodeOrder","mxRank","maxRank","range1","range2","i","push","downLayerGraphs","buildLayerGraphs","upLayerGraphs","layering","default","assignOrder","bestCC","Number","POSITIVE_INFINITY","best","lastBest","sweepLayerGraphs","buildLayerMatrix","cc","clone","ranks","relationship","map","rank","layerGraphs","biasRight","usePrev","cg","Graph","forEach","lg","root","graph","sorted","_a","vs","length","lnode","node","layer","v","exports"],"sources":["../../../../../src/layout/dagre/src/order/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}