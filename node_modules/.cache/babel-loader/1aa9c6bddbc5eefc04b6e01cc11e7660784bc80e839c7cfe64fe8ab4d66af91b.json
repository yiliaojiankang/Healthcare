{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape } from '@antv/g2';\nregisterShape('polygon', 'circle', {\n  draw: function (cfg, group) {\n    var _a, _b;\n    var cx = cfg.x;\n    var cy = cfg.y;\n    var points = this.parsePoints(cfg.points);\n    var width = Math.abs(points[2].x - points[1].x);\n    var height = Math.abs(points[1].y - points[0].y);\n    var maxRadius = Math.min(width, height) / 2;\n    var value = Number(cfg.shape[1]);\n    var sizeRatio = Number(cfg.shape[2]);\n    var radiusRatio = Math.sqrt(sizeRatio);\n    var radius = maxRadius * radiusRatio * Math.sqrt(value);\n    var fill = ((_a = cfg.style) === null || _a === void 0 ? void 0 : _a.fill) || cfg.color || ((_b = cfg.defaultStyle) === null || _b === void 0 ? void 0 : _b.fill);\n    var polygon = group.addShape('circle', {\n      attrs: __assign(__assign(__assign({\n        x: cx,\n        y: cy,\n        r: radius\n      }, cfg.defaultStyle), cfg.style), {\n        fill: fill\n      })\n    });\n    return polygon;\n  }\n});","map":{"version":3,"names":["registerShape","draw","cfg","group","cx","x","cy","y","points","parsePoints","width","Math","abs","height","maxRadius","min","value","Number","shape","sizeRatio","radiusRatio","sqrt","radius","fill","_a","style","color","_b","defaultStyle","polygon","addShape","attrs","__assign","r"],"sources":["../../../../src/plots/heatmap/shapes/circle.ts"],"sourcesContent":["import { IGroup, registerShape, Types } from '@antv/g2';\n\nregisterShape('polygon', 'circle', {\n  draw(cfg: Types.ShapeInfo, group: IGroup) {\n    const cx = cfg.x as number;\n    const cy = cfg.y as number;\n\n    const points = this.parsePoints(cfg.points);\n    const width = Math.abs(points[2].x - points[1].x);\n    const height = Math.abs(points[1].y - points[0].y);\n    const maxRadius = Math.min(width, height) / 2;\n\n    const value = Number(cfg.shape[1]);\n    const sizeRatio = Number(cfg.shape[2]);\n    const radiusRatio = Math.sqrt(sizeRatio);\n    const radius = maxRadius * radiusRatio * Math.sqrt(value);\n    const fill = cfg.style?.fill || cfg.color || cfg.defaultStyle?.fill;\n    const polygon = group.addShape('circle', {\n      attrs: {\n        x: cx,\n        y: cy,\n        r: radius,\n        ...cfg.defaultStyle,\n        ...cfg.style,\n        fill,\n      },\n    });\n    return polygon;\n  },\n});\n"],"mappings":";AAAA,SAAiBA,aAAa,QAAe,UAAU;AAEvDA,aAAa,CAAC,SAAS,EAAE,QAAQ,EAAE;EACjCC,IAAI,WAAAA,CAACC,GAAoB,EAAEC,KAAa;;IACtC,IAAMC,EAAE,GAAGF,GAAG,CAACG,CAAW;IAC1B,IAAMC,EAAE,GAAGJ,GAAG,CAACK,CAAW;IAE1B,IAAMC,MAAM,GAAG,IAAI,CAACC,WAAW,CAACP,GAAG,CAACM,MAAM,CAAC;IAC3C,IAAME,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAC,CAAC,CAACH,CAAC,GAAGG,MAAM,CAAC,CAAC,CAAC,CAACH,CAAC,CAAC;IACjD,IAAMQ,MAAM,GAAGF,IAAI,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAC,CAAC,CAACD,CAAC,GAAGC,MAAM,CAAC,CAAC,CAAC,CAACD,CAAC,CAAC;IAClD,IAAMO,SAAS,GAAGH,IAAI,CAACI,GAAG,CAACL,KAAK,EAAEG,MAAM,CAAC,GAAG,CAAC;IAE7C,IAAMG,KAAK,GAAGC,MAAM,CAACf,GAAG,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC,IAAMC,SAAS,GAAGF,MAAM,CAACf,GAAG,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC;IACtC,IAAME,WAAW,GAAGT,IAAI,CAACU,IAAI,CAACF,SAAS,CAAC;IACxC,IAAMG,MAAM,GAAGR,SAAS,GAAGM,WAAW,GAAGT,IAAI,CAACU,IAAI,CAACL,KAAK,CAAC;IACzD,IAAMO,IAAI,GAAG,EAAAC,EAAA,GAAAtB,GAAG,CAACuB,KAAK,cAAAD,EAAA,uBAAAA,EAAA,CAAED,IAAI,KAAIrB,GAAG,CAACwB,KAAK,KAAI,CAAAC,EAAA,GAAAzB,GAAG,CAAC0B,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAEJ,IAAI;IACnE,IAAMM,OAAO,GAAG1B,KAAK,CAAC2B,QAAQ,CAAC,QAAQ,EAAE;MACvCC,KAAK,EAAAC,QAAA,CAAAA,QAAA,CAAAA,QAAA;QACH3B,CAAC,EAAED,EAAE;QACLG,CAAC,EAAED,EAAE;QACL2B,CAAC,EAAEX;MAAM,GACNpB,GAAG,CAAC0B,YAAY,GAChB1B,GAAG,CAACuB,KAAK;QACZF,IAAI,EAAAA;MAAA;KAEP,CAAC;IACF,OAAOM,OAAO;EAChB;CACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}