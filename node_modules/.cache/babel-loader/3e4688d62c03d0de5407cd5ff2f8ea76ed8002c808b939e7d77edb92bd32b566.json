{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray } from '@antv/util';\nimport { deepAssign } from '../../../utils';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\nimport { AxisType, DualAxesGeometry } from '../types';\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\nexport function isLine(geometryOption) {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\nexport function isColumn(geometryOption) {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\nexport function getGeometryOption(xField, yField, geometryOption) {\n  // 空默认为线\n  return isColumn(geometryOption) ? deepAssign({}, {\n    geometry: DualAxesGeometry.Column,\n    label: geometryOption.label && geometryOption.isRange ? {\n      content: function (item) {\n        var _a;\n        return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n      }\n    } : undefined\n  }, geometryOption) : __assign({\n    geometry: DualAxesGeometry.Line\n  }, geometryOption);\n}\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * 为了防止左右 yField 相同，导致变成 object 之后被覆盖，所以都转变成数组的形式\n * @param yField\n * @param transformAttribute\n */\nexport function transformObjectToArray(yField, transformAttribute) {\n  var y1 = yField[0],\n    y2 = yField[1];\n  if (isArray(transformAttribute)) {\n    // 将数组补齐为两个\n    var a1_1 = transformAttribute[0],\n      a2_1 = transformAttribute[1];\n    return [a1_1, a2_1];\n  }\n  var a1 = get(transformAttribute, y1);\n  var a2 = get(transformAttribute, y2);\n  return [a1, a2];\n}\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\nexport function getYAxisWithDefault(yAxis, axisType) {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n  return yAxis;\n}","map":{"version":3,"names":["get","isArray","deepAssign","DEFAULT_LEFT_YAXIS_CONFIG","DEFAULT_RIGHT_YAXIS_CONFIG","AxisType","DualAxesGeometry","isLine","geometryOption","Line","isColumn","Column","getGeometryOption","xField","yField","geometry","label","isRange","content","item","_a","join","undefined","__assign","transformObjectToArray","transformAttribute","y1","y2","a1_1","a2_1","a1","a2","getYAxisWithDefault","yAxis","axisType","Left","Right"],"sources":["../../../../src/plots/dual-axes/util/option.ts"],"sourcesContent":["import { get, isArray } from '@antv/util';\nimport { Axis } from '../../../types/axis';\nimport { deepAssign } from '../../../utils';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\nimport {\n  AxisType,\n  DualAxesGeometry,\n  DualAxesOptions,\n  GeometryColumnOption,\n  GeometryLineOption,\n  GeometryOption,\n} from '../types';\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\nexport function isLine(geometryOption: GeometryOption): geometryOption is GeometryLineOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\nexport function isColumn(geometryOption: GeometryOption): geometryOption is GeometryColumnOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\nexport function getGeometryOption(xField: string, yField: string, geometryOption: GeometryOption): GeometryOption {\n  // 空默认为线\n  return isColumn(geometryOption)\n    ? deepAssign(\n        {},\n        {\n          geometry: DualAxesGeometry.Column,\n          label:\n            geometryOption.label && geometryOption.isRange\n              ? {\n                  content: (item: object) => {\n                    return item[yField]?.join('-');\n                  },\n                }\n              : undefined,\n        },\n        geometryOption\n      )\n    : {\n        geometry: DualAxesGeometry.Line,\n        ...geometryOption,\n      };\n}\n\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * 为了防止左右 yField 相同，导致变成 object 之后被覆盖，所以都转变成数组的形式\n * @param yField\n * @param transformAttribute\n */\nexport function transformObjectToArray(\n  yField: DualAxesOptions['yField'],\n  transformAttribute: Record<string, any> | any[]\n): any[] {\n  const [y1, y2] = yField;\n\n  if (isArray(transformAttribute)) {\n    // 将数组补齐为两个\n    const [a1, a2] = transformAttribute;\n    return [a1, a2];\n  }\n  const a1 = get(transformAttribute, y1);\n  const a2 = get(transformAttribute, y2);\n  return [a1, a2];\n}\n\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\nexport function getYAxisWithDefault(yAxis: Axis, axisType: AxisType): Axis {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n  return yAxis;\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,OAAO,QAAQ,YAAY;AAEzC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,yBAAyB,EAAEC,0BAA0B,QAAQ,aAAa;AACnF,SACEC,QAAQ,EACRC,gBAAgB,QAKX,UAAU;AAEjB;;;AAGA,OAAM,SAAUC,MAAMA,CAACC,cAA8B;EACnD,OAAOR,GAAG,CAACQ,cAAc,EAAE,UAAU,CAAC,KAAKF,gBAAgB,CAACG,IAAI;AAClE;AAEA;;;AAGA,OAAM,SAAUC,QAAQA,CAACF,cAA8B;EACrD,OAAOR,GAAG,CAACQ,cAAc,EAAE,UAAU,CAAC,KAAKF,gBAAgB,CAACK,MAAM;AACpE;AAEA;;;;;AAKA,OAAM,SAAUC,iBAAiBA,CAACC,MAAc,EAAEC,MAAc,EAAEN,cAA8B;EAC9F;EACA,OAAOE,QAAQ,CAACF,cAAc,CAAC,GAC3BN,UAAU,CACR,EAAE,EACF;IACEa,QAAQ,EAAET,gBAAgB,CAACK,MAAM;IACjCK,KAAK,EACHR,cAAc,CAACQ,KAAK,IAAIR,cAAc,CAACS,OAAO,GAC1C;MACEC,OAAO,EAAE,SAAAA,CAACC,IAAY;;QACpB,OAAO,CAAAC,EAAA,GAAAD,IAAI,CAACL,MAAM,CAAC,cAAAM,EAAA,uBAAAA,EAAA,CAAEC,IAAI,CAAC,GAAG,CAAC;MAChC;KACD,GACDC;GACP,EACDd,cAAc,CACf,GACFe,QAAA;IACGR,QAAQ,EAAET,gBAAgB,CAACG;EAAI,GAC5BD,cAAc,CAClB;AACP;AAEA;;;;;;AAMA,OAAM,SAAUgB,sBAAsBA,CACpCV,MAAiC,EACjCW,kBAA+C;EAExC,IAAAC,EAAE,GAAQZ,MAAM,GAAd;IAAEa,EAAE,GAAIb,MAAM,GAAV;EAEb,IAAIb,OAAO,CAACwB,kBAAkB,CAAC,EAAE;IAC/B;IACO,IAAAG,IAAE,GAAQH,kBAAkB,GAA1B;MAAEI,IAAE,GAAIJ,kBAAkB,GAAtB;IACb,OAAO,CAACG,IAAE,EAAEC,IAAE,CAAC;;EAEjB,IAAMC,EAAE,GAAG9B,GAAG,CAACyB,kBAAkB,EAAEC,EAAE,CAAC;EACtC,IAAMK,EAAE,GAAG/B,GAAG,CAACyB,kBAAkB,EAAEE,EAAE,CAAC;EACtC,OAAO,CAACG,EAAE,EAAEC,EAAE,CAAC;AACjB;AAEA;;;;;AAKA,OAAM,SAAUC,mBAAmBA,CAACC,KAAW,EAAEC,QAAkB;EACjE,IAAIA,QAAQ,KAAK7B,QAAQ,CAAC8B,IAAI,EAAE;IAC9B,OAAOF,KAAK,KAAK,KAAK,GAAG,KAAK,GAAG/B,UAAU,CAAC,EAAE,EAAEC,yBAAyB,EAAE8B,KAAK,CAAC;GAClF,MAAM,IAAIC,QAAQ,KAAK7B,QAAQ,CAAC+B,KAAK,EAAE;IACtC,OAAOH,KAAK,KAAK,KAAK,GAAG,KAAK,GAAG/B,UAAU,CAAC,EAAE,EAAEE,0BAA0B,EAAE6B,KAAK,CAAC;;EAEpF,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}