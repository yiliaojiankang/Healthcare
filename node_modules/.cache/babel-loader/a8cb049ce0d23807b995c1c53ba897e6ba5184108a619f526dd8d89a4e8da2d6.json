{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { clone, each, getRange, groupBy, hasKey, isEmpty, sortBy, valuesOfKey } from '@antv/util';\n// 进行转换得到值所在的 range\nfunction getBinKey(value, binWidth, binNumber) {\n  // 做一点特殊处理\n  if (binNumber === 1) {\n    return [0, binWidth];\n  }\n  var index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n}\n// 默认 sturges 转换\nfunction sturges(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\nexport function binHistogram(data, binField, binWidth, binNumber, stackField) {\n  var originData_copy = clone(data);\n  // 根据 binField 对源数据进行排序\n  sortBy(originData_copy, binField);\n  // 获取源数据 binField 的 range\n  var values = valuesOfKey(originData_copy, binField);\n  var range = getRange(values);\n  var rangeWidth = range.max - range.min;\n  // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n  var _binWidth = binWidth;\n  if (!binWidth && binNumber) {\n    _binWidth = binNumber > 1 ? rangeWidth / (binNumber - 1) : range.max;\n  }\n  // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n  if (!binWidth && !binNumber) {\n    var _defaultBinNumber = sturges(values);\n    _binWidth = rangeWidth / _defaultBinNumber;\n  }\n  // 构建 key - StatisticData 结构\n  var bins = {};\n  var groups = groupBy(originData_copy, stackField);\n  // 判断分组是否为空，如果为空，说明没有 stackField 字段\n  if (isEmpty(groups)) {\n    each(originData_copy, function (data) {\n      var value = data[binField];\n      var bin = getBinKey(value, _binWidth, binNumber);\n      var binKey = \"\".concat(bin[0], \"-\").concat(bin[1]);\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = {\n          range: bin,\n          count: 0\n        };\n      }\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach(function (groupKey) {\n      each(groups[groupKey], function (data) {\n        var value = data[binField];\n        var bin = getBinKey(value, _binWidth, binNumber);\n        var binKey = \"\".concat(bin[0], \"-\").concat(bin[1]);\n        var groupKeyBinKey = \"\".concat(binKey, \"-\").concat(groupKey);\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = {\n            range: bin,\n            count: 0\n          };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  }\n  // 将分箱数据转换为 plotData 才是图表所需要的\n  var plotData = [];\n  each(bins, function (bin) {\n    plotData.push(bin);\n  });\n  return plotData;\n}","map":{"version":3,"names":["clone","each","getRange","groupBy","hasKey","isEmpty","sortBy","valuesOfKey","getBinKey","value","binWidth","binNumber","index","Math","floor","sturges","values","ceil","log","length","LN2","binHistogram","data","binField","stackField","originData_copy","range","rangeWidth","max","min","_binWidth","_defaultBinNumber","bins","groups","bin","binKey","concat","count","Object","keys","forEach","groupKey","groupKeyBinKey","plotData","push"],"sources":["../../../src/utils/transform/histogram.ts"],"sourcesContent":["import { clone, each, getRange, groupBy, hasKey, isEmpty, sortBy, valuesOfKey } from '@antv/util';\nimport { Data } from '../../types';\n\ntype StatisticData = {\n  range: Array<number>;\n  count: number;\n};\ntype StatisticBin = {\n  [key: string]: StatisticData;\n};\n\n// 进行转换得到值所在的 range\nfunction getBinKey(value: number, binWidth: number, binNumber?: number): [number, number] {\n  // 做一点特殊处理\n  if (binNumber === 1) {\n    return [0, binWidth];\n  }\n  const index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n}\n\n// 默认 sturges 转换\nfunction sturges(values: Array<number>): number {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\nexport function binHistogram(data: Data, binField: string, binWidth: number, binNumber?: number, stackField?: string) {\n  const originData_copy = clone(data);\n\n  // 根据 binField 对源数据进行排序\n  sortBy(originData_copy, binField);\n\n  // 获取源数据 binField 的 range\n  const values = valuesOfKey(originData_copy, binField);\n  const range = getRange(values);\n  const rangeWidth = range.max - range.min;\n\n  // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n  let _binWidth = binWidth;\n  if (!binWidth && binNumber) {\n    _binWidth = binNumber > 1 ? rangeWidth / (binNumber - 1) : range.max;\n  }\n  // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n  if (!binWidth && !binNumber) {\n    const _defaultBinNumber = sturges(values);\n    _binWidth = rangeWidth / _defaultBinNumber;\n  }\n  // 构建 key - StatisticData 结构\n  const bins: StatisticBin = {};\n  const groups = groupBy(originData_copy, stackField);\n  // 判断分组是否为空，如果为空，说明没有 stackField 字段\n  if (isEmpty(groups)) {\n    each(originData_copy, (data: any) => {\n      const value = data[binField];\n      const bin = getBinKey(value, _binWidth, binNumber);\n      const binKey = `${bin[0]}-${bin[1]}`;\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = { range: bin, count: 0 };\n      }\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach((groupKey: string) => {\n      each(groups[groupKey], (data: any) => {\n        const value = data[binField];\n        const bin = getBinKey(value, _binWidth, binNumber);\n        const binKey = `${bin[0]}-${bin[1]}`;\n        const groupKeyBinKey = `${binKey}-${groupKey}`;\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = { range: bin, count: 0 };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  }\n  // 将分箱数据转换为 plotData 才是图表所需要的\n  const plotData: Array<StatisticData> = [];\n  each(bins, (bin: StatisticData) => {\n    plotData.push(bin);\n  });\n  return plotData;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}