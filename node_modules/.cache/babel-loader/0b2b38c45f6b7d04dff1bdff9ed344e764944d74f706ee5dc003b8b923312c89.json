{"ast":null,"code":"import { isNumber } from '@antv/util';\n/**\n * 转化率的计算方式\n * @param prev\n * @param next\n */\nexport function conversionTagFormatter(prev, next) {\n  if (!isNumber(prev) || !isNumber(next)) {\n    return '-';\n  }\n  // 0 / 0 没有意义\n  if (prev === 0 && next === 0) {\n    return '-';\n  }\n  if (prev === next) {\n    return '100%';\n  }\n  if (prev === 0) {\n    return '∞';\n  }\n  return \"\".concat((100 * next / prev).toFixed(2), \"%\");\n}","map":{"version":3,"names":["isNumber","conversionTagFormatter","prev","next","concat","toFixed"],"sources":["../../src/utils/conversion.ts"],"sourcesContent":["import { isNumber } from '@antv/util';\n/**\n * 转化率的计算方式\n * @param prev\n * @param next\n */\nexport function conversionTagFormatter(prev: number, next: number): string {\n  if (!isNumber(prev) || !isNumber(next)) {\n    return '-';\n  }\n\n  // 0 / 0 没有意义\n  if (prev === 0 && next === 0) {\n    return '-';\n  }\n\n  if (prev === next) {\n    return '100%';\n  }\n\n  if (prev === 0) {\n    return '∞';\n  }\n\n  return `${((100 * next) / prev).toFixed(2)}%`;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC;;;;;AAKA,OAAM,SAAUC,sBAAsBA,CAACC,IAAY,EAAEC,IAAY;EAC/D,IAAI,CAACH,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC,EAAE;IACtC,OAAO,GAAG;;EAGZ;EACA,IAAID,IAAI,KAAK,CAAC,IAAIC,IAAI,KAAK,CAAC,EAAE;IAC5B,OAAO,GAAG;;EAGZ,IAAID,IAAI,KAAKC,IAAI,EAAE;IACjB,OAAO,MAAM;;EAGf,IAAID,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,GAAG;;EAGZ,OAAO,GAAAE,MAAA,CAAG,CAAE,GAAG,GAAGD,IAAI,GAAID,IAAI,EAAEG,OAAO,CAAC,CAAC,CAAC,MAAG;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}