{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { createMultiPassRenderer } from \"../utils/multiPassRender\";\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\nvar MultiPassRendererPlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function MultiPassRendererPlugin() {\n    _classCallCheck(this, MultiPassRendererPlugin);\n  }\n  _createClass(MultiPassRendererPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n      var rendererService = _ref.rendererService,\n        postProcessingPassFactory = _ref.postProcessingPassFactory,\n        normalPassFactory = _ref.normalPassFactory;\n      layer.hooks.init.tapPromise('MultiPassRendererPlugin', function () {\n        var _layer$getLayerConfig = layer.getLayerConfig(),\n          enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,\n          _layer$getLayerConfig2 = _layer$getLayerConfig.passes,\n          passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;\n\n        // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n        // 根据 LayerConfig passes 配置项初始化\n        if (_this.enabled) {\n          layer.multiPassRenderer = createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);\n          layer.multiPassRenderer.setRenderFlag(true);\n        }\n      });\n      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {\n        if (_this.enabled) {\n          // 渲染前根据 viewport 调整 FBO size\n          var _rendererService$getV = rendererService.getViewportSize(),\n            width = _rendererService$getV.width,\n            height = _rendererService$getV.height;\n          layer.multiPassRenderer.resize(width, height);\n        }\n      });\n    }\n  }]);\n  return MultiPassRendererPlugin;\n}()) || _class);\nexport { MultiPassRendererPlugin as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_dec","_class","injectable","createMultiPassRenderer","MultiPassRendererPlugin","key","value","apply","layer","_ref","_this","rendererService","postProcessingPassFactory","normalPassFactory","hooks","init","tapPromise","_layer$getLayerConfig","getLayerConfig","enableMultiPassRenderer","_layer$getLayerConfig2","passes","enabled","multiPassRenderer","setRenderFlag","beforeRender","tap","_rendererService$getV","getViewportSize","width","height","resize","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/plugins/MultiPassRendererPlugin.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { createMultiPassRenderer } from \"../utils/multiPassRender\";\n\n/**\n * 自定义渲染管线：\n * ClearPass -> PixelPickingPass(可选) -> RenderPass/TAAPass -> PostProcessing -> CopyPass\n * 根据 Layer 配置的 passes 创建 PostProcessing\n * @example\n * new PolygonLayer({\n *   enableMultiPassRenderer: true,\n *   passes: [\n *     'blurH',\n *     ['blurV', { radius: 10 }],\n *   ],\n * })\n */\nvar MultiPassRendererPlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function MultiPassRendererPlugin() {\n    _classCallCheck(this, MultiPassRendererPlugin);\n  }\n  _createClass(MultiPassRendererPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n      var rendererService = _ref.rendererService,\n        postProcessingPassFactory = _ref.postProcessingPassFactory,\n        normalPassFactory = _ref.normalPassFactory;\n      layer.hooks.init.tapPromise('MultiPassRendererPlugin', function () {\n        var _layer$getLayerConfig = layer.getLayerConfig(),\n          enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,\n          _layer$getLayerConfig2 = _layer$getLayerConfig.passes,\n          passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;\n\n        // SceneConfig 的 enableMultiPassRenderer 配置项可以统一关闭\n        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n        // 根据 LayerConfig passes 配置项初始化\n        if (_this.enabled) {\n          layer.multiPassRenderer = createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);\n          layer.multiPassRenderer.setRenderFlag(true);\n        }\n      });\n      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {\n        if (_this.enabled) {\n          // 渲染前根据 viewport 调整 FBO size\n          var _rendererService$getV = rendererService.getViewportSize(),\n            width = _rendererService$getV.width,\n            height = _rendererService$getV.height;\n          layer.multiPassRenderer.resize(width, height);\n        }\n      });\n    }\n  }]);\n  return MultiPassRendererPlugin;\n}()) || _class);\nexport { MultiPassRendererPlugin as default };"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,OAAOC,YAAY,MAAM,wCAAwC;AACjE,IAAIC,IAAI,EAAEC,MAAM;AAChB,SAASC,UAAU,QAAQ,WAAW;AACtC,OAAO,kBAAkB;AACzB,SAASC,uBAAuB,QAAQ,0BAA0B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,uBAAuB,IAAIJ,IAAI,GAAGE,UAAU,CAAC,CAAC,EAAEF,IAAI,CAACC,MAAM,GAAG,aAAa,YAAY;EACzF,SAASG,uBAAuBA,CAAA,EAAG;IACjCN,eAAe,CAAC,IAAI,EAAEM,uBAAuB,CAAC;EAChD;EACAL,YAAY,CAACK,uBAAuB,EAAE,CAAC;IACrCC,GAAG,EAAE,OAAO;IACZC,KAAK,EAAE,SAASC,KAAKA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACjC,IAAIC,KAAK,GAAG,IAAI;MAChB,IAAIC,eAAe,GAAGF,IAAI,CAACE,eAAe;QACxCC,yBAAyB,GAAGH,IAAI,CAACG,yBAAyB;QAC1DC,iBAAiB,GAAGJ,IAAI,CAACI,iBAAiB;MAC5CL,KAAK,CAACM,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC,yBAAyB,EAAE,YAAY;QACjE,IAAIC,qBAAqB,GAAGT,KAAK,CAACU,cAAc,CAAC,CAAC;UAChDC,uBAAuB,GAAGF,qBAAqB,CAACE,uBAAuB;UACvEC,sBAAsB,GAAGH,qBAAqB,CAACI,MAAM;UACrDA,MAAM,GAAGD,sBAAsB,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,sBAAsB;;QAE1E;QACAV,KAAK,CAACY,OAAO,GAAG,CAAC,CAACH,uBAAuB,IAAIX,KAAK,CAACU,cAAc,CAAC,CAAC,CAACC,uBAAuB,KAAK,KAAK;;QAErG;QACA,IAAIT,KAAK,CAACY,OAAO,EAAE;UACjBd,KAAK,CAACe,iBAAiB,GAAGpB,uBAAuB,CAACK,KAAK,EAAEa,MAAM,EAAET,yBAAyB,EAAEC,iBAAiB,CAAC;UAC9GL,KAAK,CAACe,iBAAiB,CAACC,aAAa,CAAC,IAAI,CAAC;QAC7C;MACF,CAAC,CAAC;MACFhB,KAAK,CAACM,KAAK,CAACW,YAAY,CAACC,GAAG,CAAC,yBAAyB,EAAE,YAAY;QAClE,IAAIhB,KAAK,CAACY,OAAO,EAAE;UACjB;UACA,IAAIK,qBAAqB,GAAGhB,eAAe,CAACiB,eAAe,CAAC,CAAC;YAC3DC,KAAK,GAAGF,qBAAqB,CAACE,KAAK;YACnCC,MAAM,GAAGH,qBAAqB,CAACG,MAAM;UACvCtB,KAAK,CAACe,iBAAiB,CAACQ,MAAM,CAACF,KAAK,EAAEC,MAAM,CAAC;QAC/C;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,CAAC;EACH,OAAO1B,uBAAuB;AAChC,CAAC,CAAC,CAAC,CAAC,IAAIH,MAAM,CAAC;AACf,SAASG,uBAAuB,IAAI4B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}