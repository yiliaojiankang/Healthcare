{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isString, isPlainObject, isNil, mix } from '@antv/util';\nimport Item from './item';\nvar END_MAP = {\n  source: 'start',\n  target: 'end'\n};\nvar ITEM_NAME_SUFFIX = 'Node'; // 端点的后缀，如 sourceNode, targetNode\nvar POINT_NAME_SUFFIX = 'Point'; // 起点或者结束点的后缀，如 startPoint, endPoint\nvar ANCHOR_NAME_SUFFIX = 'Anchor';\nvar Edge = /** @class */function (_super) {\n  __extends(Edge, _super);\n  function Edge() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Edge.prototype.getDefaultCfg = function () {\n    return {\n      type: 'edge',\n      sourceNode: null,\n      targetNode: null,\n      startPoint: null,\n      endPoint: null,\n      linkCenter: false\n    };\n  };\n  Edge.prototype.setEnd = function (name, value) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var preItem = this.get(itemName);\n    if (preItem && !preItem.destroyed) {\n      // 如果之前存在节点，则移除掉边\n      preItem.removeEdge(this);\n    }\n    if (isPlainObject(value)) {\n      // 如果设置成具体的点，则清理节点\n      this.set(pointName, value);\n      this.set(itemName, null);\n    } else if (value) {\n      value.addEdge(this);\n      this.set(itemName, value);\n      this.set(pointName, null);\n    }\n  };\n  /**\n   * 获取连接点的坐标\n   * @param name source | target\n   * @param model 边的数据模型\n   * @param controlPoints 控制点\n   */\n  Edge.prototype.getLinkPoint = function (name, model, controlPoints) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var point = this.get(pointName);\n    if (!point) {\n      var item = this.get(itemName);\n      var anchorName = name + ANCHOR_NAME_SUFFIX;\n      var prePoint = this.getPrePoint(name, controlPoints);\n      var anchorIndex = model[anchorName];\n      if (!isNil(anchorIndex)) {\n        // 如果有锚点，则使用锚点索引获取连接点\n        point = item.getLinkPointByAnchor(anchorIndex);\n      }\n      // 如果锚点没有对应的点或者没有锚点，则直接计算连接点\n      point = point || item.getLinkPoint(prePoint);\n      if (!isNil(point.index)) {\n        this.set(\"\".concat(name, \"AnchorIndex\"), point.index);\n      }\n    }\n    return point;\n  };\n  /**\n   * 获取同端点进行连接的点，计算交汇点\n   * @param name\n   * @param controlPoints\n   */\n  Edge.prototype.getPrePoint = function (name, controlPoints) {\n    if (controlPoints && controlPoints.length) {\n      var index = name === 'source' ? 0 : controlPoints.length - 1;\n      return controlPoints[index];\n    }\n    var oppositeName = name === 'source' ? 'target' : 'source'; // 取另一个节点的位置\n    return this.getEndPoint(oppositeName);\n  };\n  /**\n   * 获取端点的位置\n   * @param name\n   */\n  Edge.prototype.getEndPoint = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName);\n    // 如果有端点，直接使用 model\n    if (item && !item.destroyed) {\n      return item.get('model');\n    } // 否则直接使用点\n    return this.get(pointName);\n  };\n  /**\n   * 通过端点的中心获取控制点\n   * @param model\n   */\n  Edge.prototype.getControlPointsByCenter = function (model) {\n    var sourcePoint = this.getEndPoint('source');\n    var targetPoint = this.getEndPoint('target');\n    var shapeFactory = this.get('shapeFactory');\n    var type = model.type;\n    return shapeFactory.getControlPoints(type, {\n      startPoint: sourcePoint,\n      endPoint: targetPoint\n    });\n  };\n  Edge.prototype.getEndCenter = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName);\n    // 如果有端点，直接使用 model\n    if (item) {\n      var bbox = item.getBBox();\n      return {\n        x: bbox.centerX,\n        y: bbox.centerY\n      };\n    } // 否则直接使用点\n    return this.get(pointName);\n  };\n  Edge.prototype.init = function () {\n    _super.prototype.init.call(this);\n    // 初始化两个端点\n    this.setSource(this.get('source'));\n    this.setTarget(this.get('target'));\n  };\n  Edge.prototype.getShapeCfg = function (model, updateType) {\n    var self = this;\n    var linkCenter = self.get('linkCenter'); // 如果连接到中心，忽视锚点、忽视控制点\n    var cfg = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('move')) ? model : _super.prototype.getShapeCfg.call(this, model);\n    if (linkCenter) {\n      cfg.startPoint = self.getEndCenter('source');\n      cfg.endPoint = self.getEndCenter('target');\n    } else {\n      var controlPoints = cfg.controlPoints || self.getControlPointsByCenter(cfg);\n      cfg.startPoint = self.getLinkPoint('source', model, controlPoints);\n      cfg.endPoint = self.getLinkPoint('target', model, controlPoints);\n    }\n    cfg.sourceNode = self.get('sourceNode');\n    cfg.targetNode = self.get('targetNode');\n    return cfg;\n  };\n  /**\n   * 获取边的数据模型\n   */\n  Edge.prototype.getModel = function () {\n    var out = this.get('model');\n    var sourceItem = this.get(\"source\".concat(ITEM_NAME_SUFFIX));\n    var targetItem = this.get(\"target\".concat(ITEM_NAME_SUFFIX));\n    if (sourceItem) {\n      delete out[\"source\".concat(ITEM_NAME_SUFFIX)];\n    } else {\n      out.source = this.get(\"start\".concat(POINT_NAME_SUFFIX));\n    }\n    if (targetItem) {\n      delete out[\"target\".concat(ITEM_NAME_SUFFIX)];\n    } else {\n      out.target = this.get(\"end\".concat(POINT_NAME_SUFFIX));\n    }\n    if (!isString(out.source) && !isPlainObject(out.source)) {\n      out.source = out.source.getID();\n    }\n    if (!isString(out.target) && !isPlainObject(out.target)) {\n      out.target = out.target.getID();\n    }\n    return out;\n  };\n  Edge.prototype.setSource = function (source) {\n    this.setEnd('source', source);\n    this.set('source', source);\n  };\n  Edge.prototype.setTarget = function (target) {\n    this.setEnd('target', target);\n    this.set('target', target);\n  };\n  Edge.prototype.getSource = function () {\n    return this.get('source');\n  };\n  Edge.prototype.getTarget = function () {\n    return this.get('target');\n  };\n  Edge.prototype.updatePosition = function () {\n    return false;\n  };\n  /**\n   * 边不需要重计算容器位置，直接重新计算 path 位置\n   * @param {object} cfg 待更新数据\n   */\n  Edge.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n    var model = this.get('model');\n    var oriVisible = model.visible;\n    var cfgVisible = cfg.visible;\n    if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n    var sourceItem = this.get('source');\n    var targetItem = this.get('target');\n    if (!sourceItem || sourceItem.destroyed || !targetItem || targetItem.destroyed) return;\n    var styles = this.get('styles');\n    if (cfg.stateStyles) {\n      // 更新 item 时更新 this.get('styles') 中的值\n      var stateStyles = cfg.stateStyles;\n      mix(styles, stateStyles);\n      delete cfg.stateStyles;\n    }\n    Object.assign(model, cfg);\n    this.updateShape(updateType);\n    this.afterUpdate();\n    this.clearCache();\n  };\n  Edge.prototype.destroy = function () {\n    var sourceItem = this.get(\"source\".concat(ITEM_NAME_SUFFIX));\n    var targetItem = this.get(\"target\".concat(ITEM_NAME_SUFFIX));\n    if (sourceItem && !sourceItem.destroyed) {\n      sourceItem.removeEdge(this);\n    }\n    if (targetItem && !targetItem.destroyed) {\n      targetItem.removeEdge(this);\n    }\n    _super.prototype.destroy.call(this);\n  };\n  return Edge;\n}(Item);\nexport default Edge;","map":{"version":3,"names":["__extends","isString","isPlainObject","isNil","mix","Item","END_MAP","source","target","ITEM_NAME_SUFFIX","POINT_NAME_SUFFIX","ANCHOR_NAME_SUFFIX","Edge","_super","apply","arguments","prototype","getDefaultCfg","type","sourceNode","targetNode","startPoint","endPoint","linkCenter","setEnd","name","value","pointName","itemName","preItem","get","destroyed","removeEdge","set","addEdge","getLinkPoint","model","controlPoints","point","item","anchorName","prePoint","getPrePoint","anchorIndex","getLinkPointByAnchor","index","concat","length","oppositeName","getEndPoint","getControlPointsByCenter","sourcePoint","targetPoint","shapeFactory","getControlPoints","getEndCenter","bbox","getBBox","x","centerX","y","centerY","init","call","setSource","setTarget","getShapeCfg","updateType","self","cfg","includes","getModel","out","sourceItem","targetItem","getID","getSource","getTarget","updatePosition","update","undefined","oriVisible","visible","cfgVisible","changeVisibility","styles","stateStyles","Object","assign","updateShape","afterUpdate","clearCache","destroy"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/item/edge.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { isString, isPlainObject, isNil, mix } from '@antv/util';\nimport Item from './item';\nvar END_MAP = {\n  source: 'start',\n  target: 'end'\n};\nvar ITEM_NAME_SUFFIX = 'Node'; // 端点的后缀，如 sourceNode, targetNode\nvar POINT_NAME_SUFFIX = 'Point'; // 起点或者结束点的后缀，如 startPoint, endPoint\nvar ANCHOR_NAME_SUFFIX = 'Anchor';\nvar Edge = /** @class */function (_super) {\n  __extends(Edge, _super);\n  function Edge() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Edge.prototype.getDefaultCfg = function () {\n    return {\n      type: 'edge',\n      sourceNode: null,\n      targetNode: null,\n      startPoint: null,\n      endPoint: null,\n      linkCenter: false\n    };\n  };\n  Edge.prototype.setEnd = function (name, value) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var preItem = this.get(itemName);\n    if (preItem && !preItem.destroyed) {\n      // 如果之前存在节点，则移除掉边\n      preItem.removeEdge(this);\n    }\n    if (isPlainObject(value)) {\n      // 如果设置成具体的点，则清理节点\n      this.set(pointName, value);\n      this.set(itemName, null);\n    } else if (value) {\n      value.addEdge(this);\n      this.set(itemName, value);\n      this.set(pointName, null);\n    }\n  };\n  /**\n   * 获取连接点的坐标\n   * @param name source | target\n   * @param model 边的数据模型\n   * @param controlPoints 控制点\n   */\n  Edge.prototype.getLinkPoint = function (name, model, controlPoints) {\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var point = this.get(pointName);\n    if (!point) {\n      var item = this.get(itemName);\n      var anchorName = name + ANCHOR_NAME_SUFFIX;\n      var prePoint = this.getPrePoint(name, controlPoints);\n      var anchorIndex = model[anchorName];\n      if (!isNil(anchorIndex)) {\n        // 如果有锚点，则使用锚点索引获取连接点\n        point = item.getLinkPointByAnchor(anchorIndex);\n      }\n      // 如果锚点没有对应的点或者没有锚点，则直接计算连接点\n      point = point || item.getLinkPoint(prePoint);\n      if (!isNil(point.index)) {\n        this.set(\"\".concat(name, \"AnchorIndex\"), point.index);\n      }\n    }\n    return point;\n  };\n  /**\n   * 获取同端点进行连接的点，计算交汇点\n   * @param name\n   * @param controlPoints\n   */\n  Edge.prototype.getPrePoint = function (name, controlPoints) {\n    if (controlPoints && controlPoints.length) {\n      var index = name === 'source' ? 0 : controlPoints.length - 1;\n      return controlPoints[index];\n    }\n    var oppositeName = name === 'source' ? 'target' : 'source'; // 取另一个节点的位置\n    return this.getEndPoint(oppositeName);\n  };\n  /**\n   * 获取端点的位置\n   * @param name\n   */\n  Edge.prototype.getEndPoint = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName);\n    // 如果有端点，直接使用 model\n    if (item && !item.destroyed) {\n      return item.get('model');\n    } // 否则直接使用点\n    return this.get(pointName);\n  };\n  /**\n   * 通过端点的中心获取控制点\n   * @param model\n   */\n  Edge.prototype.getControlPointsByCenter = function (model) {\n    var sourcePoint = this.getEndPoint('source');\n    var targetPoint = this.getEndPoint('target');\n    var shapeFactory = this.get('shapeFactory');\n    var type = model.type;\n    return shapeFactory.getControlPoints(type, {\n      startPoint: sourcePoint,\n      endPoint: targetPoint\n    });\n  };\n  Edge.prototype.getEndCenter = function (name) {\n    var itemName = name + ITEM_NAME_SUFFIX;\n    var pointName = END_MAP[name] + POINT_NAME_SUFFIX;\n    var item = this.get(itemName);\n    // 如果有端点，直接使用 model\n    if (item) {\n      var bbox = item.getBBox();\n      return {\n        x: bbox.centerX,\n        y: bbox.centerY\n      };\n    } // 否则直接使用点\n    return this.get(pointName);\n  };\n  Edge.prototype.init = function () {\n    _super.prototype.init.call(this);\n    // 初始化两个端点\n    this.setSource(this.get('source'));\n    this.setTarget(this.get('target'));\n  };\n  Edge.prototype.getShapeCfg = function (model, updateType) {\n    var self = this;\n    var linkCenter = self.get('linkCenter'); // 如果连接到中心，忽视锚点、忽视控制点\n    var cfg = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('move')) ? model : _super.prototype.getShapeCfg.call(this, model);\n    if (linkCenter) {\n      cfg.startPoint = self.getEndCenter('source');\n      cfg.endPoint = self.getEndCenter('target');\n    } else {\n      var controlPoints = cfg.controlPoints || self.getControlPointsByCenter(cfg);\n      cfg.startPoint = self.getLinkPoint('source', model, controlPoints);\n      cfg.endPoint = self.getLinkPoint('target', model, controlPoints);\n    }\n    cfg.sourceNode = self.get('sourceNode');\n    cfg.targetNode = self.get('targetNode');\n    return cfg;\n  };\n  /**\n   * 获取边的数据模型\n   */\n  Edge.prototype.getModel = function () {\n    var out = this.get('model');\n    var sourceItem = this.get(\"source\".concat(ITEM_NAME_SUFFIX));\n    var targetItem = this.get(\"target\".concat(ITEM_NAME_SUFFIX));\n    if (sourceItem) {\n      delete out[\"source\".concat(ITEM_NAME_SUFFIX)];\n    } else {\n      out.source = this.get(\"start\".concat(POINT_NAME_SUFFIX));\n    }\n    if (targetItem) {\n      delete out[\"target\".concat(ITEM_NAME_SUFFIX)];\n    } else {\n      out.target = this.get(\"end\".concat(POINT_NAME_SUFFIX));\n    }\n    if (!isString(out.source) && !isPlainObject(out.source)) {\n      out.source = out.source.getID();\n    }\n    if (!isString(out.target) && !isPlainObject(out.target)) {\n      out.target = out.target.getID();\n    }\n    return out;\n  };\n  Edge.prototype.setSource = function (source) {\n    this.setEnd('source', source);\n    this.set('source', source);\n  };\n  Edge.prototype.setTarget = function (target) {\n    this.setEnd('target', target);\n    this.set('target', target);\n  };\n  Edge.prototype.getSource = function () {\n    return this.get('source');\n  };\n  Edge.prototype.getTarget = function () {\n    return this.get('target');\n  };\n  Edge.prototype.updatePosition = function () {\n    return false;\n  };\n  /**\n   * 边不需要重计算容器位置，直接重新计算 path 位置\n   * @param {object} cfg 待更新数据\n   */\n  Edge.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n    var model = this.get('model');\n    var oriVisible = model.visible;\n    var cfgVisible = cfg.visible;\n    if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n    var sourceItem = this.get('source');\n    var targetItem = this.get('target');\n    if (!sourceItem || sourceItem.destroyed || !targetItem || targetItem.destroyed) return;\n    var styles = this.get('styles');\n    if (cfg.stateStyles) {\n      // 更新 item 时更新 this.get('styles') 中的值\n      var stateStyles = cfg.stateStyles;\n      mix(styles, stateStyles);\n      delete cfg.stateStyles;\n    }\n    Object.assign(model, cfg);\n    this.updateShape(updateType);\n    this.afterUpdate();\n    this.clearCache();\n  };\n  Edge.prototype.destroy = function () {\n    var sourceItem = this.get(\"source\".concat(ITEM_NAME_SUFFIX));\n    var targetItem = this.get(\"target\".concat(ITEM_NAME_SUFFIX));\n    if (sourceItem && !sourceItem.destroyed) {\n      sourceItem.removeEdge(this);\n    }\n    if (targetItem && !targetItem.destroyed) {\n      targetItem.removeEdge(this);\n    }\n    _super.prototype.destroy.call(this);\n  };\n  return Edge;\n}(Item);\nexport default Edge;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}