{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { each, isArray, isString } from '@antv/util';\nimport Behavior from '../../behavior/behavior';\nvar ModeController = /** @class */function () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type || behavior);\n      if (!BehaviorInstance) {\n        return;\n      }\n      behave = new BehaviorInstance(behavior);\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n      modes = _a.modes,\n      graph = _a.graph;\n    var current = mode;\n    var behaviors = modes[current];\n    if (!behaviors) {\n      return;\n    }\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      if (behave.delegate) behave.delegate.remove();\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n    var behaves;\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n    var currentMode = modes;\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n    this.formatModes();\n    this.setMode(this.mode);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n  ModeController.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    if (isString(behavior)) {\n      behavior = {\n        type: behavior\n      };\n    }\n    var behaviorSet = [];\n    if (!mode || mode === this.mode || mode === 'default') {\n      behaviorSet = this.currentBehaves;\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n      var length_1 = behaviorSet.length;\n      for (var i = 0; i < length_1; i++) {\n        var behave = behaviorSet[i];\n        if (behave.type === behavior.type) {\n          behave.updateCfg(newCfg);\n          return this;\n        }\n        if (i === length_1 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    } else {\n      behaviorSet = this.modes[mode];\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n      var length_2 = behaviorSet.length;\n      for (var i = 0; i < length_2; i++) {\n        var behave = behaviorSet[i];\n        if (behave.type === behavior.type || behave === behavior.type) {\n          if (behave === behavior.type) behave = {\n            type: behave\n          };\n          Object.assign(behave, newCfg);\n          behaviorSet[i] = behave;\n          return this;\n        }\n        if (i === length_2 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    }\n    return this;\n  };\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n  return ModeController;\n}();\nexport default ModeController;","map":{"version":3,"names":["each","isArray","isString","Behavior","ModeController","graph","destroyed","modes","get","default","formatModes","mode","currentBehaves","setMode","prototype","behavior","i","type","setBehaviors","behaviors","behaves","behave","BehaviorInstance","getBehavior","bind","push","mergeBehaviors","modeBehaviors","indexOf","filterBehaviors","result","forEach","_a","current","emit","delegate","remove","unbind","getMode","manipulateBehaviors","isAdd","_this","currentMode","updateBehavior","newCfg","behaviorSet","length","console","warn","length_1","updateCfg","length_2","Object","assign","destroy"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/graph/controller/mode.js"],"sourcesContent":["import { each, isArray, isString } from '@antv/util';\nimport Behavior from '../../behavior/behavior';\nvar ModeController = /** @class */function () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type || behavior);\n      if (!BehaviorInstance) {\n        return;\n      }\n      behave = new BehaviorInstance(behavior);\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n      modes = _a.modes,\n      graph = _a.graph;\n    var current = mode;\n    var behaviors = modes[current];\n    if (!behaviors) {\n      return;\n    }\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      if (behave.delegate) behave.delegate.remove();\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n    var behaves;\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n    var currentMode = modes;\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n    this.formatModes();\n    this.setMode(this.mode);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n  ModeController.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    if (isString(behavior)) {\n      behavior = {\n        type: behavior\n      };\n    }\n    var behaviorSet = [];\n    if (!mode || mode === this.mode || mode === 'default') {\n      behaviorSet = this.currentBehaves;\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n      var length_1 = behaviorSet.length;\n      for (var i = 0; i < length_1; i++) {\n        var behave = behaviorSet[i];\n        if (behave.type === behavior.type) {\n          behave.updateCfg(newCfg);\n          return this;\n        }\n        if (i === length_1 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    } else {\n      behaviorSet = this.modes[mode];\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n      var length_2 = behaviorSet.length;\n      for (var i = 0; i < length_2; i++) {\n        var behave = behaviorSet[i];\n        if (behave.type === behavior.type || behave === behavior.type) {\n          if (behave === behavior.type) behave = {\n            type: behave\n          };\n          Object.assign(behave, newCfg);\n          behaviorSet[i] = behave;\n          return this;\n        }\n        if (i === length_2 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    }\n    return this;\n  };\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n  return ModeController;\n}();\nexport default ModeController;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}