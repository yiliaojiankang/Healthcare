{"ast":null,"code":"import { __assign, __rest, __spreadArray } from \"tslib\";\nimport { isEmpty, isFunction, isNumber, isObject, isString, uniq } from '@antv/util';\nimport { transformLabel } from '../../utils';\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\nexport function getMappingField(o, field) {\n  var type = o.type,\n    xField = o.xField,\n    yField = o.yField,\n    colorField = o.colorField,\n    shapeField = o.shapeField,\n    sizeField = o.sizeField,\n    styleField = o.styleField;\n  var rawFields = o.rawFields;\n  var fields = [];\n  rawFields = (isFunction(rawFields) ? rawFields(type, field) : rawFields) || [];\n  // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n  if (field === 'color') {\n    fields = __spreadArray([colorField || xField], rawFields, true);\n  } else if (field === 'shape') {\n    fields = __spreadArray([shapeField || xField], rawFields, true);\n  } else if (field === 'size') {\n    fields = __spreadArray([sizeField || xField], rawFields, true);\n  } else {\n    fields = __spreadArray([xField, yField, colorField, shapeField, sizeField, styleField], rawFields, true);\n    // 一定能找到的！\n    var idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n    var f = fields[idx];\n    // 删除当前字段\n    fields.splice(idx, 1);\n    // 插入到第一个\n    fields.unshift(f);\n  }\n  var mappingFields = uniq(fields.filter(function (f) {\n    return !!f;\n  }));\n  /**\n   * 修复 line geometry 无拆分时 color 回调错误\n   * eg:\n   *   geometry.color(xField, ()=> '#f24')\n   */\n  var tileMappingField = type === 'line' && [xField, yField].includes(mappingFields.join('*')) ? '' : mappingFields.join('*');\n  return {\n    mappingFields: mappingFields,\n    tileMappingField: tileMappingField\n  };\n}\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\nexport function getMappingFunction(mappingFields, func) {\n  if (!func) return undefined;\n  // 返回函数\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var params = {};\n    mappingFields.forEach(function (f, idx) {\n      params[f] = args[idx];\n    });\n    // 删除 undefined\n    delete params['undefined'];\n    return func(params);\n  };\n}\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\nexport function geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var type = options.type,\n    args = options.args,\n    mapping = options.mapping,\n    xField = options.xField,\n    yField = options.yField,\n    colorField = options.colorField,\n    shapeField = options.shapeField,\n    sizeField = options.sizeField,\n    tooltipFields = options.tooltipFields,\n    label = options.label,\n    state = options.state,\n    customInfo = options.customInfo;\n  // 如果没有 mapping 信息，那么直接返回\n  if (!mapping) {\n    return params;\n  }\n  var color = mapping.color,\n    shape = mapping.shape,\n    size = mapping.size,\n    style = mapping.style,\n    tooltip = mapping.tooltip;\n  // 创建 geometry\n  var geometry = chart[type](args).position(\"\".concat(xField, \"*\").concat(yField));\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    var _a = getMappingField(options, 'color'),\n      mappingFields = _a.mappingFields,\n      tileMappingField = _a.tileMappingField;\n    geometry.color(tileMappingField, getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    var _b = getMappingField(options, 'shape'),\n      mappingFields = _b.mappingFields,\n      tileMappingField = _b.tileMappingField;\n    geometry.shape(tileMappingField, getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    var _c = getMappingField(options, 'size'),\n      mappingFields = _c.mappingFields,\n      tileMappingField = _c.tileMappingField;\n    geometry.size(tileMappingField, getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n  if (isFunction(style)) {\n    var _d = getMappingField(options, 'style'),\n      mappingFields = _d.mappingFields,\n      tileMappingField = _d.tileMappingField;\n    geometry.style(tileMappingField, getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n  /**\n   * label 的映射\n   */\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    var callback = label.callback,\n      fields = label.fields,\n      cfg = __rest(label, [\"callback\", \"fields\"]);\n    geometry.label({\n      fields: fields || [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  /**\n   * state 状态样式\n   */\n  if (state) {\n    geometry.state(state);\n  }\n  /**\n   * 自定义信息\n   */\n  if (customInfo) {\n    geometry.customInfo(customInfo);\n  }\n  // 防止因为 x y 字段做了通道映射，导致生成图例\n  [xField, yField].filter(function (f) {\n    return f !== colorField;\n  }).forEach(function (f) {\n    chart.legend(f, false);\n  });\n  return __assign(__assign({}, params), {\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: {\n      geometry: geometry\n    }\n  });\n}","map":{"version":3,"names":["isEmpty","isFunction","isNumber","isObject","isString","uniq","transformLabel","getMappingField","o","field","type","xField","yField","colorField","shapeField","sizeField","styleField","rawFields","fields","__spreadArray","idx","indexOf","f","splice","unshift","mappingFields","filter","tileMappingField","includes","join","getMappingFunction","func","undefined","args","_i","arguments","length","params","forEach","geometry","chart","options","mapping","tooltipFields","label","state","customInfo","color","shape","size","style","tooltip","position","concat","_a","_b","_c","_d","callback","cfg","__rest","legend","__assign","ext"],"sources":["../../../src/adaptor/geometries/base.ts"],"sourcesContent":["import { isEmpty, isFunction, isNumber, isObject, isString, uniq } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { ColorAttr, Datum, Options, RawFields, ShapeAttr, SizeAttr, StyleAttr, TooltipAttr } from '../../types';\nimport { Label } from '../../types/label';\nimport { State } from '../../types/state';\nimport { transformLabel } from '../../utils';\n\n/**\n * 图形映射属性，按照优先级来的\n */\nexport type MappingOptions = {\n  /** color 映射 */\n  readonly color?: ColorAttr;\n  /** shape 映射 */\n  readonly shape?: ShapeAttr;\n  /** 大小映射, 提供回调的方式 */\n  readonly size?: SizeAttr;\n  /** 样式映射 */\n  readonly style?: StyleAttr;\n  /** tooltip 映射 */\n  readonly tooltip?: TooltipAttr;\n};\n\n/**\n * 一个图形映射的逻辑，纯粹的图形语法\n * // TODO 后续需要处理 adjust 的配置，然后通过 field 信息。比如 styleField，labelField 等一定是一个数组形式\n */\nexport type Geometry = {\n  /** geometry 类型, 'line' | 'interval' | 'point' | 'area' | 'polygon' */\n  readonly type?: string;\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly colorField?: string;\n  /** shape 的映射字段 */\n  readonly shapeField?: string;\n  /** size 映射字段 */\n  readonly sizeField?: string;\n  /** style 的映射字段 */\n  readonly styleField?: string;\n  /** tooltip 的映射字段 */\n  readonly tooltipFields?: string[] | false;\n  /** 其他原始字段, 用于 mapping 回调参数 */\n  readonly rawFields?: RawFields;\n  /** 图形映射规则 */\n  readonly mapping?: MappingOptions;\n  /** label 映射通道，因为历史原因导致实现略有区别 */\n  readonly label?: Label;\n  /** 不同状态的样式 */\n  readonly state?: State;\n  /** 自定义信息，一般在 registerShape 中使用 */\n  readonly customInfo?: any;\n  /** geometry params */\n  readonly args?: any;\n};\n\n/**\n * geometry options\n */\nexport type GeometryOptions = Geometry & Partial<Options>;\n\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\nexport function getMappingField(\n  o: GeometryOptions,\n  field: 'color' | 'shape' | 'size' | 'style'\n): {\n  mappingFields: string[];\n  tileMappingField: string;\n} {\n  const { type, xField, yField, colorField, shapeField, sizeField, styleField } = o;\n  let { rawFields } = o;\n\n  let fields = [];\n  rawFields = (isFunction(rawFields) ? rawFields(type, field) : rawFields) || [];\n\n  // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n  if (field === 'color') {\n    fields = [colorField || xField, ...rawFields];\n  } else if (field === 'shape') {\n    fields = [shapeField || xField, ...rawFields];\n  } else if (field === 'size') {\n    fields = [sizeField || xField, ...rawFields];\n  } else {\n    fields = [xField, yField, colorField, shapeField, sizeField, styleField, ...rawFields];\n\n    // 一定能找到的！\n    const idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n\n    const f = fields[idx];\n    // 删除当前字段\n    fields.splice(idx, 1);\n    // 插入到第一个\n    fields.unshift(f);\n  }\n\n  const mappingFields = uniq(fields.filter((f) => !!f));\n  /**\n   * 修复 line geometry 无拆分时 color 回调错误\n   * eg:\n   *   geometry.color(xField, ()=> '#f24')\n   */\n  const tileMappingField =\n    type === 'line' && [xField, yField].includes(mappingFields.join('*')) ? '' : mappingFields.join('*');\n  return {\n    mappingFields,\n    tileMappingField,\n  };\n}\n\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\nexport function getMappingFunction(mappingFields: string[], func: (datum: Datum) => any) {\n  if (!func) return undefined;\n  // 返回函数\n  return (...args: any[]) => {\n    const params: Datum = {};\n\n    mappingFields.forEach((f: string, idx: number) => {\n      params[f] = args[idx];\n    });\n\n    // 删除 undefined\n    delete params['undefined'];\n\n    return func(params);\n  };\n}\n\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\nexport function geometry<O extends GeometryOptions>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const {\n    type,\n    args,\n    mapping,\n    xField,\n    yField,\n    colorField,\n    shapeField,\n    sizeField,\n    tooltipFields,\n    label,\n    state,\n    customInfo,\n  } = options;\n\n  // 如果没有 mapping 信息，那么直接返回\n  if (!mapping) {\n    return params;\n  }\n\n  const { color, shape, size, style, tooltip } = mapping;\n\n  // 创建 geometry\n  const geometry = chart[type](args).position(`${xField}*${yField}`);\n\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'color');\n    geometry.color(tileMappingField, getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'shape');\n    geometry.shape(tileMappingField, getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'size');\n    geometry.size(tileMappingField, getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n  if (isFunction(style)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'style');\n    geometry.style(tileMappingField, getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n\n  /**\n   * label 的映射\n   */\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    const { callback, fields, ...cfg } = label;\n    geometry.label({\n      fields: fields || [yField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  /**\n   * state 状态样式\n   */\n  if (state) {\n    geometry.state(state);\n  }\n\n  /**\n   * 自定义信息\n   */\n  if (customInfo) {\n    geometry.customInfo(customInfo);\n  }\n\n  // 防止因为 x y 字段做了通道映射，导致生成图例\n  [xField, yField]\n    .filter((f: string) => f !== colorField)\n    .forEach((f: string) => {\n      chart.legend(f, false);\n    });\n  return {\n    ...params,\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: { geometry },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}