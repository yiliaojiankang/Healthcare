{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Symmetric = /** @class */function (_super) {\n  __extends(Symmetric, _super);\n  function Symmetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Symmetric.prototype.process = function (groupDataArray) {\n    var mergeData = _.flatten(groupDataArray);\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField;\n    // 每个 x 值对应的 最大值\n    var cache = this.getXValuesMaxMap(mergeData);\n    // 所有数据的最大的值\n    var max = Math.max.apply(Math, Object.keys(cache).map(function (key) {\n      return cache[key];\n    }));\n    return _.map(groupDataArray, function (dataArray) {\n      return _.map(dataArray, function (data) {\n        var _a, _b;\n        var yValue = data[yField];\n        var xValue = data[xField];\n        // 数组处理逻辑\n        if (_.isArray(yValue)) {\n          var off_1 = (max - cache[xValue]) / 2;\n          return __assign(__assign({}, data), (_a = {}, _a[yField] = _.map(yValue, function (y) {\n            return off_1 + y;\n          }), _a));\n        }\n        // 非数组处理逻辑\n        var offset = (max - yValue) / 2;\n        return __assign(__assign({}, data), (_b = {}, _b[yField] = [offset, yValue + offset], _b));\n      });\n    });\n  };\n  // 获取每个 x 对应的最大的值\n  Symmetric.prototype.getXValuesMaxMap = function (mergeData) {\n    var _this = this;\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField;\n    // 根据 xField 的值进行分组\n    var groupDataArray = _.groupBy(mergeData, function (data) {\n      return data[xField];\n    });\n    // 获取每个 xField 值中的最大值\n    return _.mapValues(groupDataArray, function (dataArray) {\n      return _this.getDimMaxValue(dataArray, yField);\n    });\n  };\n  Symmetric.prototype.getDimMaxValue = function (mergeData, dim) {\n    // 所有的 value 值\n    var dimValues = _.map(mergeData, function (data) {\n      return _.get(data, dim, []);\n    });\n    // 将数组打平（dim value 有可能是数组，比如 stack 之后的）\n    var flattenValues = _.flatten(dimValues);\n    // 求出数组的最大值\n    return Math.max.apply(Math, flattenValues);\n  };\n  return Symmetric;\n}(Adjust);\nexport default Symmetric;","map":{"version":3,"names":["_","Adjust","Symmetric","_super","__extends","prototype","process","groupDataArray","mergeData","flatten","_a","xField","yField","cache","getXValuesMaxMap","max","Math","apply","Object","keys","map","key","dataArray","data","yValue","xValue","isArray","off_1","__assign","y","offset","_b","_this","groupBy","mapValues","getDimMaxValue","dim","dimValues","get","flattenValues"],"sources":["../../src/adjusts/symmetric.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}