{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as glUtils from \"./utils\";\nimport { drawFrag, drawVert, fullScreenFrag, fullScreenVert, updateFrag, updateVert } from \"./windShader\";\nfunction getColorRamp(colors) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = 256;\n  canvas.height = 1;\n  var gradient = ctx.createLinearGradient(0, 0, 256, 0);\n  for (var _i = 0, _Object$keys = Object.keys(colors); _i < _Object$keys.length; _i++) {\n    var stop = _Object$keys[_i];\n    gradient.addColorStop(+stop, colors[+stop]);\n  }\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n\n  // @ts-ignore dispose canvas element\n  canvas = null;\n  return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}\nfunction bindAttribute(gl, buffer, attribute, numComponents) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.enableVertexAttribArray(attribute);\n  gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\nfunction bindFramebuffer(gl, framebuffer, texture) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  if (texture) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  }\n}\nexport var Wind = /*#__PURE__*/function () {\n  function Wind(options) {\n    _classCallCheck(this, Wind);\n    _defineProperty(this, \"width\", 512);\n    _defineProperty(this, \"height\", 512);\n    _defineProperty(this, \"numParticles\", 65536);\n    this.gl = options.glContext;\n    this.width = options.imageWidth;\n    this.height = options.imageHeight;\n    this.fadeOpacity = options.fadeOpacity;\n    this.speedFactor = options.speedFactor;\n    this.dropRate = options.dropRate;\n    this.dropRateBump = options.dropRateBump;\n    this.rampColors = options.rampColors;\n    this.init();\n  }\n  _createClass(Wind, [{\n    key: \"init\",\n    value: function init() {\n      var gl = this.gl;\n      this.fadeOpacity = 0.996; // how fast the particle trails fade on each frame\n      this.speedFactor = 0.25; // how fast the particles move\n      this.dropRate = 0.003; // how often the particles move to a random place\n      this.dropRateBump = 0.01; // drop rate increase relative to individual particle speed\n\n      this.drawProgram = glUtils.createProgram(gl, drawVert, drawFrag);\n      this.fullScreenProgram = glUtils.createProgram(gl, fullScreenVert, fullScreenFrag);\n      this.updateProgram = glUtils.createProgram(gl, updateVert, updateFrag);\n      this.quadBuffer = glUtils.createBuffer(gl, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]));\n      this.framebuffer = gl.createFramebuffer();\n      this.colorRampTexture = glUtils.createTexture(this.gl, this.gl.LINEAR, getColorRamp(this.rampColors), 16, 16);\n      var emptyPixels = new Uint8Array(this.width * this.height * 4);\n\n      // screen textures to hold the drawn screen for the previous and the current frame\n\n      this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n      this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n\n      // we create a square texture where each pixel will hold a particle position encoded as RGBA\n      var particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n      // particleRes size\n      this.numParticlesSize = particleRes * particleRes;\n      var particleState = new Uint8Array(this.numParticlesSize * 4);\n      for (var i = 0; i < particleState.length; i++) {\n        particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n      }\n      // textures to hold the particle state for the current and the next frame\n      this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      var particleIndices = new Float32Array(this.numParticlesSize);\n      for (var i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n        particleIndices[i$1] = i$1;\n      }\n      this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n    }\n  }, {\n    key: \"setWind\",\n    value: function setWind(windData) {\n      this.windData = windData;\n      this.windTexture = glUtils.createDataTexture(this.gl, this.gl.LINEAR, windData.image);\n    }\n\n    /**\n     * 更新风场粒子数量\n     * @param num\n     */\n  }, {\n    key: \"updateParticelNum\",\n    value: function updateParticelNum(num) {\n      var gl = this.gl;\n      if (num !== this.numParticles) {\n        this.numParticles = num; // params number\n\n        // we create a square texture where each pixel will hold a particle position encoded as RGBA\n        var particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n        this.numParticlesSize = particleRes * particleRes;\n        var particleState = new Uint8Array(this.numParticlesSize * 4);\n        for (var i = 0; i < particleState.length; i++) {\n          particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n        }\n        // textures to hold the particle state for the current and the next frame\n        this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        var particleIndices = new Float32Array(this.numParticlesSize);\n        for (var i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n          particleIndices[i$1] = i$1;\n        }\n        this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n      }\n    }\n\n    /**\n     * 更新风场风向风速\n     * @param uMin\n     * @param uMax\n     * @param vMin\n     * @param vMax\n     */\n  }, {\n    key: \"updateWindDir\",\n    value: function updateWindDir(uMin, uMax, vMin, vMax) {\n      this.windData.uMin = uMin;\n      this.windData.uMax = uMax;\n      this.windData.vMin = vMin;\n      this.windData.vMax = vMax;\n    }\n\n    /**\n     * update rampColors\n     * @param rampColors\n     */\n  }, {\n    key: \"updateColorRampTexture\",\n    value: function updateColorRampTexture(rampColors) {\n      if (this.isColorChanged(rampColors)) {\n        this.rampColors = rampColors;\n        var gl = this.gl;\n        gl.deleteTexture(this.colorRampTexture);\n        this.colorRampTexture = glUtils.createTexture(gl, gl.LINEAR, getColorRamp(rampColors), 16, 16);\n      }\n    }\n  }, {\n    key: \"isColorChanged\",\n    value: function isColorChanged(rampColors) {\n      var keys = Object.keys(rampColors);\n      for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n        var item = _keys[_i2];\n        var _key = Number(item);\n        // exist new key -> color need update\n        if (!this.rampColors[_key]) {\n          return true;\n        }\n        // value changed -> color need update\n        if (this.rampColors[_key] && this.rampColors[_key] !== rampColors[_key]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"reSize\",\n    value: function reSize(width, height) {\n      if (width !== this.width || height !== this.height) {\n        var gl = this.gl;\n        gl.deleteTexture(this.backgroundTexture);\n        gl.deleteTexture(this.screenTexture);\n        this.width = width;\n        this.height = height;\n        var emptyPixels = new Uint8Array(width * height * 4);\n        // screen textures to hold the drawn screen for the previous and the current frame\n        this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n        this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _this$windData;\n      if ((_this$windData = this.windData) !== null && _this$windData !== void 0 && _this$windData.image) {\n        var gl = this.gl;\n        glUtils.bindTexture(gl, this.windTexture, 0);\n        glUtils.bindTexture(gl, this.particleStateTexture0, 1);\n        this.drawScreen(); // draw Particles into framebuffer\n        this.updateParticles();\n        return {\n          d: this.pixels,\n          w: this.width,\n          h: this.height\n        };\n      } else {\n        return {\n          d: new Uint8Array([0, 0, 0, 0]),\n          w: 1,\n          h: 1\n        };\n      }\n    }\n  }, {\n    key: \"drawScreen\",\n    value: function drawScreen() {\n      var gl = this.gl;\n\n      // draw the screen into a temporary framebuffer to retain it as the background on the next frame\n      bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n      gl.viewport(0, 0, this.width, this.height);\n      gl.disable(gl.BLEND);\n      this.drawFullTexture(this.backgroundTexture, this.fadeOpacity);\n      this.drawParticles();\n      this.pixels = new Uint8Array(4 * this.width * this.height);\n      gl.readPixels(0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.pixels);\n      bindFramebuffer(gl, null, null);\n      gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n      //   save the current screen as the background for the next frame\n      var temp = this.backgroundTexture;\n      this.backgroundTexture = this.screenTexture;\n      this.screenTexture = temp;\n    }\n  }, {\n    key: \"drawFullTexture\",\n    value: function drawFullTexture(texture, opacity) {\n      var gl = this.gl;\n      var program = this.fullScreenProgram;\n      gl.useProgram(program);\n\n      // bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer);\n      gl.vertexAttribPointer(program.a_pos, 2, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(program.a_pos);\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      glUtils.bindTexture(gl, texture, 2);\n      gl.uniform1i(program.u_screen, 2);\n      gl.uniform1f(program.u_opacity, opacity);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      // gl.drawArrays(gl.POINTS, 0, 6);\n    }\n  }, {\n    key: \"drawParticles\",\n    value: function drawParticles() {\n      var gl = this.gl;\n      var program = this.drawProgram;\n      gl.useProgram(program);\n      bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n      glUtils.bindTexture(gl, this.colorRampTexture, 2);\n      gl.uniform1i(program.u_wind, 0);\n      gl.uniform1i(program.u_particles, 1);\n      gl.uniform1i(program.u_color_ramp, 2);\n      gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n      gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n      gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n      gl.drawArrays(gl.POINTS, 0, this.numParticlesSize);\n    }\n  }, {\n    key: \"updateParticles\",\n    value: function updateParticles() {\n      var gl = this.gl;\n      bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n      gl.viewport(0, 0, this.particleStateResolution, this.particleStateResolution);\n      var program = this.updateProgram;\n      gl.useProgram(program);\n      bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n      gl.uniform1i(program.u_wind, 0);\n      gl.uniform1i(program.u_particles, 1);\n      gl.uniform1f(program.u_rand_seed, Math.random());\n      gl.uniform2f(program.u_wind_res, this.windData.image.width * 2, this.windData.image.height * 2);\n      gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n      gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n      gl.uniform1f(program.u_speed_factor, this.speedFactor);\n      gl.uniform1f(program.u_drop_rate, this.dropRate);\n      gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n      // swap the particle state textures so the new one becomes the current one\n      var temp = this.particleStateTexture0;\n      this.particleStateTexture0 = this.particleStateTexture1;\n      this.particleStateTexture1 = temp;\n      bindFramebuffer(gl, null, null);\n\n      // gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // private drawProgram: WebGLProgram;\n      // private fullScreenProgram: WebGLProgram;\n      // private updateProgram: WebGLProgram;\n\n      // private quadBuffer: WebGLBuffer | null;\n      // private particleIndexBuffer: WebGLBuffer | null;\n\n      // private framebuffer: WebGLFramebuffer | null;\n\n      // private colorRampTexture: WebGLTexture | null;\n      // private backgroundTexture: WebGLTexture | null;\n      // private screenTexture: WebGLTexture | null;\n      // private particleStateTexture0: WebGLTexture | null;\n      // private particleStateTexture1: WebGLTexture | null;\n      // private windTexture: WebGLTexture | null;\n\n      this.gl.deleteBuffer(this.quadBuffer);\n      this.gl.deleteBuffer(this.particleIndexBuffer);\n      this.gl.deleteFramebuffer(this.framebuffer);\n\n      // @ts-ignore\n      this.gl.deleteShader(this.drawProgram.vertexShader);\n      // @ts-ignore\n      this.gl.deleteShader(this.drawProgram.fragmentShader);\n      this.gl.deleteProgram(this.drawProgram);\n\n      // @ts-ignore\n      this.gl.deleteShader(this.fullScreenProgram.vertexShader);\n      // @ts-ignore\n      this.gl.deleteShader(this.fullScreenProgram.fragmentShader);\n      this.gl.deleteProgram(this.fullScreenProgram);\n\n      // @ts-ignore\n      this.gl.deleteShader(this.updateProgram.vertexShader);\n      // @ts-ignore\n      this.gl.deleteShader(this.updateProgram.fragmentShader);\n      this.gl.deleteProgram(this.updateProgram);\n      this.gl.deleteTexture(this.colorRampTexture);\n      this.gl.deleteTexture(this.backgroundTexture);\n      this.gl.deleteTexture(this.screenTexture);\n      this.gl.deleteTexture(this.particleStateTexture0);\n      this.gl.deleteTexture(this.particleStateTexture1);\n      this.gl.deleteTexture(this.windTexture);\n    }\n  }]);\n  return Wind;\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","glUtils","drawFrag","drawVert","fullScreenFrag","fullScreenVert","updateFrag","updateVert","getColorRamp","colors","canvas","document","createElement","ctx","getContext","width","height","gradient","createLinearGradient","_i","_Object$keys","Object","keys","length","stop","addColorStop","fillStyle","fillRect","Uint8Array","getImageData","data","bindAttribute","gl","buffer","attribute","numComponents","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bindFramebuffer","framebuffer","texture","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","Wind","options","glContext","imageWidth","imageHeight","fadeOpacity","speedFactor","dropRate","dropRateBump","rampColors","init","key","value","drawProgram","createProgram","fullScreenProgram","updateProgram","quadBuffer","createBuffer","Float32Array","createFramebuffer","colorRampTexture","createTexture","LINEAR","emptyPixels","backgroundTexture","NEAREST","screenTexture","particleRes","particleStateResolution","Math","ceil","sqrt","numParticles","numParticlesSize","particleState","i","floor","random","particleStateTexture0","particleStateTexture1","particleIndices","i$1","particleIndexBuffer","setWind","windData","windTexture","createDataTexture","image","updateParticelNum","num","updateWindDir","uMin","uMax","vMin","vMax","updateColorRampTexture","isColorChanged","deleteTexture","_i2","_keys","item","_key","Number","reSize","draw","_this$windData","bindTexture","drawScreen","updateParticles","d","pixels","w","h","viewport","disable","BLEND","drawFullTexture","drawParticles","readPixels","RGBA","UNSIGNED_BYTE","temp","opacity","program","useProgram","a_pos","uniform1i","u_screen","uniform1f","u_opacity","drawArrays","TRIANGLES","a_index","u_wind","u_particles","u_color_ramp","u_particles_res","uniform2f","u_wind_min","u_wind_max","POINTS","u_rand_seed","u_wind_res","u_speed_factor","u_drop_rate","u_drop_rate_bump","destroy","deleteBuffer","deleteFramebuffer","deleteShader","vertexShader","fragmentShader","deleteProgram"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/wind/models/windRender.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as glUtils from \"./utils\";\nimport { drawFrag, drawVert, fullScreenFrag, fullScreenVert, updateFrag, updateVert } from \"./windShader\";\nfunction getColorRamp(colors) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = 256;\n  canvas.height = 1;\n  var gradient = ctx.createLinearGradient(0, 0, 256, 0);\n  for (var _i = 0, _Object$keys = Object.keys(colors); _i < _Object$keys.length; _i++) {\n    var stop = _Object$keys[_i];\n    gradient.addColorStop(+stop, colors[+stop]);\n  }\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n\n  // @ts-ignore dispose canvas element\n  canvas = null;\n  return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}\nfunction bindAttribute(gl, buffer, attribute, numComponents) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.enableVertexAttribArray(attribute);\n  gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\nfunction bindFramebuffer(gl, framebuffer, texture) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  if (texture) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  }\n}\nexport var Wind = /*#__PURE__*/function () {\n  function Wind(options) {\n    _classCallCheck(this, Wind);\n    _defineProperty(this, \"width\", 512);\n    _defineProperty(this, \"height\", 512);\n    _defineProperty(this, \"numParticles\", 65536);\n    this.gl = options.glContext;\n    this.width = options.imageWidth;\n    this.height = options.imageHeight;\n    this.fadeOpacity = options.fadeOpacity;\n    this.speedFactor = options.speedFactor;\n    this.dropRate = options.dropRate;\n    this.dropRateBump = options.dropRateBump;\n    this.rampColors = options.rampColors;\n    this.init();\n  }\n  _createClass(Wind, [{\n    key: \"init\",\n    value: function init() {\n      var gl = this.gl;\n      this.fadeOpacity = 0.996; // how fast the particle trails fade on each frame\n      this.speedFactor = 0.25; // how fast the particles move\n      this.dropRate = 0.003; // how often the particles move to a random place\n      this.dropRateBump = 0.01; // drop rate increase relative to individual particle speed\n\n      this.drawProgram = glUtils.createProgram(gl, drawVert, drawFrag);\n      this.fullScreenProgram = glUtils.createProgram(gl, fullScreenVert, fullScreenFrag);\n      this.updateProgram = glUtils.createProgram(gl, updateVert, updateFrag);\n      this.quadBuffer = glUtils.createBuffer(gl, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]));\n      this.framebuffer = gl.createFramebuffer();\n      this.colorRampTexture = glUtils.createTexture(this.gl, this.gl.LINEAR, getColorRamp(this.rampColors), 16, 16);\n      var emptyPixels = new Uint8Array(this.width * this.height * 4);\n\n      // screen textures to hold the drawn screen for the previous and the current frame\n\n      this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n      this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n\n      // we create a square texture where each pixel will hold a particle position encoded as RGBA\n      var particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n      // particleRes size\n      this.numParticlesSize = particleRes * particleRes;\n      var particleState = new Uint8Array(this.numParticlesSize * 4);\n      for (var i = 0; i < particleState.length; i++) {\n        particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n      }\n      // textures to hold the particle state for the current and the next frame\n      this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      var particleIndices = new Float32Array(this.numParticlesSize);\n      for (var i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n        particleIndices[i$1] = i$1;\n      }\n      this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n    }\n  }, {\n    key: \"setWind\",\n    value: function setWind(windData) {\n      this.windData = windData;\n      this.windTexture = glUtils.createDataTexture(this.gl, this.gl.LINEAR, windData.image);\n    }\n\n    /**\n     * 更新风场粒子数量\n     * @param num\n     */\n  }, {\n    key: \"updateParticelNum\",\n    value: function updateParticelNum(num) {\n      var gl = this.gl;\n      if (num !== this.numParticles) {\n        this.numParticles = num; // params number\n\n        // we create a square texture where each pixel will hold a particle position encoded as RGBA\n        var particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n        this.numParticlesSize = particleRes * particleRes;\n        var particleState = new Uint8Array(this.numParticlesSize * 4);\n        for (var i = 0; i < particleState.length; i++) {\n          particleState[i] = Math.floor(Math.random() * 256); // randomize the initial particle positions\n        }\n        // textures to hold the particle state for the current and the next frame\n        this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        var particleIndices = new Float32Array(this.numParticlesSize);\n        for (var i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n          particleIndices[i$1] = i$1;\n        }\n        this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n      }\n    }\n\n    /**\n     * 更新风场风向风速\n     * @param uMin\n     * @param uMax\n     * @param vMin\n     * @param vMax\n     */\n  }, {\n    key: \"updateWindDir\",\n    value: function updateWindDir(uMin, uMax, vMin, vMax) {\n      this.windData.uMin = uMin;\n      this.windData.uMax = uMax;\n      this.windData.vMin = vMin;\n      this.windData.vMax = vMax;\n    }\n\n    /**\n     * update rampColors\n     * @param rampColors\n     */\n  }, {\n    key: \"updateColorRampTexture\",\n    value: function updateColorRampTexture(rampColors) {\n      if (this.isColorChanged(rampColors)) {\n        this.rampColors = rampColors;\n        var gl = this.gl;\n        gl.deleteTexture(this.colorRampTexture);\n        this.colorRampTexture = glUtils.createTexture(gl, gl.LINEAR, getColorRamp(rampColors), 16, 16);\n      }\n    }\n  }, {\n    key: \"isColorChanged\",\n    value: function isColorChanged(rampColors) {\n      var keys = Object.keys(rampColors);\n      for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n        var item = _keys[_i2];\n        var _key = Number(item);\n        // exist new key -> color need update\n        if (!this.rampColors[_key]) {\n          return true;\n        }\n        // value changed -> color need update\n        if (this.rampColors[_key] && this.rampColors[_key] !== rampColors[_key]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"reSize\",\n    value: function reSize(width, height) {\n      if (width !== this.width || height !== this.height) {\n        var gl = this.gl;\n        gl.deleteTexture(this.backgroundTexture);\n        gl.deleteTexture(this.screenTexture);\n        this.width = width;\n        this.height = height;\n        var emptyPixels = new Uint8Array(width * height * 4);\n        // screen textures to hold the drawn screen for the previous and the current frame\n        this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n        this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _this$windData;\n      if ((_this$windData = this.windData) !== null && _this$windData !== void 0 && _this$windData.image) {\n        var gl = this.gl;\n        glUtils.bindTexture(gl, this.windTexture, 0);\n        glUtils.bindTexture(gl, this.particleStateTexture0, 1);\n        this.drawScreen(); // draw Particles into framebuffer\n        this.updateParticles();\n        return {\n          d: this.pixels,\n          w: this.width,\n          h: this.height\n        };\n      } else {\n        return {\n          d: new Uint8Array([0, 0, 0, 0]),\n          w: 1,\n          h: 1\n        };\n      }\n    }\n  }, {\n    key: \"drawScreen\",\n    value: function drawScreen() {\n      var gl = this.gl;\n\n      // draw the screen into a temporary framebuffer to retain it as the background on the next frame\n      bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n      gl.viewport(0, 0, this.width, this.height);\n      gl.disable(gl.BLEND);\n      this.drawFullTexture(this.backgroundTexture, this.fadeOpacity);\n      this.drawParticles();\n      this.pixels = new Uint8Array(4 * this.width * this.height);\n      gl.readPixels(0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.pixels);\n      bindFramebuffer(gl, null, null);\n      gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n      //   save the current screen as the background for the next frame\n      var temp = this.backgroundTexture;\n      this.backgroundTexture = this.screenTexture;\n      this.screenTexture = temp;\n    }\n  }, {\n    key: \"drawFullTexture\",\n    value: function drawFullTexture(texture, opacity) {\n      var gl = this.gl;\n      var program = this.fullScreenProgram;\n      gl.useProgram(program);\n\n      // bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer);\n      gl.vertexAttribPointer(program.a_pos, 2, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(program.a_pos);\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      glUtils.bindTexture(gl, texture, 2);\n      gl.uniform1i(program.u_screen, 2);\n      gl.uniform1f(program.u_opacity, opacity);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      // gl.drawArrays(gl.POINTS, 0, 6);\n    }\n  }, {\n    key: \"drawParticles\",\n    value: function drawParticles() {\n      var gl = this.gl;\n      var program = this.drawProgram;\n      gl.useProgram(program);\n      bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n      glUtils.bindTexture(gl, this.colorRampTexture, 2);\n      gl.uniform1i(program.u_wind, 0);\n      gl.uniform1i(program.u_particles, 1);\n      gl.uniform1i(program.u_color_ramp, 2);\n      gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n      gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n      gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n      gl.drawArrays(gl.POINTS, 0, this.numParticlesSize);\n    }\n  }, {\n    key: \"updateParticles\",\n    value: function updateParticles() {\n      var gl = this.gl;\n      bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n      gl.viewport(0, 0, this.particleStateResolution, this.particleStateResolution);\n      var program = this.updateProgram;\n      gl.useProgram(program);\n      bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n      gl.uniform1i(program.u_wind, 0);\n      gl.uniform1i(program.u_particles, 1);\n      gl.uniform1f(program.u_rand_seed, Math.random());\n      gl.uniform2f(program.u_wind_res, this.windData.image.width * 2, this.windData.image.height * 2);\n      gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n      gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n      gl.uniform1f(program.u_speed_factor, this.speedFactor);\n      gl.uniform1f(program.u_drop_rate, this.dropRate);\n      gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n      // swap the particle state textures so the new one becomes the current one\n      var temp = this.particleStateTexture0;\n      this.particleStateTexture0 = this.particleStateTexture1;\n      this.particleStateTexture1 = temp;\n      bindFramebuffer(gl, null, null);\n\n      // gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // private drawProgram: WebGLProgram;\n      // private fullScreenProgram: WebGLProgram;\n      // private updateProgram: WebGLProgram;\n\n      // private quadBuffer: WebGLBuffer | null;\n      // private particleIndexBuffer: WebGLBuffer | null;\n\n      // private framebuffer: WebGLFramebuffer | null;\n\n      // private colorRampTexture: WebGLTexture | null;\n      // private backgroundTexture: WebGLTexture | null;\n      // private screenTexture: WebGLTexture | null;\n      // private particleStateTexture0: WebGLTexture | null;\n      // private particleStateTexture1: WebGLTexture | null;\n      // private windTexture: WebGLTexture | null;\n\n      this.gl.deleteBuffer(this.quadBuffer);\n      this.gl.deleteBuffer(this.particleIndexBuffer);\n      this.gl.deleteFramebuffer(this.framebuffer);\n\n      // @ts-ignore\n      this.gl.deleteShader(this.drawProgram.vertexShader);\n      // @ts-ignore\n      this.gl.deleteShader(this.drawProgram.fragmentShader);\n      this.gl.deleteProgram(this.drawProgram);\n\n      // @ts-ignore\n      this.gl.deleteShader(this.fullScreenProgram.vertexShader);\n      // @ts-ignore\n      this.gl.deleteShader(this.fullScreenProgram.fragmentShader);\n      this.gl.deleteProgram(this.fullScreenProgram);\n\n      // @ts-ignore\n      this.gl.deleteShader(this.updateProgram.vertexShader);\n      // @ts-ignore\n      this.gl.deleteShader(this.updateProgram.fragmentShader);\n      this.gl.deleteProgram(this.updateProgram);\n      this.gl.deleteTexture(this.colorRampTexture);\n      this.gl.deleteTexture(this.backgroundTexture);\n      this.gl.deleteTexture(this.screenTexture);\n      this.gl.deleteTexture(this.particleStateTexture0);\n      this.gl.deleteTexture(this.particleStateTexture1);\n      this.gl.deleteTexture(this.windTexture);\n    }\n  }]);\n  return Wind;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}