{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { PolygonExtrudeTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/build_frag.glsl' */\nvar buildFrag = \"precision highp float;\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_baseColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_brightColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_windowColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_circleSweepColor;\\n  vec2 u_cityCenter;\\n  float u_circleSweep;\\n  float u_cityMinSize;\\n  float u_circleSweepSpeed;\\n  float u_opacity: 1.0;\\n  float u_near : 0;\\n  float u_far : 1;\\n  float u_time;\\n};\\nin vec4 v_Color;\\nin vec2 v_texCoord;\\nin float v_worldDis;\\nout vec4 outputColor;\\n\\n#pragma include \\\"picking\\\"\\n#pragma include \\\"scene_uniforms\\\"\\n\\nvec3 getWindowColor(float n, float hot, vec3 brightColor, vec3 darkColor) {\\n    float s = step(hot, n);\\n    vec3 color = mix(brightColor,vec3(0.9,0.9,1.0),n);\\n\\n    return mix(darkColor, color, s);\\n}\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\\n}\\n\\nfloat LinearizeDepth()\\n{\\n    float z = gl_FragCoord.z * 2.0 - 1.0;\\n    return (2.0 * u_near * u_far) / (u_far + u_near - z * (u_far - u_near));\\n}\\n\\nvec3 fog(vec3 color, vec3 fogColor, float depth){\\n    float fogFactor=clamp(depth,0.0,1.0);\\n    vec3 output_color=mix(fogColor,color,fogFactor);\\n    return output_color;\\n}\\n\\nfloat sdRect(vec2 p, vec2 sz) {\\n  vec2 d = abs(p) - sz;\\n  float outside = length(max(d, 0.));\\n  float inside = min(max(d.x, d.y), 0.);\\n  return outside + inside;\\n}\\n\\nvoid main() {\\n  outputColor = v_Color;\\n  vec3 baseColor = u_baseColor.xyz;\\n  vec3 brightColor = u_brightColor.xyz;\\n  vec3 windowColor = u_windowColor.xyz;\\n  float targetColId = 5.;\\n  float depth = 1.0 - LinearizeDepth() / u_far * u_Zoom;\\n  vec3 fogColor = vec3(23.0/255.0,31.0/255.0,51.0/255.0);\\n  if(v_texCoord.x < 0.) { //\\u9876\\u90E8\\u989C\\u8272\\n       vec3 foggedColor = fog(baseColor.xyz + vec3(0.12*0.9,0.2*0.9,0.3*0.9),fogColor,depth);\\n       outputColor = vec4( foggedColor, v_Color.w);\\n  }else { // \\u4FA7\\u9762\\u989C\\u8272\\n        vec2 st = v_texCoord;\\n        vec2  UvScale = v_texCoord;\\n        float tStep = min(0.08,max(0.05* (18.0-u_Zoom),0.02));\\n        float tStart = 0.25 * tStep;\\n        float tEnd = 0.75 * tStep;\\n        float u = mod(UvScale.x, tStep);\\n        float v = mod(UvScale.y, tStep);\\n        float ux = floor(UvScale.x/tStep);\\n        float uy = floor(UvScale.y/tStep);\\n        float n = random(vec2(ux,uy));\\n        float lightP = u_time;\\n        float head = 1.0- step(0.005,st.y);\\n        /*step3*/\\n        // \\u5C06\\u7A97\\u6237\\u989C\\u8272\\u548C\\u5899\\u9762\\u989C\\u8272\\u533A\\u522B\\u5F00\\u6765\\n        float sU = step(tStart, u) - step(tEnd, u);\\n        float sV = step(tStart, v) - step(tEnd, v);\\n        vec2 windowSize = vec2(abs(tEnd-tStart),abs(tEnd-tStart));\\n        float dist = sdRect(vec2(u,v), windowSize);\\n        float s = sU * sV;\\n\\n        float curColId = floor(UvScale.x / tStep);\\n        float sCol = step(targetColId - 0.2, curColId) - step(targetColId + 0.2, curColId);\\n\\n        float mLightP = mod(lightP, 2.);\\n        float sRow = step(mLightP - 0.2, st.y) - step(mLightP, st.y);\\n        if(ux == targetColId){\\n            n =0.;\\n        }\\n        float timeP = min(0.75, abs ( sin(u_time/3.0) ) );\\n        float hot = smoothstep(1.0,0.0,timeP);\\n        vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), s);\\n        //vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), 1.0);\\n        float sFinal = s * sCol * sRow;\\n        color += mix(baseColor, brightColor, sFinal*n);\\n        if (st.y<0.01){\\n        color = baseColor;\\n         }\\n        if(head ==1.0) { // \\u9876\\u90E8\\u4EAE\\u7EBF\\n            color = brightColor;\\n        }\\n        color = color * v_Color.rgb;\\n\\n        vec3 foggedColor = fog(color,fogColor,depth);\\n\\n        outputColor = vec4(foggedColor,1.0);\\n  }\\n\\n\\n  if(u_circleSweep > 0.0 && v_worldDis < u_cityMinSize) {\\n    float r = fract(((v_worldDis/u_cityMinSize) - u_time * u_circleSweepSpeed) * 2.0);\\n    outputColor.rgb += r * r * u_circleSweepColor.rgb;\\n  }\\n   \\n  outputColor.a *= u_opacity;\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/build_vert.glsl' */\nvar buildVert = \"precision highp float;\\n\\n#define ambientRatio 0.5\\n#define diffuseRatio 0.3\\n#define specularRatio 0.2\\n\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec2 a_Uv;\\n\\nout vec2 v_texCoord;\\nout vec4 v_Color;\\nout float v_worldDis;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_baseColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_brightColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_windowColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_circleSweepColor;\\n  vec2 u_cityCenter;\\n  float u_circleSweep;\\n  float u_cityMinSize;\\n  float u_circleSweepSpeed;\\n  float u_opacity: 1.0;\\n  float u_near : 0;\\n  float u_far : 1;\\n  float u_time;\\n};\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\n\\nvoid main() {\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  vec4 project_pos = project_position(pos);\\n\\n   v_texCoord = a_Uv;\\n\\n  if(u_circleSweep > 0.0) {\\n     vec2 lnglatscale = vec2(0.0);\\n    if(u_CoordinateSystem != COORDINATE_SYSTEM_P20_2) {\\n      lnglatscale = (a_Position.xy - u_cityCenter) * vec2(0.0, 0.135);\\n    }\\n    v_worldDis = length(a_Position.xy + lnglatscale - u_cityCenter);\\n  }\\n \\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  float lightWeight = calc_lighting(pos);\\n  // v_Color = a_Color;\\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w);\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nvar CityBuildModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(CityBuildModel, _BaseModel);\n  var _super = _createSuper(CityBuildModel);\n  function CityBuildModel() {\n    _classCallCheck(this, CityBuildModel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CityBuildModel, [{\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        _ref$opacity = _ref.opacity,\n        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n        _ref$baseColor = _ref.baseColor,\n        baseColor = _ref$baseColor === void 0 ? 'rgb(16,16,16)' : _ref$baseColor,\n        _ref$brightColor = _ref.brightColor,\n        brightColor = _ref$brightColor === void 0 ? 'rgb(255,176,38)' : _ref$brightColor,\n        _ref$windowColor = _ref.windowColor,\n        windowColor = _ref$windowColor === void 0 ? 'rgb(30,60,89)' : _ref$windowColor,\n        _ref$time = _ref.time,\n        time = _ref$time === void 0 ? 0 : _ref$time,\n        _ref$sweep = _ref.sweep,\n        sweep = _ref$sweep === void 0 ? {\n          enable: false,\n          sweepRadius: 1,\n          sweepColor: 'rgb(255, 255, 255)',\n          sweepSpeed: 0.4,\n          sweepCenter: this.cityCenter\n        } : _ref$sweep;\n      var commonOptions = {\n        u_baseColor: rgb2arr(baseColor),\n        u_brightColor: rgb2arr(brightColor),\n        u_windowColor: rgb2arr(windowColor),\n        u_circleSweepColor: [].concat(_toConsumableArray(rgb2arr(sweep.sweepColor).slice(0, 3)), [1.0]),\n        u_cityCenter: sweep.sweepCenter || this.cityCenter,\n        u_circleSweep: sweep.enable ? 1.0 : 0.0,\n        u_cityMinSize: this.cityMinSize * sweep.sweepRadius,\n        u_circleSweepSpeed: sweep.sweepSpeed,\n        u_opacity: opacity,\n        u_near: 0,\n        u_far: 1,\n        u_time: this.layer.getLayerAnimateTime() || time\n      };\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n  }, {\n    key: \"calCityGeo\",\n    value: function calCityGeo() {\n      // @ts-ignore\n      var _this$layer$getSource = _slicedToArray(this.layer.getSource().extent, 4),\n        minLng = _this$layer$getSource[0],\n        minLat = _this$layer$getSource[1],\n        maxLng = _this$layer$getSource[2],\n        maxLat = _this$layer$getSource[3];\n      if (this.mapService.version === 'GAODE2.x') {\n        // @ts-ignore\n        this.cityCenter = this.mapService.lngLatToCoord([(maxLng + minLng) / 2, (maxLat + minLat) / 2]);\n        // @ts-ignore\n        var l1 = this.mapService.lngLatToCoord([maxLng, maxLat]);\n        // @ts-ignore\n        var l2 = this.mapService.lngLatToCoord([minLng, minLat]);\n        this.cityMinSize = Math.sqrt(Math.pow(l1[0] - l2[0], 2) + Math.pow(l1[1] - l2[1], 2)) / 4;\n      } else {\n        var w = maxLng - minLng;\n        var h = maxLat - minLat;\n        this.cityCenter = [(maxLng + minLng) / 2, (maxLat + minLat) / 2];\n        this.cityMinSize = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2)) / 4;\n      }\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.calCityGeo();\n              this.initUniformsBuffer();\n              this.startModelAnimate();\n              return _context.abrupt(\"return\", this.buildModels());\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.layer.buildLayerModel({\n                moduleName: 'cityBuilding',\n                vertexShader: buildVert,\n                fragmentShader: buildFrag,\n                triangulation: PolygonExtrudeTriangulation,\n                depth: {\n                  enable: true\n                },\n                inject: this.getInject(),\n                cull: {\n                  enable: true,\n                  face: gl.BACK\n                }\n              });\n            case 2:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      // point layer size;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          shaderLocation: ShaderLocation.UV,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n  return CityBuildModel;\n}(BaseModel);\nexport { CityBuildModel as default };","map":{"version":3,"names":["_asyncToGenerator","_slicedToArray","_toConsumableArray","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_regeneratorRuntime","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AttributeType","gl","rgb2arr","BaseModel","PolygonExtrudeTriangulation","buildFrag","buildVert","ShaderLocation","CityBuildModel","_BaseModel","_super","key","value","getCommonUniformsInfo","_ref","layer","getLayerConfig","_ref$opacity","opacity","_ref$baseColor","baseColor","_ref$brightColor","brightColor","_ref$windowColor","windowColor","_ref$time","time","_ref$sweep","sweep","enable","sweepRadius","sweepColor","sweepSpeed","sweepCenter","cityCenter","commonOptions","u_baseColor","u_brightColor","u_windowColor","u_circleSweepColor","concat","slice","u_cityCenter","u_circleSweep","u_cityMinSize","cityMinSize","u_circleSweepSpeed","u_opacity","u_near","u_far","u_time","getLayerAnimateTime","commonBufferInfo","getUniformsBufferInfo","calCityGeo","_this$layer$getSource","getSource","extent","minLng","minLat","maxLng","maxLat","mapService","version","lngLatToCoord","l1","l2","Math","sqrt","pow","w","h","_initModels","mark","_callee","wrap","_callee$","_context","prev","next","initUniformsBuffer","startModelAnimate","abrupt","buildModels","stop","initModels","_buildModels","_callee2","model","_callee2$","_context2","buildLayerModel","moduleName","vertexShader","fragmentShader","triangulation","depth","inject","getInject","cull","face","BACK","sent","registerBuiltinAttributes","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","NORMAL","buffer","usage","STATIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","normal","SIZE","DYNAMIC_DRAW","_feature$size","Array","isArray","UV","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/citybuliding/models/build.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { PolygonExtrudeTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/build_frag.glsl' */\nvar buildFrag = \"precision highp float;\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_baseColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_brightColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_windowColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_circleSweepColor;\\n  vec2 u_cityCenter;\\n  float u_circleSweep;\\n  float u_cityMinSize;\\n  float u_circleSweepSpeed;\\n  float u_opacity: 1.0;\\n  float u_near : 0;\\n  float u_far : 1;\\n  float u_time;\\n};\\nin vec4 v_Color;\\nin vec2 v_texCoord;\\nin float v_worldDis;\\nout vec4 outputColor;\\n\\n#pragma include \\\"picking\\\"\\n#pragma include \\\"scene_uniforms\\\"\\n\\nvec3 getWindowColor(float n, float hot, vec3 brightColor, vec3 darkColor) {\\n    float s = step(hot, n);\\n    vec3 color = mix(brightColor,vec3(0.9,0.9,1.0),n);\\n\\n    return mix(darkColor, color, s);\\n}\\nfloat random (vec2 st) {\\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\\n}\\n\\nfloat LinearizeDepth()\\n{\\n    float z = gl_FragCoord.z * 2.0 - 1.0;\\n    return (2.0 * u_near * u_far) / (u_far + u_near - z * (u_far - u_near));\\n}\\n\\nvec3 fog(vec3 color, vec3 fogColor, float depth){\\n    float fogFactor=clamp(depth,0.0,1.0);\\n    vec3 output_color=mix(fogColor,color,fogFactor);\\n    return output_color;\\n}\\n\\nfloat sdRect(vec2 p, vec2 sz) {\\n  vec2 d = abs(p) - sz;\\n  float outside = length(max(d, 0.));\\n  float inside = min(max(d.x, d.y), 0.);\\n  return outside + inside;\\n}\\n\\nvoid main() {\\n  outputColor = v_Color;\\n  vec3 baseColor = u_baseColor.xyz;\\n  vec3 brightColor = u_brightColor.xyz;\\n  vec3 windowColor = u_windowColor.xyz;\\n  float targetColId = 5.;\\n  float depth = 1.0 - LinearizeDepth() / u_far * u_Zoom;\\n  vec3 fogColor = vec3(23.0/255.0,31.0/255.0,51.0/255.0);\\n  if(v_texCoord.x < 0.) { //\\u9876\\u90E8\\u989C\\u8272\\n       vec3 foggedColor = fog(baseColor.xyz + vec3(0.12*0.9,0.2*0.9,0.3*0.9),fogColor,depth);\\n       outputColor = vec4( foggedColor, v_Color.w);\\n  }else { // \\u4FA7\\u9762\\u989C\\u8272\\n        vec2 st = v_texCoord;\\n        vec2  UvScale = v_texCoord;\\n        float tStep = min(0.08,max(0.05* (18.0-u_Zoom),0.02));\\n        float tStart = 0.25 * tStep;\\n        float tEnd = 0.75 * tStep;\\n        float u = mod(UvScale.x, tStep);\\n        float v = mod(UvScale.y, tStep);\\n        float ux = floor(UvScale.x/tStep);\\n        float uy = floor(UvScale.y/tStep);\\n        float n = random(vec2(ux,uy));\\n        float lightP = u_time;\\n        float head = 1.0- step(0.005,st.y);\\n        /*step3*/\\n        // \\u5C06\\u7A97\\u6237\\u989C\\u8272\\u548C\\u5899\\u9762\\u989C\\u8272\\u533A\\u522B\\u5F00\\u6765\\n        float sU = step(tStart, u) - step(tEnd, u);\\n        float sV = step(tStart, v) - step(tEnd, v);\\n        vec2 windowSize = vec2(abs(tEnd-tStart),abs(tEnd-tStart));\\n        float dist = sdRect(vec2(u,v), windowSize);\\n        float s = sU * sV;\\n\\n        float curColId = floor(UvScale.x / tStep);\\n        float sCol = step(targetColId - 0.2, curColId) - step(targetColId + 0.2, curColId);\\n\\n        float mLightP = mod(lightP, 2.);\\n        float sRow = step(mLightP - 0.2, st.y) - step(mLightP, st.y);\\n        if(ux == targetColId){\\n            n =0.;\\n        }\\n        float timeP = min(0.75, abs ( sin(u_time/3.0) ) );\\n        float hot = smoothstep(1.0,0.0,timeP);\\n        vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), s);\\n        //vec3 color = mix(baseColor, getWindowColor(n,hot,brightColor,windowColor), 1.0);\\n        float sFinal = s * sCol * sRow;\\n        color += mix(baseColor, brightColor, sFinal*n);\\n        if (st.y<0.01){\\n        color = baseColor;\\n         }\\n        if(head ==1.0) { // \\u9876\\u90E8\\u4EAE\\u7EBF\\n            color = brightColor;\\n        }\\n        color = color * v_Color.rgb;\\n\\n        vec3 foggedColor = fog(color,fogColor,depth);\\n\\n        outputColor = vec4(foggedColor,1.0);\\n  }\\n\\n\\n  if(u_circleSweep > 0.0 && v_worldDis < u_cityMinSize) {\\n    float r = fract(((v_worldDis/u_cityMinSize) - u_time * u_circleSweepSpeed) * 2.0);\\n    outputColor.rgb += r * r * u_circleSweepColor.rgb;\\n  }\\n   \\n  outputColor.a *= u_opacity;\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/build_vert.glsl' */\nvar buildVert = \"precision highp float;\\n\\n#define ambientRatio 0.5\\n#define diffuseRatio 0.3\\n#define specularRatio 0.2\\n\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec2 a_Uv;\\n\\nout vec2 v_texCoord;\\nout vec4 v_Color;\\nout float v_worldDis;\\n\\nlayout(std140) uniform commonUniforms {\\n  vec4 u_baseColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_brightColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_windowColor : [ 1.0, 0, 0, 1.0 ];\\n  vec4 u_circleSweepColor;\\n  vec2 u_cityCenter;\\n  float u_circleSweep;\\n  float u_cityMinSize;\\n  float u_circleSweepSpeed;\\n  float u_opacity: 1.0;\\n  float u_near : 0;\\n  float u_far : 1;\\n  float u_time;\\n};\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\n\\nvoid main() {\\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\\n  vec4 project_pos = project_position(pos);\\n\\n   v_texCoord = a_Uv;\\n\\n  if(u_circleSweep > 0.0) {\\n     vec2 lnglatscale = vec2(0.0);\\n    if(u_CoordinateSystem != COORDINATE_SYSTEM_P20_2) {\\n      lnglatscale = (a_Position.xy - u_cityCenter) * vec2(0.0, 0.135);\\n    }\\n    v_worldDis = length(a_Position.xy + lnglatscale - u_cityCenter);\\n  }\\n \\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  float lightWeight = calc_lighting(pos);\\n  // v_Color = a_Color;\\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w);\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nvar CityBuildModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(CityBuildModel, _BaseModel);\n  var _super = _createSuper(CityBuildModel);\n  function CityBuildModel() {\n    _classCallCheck(this, CityBuildModel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CityBuildModel, [{\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        _ref$opacity = _ref.opacity,\n        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n        _ref$baseColor = _ref.baseColor,\n        baseColor = _ref$baseColor === void 0 ? 'rgb(16,16,16)' : _ref$baseColor,\n        _ref$brightColor = _ref.brightColor,\n        brightColor = _ref$brightColor === void 0 ? 'rgb(255,176,38)' : _ref$brightColor,\n        _ref$windowColor = _ref.windowColor,\n        windowColor = _ref$windowColor === void 0 ? 'rgb(30,60,89)' : _ref$windowColor,\n        _ref$time = _ref.time,\n        time = _ref$time === void 0 ? 0 : _ref$time,\n        _ref$sweep = _ref.sweep,\n        sweep = _ref$sweep === void 0 ? {\n          enable: false,\n          sweepRadius: 1,\n          sweepColor: 'rgb(255, 255, 255)',\n          sweepSpeed: 0.4,\n          sweepCenter: this.cityCenter\n        } : _ref$sweep;\n      var commonOptions = {\n        u_baseColor: rgb2arr(baseColor),\n        u_brightColor: rgb2arr(brightColor),\n        u_windowColor: rgb2arr(windowColor),\n        u_circleSweepColor: [].concat(_toConsumableArray(rgb2arr(sweep.sweepColor).slice(0, 3)), [1.0]),\n        u_cityCenter: sweep.sweepCenter || this.cityCenter,\n        u_circleSweep: sweep.enable ? 1.0 : 0.0,\n        u_cityMinSize: this.cityMinSize * sweep.sweepRadius,\n        u_circleSweepSpeed: sweep.sweepSpeed,\n        u_opacity: opacity,\n        u_near: 0,\n        u_far: 1,\n        u_time: this.layer.getLayerAnimateTime() || time\n      };\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n  }, {\n    key: \"calCityGeo\",\n    value: function calCityGeo() {\n      // @ts-ignore\n      var _this$layer$getSource = _slicedToArray(this.layer.getSource().extent, 4),\n        minLng = _this$layer$getSource[0],\n        minLat = _this$layer$getSource[1],\n        maxLng = _this$layer$getSource[2],\n        maxLat = _this$layer$getSource[3];\n      if (this.mapService.version === 'GAODE2.x') {\n        // @ts-ignore\n        this.cityCenter = this.mapService.lngLatToCoord([(maxLng + minLng) / 2, (maxLat + minLat) / 2]);\n        // @ts-ignore\n        var l1 = this.mapService.lngLatToCoord([maxLng, maxLat]);\n        // @ts-ignore\n        var l2 = this.mapService.lngLatToCoord([minLng, minLat]);\n        this.cityMinSize = Math.sqrt(Math.pow(l1[0] - l2[0], 2) + Math.pow(l1[1] - l2[1], 2)) / 4;\n      } else {\n        var w = maxLng - minLng;\n        var h = maxLat - minLat;\n        this.cityCenter = [(maxLng + minLng) / 2, (maxLat + minLat) / 2];\n        this.cityMinSize = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2)) / 4;\n      }\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.calCityGeo();\n              this.initUniformsBuffer();\n              this.startModelAnimate();\n              return _context.abrupt(\"return\", this.buildModels());\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.layer.buildLayerModel({\n                moduleName: 'cityBuilding',\n                vertexShader: buildVert,\n                fragmentShader: buildFrag,\n                triangulation: PolygonExtrudeTriangulation,\n                depth: {\n                  enable: true\n                },\n                inject: this.getInject(),\n                cull: {\n                  enable: true,\n                  face: gl.BACK\n                }\n              });\n            case 2:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      // point layer size;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 10 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          shaderLocation: ShaderLocation.UV,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n  return CityBuildModel;\n}(BaseModel);\nexport { CityBuildModel as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}