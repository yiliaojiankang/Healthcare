{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __extends, __values } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * Tree Facet\n */\nvar Tree = /** @class */function (_super) {\n  __extends(Tree, _super);\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.afterChartRender = function () {\n      if (_this.facets && _this.cfg.line) {\n        _this.container.clear();\n        _this.drawLines(_this.facets);\n      }\n    };\n    return _this;\n  }\n  Tree.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Tree.prototype.beforeEachView = function (view, facet) {};\n  Tree.prototype.init = function () {\n    _super.prototype.init.call(this);\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  };\n  Tree.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd'\n        },\n        smooth: false\n      },\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  Tree.prototype.generateFacets = function (data) {\n    var fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    var rst = [];\n    var rootFacet = {\n      type: this.cfg.type,\n      data: data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: ''\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  };\n  Tree.prototype.setRegion = function (facets) {\n    var _this = this;\n    this.forceColIndex(facets);\n    facets.forEach(function (facet) {\n      // @ts-ignore 允许调整\n      facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  };\n  Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    var yWidth = 1 / rows; // y轴方向的每个分面的偏移\n    var start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex\n    };\n    var end = {\n      x: start.x + xWidth,\n      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线\n    };\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n  Tree.prototype.forceColIndex = function (facets) {\n    var e_1, _a;\n    var _this = this;\n    var leafs = [];\n    var index = 0;\n    facets.forEach(function (facet) {\n      if (_this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n    leafs.forEach(function (facet) {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    var maxLevel = this.cfg.fields.length;\n    for (var i = maxLevel - 1; i >= 0; i--) {\n      var levelFacets = this.getFacetsByLevel(facets, i);\n      try {\n        // var yIndex = maxLevel - i;\n        for (var levelFacets_1 = (e_1 = void 0, __values(levelFacets)), levelFacets_1_1 = levelFacets_1.next(); !levelFacets_1_1.done; levelFacets_1_1 = levelFacets_1.next()) {\n          var facet = levelFacets_1_1.value;\n          if (!this.isLeaf(facet)) {\n            facet.originColIndex = facet.columnIndex;\n            // @ts-ignore\n            facet.columnIndex = this.getRegionIndex(facet.children);\n            // @ts-ignore\n            facet.columnValuesLength = leafs.length;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (levelFacets_1_1 && !levelFacets_1_1.done && (_a = levelFacets_1.return)) _a.call(levelFacets_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  // get facet use level\n  Tree.prototype.getFacetsByLevel = function (facets, level) {\n    var rst = [];\n    facets.forEach(function (facet) {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  };\n  // if the facet has children , make it's column index in the middle of it's children\n  Tree.prototype.getRegionIndex = function (children) {\n    var first = children[0];\n    var last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  };\n  // is  a leaf without children\n  Tree.prototype.isLeaf = function (facet) {\n    return !facet.children || !facet.children.length;\n  };\n  Tree.prototype.getRows = function () {\n    return this.cfg.fields.length + 1;\n  };\n  // get child\n  Tree.prototype.getChildFacets = function (data, level, arr) {\n    var _this = this;\n    // [ 'grade', 'class' ]\n    var fields = this.cfg.fields;\n    var length = fields.length;\n    if (length < level) {\n      return;\n    }\n    var rst = [];\n    // get fist level except root node\n    var field = fields[level - 1];\n    // get field value\n    var values = this.getFieldValues(data, field);\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var subData = data.filter(_this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        var facet = {\n          type: _this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: _this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: _this.getChildFacets(subData, level + 1, arr)\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  };\n  Tree.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  Tree.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  Tree.prototype.drawLines = function (facets) {\n    var _this = this;\n    facets.forEach(function (facet) {\n      if (!_this.isLeaf(facet)) {\n        var children = facet.children;\n        _this.addFacetLines(facet, children);\n      }\n    });\n  };\n  // add lines with it's children\n  Tree.prototype.addFacetLines = function (facet, children) {\n    var _this = this;\n    var view = facet.view;\n    var region = view.coordinateBBox;\n    // top, right, bottom, left\n    var start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height\n    };\n    children.forEach(function (subFacet) {\n      var subRegion = subFacet.view.coordinateBBox;\n      var end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y\n      };\n      var middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2\n      };\n      var middle2 = {\n        x: end.x,\n        y: middle1.y\n      };\n      _this.drawLine([start, middle1, middle2, end]);\n    });\n  };\n  Tree.prototype.getPath = function (points) {\n    var path = [];\n    var smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n    return path;\n  };\n  // draw line width points\n  Tree.prototype.drawLine = function (points) {\n    var path = this.getPath(points);\n    var line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign({\n        // @ts-ignore\n        path: path\n      }, line)\n    });\n  };\n  Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n    return option;\n  };\n  return Tree;\n}(Facet);\nexport default Tree;","map":{"version":3,"names":["assign","deepMix","each","get","DIRECTION","VIEW_LIFE_CIRCLE","getFactTitleConfig","Facet","Tree","_super","__extends","_this","apply","arguments","afterChartRender","facets","cfg","line","container","clear","drawLines","prototype","afterEachView","view","facet","processAxis","beforeEachView","init","call","on","AFTER_RENDER","getDefaultCfg","type","style","lineWidth","stroke","smooth","showTitle","title","getDefaultTitleCfg","generateFacets","data","fields","length","Error","rst","rootFacet","region","rowValuesLength","getRows","columnValuesLength","rowIndex","columnIndex","rowField","columnField","rowValue","columnValue","push","children","getChildFacets","setRegion","forceColIndex","forEach","getRegion","rows","cols","xIndex","yIndex","xWidth","yWidth","start","x","y","end","leafs","index","isLeaf","maxLevel","i","levelFacets","getFacetsByLevel","levelFacets_1","e_1","__values","levelFacets_1_1","next","done","value","originColIndex","getRegionIndex","level","first","last","arr","field","values","getFieldValues","conditions","subData","filter","getFacetDataFilter","render","renderTitle","formatter","config","position","content","TOP","annotation","text","addFacetLines","coordinateBBox","width","height","subFacet","subRegion","bl","tr","middle1","middle2","drawLine","getPath","points","path","point","addShape","attrs","getXAxisOption","axes","option","__assign","label","getYAxisOption"],"sources":["../../src/facet/tree.ts"],"sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport View from '../chart/view';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { AxisCfg, Condition, Datum, TreeCfg, TreeData } from '../interface';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * Tree Facet\n */\nexport default class Tree extends Facet<TreeCfg, TreeData> {\n  protected afterEachView(view: View, facet: TreeData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: TreeData) {}\n\n  public init() {\n    super.init();\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd',\n        },\n        smooth: false,\n      },\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  protected generateFacets(data: Datum[]): TreeData[] {\n    const fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    const rst = [];\n    const rootFacet: TreeData = {\n      type: this.cfg.type,\n      data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: '',\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  }\n\n  private setRegion(facets: TreeData[]) {\n    this.forceColIndex(facets);\n    facets.forEach((facet) => {\n      // @ts-ignore 允许调整\n      facet.region = this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  }\n\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number) {\n    const xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    const yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    const start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex,\n    };\n\n    const end = {\n      x: start.x + xWidth,\n      y: start.y + (yWidth * 2) / 3, // 预留1/3的空隙，方便添加连接线\n    };\n    return {\n      start,\n      end,\n    };\n  }\n\n  private forceColIndex(facets: TreeData[]) {\n    const leafs: TreeData[] = [];\n    let index = 0;\n    facets.forEach((facet) => {\n      if (this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n\n    leafs.forEach((facet) => {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    const maxLevel = this.cfg.fields.length;\n    for (let i = maxLevel - 1; i >= 0; i--) {\n      const levelFacets = this.getFacetsByLevel(facets, i);\n      // var yIndex = maxLevel - i;\n      for (const facet of levelFacets) {\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex;\n          // @ts-ignore\n          facet.columnIndex = this.getRegionIndex(facet.children);\n          // @ts-ignore\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }\n\n  // get facet use level\n  private getFacetsByLevel(facets: TreeData[], level: number) {\n    const rst: TreeData[] = [];\n    facets.forEach((facet) => {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  // if the facet has children , make it's column index in the middle of it's children\n  private getRegionIndex(children: TreeData[]) {\n    const first = children[0];\n    const last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }\n\n  // is  a leaf without children\n  private isLeaf(facet: TreeData) {\n    return !facet.children || !facet.children.length;\n  }\n\n  private getRows() {\n    return this.cfg.fields.length + 1;\n  }\n\n  // get child\n  private getChildFacets(data: Datum[], level: number, arr: TreeData[]) {\n    // [ 'grade', 'class' ]\n    const fields = this.cfg.fields;\n    const length = fields.length;\n    if (length < level) {\n      return;\n    }\n    const rst = [];\n    // get fist level except root node\n    const field = fields[level - 1];\n    // get field value\n    const values = this.getFieldValues(data, field);\n    values.forEach((value, index) => {\n      const conditions = [{ field, value, values } as Condition];\n      const subData = data.filter(this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        const facet: TreeData = {\n          type: this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: this.getChildFacets(subData, level + 1, arr),\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  public render() {\n    super.render();\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  private afterChartRender = () => {\n    if (this.facets && this.cfg.line) {\n      this.container.clear();\n      this.drawLines(this.facets);\n    }\n  };\n\n  private renderTitle() {\n    each(this.facets, (facet: TreeData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  private drawLines(facets: TreeData[]) {\n    facets.forEach((facet) => {\n      if (!this.isLeaf(facet)) {\n        const children = facet.children;\n        this.addFacetLines(facet, children);\n      }\n    });\n  }\n\n  // add lines with it's children\n  private addFacetLines(facet: TreeData, children: TreeData[]) {\n    const view = facet.view;\n    const region = view.coordinateBBox;\n    // top, right, bottom, left\n    const start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height,\n    };\n\n    children.forEach((subFacet) => {\n      const subRegion = subFacet.view.coordinateBBox;\n      const end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y,\n      };\n\n      const middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2,\n      };\n      const middle2 = {\n        x: end.x,\n        y: middle1.y,\n      };\n      this.drawLine([start, middle1, middle2, end]);\n    });\n  }\n\n  private getPath(points) {\n    const path = [];\n    const smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }\n\n  // draw line width points\n  private drawLine(points) {\n    const path = this.getPath(points);\n    const line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign(\n        {\n          // @ts-ignore\n          path,\n        },\n        line\n      ),\n    });\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}