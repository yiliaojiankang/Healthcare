{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar onmessage = function (e) {\n  // Copy from src/util/collision-detect.ts\n  function generateUtils() {\n    function dot(a, b) {\n      return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n    }\n    /**\n     * 1. 获取投影轴\n     */\n    function getAxes(points /** 多边形的关键点 */) {\n      // 目前先处理 平行矩形 的场景, 其他多边形不处理\n      if (points.length > 4) {\n        return [];\n      }\n      // 获取向量\n      var vector = function (start, end) {\n        return [end.x - start.x, end.y - start.y];\n      };\n      // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n      var AB = vector(points[0], points[1]);\n      var BC = vector(points[1], points[2]);\n      return [AB, BC];\n    }\n    /**\n     * 绕指定点顺时针旋转后的点坐标\n     * 默认绕原点旋转\n     */\n    function rotateAtPoint(point, deg, origin) {\n      if (deg === void 0) {\n        deg = 0;\n      }\n      if (origin === void 0) {\n        origin = {\n          x: 0,\n          y: 0\n        };\n      }\n      var x = point.x,\n        y = point.y;\n      return {\n        x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n        y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y\n      };\n    }\n    /**\n     * @private\n     * 转化为顶点坐标数组\n     *\n     * @param {Object} box\n     */\n    function getRectPoints(box) {\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var rotation = box.rotation;\n      if (rotation) {\n        return [rotateAtPoint(points[0], rotation, points[0]), rotateAtPoint(points[1], rotation, points[0]), rotateAtPoint(points[2], rotation, points[0]), rotateAtPoint(points[3], rotation, points[0])];\n      }\n      return points;\n    }\n    /**\n     * 2. 获取多边形在投影轴上的投影\n     *\n     * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n     * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n     */\n    function getProjection(points /** 多边形的关键点 */, axis) {\n      // 目前先处理矩形的场景\n      if (points.length > 4) {\n        return {\n          min: 0,\n          max: 0\n        };\n      }\n      var scalars = [];\n      points.forEach(function (point) {\n        scalars.push(dot([point.x, point.y], axis));\n      });\n      return {\n        min: Math.min.apply(null, scalars),\n        max: Math.max.apply(null, scalars)\n      };\n    }\n    function isProjectionOverlap(projection1, projection2) {\n      return projection1.max > projection2.min && projection1.min < projection2.max;\n    }\n    function isValidNumber(d) {\n      return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n    }\n    function isValidBox(box) {\n      return ['x', 'y', 'width', 'height'].every(function (attr) {\n        return isValidNumber(box[attr]);\n      });\n    }\n    function isIntersectRect(box1, box2, margin) {\n      if (margin === void 0) {\n        margin = 0;\n      }\n      return !(box2.x > box1.x + box1.width + margin || box2.x + box2.width < box1.x - margin || box2.y > box1.y + box1.height + margin || box2.y + box2.height < box1.y - margin);\n    }\n    function intersect(box1, box2, margin) {\n      if (margin === void 0) {\n        margin = 0;\n      }\n      if (!isValidBox(box1) || !isValidBox(box2)) return false;\n      // Quick detect, if rotation is null or zero.\n      if (!box1.rotation && !box2.rotation) {\n        return isIntersectRect(box1, box2, margin);\n      }\n      // 分别获取 4 个关键点\n      var rect1Points = getRectPoints(box1);\n      var rect2Points = getRectPoints(box2);\n      // 获取所有投影轴\n      var axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n      for (var i = 0; i < axes.length; i++) {\n        var axis = axes[i];\n        var projection1 = getProjection(rect1Points, axis);\n        var projection2 = getProjection(rect2Points, axis);\n        if (!isProjectionOverlap(projection1, projection2)) return false;\n      }\n      return true;\n    }\n    return {\n      intersect: intersect\n    };\n  }\n  var intersect = generateUtils().intersect;\n  // Label layouts.\n  function hideOverlap(items) {\n    var boxes = items.slice();\n    for (var i = 0; i < boxes.length; i++) {\n      var box1 = boxes[i];\n      if (box1.visible) {\n        for (var j = i + 1; j < boxes.length; j++) {\n          var box2 = boxes[j];\n          if (box1 !== box2 && box2.visible) {\n            if (intersect(box1, box2)) {\n              box2.visible = false;\n            }\n          }\n        }\n      }\n    }\n    return boxes;\n  }\n  var methods = {\n    'hide-overlap': hideOverlap\n  };\n  // Main\n  try {\n    var eventData = JSON.parse(e.data);\n    if (!eventData || !eventData.type || !methods[eventData.type]) return;\n    var type = eventData.type,\n      items = eventData.items;\n    var result = methods[type](items);\n    self.postMessage(result);\n  } catch (e) {\n    throw e;\n  }\n};\nvar code = \"\\n   self.onmessage = \".concat(onmessage.toString(), \"\\n\");\nexport { code };","map":{"version":3,"names":["onmessage","e","generateUtils","dot","a","b","getAxes","points","length","vector","start","end","x","y","AB","BC","rotateAtPoint","point","deg","origin","Math","cos","sin","getRectPoints","box","width","height","rotation","getProjection","axis","min","max","scalars","forEach","push","apply","isProjectionOverlap","projection1","projection2","isValidNumber","d","Number","isNaN","Infinity","isValidBox","every","attr","isIntersectRect","box1","box2","margin","intersect","rect1Points","rect2Points","axes","concat","i","hideOverlap","items","boxes","slice","visible","j","methods","eventData","JSON","parse","data","type","result","self","postMessage","code","toString"],"sources":["../../../../../src/geometry/label/layout/worker/hide-overlap.ts"],"sourcesContent":["const onmessage = function (e) {\n  type Item = {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    rotation?: number;\n    visible?: boolean;\n  };\n\n  // Copy from src/util/collision-detect.ts\n  function generateUtils() {\n    type Vec2 = [number, number];\n\n    type Point = { x: number; y: number };\n\n    /**\n     * 定义投影对象\n     */\n    type Projection = { min: number; max: number };\n\n    function dot(a, b) {\n      return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n    }\n    /**\n     * 1. 获取投影轴\n     */\n    function getAxes(points: Point[] /** 多边形的关键点 */): Vec2[] {\n      // 目前先处理 平行矩形 的场景, 其他多边形不处理\n      if (points.length > 4) {\n        return [];\n      }\n      // 获取向量\n      const vector = (start: Point, end: Point): Vec2 => {\n        return [end.x - start.x, end.y - start.y];\n      };\n\n      // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n      const AB = vector(points[0], points[1]);\n      const BC = vector(points[1], points[2]);\n\n      return [AB, BC];\n    }\n\n    /**\n     * 绕指定点顺时针旋转后的点坐标\n     * 默认绕原点旋转\n     */\n    function rotateAtPoint(point: Point, deg = 0, origin = { x: 0, y: 0 }): Point {\n      const { x, y } = point;\n      return {\n        x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n        y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y,\n      };\n    }\n\n    /**\n     * @private\n     * 转化为顶点坐标数组\n     *\n     * @param {Object} box\n     */\n    function getRectPoints(box: Item): Point[] {\n      const points = [\n        { x: box.x, y: box.y },\n        { x: box.x + box.width, y: box.y },\n        { x: box.x + box.width, y: box.y + box.height },\n        { x: box.x, y: box.y + box.height },\n      ];\n\n      const rotation = box.rotation;\n      if (rotation) {\n        return [\n          rotateAtPoint(points[0], rotation, points[0]),\n          rotateAtPoint(points[1], rotation, points[0]),\n          rotateAtPoint(points[2], rotation, points[0]),\n          rotateAtPoint(points[3], rotation, points[0]),\n        ];\n      }\n\n      return points;\n    }\n\n    /**\n     * 2. 获取多边形在投影轴上的投影\n     *\n     * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n     * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n     */\n    function getProjection(points: Point[] /** 多边形的关键点 */, axis: Vec2): Projection {\n      // 目前先处理矩形的场景\n      if (points.length > 4) {\n        return { min: 0, max: 0 };\n      }\n\n      const scalars = [];\n      points.forEach((point) => {\n        scalars.push(dot([point.x, point.y], axis));\n      });\n\n      return { min: Math.min.apply(null, scalars), max: Math.max.apply(null, scalars) };\n    }\n\n    function isProjectionOverlap(projection1: Projection, projection2: Projection): boolean {\n      return projection1.max > projection2.min && projection1.min < projection2.max;\n    }\n\n    function isValidNumber(d: number) {\n      return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n    }\n\n    function isValidBox(box: Item) {\n      return ['x', 'y', 'width', 'height'].every(attr => isValidNumber(box[attr]))\n    }\n\n    function isIntersectRect(box1: Item, box2: Item, margin: number = 0): boolean {\n      return !(\n        box2.x > box1.x + box1.width + margin ||\n        box2.x + box2.width < box1.x - margin ||\n        box2.y > box1.y + box1.height + margin ||\n        box2.y + box2.height < box1.y - margin\n      );\n    }\n    function intersect(box1: Item, box2: Item, margin: number = 0) {\n      if (!isValidBox(box1) || !isValidBox(box2)) return false;\n\n      // Quick detect, if rotation is null or zero.\n      if (!box1.rotation && !box2.rotation) {\n        return isIntersectRect(box1, box2, margin);\n      }\n\n      // 分别获取 4 个关键点\n      const rect1Points = getRectPoints(box1);\n      const rect2Points = getRectPoints(box2);\n\n      // 获取所有投影轴\n      const axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n\n      for (let i = 0; i < axes.length; i++) {\n        const axis = axes[i];\n        const projection1 = getProjection(rect1Points, axis);\n        const projection2 = getProjection(rect2Points, axis);\n\n        if (!isProjectionOverlap(projection1, projection2)) return false;\n      }\n\n      return true;\n    }\n    return { intersect }\n  }\n  const { intersect } = generateUtils();\n\n  // Label layouts.\n  function hideOverlap(items: Item[]) {\n    const boxes = items.slice();\n    for (let i = 0; i < boxes.length; i++) {\n      const box1 = boxes[i];\n      if (box1.visible) {\n        for (let j = i + 1; j < boxes.length; j++) {\n          const box2 = boxes[j];\n          if (box1 !== box2 && box2.visible) {\n            if (intersect(box1, box2)) {\n              box2.visible = false;\n            }\n          }\n        }\n      }\n    }\n    return boxes;\n  }\n\n  const methods = {\n    'hide-overlap': hideOverlap,\n  }\n\n  // Main\n  try {\n    const eventData = JSON.parse(e.data);\n    if (!eventData || !eventData.type || !methods[eventData.type]) return;\n\n    const { type, items } = eventData;\n    const result = methods[type](items);\n    self.postMessage(result);\n  } catch (e) {\n    throw e;\n  }\n}\n\nconst code = `\n   self.onmessage = ${onmessage.toString()}\n`\nexport { code };\n"],"mappings":";AAAA,IAAMA,SAAS,GAAG,SAAAA,CAAUC,CAAC;EAU3B;EACA,SAASC,aAAaA,CAAA;IAUpB,SAASC,GAAGA,CAACC,CAAC,EAAEC,CAAC;MACf,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAKC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAKC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAKC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1F;IACA;;;IAGA,SAASC,OAAOA,CAACC,MAAe,CAAC,gBAAc;MAC7C;MACA,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAO,EAAE;;MAEX;MACA,IAAMC,MAAM,GAAG,SAAAA,CAACC,KAAY,EAAEC,GAAU;QACtC,OAAO,CAACA,GAAG,CAACC,CAAC,GAAGF,KAAK,CAACE,CAAC,EAAED,GAAG,CAACE,CAAC,GAAGH,KAAK,CAACG,CAAC,CAAC;MAC3C,CAAC;MAED;MACA,IAAMC,EAAE,GAAGL,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;MACvC,IAAMQ,EAAE,GAAGN,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;MAEvC,OAAO,CAACO,EAAE,EAAEC,EAAE,CAAC;IACjB;IAEA;;;;IAIA,SAASC,aAAaA,CAACC,KAAY,EAAEC,GAAO,EAAEC,MAAuB;MAAhC,IAAAD,GAAA;QAAAA,GAAA,IAAO;MAAA;MAAE,IAAAC,MAAA;QAAAA,MAAA;UAAWP,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAC,CAAE;MAAA;MAC3D,IAAAD,CAAC,GAAQK,KAAK,CAAAL,CAAb;QAAEC,CAAC,GAAKI,KAAK,CAAAJ,CAAV;MACZ,OAAO;QACLD,CAAC,EAAE,CAACA,CAAC,GAAGO,MAAM,CAACP,CAAC,IAAIQ,IAAI,CAACC,GAAG,CAAC,CAACH,GAAG,CAAC,GAAG,CAACL,CAAC,GAAGM,MAAM,CAACN,CAAC,IAAIO,IAAI,CAACE,GAAG,CAAC,CAACJ,GAAG,CAAC,GAAGC,MAAM,CAACP,CAAC;QAC/EC,CAAC,EAAE,CAACM,MAAM,CAACP,CAAC,GAAGA,CAAC,IAAIQ,IAAI,CAACE,GAAG,CAAC,CAACJ,GAAG,CAAC,GAAG,CAACL,CAAC,GAAGM,MAAM,CAACN,CAAC,IAAIO,IAAI,CAACC,GAAG,CAAC,CAACH,GAAG,CAAC,GAAGC,MAAM,CAACN;OAC/E;IACH;IAEA;;;;;;IAMA,SAASU,aAAaA,CAACC,GAAS;MAC9B,IAAMjB,MAAM,GAAG,CACb;QAAEK,CAAC,EAAEY,GAAG,CAACZ,CAAC;QAAEC,CAAC,EAAEW,GAAG,CAACX;MAAC,CAAE,EACtB;QAAED,CAAC,EAAEY,GAAG,CAACZ,CAAC,GAAGY,GAAG,CAACC,KAAK;QAAEZ,CAAC,EAAEW,GAAG,CAACX;MAAC,CAAE,EAClC;QAAED,CAAC,EAAEY,GAAG,CAACZ,CAAC,GAAGY,GAAG,CAACC,KAAK;QAAEZ,CAAC,EAAEW,GAAG,CAACX,CAAC,GAAGW,GAAG,CAACE;MAAM,CAAE,EAC/C;QAAEd,CAAC,EAAEY,GAAG,CAACZ,CAAC;QAAEC,CAAC,EAAEW,GAAG,CAACX,CAAC,GAAGW,GAAG,CAACE;MAAM,CAAE,CACpC;MAED,IAAMC,QAAQ,GAAGH,GAAG,CAACG,QAAQ;MAC7B,IAAIA,QAAQ,EAAE;QACZ,OAAO,CACLX,aAAa,CAACT,MAAM,CAAC,CAAC,CAAC,EAAEoB,QAAQ,EAAEpB,MAAM,CAAC,CAAC,CAAC,CAAC,EAC7CS,aAAa,CAACT,MAAM,CAAC,CAAC,CAAC,EAAEoB,QAAQ,EAAEpB,MAAM,CAAC,CAAC,CAAC,CAAC,EAC7CS,aAAa,CAACT,MAAM,CAAC,CAAC,CAAC,EAAEoB,QAAQ,EAAEpB,MAAM,CAAC,CAAC,CAAC,CAAC,EAC7CS,aAAa,CAACT,MAAM,CAAC,CAAC,CAAC,EAAEoB,QAAQ,EAAEpB,MAAM,CAAC,CAAC,CAAC,CAAC,CAC9C;;MAGH,OAAOA,MAAM;IACf;IAEA;;;;;;IAMA,SAASqB,aAAaA,CAACrB,MAAe,CAAC,gBAAgBsB,IAAU;MAC/D;MACA,IAAItB,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAO;UAAEsB,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAC,CAAE;;MAG3B,IAAMC,OAAO,GAAG,EAAE;MAClBzB,MAAM,CAAC0B,OAAO,CAAC,UAAChB,KAAK;QACnBe,OAAO,CAACE,IAAI,CAAC/B,GAAG,CAAC,CAACc,KAAK,CAACL,CAAC,EAAEK,KAAK,CAACJ,CAAC,CAAC,EAAEgB,IAAI,CAAC,CAAC;MAC7C,CAAC,CAAC;MAEF,OAAO;QAAEC,GAAG,EAAEV,IAAI,CAACU,GAAG,CAACK,KAAK,CAAC,IAAI,EAAEH,OAAO,CAAC;QAAED,GAAG,EAAEX,IAAI,CAACW,GAAG,CAACI,KAAK,CAAC,IAAI,EAAEH,OAAO;MAAC,CAAE;IACnF;IAEA,SAASI,mBAAmBA,CAACC,WAAuB,EAAEC,WAAuB;MAC3E,OAAOD,WAAW,CAACN,GAAG,GAAGO,WAAW,CAACR,GAAG,IAAIO,WAAW,CAACP,GAAG,GAAGQ,WAAW,CAACP,GAAG;IAC/E;IAEA,SAASQ,aAAaA,CAACC,CAAS;MAC9B,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,CAAC,CAAC,IAAIA,CAAC,KAAKG,QAAQ,IAAIH,CAAC,KAAK,CAACG,QAAQ;IACvF;IAEA,SAASC,UAAUA,CAACpB,GAAS;MAC3B,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAACqB,KAAK,CAAC,UAAAC,IAAI;QAAI,OAAAP,aAAa,CAACf,GAAG,CAACsB,IAAI,CAAC,CAAC;MAAxB,CAAwB,CAAC;IAC9E;IAEA,SAASC,eAAeA,CAACC,IAAU,EAAEC,IAAU,EAAEC,MAAkB;MAAlB,IAAAA,MAAA;QAAAA,MAAA,IAAkB;MAAA;MACjE,OAAO,EACLD,IAAI,CAACrC,CAAC,GAAGoC,IAAI,CAACpC,CAAC,GAAGoC,IAAI,CAACvB,KAAK,GAAGyB,MAAM,IACrCD,IAAI,CAACrC,CAAC,GAAGqC,IAAI,CAACxB,KAAK,GAAGuB,IAAI,CAACpC,CAAC,GAAGsC,MAAM,IACrCD,IAAI,CAACpC,CAAC,GAAGmC,IAAI,CAACnC,CAAC,GAAGmC,IAAI,CAACtB,MAAM,GAAGwB,MAAM,IACtCD,IAAI,CAACpC,CAAC,GAAGoC,IAAI,CAACvB,MAAM,GAAGsB,IAAI,CAACnC,CAAC,GAAGqC,MAAM,CACvC;IACH;IACA,SAASC,SAASA,CAACH,IAAU,EAAEC,IAAU,EAAEC,MAAkB;MAAlB,IAAAA,MAAA;QAAAA,MAAA,IAAkB;MAAA;MAC3D,IAAI,CAACN,UAAU,CAACI,IAAI,CAAC,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAC,EAAE,OAAO,KAAK;MAExD;MACA,IAAI,CAACD,IAAI,CAACrB,QAAQ,IAAI,CAACsB,IAAI,CAACtB,QAAQ,EAAE;QACpC,OAAOoB,eAAe,CAACC,IAAI,EAAEC,IAAI,EAAEC,MAAM,CAAC;;MAG5C;MACA,IAAME,WAAW,GAAG7B,aAAa,CAACyB,IAAI,CAAC;MACvC,IAAMK,WAAW,GAAG9B,aAAa,CAAC0B,IAAI,CAAC;MAEvC;MACA,IAAMK,IAAI,GAAGhD,OAAO,CAAC8C,WAAW,CAAC,CAACG,MAAM,CAACjD,OAAO,CAAC+C,WAAW,CAAC,CAAC;MAE9D,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAAC9C,MAAM,EAAEgD,CAAC,EAAE,EAAE;QACpC,IAAM3B,IAAI,GAAGyB,IAAI,CAACE,CAAC,CAAC;QACpB,IAAMnB,WAAW,GAAGT,aAAa,CAACwB,WAAW,EAAEvB,IAAI,CAAC;QACpD,IAAMS,WAAW,GAAGV,aAAa,CAACyB,WAAW,EAAExB,IAAI,CAAC;QAEpD,IAAI,CAACO,mBAAmB,CAACC,WAAW,EAAEC,WAAW,CAAC,EAAE,OAAO,KAAK;;MAGlE,OAAO,IAAI;IACb;IACA,OAAO;MAAEa,SAAS,EAAAA;IAAA,CAAE;EACtB;EACQ,IAAAA,SAAS,GAAKjD,aAAa,EAAE,CAAAiD,SAApB;EAEjB;EACA,SAASM,WAAWA,CAACC,KAAa;IAChC,IAAMC,KAAK,GAAGD,KAAK,CAACE,KAAK,EAAE;IAC3B,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,KAAK,CAACnD,MAAM,EAAEgD,CAAC,EAAE,EAAE;MACrC,IAAMR,IAAI,GAAGW,KAAK,CAACH,CAAC,CAAC;MACrB,IAAIR,IAAI,CAACa,OAAO,EAAE;QAChB,KAAK,IAAIC,CAAC,GAAGN,CAAC,GAAG,CAAC,EAAEM,CAAC,GAAGH,KAAK,CAACnD,MAAM,EAAEsD,CAAC,EAAE,EAAE;UACzC,IAAMb,IAAI,GAAGU,KAAK,CAACG,CAAC,CAAC;UACrB,IAAId,IAAI,KAAKC,IAAI,IAAIA,IAAI,CAACY,OAAO,EAAE;YACjC,IAAIV,SAAS,CAACH,IAAI,EAAEC,IAAI,CAAC,EAAE;cACzBA,IAAI,CAACY,OAAO,GAAG,KAAK;;;;;;IAM9B,OAAOF,KAAK;EACd;EAEA,IAAMI,OAAO,GAAG;IACd,cAAc,EAAEN;GACjB;EAED;EACA,IAAI;IACF,IAAMO,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACjE,CAAC,CAACkE,IAAI,CAAC;IACpC,IAAI,CAACH,SAAS,IAAI,CAACA,SAAS,CAACI,IAAI,IAAI,CAACL,OAAO,CAACC,SAAS,CAACI,IAAI,CAAC,EAAE;IAEvD,IAAAA,IAAI,GAAYJ,SAAS,CAAAI,IAArB;MAAEV,KAAK,GAAKM,SAAS,CAAAN,KAAd;IACnB,IAAMW,MAAM,GAAGN,OAAO,CAACK,IAAI,CAAC,CAACV,KAAK,CAAC;IACnCY,IAAI,CAACC,WAAW,CAACF,MAAM,CAAC;GACzB,CAAC,OAAOpE,CAAC,EAAE;IACV,MAAMA,CAAC;;AAEX,CAAC;AAED,IAAMuE,IAAI,GAAG,yBAAAjB,MAAA,CACSvD,SAAS,CAACyE,QAAQ,EAAE,OACzC;AACD,SAASD,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}