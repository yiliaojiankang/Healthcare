{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __values } from \"tslib\";\nimport { isObject, each, find, get } from '@antv/util';\nimport { polarToCartesian } from '../../../../util/graphics';\n/** label text和line距离 4px */\nvar MARGIN = 4;\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  var e_1, _a;\n  // adjust y position of labels to avoid overlapping\n  var overlapping = true;\n  var start = plotRange.start;\n  var end = plotRange.end;\n  var startY = Math.min(start.y, end.y);\n  var totalHeight = Math.abs(start.y - end.y);\n  var i;\n  var maxY = 0;\n  var minY = Number.MIN_VALUE;\n  var boxes = labels.map(function (label) {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n    if (label.y < minY) {\n      minY = label.y;\n    }\n    return {\n      size: lineHeight,\n      targets: [label.y - startY]\n    };\n  });\n  minY -= startY;\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach(function (box) {\n      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n      // box.pos = Math.max(0, target - box.size / 2);\n    });\n    // detect overlapping and join boxes\n    overlapping = false;\n    i = boxes.length;\n    while (i--) {\n      if (i > 0) {\n        var previousBox = boxes[i - 1];\n        var box = boxes[i];\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets);\n          // overflow, shift up\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n          boxes.splice(i, 1); // removing box\n          overlapping = true;\n        }\n      }\n    }\n  }\n  i = 0;\n  // step 4: normalize y and adjust x\n  boxes.forEach(function (b) {\n    var posInCompositeBox = startY + lineHeight / 2; // middle of the label\n    b.targets.forEach(function () {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n  var labelsMap = {};\n  try {\n    for (var labelShapes_1 = __values(labelShapes), labelShapes_1_1 = labelShapes_1.next(); !labelShapes_1_1.done; labelShapes_1_1 = labelShapes_1.next()) {\n      var labelShape = labelShapes_1_1.value;\n      labelsMap[labelShape.get('id')] = labelShape;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (labelShapes_1_1 && !labelShapes_1_1.done && (_a = labelShapes_1.return)) _a.call(labelShapes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  // (x - cx)^2 + (y - cy)^2 = totalR^2\n  labels.forEach(function (label) {\n    var rPow2 = label.r * label.r;\n    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      var dx = Math.sqrt(rPow2 - dyPow2);\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n    // adjust labelShape\n    var labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y);\n    // because group could not effect text-shape, should set text-shape position manually\n    var textShape = find(labelShape.getChildren(), function (ele) {\n      return ele.get('type') === 'text';\n    });\n    // @ts-ignore\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\nexport function distribute(items, labels, shapes, region) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n  var offset = items[0] ? items[0].offset : 0;\n  var coordinate = labels[0].get('coordinate');\n  var radius = coordinate.getRadius();\n  var center = coordinate.getCenter();\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    var lineHeight_1 = 14; // TODO\n    var totalR = radius + offset;\n    var totalHeight_1 = totalR * 2 + lineHeight_1 * 2;\n    var plotRange_1 = {\n      start: coordinate.start,\n      end: coordinate.end\n    };\n    // step 1: separate labels\n    var halves_1 = [[], [] // right\n    ];\n\n    items.forEach(function (labelItem) {\n      if (!labelItem) {\n        return;\n      }\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves_1[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves_1[1].push(labelItem);\n      }\n    });\n    halves_1.forEach(function (half, index) {\n      // step 2: reduce labels\n      var maxLabelsCountForOneSide = totalHeight_1 / lineHeight_1;\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort(function (a, b) {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      }\n      // step 3: distribute position (x and y)\n      half.sort(function (a, b) {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n      antiCollision(labels, half, lineHeight_1, plotRange_1, center, index);\n    });\n  }\n  // 配置 labelLine\n  each(items, function (item) {\n    if (item && item.labelLine) {\n      var distance = item.offset;\n      var angle = item.angle;\n      // 贴近圆周\n      var startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      var innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      var itemX = item.x + get(item, 'offsetX', 0);\n      var itemY = item.y + get(item, 'offsetY', 0);\n      var endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN\n      };\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n      item.labelLine.path = [\"M \".concat(startPoint.x), \"\".concat(startPoint.y, \" Q\").concat(innerPoint.x), \"\".concat(innerPoint.y, \" \").concat(endPoint.x), endPoint.y].join(',');\n    }\n  });\n}","map":{"version":3,"names":["isObject","each","find","get","polarToCartesian","MARGIN","antiCollision","labelShapes","labels","lineHeight","plotRange","center","isRight","overlapping","start","end","startY","Math","min","y","totalHeight","abs","i","maxY","minY","Number","MIN_VALUE","boxes","map","label","size","targets","forEach","box","target","apply","max","pos","length","previousBox","concat","splice","b","posInCompositeBox","labelsMap","labelShapes_1","__values","labelShapes_1_1","next","done","labelShape","value","rPow2","r","dyPow2","pow","x","dx","sqrt","id","attr","textShape","getChildren","ele","distribute","items","shapes","region","offset","coordinate","radius","getRadius","getCenter","lineHeight_1","totalR","totalHeight_1","plotRange_1","halves_1","labelItem","textAlign","push","half","index","maxLabelsCountForOneSide","sort","a","item","labelLine","distance","angle","startPoint","innerPoint","itemX","itemY","endPoint","cos","sin","path","join"],"sources":["../../../../../src/geometry/label/layout/pie/distribute.ts"],"sourcesContent":["import { isObject, each, find, get } from '@antv/util';\n\nimport { BBox, IGroup, IShape } from '../../../../dependents';\nimport { LabelItem } from '../../interface';\n\nimport { polarToCartesian } from '../../../../util/graphics';\nimport { IElement } from '@antv/g-base';\n\n/** label text和line距离 4px */\nconst MARGIN = 4;\n\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  let overlapping = true;\n  const start = plotRange.start;\n  const end = plotRange.end;\n  const startY = Math.min(start.y, end.y);\n  let totalHeight = Math.abs(start.y - end.y);\n  let i;\n\n  let maxY = 0;\n  let minY = Number.MIN_VALUE;\n  const boxes = labels.map((label) => {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n    if (label.y < minY) {\n      minY = label.y;\n    }\n    return {\n      size: lineHeight,\n      targets: [label.y - startY],\n    };\n  });\n  minY -= startY;\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach((box) => {\n      const target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n      // box.pos = Math.max(0, target - box.size / 2);\n    });\n\n    // detect overlapping and join boxes\n    overlapping = false;\n    i = boxes.length;\n    while (i--) {\n      if (i > 0) {\n        const previousBox = boxes[i - 1];\n        const box = boxes[i];\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets);\n\n          // overflow, shift up\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n          boxes.splice(i, 1); // removing box\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0;\n  // step 4: normalize y and adjust x\n  boxes.forEach((b) => {\n    let posInCompositeBox = startY + lineHeight / 2; // middle of the label\n    b.targets.forEach(() => {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n\n  const labelsMap = {};\n  for (const labelShape of labelShapes) {\n    labelsMap[labelShape.get('id')] = labelShape;\n  }\n\n  // (x - cx)^2 + (y - cy)^2 = totalR^2\n  labels.forEach((label) => {\n    const rPow2 = label.r * label.r;\n    const dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      const dx = Math.sqrt(rPow2 - dyPow2);\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n\n    // adjust labelShape\n    const labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y);\n\n    // because group could not effect text-shape, should set text-shape position manually\n    const textShape = find(labelShape.getChildren(), (ele) => ele.get('type') === 'text') as IElement;\n    // @ts-ignore\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\n\nexport function distribute(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[], region: BBox) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n  const offset = items[0] ? items[0].offset : 0;\n  const coordinate = labels[0].get('coordinate');\n  const radius = coordinate.getRadius();\n  const center = coordinate.getCenter();\n\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    const lineHeight = 14; // TODO\n    const totalR = radius + offset;\n    const totalHeight = totalR * 2 + lineHeight * 2;\n    const plotRange = {\n      start: coordinate.start,\n      end: coordinate.end,\n    };\n\n    // step 1: separate labels\n    const halves = [\n      [], // left\n      [], // right\n    ];\n    items.forEach((labelItem) => {\n      if (!labelItem) {\n        return;\n      }\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves[1].push(labelItem);\n      }\n    });\n\n    halves.forEach((half, index) => {\n      // step 2: reduce labels\n      const maxLabelsCountForOneSide = totalHeight / lineHeight;\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort((a, b) => {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      }\n\n      // step 3: distribute position (x and y)\n      half.sort((a, b) => {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n\n      antiCollision(labels, half, lineHeight, plotRange, center, index);\n    });\n  }\n\n  // 配置 labelLine\n  each(items, (item) => {\n    if (item && item.labelLine) {\n      const distance = item.offset;\n      const angle = item.angle;\n      // 贴近圆周\n      const startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      const innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      const itemX = item.x + get(item, 'offsetX', 0);\n      const itemY = item.y + get(item, 'offsetY', 0);\n      const endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN,\n      };\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n      item.labelLine.path = [\n        `M ${startPoint.x}`,\n        `${startPoint.y} Q${innerPoint.x}`,\n        `${innerPoint.y} ${endPoint.x}`,\n        endPoint.y,\n      ].join(',');\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}