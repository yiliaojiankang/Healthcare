{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: \"\".concat(this.type, \"-keyShape\"),\n      draggable: true\n    });\n    return keyShape;\n  },\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    // 如果设置了color，则覆盖默认的stroke属性\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer();\n    // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    }\n    // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    };\n    // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false, updateType);\n  }\n}, 'single-node');","map":{"version":3,"names":["__assign","mix","Global","Shape","registerNode","options","size","style","radius","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","anchorPoints","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","concat","type","name","draggable","defaultStyle","mergeStyle","getOptions","strokeStyle","color","getSize","width","height","styles","x","y","update","item","updateType","getContainer","get","attr","updateShape"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/element/nodes/simple-rect.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: \"\".concat(this.type, \"-keyShape\"),\n      draggable: true\n    });\n    return keyShape;\n  },\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    // 如果设置了color，则覆盖默认的stroke属性\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer();\n    // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    }\n    // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    };\n    // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false, updateType);\n  }\n}, 'single-node');"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}