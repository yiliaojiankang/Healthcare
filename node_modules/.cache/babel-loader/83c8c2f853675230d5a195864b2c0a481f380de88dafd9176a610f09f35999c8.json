{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nimport { LineTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/wall/wall_frag.glsl' */\nvar line_frag = \"#define Animate 0.0\\n#define LineTexture 1.0\\n\\n// line texture\\n\\nuniform sampler2D u_texture;\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_icon_step: 100;\\n  float u_heightfixed;\\n  float u_linearColor: 0;\\n  float u_line_texture;\\n  float u_textureBlend;\\n  float u_iconStepCount;\\n  float u_time;\\n};\\nin vec2 v_iconMapUV;\\nin float v_blur;\\nin float v_radio;\\nin vec4 v_color;\\nin vec4 v_dataset;\\n\\nout vec4 outputColor;\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = v_dataset.r; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float v = v_dataset.a;\\n\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    outputColor = mix(u_sourceColor, u_targetColor, v);\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n     outputColor = v_color;\\n  }\\n\\n  outputColor.a *= v_color.a; // \\u5168\\u5C40\\u900F\\u660E\\u5EA6\\n  if(u_animate.x == Animate) {\\n      animateSpeed = u_time / u_animate.y;\\n       float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + animateSpeed);\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      alpha = smoothstep(0., 1., alpha);\\n      outputColor.a *= alpha;\\n  }\\n\\n  if(u_line_texture == LineTexture) { // while load texture\\n    float aDistance = v_dataset.g;      // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n    float d_texPixelLen = v_dataset.b;  // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n    float u = fract(mod(aDistance, d_texPixelLen)/d_texPixelLen - animateSpeed);\\n    float v = v_dataset.a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    // \\u8BA1\\u7B97\\u7EB9\\u7406\\u95F4\\u9694 start\\n    float flag = 0.0;\\n    if(u > 1.0/u_iconStepCount) {\\n      flag = 1.0;\\n    }\\n    u = fract(u*u_iconStepCount);\\n    // \\u8BA1\\u7B97\\u7EB9\\u7406\\u95F4\\u9694 end\\n\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    // Tip: \\u5224\\u65AD\\u7EB9\\u7406\\u95F4\\u9694\\n    if(flag > 0.0) {\\n      pattern = vec4(0.0);\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        outputColor = filterColor(pattern);\\n    }\\n  }\\n  \\n\\n  // blur - AA\\n  if(v < v_blur) {\\n    outputColor.a = mix(0.0, outputColor.a, v/v_blur);\\n  } else if(v > 1.0 - v_blur) {\\n    outputColor.a = mix(outputColor.a, 0.0, (v - (1.0 - v_blur))/v_blur);\\n  }\\n\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/wall/wall_vert.glsl' */\nvar line_vert = \"#define Animate 0.0\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in vec2 a_Size;\\nlayout(location = 10) in float a_Miter;\\nlayout(location = 11) in float a_Total_Distance;\\nlayout(location = 12) in vec4 a_Instance;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec2 a_iconMapUV;\\nlayout(location = 15) in float a_Distance;\\n\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_icon_step: 100;\\n  float u_heightfixed;\\n  float u_linearColor: 0;\\n  float u_line_texture;\\n  float u_textureBlend;\\n  float u_iconStepCount;\\n  float u_time;\\n};\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\n// texV \\u7EBF\\u56FE\\u5C42 - \\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\uFF08\\u7EBF\\u7684\\u5BBD\\u5EA6\\u65B9\\u5411\\uFF09\\nout vec2 v_iconMapUV;\\nout vec4 v_color;\\nout float v_blur;\\nout float v_radio;\\nout vec4 v_dataset;\\n\\nvoid main() {\\n\\n\\n  float d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n\\n  v_iconMapUV = a_iconMapUV;\\n  if(u_heightfixed < 1.0) {     // \\u9AD8\\u5EA6\\u968F zoom \\u8C03\\u6574\\n    d_texPixelLen = project_pixel(u_icon_step);\\n  } else {\\n    d_texPixelLen = u_icon_step;\\n  }\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\\n    d_texPixelLen *= 10.0;\\n  }\\n\\n  if(u_animate.x == Animate || u_linearColor == 1.0) {\\n      d_distance_ratio = a_Distance / a_Total_Distance;\\n  }\\n\\n  float miter = (a_Miter + 1.0)/2.0;\\n  // \\u8BBE\\u7F6E\\u6570\\u636E\\u96C6\\u7684\\u53C2\\u6570\\n  v_dataset[0] = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  v_dataset[1] = a_Distance;       // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n  v_dataset[2] = d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n  v_dataset[3] = miter;          // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C 0 - 1\\n\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\\n\\n  float originSize = a_Size.x;  // \\u56FA\\u5B9A\\u9AD8\\u5EA6\\n  if(u_heightfixed < 1.0) {    \\n     originSize = project_float_meter(a_Size.x); // \\u9AD8\\u5EA6\\u968F zoom \\u8C03\\u6574\\n  }\\n\\n\\n  float wallHeight = originSize * miter;\\n  float lightWeight = calc_lighting(vec4(project_pos.xy, wallHeight, 1.0));\\n\\n  v_blur = min(project_float_pixel(2.0) / originSize, 0.05);\\n  v_color = vec4(a_Color.rgb * lightWeight, a_Color.w * opacity);\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xy, wallHeight, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy, wallHeight, 1.0));\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar LineWallModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(LineWallModel, _BaseModel);\n  var _super = _createSuper(LineWallModel);\n  function LineWallModel() {\n    var _this;\n    _classCallCheck(this, LineWallModel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n        _this.layer.render();\n        return;\n      }\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n      _this.textures = [_this.texture];\n    });\n    return _this;\n  }\n  _createClass(LineWallModel, [{\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        sourceColor = _ref.sourceColor,\n        targetColor = _ref.targetColor,\n        _ref$textureBlend = _ref.textureBlend,\n        textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n        _ref$heightfixed = _ref.heightfixed,\n        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,\n        _ref$lineTexture = _ref.lineTexture,\n        lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n        _ref$iconStep = _ref.iconStep,\n        iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n        _ref$iconStepCount = _ref.iconStepCount,\n        iconStepCount = _ref$iconStepCount === void 0 ? 1 : _ref$iconStepCount;\n      var _ref2 = this.layer.getLayerConfig(),\n        animateOption = _ref2.animateOption;\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      // 转化渐变色\n      var useLinearColor = 0; // 默认不生效\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n      var commonOptions = {\n        u_animate: this.animateOption2Array(animateOption),\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_icon_step: iconStep,\n        u_heightfixed: Number(heightfixed),\n        // 渐变色支持参数\n        u_linearColor: useLinearColor,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        // 传入线的标识\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        u_iconStepCount: iconStepCount,\n        u_time: this.layer.getLayerAnimateTime() || 0\n      };\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n    // public getAnimateUniforms(): IModelUniform {\n    //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    //   return {\n    //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n    //     u_time: this.layer.getLayerAnimateTime(),\n    //   };\n    // }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.initUniformsBuffer();\n              this.updateTexture();\n              this.iconService.on('imageUpdate', this.updateTexture);\n              return _context.abrupt(\"return\", this.buildModels());\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.layer.buildLayerModel({\n                moduleName: 'lineWall',\n                vertexShader: line_vert,\n                fragmentShader: line_frag,\n                triangulation: LineTriangulation,\n                inject: this.getInject(),\n                depth: {\n                  enable: false\n                },\n                blend: this.getBlend()\n              });\n            case 2:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Distance',\n          shaderLocation: 15,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'total_distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Total_Distance',\n          shaderLocation: 11,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[5]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];\n          }\n        }\n      });\n\n      // point layer size;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          // @ts-ignore\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'miter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Miter',\n          shaderLocation: 10,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          shaderLocation: 14,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature) {\n            var iconMap = _this2.iconService.getIconMap();\n            var texture = feature.texture;\n            var _ref3 = iconMap[texture] || {\n                x: 0,\n                y: 0\n              },\n              x = _ref3.x,\n              y = _ref3.y;\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n  return LineWallModel;\n}(BaseModel);\nexport { LineWallModel as default };","map":{"version":3,"names":["_asyncToGenerator","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_regeneratorRuntime","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AttributeType","gl","rgb2arr","BaseModel","ShaderLocation","LineTriangulation","line_frag","line_vert","LineWallModel","_BaseModel","_super","_this","_len","length","args","Array","_key","concat","createTexture2D","rendererService","texture","update","data","iconService","getCanvas","layer","render","mag","NEAREST","min","premultiplyAlpha","width","height","canvasHeight","textures","key","value","getCommonUniformsInfo","_ref","getLayerConfig","sourceColor","targetColor","_ref$textureBlend","textureBlend","_ref$heightfixed","heightfixed","_ref$lineTexture","lineTexture","_ref$iconStep","iconStep","_ref$iconStepCount","iconStepCount","_ref2","animateOption","getDirty","bind","useLinearColor","sourceColorArr","targetColorArr","commonOptions","u_animate","animateOption2Array","u_sourceColor","u_targetColor","u_textSize","u_icon_step","u_heightfixed","Number","u_linearColor","u_line_texture","u_textureBlend","u_iconStepCount","u_time","getLayerAnimateTime","commonBufferInfo","getUniformsBufferInfo","_initModels","mark","_callee","wrap","_callee$","_context","prev","next","initUniformsBuffer","updateTexture","on","abrupt","buildModels","stop","initModels","clearModels","_this$texture","destroy","off","_buildModels","_callee2","model","_callee2$","_context2","buildLayerModel","moduleName","vertexShader","fragmentShader","triangulation","inject","getInject","depth","enable","blend","getBlend","sent","registerBuiltinAttributes","_this2","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","usage","STATIC_DRAW","FLOAT","size","feature","featureIdx","vertex","SIZE","DYNAMIC_DRAW","_feature$size","isArray","NORMAL","attributeIdx","normal","iconMap","getIconMap","_ref3","x","y","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/line/models/wall.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from \"../../core/BaseModel\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\nimport { LineTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/wall/wall_frag.glsl' */\nvar line_frag = \"#define Animate 0.0\\n#define LineTexture 1.0\\n\\n// line texture\\n\\nuniform sampler2D u_texture;\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_icon_step: 100;\\n  float u_heightfixed;\\n  float u_linearColor: 0;\\n  float u_line_texture;\\n  float u_textureBlend;\\n  float u_iconStepCount;\\n  float u_time;\\n};\\nin vec2 v_iconMapUV;\\nin float v_blur;\\nin float v_radio;\\nin vec4 v_color;\\nin vec4 v_dataset;\\n\\nout vec4 outputColor;\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = v_dataset.r; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float v = v_dataset.a;\\n\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    outputColor = mix(u_sourceColor, u_targetColor, v);\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n     outputColor = v_color;\\n  }\\n\\n  outputColor.a *= v_color.a; // \\u5168\\u5C40\\u900F\\u660E\\u5EA6\\n  if(u_animate.x == Animate) {\\n      animateSpeed = u_time / u_animate.y;\\n       float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + animateSpeed);\\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\\n      alpha = smoothstep(0., 1., alpha);\\n      outputColor.a *= alpha;\\n  }\\n\\n  if(u_line_texture == LineTexture) { // while load texture\\n    float aDistance = v_dataset.g;      // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n    float d_texPixelLen = v_dataset.b;  // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n    float u = fract(mod(aDistance, d_texPixelLen)/d_texPixelLen - animateSpeed);\\n    float v = v_dataset.a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    // \\u8BA1\\u7B97\\u7EB9\\u7406\\u95F4\\u9694 start\\n    float flag = 0.0;\\n    if(u > 1.0/u_iconStepCount) {\\n      flag = 1.0;\\n    }\\n    u = fract(u*u_iconStepCount);\\n    // \\u8BA1\\u7B97\\u7EB9\\u7406\\u95F4\\u9694 end\\n\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\\n\\n    // Tip: \\u5224\\u65AD\\u7EB9\\u7406\\u95F4\\u9694\\n    if(flag > 0.0) {\\n      pattern = vec4(0.0);\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      outputColor = filterColor(outputColor + pattern);\\n    } else { // replace\\n        pattern.a *= v_color.a;\\n        if(outputColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        outputColor = filterColor(pattern);\\n    }\\n  }\\n  \\n\\n  // blur - AA\\n  if(v < v_blur) {\\n    outputColor.a = mix(0.0, outputColor.a, v/v_blur);\\n  } else if(v > 1.0 - v_blur) {\\n    outputColor.a = mix(outputColor.a, 0.0, (v - (1.0 - v_blur))/v_blur);\\n  }\\n\\n  outputColor = filterColor(outputColor);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/wall/wall_vert.glsl' */\nvar line_vert = \"#define Animate 0.0\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 1) in vec4 a_Color;\\nlayout(location = 9) in vec2 a_Size;\\nlayout(location = 10) in float a_Miter;\\nlayout(location = 11) in float a_Total_Distance;\\nlayout(location = 12) in vec4 a_Instance;\\nlayout(location = 13) in vec3 a_Normal;\\nlayout(location = 14) in vec2 a_iconMapUV;\\nlayout(location = 15) in float a_Distance;\\n\\n\\nlayout(std140) uniform commonUniorm {\\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\\n  vec4 u_sourceColor;\\n  vec4 u_targetColor;\\n  vec2 u_textSize;\\n  float u_icon_step: 100;\\n  float u_heightfixed;\\n  float u_linearColor: 0;\\n  float u_line_texture;\\n  float u_textureBlend;\\n  float u_iconStepCount;\\n  float u_time;\\n};\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\n// texV \\u7EBF\\u56FE\\u5C42 - \\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\uFF08\\u7EBF\\u7684\\u5BBD\\u5EA6\\u65B9\\u5411\\uFF09\\nout vec2 v_iconMapUV;\\nout vec4 v_color;\\nout float v_blur;\\nout float v_radio;\\nout vec4 v_dataset;\\n\\nvoid main() {\\n\\n\\n  float d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n\\n  v_iconMapUV = a_iconMapUV;\\n  if(u_heightfixed < 1.0) {     // \\u9AD8\\u5EA6\\u968F zoom \\u8C03\\u6574\\n    d_texPixelLen = project_pixel(u_icon_step);\\n  } else {\\n    d_texPixelLen = u_icon_step;\\n  }\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\\n    d_texPixelLen *= 10.0;\\n  }\\n\\n  if(u_animate.x == Animate || u_linearColor == 1.0) {\\n      d_distance_ratio = a_Distance / a_Total_Distance;\\n  }\\n\\n  float miter = (a_Miter + 1.0)/2.0;\\n  // \\u8BBE\\u7F6E\\u6570\\u636E\\u96C6\\u7684\\u53C2\\u6570\\n  v_dataset[0] = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  v_dataset[1] = a_Distance;       // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n  v_dataset[2] = d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n  v_dataset[3] = miter;          // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C 0 - 1\\n\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\\n\\n  float originSize = a_Size.x;  // \\u56FA\\u5B9A\\u9AD8\\u5EA6\\n  if(u_heightfixed < 1.0) {    \\n     originSize = project_float_meter(a_Size.x); // \\u9AD8\\u5EA6\\u968F zoom \\u8C03\\u6574\\n  }\\n\\n\\n  float wallHeight = originSize * miter;\\n  float lightWeight = calc_lighting(vec4(project_pos.xy, wallHeight, 1.0));\\n\\n  v_blur = min(project_float_pixel(2.0) / originSize, 0.05);\\n  v_color = vec4(a_Color.rgb * lightWeight, a_Color.w * opacity);\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xy, wallHeight, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy, wallHeight, 1.0));\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar LineWallModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(LineWallModel, _BaseModel);\n  var _super = _createSuper(LineWallModel);\n  function LineWallModel() {\n    var _this;\n    _classCallCheck(this, LineWallModel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n        _this.layer.render();\n        return;\n      }\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n      _this.textures = [_this.texture];\n    });\n    return _this;\n  }\n  _createClass(LineWallModel, [{\n    key: \"getCommonUniformsInfo\",\n    value: function getCommonUniformsInfo() {\n      var _ref = this.layer.getLayerConfig(),\n        sourceColor = _ref.sourceColor,\n        targetColor = _ref.targetColor,\n        _ref$textureBlend = _ref.textureBlend,\n        textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n        _ref$heightfixed = _ref.heightfixed,\n        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,\n        _ref$lineTexture = _ref.lineTexture,\n        lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n        _ref$iconStep = _ref.iconStep,\n        iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n        _ref$iconStepCount = _ref.iconStepCount,\n        iconStepCount = _ref$iconStepCount === void 0 ? 1 : _ref$iconStepCount;\n      var _ref2 = this.layer.getLayerConfig(),\n        animateOption = _ref2.animateOption;\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      // 转化渐变色\n      var useLinearColor = 0; // 默认不生效\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n      var commonOptions = {\n        u_animate: this.animateOption2Array(animateOption),\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_icon_step: iconStep,\n        u_heightfixed: Number(heightfixed),\n        // 渐变色支持参数\n        u_linearColor: useLinearColor,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        // 传入线的标识\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        u_iconStepCount: iconStepCount,\n        u_time: this.layer.getLayerAnimateTime() || 0\n      };\n      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);\n      return commonBufferInfo;\n    }\n    // public getAnimateUniforms(): IModelUniform {\n    //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    //   return {\n    //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),\n    //     u_time: this.layer.getLayerAnimateTime(),\n    //   };\n    // }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.initUniformsBuffer();\n              this.updateTexture();\n              this.iconService.on('imageUpdate', this.updateTexture);\n              return _context.abrupt(\"return\", this.buildModels());\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture;\n      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.layer.buildLayerModel({\n                moduleName: 'lineWall',\n                vertexShader: line_vert,\n                fragmentShader: line_frag,\n                triangulation: LineTriangulation,\n                inject: this.getInject(),\n                depth: {\n                  enable: false\n                },\n                blend: this.getBlend()\n              });\n            case 2:\n              model = _context2.sent;\n              return _context2.abrupt(\"return\", [model]);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Distance',\n          shaderLocation: 15,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'total_distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Total_Distance',\n          shaderLocation: 11,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[5]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];\n          }\n        }\n      });\n\n      // point layer size;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          shaderLocation: ShaderLocation.NORMAL,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          // @ts-ignore\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'miter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Miter',\n          shaderLocation: 10,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          shaderLocation: 14,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature) {\n            var iconMap = _this2.iconService.getIconMap();\n            var texture = feature.texture;\n            var _ref3 = iconMap[texture] || {\n                x: 0,\n                y: 0\n              },\n              x = _ref3.x,\n              y = _ref3.y;\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n  return LineWallModel;\n}(BaseModel);\nexport { LineWallModel as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}