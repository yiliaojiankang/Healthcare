{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isArray } from '@antv/util';\nvar SPACES = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nvar PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');\nvar PATH_VALUES = new RegExp('(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig');\n// Parses given path string into an array of arrays of path segments\nexport default function parsePathString(pathString) {\n  if (!pathString) {\n    return null;\n  }\n  if (isArray(pathString)) {\n    return pathString;\n  }\n  var paramCounts = {\n    a: 7,\n    c: 6,\n    o: 2,\n    h: 1,\n    l: 2,\n    m: 2,\n    r: 4,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    u: 3,\n    z: 0\n  };\n  var data = [];\n  String(pathString).replace(PATH_COMMAND, function (a, b, c) {\n    var params = [];\n    var name = b.toLowerCase();\n    c.replace(PATH_VALUES, function (a, b) {\n      b && params.push(+b);\n    });\n    if (name === 'm' && params.length > 2) {\n      data.push([b].concat(params.splice(0, 2)));\n      name = 'l';\n      b = b === 'm' ? 'l' : 'L';\n    }\n    if (name === 'o' && params.length === 1) {\n      data.push([b, params[0]]);\n    }\n    if (name === 'r') {\n      data.push([b].concat(params));\n    } else {\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    }\n    return '';\n  });\n  return data;\n}","map":{"version":3,"names":["isArray","SPACES","PATH_COMMAND","RegExp","PATH_VALUES","parsePathString","pathString","paramCounts","a","c","o","h","l","m","r","q","s","t","v","u","z","data","String","replace","b","params","name","toLowerCase","push","length","concat","splice"],"sources":["../src/parse-path-string.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,OAAO,QAAQ,YAAY;AAEpC,IAAMC,MAAM,GAAG,0IAA0I;AACzJ,IAAMC,YAAY,GAAG,IAAIC,MAAM,CAAC,UAAU,GAAGF,MAAM,GAAG,uCAAuC,GAAGA,MAAM,GAAG,OAAO,GAAGA,MAAM,GAAG,OAAO,EAAE,IAAI,CAAC;AAC1I,IAAMG,WAAW,GAAG,IAAID,MAAM,CAAC,oCAAoC,GAAGF,MAAM,GAAG,OAAO,GAAGA,MAAM,GAAG,IAAI,EAAE,IAAI,CAAC;AAE7G;AACA,eAAc,SAAUI,eAAeA,CAACC,UAAkB;EACxD,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,IAAI;;EAGb,IAAIN,OAAO,CAACM,UAAU,CAAC,EAAE;IACvB,OAAOA,UAAU;;EAEnB,IAAMC,WAAW,GAAG;IAClBC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;GACJ;EACD,IAAMC,IAAI,GAAG,EAAE;EAEfC,MAAM,CAAChB,UAAU,CAAC,CAACiB,OAAO,CAACrB,YAAY,EAAE,UAAUM,CAAC,EAAEgB,CAAC,EAAEf,CAAC;IACxD,IAAMgB,MAAM,GAAG,EAAE;IACjB,IAAIC,IAAI,GAAGF,CAAC,CAACG,WAAW,EAAE;IAC1BlB,CAAC,CAACc,OAAO,CAACnB,WAAW,EAAE,UAAUI,CAAC,EAAEgB,CAAC;MACnCA,CAAC,IAAIC,MAAM,CAACG,IAAI,CAAC,CAACJ,CAAC,CAAC;IACtB,CAAC,CAAC;IACF,IAAIE,IAAI,KAAK,GAAG,IAAID,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MACrCR,IAAI,CAACO,IAAI,CAAC,CAAEJ,CAAC,CAAE,CAACM,MAAM,CAACL,MAAM,CAACM,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5CL,IAAI,GAAG,GAAG;MACVF,CAAC,GAAGA,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;;IAE3B,IAAIE,IAAI,KAAK,GAAG,IAAID,MAAM,CAACI,MAAM,KAAK,CAAC,EAAE;MACvCR,IAAI,CAACO,IAAI,CAAC,CAAEJ,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC,CAAE,CAAC;;IAE7B,IAAIC,IAAI,KAAK,GAAG,EAAE;MAChBL,IAAI,CAACO,IAAI,CAAC,CAAEJ,CAAC,CAAE,CAACM,MAAM,CAACL,MAAM,CAAC,CAAC;KAChC,MAAM;MACL,OAAOA,MAAM,CAACI,MAAM,IAAItB,WAAW,CAACmB,IAAI,CAAC,EAAE;QACzCL,IAAI,CAACO,IAAI,CAAC,CAAEJ,CAAC,CAAE,CAACM,MAAM,CAACL,MAAM,CAACM,MAAM,CAAC,CAAC,EAAExB,WAAW,CAACmB,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,CAACnB,WAAW,CAACmB,IAAI,CAAC,EAAE;UACtB;;;;IAIN,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,OAAOL,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}