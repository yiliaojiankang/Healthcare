{"ast":null,"code":"import { __read } from \"tslib\";\nimport { ext } from '@antv/matrix-util';\n/**\n * @ignore\n * 对图形元素进行矩阵变换，同时返回变换前的图形矩阵\n * @param shape 进行矩阵变换的图形\n * @param vector 矩阵变换的中心点\n * @param direct 矩阵变换的类型\n */\nexport function transformShape(shape, vector, direct) {\n  var scaledMatrix;\n  var _a = __read(vector, 2),\n    x = _a[0],\n    y = _a[1];\n  shape.applyToMatrix([x, y, 1]);\n  if (direct === 'x') {\n    shape.setMatrix(ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 0.01, 1], ['t', x, y]]));\n    scaledMatrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 100, 1], ['t', x, y]]);\n  } else if (direct === 'y') {\n    shape.setMatrix(ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 1, 0.01], ['t', x, y]]));\n    scaledMatrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 1, 100], ['t', x, y]]);\n  } else if (direct === 'xy') {\n    shape.setMatrix(ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]));\n    scaledMatrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 100, 100], ['t', x, y]]);\n  }\n  return scaledMatrix;\n}\n/**\n * 对图形元素进行剪切动画\n * @param element 进行动画的图形元素\n * @param animateCfg 动画配置\n * @param coordinate 当前坐标系\n * @param yMinPoint y 轴的最小值对应的图形坐标点\n * @param type 剪切动画的类型\n */\nexport function doScaleAnimate(element, animateCfg, coordinate, yMinPoint, type) {\n  var start = coordinate.start,\n    end = coordinate.end;\n  var width = coordinate.getWidth();\n  var height = coordinate.getHeight();\n  var x;\n  var y;\n  if (type === 'y') {\n    x = start.x + width / 2;\n    y = yMinPoint.y < start.y ? yMinPoint.y : start.y;\n  } else if (type === 'x') {\n    x = yMinPoint.x > start.x ? yMinPoint.x : start.x;\n    y = start.y + height / 2;\n  } else if (type === 'xy') {\n    if (coordinate.isPolar) {\n      x = coordinate.getCenter().x;\n      y = coordinate.getCenter().y;\n    } else {\n      x = (start.x + end.x) / 2;\n      y = (start.y + end.y) / 2;\n    }\n  }\n  var endMatrix = transformShape(element, [x, y], type);\n  element.animate({\n    matrix: endMatrix\n  }, animateCfg);\n}","map":{"version":3,"names":["ext","transformShape","shape","vector","direct","scaledMatrix","_a","__read","x","y","applyToMatrix","setMatrix","transform","getMatrix","doScaleAnimate","element","animateCfg","coordinate","yMinPoint","type","start","end","width","getWidth","height","getHeight","isPolar","getCenter","endMatrix","animate","matrix"],"sources":["../../../src/animate/animation/util.ts"],"sourcesContent":["import { ext } from '@antv/matrix-util';\nimport { Coordinate, IGroup, IShape } from '../../dependents';\nimport { GAnimateCfg, Point } from '../../interface';\n\n/**\n * @ignore\n * 对图形元素进行矩阵变换，同时返回变换前的图形矩阵\n * @param shape 进行矩阵变换的图形\n * @param vector 矩阵变换的中心点\n * @param direct 矩阵变换的类型\n */\nexport function transformShape(shape: IShape | IGroup, vector: [number, number], direct: string): number[] {\n  let scaledMatrix;\n\n  const [x, y] = vector;\n  shape.applyToMatrix([x, y, 1]);\n  if (direct === 'x') {\n    shape.setMatrix(\n      ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 0.01, 1],\n        ['t', x, y],\n      ])\n    );\n    scaledMatrix = ext.transform(shape.getMatrix(), [\n      ['t', -x, -y],\n      ['s', 100, 1],\n      ['t', x, y],\n    ]);\n  } else if (direct === 'y') {\n    shape.setMatrix(\n      ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 1, 0.01],\n        ['t', x, y],\n      ])\n    );\n    scaledMatrix = ext.transform(shape.getMatrix(), [\n      ['t', -x, -y],\n      ['s', 1, 100],\n      ['t', x, y],\n    ]);\n  } else if (direct === 'xy') {\n    shape.setMatrix(\n      ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 0.01, 0.01],\n        ['t', x, y],\n      ])\n    );\n    scaledMatrix = ext.transform(shape.getMatrix(), [\n      ['t', -x, -y],\n      ['s', 100, 100],\n      ['t', x, y],\n    ]);\n  }\n  return scaledMatrix;\n}\n\n/**\n * 对图形元素进行剪切动画\n * @param element 进行动画的图形元素\n * @param animateCfg 动画配置\n * @param coordinate 当前坐标系\n * @param yMinPoint y 轴的最小值对应的图形坐标点\n * @param type 剪切动画的类型\n */\nexport function doScaleAnimate(\n  element: IGroup | IShape,\n  animateCfg: GAnimateCfg,\n  coordinate: Coordinate,\n  yMinPoint: Point,\n  type: string\n) {\n  const { start, end } = coordinate;\n  const width = coordinate.getWidth();\n  const height = coordinate.getHeight();\n  let x: number;\n  let y: number;\n\n  if (type === 'y') {\n    x = start.x + width / 2;\n    y = yMinPoint.y < start.y ? yMinPoint.y : start.y;\n  } else if (type === 'x') {\n    x = yMinPoint.x > start.x ? yMinPoint.x : start.x;\n    y = start.y + height / 2;\n  } else if (type === 'xy') {\n    if (coordinate.isPolar) {\n      x = coordinate.getCenter().x;\n      y = coordinate.getCenter().y;\n    } else {\n      x = (start.x + end.x) / 2;\n      y = (start.y + end.y) / 2;\n    }\n  }\n\n  const endMatrix = transformShape(element, [x, y], type);\n  element.animate(\n    {\n      matrix: endMatrix,\n    },\n    animateCfg\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}