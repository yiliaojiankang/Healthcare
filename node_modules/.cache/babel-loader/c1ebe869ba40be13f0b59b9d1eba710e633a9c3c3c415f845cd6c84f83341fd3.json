{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __values } from \"tslib\";\nimport { groupToMap } from '@antv/util';\n/** @ignore */\nexport function group(data, fields, appendConditions) {\n  var e_1, _a;\n  if (appendConditions === void 0) {\n    appendConditions = {};\n  }\n  if (!fields) {\n    return [data];\n  }\n  var groups = groupToMap(data, fields);\n  var array = [];\n  if (fields.length === 1 && appendConditions[fields[0]]) {\n    var values = appendConditions[fields[0]];\n    try {\n      for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\n        var value = values_1_1.value;\n        var arr = groups[\"_\".concat(value)];\n        if (arr) {\n          // 可能存在用户设置 values ，但是数据中没有对应的字段，则这时候 arr 就为 null\n          array.push(arr);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  } else {\n    for (var k in groups) {\n      if (groups.hasOwnProperty(k)) {\n        var eachGroup = groups[k];\n        array.push(eachGroup);\n      }\n    }\n  }\n  return array;\n}","map":{"version":3,"names":["groupToMap","group","data","fields","appendConditions","groups","array","length","values","values_1","__values","values_1_1","next","done","value","arr","concat","push","k","hasOwnProperty","eachGroup"],"sources":["../../../src/geometry/util/group-data.ts"],"sourcesContent":["import { groupToMap } from '@antv/util';\nimport { Data } from '../../interface';\n\n/** @ignore */\nexport function group(data: Data, fields: string[], appendConditions: Record<string, any[]> = {}) {\n  if (!fields) {\n    return [data];\n  }\n  const groups = groupToMap(data, fields);\n  const array = [];\n  if (fields.length === 1 && appendConditions[fields[0]]) {\n    const values = appendConditions[fields[0]];\n    for (const value of values) {\n      const arr = groups[`_${value}`];\n      if (arr) {\n        // 可能存在用户设置 values ，但是数据中没有对应的字段，则这时候 arr 就为 null\n        array.push(arr);\n      }\n    }\n  } else {\n    for (const k in groups) {\n      if (groups.hasOwnProperty(k)) {\n        const eachGroup = groups[k];\n        array.push(eachGroup);\n      }\n    }\n  }\n\n  return array;\n}\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,YAAY;AAGvC;AACA,OAAM,SAAUC,KAAKA,CAACC,IAAU,EAAEC,MAAgB,EAAEC,gBAA4C;;EAA5C,IAAAA,gBAAA;IAAAA,gBAAA,KAA4C;EAAA;EAC9F,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,CAACD,IAAI,CAAC;;EAEf,IAAMG,MAAM,GAAGL,UAAU,CAACE,IAAI,EAAEC,MAAM,CAAC;EACvC,IAAMG,KAAK,GAAG,EAAE;EAChB,IAAIH,MAAM,CAACI,MAAM,KAAK,CAAC,IAAIH,gBAAgB,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IACtD,IAAMK,MAAM,GAAGJ,gBAAgB,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;;MAC1C,KAAoB,IAAAM,QAAA,GAAAC,QAAA,CAAAF,MAAM,GAAAG,UAAA,GAAAF,QAAA,CAAAG,IAAA,KAAAD,UAAA,CAAAE,IAAA,EAAAF,UAAA,GAAAF,QAAA,CAAAG,IAAA,IAAE;QAAvB,IAAME,KAAK,GAAAH,UAAA,CAAAG,KAAA;QACd,IAAMC,GAAG,GAAGV,MAAM,CAAC,IAAAW,MAAA,CAAIF,KAAK,CAAE,CAAC;QAC/B,IAAIC,GAAG,EAAE;UACP;UACAT,KAAK,CAACW,IAAI,CAACF,GAAG,CAAC;;;;;;;;;;;;;;GAGpB,MAAM;IACL,KAAK,IAAMG,CAAC,IAAIb,MAAM,EAAE;MACtB,IAAIA,MAAM,CAACc,cAAc,CAACD,CAAC,CAAC,EAAE;QAC5B,IAAME,SAAS,GAAGf,MAAM,CAACa,CAAC,CAAC;QAC3BZ,KAAK,CAACW,IAAI,CAACG,SAAS,CAAC;;;;EAK3B,OAAOd,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}