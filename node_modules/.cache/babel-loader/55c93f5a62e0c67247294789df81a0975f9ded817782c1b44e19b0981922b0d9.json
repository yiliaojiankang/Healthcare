{"ast":null,"code":"import { assert } from '../utils/env-utils/assert';\nimport { getLoadableWorkerURL } from '../utils/worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../utils/worker-utils/get-transfer-list';\nvar NOOP = function () {};\n/**\n * Represents one worker thread\n */\nvar WorkerThread = /** @class */function () {\n  function WorkerThread(props) {\n    this.terminated = false;\n    this.loadableURL = '';\n    var name = props.name,\n      source = props.source,\n      url = props.url;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = function (error) {\n      return console.log(error);\n    };\n    this.worker = this.createBrowserWorker();\n  }\n  WorkerThread.isSupported = function () {\n    return typeof Worker !== 'undefined';\n  };\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  WorkerThread.prototype.destroy = function () {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate();\n    this.terminated = true;\n  };\n  Object.defineProperty(WorkerThread.prototype, \"isRunning\", {\n    get: function () {\n      // TODO: isRunning\n      return Boolean(this.onMessage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  WorkerThread.prototype.postMessage = function (data, transferList) {\n    transferList = transferList || getTransferList(data);\n    this.worker.postMessage(data, transferList);\n  };\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  WorkerThread.prototype.getErrorFromErrorEvent = function (event) {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    var message = 'Failed to load ';\n    message += \"worker \" + this.name + \" from \" + this.url + \". \";\n    if (event.message) {\n      message += event.message + \" in \";\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += \":\" + event.lineno + \":\" + event.colno;\n    }\n    return new Error(message);\n  };\n  /**\n   * Creates a worker thread on the browser\n   */\n  WorkerThread.prototype.createBrowserWorker = function () {\n    var _this = this;\n    this.loadableURL = getLoadableWorkerURL({\n      source: this.source,\n      url: this.url\n    });\n    var worker = new Worker(this.loadableURL, {\n      name: this.name\n    });\n    worker.onmessage = function (event) {\n      if (!event.data) {\n        _this.onError(new Error('No data received'));\n      } else {\n        _this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = function (error) {\n      _this.onError(_this.getErrorFromErrorEvent(error));\n      _this.terminated = true;\n    };\n    worker.onmessageerror = function (event) {\n      return console.error(\"worker \" + _this.name + \", message error: \" + event);\n    };\n    return worker;\n  };\n  return WorkerThread;\n}();\nexport default WorkerThread;","map":{"version":3,"names":["assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","props","terminated","loadableURL","name","source","url","onMessage","onError","error","console","log","worker","createBrowserWorker","isSupported","Worker","prototype","destroy","terminate","Object","defineProperty","get","Boolean","enumerable","configurable","postMessage","data","transferList","getErrorFromErrorEvent","event","message","lineno","colno","Error","_this","onmessage","onerror","onmessageerror"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/worker-farm/worker-thread.js"],"sourcesContent":["import { assert } from '../utils/env-utils/assert';\nimport { getLoadableWorkerURL } from '../utils/worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../utils/worker-utils/get-transfer-list';\nvar NOOP = function () { };\n/**\n * Represents one worker thread\n */\nvar WorkerThread = /** @class */ (function () {\n    function WorkerThread(props) {\n        this.terminated = false;\n        this.loadableURL = '';\n        var name = props.name, source = props.source, url = props.url;\n        assert(source || url); // Either source or url must be defined\n        this.name = name;\n        this.source = source;\n        this.url = url;\n        this.onMessage = NOOP;\n        this.onError = function (error) { return console.log(error); };\n        this.worker = this.createBrowserWorker();\n    }\n    WorkerThread.isSupported = function () {\n        return typeof Worker !== 'undefined';\n    };\n    /**\n     * Terminate this worker thread\n     * @note Can free up significant memory\n     */\n    WorkerThread.prototype.destroy = function () {\n        this.onMessage = NOOP;\n        this.onError = NOOP;\n        this.worker.terminate();\n        this.terminated = true;\n    };\n    Object.defineProperty(WorkerThread.prototype, \"isRunning\", {\n        get: function () {\n            // TODO: isRunning\n            return Boolean(this.onMessage);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Send a message to this worker thread\n     * @param data any data structure, ideally consisting mostly of transferrable objects\n     * @param transferList If not supplied, calculated automatically by traversing data\n     */\n    WorkerThread.prototype.postMessage = function (data, transferList) {\n        transferList = transferList || getTransferList(data);\n        this.worker.postMessage(data, transferList);\n    };\n    /**\n     * Generate a standard Error from an ErrorEvent\n     * @param {ErrorEvent} event\n     */\n    WorkerThread.prototype.getErrorFromErrorEvent = function (event) {\n        // Note Error object does not have the expected fields if loading failed completely\n        // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n        // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n        var message = 'Failed to load ';\n        message += \"worker \" + this.name + \" from \" + this.url + \". \";\n        if (event.message) {\n            message += event.message + \" in \";\n        }\n        // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n        // message += hasFilename ? event.filename : this.source.slice(0, 100);\n        if (event.lineno) {\n            message += \":\" + event.lineno + \":\" + event.colno;\n        }\n        return new Error(message);\n    };\n    /**\n     * Creates a worker thread on the browser\n     */\n    WorkerThread.prototype.createBrowserWorker = function () {\n        var _this = this;\n        this.loadableURL = getLoadableWorkerURL({ source: this.source, url: this.url });\n        var worker = new Worker(this.loadableURL, { name: this.name });\n        worker.onmessage = function (event) {\n            if (!event.data) {\n                _this.onError(new Error('No data received'));\n            }\n            else {\n                _this.onMessage(event.data);\n            }\n        };\n        // This callback represents an uncaught exception in the worker thread\n        worker.onerror = function (error) {\n            _this.onError(_this.getErrorFromErrorEvent(error));\n            _this.terminated = true;\n        };\n        worker.onmessageerror = function (event) { return console.error(\"worker \" + _this.name + \", message error: \" + event); };\n        return worker;\n    };\n    return WorkerThread;\n}());\nexport default WorkerThread;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}