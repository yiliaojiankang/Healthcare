{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getElements, getElementValue } from '../util';\nimport Highlight from './highlight';\n/**\n * Highlight color\n * @ignore\n */\nvar HighlightColor = /** @class */function (_super) {\n  __extends(HighlightColor, _super);\n  function HighlightColor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  HighlightColor.prototype.setStateByElement = function (element, enable) {\n    var view = this.context.view;\n    var colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return;\n    }\n    var scale = view.getScaleByField(colorAttr.getFields()[0]);\n    var value = getElementValue(element, scale.field);\n    var elements = getElements(view);\n    var highlightElements = elements.filter(function (el) {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, function (el) {\n      return highlightElements.includes(el);\n    }, enable);\n  };\n  return HighlightColor;\n}(Highlight);\nexport default HighlightColor;","map":{"version":3,"names":["getElements","getElementValue","Highlight","HighlightColor","_super","__extends","prototype","setStateByElement","element","enable","view","context","colorAttr","geometry","getAttribute","scale","getScaleByField","getFields","value","field","elements","highlightElements","filter","el","setHighlightBy","includes"],"sources":["../../../../src/interaction/action/element/highlight-by-color.ts"],"sourcesContent":["import Element from '../../../geometry/element/';\nimport { getElements, getElementValue } from '../util';\nimport Highlight from './highlight';\n\n/**\n * Highlight color\n * @ignore\n */\nclass HighlightColor extends Highlight {\n  protected setStateByElement(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const colorAttr = element.geometry.getAttribute('color');\n    if (!colorAttr) {\n      return;\n    }\n    const scale = view.getScaleByField(colorAttr.getFields()[0]);\n    const value = getElementValue(element, scale.field);\n    const elements = getElements(view);\n    const highlightElements = elements.filter((el) => {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, (el) => highlightElements.includes(el), enable);\n  }\n}\n\nexport default HighlightColor;\n"],"mappings":";AACA,SAASA,WAAW,EAAEC,eAAe,QAAQ,SAAS;AACtD,OAAOC,SAAS,MAAM,aAAa;AAEnC;;;;AAIA,IAAAC,cAAA,0BAAAC,MAAA;EAA6BC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAA7B,SAAAD,eAAA;;EAeA;EAdYA,cAAA,CAAAG,SAAA,CAAAC,iBAAiB,GAA3B,UAA4BC,OAAgB,EAAEC,MAAe;IAC3D,IAAMC,IAAI,GAAG,IAAI,CAACC,OAAO,CAACD,IAAI;IAC9B,IAAME,SAAS,GAAGJ,OAAO,CAACK,QAAQ,CAACC,YAAY,CAAC,OAAO,CAAC;IACxD,IAAI,CAACF,SAAS,EAAE;MACd;;IAEF,IAAMG,KAAK,GAAGL,IAAI,CAACM,eAAe,CAACJ,SAAS,CAACK,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,IAAMC,KAAK,GAAGjB,eAAe,CAACO,OAAO,EAAEO,KAAK,CAACI,KAAK,CAAC;IACnD,IAAMC,QAAQ,GAAGpB,WAAW,CAACU,IAAI,CAAC;IAClC,IAAMW,iBAAiB,GAAGD,QAAQ,CAACE,MAAM,CAAC,UAACC,EAAE;MAC3C,OAAOtB,eAAe,CAACsB,EAAE,EAAER,KAAK,CAACI,KAAK,CAAC,KAAKD,KAAK;IACnD,CAAC,CAAC;IACF,IAAI,CAACM,cAAc,CAACJ,QAAQ,EAAE,UAACG,EAAE;MAAK,OAAAF,iBAAiB,CAACI,QAAQ,CAACF,EAAE,CAAC;IAA9B,CAA8B,EAAEd,MAAM,CAAC;EAC/E,CAAC;EACH,OAAAN,cAAC;AAAD,CAAC,CAf4BD,SAAS;AAiBtC,eAAeC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}