{"ast":null,"code":"/**\n * view 中三层 group 分层 key\n */\nexport var LAYER;\n(function (LAYER) {\n  /** 前景层 */\n  LAYER[\"FORE\"] = \"fore\";\n  /** 中间层 */\n  LAYER[\"MID\"] = \"mid\";\n  /** 背景层 */\n  LAYER[\"BG\"] = \"bg\";\n})(LAYER || (LAYER = {}));\n/**\n * 组件在画布的布局方位 12 方位\n */\nexport var DIRECTION;\n(function (DIRECTION) {\n  DIRECTION[\"TOP\"] = \"top\";\n  DIRECTION[\"TOP_LEFT\"] = \"top-left\";\n  DIRECTION[\"TOP_RIGHT\"] = \"top-right\";\n  DIRECTION[\"RIGHT\"] = \"right\";\n  DIRECTION[\"RIGHT_TOP\"] = \"right-top\";\n  DIRECTION[\"RIGHT_BOTTOM\"] = \"right-bottom\";\n  DIRECTION[\"LEFT\"] = \"left\";\n  DIRECTION[\"LEFT_TOP\"] = \"left-top\";\n  DIRECTION[\"LEFT_BOTTOM\"] = \"left-bottom\";\n  DIRECTION[\"BOTTOM\"] = \"bottom\";\n  DIRECTION[\"BOTTOM_LEFT\"] = \"bottom-left\";\n  DIRECTION[\"BOTTOM_RIGHT\"] = \"bottom-right\";\n  DIRECTION[\"RADIUS\"] = \"radius\";\n  DIRECTION[\"CIRCLE\"] = \"circle\";\n  // no direction information\n  DIRECTION[\"NONE\"] = \"none\";\n})(DIRECTION || (DIRECTION = {}));\n/**\n * 组件的类型，可能会影响到布局算法\n */\nexport var COMPONENT_TYPE;\n(function (COMPONENT_TYPE) {\n  /** axis 组件 */\n  COMPONENT_TYPE[\"AXIS\"] = \"axis\";\n  /** grid 组件 */\n  COMPONENT_TYPE[\"GRID\"] = \"grid\";\n  /** legend 组件 */\n  COMPONENT_TYPE[\"LEGEND\"] = \"legend\";\n  /** tooltip 组件 */\n  COMPONENT_TYPE[\"TOOLTIP\"] = \"tooltip\";\n  /** annotation 组件 */\n  COMPONENT_TYPE[\"ANNOTATION\"] = \"annotation\";\n  /** 缩略轴组件 */\n  COMPONENT_TYPE[\"SLIDER\"] = \"slider\";\n  /** 滚动条组件 */\n  COMPONENT_TYPE[\"SCROLLBAR\"] = \"scrollbar\";\n  /** 其他组件，自定义组件 */\n  COMPONENT_TYPE[\"OTHER\"] = \"other\";\n})(COMPONENT_TYPE || (COMPONENT_TYPE = {}));\n/**\n * 三层 group 的 z index\n */\nexport var GROUP_Z_INDEX = {\n  FORE: 3,\n  MID: 2,\n  BG: 1\n};\n/**\n * View 的生命周期阶段（和 3.x 的生命周期略有不同）\n * 我们需要先确定在那写场景需要用到生命周期，如果只是为了在生命周期插入一下什么组件之类的，那么在现有架构就是不需要的\n */\nexport var VIEW_LIFE_CIRCLE;\n(function (VIEW_LIFE_CIRCLE) {\n  VIEW_LIFE_CIRCLE[\"BEFORE_RENDER\"] = \"beforerender\";\n  VIEW_LIFE_CIRCLE[\"AFTER_RENDER\"] = \"afterrender\";\n  VIEW_LIFE_CIRCLE[\"BEFORE_PAINT\"] = \"beforepaint\";\n  VIEW_LIFE_CIRCLE[\"AFTER_PAINT\"] = \"afterpaint\";\n  VIEW_LIFE_CIRCLE[\"BEFORE_CHANGE_DATA\"] = \"beforechangedata\";\n  VIEW_LIFE_CIRCLE[\"AFTER_CHANGE_DATA\"] = \"afterchangedata\";\n  VIEW_LIFE_CIRCLE[\"BEFORE_CLEAR\"] = \"beforeclear\";\n  VIEW_LIFE_CIRCLE[\"AFTER_CLEAR\"] = \"afterclear\";\n  VIEW_LIFE_CIRCLE[\"BEFORE_DESTROY\"] = \"beforedestroy\";\n  VIEW_LIFE_CIRCLE[\"BEFORE_CHANGE_SIZE\"] = \"beforechangesize\";\n  VIEW_LIFE_CIRCLE[\"AFTER_CHANGE_SIZE\"] = \"afterchangesize\";\n})(VIEW_LIFE_CIRCLE || (VIEW_LIFE_CIRCLE = {}));\n/**\n * geometry 的生命周期\n */\nexport var GEOMETRY_LIFE_CIRCLE;\n(function (GEOMETRY_LIFE_CIRCLE) {\n  GEOMETRY_LIFE_CIRCLE[\"BEFORE_DRAW_ANIMATE\"] = \"beforeanimate\";\n  GEOMETRY_LIFE_CIRCLE[\"AFTER_DRAW_ANIMATE\"] = \"afteranimate\";\n  GEOMETRY_LIFE_CIRCLE[\"BEFORE_RENDER_LABEL\"] = \"beforerenderlabel\";\n  GEOMETRY_LIFE_CIRCLE[\"AFTER_RENDER_LABEL\"] = \"afterrenderlabel\";\n})(GEOMETRY_LIFE_CIRCLE || (GEOMETRY_LIFE_CIRCLE = {}));\n/**\n * 绘图区的事件列表\n */\nexport var PLOT_EVENTS;\n(function (PLOT_EVENTS) {\n  // mouse 事件\n  PLOT_EVENTS[\"MOUSE_ENTER\"] = \"plot:mouseenter\";\n  PLOT_EVENTS[\"MOUSE_DOWN\"] = \"plot:mousedown\";\n  PLOT_EVENTS[\"MOUSE_MOVE\"] = \"plot:mousemove\";\n  PLOT_EVENTS[\"MOUSE_UP\"] = \"plot:mouseup\";\n  PLOT_EVENTS[\"MOUSE_LEAVE\"] = \"plot:mouseleave\";\n  // 移动端事件\n  PLOT_EVENTS[\"TOUCH_START\"] = \"plot:touchstart\";\n  PLOT_EVENTS[\"TOUCH_MOVE\"] = \"plot:touchmove\";\n  PLOT_EVENTS[\"TOUCH_END\"] = \"plot:touchend\";\n  PLOT_EVENTS[\"TOUCH_CANCEL\"] = \"plot:touchcancel\";\n  // click 事件\n  PLOT_EVENTS[\"CLICK\"] = \"plot:click\";\n  PLOT_EVENTS[\"DBLCLICK\"] = \"plot:dblclick\";\n  PLOT_EVENTS[\"CONTEXTMENU\"] = \"plot:contextmenu\";\n  PLOT_EVENTS[\"LEAVE\"] = \"plot:leave\";\n  PLOT_EVENTS[\"ENTER\"] = \"plot:enter\";\n})(PLOT_EVENTS || (PLOT_EVENTS = {}));\n/**\n * Element 图形交互状态\n */\nexport var ELEMENT_STATE;\n(function (ELEMENT_STATE) {\n  ELEMENT_STATE[\"ACTIVE\"] = \"active\";\n  ELEMENT_STATE[\"INACTIVE\"] = \"inactive\";\n  ELEMENT_STATE[\"SELECTED\"] = \"selected\";\n  ELEMENT_STATE[\"DEFAULT\"] = \"default\";\n})(ELEMENT_STATE || (ELEMENT_STATE = {}));\n/** 参与分组的图形属性名 */\nexport var GROUP_ATTRS = ['color', 'shape', 'size'];\n/** 存储原始数据的字段名 */\nexport var FIELD_ORIGIN = '_origin';\n/** 最小的图表宽度 */\nexport var MIN_CHART_WIDTH = 1;\n/** 最小的图表高度 */\nexport var MIN_CHART_HEIGHT = 1;\n/** 辅助组件占图表的尺寸的最大比例：如图表上方的图例最多占图表高度的25% */\nexport var COMPONENT_MAX_VIEW_PERCENTAGE = 0.25;","map":{"version":3,"names":["LAYER","DIRECTION","COMPONENT_TYPE","GROUP_Z_INDEX","FORE","MID","BG","VIEW_LIFE_CIRCLE","GEOMETRY_LIFE_CIRCLE","PLOT_EVENTS","ELEMENT_STATE","GROUP_ATTRS","FIELD_ORIGIN","MIN_CHART_WIDTH","MIN_CHART_HEIGHT","COMPONENT_MAX_VIEW_PERCENTAGE"],"sources":["../src/constant.ts"],"sourcesContent":["/**\n * view 中三层 group 分层 key\n */\nexport enum LAYER {\n  /** 前景层 */\n  FORE = 'fore',\n  /** 中间层 */\n  MID = 'mid',\n  /** 背景层 */\n  BG = 'bg',\n}\n\n/**\n * 组件在画布的布局方位 12 方位\n */\nexport enum DIRECTION {\n  TOP = 'top',\n  TOP_LEFT = 'top-left',\n  TOP_RIGHT = 'top-right',\n  RIGHT = 'right',\n  RIGHT_TOP = 'right-top',\n  RIGHT_BOTTOM = 'right-bottom',\n  LEFT = 'left',\n  LEFT_TOP = 'left-top',\n  LEFT_BOTTOM = 'left-bottom',\n  BOTTOM = 'bottom',\n  BOTTOM_LEFT = 'bottom-left',\n  BOTTOM_RIGHT = 'bottom-right',\n  RADIUS = 'radius',\n  CIRCLE = 'circle',\n  // no direction information\n  NONE = 'none',\n}\n\n/**\n * 组件的类型，可能会影响到布局算法\n */\nexport enum COMPONENT_TYPE {\n  /** axis 组件 */\n  AXIS = 'axis',\n  /** grid 组件 */\n  GRID = 'grid',\n  /** legend 组件 */\n  LEGEND = 'legend',\n  /** tooltip 组件 */\n  TOOLTIP = 'tooltip',\n  /** annotation 组件 */\n  ANNOTATION = 'annotation',\n  /** 缩略轴组件 */\n  SLIDER = 'slider',\n  /** 滚动条组件 */\n  SCROLLBAR = 'scrollbar',\n  /** 其他组件，自定义组件 */\n  OTHER = 'other',\n}\n\n/**\n * 三层 group 的 z index\n */\nexport const GROUP_Z_INDEX = {\n  FORE: 3,\n  MID: 2,\n  BG: 1,\n};\n\n/**\n * View 的生命周期阶段（和 3.x 的生命周期略有不同）\n * 我们需要先确定在那写场景需要用到生命周期，如果只是为了在生命周期插入一下什么组件之类的，那么在现有架构就是不需要的\n */\nexport enum VIEW_LIFE_CIRCLE {\n  BEFORE_RENDER = 'beforerender',\n  AFTER_RENDER = 'afterrender',\n\n  BEFORE_PAINT = 'beforepaint',\n  AFTER_PAINT = 'afterpaint',\n\n  BEFORE_CHANGE_DATA = 'beforechangedata',\n  AFTER_CHANGE_DATA = 'afterchangedata',\n\n  BEFORE_CLEAR = 'beforeclear',\n  AFTER_CLEAR = 'afterclear',\n\n  BEFORE_DESTROY = 'beforedestroy',\n\n  BEFORE_CHANGE_SIZE = 'beforechangesize',\n  AFTER_CHANGE_SIZE = 'afterchangesize',\n}\n\n/**\n * geometry 的生命周期\n */\nexport enum GEOMETRY_LIFE_CIRCLE {\n  BEFORE_DRAW_ANIMATE = 'beforeanimate',\n  AFTER_DRAW_ANIMATE = 'afteranimate',\n\n  BEFORE_RENDER_LABEL = 'beforerenderlabel',\n  AFTER_RENDER_LABEL = 'afterrenderlabel',\n}\n\n/**\n * 绘图区的事件列表\n */\nexport enum PLOT_EVENTS {\n  // mouse 事件\n  MOUSE_ENTER = 'plot:mouseenter',\n  MOUSE_DOWN = 'plot:mousedown',\n  MOUSE_MOVE = 'plot:mousemove',\n  MOUSE_UP = 'plot:mouseup',\n  MOUSE_LEAVE = 'plot:mouseleave',\n  // 移动端事件\n  TOUCH_START = 'plot:touchstart',\n  TOUCH_MOVE = 'plot:touchmove',\n  TOUCH_END = 'plot:touchend',\n  TOUCH_CANCEL = 'plot:touchcancel',\n  // click 事件\n  CLICK = 'plot:click',\n  DBLCLICK = 'plot:dblclick',\n  CONTEXTMENU = 'plot:contextmenu',\n\n  LEAVE = 'plot:leave',\n  ENTER = 'plot:enter',\n}\n\n/**\n * Element 图形交互状态\n */\nexport enum ELEMENT_STATE {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  SELECTED = 'selected',\n  DEFAULT = 'default',\n}\n\n/** 参与分组的图形属性名 */\nexport const GROUP_ATTRS = ['color', 'shape', 'size'];\n/** 存储原始数据的字段名 */\nexport const FIELD_ORIGIN = '_origin';\n/** 最小的图表宽度 */\nexport const MIN_CHART_WIDTH = 1;\n/** 最小的图表高度 */\nexport const MIN_CHART_HEIGHT = 1;\n/** 辅助组件占图表的尺寸的最大比例：如图表上方的图例最多占图表高度的25% */\nexport const COMPONENT_MAX_VIEW_PERCENTAGE = 0.25;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}