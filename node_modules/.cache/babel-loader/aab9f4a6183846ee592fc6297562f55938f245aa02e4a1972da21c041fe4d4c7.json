{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_1 = require(\"./util\");\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nvar run = function (g) {\n  var _a;\n  var root = (0, util_1.addDummyNode)(g, \"root\", {}, \"_root\");\n  var depths = treeDepths(g);\n  var maxDepth = Math.max.apply(Math, Object.values(depths));\n  if (Math.abs(maxDepth) === Infinity) {\n    maxDepth = 1;\n  }\n  var height = maxDepth - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root;\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  g.edges().forEach(function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n  // Create border nodes and link them up\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n};\nvar dfs = function (g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!(children === null || children === void 0 ? void 0 : children.length)) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      });\n    }\n    return;\n  }\n  var top = (0, util_1.addBorderNode)(g, \"_bt\");\n  var bottom = (0, util_1.addBorderNode)(g, \"_bb\");\n  var label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n  children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      minlen: minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      minlen: minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n  });\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    });\n  }\n};\nvar treeDepths = function (g) {\n  var _a;\n  var depths = {};\n  var dfs = function (v, depth) {\n    var children = g.children(v);\n    children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n      return dfs(child, depth + 1);\n    });\n    depths[v] = depth;\n  };\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n    return dfs(v, 1);\n  });\n  return depths;\n};\nvar sumWeights = function (g) {\n  var result = 0;\n  g.edges().forEach(function (e) {\n    result += g.edge(e).weight;\n  });\n  return result;\n};\nvar cleanup = function (g) {\n  var graphLabel = g.graph();\n  graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach(function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdgeObj(e);\n    }\n  });\n};\nexports.default = {\n  run: run,\n  cleanup: cleanup\n};","map":{"version":3,"names":["util_1","require","run","g","root","addDummyNode","depths","treeDepths","maxDepth","Math","max","apply","Object","values","abs","Infinity","height","nodeSep","graph","nestingRoot","edges","forEach","e","edge","minlen","weight","sumWeights","_a","children","child","dfs","nodeRankFactor","v","length","setEdge","top","addBorderNode","bottom","label","node","setParent","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","parent","depth","result","cleanup","graphLabel","removeNode","removeEdgeObj","exports","default"],"sources":["../../../../src/layout/dagre/src/nesting-graph.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}