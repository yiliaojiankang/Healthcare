{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Event, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { processIllegalData } from '../../utils';\nimport { adaptor, pieAnnotation } from './adaptor';\nimport { DEFAULT_OPTIONS } from './contants';\nimport './interactions';\nimport { isAllZero } from './utils';\nvar Pie = /** @class */function (_super) {\n  __extends(Pie, _super);\n  function Pie() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'pie';\n    return _this;\n  }\n  /**\n   * 获取 饼图 默认配置项\n   * 供外部使用\n   */\n  Pie.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param data\n   */\n  Pie.prototype.changeData = function (data) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    var prevOptions = this.options;\n    var angleField = this.options.angleField;\n    var prevData = processIllegalData(prevOptions.data, angleField);\n    var curData = processIllegalData(data, angleField);\n    // 如果上一次或当前数据全为 0，则重新渲染\n    if (isAllZero(prevData, angleField) || isAllZero(curData, angleField)) {\n      this.update({\n        data: data\n      });\n    } else {\n      this.updateOption({\n        data: data\n      });\n      this.chart.data(curData);\n      // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n      pieAnnotation({\n        chart: this.chart,\n        options: this.options\n      });\n      this.chart.render(true);\n    }\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取 饼图 默认配置项, 供 base 获取\n   */\n  Pie.prototype.getDefaultOptions = function () {\n    return Pie.getDefaultOptions();\n  };\n  /**\n   * 获取 饼图 的适配器\n   */\n  Pie.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  return Pie;\n}(Plot);\nexport { Pie };","map":{"version":3,"names":["Event","VIEW_LIFE_CIRCLE","Plot","processIllegalData","adaptor","pieAnnotation","DEFAULT_OPTIONS","isAllZero","Pie","_super","__extends","_this","apply","arguments","type","getDefaultOptions","prototype","changeData","data","chart","emit","BEFORE_CHANGE_DATA","fromData","prevOptions","options","angleField","prevData","curData","update","updateOption","render","AFTER_CHANGE_DATA","getSchemaAdaptor"],"sources":["../../../src/plots/pie/index.ts"],"sourcesContent":["import { Event, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { processIllegalData } from '../../utils';\nimport { adaptor, pieAnnotation } from './adaptor';\nimport { DEFAULT_OPTIONS } from './contants';\nimport './interactions';\nimport { PieOptions } from './types';\nimport { isAllZero } from './utils';\n\nexport type { PieOptions };\n\nexport class Pie extends Plot<PieOptions> {\n  /**\n   * 获取 饼图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<PieOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'pie';\n\n  /**\n   * 更新数据\n   * @param data\n   */\n  public changeData(data: PieOptions['data']) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n    const prevOptions = this.options;\n    const { angleField } = this.options;\n    const prevData = processIllegalData(prevOptions.data, angleField);\n    const curData = processIllegalData(data, angleField);\n    // 如果上一次或当前数据全为 0，则重新渲染\n    if (isAllZero(prevData, angleField) || isAllZero(curData, angleField)) {\n      this.update({ data });\n    } else {\n      this.updateOption({ data });\n      this.chart.data(curData);\n      // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n      pieAnnotation({ chart: this.chart, options: this.options });\n      this.chart.render(true);\n    }\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取 饼图 默认配置项, 供 base 获取\n   */\n  protected getDefaultOptions(): Partial<PieOptions> {\n    return Pie.getDefaultOptions();\n  }\n\n  /**\n   * 获取 饼图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<PieOptions> {\n    return adaptor;\n  }\n}\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,gBAAgB,QAAQ,UAAU;AAElD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,OAAO,EAAEC,aAAa,QAAQ,WAAW;AAClD,SAASC,eAAe,QAAQ,YAAY;AAC5C,OAAO,gBAAgB;AAEvB,SAASC,SAAS,QAAQ,SAAS;AAInC,IAAAC,GAAA,0BAAAC,MAAA;EAAyBC,SAAA,CAAAF,GAAA,EAAAC,MAAA;EAAzB,SAAAD,IAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IASE;IACOF,KAAA,CAAAG,IAAI,GAAW,KAAK;;EA6C7B;EAtDE;;;;EAION,GAAA,CAAAO,iBAAiB,GAAxB;IACE,OAAOT,eAAe;EACxB,CAAC;EAKD;;;;EAIOE,GAAA,CAAAQ,SAAA,CAAAC,UAAU,GAAjB,UAAkBC,IAAwB;IACxC,IAAI,CAACC,KAAK,CAACC,IAAI,CACbnB,gBAAgB,CAACoB,kBAAkB,EACnCrB,KAAK,CAACsB,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAElB,gBAAgB,CAACoB,kBAAkB,EAAE,IAAI,CAAC,CACtE;IACD,IAAME,WAAW,GAAG,IAAI,CAACC,OAAO;IACxB,IAAAC,UAAU,GAAK,IAAI,CAACD,OAAO,CAAAC,UAAjB;IAClB,IAAMC,QAAQ,GAAGvB,kBAAkB,CAACoB,WAAW,CAACL,IAAI,EAAEO,UAAU,CAAC;IACjE,IAAME,OAAO,GAAGxB,kBAAkB,CAACe,IAAI,EAAEO,UAAU,CAAC;IACpD;IACA,IAAIlB,SAAS,CAACmB,QAAQ,EAAED,UAAU,CAAC,IAAIlB,SAAS,CAACoB,OAAO,EAAEF,UAAU,CAAC,EAAE;MACrE,IAAI,CAACG,MAAM,CAAC;QAAEV,IAAI,EAAAA;MAAA,CAAE,CAAC;KACtB,MAAM;MACL,IAAI,CAACW,YAAY,CAAC;QAAEX,IAAI,EAAAA;MAAA,CAAE,CAAC;MAC3B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACS,OAAO,CAAC;MACxB;MACAtB,aAAa,CAAC;QAAEc,KAAK,EAAE,IAAI,CAACA,KAAK;QAAEK,OAAO,EAAE,IAAI,CAACA;MAAO,CAAE,CAAC;MAC3D,IAAI,CAACL,KAAK,CAACW,MAAM,CAAC,IAAI,CAAC;;IAGzB,IAAI,CAACX,KAAK,CAACC,IAAI,CACbnB,gBAAgB,CAAC8B,iBAAiB,EAClC/B,KAAK,CAACsB,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAElB,gBAAgB,CAAC8B,iBAAiB,EAAE,IAAI,CAAC,CACrE;EACH,CAAC;EAED;;;EAGUvB,GAAA,CAAAQ,SAAA,CAAAD,iBAAiB,GAA3B;IACE,OAAOP,GAAG,CAACO,iBAAiB,EAAE;EAChC,CAAC;EAED;;;EAGUP,GAAA,CAAAQ,SAAA,CAAAgB,gBAAgB,GAA1B;IACE,OAAO5B,OAAO;EAChB,CAAC;EACH,OAAAI,GAAC;AAAD,CAAC,CAvDwBN,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}