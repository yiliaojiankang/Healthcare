{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport TransformAction from './scale-transform';\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nvar ScaleTranslate = /** @class */function (_super) {\n  __extends(ScaleTranslate, _super);\n  function ScaleTranslate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.startPoint = null;\n    _this.starting = false;\n    _this.startCache = {};\n    return _this;\n  }\n  /**\n   * 开始\n   */\n  ScaleTranslate.prototype.start = function () {\n    var _this = this;\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      var scale = _this.getScale(dim);\n      var min = scale.min,\n        max = scale.max,\n        values = scale.values;\n      _this.startCache[dim] = {\n        min: min,\n        max: max,\n        values: values\n      };\n    });\n  };\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n  /**\n   * 结束\n   */\n  ScaleTranslate.prototype.end = function () {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  };\n  /**\n   * 平移\n   */\n  ScaleTranslate.prototype.translate = function () {\n    var _this = this;\n    if (!this.starting) {\n      return;\n    }\n    var startPoint = this.startPoint;\n    var coord = this.context.view.getCoordinate();\n    var currentPoint = this.context.getCurrentPoint();\n    var normalStart = coord.invert(startPoint);\n    var noramlCurrent = coord.invert(currentPoint);\n    var dx = noramlCurrent.x - normalStart.x;\n    var dy = noramlCurrent.y - normalStart.y;\n    var view = this.context.view;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      _this.translateDim(dim, {\n        x: dx * -1,\n        y: dy * -1\n      });\n    });\n    view.render(true);\n  };\n  // 平移度量\n  ScaleTranslate.prototype.translateDim = function (dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      var scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  };\n  // linear 度量平移\n  ScaleTranslate.prototype.translateLinear = function (dim, scale, normalPoint) {\n    var view = this.context.view;\n    var _a = this.startCache[dim],\n      min = _a.min,\n      max = _a.max;\n    var range = max - min;\n    var d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: min,\n        max: max\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d\n    });\n  };\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n  /**\n   * 回滚\n   */\n  ScaleTranslate.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n    this.startPoint = null;\n    this.starting = false;\n  };\n  return ScaleTranslate;\n}(TransformAction);\nexport default ScaleTranslate;","map":{"version":3,"names":["each","TransformAction","ScaleTranslate","_super","__extends","_this","apply","arguments","startPoint","starting","startCache","prototype","start","context","getCurrentPoint","dims","dim","scale","getScale","min","max","values","end","translate","coord","view","getCoordinate","currentPoint","normalStart","invert","noramlCurrent","dx","x","dy","y","translateDim","render","normalPoint","hasDim","isLinear","translateLinear","_a","range","d","cacheScaleDefs","nice","field","reset","call"],"sources":["../../../../src/interaction/action/view/scale-translate.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../dependents';\nimport TransformAction from './scale-transform';\n\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  protected startPoint: Point = null;\n  protected starting = false;\n  private startCache = {};\n  /**\n   * 开始\n   */\n  public start() {\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      const scale = this.getScale(dim);\n      const { min, max, values } = scale;\n      this.startCache[dim] = { min, max, values };\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  }\n\n  /**\n   * 平移\n   */\n  public translate() {\n    if (!this.starting) {\n      return;\n    }\n    const startPoint = this.startPoint;\n    const coord = this.context.view.getCoordinate();\n    const currentPoint = this.context.getCurrentPoint();\n    const normalStart = coord.invert(startPoint);\n    const noramlCurrent = coord.invert(currentPoint);\n    const dx = noramlCurrent.x - normalStart.x;\n    const dy = noramlCurrent.y - normalStart.y;\n    const view = this.context.view;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.translateDim(dim, { x: dx * -1, y: dy * -1 });\n    });\n    view.render(true);\n  }\n\n  // 平移度量\n  private translateDim(dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private translateLinear(dim, scale, normalPoint) {\n    const view = this.context.view;\n    const { min, max } = this.startCache[dim];\n    const range = max - min;\n    const d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min,\n        max,\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d,\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    super.reset();\n    this.startPoint = null;\n    this.starting = false;\n  }\n}\n\nexport default ScaleTranslate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}