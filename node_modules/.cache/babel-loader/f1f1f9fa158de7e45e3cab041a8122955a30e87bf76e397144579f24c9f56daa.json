{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { map, reduce } from '@antv/util';\nimport { isRealNumber } from '../number';\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\nexport function percent(data, measure, groupField, as) {\n  // 1. 先计算每一个分组的 max 值\n  var sumMap = reduce(data, function (map, datum) {\n    var groupValue = datum[groupField];\n    var sum = map.has(groupValue) ? map.get(groupValue) : 0;\n    var v = datum[measure];\n    sum = isRealNumber(v) ? sum + v : sum;\n    map.set(groupValue, sum);\n    return map;\n  }, new Map());\n  // 2. 循环数组，计算占比\n  return map(data, function (datum) {\n    var _a;\n    var v = datum[measure];\n    var groupValue = datum[groupField];\n    var percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n    return __assign(__assign({}, datum), (_a = {}, _a[as] = percentage, _a));\n  });\n}\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\nexport function getDeepPercent(data, measure, fields, percent) {\n  var sumMap = reduce(data, function (map, datum) {\n    // 获取分组得到的枚举key值\n    var groupValue = reduce(fields, function (value, field) {\n      return \"\".concat(value).concat(datum[field]);\n    }, '');\n    var sum = map.has(groupValue) ? map.get(groupValue) : 0;\n    var v = datum[measure];\n    sum = isRealNumber(v) ? sum + v : sum;\n    map.set(groupValue, sum);\n    return map;\n  }, new Map());\n  // 2. 循环数组，计算占比\n  return map(data, function (datum) {\n    var _a;\n    var v = datum[measure];\n    // 获取分组得到的枚举key值\n    var groupValue = reduce(fields, function (value, field) {\n      return \"\".concat(value).concat(datum[field]);\n    }, '');\n    var percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n    return __assign(__assign({}, datum), (_a = {}, _a[percent] = percentage, _a));\n  });\n}\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\nexport function getDataWhetherPercentage(data, yField, groupField, asField, isPercent) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}","map":{"version":3,"names":["map","reduce","isRealNumber","percent","data","measure","groupField","as","sumMap","datum","groupValue","sum","has","get","v","set","Map","percentage","__assign","_a","getDeepPercent","fields","value","field","concat","getDataWhetherPercentage","yField","asField","isPercent"],"sources":["../../../src/utils/transform/percent.ts"],"sourcesContent":["import { map, reduce } from '@antv/util';\nimport { Data, Datum } from '../../types';\nimport { isRealNumber } from '../number';\n\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\nexport function percent(data: Data, measure: string, groupField: string, as: string) {\n  // 1. 先计算每一个分组的 max 值\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      const groupValue = datum[groupField];\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    const groupValue = datum[groupField];\n    const percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [as]: percentage,\n    };\n  });\n}\n\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\nexport function getDeepPercent(data: Record<string, any>[], measure: string, fields: string[], percent: string) {\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      // 获取分组得到的枚举key值\n      const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    // 获取分组得到的枚举key值\n    const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n    const percentage = isRealNumber(v) && sumMap.get(groupValue) !== 0 ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [percent]: percentage,\n    };\n  });\n}\n\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\nexport function getDataWhetherPercentage(\n  data: Record<string, any>[],\n  yField: string,\n  groupField: string,\n  asField: string,\n  isPercent?: boolean\n) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}