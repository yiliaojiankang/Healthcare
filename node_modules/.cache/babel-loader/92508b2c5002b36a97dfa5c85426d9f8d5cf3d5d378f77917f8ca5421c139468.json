{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayToTextureData = exports.attributesToTextureData = exports.buildTextureDataWithTwoEdgeAttr = exports.buildTextureData = exports.proccessToFunc = void 0;\nvar _1 = require(\"./\");\nvar math_1 = require(\"./math\");\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\nvar proccessToFunc = function (value, defaultV) {\n  var func;\n  if (!value) {\n    func = function () {\n      return defaultV || 1;\n    };\n  } else if ((0, _1.isNumber)(value)) {\n    func = function () {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n  return func;\n};\nexports.proccessToFunc = proccessToFunc;\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\nvar buildTextureData = function (nodes, edges) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    var source = (0, math_1.getEdgeTerminal)(e, 'source');\n    var target = (0, math_1.getEdgeTerminal)(e, 'target');\n    if (!isNaN(mapIdPos[source]) && !isNaN(mapIdPos[target])) {\n      nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n      nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    }\n  }\n  var maxEdgePerVetex = 0;\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i];\n    var len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = len;\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len);\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n  return {\n    maxEdgePerVetex: maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\nexports.buildTextureData = buildTextureData;\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\nvar buildTextureDataWithTwoEdgeAttr = function (nodes, edges, attrs1, attrs2) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    var source = (0, math_1.getEdgeTerminal)(e, 'source');\n    var target = (0, math_1.getEdgeTerminal)(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[source]].push(attrs1(e));\n    nodeDict[mapIdPos[source]].push(attrs2(e));\n    nodeDict[mapIdPos[source]].push(0);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    nodeDict[mapIdPos[target]].push(attrs1(e));\n    nodeDict[mapIdPos[target]].push(attrs2(e));\n    nodeDict[mapIdPos[target]].push(0);\n  }\n  var maxEdgePerVetex = 0;\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n    var len = dests.length;\n    // dataArray[i * 4 + 2] = offset;\n    // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n    // pack offset & length into float32: offset 20bit, length 12bit\n    dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n    dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n  // 不是 4 的倍数，填充 0\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n  return {\n    maxEdgePerVetex: maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\nexports.buildTextureDataWithTwoEdgeAttr = buildTextureDataWithTwoEdgeAttr;\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nvar attributesToTextureData = function (attributeNames, items) {\n  var dataArray = [];\n  var attributeNum = attributeNames.length;\n  var attributteStringMap = {};\n  items.forEach(function (item) {\n    attributeNames.forEach(function (name, i) {\n      if (attributteStringMap[item[name]] === undefined) {\n        attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n      }\n      dataArray.push(attributteStringMap[item[name]]);\n      // insure each node's attributes take inter number of grids\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  });\n  return {\n    array: new Float32Array(dataArray),\n    count: Object.keys(attributteStringMap).length\n  };\n};\nexports.attributesToTextureData = attributesToTextureData;\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\nvar arrayToTextureData = function (valueArrays) {\n  var dataArray = [];\n  var attributeNum = valueArrays.length;\n  var itemNum = valueArrays[0].length;\n  var _loop_1 = function (j) {\n    valueArrays.forEach(function (valueArray, i) {\n      dataArray.push(valueArray[j]);\n      // insure each node's attributes take inter number of grids\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  };\n  for (var j = 0; j < itemNum; j++) {\n    _loop_1(j);\n  }\n  return new Float32Array(dataArray);\n};\nexports.arrayToTextureData = arrayToTextureData;","map":{"version":3,"names":["_1","require","math_1","proccessToFunc","value","defaultV","func","isNumber","exports","buildTextureData","nodes","edges","dataArray","nodeDict","mapIdPos","i","length","n","id","push","x","y","e","source","getEdgeTerminal","target","isNaN","maxEdgePerVetex","offset","dests","len","Math","max","j","dest","array","Float32Array","buildTextureDataWithTwoEdgeAttr","attrs1","attrs2","attributesToTextureData","attributeNames","items","attributeNum","attributteStringMap","forEach","item","name","undefined","Object","keys","count","arrayToTextureData","valueArrays","itemNum","valueArray"],"sources":["../../src/util/gpu.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}