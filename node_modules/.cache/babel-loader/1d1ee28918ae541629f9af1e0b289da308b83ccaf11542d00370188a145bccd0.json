{"ast":null,"code":"import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nfunction getElementSize(ele) {\n  var style = getComputedStyle(ele);\n  return {\n    width: (ele.clientWidth || parseInt(style.width, 10)) - parseInt(style.paddingLeft, 10) - parseInt(style.paddingRight, 10),\n    height: (ele.clientHeight || parseInt(style.height, 10)) - parseInt(style.paddingTop, 10) - parseInt(style.paddingBottom, 10)\n  };\n}\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\nfunction isNumber(v) {\n  return typeof v === 'number' && !isNaN(v);\n}\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\nexport function getChartSize(ele, autoFit, width, height) {\n  var w = width;\n  var h = height;\n  if (autoFit) {\n    var size = getElementSize(ele);\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT)\n  };\n}\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\nexport function removeDom(dom) {\n  var parent = dom.parentNode;\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n/** @ignore */\nexport { createDom, modifyCSS } from '@antv/dom-util';","map":{"version":3,"names":["MIN_CHART_HEIGHT","MIN_CHART_WIDTH","getElementSize","ele","style","getComputedStyle","width","clientWidth","parseInt","paddingLeft","paddingRight","height","clientHeight","paddingTop","paddingBottom","isNumber","v","isNaN","getChartSize","autoFit","w","h","size","Math","max","removeDom","dom","parent","parentNode","removeChild","createDom","modifyCSS"],"sources":["../../src/util/dom.ts"],"sourcesContent":["import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\nimport { Size } from '../interface';\n\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nfunction getElementSize(ele: HTMLElement): Size {\n  const style = getComputedStyle(ele);\n\n  return {\n    width:\n      (ele.clientWidth || parseInt(style.width, 10)) -\n      parseInt(style.paddingLeft, 10) -\n      parseInt(style.paddingRight, 10),\n    height:\n      (ele.clientHeight || parseInt(style.height, 10)) -\n      parseInt(style.paddingTop, 10) -\n      parseInt(style.paddingBottom, 10),\n  };\n}\n\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\nfunction isNumber(v: any): boolean {\n  return typeof v === 'number' && !isNaN(v);\n}\n\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\nexport function getChartSize(ele: HTMLElement, autoFit: boolean, width: number, height: number): Size {\n  let w = width;\n  let h = height;\n\n  if (autoFit) {\n    const size = getElementSize(ele);\n\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT),\n  };\n}\n\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\nexport function removeDom(dom: HTMLElement) {\n  const parent = dom.parentNode;\n\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n\n/** @ignore */\nexport { createDom, modifyCSS } from '@antv/dom-util';\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,eAAe,QAAQ,aAAa;AAG/D;;;;;AAKA,SAASC,cAAcA,CAACC,GAAgB;EACtC,IAAMC,KAAK,GAAGC,gBAAgB,CAACF,GAAG,CAAC;EAEnC,OAAO;IACLG,KAAK,EACH,CAACH,GAAG,CAACI,WAAW,IAAIC,QAAQ,CAACJ,KAAK,CAACE,KAAK,EAAE,EAAE,CAAC,IAC7CE,QAAQ,CAACJ,KAAK,CAACK,WAAW,EAAE,EAAE,CAAC,GAC/BD,QAAQ,CAACJ,KAAK,CAACM,YAAY,EAAE,EAAE,CAAC;IAClCC,MAAM,EACJ,CAACR,GAAG,CAACS,YAAY,IAAIJ,QAAQ,CAACJ,KAAK,CAACO,MAAM,EAAE,EAAE,CAAC,IAC/CH,QAAQ,CAACJ,KAAK,CAACS,UAAU,EAAE,EAAE,CAAC,GAC9BL,QAAQ,CAACJ,KAAK,CAACU,aAAa,EAAE,EAAE;GACnC;AACH;AAEA;;;;;AAKA,SAASC,QAAQA,CAACC,CAAM;EACtB,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACD,CAAC,CAAC;AAC3C;AAEA;;;;;;;;;AASA,OAAM,SAAUE,YAAYA,CAACf,GAAgB,EAAEgB,OAAgB,EAAEb,KAAa,EAAEK,MAAc;EAC5F,IAAIS,CAAC,GAAGd,KAAK;EACb,IAAIe,CAAC,GAAGV,MAAM;EAEd,IAAIQ,OAAO,EAAE;IACX,IAAMG,IAAI,GAAGpB,cAAc,CAACC,GAAG,CAAC;IAEhCiB,CAAC,GAAGE,IAAI,CAAChB,KAAK,GAAGgB,IAAI,CAAChB,KAAK,GAAGc,CAAC;IAC/BC,CAAC,GAAGC,IAAI,CAACX,MAAM,GAAGW,IAAI,CAACX,MAAM,GAAGU,CAAC;;EAGnC,OAAO;IACLf,KAAK,EAAEiB,IAAI,CAACC,GAAG,CAACT,QAAQ,CAACK,CAAC,CAAC,GAAGA,CAAC,GAAGnB,eAAe,EAAEA,eAAe,CAAC;IACnEU,MAAM,EAAEY,IAAI,CAACC,GAAG,CAACT,QAAQ,CAACM,CAAC,CAAC,GAAGA,CAAC,GAAGrB,gBAAgB,EAAEA,gBAAgB;GACtE;AACH;AAEA;;;;;AAKA,OAAM,SAAUyB,SAASA,CAACC,GAAgB;EACxC,IAAMC,MAAM,GAAGD,GAAG,CAACE,UAAU;EAE7B,IAAID,MAAM,EAAE;IACVA,MAAM,CAACE,WAAW,CAACH,GAAG,CAAC;;AAE3B;AAEA;AACA,SAASI,SAAS,EAAEC,SAAS,QAAQ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}