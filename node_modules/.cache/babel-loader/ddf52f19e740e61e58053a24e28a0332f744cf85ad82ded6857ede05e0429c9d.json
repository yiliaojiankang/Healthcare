{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n// @mapbox/grid-index 并没有类似 hitTest 的单纯获取碰撞检测结果的方法，query 将导致计算大量多余的包围盒结果，因此使用改良版\nimport { mat4, vec4 } from 'gl-matrix';\nimport GridIndex from \"./grid-index\";\n/**\n * 基于网格实现文本避让，大幅提升包围盒碰撞检测效率\n * @see https://zhuanlan.zhihu.com/p/74373214\n */\nvar CollisionIndex = /*#__PURE__*/function () {\n  function CollisionIndex(width, height) {\n    _classCallCheck(this, CollisionIndex);\n    _defineProperty(this, \"viewportPadding\", 100);\n    this.width = width;\n    this.height = height;\n    this.viewportPadding = Math.max(width, height);\n    // 创建网格索引\n    this.grid = new GridIndex(width + this.viewportPadding, height + this.viewportPadding, 25);\n    this.screenRightBoundary = width + this.viewportPadding;\n    this.screenBottomBoundary = height + this.viewportPadding;\n    this.gridRightBoundary = width + 2 * this.viewportPadding;\n    this.gridBottomBoundary = height + 2 * this.viewportPadding;\n  }\n  _createClass(CollisionIndex, [{\n    key: \"placeCollisionBox\",\n    value: function placeCollisionBox(collisionBox) {\n      // const projectedPoint = this.project(\n      //   mvpMatrix,\n      //   collisionBox.anchorPointX,\n      //   collisionBox.anchorPointY,\n      // );\n\n      var tlX = collisionBox.x1 + collisionBox.anchorPointX + this.viewportPadding;\n      var tlY = collisionBox.y1 + collisionBox.anchorPointY + this.viewportPadding;\n      var brX = collisionBox.x2 + collisionBox.anchorPointX + this.viewportPadding;\n      var brY = collisionBox.y2 + collisionBox.anchorPointY + this.viewportPadding;\n      if (!this.isInsideGrid(tlX, tlY, brX, brY) || this.grid.hitTest(tlX, tlY, brX, brY)) {\n        return {\n          box: []\n        };\n      }\n      return {\n        box: [tlX, tlY, brX, brY]\n      };\n    }\n  }, {\n    key: \"insertCollisionBox\",\n    value: function insertCollisionBox(box, featureIndex) {\n      var key = {\n        featureIndex: featureIndex\n      };\n      this.grid.insert(key, box[0], box[1], box[2], box[3]);\n    }\n\n    /**\n     * 后续碰撞检测都需要投影到 viewport 坐标系\n     * @param {THREE.Matrix4} mvpMatrix mvp矩阵\n     * @param {number} x P20 平面坐标X\n     * @param {number} y P20 平面坐标Y\n     * @return {Point} projectedPoint\n     */\n  }, {\n    key: \"project\",\n    value: function project(mvpMatrix, x, y) {\n      var point = vec4.fromValues(x, y, 0, 1);\n      var out = vec4.create();\n      // @ts-ignore\n      var mat = mat4.fromValues.apply(mat4, _toConsumableArray(mvpMatrix));\n      vec4.transformMat4(out, point, mat);\n      // GL 坐标系[-1, 1] -> viewport 坐标系[width, height]\n      return {\n        x: (out[0] / out[3] + 1) / 2 * this.width + this.viewportPadding,\n        y: (-out[1] / out[3] + 1) / 2 * this.height + this.viewportPadding\n      };\n    }\n\n    /**\n     * 判断包围盒是否在整个网格内，需要加上 buffer\n     * @param {number} x1 x1\n     * @param {number} y1 y1\n     * @param {number} x2 x2\n     * @param {number} y2 y2\n     * @return {Point} isInside\n     */\n  }, {\n    key: \"isInsideGrid\",\n    value: function isInsideGrid(x1, y1, x2, y2) {\n      return x2 >= 0 && x1 < this.gridRightBoundary && y2 >= 0 && y1 < this.gridBottomBoundary;\n    }\n  }]);\n  return CollisionIndex;\n}();\nexport { CollisionIndex as default };","map":{"version":3,"names":["_toConsumableArray","_classCallCheck","_createClass","_defineProperty","mat4","vec4","GridIndex","CollisionIndex","width","height","viewportPadding","Math","max","grid","screenRightBoundary","screenBottomBoundary","gridRightBoundary","gridBottomBoundary","key","value","placeCollisionBox","collisionBox","tlX","x1","anchorPointX","tlY","y1","anchorPointY","brX","x2","brY","y2","isInsideGrid","hitTest","box","insertCollisionBox","featureIndex","insert","project","mvpMatrix","x","y","point","fromValues","out","create","mat","apply","transformMat4","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/utils/collision-index.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n// @mapbox/grid-index 并没有类似 hitTest 的单纯获取碰撞检测结果的方法，query 将导致计算大量多余的包围盒结果，因此使用改良版\nimport { mat4, vec4 } from 'gl-matrix';\nimport GridIndex from \"./grid-index\";\n/**\n * 基于网格实现文本避让，大幅提升包围盒碰撞检测效率\n * @see https://zhuanlan.zhihu.com/p/74373214\n */\nvar CollisionIndex = /*#__PURE__*/function () {\n  function CollisionIndex(width, height) {\n    _classCallCheck(this, CollisionIndex);\n    _defineProperty(this, \"viewportPadding\", 100);\n    this.width = width;\n    this.height = height;\n    this.viewportPadding = Math.max(width, height);\n    // 创建网格索引\n    this.grid = new GridIndex(width + this.viewportPadding, height + this.viewportPadding, 25);\n    this.screenRightBoundary = width + this.viewportPadding;\n    this.screenBottomBoundary = height + this.viewportPadding;\n    this.gridRightBoundary = width + 2 * this.viewportPadding;\n    this.gridBottomBoundary = height + 2 * this.viewportPadding;\n  }\n  _createClass(CollisionIndex, [{\n    key: \"placeCollisionBox\",\n    value: function placeCollisionBox(collisionBox) {\n      // const projectedPoint = this.project(\n      //   mvpMatrix,\n      //   collisionBox.anchorPointX,\n      //   collisionBox.anchorPointY,\n      // );\n\n      var tlX = collisionBox.x1 + collisionBox.anchorPointX + this.viewportPadding;\n      var tlY = collisionBox.y1 + collisionBox.anchorPointY + this.viewportPadding;\n      var brX = collisionBox.x2 + collisionBox.anchorPointX + this.viewportPadding;\n      var brY = collisionBox.y2 + collisionBox.anchorPointY + this.viewportPadding;\n      if (!this.isInsideGrid(tlX, tlY, brX, brY) || this.grid.hitTest(tlX, tlY, brX, brY)) {\n        return {\n          box: []\n        };\n      }\n      return {\n        box: [tlX, tlY, brX, brY]\n      };\n    }\n  }, {\n    key: \"insertCollisionBox\",\n    value: function insertCollisionBox(box, featureIndex) {\n      var key = {\n        featureIndex: featureIndex\n      };\n      this.grid.insert(key, box[0], box[1], box[2], box[3]);\n    }\n\n    /**\n     * 后续碰撞检测都需要投影到 viewport 坐标系\n     * @param {THREE.Matrix4} mvpMatrix mvp矩阵\n     * @param {number} x P20 平面坐标X\n     * @param {number} y P20 平面坐标Y\n     * @return {Point} projectedPoint\n     */\n  }, {\n    key: \"project\",\n    value: function project(mvpMatrix, x, y) {\n      var point = vec4.fromValues(x, y, 0, 1);\n      var out = vec4.create();\n      // @ts-ignore\n      var mat = mat4.fromValues.apply(mat4, _toConsumableArray(mvpMatrix));\n      vec4.transformMat4(out, point, mat);\n      // GL 坐标系[-1, 1] -> viewport 坐标系[width, height]\n      return {\n        x: (out[0] / out[3] + 1) / 2 * this.width + this.viewportPadding,\n        y: (-out[1] / out[3] + 1) / 2 * this.height + this.viewportPadding\n      };\n    }\n\n    /**\n     * 判断包围盒是否在整个网格内，需要加上 buffer\n     * @param {number} x1 x1\n     * @param {number} y1 y1\n     * @param {number} x2 x2\n     * @param {number} y2 y2\n     * @return {Point} isInside\n     */\n  }, {\n    key: \"isInsideGrid\",\n    value: function isInsideGrid(x1, y1, x2, y2) {\n      return x2 >= 0 && x1 < this.gridRightBoundary && y2 >= 0 && y1 < this.gridBottomBoundary;\n    }\n  }]);\n  return CollisionIndex;\n}();\nexport { CollisionIndex as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}