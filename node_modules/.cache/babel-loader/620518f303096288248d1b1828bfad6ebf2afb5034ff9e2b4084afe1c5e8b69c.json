{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\nimport './shape/polygon';\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\nvar Polygon = /** @class */function (_super) {\n  __extends(Polygon, _super);\n  function Polygon() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'polygon';\n    _this.shapeType = 'polygon';\n    _this.generatePoints = true;\n    return _this;\n  }\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n  Polygon.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj);\n    var x = cfg.x;\n    var y = cfg.y;\n    var temp;\n    // x y 都是数组时，不做处理\n    if (!(isArray(x) && isArray(y))) {\n      var xScale = this.getXScale();\n      var yScale = this.getYScale();\n      var xCount = xScale.values.length;\n      var yCount = yScale.values.length;\n      var xOffset = 0.5 * 1 / xCount;\n      var yOffset = 0.5 * 1 / yCount;\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n      cfg.x = x;\n      cfg.y = y;\n    }\n    return cfg;\n  };\n  return Polygon;\n}(Geometry);\nexport default Polygon;","map":{"version":3,"names":["isArray","Geometry","Polygon","_super","__extends","_this","apply","arguments","type","shapeType","generatePoints","prototype","createShapePointsCfg","obj","cfg","call","x","y","temp","xScale","getXScale","yScale","getYScale","xCount","values","length","yCount","xOffset","yOffset","isCategory"],"sources":["../../src/geometry/polygon.ts"],"sourcesContent":["import { isArray } from '@antv/util';\nimport { Datum } from '../interface';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\nimport './shape/polygon';\n\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\nexport default class Polygon extends Geometry {\n  public readonly type: string = 'polygon';\n  public readonly shapeType: string = 'polygon';\n  protected generatePoints: boolean = true;\n\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg: any = super.createShapePointsCfg(obj);\n    let x = cfg.x;\n    let y = cfg.y;\n    let temp;\n    // x y 都是数组时，不做处理\n    if (!(isArray(x) && isArray(y))) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xCount = xScale.values.length;\n      const yCount = yScale.values.length;\n      const xOffset = (0.5 * 1) / xCount;\n      const yOffset = (0.5 * 1) / yCount;\n\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n      cfg.x = x;\n      cfg.y = y;\n    }\n    return cfg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}