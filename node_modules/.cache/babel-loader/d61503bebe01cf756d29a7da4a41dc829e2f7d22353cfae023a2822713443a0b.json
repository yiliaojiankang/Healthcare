{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends, __read } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Circle.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'circle',\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n  Circle.prototype.render = function () {\n    _super.prototype.render.call(this);\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  Circle.prototype.getRegion = function (count, index) {\n    var r = 1 / 2; // 画布半径\n    // 画布圆心\n    var center = {\n      x: 0.5,\n      y: 0.5\n    };\n    // 每隔分面间隔的弧度\n    var avgAngle = Math.PI * 2 / count;\n    // 当前分面所在的弧度\n    var angle = -1 * Math.PI / 2 + avgAngle * index;\n    // TODO 没看懂\n    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    var middle = getAnglePoint(center, r - facetR, angle);\n    var startAngle = Math.PI * 5 / 4; // 右上角\n    var endAngle = Math.PI * 1 / 4; // 左下角\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle)\n    };\n  };\n  Circle.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n  Circle.prototype.beforeEachView = function (view, facet) {};\n  Circle.prototype.generateFacets = function (data) {\n    var _this = this;\n    var _a = this.cfg,\n      fields = _a.fields,\n      type = _a.type;\n    var _b = __read(fields, 1),\n      field = _b[0];\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n    var values = this.getFieldValues(data, field);\n    var count = values.length;\n    var rst = [];\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: type,\n        data: facetData,\n        region: _this.getRegion(count, index),\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n  Circle.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  Circle.prototype.getYAxisOption = function (y, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * facet title\n   */\n  Circle.prototype.renderTitle = function () {\n    var _this = this;\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n        view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  return Circle;\n}(Facet);\nexport default Circle;","map":{"version":3,"names":["deepMix","each","filter","get","DIRECTION","getAnglePoint","getFactTitleConfig","Facet","Circle","_super","__extends","prototype","getDefaultCfg","call","type","showTitle","title","getDefaultTitleCfg","render","cfg","renderTitle","getRegion","count","index","r","center","x","y","avgAngle","Math","PI","angle","facetR","sin","middle","startAngle","endAngle","start","end","afterEachView","view","facet","processAxis","beforeEachView","generateFacets","data","_this","_a","fields","_b","__read","field","Error","values","getFieldValues","length","rst","forEach","value","conditions","facetData","getFacetDataFilter","region","columnValue","columnField","columnIndex","columnValuesLength","rowValue","rowField","rowIndex","rowValuesLength","push","getXAxisOption","axes","option","getYAxisOption","facets","formatter","config","position","content","TOP","annotation","text"],"sources":["../../src/facet/circle.ts"],"sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { AxisCfg, CircleCfg, CircleData, Datum } from '../interface';\n\nimport View from '../chart/view';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Circle extends Facet<CircleCfg, CircleData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'circle',\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  protected getRegion(count: number, index: number) {\n    const r = 1 / 2; // 画布半径\n    // 画布圆心\n    const center = { x: 0.5, y: 0.5 };\n    // 每隔分面间隔的弧度\n    const avgAngle = (Math.PI * 2) / count;\n\n    // 当前分面所在的弧度\n    const angle = (-1 * Math.PI) / 2 + avgAngle * index;\n    // TODO 没看懂\n    const facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    const middle = getAnglePoint(center, r - facetR, angle);\n    const startAngle = (Math.PI * 5) / 4; // 右上角\n    const endAngle = (Math.PI * 1) / 4; // 左下角\n\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle),\n    };\n  }\n\n  protected afterEachView(view: View, facet: CircleData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: CircleData) {}\n\n  protected generateFacets(data: Datum[]): CircleData[] {\n    const { fields, type } = this.cfg;\n    const [field] = fields;\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const values = this.getFieldValues(data, field);\n    const count = values.length;\n\n    const rst = [];\n    values.forEach((value: any, index: number) => {\n      const conditions = [{ field, value, values }];\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: CircleData = {\n        type,\n        data: facetData,\n        region: this.getRegion(count, index),\n\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1,\n      };\n      rst.push(facet);\n    });\n    return rst;\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: CircleData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}