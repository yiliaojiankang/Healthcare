{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport var operationsSchema = {\n  nd: {\n    type: 'operation',\n    expression: ['/', ['-', ['band', 1], ['band', 0]],\n    // R > NIR\n    ['+', ['band', 1], ['band', 0]]]\n  },\n  rgb: {\n    type: 'function',\n    method: strethRgb2minMax\n  }\n};\nfunction strethRgb2minMax(bandsData, options) {\n  var channelR = bandsData[0].rasterData;\n  var channelG = bandsData[1].rasterData;\n  var channelB = bandsData[2].rasterData;\n  var data = [];\n  var _ref = (options === null || options === void 0 ? void 0 : options.countCut) || [2, 98],\n    _ref2 = _slicedToArray(_ref, 2),\n    low = _ref2[0],\n    high = _ref2[1];\n  var minMaxR = (options === null || options === void 0 ? void 0 : options.RMinMax) || percentile(channelR, low, high);\n  var minMaxG = (options === null || options === void 0 ? void 0 : options.GMinMax) || percentile(channelG, low, high);\n  var minMaxB = (options === null || options === void 0 ? void 0 : options.BMinMax) || percentile(channelB, low, high);\n  for (var i = 0; i < channelR.length; i++) {\n    data.push(Math.max(0, channelR[i] - minMaxR[0]));\n    data.push(Math.max(0, channelG[i] - minMaxG[0]));\n    data.push(Math.max(0, channelB[i] - minMaxB[0]));\n  }\n  return {\n    rasterData: data,\n    rMinMax: minMaxR,\n    gMinMax: minMaxG,\n    bMinMax: minMaxB\n  };\n}\n\n// https://gis.stackexchange.com/questions/324888/what-does-cumulative-count-cut-actually-do\n\nexport function percentile(data, minPercent, maxPercent) {\n  // 计算效率问题\n  var sortData = data.slice().sort(function (a, b) {\n    return a - b;\n  });\n  var dataLength = sortData.length;\n  var min = sortData[Math.ceil(dataLength * minPercent / 100)];\n  var max = sortData[Math.ceil(dataLength * maxPercent / 100)];\n  return [min, max];\n}","map":{"version":3,"names":["_slicedToArray","operationsSchema","nd","type","expression","rgb","method","strethRgb2minMax","bandsData","options","channelR","rasterData","channelG","channelB","data","_ref","countCut","_ref2","low","high","minMaxR","RMinMax","percentile","minMaxG","GMinMax","minMaxB","BMinMax","i","length","push","Math","max","rMinMax","gMinMax","bMinMax","minPercent","maxPercent","sortData","slice","sort","a","b","dataLength","min","ceil"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-source/es/utils/bandOperation/operationSchema.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport var operationsSchema = {\n  nd: {\n    type: 'operation',\n    expression: ['/', ['-', ['band', 1], ['band', 0]],\n    // R > NIR\n    ['+', ['band', 1], ['band', 0]]]\n  },\n  rgb: {\n    type: 'function',\n    method: strethRgb2minMax\n  }\n};\nfunction strethRgb2minMax(bandsData, options) {\n  var channelR = bandsData[0].rasterData;\n  var channelG = bandsData[1].rasterData;\n  var channelB = bandsData[2].rasterData;\n  var data = [];\n  var _ref = (options === null || options === void 0 ? void 0 : options.countCut) || [2, 98],\n    _ref2 = _slicedToArray(_ref, 2),\n    low = _ref2[0],\n    high = _ref2[1];\n  var minMaxR = (options === null || options === void 0 ? void 0 : options.RMinMax) || percentile(channelR, low, high);\n  var minMaxG = (options === null || options === void 0 ? void 0 : options.GMinMax) || percentile(channelG, low, high);\n  var minMaxB = (options === null || options === void 0 ? void 0 : options.BMinMax) || percentile(channelB, low, high);\n  for (var i = 0; i < channelR.length; i++) {\n    data.push(Math.max(0, channelR[i] - minMaxR[0]));\n    data.push(Math.max(0, channelG[i] - minMaxG[0]));\n    data.push(Math.max(0, channelB[i] - minMaxB[0]));\n  }\n  return {\n    rasterData: data,\n    rMinMax: minMaxR,\n    gMinMax: minMaxG,\n    bMinMax: minMaxB\n  };\n}\n\n// https://gis.stackexchange.com/questions/324888/what-does-cumulative-count-cut-actually-do\n\nexport function percentile(data, minPercent, maxPercent) {\n  // 计算效率问题\n  var sortData = data.slice().sort(function (a, b) {\n    return a - b;\n  });\n  var dataLength = sortData.length;\n  var min = sortData[Math.ceil(dataLength * minPercent / 100)];\n  var max = sortData[Math.ceil(dataLength * maxPercent / 100)];\n  return [min, max];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}