{"ast":null,"code":"import { registerShape, Util } from '@antv/g2';\nimport { clamp } from '@antv/util';\n/**\n * 自定义 Shape 部分: 自定义米轨仪表盘\n * 定义 STEP, STEP_RATIO. 可绘制区域: 1 / (STEP + 1) * i -> 1 / (STEP + 1) * i + (STEP_RATIO / (STEP + 1))\n */\nregisterShape('interval', 'meter-gauge', {\n  draw: function (cfg, container) {\n    // 使用 customInfo 传递参数\n    var _a = cfg.customInfo.meter,\n      meter = _a === void 0 ? {} : _a;\n    var _b = meter.steps,\n      STEP = _b === void 0 ? 50 : _b,\n      _c = meter.stepRatio,\n      STEP_RATIO = _c === void 0 ? 0.5 : _c;\n    STEP = STEP < 1 ? 1 : STEP;\n    // stepRatio 取值范围: (0, 1]\n    STEP_RATIO = clamp(STEP_RATIO, 0, 1);\n    var _d = this.coordinate,\n      COORD_START_ANGLE = _d.startAngle,\n      COORD_END_ANGLE = _d.endAngle;\n    var GAP = 0;\n    if (STEP_RATIO > 0 && STEP_RATIO < 1) {\n      var TOTAL = COORD_END_ANGLE - COORD_START_ANGLE;\n      GAP = TOTAL / STEP / (STEP_RATIO / (1 - STEP_RATIO) + 1 - 1 / STEP);\n    }\n    var INTERVAL = GAP / (1 - STEP_RATIO) * STEP_RATIO;\n    var group = container.addGroup();\n    // 绘制图形的时候，留下 gap\n    var center = this.coordinate.getCenter();\n    var radius = this.coordinate.getRadius();\n    var _e = Util.getAngle(cfg, this.coordinate),\n      START_ANGLE = _e.startAngle,\n      END_ANGLE = _e.endAngle;\n    for (var startAngle = START_ANGLE; startAngle < END_ANGLE;) {\n      var endAngle = void 0;\n      var r = (startAngle - COORD_START_ANGLE) % (INTERVAL + GAP);\n      if (r < INTERVAL) {\n        endAngle = startAngle + (INTERVAL - r);\n      } else {\n        startAngle += INTERVAL + GAP - r;\n        endAngle = startAngle + INTERVAL;\n      }\n      var path = Util.getSectorPath(center.x, center.y, radius, startAngle, Math.min(endAngle, END_ANGLE), radius * this.coordinate.innerRadius);\n      group.addShape('path', {\n        name: 'meter-gauge',\n        attrs: {\n          path: path,\n          fill: cfg.color,\n          stroke: cfg.color,\n          lineWidth: 0.5\n        }\n      });\n      startAngle = endAngle + GAP;\n    }\n    return group;\n  }\n});","map":{"version":3,"names":["registerShape","Util","clamp","draw","cfg","container","_a","customInfo","meter","_b","steps","STEP","_c","stepRatio","STEP_RATIO","_d","coordinate","COORD_START_ANGLE","startAngle","COORD_END_ANGLE","endAngle","GAP","TOTAL","INTERVAL","group","addGroup","center","getCenter","radius","getRadius","_e","getAngle","START_ANGLE","END_ANGLE","r","path","getSectorPath","x","y","Math","min","innerRadius","addShape","name","attrs","fill","color","stroke","lineWidth"],"sources":["../../../../src/plots/gauge/shapes/meter-gauge.ts"],"sourcesContent":["import { registerShape, Types, Util } from '@antv/g2';\nimport { clamp } from '@antv/util';\nimport { GaugeCustomInfo } from '../types';\n\ntype ShapeCfg = Omit<Types.ShapeInfo, 'customInfo'> & {\n  customInfo: GaugeCustomInfo;\n};\n\n/**\n * 自定义 Shape 部分: 自定义米轨仪表盘\n * 定义 STEP, STEP_RATIO. 可绘制区域: 1 / (STEP + 1) * i -> 1 / (STEP + 1) * i + (STEP_RATIO / (STEP + 1))\n */\nregisterShape('interval', 'meter-gauge', {\n  draw(cfg: ShapeCfg, container) {\n    // 使用 customInfo 传递参数\n    const { meter = {} } = cfg.customInfo;\n    let { steps: STEP = 50, stepRatio: STEP_RATIO = 0.5 } = meter;\n    STEP = STEP < 1 ? 1 : STEP;\n    // stepRatio 取值范围: (0, 1]\n    STEP_RATIO = clamp(STEP_RATIO, 0, 1);\n\n    const { startAngle: COORD_START_ANGLE, endAngle: COORD_END_ANGLE } = this.coordinate;\n    let GAP = 0;\n    if (STEP_RATIO > 0 && STEP_RATIO < 1) {\n      const TOTAL = COORD_END_ANGLE - COORD_START_ANGLE;\n      GAP = TOTAL / STEP / (STEP_RATIO / (1 - STEP_RATIO) + 1 - 1 / STEP);\n    }\n    const INTERVAL = (GAP / (1 - STEP_RATIO)) * STEP_RATIO;\n\n    const group = container.addGroup();\n    // 绘制图形的时候，留下 gap\n    const center = this.coordinate.getCenter();\n    const radius = this.coordinate.getRadius();\n    const { startAngle: START_ANGLE, endAngle: END_ANGLE } = Util.getAngle(cfg, this.coordinate);\n\n    for (let startAngle = START_ANGLE; startAngle < END_ANGLE; ) {\n      let endAngle;\n      const r = (startAngle - COORD_START_ANGLE) % (INTERVAL + GAP);\n      if (r < INTERVAL) {\n        endAngle = startAngle + (INTERVAL - r);\n      } else {\n        startAngle += INTERVAL + GAP - r;\n        endAngle = startAngle + INTERVAL;\n      }\n      const path = Util.getSectorPath(\n        center.x,\n        center.y,\n        radius,\n        startAngle,\n        Math.min(endAngle, END_ANGLE),\n        radius * this.coordinate.innerRadius\n      );\n      group.addShape('path', {\n        name: 'meter-gauge',\n        attrs: {\n          path,\n          fill: cfg.color,\n          stroke: cfg.color,\n          lineWidth: 0.5,\n        },\n      });\n      startAngle = endAngle + GAP;\n    }\n\n    return group;\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}