{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\n// 注册的shape\nimport './shapes/word-cloud';\nimport { processImageMask, transform } from './utils';\nvar WordCloud = /** @class */function (_super) {\n  __extends(WordCloud, _super);\n  function WordCloud() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 词云图 */\n    _this.type = 'word-cloud';\n    return _this;\n  }\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n  WordCloud.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   * @param data\n   */\n  WordCloud.prototype.changeData = function (data) {\n    this.updateOption({\n      data: data\n    });\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({\n        chart: this.chart,\n        options: this.options\n      }));\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   */\n  WordCloud.prototype.getDefaultOptions = function () {\n    return WordCloud.getDefaultOptions();\n  };\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  WordCloud.prototype.render = function () {\n    var _this = this;\n    return new Promise(function (res) {\n      var imageMask = _this.options.imageMask;\n      if (!imageMask) {\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n        res();\n        return;\n      }\n      var handler = function (img) {\n        _this.options = __assign(__assign({}, _this.options), {\n          imageMask: img || null\n        });\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n        res();\n      };\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  };\n  /**\n   * 获取 词云图 的适配器\n   */\n  WordCloud.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  WordCloud.prototype.triggerResize = function () {\n    var _this = this;\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(function () {\n        // 执行父类的方法\n        _super.prototype.triggerResize.call(_this);\n      });\n    }\n  };\n  return WordCloud;\n}(Plot);\nexport { WordCloud };","map":{"version":3,"names":["Plot","adaptor","DEFAULT_OPTIONS","processImageMask","transform","WordCloud","_super","__extends","_this","apply","arguments","type","getDefaultOptions","prototype","changeData","data","updateOption","options","imageMask","render","chart","Promise","res","call","handler","img","__assign","then","catch","getSchemaAdaptor","triggerResize","destroyed","execAdaptor","window","setTimeout"],"sources":["../../../src/plots/word-cloud/index.ts"],"sourcesContent":["import { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constant';\n// 注册的shape\nimport './shapes/word-cloud';\nimport { WordCloudOptions } from './types';\nimport { processImageMask, transform } from './utils';\n\nexport type { WordCloudOptions };\n\nexport class WordCloud extends Plot<WordCloudOptions> {\n  /**\n   * 获取 词云图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<WordCloudOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 词云图 */\n  public type: string = 'word-cloud';\n\n  /**\n   * @override\n   * @param data\n   */\n  public changeData(data) {\n    this.updateOption({ data });\n    if (this.options.imageMask) {\n      this.render();\n    } else {\n      this.chart.changeData(transform({ chart: this.chart, options: this.options }));\n    }\n  }\n\n  /**\n   * 获取默认的 options 配置项\n   */\n  protected getDefaultOptions(): Partial<WordCloudOptions> {\n    return WordCloud.getDefaultOptions();\n  }\n\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  public render() {\n    return new Promise<void>((res) => {\n      const { imageMask } = this.options;\n\n      if (!imageMask) {\n        // 调用父类渲染函数\n        super.render();\n        res();\n        return;\n      }\n\n      const handler = (img: HTMLImageElement) => {\n        this.options = {\n          ...this.options,\n          imageMask: img || null,\n        };\n\n        // 调用父类渲染函数\n        super.render();\n        res();\n      };\n\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  }\n\n  /**\n   * 获取 词云图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<WordCloudOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  protected triggerResize() {\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(() => {\n        // 执行父类的方法\n        super.triggerResize();\n      });\n    }\n  }\n}\n"],"mappings":";AACA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,eAAe,QAAQ,YAAY;AAC5C;AACA,OAAO,qBAAqB;AAE5B,SAASC,gBAAgB,EAAEC,SAAS,QAAQ,SAAS;AAIrD,IAAAC,SAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EAA/B,SAAAD,UAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IASE;IACOF,KAAA,CAAAG,IAAI,GAAW,YAAY;;EA4EpC;EArFE;;;;EAION,SAAA,CAAAO,iBAAiB,GAAxB;IACE,OAAOV,eAAe;EACxB,CAAC;EAKD;;;;EAIOG,SAAA,CAAAQ,SAAA,CAAAC,UAAU,GAAjB,UAAkBC,IAAI;IACpB,IAAI,CAACC,YAAY,CAAC;MAAED,IAAI,EAAAA;IAAA,CAAE,CAAC;IAC3B,IAAI,IAAI,CAACE,OAAO,CAACC,SAAS,EAAE;MAC1B,IAAI,CAACC,MAAM,EAAE;KACd,MAAM;MACL,IAAI,CAACC,KAAK,CAACN,UAAU,CAACV,SAAS,CAAC;QAAEgB,KAAK,EAAE,IAAI,CAACA,KAAK;QAAEH,OAAO,EAAE,IAAI,CAACA;MAAO,CAAE,CAAC,CAAC;;EAElF,CAAC;EAED;;;EAGUZ,SAAA,CAAAQ,SAAA,CAAAD,iBAAiB,GAA3B;IACE,OAAOP,SAAS,CAACO,iBAAiB,EAAE;EACtC,CAAC;EAED;;;EAGOP,SAAA,CAAAQ,SAAA,CAAAM,MAAM,GAAb;IAAA,IAAAX,KAAA;IACE,OAAO,IAAIa,OAAO,CAAO,UAACC,GAAG;MACnB,IAAAJ,SAAS,GAAKV,KAAI,CAACS,OAAO,CAAAC,SAAjB;MAEjB,IAAI,CAACA,SAAS,EAAE;QACd;QACAZ,MAAA,CAAAO,SAAA,CAAMM,MAAM,CAAAI,IAAA,CAAAf,KAAA,CAAE;QACdc,GAAG,EAAE;QACL;;MAGF,IAAME,OAAO,GAAG,SAAAA,CAACC,GAAqB;QACpCjB,KAAI,CAACS,OAAO,GAAAS,QAAA,CAAAA,QAAA,KACPlB,KAAI,CAACS,OAAO;UACfC,SAAS,EAAEO,GAAG,IAAI;QAAI,EACvB;QAED;QACAnB,MAAA,CAAAO,SAAA,CAAMM,MAAM,CAAAI,IAAA,CAAAf,KAAA,CAAE;QACdc,GAAG,EAAE;MACP,CAAC;MAEDnB,gBAAgB,CAACe,SAAS,CAAC,CAACS,IAAI,CAACH,OAAO,CAAC,CAACI,KAAK,CAACJ,OAAO,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC;EAED;;;EAGUnB,SAAA,CAAAQ,SAAA,CAAAgB,gBAAgB,GAA1B;IACE,OAAO5B,OAAO;EAChB,CAAC;EAED;;;EAGUI,SAAA,CAAAQ,SAAA,CAAAiB,aAAa,GAAvB;IAAA,IAAAtB,KAAA;IACE,IAAI,CAAC,IAAI,CAACY,KAAK,CAACW,SAAS,EAAE;MACzB;MACA;MACA;MACA,IAAI,CAACC,WAAW,EAAE;MAElB;MACA;MACAC,MAAM,CAACC,UAAU,CAAC;QAChB;QACA5B,MAAA,CAAAO,SAAA,CAAMiB,aAAa,CAAAP,IAAA,CAAAf,KAAA,CAAE;MACvB,CAAC,CAAC;;EAEN,CAAC;EACH,OAAAH,SAAC;AAAD,CAAC,CAtF8BL,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}