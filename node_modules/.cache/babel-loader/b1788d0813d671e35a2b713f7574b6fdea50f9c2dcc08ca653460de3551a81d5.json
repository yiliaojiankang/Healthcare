{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"buffer\", \"update\", \"name\"],\n  _excluded2 = [\"buffer\", \"update\", \"name\"];\nvar _bytesPerElementMap, _dec, _dec2, _class, _class2, _descriptor;\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from \"../../types\";\nimport { gl } from \"../renderer/gl\";\nimport StyleAttribute from \"./StyleAttribute\";\nvar bytesPerElementMap = (_bytesPerElementMap = {}, _defineProperty(_bytesPerElementMap, gl.FLOAT, 4), _defineProperty(_bytesPerElementMap, gl.UNSIGNED_BYTE, 1), _defineProperty(_bytesPerElementMap, gl.UNSIGNED_SHORT, 2), _bytesPerElementMap);\n\n/**\n * 每个 Layer 都拥有一个，用于管理样式属性的注册和更新\n */\nvar StyleAttributeService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec(_class = (_class2 = /*#__PURE__*/function () {\n  function StyleAttributeService() {\n    _classCallCheck(this, StyleAttributeService);\n    _defineProperty(this, \"attributesAndIndices\", void 0);\n    _initializerDefineProperty(this, \"rendererService\", _descriptor, this);\n    _defineProperty(this, \"attributes\", []);\n    _defineProperty(this, \"triangulation\", void 0);\n    _defineProperty(this, \"featureLayout\", {\n      sizePerElement: 0,\n      elements: []\n    });\n  }\n  _createClass(StyleAttributeService, [{\n    key: \"registerStyleAttribute\",\n    value: function registerStyleAttribute(options) {\n      var attributeToUpdate = this.getLayerStyleAttribute(options.name || '');\n      if (attributeToUpdate) {\n        attributeToUpdate.setProps(options);\n      } else {\n        attributeToUpdate = new StyleAttribute(options);\n        this.attributes.push(attributeToUpdate);\n      }\n      return attributeToUpdate;\n    }\n  }, {\n    key: \"unRegisterStyleAttribute\",\n    value: function unRegisterStyleAttribute(name) {\n      var attributeIndex = this.attributes.findIndex(function (attribute) {\n        return attribute.name === name;\n      });\n      if (attributeIndex > -1) {\n        this.attributes.splice(attributeIndex, 1);\n      }\n    }\n  }, {\n    key: \"updateScaleAttribute\",\n    value: function updateScaleAttribute(scaleOption) {\n      this.attributes.forEach(function (attr) {\n        var _attr$scale;\n        var name = attr.name;\n        var field = (_attr$scale = attr.scale) === null || _attr$scale === void 0 ? void 0 : _attr$scale.field;\n        if (scaleOption[name] || field && scaleOption[field]) {\n          // 字段类型和映射类型\n          attr.needRescale = true;\n          attr.needRemapping = true;\n          attr.needRegenerateVertices = true;\n        }\n      });\n    }\n  }, {\n    key: \"updateStyleAttribute\",\n    value: function updateStyleAttribute(attributeName, options, updateOptions) {\n      var attributeToUpdate = this.getLayerStyleAttribute(attributeName);\n      if (!attributeToUpdate) {\n        attributeToUpdate = this.registerStyleAttribute(_objectSpread(_objectSpread({}, options), {}, {\n          name: attributeName\n        }));\n      }\n      var scale = options.scale;\n      if (scale && attributeToUpdate) {\n        // TODO: 需要比较新旧值确定是否需要 rescale\n        // 需要重新 scale，肯定也需要重新进行数据映射\n        attributeToUpdate.scale = scale;\n        attributeToUpdate.needRescale = true;\n        attributeToUpdate.needRemapping = true;\n        attributeToUpdate.needRegenerateVertices = true;\n        if (updateOptions && updateOptions.featureRange) {\n          attributeToUpdate.featureRange = updateOptions.featureRange;\n        }\n      }\n    }\n  }, {\n    key: \"getLayerStyleAttributes\",\n    value: function getLayerStyleAttributes() {\n      return this.attributes;\n    }\n  }, {\n    key: \"getLayerStyleAttribute\",\n    value: function getLayerStyleAttribute(attributeName) {\n      return this.attributes.find(function (attribute) {\n        return attribute.name === attributeName;\n      });\n    }\n  }, {\n    key: \"getLayerAttributeScale\",\n    value: function getLayerAttributeScale(name) {\n      var _attribute$scale;\n      var attribute = this.getLayerStyleAttribute(name);\n      var scale = attribute === null || attribute === void 0 || (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers;\n      if (scale && scale[0]) {\n        return scale[0].func;\n      }\n      return null;\n    }\n  }, {\n    key: \"updateAttributeByFeatureRange\",\n    value: function updateAttributeByFeatureRange(attributeName, features) {\n      var startFeatureIdx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var endFeatureIdx = arguments.length > 3 ? arguments[3] : undefined;\n      var layer = arguments.length > 4 ? arguments[4] : undefined;\n      var attributeToUpdate = this.attributes.find(function (attribute) {\n        return attribute.name === attributeName;\n      });\n      if (attributeToUpdate && attributeToUpdate.descriptor) {\n        var descriptor = attributeToUpdate.descriptor;\n        var update = descriptor.update,\n          buffer = descriptor.buffer,\n          _descriptor$size = descriptor.size,\n          size = _descriptor$size === void 0 ? 0 : _descriptor$size;\n        var bytesPerElement = bytesPerElementMap[buffer.type || gl.FLOAT];\n        if (update) {\n          var _this$featureLayout = this.featureLayout,\n            elements = _this$featureLayout.elements,\n            sizePerElement = _this$featureLayout.sizePerElement;\n          // 截取待更新的 feature 范围\n          var featuresToUpdate = elements.slice(startFeatureIdx, endFeatureIdx);\n          // [n, n] 中断更新\n          if (!featuresToUpdate.length) {\n            return;\n          }\n          var offset = featuresToUpdate[0].offset;\n          // 以 byte 为单位计算 buffer 中的偏移\n          var bufferOffsetInBytes = offset * size * bytesPerElement;\n          var updatedBufferData = featuresToUpdate.map(function (_ref, attributeIdx) {\n            var featureIdx = _ref.featureIdx,\n              vertices = _ref.vertices,\n              normals = _ref.normals;\n            var verticesNumForCurrentFeature = vertices.length / sizePerElement;\n            var featureData = [];\n            for (var vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n              var normal = normals ?\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              normals.slice(vertexIdx * 3, vertexIdx * 3 + 3) : [];\n              featureData.push.apply(featureData, _toConsumableArray(update(features[featureIdx], featureIdx, vertices.slice(vertexIdx * sizePerElement, vertexIdx * sizePerElement + sizePerElement), attributeIdx, normal)));\n            }\n            return featureData;\n          }).flat();\n\n          // 更新底层 IAttribute 中包含的 IBuffer，使用 subdata\n          attributeToUpdate.vertexAttribute.updateBuffer({\n            data: updatedBufferData,\n            offset: bufferOffsetInBytes\n          });\n          // size color 触发更新事件\n          layer === null || layer === void 0 || layer.emit(\"legend:\".concat(attributeName), {\n            type: attributeName,\n            attr: attributeToUpdate\n          });\n        }\n      }\n    }\n  }, {\n    key: \"createAttributesAndIndices\",\n    value: function createAttributesAndIndices(features, triangulation, styleOption) {\n      var _this = this;\n      // 每次创建的初始化化 LayerOut\n      this.featureLayout = {\n        sizePerElement: 0,\n        elements: []\n      };\n      if (triangulation) {\n        this.triangulation = triangulation;\n      }\n      var descriptors = this.attributes.map(function (attr) {\n        attr.resetDescriptor();\n        return attr.descriptor;\n      });\n      var verticesNum = 0;\n      var vecticesCount = 0; // 在不使用 element 的时候记录顶点、图层所有顶点的总数\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var indices = [];\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var size = 3;\n      features.forEach(function (feature, featureIdx) {\n        // 逐 feature 进行三角化\n        var _this$triangulation = _this.triangulation(feature, styleOption),\n          indicesForCurrentFeature = _this$triangulation.indices,\n          verticesForCurrentFeature = _this$triangulation.vertices,\n          normalsForCurrentFeature = _this$triangulation.normals,\n          vertexSize = _this$triangulation.size,\n          indexes = _this$triangulation.indexes,\n          count = _this$triangulation.count;\n        if (typeof count === 'number') {\n          // 顶点数\n          vecticesCount += count;\n        }\n        indicesForCurrentFeature.forEach(function (i) {\n          indices.push(i + verticesNum);\n        });\n        size = vertexSize;\n        var verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n        // 记录三角化结果，用于后续精确更新指定 feature\n        _this.featureLayout.sizePerElement = size;\n        _this.featureLayout.elements.push({\n          featureIdx: featureIdx,\n          vertices: verticesForCurrentFeature,\n          normals: normalsForCurrentFeature,\n          offset: verticesNum\n        });\n        verticesNum += verticesNumForCurrentFeature;\n        // 根据 position 顶点生成其他顶点数据 // color/size/ui\n        var _loop = function _loop(vertexIdx) {\n          var normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n          var vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n          var vertexIndex = 0;\n          if (indexes && indexes[vertexIdx] !== undefined) {\n            vertexIndex = indexes[vertexIdx];\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          descriptors.forEach(function (descriptor, attributeIdx) {\n            if (descriptor && descriptor.update) {\n              var _ref2;\n              (_ref2 = descriptor.buffer.data).push.apply(_ref2, _toConsumableArray(descriptor.update(feature, featureIdx, vertice, vertexIdx,\n              // 当前顶点所在feature索引\n              normal, vertexIndex\n              // 传入顶点索引 vertexIdx\n              )));\n            } // end if\n          }); // end for each\n        };\n\n        for (var vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n          _loop(vertexIdx);\n        } // end for\n      }); // end features for Each\n      var _this$rendererService = this.rendererService,\n        createAttribute = _this$rendererService.createAttribute,\n        createBuffer = _this$rendererService.createBuffer,\n        createElements = _this$rendererService.createElements;\n      var attributes = {};\n      descriptors.forEach(function (descriptor, attributeIdx) {\n        if (descriptor) {\n          // IAttribute 参数透传\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          var buffer = descriptor.buffer,\n            update = descriptor.update,\n            name = descriptor.name,\n            rest = _objectWithoutProperties(descriptor, _excluded);\n          var vertexAttribute = createAttribute(_objectSpread({\n            // IBuffer 参数透传\n            buffer: createBuffer(buffer)\n          }, rest));\n          attributes[descriptor.name || ''] = vertexAttribute;\n\n          // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n          _this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n        }\n      });\n      var elements = createElements({\n        data: indices,\n        type: gl.UNSIGNED_INT,\n        count: indices.length\n      });\n      this.attributesAndIndices = {\n        attributes: attributes,\n        elements: elements,\n        count: vecticesCount\n      };\n      return this.attributesAndIndices;\n    }\n  }, {\n    key: \"createAttributes\",\n    value: function createAttributes(features, triangulation) {\n      var _this2 = this;\n      // 每次创建的初始化化 LayerOut\n      this.featureLayout = {\n        sizePerElement: 0,\n        elements: []\n      };\n      if (triangulation) {\n        this.triangulation = triangulation;\n      }\n      var descriptors = this.attributes.map(function (attr) {\n        attr.resetDescriptor();\n        return attr.descriptor;\n      });\n      var verticesNum = 0;\n      var indices = [];\n      var size = 3;\n      features.forEach(function (feature, featureIdx) {\n        // 逐 feature 进行三角化\n        var _this2$triangulation = _this2.triangulation(feature),\n          indicesForCurrentFeature = _this2$triangulation.indices,\n          verticesForCurrentFeature = _this2$triangulation.vertices,\n          normalsForCurrentFeature = _this2$triangulation.normals,\n          vertexSize = _this2$triangulation.size,\n          indexes = _this2$triangulation.indexes;\n        indicesForCurrentFeature.forEach(function (i) {\n          indices.push(i + verticesNum);\n        });\n        size = vertexSize;\n        var verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n        // 记录三角化结果，用于后续精确更新指定 feature\n        _this2.featureLayout.sizePerElement = size;\n        _this2.featureLayout.elements.push({\n          featureIdx: featureIdx,\n          vertices: verticesForCurrentFeature,\n          normals: normalsForCurrentFeature,\n          offset: verticesNum\n        });\n        verticesNum += verticesNumForCurrentFeature;\n        // 根据 position 顶点生成其他顶点数据\n        var _loop2 = function _loop2(vertexIdx) {\n          var normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n          var vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n          var vertexIndex = 0;\n          if (indexes && indexes[vertexIdx] !== undefined) {\n            vertexIndex = indexes[vertexIdx];\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          descriptors.forEach(function (descriptor, attributeIdx) {\n            if (descriptor && descriptor.update) {\n              var _ref3;\n              (_ref3 = descriptor.buffer.data).push.apply(_ref3, _toConsumableArray(descriptor.update(feature, featureIdx, vertice, vertexIdx,\n              // 当前顶点所在feature索引\n              normal, vertexIndex\n              // 传入顶点索引 vertexIdx\n              )));\n            } // end if\n          }); // end for each\n        };\n\n        for (var vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n          _loop2(vertexIdx);\n        } // end for\n      }); // end features for Each\n      var _this$rendererService2 = this.rendererService,\n        createAttribute = _this$rendererService2.createAttribute,\n        createBuffer = _this$rendererService2.createBuffer;\n      var attributes = {};\n      descriptors.forEach(function (descriptor, attributeIdx) {\n        if (descriptor) {\n          // IAttribute 参数透传\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          var buffer = descriptor.buffer,\n            update = descriptor.update,\n            name = descriptor.name,\n            rest = _objectWithoutProperties(descriptor, _excluded2);\n          var vertexAttribute = createAttribute(_objectSpread({\n            // IBuffer 参数透传\n            buffer: createBuffer(buffer)\n          }, rest));\n          attributes[descriptor.name || ''] = vertexAttribute;\n\n          // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n          _this2.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n        }\n      });\n      return {\n        attributes: attributes\n      };\n    }\n  }, {\n    key: \"clearAllAttributes\",\n    value: function clearAllAttributes() {\n      var _this$attributesAndIn;\n      // 销毁关联的 vertex attribute buffer objects\n      this.attributes.forEach(function (attribute) {\n        if (attribute.vertexAttribute) {\n          attribute.vertexAttribute.destroy();\n        }\n      });\n      (_this$attributesAndIn = this.attributesAndIndices) === null || _this$attributesAndIn === void 0 || _this$attributesAndIn.elements.destroy();\n      this.attributes = [];\n    }\n  }]);\n  return StyleAttributeService;\n}(), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { StyleAttributeService as default };","map":{"version":3,"names":["_objectWithoutProperties","_toConsumableArray","_objectSpread","_initializerDefineProperty","_classCallCheck","_createClass","_applyDecoratedDescriptor","_initializerWarningHelper","_defineProperty","_excluded","_excluded2","_bytesPerElementMap","_dec","_dec2","_class","_class2","_descriptor","inject","injectable","TYPES","gl","StyleAttribute","bytesPerElementMap","FLOAT","UNSIGNED_BYTE","UNSIGNED_SHORT","StyleAttributeService","IRendererService","sizePerElement","elements","key","value","registerStyleAttribute","options","attributeToUpdate","getLayerStyleAttribute","name","setProps","attributes","push","unRegisterStyleAttribute","attributeIndex","findIndex","attribute","splice","updateScaleAttribute","scaleOption","forEach","attr","_attr$scale","field","scale","needRescale","needRemapping","needRegenerateVertices","updateStyleAttribute","attributeName","updateOptions","featureRange","getLayerStyleAttributes","find","getLayerAttributeScale","_attribute$scale","scalers","func","updateAttributeByFeatureRange","features","startFeatureIdx","arguments","length","undefined","endFeatureIdx","layer","descriptor","update","buffer","_descriptor$size","size","bytesPerElement","type","_this$featureLayout","featureLayout","featuresToUpdate","slice","offset","bufferOffsetInBytes","updatedBufferData","map","_ref","attributeIdx","featureIdx","vertices","normals","verticesNumForCurrentFeature","featureData","vertexIdx","normal","apply","flat","vertexAttribute","updateBuffer","data","emit","concat","createAttributesAndIndices","triangulation","styleOption","_this","descriptors","resetDescriptor","verticesNum","vecticesCount","indices","feature","_this$triangulation","indicesForCurrentFeature","verticesForCurrentFeature","normalsForCurrentFeature","vertexSize","indexes","count","i","_loop","vertice","vertexIndex","_ref2","_this$rendererService","rendererService","createAttribute","createBuffer","createElements","rest","UNSIGNED_INT","attributesAndIndices","createAttributes","_this2","_this2$triangulation","_loop2","_ref3","_this$rendererService2","clearAllAttributes","_this$attributesAndIn","destroy","prototype","configurable","enumerable","writable","initializer","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-core/es/services/layer/StyleAttributeService.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"buffer\", \"update\", \"name\"],\n  _excluded2 = [\"buffer\", \"update\", \"name\"];\nvar _bytesPerElementMap, _dec, _dec2, _class, _class2, _descriptor;\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from \"../../types\";\nimport { gl } from \"../renderer/gl\";\nimport StyleAttribute from \"./StyleAttribute\";\nvar bytesPerElementMap = (_bytesPerElementMap = {}, _defineProperty(_bytesPerElementMap, gl.FLOAT, 4), _defineProperty(_bytesPerElementMap, gl.UNSIGNED_BYTE, 1), _defineProperty(_bytesPerElementMap, gl.UNSIGNED_SHORT, 2), _bytesPerElementMap);\n\n/**\n * 每个 Layer 都拥有一个，用于管理样式属性的注册和更新\n */\nvar StyleAttributeService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec(_class = (_class2 = /*#__PURE__*/function () {\n  function StyleAttributeService() {\n    _classCallCheck(this, StyleAttributeService);\n    _defineProperty(this, \"attributesAndIndices\", void 0);\n    _initializerDefineProperty(this, \"rendererService\", _descriptor, this);\n    _defineProperty(this, \"attributes\", []);\n    _defineProperty(this, \"triangulation\", void 0);\n    _defineProperty(this, \"featureLayout\", {\n      sizePerElement: 0,\n      elements: []\n    });\n  }\n  _createClass(StyleAttributeService, [{\n    key: \"registerStyleAttribute\",\n    value: function registerStyleAttribute(options) {\n      var attributeToUpdate = this.getLayerStyleAttribute(options.name || '');\n      if (attributeToUpdate) {\n        attributeToUpdate.setProps(options);\n      } else {\n        attributeToUpdate = new StyleAttribute(options);\n        this.attributes.push(attributeToUpdate);\n      }\n      return attributeToUpdate;\n    }\n  }, {\n    key: \"unRegisterStyleAttribute\",\n    value: function unRegisterStyleAttribute(name) {\n      var attributeIndex = this.attributes.findIndex(function (attribute) {\n        return attribute.name === name;\n      });\n      if (attributeIndex > -1) {\n        this.attributes.splice(attributeIndex, 1);\n      }\n    }\n  }, {\n    key: \"updateScaleAttribute\",\n    value: function updateScaleAttribute(scaleOption) {\n      this.attributes.forEach(function (attr) {\n        var _attr$scale;\n        var name = attr.name;\n        var field = (_attr$scale = attr.scale) === null || _attr$scale === void 0 ? void 0 : _attr$scale.field;\n        if (scaleOption[name] || field && scaleOption[field]) {\n          // 字段类型和映射类型\n          attr.needRescale = true;\n          attr.needRemapping = true;\n          attr.needRegenerateVertices = true;\n        }\n      });\n    }\n  }, {\n    key: \"updateStyleAttribute\",\n    value: function updateStyleAttribute(attributeName, options, updateOptions) {\n      var attributeToUpdate = this.getLayerStyleAttribute(attributeName);\n      if (!attributeToUpdate) {\n        attributeToUpdate = this.registerStyleAttribute(_objectSpread(_objectSpread({}, options), {}, {\n          name: attributeName\n        }));\n      }\n      var scale = options.scale;\n      if (scale && attributeToUpdate) {\n        // TODO: 需要比较新旧值确定是否需要 rescale\n        // 需要重新 scale，肯定也需要重新进行数据映射\n        attributeToUpdate.scale = scale;\n        attributeToUpdate.needRescale = true;\n        attributeToUpdate.needRemapping = true;\n        attributeToUpdate.needRegenerateVertices = true;\n        if (updateOptions && updateOptions.featureRange) {\n          attributeToUpdate.featureRange = updateOptions.featureRange;\n        }\n      }\n    }\n  }, {\n    key: \"getLayerStyleAttributes\",\n    value: function getLayerStyleAttributes() {\n      return this.attributes;\n    }\n  }, {\n    key: \"getLayerStyleAttribute\",\n    value: function getLayerStyleAttribute(attributeName) {\n      return this.attributes.find(function (attribute) {\n        return attribute.name === attributeName;\n      });\n    }\n  }, {\n    key: \"getLayerAttributeScale\",\n    value: function getLayerAttributeScale(name) {\n      var _attribute$scale;\n      var attribute = this.getLayerStyleAttribute(name);\n      var scale = attribute === null || attribute === void 0 || (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers;\n      if (scale && scale[0]) {\n        return scale[0].func;\n      }\n      return null;\n    }\n  }, {\n    key: \"updateAttributeByFeatureRange\",\n    value: function updateAttributeByFeatureRange(attributeName, features) {\n      var startFeatureIdx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var endFeatureIdx = arguments.length > 3 ? arguments[3] : undefined;\n      var layer = arguments.length > 4 ? arguments[4] : undefined;\n      var attributeToUpdate = this.attributes.find(function (attribute) {\n        return attribute.name === attributeName;\n      });\n      if (attributeToUpdate && attributeToUpdate.descriptor) {\n        var descriptor = attributeToUpdate.descriptor;\n        var update = descriptor.update,\n          buffer = descriptor.buffer,\n          _descriptor$size = descriptor.size,\n          size = _descriptor$size === void 0 ? 0 : _descriptor$size;\n        var bytesPerElement = bytesPerElementMap[buffer.type || gl.FLOAT];\n        if (update) {\n          var _this$featureLayout = this.featureLayout,\n            elements = _this$featureLayout.elements,\n            sizePerElement = _this$featureLayout.sizePerElement;\n          // 截取待更新的 feature 范围\n          var featuresToUpdate = elements.slice(startFeatureIdx, endFeatureIdx);\n          // [n, n] 中断更新\n          if (!featuresToUpdate.length) {\n            return;\n          }\n          var offset = featuresToUpdate[0].offset;\n          // 以 byte 为单位计算 buffer 中的偏移\n          var bufferOffsetInBytes = offset * size * bytesPerElement;\n          var updatedBufferData = featuresToUpdate.map(function (_ref, attributeIdx) {\n            var featureIdx = _ref.featureIdx,\n              vertices = _ref.vertices,\n              normals = _ref.normals;\n            var verticesNumForCurrentFeature = vertices.length / sizePerElement;\n            var featureData = [];\n            for (var vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n              var normal = normals ?\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              normals.slice(vertexIdx * 3, vertexIdx * 3 + 3) : [];\n              featureData.push.apply(featureData, _toConsumableArray(update(features[featureIdx], featureIdx, vertices.slice(vertexIdx * sizePerElement, vertexIdx * sizePerElement + sizePerElement), attributeIdx, normal)));\n            }\n            return featureData;\n          }).flat();\n\n          // 更新底层 IAttribute 中包含的 IBuffer，使用 subdata\n          attributeToUpdate.vertexAttribute.updateBuffer({\n            data: updatedBufferData,\n            offset: bufferOffsetInBytes\n          });\n          // size color 触发更新事件\n          layer === null || layer === void 0 || layer.emit(\"legend:\".concat(attributeName), {\n            type: attributeName,\n            attr: attributeToUpdate\n          });\n        }\n      }\n    }\n  }, {\n    key: \"createAttributesAndIndices\",\n    value: function createAttributesAndIndices(features, triangulation, styleOption) {\n      var _this = this;\n      // 每次创建的初始化化 LayerOut\n      this.featureLayout = {\n        sizePerElement: 0,\n        elements: []\n      };\n      if (triangulation) {\n        this.triangulation = triangulation;\n      }\n      var descriptors = this.attributes.map(function (attr) {\n        attr.resetDescriptor();\n        return attr.descriptor;\n      });\n      var verticesNum = 0;\n      var vecticesCount = 0; // 在不使用 element 的时候记录顶点、图层所有顶点的总数\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var indices = [];\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var size = 3;\n      features.forEach(function (feature, featureIdx) {\n        // 逐 feature 进行三角化\n        var _this$triangulation = _this.triangulation(feature, styleOption),\n          indicesForCurrentFeature = _this$triangulation.indices,\n          verticesForCurrentFeature = _this$triangulation.vertices,\n          normalsForCurrentFeature = _this$triangulation.normals,\n          vertexSize = _this$triangulation.size,\n          indexes = _this$triangulation.indexes,\n          count = _this$triangulation.count;\n        if (typeof count === 'number') {\n          // 顶点数\n          vecticesCount += count;\n        }\n        indicesForCurrentFeature.forEach(function (i) {\n          indices.push(i + verticesNum);\n        });\n        size = vertexSize;\n        var verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n        // 记录三角化结果，用于后续精确更新指定 feature\n        _this.featureLayout.sizePerElement = size;\n        _this.featureLayout.elements.push({\n          featureIdx: featureIdx,\n          vertices: verticesForCurrentFeature,\n          normals: normalsForCurrentFeature,\n          offset: verticesNum\n        });\n        verticesNum += verticesNumForCurrentFeature;\n        // 根据 position 顶点生成其他顶点数据 // color/size/ui\n        var _loop = function _loop(vertexIdx) {\n          var normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n          var vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n          var vertexIndex = 0;\n          if (indexes && indexes[vertexIdx] !== undefined) {\n            vertexIndex = indexes[vertexIdx];\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          descriptors.forEach(function (descriptor, attributeIdx) {\n            if (descriptor && descriptor.update) {\n              var _ref2;\n              (_ref2 = descriptor.buffer.data).push.apply(_ref2, _toConsumableArray(descriptor.update(feature, featureIdx, vertice, vertexIdx,\n              // 当前顶点所在feature索引\n              normal, vertexIndex\n              // 传入顶点索引 vertexIdx\n              )));\n            } // end if\n          }); // end for each\n        };\n        for (var vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n          _loop(vertexIdx);\n        } // end for\n      }); // end features for Each\n      var _this$rendererService = this.rendererService,\n        createAttribute = _this$rendererService.createAttribute,\n        createBuffer = _this$rendererService.createBuffer,\n        createElements = _this$rendererService.createElements;\n      var attributes = {};\n      descriptors.forEach(function (descriptor, attributeIdx) {\n        if (descriptor) {\n          // IAttribute 参数透传\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          var buffer = descriptor.buffer,\n            update = descriptor.update,\n            name = descriptor.name,\n            rest = _objectWithoutProperties(descriptor, _excluded);\n          var vertexAttribute = createAttribute(_objectSpread({\n            // IBuffer 参数透传\n            buffer: createBuffer(buffer)\n          }, rest));\n          attributes[descriptor.name || ''] = vertexAttribute;\n\n          // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n          _this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n        }\n      });\n      var elements = createElements({\n        data: indices,\n        type: gl.UNSIGNED_INT,\n        count: indices.length\n      });\n      this.attributesAndIndices = {\n        attributes: attributes,\n        elements: elements,\n        count: vecticesCount\n      };\n      return this.attributesAndIndices;\n    }\n  }, {\n    key: \"createAttributes\",\n    value: function createAttributes(features, triangulation) {\n      var _this2 = this;\n      // 每次创建的初始化化 LayerOut\n      this.featureLayout = {\n        sizePerElement: 0,\n        elements: []\n      };\n      if (triangulation) {\n        this.triangulation = triangulation;\n      }\n      var descriptors = this.attributes.map(function (attr) {\n        attr.resetDescriptor();\n        return attr.descriptor;\n      });\n      var verticesNum = 0;\n      var indices = [];\n      var size = 3;\n      features.forEach(function (feature, featureIdx) {\n        // 逐 feature 进行三角化\n        var _this2$triangulation = _this2.triangulation(feature),\n          indicesForCurrentFeature = _this2$triangulation.indices,\n          verticesForCurrentFeature = _this2$triangulation.vertices,\n          normalsForCurrentFeature = _this2$triangulation.normals,\n          vertexSize = _this2$triangulation.size,\n          indexes = _this2$triangulation.indexes;\n        indicesForCurrentFeature.forEach(function (i) {\n          indices.push(i + verticesNum);\n        });\n        size = vertexSize;\n        var verticesNumForCurrentFeature = verticesForCurrentFeature.length / vertexSize;\n\n        // 记录三角化结果，用于后续精确更新指定 feature\n        _this2.featureLayout.sizePerElement = size;\n        _this2.featureLayout.elements.push({\n          featureIdx: featureIdx,\n          vertices: verticesForCurrentFeature,\n          normals: normalsForCurrentFeature,\n          offset: verticesNum\n        });\n        verticesNum += verticesNumForCurrentFeature;\n        // 根据 position 顶点生成其他顶点数据\n        var _loop2 = function _loop2(vertexIdx) {\n          var normal = (normalsForCurrentFeature === null || normalsForCurrentFeature === void 0 ? void 0 : normalsForCurrentFeature.slice(vertexIdx * 3, vertexIdx * 3 + 3)) || [];\n          var vertice = verticesForCurrentFeature.slice(vertexIdx * vertexSize, vertexIdx * vertexSize + vertexSize);\n          var vertexIndex = 0;\n          if (indexes && indexes[vertexIdx] !== undefined) {\n            vertexIndex = indexes[vertexIdx];\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          descriptors.forEach(function (descriptor, attributeIdx) {\n            if (descriptor && descriptor.update) {\n              var _ref3;\n              (_ref3 = descriptor.buffer.data).push.apply(_ref3, _toConsumableArray(descriptor.update(feature, featureIdx, vertice, vertexIdx,\n              // 当前顶点所在feature索引\n              normal, vertexIndex\n              // 传入顶点索引 vertexIdx\n              )));\n            } // end if\n          }); // end for each\n        };\n        for (var vertexIdx = 0; vertexIdx < verticesNumForCurrentFeature; vertexIdx++) {\n          _loop2(vertexIdx);\n        } // end for\n      }); // end features for Each\n      var _this$rendererService2 = this.rendererService,\n        createAttribute = _this$rendererService2.createAttribute,\n        createBuffer = _this$rendererService2.createBuffer;\n      var attributes = {};\n      descriptors.forEach(function (descriptor, attributeIdx) {\n        if (descriptor) {\n          // IAttribute 参数透传\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          var buffer = descriptor.buffer,\n            update = descriptor.update,\n            name = descriptor.name,\n            rest = _objectWithoutProperties(descriptor, _excluded2);\n          var vertexAttribute = createAttribute(_objectSpread({\n            // IBuffer 参数透传\n            buffer: createBuffer(buffer)\n          }, rest));\n          attributes[descriptor.name || ''] = vertexAttribute;\n\n          // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n          _this2.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n        }\n      });\n      return {\n        attributes: attributes\n      };\n    }\n  }, {\n    key: \"clearAllAttributes\",\n    value: function clearAllAttributes() {\n      var _this$attributesAndIn;\n      // 销毁关联的 vertex attribute buffer objects\n      this.attributes.forEach(function (attribute) {\n        if (attribute.vertexAttribute) {\n          attribute.vertexAttribute.destroy();\n        }\n      });\n      (_this$attributesAndIn = this.attributesAndIndices) === null || _this$attributesAndIn === void 0 || _this$attributesAndIn.elements.destroy();\n      this.attributes = [];\n    }\n  }]);\n  return StyleAttributeService;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { StyleAttributeService as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}