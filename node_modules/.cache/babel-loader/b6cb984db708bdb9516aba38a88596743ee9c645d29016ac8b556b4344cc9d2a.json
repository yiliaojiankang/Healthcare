{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { assert } from '../env-utils/assert';\nvar workerURLCache = new Map();\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props) {\n  assert(props.source && !props.url || !props.source && props.url); // Either source or url must be defined\n  var workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    // Differentiate worker urls from worker source code\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n  assert(workerURL);\n  return workerURL;\n}\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url) {\n  // A local script url, we can use it to initialize a Worker directly\n  if (!url.startsWith('http')) {\n    return url;\n  }\n  // A remote script, we need to use `importScripts` to load from different origin\n  var workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource) {\n  // NOTE: webworkify was previously used\n  // const blob = webworkify(workerSource, {bare: true});\n  var blob = new Blob([workerSource], {\n    type: 'application/javascript'\n  });\n  return URL.createObjectURL(blob);\n}\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl) {\n  return \"try {\\n  importScripts('\" + workerUrl + \"');\\n} catch (error) {\\n  console.error(error);\\n  throw error;\\n}\";\n}","map":{"version":3,"names":["assert","workerURLCache","Map","getLoadableWorkerURL","props","source","url","workerURL","get","getLoadableWorkerURLFromURL","set","getLoadableWorkerURLFromSource","startsWith","workerSource","buildScriptSource","blob","Blob","type","URL","createObjectURL","workerUrl"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/utils/worker-utils/get-loadable-worker-url.js"],"sourcesContent":["import { assert } from '../env-utils/assert';\nvar workerURLCache = new Map();\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props) {\n    assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n    var workerURL = workerURLCache.get(props.source || props.url);\n    if (!workerURL) {\n        // Differentiate worker urls from worker source code\n        if (props.url) {\n            workerURL = getLoadableWorkerURLFromURL(props.url);\n            workerURLCache.set(props.url, workerURL);\n        }\n        if (props.source) {\n            workerURL = getLoadableWorkerURLFromSource(props.source);\n            workerURLCache.set(props.source, workerURL);\n        }\n    }\n    assert(workerURL);\n    return workerURL;\n}\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url) {\n    // A local script url, we can use it to initialize a Worker directly\n    if (!url.startsWith('http')) {\n        return url;\n    }\n    // A remote script, we need to use `importScripts` to load from different origin\n    var workerSource = buildScriptSource(url);\n    return getLoadableWorkerURLFromSource(workerSource);\n}\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource) {\n    // NOTE: webworkify was previously used\n    // const blob = webworkify(workerSource, {bare: true});\n    var blob = new Blob([workerSource], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl) {\n    return \"try {\\n  importScripts('\" + workerUrl + \"');\\n} catch (error) {\\n  console.error(error);\\n  throw error;\\n}\";\n}\n"],"mappings":";;;AAAA,SAASA,MAAM,QAAQ,qBAAqB;AAC5C,IAAIC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,KAAK,EAAE;EACxCJ,MAAM,CAAEI,KAAK,CAACC,MAAM,IAAI,CAACD,KAAK,CAACE,GAAG,IAAM,CAACF,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,GAAI,CAAC,CAAC,CAAC;EACtE,IAAIC,SAAS,GAAGN,cAAc,CAACO,GAAG,CAACJ,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,GAAG,CAAC;EAC7D,IAAI,CAACC,SAAS,EAAE;IACZ;IACA,IAAIH,KAAK,CAACE,GAAG,EAAE;MACXC,SAAS,GAAGE,2BAA2B,CAACL,KAAK,CAACE,GAAG,CAAC;MAClDL,cAAc,CAACS,GAAG,CAACN,KAAK,CAACE,GAAG,EAAEC,SAAS,CAAC;IAC5C;IACA,IAAIH,KAAK,CAACC,MAAM,EAAE;MACdE,SAAS,GAAGI,8BAA8B,CAACP,KAAK,CAACC,MAAM,CAAC;MACxDJ,cAAc,CAACS,GAAG,CAACN,KAAK,CAACC,MAAM,EAAEE,SAAS,CAAC;IAC/C;EACJ;EACAP,MAAM,CAACO,SAAS,CAAC;EACjB,OAAOA,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,2BAA2BA,CAACH,GAAG,EAAE;EACtC;EACA,IAAI,CAACA,GAAG,CAACM,UAAU,CAAC,MAAM,CAAC,EAAE;IACzB,OAAON,GAAG;EACd;EACA;EACA,IAAIO,YAAY,GAAGC,iBAAiB,CAACR,GAAG,CAAC;EACzC,OAAOK,8BAA8B,CAACE,YAAY,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,8BAA8BA,CAACE,YAAY,EAAE;EAClD;EACA;EACA,IAAIE,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,YAAY,CAAC,EAAE;IAAEI,IAAI,EAAE;EAAyB,CAAC,CAAC;EACvE,OAAOC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,iBAAiBA,CAACM,SAAS,EAAE;EAClC,OAAO,0BAA0B,GAAGA,SAAS,GAAG,oEAAoE;AACxH"},"metadata":{},"sourceType":"module","externalDependencies":[]}