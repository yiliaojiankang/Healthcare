{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport simplify from './simplify';\nimport createFeature from './feature';\n\n// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data\n\nexport default function convert(data, options) {\n  var features = [];\n  if (data.type === 'FeatureCollection') {\n    for (var i = 0; i < data.features.length; i++) {\n      convertFeature(features, data.features[i], options, i);\n    }\n  } else if (data.type === 'Feature') {\n    convertFeature(features, data, options);\n  } else {\n    // single geometry or a geometry collection\n    convertFeature(features, {\n      geometry: data\n    }, options);\n  }\n  return features;\n}\nfunction convertFeature(features, geojson, options, index) {\n  if (!geojson.geometry) return;\n  var coords = geojson.geometry.coordinates;\n  var type = geojson.geometry.type;\n  var tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n  var geometry = [];\n  var id = geojson.id;\n  if (options.promoteId) {\n    id = geojson.properties[options.promoteId];\n  } else if (options.generateId) {\n    id = index || 0;\n  }\n  if (type === 'Point') {\n    convertPoint(coords, geometry);\n  } else if (type === 'MultiPoint') {\n    for (var i = 0; i < coords.length; i++) {\n      convertPoint(coords[i], geometry);\n    }\n  } else if (type === 'LineString') {\n    convertLine(coords, geometry, tolerance, false);\n  } else if (type === 'MultiLineString') {\n    if (options.lineMetrics) {\n      // explode into linestrings to be able to track metrics\n      for (i = 0; i < coords.length; i++) {\n        geometry = [];\n        convertLine(coords[i], geometry, tolerance, false);\n        features.push(createFeature(id, 'LineString', geometry, geojson.properties));\n      }\n      return;\n    } else {\n      convertLines(coords, geometry, tolerance, false);\n    }\n  } else if (type === 'Polygon') {\n    convertLines(coords, geometry, tolerance, true);\n  } else if (type === 'MultiPolygon') {\n    for (i = 0; i < coords.length; i++) {\n      var polygon = [];\n      convertLines(coords[i], polygon, tolerance, true);\n      geometry.push(polygon);\n    }\n  } else if (type === 'GeometryCollection') {\n    for (i = 0; i < geojson.geometry.geometries.length; i++) {\n      convertFeature(features, {\n        id: id,\n        geometry: geojson.geometry.geometries[i],\n        properties: geojson.properties\n      }, options, index);\n    }\n    return;\n  } else {\n    throw new Error('Input data is not a valid GeoJSON object.');\n  }\n  features.push(createFeature(id, type, geometry, geojson.properties));\n}\nfunction convertPoint(coords, out) {\n  out.push(projectX(coords[0]));\n  out.push(projectY(coords[1]));\n  out.push(0);\n}\nfunction convertLine(ring, out, tolerance, isPolygon) {\n  var x0, y0;\n  var size = 0;\n  for (var j = 0; j < ring.length; j++) {\n    var x = projectX(ring[j][0]);\n    var y = projectY(ring[j][1]);\n    out.push(x);\n    out.push(y);\n    out.push(0);\n    if (j > 0) {\n      if (isPolygon) {\n        size += (x0 * y - x * y0) / 2; // area\n      } else {\n        size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n      }\n    }\n\n    x0 = x;\n    y0 = y;\n  }\n  var last = out.length - 3;\n  out[2] = 1;\n  simplify(out, 0, last, tolerance);\n  out[last + 2] = 1;\n  out.size = Math.abs(size);\n  out.start = 0;\n  out.end = out.size;\n}\nfunction convertLines(rings, out, tolerance, isPolygon) {\n  for (var i = 0; i < rings.length; i++) {\n    var geom = [];\n    convertLine(rings[i], geom, tolerance, isPolygon);\n    out.push(geom);\n  }\n}\nfunction projectX(x) {\n  return x / 360 + 0.5;\n}\nfunction projectY(y) {\n  var sin = Math.sin(y * Math.PI / 180);\n  var y2 = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n  return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}","map":{"version":3,"names":["simplify","createFeature","convert","data","options","features","type","i","length","convertFeature","geometry","geojson","index","coords","coordinates","tolerance","Math","pow","maxZoom","extent","id","promoteId","properties","generateId","convertPoint","convertLine","lineMetrics","push","convertLines","polygon","geometries","Error","out","projectX","projectY","ring","isPolygon","x0","y0","size","j","x","y","sqrt","last","abs","start","end","rings","geom","sin","PI","y2","log"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/geojson-vt/src/convert.js"],"sourcesContent":["\nimport simplify from './simplify';\nimport createFeature from './feature';\n\n// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data\n\nexport default function convert(data, options) {\n    var features = [];\n    if (data.type === 'FeatureCollection') {\n        for (var i = 0; i < data.features.length; i++) {\n            convertFeature(features, data.features[i], options, i);\n        }\n\n    } else if (data.type === 'Feature') {\n        convertFeature(features, data, options);\n\n    } else {\n        // single geometry or a geometry collection\n        convertFeature(features, {geometry: data}, options);\n    }\n\n    return features;\n}\n\nfunction convertFeature(features, geojson, options, index) {\n    if (!geojson.geometry) return;\n\n    var coords = geojson.geometry.coordinates;\n    var type = geojson.geometry.type;\n    var tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);\n    var geometry = [];\n    var id = geojson.id;\n    if (options.promoteId) {\n        id = geojson.properties[options.promoteId];\n    } else if (options.generateId) {\n        id = index || 0;\n    }\n    if (type === 'Point') {\n        convertPoint(coords, geometry);\n\n    } else if (type === 'MultiPoint') {\n        for (var i = 0; i < coords.length; i++) {\n            convertPoint(coords[i], geometry);\n        }\n\n    } else if (type === 'LineString') {\n        convertLine(coords, geometry, tolerance, false);\n\n    } else if (type === 'MultiLineString') {\n        if (options.lineMetrics) {\n            // explode into linestrings to be able to track metrics\n            for (i = 0; i < coords.length; i++) {\n                geometry = [];\n                convertLine(coords[i], geometry, tolerance, false);\n                features.push(createFeature(id, 'LineString', geometry, geojson.properties));\n            }\n            return;\n        } else {\n            convertLines(coords, geometry, tolerance, false);\n        }\n\n    } else if (type === 'Polygon') {\n        convertLines(coords, geometry, tolerance, true);\n\n    } else if (type === 'MultiPolygon') {\n        for (i = 0; i < coords.length; i++) {\n            var polygon = [];\n            convertLines(coords[i], polygon, tolerance, true);\n            geometry.push(polygon);\n        }\n    } else if (type === 'GeometryCollection') {\n        for (i = 0; i < geojson.geometry.geometries.length; i++) {\n            convertFeature(features, {\n                id: id,\n                geometry: geojson.geometry.geometries[i],\n                properties: geojson.properties\n            }, options, index);\n        }\n        return;\n    } else {\n        throw new Error('Input data is not a valid GeoJSON object.');\n    }\n\n    features.push(createFeature(id, type, geometry, geojson.properties));\n}\n\nfunction convertPoint(coords, out) {\n    out.push(projectX(coords[0]));\n    out.push(projectY(coords[1]));\n    out.push(0);\n}\n\nfunction convertLine(ring, out, tolerance, isPolygon) {\n    var x0, y0;\n    var size = 0;\n\n    for (var j = 0; j < ring.length; j++) {\n        var x = projectX(ring[j][0]);\n        var y = projectY(ring[j][1]);\n\n        out.push(x);\n        out.push(y);\n        out.push(0);\n\n        if (j > 0) {\n            if (isPolygon) {\n                size += (x0 * y - x * y0) / 2; // area\n            } else {\n                size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length\n            }\n        }\n        x0 = x;\n        y0 = y;\n    }\n\n    var last = out.length - 3;\n    out[2] = 1;\n    simplify(out, 0, last, tolerance);\n    out[last + 2] = 1;\n\n    out.size = Math.abs(size);\n    out.start = 0;\n    out.end = out.size;\n}\n\nfunction convertLines(rings, out, tolerance, isPolygon) {\n    for (var i = 0; i < rings.length; i++) {\n        var geom = [];\n        convertLine(rings[i], geom, tolerance, isPolygon);\n        out.push(geom);\n    }\n}\n\nfunction projectX(x) {\n    return x / 360 + 0.5;\n}\n\nfunction projectY(y) {\n    var sin = Math.sin(y * Math.PI / 180);\n    var y2 = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;\n    return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}