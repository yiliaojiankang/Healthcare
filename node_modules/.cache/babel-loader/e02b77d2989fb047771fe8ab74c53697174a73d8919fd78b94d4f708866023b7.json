{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { get } from '@antv/util';\nimport { getXDimensionLength } from '../util/coordinate';\nimport Geometry from './base';\n/** 引入对应的 ShapeFactory */\nimport './shape/interval';\nimport { getDefaultSize } from './util/shape-size';\nimport { getMaxScale } from '../util/scale';\n/**\n * Interval 几何标记。\n * 用于绘制柱状图、饼图、条形图、玫瑰图等。\n */\nvar Interval = /** @class */function (_super) {\n  __extends(Interval, _super);\n  function Interval(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.type = 'interval';\n    _this.shapeType = 'interval';\n    _this.generatePoints = true;\n    var background = cfg.background;\n    _this.background = background;\n    return _this;\n  }\n  /**\n   * 获取每条数据的 Shape 绘制信息\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  Interval.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj);\n    // 计算每个 shape 的 size\n    var size;\n    var sizeAttr = this.getAttribute('size');\n    if (sizeAttr) {\n      size = this.getAttributeValues(sizeAttr, obj)[0];\n      // 归一化\n      var coordinate = this.coordinate;\n      var coordinateWidth = getXDimensionLength(coordinate);\n      size = size / coordinateWidth;\n    } else {\n      if (!this.defaultSize) {\n        this.defaultSize = getDefaultSize(this);\n      }\n      size = this.defaultSize;\n    }\n    cfg.size = size;\n    return cfg;\n  };\n  /**\n   * 调整 y 轴的 scale 范围。\n   * 对于 Y 轴为数值轴柱状图，默认从 0 开始 生长。\n   */\n  Interval.prototype.adjustScale = function () {\n    _super.prototype.adjustScale.call(this);\n    var yScale = this.getYScale();\n    // 特殊逻辑：饼图需要填充满整个空间\n    if (this.coordinate.type === 'theta') {\n      yScale.change({\n        nice: false,\n        min: 0,\n        // 发生过 stack 调整，yScale 的 max 被调整过，this.updateStackRange()\n        max: getMaxScale(yScale)\n      });\n    } else {\n      // 柱状图数值轴默认从 0 开始\n      var scaleDefs = this.scaleDefs;\n      var field = yScale.field,\n        min = yScale.min,\n        max = yScale.max,\n        type = yScale.type;\n      if (type !== 'time') {\n        // time 类型不做调整\n        // 柱状图的 Y 轴要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (min > 0 && !get(scaleDefs, [field, 'min'])) {\n          yScale.change({\n            min: 0\n          });\n        }\n        // 柱当柱状图全为负值时也需要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (max <= 0 && !get(scaleDefs, [field, 'max'])) {\n          yScale.change({\n            max: 0\n          });\n        }\n      }\n    }\n  };\n  /**\n   * @override\n   */\n  Interval.prototype.getDrawCfg = function (mappingData) {\n    var shapeCfg = _super.prototype.getDrawCfg.call(this, mappingData);\n    shapeCfg.background = this.background;\n    return shapeCfg;\n  };\n  return Interval;\n}(Geometry);\nexport default Interval;","map":{"version":3,"names":["get","getXDimensionLength","Geometry","getDefaultSize","getMaxScale","Interval","_super","__extends","cfg","_this","call","type","shapeType","generatePoints","background","prototype","createShapePointsCfg","obj","size","sizeAttr","getAttribute","getAttributeValues","coordinate","coordinateWidth","defaultSize","adjustScale","yScale","getYScale","change","nice","min","max","scaleDefs","field","getDrawCfg","mappingData","shapeCfg"],"sources":["../../src/geometry/interval.ts"],"sourcesContent":["import { get } from '@antv/util';\nimport { Datum, MappingDatum, ShapeInfo, LooseObject } from '../interface';\nimport { ShapeAttrs } from '../dependents';\nimport { getXDimensionLength } from '../util/coordinate';\nimport Geometry, { GeometryCfg } from './base';\n/** 引入对应的 ShapeFactory */\nimport './shape/interval';\nimport { getDefaultSize } from './util/shape-size';\nimport { getMaxScale } from '../util/scale';\n\n/** Path 构造函数参数类型 */\nexport interface IntervalCfg extends GeometryCfg {\n  /** shape 背景，只对 Interval Geometry 生效，目前只对 interval-rect shape 生效。 */\n  background?: { style?: ShapeAttrs };\n}\n\n/**\n * Interval 几何标记。\n * 用于绘制柱状图、饼图、条形图、玫瑰图等。\n */\nexport default class Interval extends Geometry {\n  public readonly type: string = 'interval';\n  public readonly shapeType: string = 'interval';\n  /** shape 背景。目前只对 interval-rect shape 生效。 */\n  protected background?: { style?: ShapeAttrs };\n  protected generatePoints: boolean = true;\n\n  constructor(cfg: IntervalCfg) {\n    super(cfg);\n\n    const { background } = cfg;\n    this.background = background;\n  }\n\n  /**\n   * 获取每条数据的 Shape 绘制信息\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg = super.createShapePointsCfg(obj);\n\n    // 计算每个 shape 的 size\n    let size;\n    const sizeAttr = this.getAttribute('size');\n    if (sizeAttr) {\n      size = this.getAttributeValues(sizeAttr, obj)[0];\n      // 归一化\n      const coordinate = this.coordinate;\n      const coordinateWidth = getXDimensionLength(coordinate);\n      size = size / coordinateWidth;\n    } else {\n      if (!this.defaultSize) {\n        this.defaultSize = getDefaultSize(this);\n      }\n      size = this.defaultSize;\n    }\n    cfg.size = size;\n\n    return cfg;\n  }\n\n  /**\n   * 调整 y 轴的 scale 范围。\n   * 对于 Y 轴为数值轴柱状图，默认从 0 开始 生长。\n   */\n  protected adjustScale() {\n    super.adjustScale();\n    const yScale = this.getYScale();\n    // 特殊逻辑：饼图需要填充满整个空间\n    if (this.coordinate.type === 'theta') {\n      yScale.change({\n        nice: false,\n        min: 0,\n        // 发生过 stack 调整，yScale 的 max 被调整过，this.updateStackRange()\n        max: getMaxScale(yScale),\n      });\n    } else {\n      // 柱状图数值轴默认从 0 开始\n      const scaleDefs = this.scaleDefs;\n      const { field, min, max, type } = yScale;\n      if (type !== 'time') {\n        // time 类型不做调整\n        // 柱状图的 Y 轴要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (min > 0 && !get(scaleDefs, [field, 'min'])) {\n          yScale.change({\n            min: 0,\n          });\n        }\n        // 柱当柱状图全为负值时也需要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (max <= 0 && !get(scaleDefs, [field, 'max'])) {\n          yScale.change({\n            max: 0,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected getDrawCfg(mappingData: MappingDatum): ShapeInfo {\n    const shapeCfg = super.getDrawCfg(mappingData);\n    shapeCfg.background = this.background;\n\n    return shapeCfg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}