{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isArray, isNumber } from '@antv/util';\nimport { regressionExp, regressionLinear, regressionLoess, regressionLog, regressionPoly, regressionPow, regressionQuad } from 'd3-regression';\nimport { getSplinePath } from '../../utils';\nvar REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad\n};\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\nexport function getQuadrantDefaultConfig(xBaseline, yBaseline) {\n  // 文本便宜距离\n  var textOffset = 10;\n  // 四象限默认样式\n  var defaultConfig = {\n    regionStyle: [{\n      position: {\n        start: [xBaseline, 'max'],\n        end: ['max', yBaseline]\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', 'max'],\n        end: [xBaseline, yBaseline]\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', yBaseline],\n        end: [xBaseline, 'min']\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: [xBaseline, yBaseline],\n        end: ['max', 'min']\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1\n    },\n    labelStyle: [{\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }]\n  };\n  return defaultConfig;\n}\nvar splinePath = function (data, config) {\n  var view = config.view,\n    _a = config.options,\n    xField = _a.xField,\n    yField = _a.yField;\n  var xScaleView = view.getScaleByField(xField);\n  var yScaleView = view.getScaleByField(yField);\n  var pathData = data.map(function (d) {\n    return view.getCoordinate().convert({\n      x: xScaleView.scale(d[0]),\n      y: yScaleView.scale(d[1])\n    });\n  });\n  return getSplinePath(pathData, false);\n};\nexport var getPath = function (config) {\n  var options = config.options;\n  var xField = options.xField,\n    yField = options.yField,\n    data = options.data,\n    regressionLine = options.regressionLine;\n  var _a = regressionLine.type,\n    type = _a === void 0 ? 'linear' : _a,\n    algorithm = regressionLine.algorithm,\n    customEquation = regressionLine.equation;\n  var pathData;\n  var equation = null;\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n    equation = customEquation;\n  } else {\n    var reg = REGRESSION_MAP[type]().x(function (d) {\n      return d[xField];\n    }).y(function (d) {\n      return d[yField];\n    });\n    pathData = reg(data);\n    equation = getRegressionEquation(type, pathData);\n  }\n  return [splinePath(pathData, config), equation];\n};\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\nexport var getMeta = function (options) {\n  var _a;\n  var _b = options.meta,\n    meta = _b === void 0 ? {} : _b,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data;\n  var xFieldValue = data[0][xField];\n  var yFieldValue = data[0][yField];\n  var xIsPositiveNumber = xFieldValue > 0;\n  var yIsPositiveNumber = yFieldValue > 0;\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n  function getMetaMinMax(field, axis) {\n    var fieldMeta = get(meta, [field]);\n    function getCustomValue(type) {\n      return get(fieldMeta, type);\n    }\n    var range = {};\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n      return range;\n    }\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n    return range;\n  }\n  return __assign(__assign({}, meta), (_a = {}, _a[xField] = __assign(__assign({}, meta[xField]), getMetaMinMax(xField, 'x')), _a[yField] = __assign(__assign({}, meta[yField]), getMetaMinMax(yField, 'y')), _a));\n};\n/**\n * 获取回归函数表达式\n * @param {string} type - 回归函数类型\n * @param {D3RegressionResult} res - 回归计算结果集\n * @return {string}\n */\nexport function getRegressionEquation(type, res) {\n  var _a, _b, _c;\n  var roundByPrecision = function (n, p) {\n    if (p === void 0) {\n      p = 4;\n    }\n    return Math.round(n * Math.pow(10, p)) / Math.pow(10, p);\n  };\n  var safeFormat = function (value) {\n    return Number.isFinite(value) ? roundByPrecision(value) : '?';\n  };\n  switch (type) {\n    case 'linear':\n      // y = ax + b\n      return \"y = \".concat(safeFormat(res.a), \"x + \").concat(safeFormat(res.b), \", R^2 = \").concat(safeFormat(res.rSquared));\n    case 'exp':\n      // y = ae^(bx)\n      return \"y = \".concat(safeFormat(res.a), \"e^(\").concat(safeFormat(res.b), \"x), R^2 = \").concat(safeFormat(res.rSquared));\n    case 'log':\n      // y = a · ln(x) + b\n      return \"y = \".concat(safeFormat(res.a), \"ln(x) + \").concat(safeFormat(res.b), \", R^2 = \").concat(safeFormat(res.rSquared));\n    case 'quad':\n      // y = ax^2 + bx + c\n      return \"y = \".concat(safeFormat(res.a), \"x^2 + \").concat(safeFormat(res.b), \"x + \").concat(safeFormat(res.c), \", R^2 = \").concat(safeFormat(res.rSquared));\n    case 'poly':\n      // y = anx^n + ... + a1x + a0\n      // eslint-disable-next-line no-case-declarations\n      var temp = \"y = \".concat(safeFormat((_a = res.coefficients) === null || _a === void 0 ? void 0 : _a[0]), \" + \").concat(safeFormat((_b = res.coefficients) === null || _b === void 0 ? void 0 : _b[1]), \"x + \").concat(safeFormat((_c = res.coefficients) === null || _c === void 0 ? void 0 : _c[2]), \"x^2\");\n      for (var i = 3; i < res.coefficients.length; ++i) {\n        temp += \" + \".concat(safeFormat(res.coefficients[i]), \"x^\").concat(i);\n      }\n      return \"\".concat(temp, \", R^2 = \").concat(safeFormat(res.rSquared));\n    case 'pow':\n      // y = ax^b\n      return \"y = \".concat(safeFormat(res.a), \"x^\").concat(safeFormat(res.b), \", R^2 = \").concat(safeFormat(res.rSquared));\n  }\n  return null;\n}","map":{"version":3,"names":["get","isArray","isNumber","regressionExp","regressionLinear","regressionLoess","regressionLog","regressionPoly","regressionPow","regressionQuad","getSplinePath","REGRESSION_MAP","exp","linear","loess","log","poly","pow","quad","getQuadrantDefaultConfig","xBaseline","yBaseline","textOffset","defaultConfig","regionStyle","position","start","end","style","fill","opacity","lineStyle","stroke","lineWidth","labelStyle","offsetX","offsetY","textAlign","textBaseline","fontSize","splinePath","data","config","view","_a","options","xField","yField","xScaleView","getScaleByField","yScaleView","pathData","map","d","getCoordinate","convert","x","scale","y","getPath","regressionLine","type","algorithm","customEquation","equation","reg","getRegressionEquation","getMeta","_b","meta","xFieldValue","yFieldValue","xIsPositiveNumber","yIsPositiveNumber","getMetaMinMax","field","axis","fieldMeta","getCustomValue","range","__assign","res","roundByPrecision","n","p","Math","round","safeFormat","value","Number","isFinite","concat","a","b","rSquared","c","temp","coefficients","_c","i","length"],"sources":["../../../src/plots/scatter/util.ts"],"sourcesContent":["import { View } from '@antv/g2';\nimport { get, isArray, isNumber } from '@antv/util';\nimport {\n  regressionExp,\n  regressionLinear,\n  regressionLoess,\n  regressionLog,\n  regressionPoly,\n  regressionPow,\n  regressionQuad,\n} from 'd3-regression';\nimport { getSplinePath } from '../../utils';\nimport { ScatterOptions } from './types';\n\nconst REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad,\n};\n\ntype RenderOptions = {\n  view: View;\n  options: ScatterOptions;\n};\n\ntype D3RegressionResult = {\n  a?: number;\n  b?: number;\n  c?: number;\n  coefficients?: number[];\n  rSquared?: number;\n};\n\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\nexport function getQuadrantDefaultConfig(xBaseline: number, yBaseline: number) {\n  // 文本便宜距离\n  const textOffset = 10;\n  // 四象限默认样式\n  const defaultConfig: { [key: string]: any } = {\n    regionStyle: [\n      {\n        position: {\n          start: [xBaseline, 'max'],\n          end: ['max', yBaseline],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', 'max'],\n          end: [xBaseline, yBaseline],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', yBaseline],\n          end: [xBaseline, 'min'],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: [xBaseline, yBaseline],\n          end: ['max', 'min'],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n    ],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1,\n    },\n    labelStyle: [\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n    ],\n  };\n  return defaultConfig;\n}\n\nconst splinePath = (data: number[][], config: RenderOptions) => {\n  const {\n    view,\n    options: { xField, yField },\n  } = config;\n  const xScaleView = view.getScaleByField(xField);\n  const yScaleView = view.getScaleByField(yField);\n  const pathData = data.map((d: [number, number]) =>\n    view.getCoordinate().convert({ x: xScaleView.scale(d[0]), y: yScaleView.scale(d[1]) })\n  );\n  return getSplinePath(pathData, false);\n};\n\nexport const getPath = (config: RenderOptions) => {\n  const { options } = config;\n  const { xField, yField, data, regressionLine } = options;\n  const { type = 'linear', algorithm, equation: customEquation } = regressionLine;\n  let pathData: Array<[number, number]>;\n  let equation = null;\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n    equation = customEquation;\n  } else {\n    const reg = REGRESSION_MAP[type]()\n      .x((d) => d[xField])\n      .y((d) => d[yField]);\n    pathData = reg(data);\n    equation = getRegressionEquation(type, pathData as D3RegressionResult);\n  }\n  return [splinePath(pathData, config), equation];\n};\n\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\nexport const getMeta = (\n  options: Pick<ScatterOptions, 'meta' | 'xField' | 'yField' | 'data'>\n): ScatterOptions['meta'] => {\n  const { meta = {}, xField, yField, data } = options;\n  const xFieldValue = data[0][xField];\n  const yFieldValue = data[0][yField];\n  const xIsPositiveNumber = xFieldValue > 0;\n  const yIsPositiveNumber = yFieldValue > 0;\n\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n  function getMetaMinMax(field: string, axis: 'x' | 'y') {\n    const fieldMeta = get(meta, [field]);\n\n    function getCustomValue(type: 'min' | 'max') {\n      return get(fieldMeta, type);\n    }\n\n    const range = {};\n\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n\n      return range;\n    }\n\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n\n    return range;\n  }\n\n  return {\n    ...meta,\n    [xField]: {\n      ...meta[xField],\n      ...getMetaMinMax(xField, 'x'),\n    },\n    [yField]: {\n      ...meta[yField],\n      ...getMetaMinMax(yField, 'y'),\n    },\n  };\n};\n\n/**\n * 获取回归函数表达式\n * @param {string} type - 回归函数类型\n * @param {D3RegressionResult} res - 回归计算结果集\n * @return {string}\n */\nexport function getRegressionEquation(type: string, res: D3RegressionResult) {\n  const roundByPrecision = (n, p = 4) => Math.round(n * Math.pow(10, p)) / Math.pow(10, p);\n  const safeFormat = (value) => (Number.isFinite(value) ? roundByPrecision(value) : '?');\n\n  switch (type) {\n    case 'linear':\n      // y = ax + b\n      return `y = ${safeFormat(res.a)}x + ${safeFormat(res.b)}, R^2 = ${safeFormat(res.rSquared)}`;\n    case 'exp':\n      // y = ae^(bx)\n      return `y = ${safeFormat(res.a)}e^(${safeFormat(res.b)}x), R^2 = ${safeFormat(res.rSquared)}`;\n    case 'log':\n      // y = a · ln(x) + b\n      return `y = ${safeFormat(res.a)}ln(x) + ${safeFormat(res.b)}, R^2 = ${safeFormat(res.rSquared)}`;\n    case 'quad':\n      // y = ax^2 + bx + c\n      return `y = ${safeFormat(res.a)}x^2 + ${safeFormat(res.b)}x + ${safeFormat(res.c)}, R^2 = ${safeFormat(\n        res.rSquared\n      )}`;\n    case 'poly':\n      // y = anx^n + ... + a1x + a0\n      // eslint-disable-next-line no-case-declarations\n      let temp = `y = ${safeFormat(res.coefficients?.[0])} + ${safeFormat(res.coefficients?.[1])}x + ${safeFormat(\n        res.coefficients?.[2]\n      )}x^2`;\n      for (let i = 3; i < res.coefficients.length; ++i) {\n        temp += ` + ${safeFormat(res.coefficients[i])}x^${i}`;\n      }\n      return `${temp}, R^2 = ${safeFormat(res.rSquared)}`;\n    case 'pow':\n      // y = ax^b\n      return `y = ${safeFormat(res.a)}x^${safeFormat(res.b)}, R^2 = ${safeFormat(res.rSquared)}`;\n  }\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}