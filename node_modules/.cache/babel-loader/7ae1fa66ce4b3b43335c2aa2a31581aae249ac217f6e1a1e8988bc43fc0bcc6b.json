{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n    LUcolj = new Float64Array(rows);\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n        pivotSign = -pivotSign;\n      }\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n    let lu = this.LU;\n    let rows = lu.rows;\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}","map":{"version":3,"names":["Matrix","WrapperMatrix2D","LuDecomposition","constructor","matrix","checkMatrix","lu","clone","rows","columns","pivotVector","Float64Array","pivotSign","i","j","k","p","s","t","v","LUcolj","kmax","get","Math","min","set","abs","LU","isSingular","data","col","solve","value","Error","count","X","subMatrixRow","determinant","isSquare","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","Array","from"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/layout/node_modules/ml-matrix/src/dc/lu.js"],"sourcesContent":["import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}