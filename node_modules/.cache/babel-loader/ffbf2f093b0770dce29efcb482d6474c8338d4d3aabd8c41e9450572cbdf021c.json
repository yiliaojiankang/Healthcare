{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _isTypedArray from \"lodash/isTypedArray\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isArray from \"lodash/isArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nimport { AST_TOKEN_TYPES, DefineValuePlaceholder, STORAGE_CLASS, Target } from '@antv/g-webgpu-core';\nimport { createCanvas } from './utils/canvas';\nexport var Kernel = /*#__PURE__*/function () {\n  function Kernel(engine, configService) {\n    _classCallCheck(this, Kernel);\n    this.engine = engine;\n    this.configService = configService;\n    this.model = void 0;\n    this.dirty = true;\n    this.compiledBundle = void 0;\n    this.initPromise = void 0;\n  }\n  _createClass(Kernel, [{\n    key: \"init\",\n    value: function init() {\n      var _this$configService$g = this.configService.get(),\n        canvas = _this$configService$g.canvas,\n        engineOptions = _this$configService$g.engineOptions;\n      this.initPromise = this.engine.init(_objectSpread({\n        canvas: canvas || createCanvas(),\n        // swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n        antialiasing: false\n      }, engineOptions));\n    }\n  }, {\n    key: \"setBundle\",\n    value: function setBundle(bundle) {\n      // deep clone\n      this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n    }\n  }, {\n    key: \"setDispatch\",\n    value: function setDispatch(dispatch) {\n      if (this.compiledBundle.context) {\n        this.compiledBundle.context.dispatch = dispatch;\n      }\n      return this;\n    }\n  }, {\n    key: \"setMaxIteration\",\n    value: function setMaxIteration(maxIteration) {\n      if (this.compiledBundle.context) {\n        this.compiledBundle.context.maxIteration = maxIteration;\n      }\n      return this;\n    }\n  }, {\n    key: \"setBinding\",\n    value: function setBinding(name, data) {\n      var _this = this;\n      if (typeof name === 'string') {\n        var isNumberLikeData = _isNumber(data) || _isTypedArray(data) || _isArray(data);\n        if (this.compiledBundle && this.compiledBundle.context) {\n          // set define, eg. setBinding('MAX_LENGTH', 10)\n          var existedDefine = this.compiledBundle.context.defines.find(function (b) {\n            return b.name === name;\n          });\n          if (existedDefine) {\n            existedDefine.value = data;\n            return this;\n          }\n\n          // set uniform\n          var existedBinding = this.compiledBundle.context.uniforms.find(function (b) {\n            return b.name === name;\n          });\n          if (existedBinding) {\n            // update uniform or buffer\n            if (isNumberLikeData) {\n              // @ts-ignore\n              existedBinding.data = data;\n              existedBinding.isReferer = false;\n              if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n                if (this.model) {\n                  // @ts-ignore\n                  this.model.updateUniform(name, data);\n                }\n              } else {\n                if (this.model) {\n                  // @ts-ignore\n                  this.model.updateBuffer(name, data);\n                }\n              }\n            } else {\n              // update with another kernel\n              existedBinding.isReferer = true;\n              // @ts-ignore\n              existedBinding.data = data;\n            }\n          }\n        }\n      } else {\n        Object.keys(name).forEach(function (key) {\n          _this.setBinding(key, name[key]);\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n        var iteration,\n          i,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                iteration = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n                if (!this.dirty) {\n                  _context.next = 6;\n                  break;\n                }\n                if (this.compiledBundle.context) {\n                  if (iteration > 1) {\n                    this.compiledBundle.context.maxIteration = iteration;\n                  } else {\n                    this.compiledBundle.context.maxIteration++;\n                  }\n                }\n                _context.next = 5;\n                return this.compile();\n              case 5:\n                this.dirty = false;\n              case 6:\n                this.engine.beginFrame();\n\n                // 首先开启当前 frame 的 compute pass\n                this.engine.clear({});\n                if (this.compiledBundle.context) {\n                  this.compiledBundle.context.uniforms.filter(function (_ref) {\n                    var isReferer = _ref.isReferer;\n                    return isReferer;\n                  }).forEach(function (_ref2) {\n                    var data = _ref2.data,\n                      name = _ref2.name;\n                    // @ts-ignore\n                    _this2.model.confirmInput(data.model, name);\n                  });\n                }\n                for (i = 0; i < iteration; i++) {\n                  this.model.run();\n                }\n                this.engine.endFrame();\n                return _context.abrupt(\"return\", this);\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n    /**\n     * read output from GPUBuffer\n     */\n  }, {\n    key: \"getOutput\",\n    value: function () {\n      var _getOutput = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.model.readData());\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getOutput() {\n        return _getOutput.apply(this, arguments);\n      }\n      return getOutput;\n    }()\n  }, {\n    key: \"compile\",\n    value: function () {\n      var _compile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var context, target, shader;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.initPromise;\n              case 2:\n                context = _objectSpread({}, this.compiledBundle.context);\n                target = this.engine.supportWebGPU ? this.engine.useWGSL ? Target.WGSL : Target.GLSL450 : Target.GLSL100;\n                shader = this.compiledBundle.shaders[target]; // this.bindings?.forEach(({ name, data }) => {\n                //   if (name === name.toUpperCase()) {\n                //     const define = context.defines.find((d) => d.name === name);\n                //     if (define) {\n                //       // @ts-ignore\n                //       define.value = data;\n                //     }\n                //   }\n                // });\n                // 生成运行时 define\n                context.defines.filter(function (define) {\n                  return define.runtime;\n                }).forEach(function (define) {\n                  var valuePlaceHolder = \"\".concat(DefineValuePlaceholder).concat(define.name);\n                  shader = shader.replace(valuePlaceHolder, \"\".concat(define.value));\n                });\n                context.shader = shader;\n\n                // 添加 uniform 绑定的数据\n                context.uniforms.forEach(function (uniform) {\n                  // const binding = this.bindings.find((b) => b.name === uniform.name);\n                  // if (binding) {\n                  //   // @ts-ignore\n                  //   uniform.data = binding.referer || binding.data;\n                  //   // @ts-ignore\n                  //   uniform.isReferer = !!binding.referer;\n                  // }\n\n                  // 未指定数据，尝试根据 uniform 类型初始化\n                  if (!uniform.data) {\n                    if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n                      var sizePerElement = 1;\n                      if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n                        sizePerElement = 1;\n                      } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n                        sizePerElement = 4;\n                      }\n                      uniform.data = new Float32Array(context.output.length * sizePerElement).fill(0);\n                    }\n                  }\n                });\n                // } else if (uniform.type === 'image2D') {\n                //   // @ts-ignore\n                //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n                // }\n\n                this.compiledBundle.context = context;\n                _context3.next = 11;\n                return this.engine.createComputeModel(this.compiledBundle.context);\n              case 11:\n                this.model = _context3.sent;\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function compile() {\n        return _compile.apply(this, arguments);\n      }\n      return compile;\n    }()\n  }]);\n  return Kernel;\n}();","map":{"version":3,"names":["AST_TOKEN_TYPES","DefineValuePlaceholder","STORAGE_CLASS","Target","createCanvas","Kernel","engine","configService","_classCallCheck","model","dirty","compiledBundle","initPromise","_createClass","key","value","init","_this$configService$g","get","canvas","engineOptions","_objectSpread","antialiasing","setBundle","bundle","JSON","parse","stringify","setDispatch","dispatch","context","setMaxIteration","maxIteration","setBinding","name","data","_this","isNumberLikeData","_isNumber","_isTypedArray","_isArray","existedDefine","defines","find","b","existedBinding","uniforms","isReferer","storageClass","Uniform","updateUniform","updateBuffer","Object","keys","forEach","_execute","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","iteration","i","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","compile","beginFrame","clear","filter","_ref","_ref2","confirmInput","run","endFrame","abrupt","stop","execute","apply","_getOutput","_callee2","_callee2$","_context2","readData","getOutput","_compile","_callee3","target","shader","_callee3$","_context3","supportWebGPU","useWGSL","WGSL","GLSL450","GLSL100","shaders","define","runtime","valuePlaceHolder","concat","replace","uniform","StorageBuffer","sizePerElement","type","FloatArray","Vector4FloatArray","Float32Array","output","fill","createComputeModel","sent"],"sources":["../src/Kernel.ts"],"sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  DefineValuePlaceholder,\n  IComputeModel,\n  IConfigService,\n  IRendererService,\n  KernelBundle,\n  STORAGE_CLASS,\n  Target,\n} from '@antv/g-webgpu-core';\nimport { isArray, isNumber, isTypedArray } from 'lodash';\nimport { createCanvas } from './utils/canvas';\n\nexport class Kernel {\n\n  private model: IComputeModel;\n\n  private dirty: boolean = true;\n\n  private compiledBundle: KernelBundle;\n\n  private initPromise: Promise<void>;\n  constructor(\n    private readonly engine: IRendererService,\n    private readonly configService: IConfigService,\n  ) {}\n\n  public init() {\n    const { canvas, engineOptions } = this.configService.get();\n\n    this.initPromise = this.engine.init({\n      canvas: canvas || createCanvas(),\n      // swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n  }\n\n  public setBundle(bundle: KernelBundle) {\n    // deep clone\n    this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n  }\n\n  public setDispatch(dispatch: [number, number, number]) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.dispatch = dispatch;\n    }\n    return this;\n  }\n\n  public setMaxIteration(maxIteration: number) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.maxIteration = maxIteration;\n    }\n    return this;\n  }\n\n  public setBinding(\n    name:\n      | string\n      | Record<\n          string,\n          | number\n          | number[]\n          | Float32Array\n          | Uint8Array\n          | Uint16Array\n          | Uint32Array\n          | Int8Array\n          | Int16Array\n          | Int32Array\n        >,\n    data?:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Kernel,\n  ) {\n    if (typeof name === 'string') {\n      const isNumberLikeData =\n        isNumber(data) || isTypedArray(data) || isArray(data);\n      if (this.compiledBundle && this.compiledBundle.context) {\n        // set define, eg. setBinding('MAX_LENGTH', 10)\n        const existedDefine = this.compiledBundle.context.defines.find(\n          (b) => b.name === name,\n        );\n        if (existedDefine) {\n          existedDefine.value = data as number;\n          return this;\n        }\n\n        // set uniform\n        const existedBinding = this.compiledBundle.context.uniforms.find(\n          (b) => b.name === name,\n        );\n        if (existedBinding) {\n          // update uniform or buffer\n          if (isNumberLikeData) {\n            // @ts-ignore\n            existedBinding.data = data;\n            existedBinding.isReferer = false;\n\n            if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateUniform(name, data);\n              }\n            } else {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateBuffer(name, data);\n              }\n            }\n          } else {\n            // update with another kernel\n            existedBinding.isReferer = true;\n            // @ts-ignore\n            existedBinding.data = data as Kernel;\n          }\n        }\n      }\n    } else {\n      Object.keys(name).forEach((key) => {\n        this.setBinding(key, name[key]);\n      });\n    }\n    return this;\n  }\n\n  public async execute(iteration: number = 1) {\n    if (this.dirty) {\n      if (this.compiledBundle.context) {\n        if (iteration > 1) {\n          this.compiledBundle.context.maxIteration = iteration;\n        } else {\n          this.compiledBundle.context.maxIteration++;\n        }\n      }\n      await this.compile();\n      this.dirty = false;\n    }\n\n    this.engine.beginFrame();\n\n    // 首先开启当前 frame 的 compute pass\n    this.engine.clear({});\n\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.uniforms\n        .filter(({ isReferer }) => isReferer)\n        .forEach(({ data, name }) => {\n          // @ts-ignore\n          this.model.confirmInput((data as Kernel).model, name);\n        });\n    }\n    for (let i = 0; i < iteration; i++) {\n      this.model.run();\n    }\n\n    this.engine.endFrame();\n    return this;\n  }\n\n  /**\n   * read output from GPUBuffer\n   */\n  public async getOutput() {\n    return this.model.readData();\n  }\n\n  private async compile() {\n    await this.initPromise;\n\n    const context = {\n      ...this.compiledBundle.context!,\n    };\n\n    const target = this.engine.supportWebGPU\n      ? this.engine.useWGSL\n        ? Target.WGSL\n        : Target.GLSL450\n      : Target.GLSL100;\n    let shader = this.compiledBundle.shaders[target];\n\n    // this.bindings?.forEach(({ name, data }) => {\n    //   if (name === name.toUpperCase()) {\n    //     const define = context.defines.find((d) => d.name === name);\n    //     if (define) {\n    //       // @ts-ignore\n    //       define.value = data;\n    //     }\n    //   }\n    // });\n\n    // 生成运行时 define\n    context.defines\n      .filter((define) => define.runtime)\n      .forEach((define) => {\n        const valuePlaceHolder = `${DefineValuePlaceholder}${define.name}`;\n        shader = shader.replace(valuePlaceHolder, `${define.value}`);\n      });\n\n    context.shader = shader;\n\n    // 添加 uniform 绑定的数据\n    context.uniforms.forEach((uniform) => {\n      // const binding = this.bindings.find((b) => b.name === uniform.name);\n      // if (binding) {\n      //   // @ts-ignore\n      //   uniform.data = binding.referer || binding.data;\n      //   // @ts-ignore\n      //   uniform.isReferer = !!binding.referer;\n      // }\n\n      // 未指定数据，尝试根据 uniform 类型初始化\n      if (!uniform.data) {\n        if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n          let sizePerElement = 1;\n          if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n            sizePerElement = 1;\n          } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n            sizePerElement = 4;\n          }\n          uniform.data = new Float32Array(\n            context.output.length! * sizePerElement,\n          ).fill(0);\n        }\n      }\n    });\n    // } else if (uniform.type === 'image2D') {\n    //   // @ts-ignore\n    //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n    // }\n\n    this.compiledBundle.context = context;\n    this.model = await this.engine.createComputeModel(\n      this.compiledBundle.context,\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}