{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __extends, __read, __spreadArray } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Action from '../../base';\n/**\n * @ignore\n * 辅助框 Action 的基类\n */\nvar MultipleMaskBase = /** @class */function (_super) {\n  __extends(MultipleMaskBase, _super);\n  function MultipleMaskBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // mask 图形\n    _this.maskShapes = [];\n    // 开始 mask 的标记\n    _this.starting = false;\n    // 开始移动的标记\n    _this.moving = false;\n    // 记录 mask 节点\n    _this.recordPoints = null;\n    _this.preMovePoint = null;\n    _this.shapeType = 'path';\n    _this.maskType = 'multi-mask';\n    return _this;\n  }\n  /**\n   * 获取当前的位置\n   */\n  MultipleMaskBase.prototype.getCurrentPoint = function () {\n    var event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y\n    };\n  };\n  /**\n   * 触发 mask 的事件\n   * @param type\n   */\n  MultipleMaskBase.prototype.emitEvent = function (type) {\n    var eventName = \"\".concat(this.maskType, \":\").concat(type);\n    var view = this.context.view;\n    var event = this.context.event;\n    var target = {\n      type: this.shapeType,\n      name: this.maskType,\n      get: function (key) {\n        return target.hasOwnProperty(key) ? target[key] : undefined;\n      }\n    };\n    view.emit(eventName, {\n      target: target,\n      maskShapes: this.maskShapes,\n      multiPoints: this.recordPoints,\n      x: event.x,\n      y: event.y\n    });\n  };\n  /**\n   * 创建 mask\n   * @param index\n   */\n  MultipleMaskBase.prototype.createMask = function (index) {\n    var view = this.context.view;\n    var points = this.recordPoints[index];\n    var maskAttrs = this.getMaskAttrs(points);\n    var maskShape = view.foregroundGroup.addShape({\n      type: this.shapeType,\n      name: 'mask',\n      draggable: true,\n      attrs: __assign({\n        fill: '#C5D4EB',\n        opacity: 0.3\n      }, maskAttrs)\n    });\n    this.maskShapes.push(maskShape);\n  };\n  /**\n   * 生成 mask 的路径\n   */\n  MultipleMaskBase.prototype.getMaskPath = function (points) {\n    return [];\n  };\n  /**\n   * 显示\n   */\n  MultipleMaskBase.prototype.show = function () {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach(function (maskShape) {\n        return maskShape.show();\n      });\n      this.emitEvent('show');\n    }\n  };\n  /**\n   * 开始\n   */\n  MultipleMaskBase.prototype.start = function (arg) {\n    this.recordPointStart();\n    this.starting = true;\n    // 开始时，保证移动结束\n    this.moving = false;\n    // 开始第 index 个 mask\n    var index = this.recordPoints.length - 1;\n    this.createMask(index);\n    // 开始时设置 capture: false，可以避免创建、resize 时触发事件\n    this.updateShapesCapture(false);\n    this.updateMask(arg === null || arg === void 0 ? void 0 : arg.maskStyle);\n    this.emitEvent('start');\n  };\n  /**\n   * 开始移动\n   */\n  MultipleMaskBase.prototype.moveStart = function () {\n    this.moving = true;\n    this.preMovePoint = this.getCurrentPoint();\n    this.updateShapesCapture(false);\n  };\n  /**\n   * 移动 mask\n   */\n  MultipleMaskBase.prototype.move = function () {\n    if (!this.moving || this.maskShapes.length === 0) {\n      return;\n    }\n    var currentPoint = this.getCurrentPoint();\n    var preMovePoint = this.preMovePoint;\n    var dx = currentPoint.x - preMovePoint.x;\n    var dy = currentPoint.y - preMovePoint.y;\n    // 只移动当前 event (x, y) 所在的某个 mask\n    var index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      this.recordPoints[index].forEach(function (point) {\n        point.x += dx;\n        point.y += dy;\n      });\n      this.updateMask();\n      this.emitEvent('change');\n      this.preMovePoint = currentPoint;\n    }\n  };\n  /**\n   * 更新\n   * @param maskStyle\n   */\n  MultipleMaskBase.prototype.updateMask = function (maskStyle) {\n    var _this = this;\n    this.recordPoints.forEach(function (points, index) {\n      var attrs = deepMix({}, _this.getMaskAttrs(points), maskStyle);\n      _this.maskShapes[index].attr(attrs);\n    });\n  };\n  /**\n   * 大小变化\n   */\n  MultipleMaskBase.prototype.resize = function () {\n    if (this.starting && this.maskShapes.length > 0) {\n      this.recordPointContinue();\n      this.updateMask();\n      this.emitEvent('change');\n    }\n  };\n  /**\n   * 结束移动\n   */\n  MultipleMaskBase.prototype.moveEnd = function () {\n    this.moving = false;\n    this.preMovePoint = null;\n    this.updateShapesCapture(true);\n  };\n  /**\n   * 结束\n   */\n  MultipleMaskBase.prototype.end = function () {\n    this.starting = false;\n    this.emitEvent('end');\n    this.updateShapesCapture(true);\n  };\n  /**\n   * 隐藏\n   */\n  MultipleMaskBase.prototype.hide = function () {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach(function (maskShape) {\n        return maskShape.hide();\n      });\n      this.emitEvent('hide');\n    }\n  };\n  /**\n   * 清除某个 mask\n   */\n  MultipleMaskBase.prototype.remove = function () {\n    var index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      // event (x, y) 在的某个 mask 区域内时，清除该 mask\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.updateShapesCapture(true);\n      this.emitEvent('change');\n    }\n  };\n  /**\n   * 清除全部 mask\n   */\n  MultipleMaskBase.prototype.clearAll = function () {\n    this.recordPointClear();\n    this.maskShapes.forEach(function (maskShape) {\n      return maskShape.remove();\n    });\n    this.maskShapes = [];\n    this.preMovePoint = null;\n  };\n  /**\n   * 清除\n   */\n  MultipleMaskBase.prototype.clear = function () {\n    var index = this.getCurMaskShapeIndex();\n    if (index === -1) {\n      this.recordPointClear();\n      this.maskShapes.forEach(function (maskShape) {\n        return maskShape.remove();\n      });\n      this.maskShapes = [];\n      this.emitEvent('clearAll');\n    } else {\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.emitEvent('clearSingle');\n    }\n    this.preMovePoint = null;\n  };\n  /**\n   * 销毁\n   */\n  MultipleMaskBase.prototype.destroy = function () {\n    this.clear();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取 mask 节点记录\n   */\n  MultipleMaskBase.prototype.getRecordPoints = function () {\n    var _a;\n    return __spreadArray([], __read((_a = this.recordPoints) !== null && _a !== void 0 ? _a : []), false);\n  };\n  /**\n   * 创建 mask 节点记录\n   */\n  MultipleMaskBase.prototype.recordPointStart = function () {\n    var recordPoints = this.getRecordPoints();\n    var currentPoint = this.getCurrentPoint();\n    this.recordPoints = __spreadArray(__spreadArray([], __read(recordPoints), false), [[currentPoint]], false);\n  };\n  /**\n   * 持续记录 mask 节点\n   */\n  MultipleMaskBase.prototype.recordPointContinue = function () {\n    var recordPoints = this.getRecordPoints();\n    var currentPoint = this.getCurrentPoint();\n    var lastPoints = recordPoints.splice(-1, 1)[0] || [];\n    lastPoints.push(currentPoint);\n    this.recordPoints = __spreadArray(__spreadArray([], __read(recordPoints), false), [lastPoints], false);\n  };\n  /**\n   * 清除 mask 节点 记录\n   */\n  MultipleMaskBase.prototype.recordPointClear = function () {\n    this.recordPoints = [];\n  };\n  /**\n   * 设置 capture\n   * false: 避免创建、resize 时触发事件\n   * true: 正常触发其它事件\n   * @param isCapture\n   */\n  MultipleMaskBase.prototype.updateShapesCapture = function (isCapture) {\n    this.maskShapes.forEach(function (maskShape) {\n      return maskShape.set('capture', isCapture);\n    });\n  };\n  /**\n   *\n   * @returns 获取当前 event (x, y) 所在 maskShape 的 index\n   */\n  MultipleMaskBase.prototype.getCurMaskShapeIndex = function () {\n    var currentPoint = this.getCurrentPoint();\n    return this.maskShapes.findIndex(function (maskShape) {\n      var _a = maskShape.attrs,\n        width = _a.width,\n        height = _a.height,\n        r = _a.r;\n      var isEmpty = width === 0 || height === 0 || r === 0;\n      return !isEmpty && maskShape.isHit(currentPoint.x, currentPoint.y);\n    });\n  };\n  return MultipleMaskBase;\n}(Action);\nexport default MultipleMaskBase;","map":{"version":3,"names":["deepMix","Action","MultipleMaskBase","_super","__extends","_this","apply","arguments","maskShapes","starting","moving","recordPoints","preMovePoint","shapeType","maskType","prototype","getCurrentPoint","event","context","x","y","emitEvent","type","eventName","concat","view","target","name","get","key","hasOwnProperty","undefined","emit","multiPoints","createMask","index","points","maskAttrs","getMaskAttrs","maskShape","foregroundGroup","addShape","draggable","attrs","__assign","fill","opacity","push","getMaskPath","show","length","forEach","start","arg","recordPointStart","updateShapesCapture","updateMask","maskStyle","moveStart","move","currentPoint","dx","dy","getCurMaskShapeIndex","point","attr","resize","recordPointContinue","moveEnd","end","hide","remove","splice","clearAll","recordPointClear","clear","destroy","call","getRecordPoints","__spreadArray","__read","_a","lastPoints","isCapture","set","findIndex","width","height","r","isEmpty","isHit"],"sources":["../../../../../src/interaction/action/mask/multiple/base.ts"],"sourcesContent":["import { deepMix } from '@antv/util';\nimport Action from '../../base';\nimport { LooseObject } from '../../../../interface';\n\n/**\n * @ignore\n * 辅助框 Action 的基类\n */\nabstract class MultipleMaskBase extends Action {\n  // mask 图形\n  protected maskShapes = [];\n  // 开始 mask 的标记\n  protected starting = false;\n  // 开始移动的标记\n  protected moving = false;\n  // 记录 mask 节点\n  protected recordPoints = null;\n  protected preMovePoint = null;\n  protected shapeType = 'path';\n  protected maskType = 'multi-mask';\n\n  /**\n   * 获取当前的位置\n   */\n  protected getCurrentPoint() {\n    const event = this.context.event;\n    return {\n      x: event.x,\n      y: event.y,\n    };\n  }\n\n  /**\n   * 触发 mask 的事件\n   * @param type\n   */\n  protected emitEvent(type) {\n    const eventName = `${this.maskType}:${type}`;\n    const view = this.context.view;\n    const event = this.context.event;\n    const target = {\n      type: this.shapeType,\n      name: this.maskType,\n      get: (key: string) => (target.hasOwnProperty(key) ? target[key] : undefined),\n    };\n    view.emit(eventName, {\n      target,\n      maskShapes: this.maskShapes,\n      multiPoints: this.recordPoints,\n      x: event.x,\n      y: event.y,\n    });\n  }\n\n  /**\n   * 创建 mask\n   * @param index\n   */\n  private createMask(index: number) {\n    const view = this.context.view;\n    const points = this.recordPoints[index];\n    const maskAttrs = this.getMaskAttrs(points);\n    const maskShape = view.foregroundGroup.addShape({\n      type: this.shapeType,\n      name: 'mask',\n      draggable: true,\n      attrs: {\n        fill: '#C5D4EB',\n        opacity: 0.3,\n        ...maskAttrs,\n      },\n    });\n    this.maskShapes.push(maskShape);\n  }\n\n  /**\n   * 获取 mask shape attributes\n   * @param points\n   */\n  protected abstract getMaskAttrs(points: number[]): LooseObject;\n\n  /**\n   * 生成 mask 的路径\n   */\n  protected getMaskPath(points) {\n    return [];\n  }\n\n  /**\n   * 显示\n   */\n  public show() {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach((maskShape) => maskShape.show());\n      this.emitEvent('show');\n    }\n  }\n\n  /**\n   * 开始\n   */\n  public start(arg?: { maskStyle: LooseObject }) {\n    this.recordPointStart();\n\n    this.starting = true;\n    // 开始时，保证移动结束\n    this.moving = false;\n    // 开始第 index 个 mask\n    const index = this.recordPoints.length - 1;\n    this.createMask(index);\n    // 开始时设置 capture: false，可以避免创建、resize 时触发事件\n    this.updateShapesCapture(false);\n    this.updateMask(arg?.maskStyle);\n    this.emitEvent('start');\n  }\n\n  /**\n   * 开始移动\n   */\n  public moveStart() {\n    this.moving = true;\n    this.preMovePoint = this.getCurrentPoint();\n    this.updateShapesCapture(false);\n  }\n\n  /**\n   * 移动 mask\n   */\n  public move() {\n    if (!this.moving || this.maskShapes.length === 0) {\n      return;\n    }\n    const currentPoint = this.getCurrentPoint();\n    const preMovePoint = this.preMovePoint;\n    const dx = currentPoint.x - preMovePoint.x;\n    const dy = currentPoint.y - preMovePoint.y;\n\n    // 只移动当前 event (x, y) 所在的某个 mask\n    const index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      this.recordPoints[index].forEach((point) => {\n        point.x += dx;\n        point.y += dy;\n      });\n      this.updateMask();\n      this.emitEvent('change');\n      this.preMovePoint = currentPoint;\n    }\n  }\n\n  /**\n   * 更新\n   * @param maskStyle\n   */\n  protected updateMask(maskStyle?: LooseObject) {\n    this.recordPoints.forEach((points, index) => {\n      const attrs = deepMix({}, this.getMaskAttrs(points), maskStyle);\n      this.maskShapes[index].attr(attrs);\n    });\n  }\n\n  /**\n   * 大小变化\n   */\n  public resize() {\n    if (this.starting && this.maskShapes.length > 0) {\n      this.recordPointContinue();\n\n      this.updateMask();\n      this.emitEvent('change');\n    }\n  }\n\n  /**\n   * 结束移动\n   */\n  public moveEnd() {\n    this.moving = false;\n    this.preMovePoint = null;\n    this.updateShapesCapture(true);\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.starting = false;\n    this.emitEvent('end');\n    this.updateShapesCapture(true);\n  }\n\n  /**\n   * 隐藏\n   */\n  public hide() {\n    if (this.maskShapes.length > 0) {\n      this.maskShapes.forEach((maskShape) => maskShape.hide());\n      this.emitEvent('hide');\n    }\n  }\n\n  /**\n   * 清除某个 mask\n   */\n  public remove() {\n    const index = this.getCurMaskShapeIndex();\n    if (index > -1) {\n      // event (x, y) 在的某个 mask 区域内时，清除该 mask\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.updateShapesCapture(true);\n      this.emitEvent('change');\n    }\n  }\n\n  /**\n   * 清除全部 mask\n   */\n  public clearAll() {\n    this.recordPointClear();\n    this.maskShapes.forEach((maskShape) => maskShape.remove());\n    this.maskShapes = [];\n    this.preMovePoint = null;\n  }\n\n  /**\n   * 清除\n   */\n  public clear() {\n    const index = this.getCurMaskShapeIndex();\n    if (index === -1) {\n      this.recordPointClear();\n      this.maskShapes.forEach((maskShape) => maskShape.remove());\n      this.maskShapes = [];\n      this.emitEvent('clearAll');\n    } else {\n      this.recordPoints.splice(index, 1);\n      this.maskShapes[index].remove();\n      this.maskShapes.splice(index, 1);\n      this.preMovePoint = null;\n      this.emitEvent('clearSingle');\n    }\n    this.preMovePoint = null;\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.clear();\n    super.destroy();\n  }\n\n  /**\n   * 获取 mask 节点记录\n   */\n  protected getRecordPoints() {\n    return [...(this.recordPoints ?? [])];\n  }\n\n  /**\n   * 创建 mask 节点记录\n   */\n  protected recordPointStart() {\n    const recordPoints = this.getRecordPoints();\n    const currentPoint = this.getCurrentPoint();\n    this.recordPoints = [...recordPoints, [currentPoint]];\n  }\n\n  /**\n   * 持续记录 mask 节点\n   */\n  protected recordPointContinue() {\n    const recordPoints = this.getRecordPoints();\n    const currentPoint = this.getCurrentPoint();\n    const lastPoints = recordPoints.splice(-1, 1)[0] || [];\n    lastPoints.push(currentPoint);\n    this.recordPoints = [...recordPoints, lastPoints];\n  }\n\n  /**\n   * 清除 mask 节点 记录\n   */\n  protected recordPointClear() {\n    this.recordPoints = [];\n  }\n\n  /**\n   * 设置 capture\n   * false: 避免创建、resize 时触发事件\n   * true: 正常触发其它事件\n   * @param isCapture\n   */\n  protected updateShapesCapture(isCapture: boolean) {\n    this.maskShapes.forEach((maskShape) => maskShape.set('capture', isCapture));\n  }\n\n  /**\n   *\n   * @returns 获取当前 event (x, y) 所在 maskShape 的 index\n   */\n  protected getCurMaskShapeIndex() {\n    const currentPoint = this.getCurrentPoint();\n    return this.maskShapes.findIndex((maskShape) => {\n      const { width, height, r } = maskShape.attrs;\n      const isEmpty = width === 0 || height === 0 || r === 0;\n      return !isEmpty && maskShape.isHit(currentPoint.x, currentPoint.y);\n    });\n  }\n}\n\nexport default MultipleMaskBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}