{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { each, isPlainObject, isString, isBoolean, mix, deepMix, clone } from '@antv/util';\nimport Shape from '../element/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nimport { uniqueId } from '../util/base';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\nvar ARROWS = ['startArrow', 'endArrow'];\nvar ItemBase = /** @class */function () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    // 是否开启优化，由 graph 根据当前图上节点数量来控制\n    this.optimize = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var model = this.get('model');\n    var id = model.id;\n    var itemType = this.get('type');\n    if (typeof id === 'undefined') {\n      id = uniqueId(itemType);\n    } else if (typeof id !== 'string') {\n      id = String(id);\n    }\n    this.get('model').id = id;\n    this.set('id', id);\n    var group = cfg.group;\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n    this.init();\n    this.draw();\n    var shapeType = model.shape || model.type || (itemType === 'edge' ? 'line' : 'circle');\n    var shapeFactory = this.get('shapeFactory');\n    if (shapeFactory && shapeFactory[shapeType]) {\n      var options = shapeFactory[shapeType].options;\n      // merge the stateStyles from item and shape\n      if (options && options.stateStyles) {\n        var styles = this.get('styles') || model.stateStyles;\n        styles = deepMix({}, options.stateStyles, styles);\n        this.set('styles', styles);\n      }\n    }\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group');\n    // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group');\n    // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n    if (!shapeFactory) {\n      return;\n    }\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n    var shapeType = cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n    this.setOriginStyle();\n    // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n  ItemBase.prototype.setOriginStyle = function () {\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    var keyShapeName = keyShape.get('name');\n    if (!this.get('originStyle')) {\n      // 第一次 set originStyle，直接拿首次渲染所有图形的 attrs\n      var originStyles = {};\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var shapeType = child.get('type');\n        var name_1 = child.get('name');\n        if (name_1 && name_1 !== keyShapeName) {\n          originStyles[name_1] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n          // The text's position and matrix is not allowed to be affected by states\n          if (shapeType === 'text' && originStyles[name_1]) {\n            delete originStyles[name_1].x;\n            delete originStyles[name_1].y;\n            delete originStyles[name_1].matrix;\n          }\n        } else {\n          var keyShapeStyle = self.getShapeStyleByName(); // 可优化，需要去除 child.attr 中其他 shape 名的对象\n          delete keyShapeStyle.path;\n          delete keyShapeStyle.matrix;\n          if (!keyShapeName) {\n            Object.assign(originStyles, keyShapeStyle);\n          } else {\n            // 若 keyShape 有 name 且 !name，这个图形不是 keyShape，给这个图形一个 name\n            if (!name_1) {\n              var shapeName = uniqueId('shape');\n              child.set('name', shapeName);\n              group['shapeMap'][shapeName] = child;\n              originStyles[shapeName] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n            } else {\n              originStyles[keyShapeName] = keyShapeStyle;\n            }\n          }\n        }\n      }\n      self.set('originStyle', originStyles);\n    } else {\n      // 第二次 set originStyles，需要找到不是 stateStyles 的样式，更新到 originStyles 中\n      // 上一次设置的 originStyle，是初始的 shape attrs\n      var styles_1 = this.get('originStyle');\n      // let styles: ShapeStyle = {};\n      if (keyShapeName && !styles_1[keyShapeName]) styles_1[keyShapeName] = {};\n      // 获取当前状态样式\n      var currentStatesStyle_1 = this.getCurrentStatesStyle();\n      var _loop_1 = function _loop_1(i) {\n        var child = children[i];\n        var name_2 = child.get('name');\n        var shapeAttrs = child.attr();\n        if (name_2 && name_2 !== keyShapeName) {\n          // 有 name 的非 keyShape 图形\n          var shapeStateStyle_1 = currentStatesStyle_1[name_2];\n          if (!styles_1[name_2]) styles_1[name_2] = {};\n          if (shapeStateStyle_1) {\n            Object.keys(shapeAttrs).forEach(function (key) {\n              var value = shapeAttrs[key];\n              if (value !== shapeStateStyle_1[key]) styles_1[name_2][key] = value;\n            });\n          } else {\n            styles_1[name_2] = child.get('type') !== 'image' ? clone(shapeAttrs) : self.getShapeStyleByName(name_2);\n          }\n        } else {\n          var shapeAttrs_1 = child.attr();\n          var keyShapeStateStyles_1 = {};\n          Object.keys(currentStatesStyle_1).forEach(function (styleKey) {\n            var subStyle = currentStatesStyle_1[styleKey];\n            if (styleKey === keyShapeName || !isPlainObject(subStyle)) {\n              keyShapeStateStyles_1[styleKey] = subStyle;\n            }\n          });\n          Object.keys(shapeAttrs_1).forEach(function (key) {\n            var value = shapeAttrs_1[key];\n            // 如果是对象且不是 arrow，则是其他 shape 的样式\n            // if (isPlainObject(value) && ARROWS.indexOf(name) === -1) return;\n            if (keyShapeStateStyles_1[key] !== value) {\n              if (keyShapeName) styles_1[keyShapeName][key] = value;else styles_1[key] = value;\n            }\n          });\n        }\n      };\n      // 遍历当前所有图形的 attrs，找到不是 stateStyles 的样式更新到 originStyles 中\n      for (var i = 0; i < children.length; i++) {\n        _loop_1(i);\n      }\n      delete styles_1.path;\n      delete styles_1.matrix;\n      delete styles_1.x;\n      delete styles_1.y;\n      if (styles_1[keyShapeName]) {\n        delete styles_1[keyShapeName].x;\n        delete styles_1[keyShapeName].y;\n        delete styles_1[keyShapeName].matrix;\n        delete styles_1[keyShapeName].path;\n      }\n      self.set('originStyle', styles_1);\n    }\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape;\n    if (name) {\n      currentShape = group['shapeMap'][name] || group.find(function (element) {\n        return element.get('name') === name;\n      });\n    } else {\n      currentShape = this.getKeyShape();\n    }\n    if (currentShape) {\n      var styles_2 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img' || isString(val)) {\n          styles_2[key] = val;\n        }\n      });\n      return styles_2;\n    }\n    return {};\n  };\n  ItemBase.prototype.getShapeCfg = function (model, updateType) {\n    var styles = this.get('styles');\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    var states = self.getStates();\n    if (!states || !states.length) {\n      return this.get('originStyle');\n    }\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n    if (isString(value)) {\n      stateName = \"\".concat(state, \":\").concat(value);\n      filterStateName = \"\".concat(state, \":\");\n    }\n    var newStates = states;\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.type;\n      // 调用 shape/shape.ts 中的 setState\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.type;\n    if (!states) {\n      states = originStates;\n    }\n    if (isString(states)) {\n      states = [states];\n    }\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 设置是否开启性能优化模式\n   * 目前影响：节点的状态样式更新是否影响相关边的更新\n   * @param {Boolean} enableOptimize 是否开启\n   */\n  ItemBase.prototype.setOptimize = function (enableOptimize) {\n    this.optimize = enableOptimize;\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n  ItemBase.prototype.refresh = function (updateType) {\n    var model = this.get('model');\n    // 更新元素位置\n    this.updatePosition(model);\n    // 更新元素内容，样式\n    this.updateShape(updateType);\n    // 做一些更新之后的操作\n    this.afterUpdate();\n    // 清除缓存\n    this.clearCache();\n  };\n  ItemBase.prototype.getUpdateType = function (cfg) {\n    return undefined;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n  ItemBase.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n    var model = this.get('model');\n    // 仅仅移动位置时，既不更新，也不重绘\n    if (updateType === 'move') {\n      this.updatePosition(cfg);\n    } else {\n      var oriVisible = model.visible;\n      var cfgVisible = cfg.visible;\n      if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n      var originPosition = {\n        x: model.x,\n        y: model.y\n      };\n      cfg.x = isNaN(+cfg.x) ? model.x : +cfg.x;\n      cfg.y = isNaN(+cfg.y) ? model.y : +cfg.y;\n      var styles = this.get('styles');\n      if (cfg.stateStyles) {\n        // 更新 item 时更新 this.get('styles') 中的值\n        var stateStyles = cfg.stateStyles;\n        mix(styles, stateStyles);\n        delete cfg.stateStyles;\n      }\n      // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n      Object.assign(model, cfg);\n      // 如果 x,y 有变化，先重置位置\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n      this.updateShape(updateType);\n    }\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n  ItemBase.prototype.updateShape = function (updateType) {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.type;\n    // 判定是否允许更新\n    // 1. 注册的节点允许更新（即有继承的/复写的 update 方法，即 update 方法没有被复写为 undefined）\n    // 2. 更新后的 shape 等于原先的 shape\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model, updateType);\n      shapeFactory.baseUpdate(shape, updateCfg, this, updateType);\n      // 更新完以后重新设置原始样式\n      if (updateType !== 'move') this.setOriginStyle();\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    }\n    // 更新后重置节点状态\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNaN(+cfg.x) ? +model.x : +cfg.x;\n    var y = isNaN(+cfg.y) ? +model.y : +cfg.y;\n    var group = this.get('group');\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n    model.x = x;\n    model.y = y;\n    var matrix = group.getMatrix();\n    if (matrix && matrix[6] === x && matrix[7] === y) return false;\n    group.resetMatrix();\n    // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n    translate(group, {\n      x: x,\n      y: y\n    });\n    this.clearCache(); // 位置更新后需要清除缓存\n    return true;\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n      if (animate) {\n        group.stopAnimate();\n      }\n      group['shapeMap'] = {};\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n  return ItemBase;\n}();\nexport default ItemBase;","map":{"version":3,"names":["__assign","each","isPlainObject","isString","isBoolean","mix","deepMix","clone","Shape","getBBox","translate","uniqueId","CACHE_BBOX","CACHE_CANVAS_BBOX","ARROWS","ItemBase","cfg","_cfg","destroyed","optimize","defaultCfg","id","undefined","type","model","group","animate","visible","locked","event","keyShape","states","Object","assign","getDefaultCfg","get","itemType","String","set","init","draw","shapeType","shape","shapeFactory","options","stateStyles","styles","prototype","calculateBBox","bbox","x","minX","y","minY","width","maxX","height","maxY","centerX","centerY","calculateCanvasBBox","drawInner","self","clear","changeVisibility","updatePosition","getShapeCfg","setOriginStyle","restoreStates","children","getKeyShape","keyShapeName","originStyles","i","length","child","name_1","attr","getShapeStyleByName","matrix","keyShapeStyle","path","shapeName","styles_1","currentStatesStyle_1","getCurrentStatesStyle","_loop_1","name_2","shapeAttrs","shapeStateStyle_1","keys","forEach","key","value","shapeAttrs_1","keyShapeStateStyles_1","styleKey","subStyle","state","setState","getFactory","val","clearCache","beforeDraw","afterDraw","afterUpdate","name","currentShape","find","element","styles_2","updateType","newModel","style","getStateStyle","stateStyle","getOriginStyle","getStates","stateName","filterStateName","concat","newStates","index","indexOf","push","splice","filterStates","filter","includes","clearStates","originStates","setOptimize","enableOptimize","getContainer","getModel","getType","getID","isItem","hasState","refresh","updateShape","getUpdateType","update","oriVisible","cfgVisible","originPosition","isNaN","shouldUpdate","updateCfg","baseUpdate","getMatrix","resetMatrix","getCanvasBBox","toFront","toBack","show","hide","isVisible","enableCapture","enable","destroy","stopAnimate","remove"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/item/item.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { each, isPlainObject, isString, isBoolean, mix, deepMix, clone } from '@antv/util';\nimport Shape from '../element/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nimport { uniqueId } from '../util/base';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\nvar ARROWS = ['startArrow', 'endArrow'];\nvar ItemBase = /** @class */function () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    // 是否开启优化，由 graph 根据当前图上节点数量来控制\n    this.optimize = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var model = this.get('model');\n    var id = model.id;\n    var itemType = this.get('type');\n    if (typeof id === 'undefined') {\n      id = uniqueId(itemType);\n    } else if (typeof id !== 'string') {\n      id = String(id);\n    }\n    this.get('model').id = id;\n    this.set('id', id);\n    var group = cfg.group;\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n    this.init();\n    this.draw();\n    var shapeType = model.shape || model.type || (itemType === 'edge' ? 'line' : 'circle');\n    var shapeFactory = this.get('shapeFactory');\n    if (shapeFactory && shapeFactory[shapeType]) {\n      var options = shapeFactory[shapeType].options;\n      // merge the stateStyles from item and shape\n      if (options && options.stateStyles) {\n        var styles = this.get('styles') || model.stateStyles;\n        styles = deepMix({}, options.stateStyles, styles);\n        this.set('styles', styles);\n      }\n    }\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group');\n    // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group');\n    // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n    if (!shapeFactory) {\n      return;\n    }\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n    var shapeType = cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n    this.setOriginStyle();\n    // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n  ItemBase.prototype.setOriginStyle = function () {\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    var keyShapeName = keyShape.get('name');\n    if (!this.get('originStyle')) {\n      // 第一次 set originStyle，直接拿首次渲染所有图形的 attrs\n      var originStyles = {};\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var shapeType = child.get('type');\n        var name_1 = child.get('name');\n        if (name_1 && name_1 !== keyShapeName) {\n          originStyles[name_1] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n          // The text's position and matrix is not allowed to be affected by states\n          if (shapeType === 'text' && originStyles[name_1]) {\n            delete originStyles[name_1].x;\n            delete originStyles[name_1].y;\n            delete originStyles[name_1].matrix;\n          }\n        } else {\n          var keyShapeStyle = self.getShapeStyleByName(); // 可优化，需要去除 child.attr 中其他 shape 名的对象\n          delete keyShapeStyle.path;\n          delete keyShapeStyle.matrix;\n          if (!keyShapeName) {\n            Object.assign(originStyles, keyShapeStyle);\n          } else {\n            // 若 keyShape 有 name 且 !name，这个图形不是 keyShape，给这个图形一个 name\n            if (!name_1) {\n              var shapeName = uniqueId('shape');\n              child.set('name', shapeName);\n              group['shapeMap'][shapeName] = child;\n              originStyles[shapeName] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n            } else {\n              originStyles[keyShapeName] = keyShapeStyle;\n            }\n          }\n        }\n      }\n      self.set('originStyle', originStyles);\n    } else {\n      // 第二次 set originStyles，需要找到不是 stateStyles 的样式，更新到 originStyles 中\n      // 上一次设置的 originStyle，是初始的 shape attrs\n      var styles_1 = this.get('originStyle');\n      // let styles: ShapeStyle = {};\n      if (keyShapeName && !styles_1[keyShapeName]) styles_1[keyShapeName] = {};\n      // 获取当前状态样式\n      var currentStatesStyle_1 = this.getCurrentStatesStyle();\n      var _loop_1 = function _loop_1(i) {\n        var child = children[i];\n        var name_2 = child.get('name');\n        var shapeAttrs = child.attr();\n        if (name_2 && name_2 !== keyShapeName) {\n          // 有 name 的非 keyShape 图形\n          var shapeStateStyle_1 = currentStatesStyle_1[name_2];\n          if (!styles_1[name_2]) styles_1[name_2] = {};\n          if (shapeStateStyle_1) {\n            Object.keys(shapeAttrs).forEach(function (key) {\n              var value = shapeAttrs[key];\n              if (value !== shapeStateStyle_1[key]) styles_1[name_2][key] = value;\n            });\n          } else {\n            styles_1[name_2] = child.get('type') !== 'image' ? clone(shapeAttrs) : self.getShapeStyleByName(name_2);\n          }\n        } else {\n          var shapeAttrs_1 = child.attr();\n          var keyShapeStateStyles_1 = {};\n          Object.keys(currentStatesStyle_1).forEach(function (styleKey) {\n            var subStyle = currentStatesStyle_1[styleKey];\n            if (styleKey === keyShapeName || !isPlainObject(subStyle)) {\n              keyShapeStateStyles_1[styleKey] = subStyle;\n            }\n          });\n          Object.keys(shapeAttrs_1).forEach(function (key) {\n            var value = shapeAttrs_1[key];\n            // 如果是对象且不是 arrow，则是其他 shape 的样式\n            // if (isPlainObject(value) && ARROWS.indexOf(name) === -1) return;\n            if (keyShapeStateStyles_1[key] !== value) {\n              if (keyShapeName) styles_1[keyShapeName][key] = value;else styles_1[key] = value;\n            }\n          });\n        }\n      };\n      // 遍历当前所有图形的 attrs，找到不是 stateStyles 的样式更新到 originStyles 中\n      for (var i = 0; i < children.length; i++) {\n        _loop_1(i);\n      }\n      delete styles_1.path;\n      delete styles_1.matrix;\n      delete styles_1.x;\n      delete styles_1.y;\n      if (styles_1[keyShapeName]) {\n        delete styles_1[keyShapeName].x;\n        delete styles_1[keyShapeName].y;\n        delete styles_1[keyShapeName].matrix;\n        delete styles_1[keyShapeName].path;\n      }\n      self.set('originStyle', styles_1);\n    }\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape;\n    if (name) {\n      currentShape = group['shapeMap'][name] || group.find(function (element) {\n        return element.get('name') === name;\n      });\n    } else {\n      currentShape = this.getKeyShape();\n    }\n    if (currentShape) {\n      var styles_2 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img' || isString(val)) {\n          styles_2[key] = val;\n        }\n      });\n      return styles_2;\n    }\n    return {};\n  };\n  ItemBase.prototype.getShapeCfg = function (model, updateType) {\n    var styles = this.get('styles');\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    var states = self.getStates();\n    if (!states || !states.length) {\n      return this.get('originStyle');\n    }\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n    if (isString(value)) {\n      stateName = \"\".concat(state, \":\").concat(value);\n      filterStateName = \"\".concat(state, \":\");\n    }\n    var newStates = states;\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.type;\n      // 调用 shape/shape.ts 中的 setState\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.type;\n    if (!states) {\n      states = originStates;\n    }\n    if (isString(states)) {\n      states = [states];\n    }\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 设置是否开启性能优化模式\n   * 目前影响：节点的状态样式更新是否影响相关边的更新\n   * @param {Boolean} enableOptimize 是否开启\n   */\n  ItemBase.prototype.setOptimize = function (enableOptimize) {\n    this.optimize = enableOptimize;\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n  ItemBase.prototype.refresh = function (updateType) {\n    var model = this.get('model');\n    // 更新元素位置\n    this.updatePosition(model);\n    // 更新元素内容，样式\n    this.updateShape(updateType);\n    // 做一些更新之后的操作\n    this.afterUpdate();\n    // 清除缓存\n    this.clearCache();\n  };\n  ItemBase.prototype.getUpdateType = function (cfg) {\n    return undefined;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n  ItemBase.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n    var model = this.get('model');\n    // 仅仅移动位置时，既不更新，也不重绘\n    if (updateType === 'move') {\n      this.updatePosition(cfg);\n    } else {\n      var oriVisible = model.visible;\n      var cfgVisible = cfg.visible;\n      if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n      var originPosition = {\n        x: model.x,\n        y: model.y\n      };\n      cfg.x = isNaN(+cfg.x) ? model.x : +cfg.x;\n      cfg.y = isNaN(+cfg.y) ? model.y : +cfg.y;\n      var styles = this.get('styles');\n      if (cfg.stateStyles) {\n        // 更新 item 时更新 this.get('styles') 中的值\n        var stateStyles = cfg.stateStyles;\n        mix(styles, stateStyles);\n        delete cfg.stateStyles;\n      }\n      // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n      Object.assign(model, cfg);\n      // 如果 x,y 有变化，先重置位置\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n      this.updateShape(updateType);\n    }\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n  ItemBase.prototype.updateShape = function (updateType) {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.type;\n    // 判定是否允许更新\n    // 1. 注册的节点允许更新（即有继承的/复写的 update 方法，即 update 方法没有被复写为 undefined）\n    // 2. 更新后的 shape 等于原先的 shape\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model, updateType);\n      shapeFactory.baseUpdate(shape, updateCfg, this, updateType);\n      // 更新完以后重新设置原始样式\n      if (updateType !== 'move') this.setOriginStyle();\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    }\n    // 更新后重置节点状态\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNaN(+cfg.x) ? +model.x : +cfg.x;\n    var y = isNaN(+cfg.y) ? +model.y : +cfg.y;\n    var group = this.get('group');\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n    model.x = x;\n    model.y = y;\n    var matrix = group.getMatrix();\n    if (matrix && matrix[6] === x && matrix[7] === y) return false;\n    group.resetMatrix();\n    // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n    translate(group, {\n      x: x,\n      y: y\n    });\n    this.clearCache(); // 位置更新后需要清除缓存\n    return true;\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n      if (animate) {\n        group.stopAnimate();\n      }\n      group['shapeMap'] = {};\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n  return ItemBase;\n}();\nexport default ItemBase;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}