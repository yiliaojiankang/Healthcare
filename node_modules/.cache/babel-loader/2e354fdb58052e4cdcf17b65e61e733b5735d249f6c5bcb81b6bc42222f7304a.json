{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nvar ListState = /** @class */function (_super) {\n  __extends(ListState, _super);\n  function ListState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = '';\n    _this.ignoreItemStates = [];\n    return _this;\n  }\n  /** 获取触发的列表组件 */\n  ListState.prototype.getTriggerListInfo = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var info = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component\n      };\n    }\n    return info;\n  };\n  // 获取所有允许执行 Action 的组件\n  ListState.prototype.getAllowComponents = function () {\n    var _this = this;\n    var view = this.context.view;\n    var components = getComponents(view);\n    var rst = [];\n    each(components, function (component) {\n      if (component.isList() && _this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  };\n  /** 是否存在指定的状态 */\n  ListState.prototype.hasState = function (list, item) {\n    return list.hasState(item, this.stateName);\n  };\n  /** 清理组件的状态 */\n  ListState.prototype.clearAllComponentsState = function () {\n    var _this = this;\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(_this.stateName);\n    });\n  };\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  ListState.prototype.allowSetStateByElement = function (component) {\n    var field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      var name_1 = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name_1) === -1) {\n        return false;\n      }\n    }\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  };\n  // 检测是否允许触发对应的状态改变事件\n  ListState.prototype.allowSetStateByItem = function (item, list) {\n    var ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      var filterStates = ignoreStates.filter(function (state) {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  };\n  // 设置组件的 item active\n  ListState.prototype.setStateByElement = function (component, element, enable) {\n    var field = component.get('field');\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    var text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  };\n  // 设置状态\n  ListState.prototype.setStateEnable = function (enable) {\n    var _this = this;\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        _this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      var delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n          component = delegateObject.component;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  };\n  // 多个 item 设置状态\n  ListState.prototype.setItemsState = function (list, name, enable) {\n    var _this = this;\n    var items = list.getItems();\n    each(items, function (item) {\n      if (item.name === name) {\n        _this.setItemState(list, item, enable);\n      }\n    });\n  };\n  // 单个 item 设置状态\n  ListState.prototype.setItemState = function (list, item, enable) {\n    list.setItemState(item, this.stateName, enable);\n  };\n  /**\n   * 设置状态\n   */\n  ListState.prototype.setState = function () {\n    this.setStateEnable(true);\n  };\n  /**\n   * 取消状态\n   */\n  ListState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  /**\n   * 切换状态\n   */\n  ListState.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      var list = triggerInfo.list,\n        item = triggerInfo.item;\n      var enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  };\n  /**\n   * 取消状态\n   */\n  ListState.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  };\n  return ListState;\n}(Action);\nexport default ListState;","map":{"version":3,"names":["each","Action","getComponents","getCurrentElement","getDelegationObject","getElementValue","isList","getScaleByField","ListState","_super","__extends","_this","apply","arguments","stateName","ignoreItemStates","prototype","getTriggerListInfo","delegateObject","context","info","item","list","component","getAllowComponents","view","components","rst","allowSetStateByElement","push","hasState","clearAllComponentsState","clearItemsState","field","get","cfg","componentNames","name_1","indexOf","scale","isCategory","allowSetStateByItem","ignoreStates","length","filterStates","filter","state","setStateByElement","element","enable","value","text","getText","setItemsState","setStateEnable","setItemState","name","items","getItems","setState","reset","toggle","triggerInfo","clear"],"sources":["../../../../src/interaction/action/component/list-state.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element';\nimport { LooseObject } from '../../../interface';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n\n/** @ignore */\ninterface ListStateCfg {\n  componentNames: string[];\n}\n\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nclass ListState extends Action<ListStateCfg> {\n  protected stateName: string = '';\n  protected ignoreItemStates = [];\n\n  /** 获取触发的列表组件 */\n  protected getTriggerListInfo() {\n    const delegateObject = getDelegationObject(this.context);\n    let info: LooseObject = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component,\n      };\n    }\n    return info;\n  }\n  // 获取所有允许执行 Action 的组件\n  protected getAllowComponents() {\n    const view = this.context.view;\n    const components = getComponents(view);\n    const rst = [];\n    each(components, (component) => {\n      if (component.isList() && this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  }\n\n  /** 是否存在指定的状态 */\n  protected hasState(list: IList, item: ListItem) {\n    return list.hasState(item, this.stateName);\n  }\n\n  /** 清理组件的状态 */\n  protected clearAllComponentsState() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(this.stateName);\n    });\n  }\n\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  protected allowSetStateByElement(component): boolean {\n    const field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      const name = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name) === -1) {\n        return false;\n      }\n    }\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }\n  // 检测是否允许触发对应的状态改变事件\n  private allowSetStateByItem(item: ListItem, list: IList) {\n    const ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      const filterStates = ignoreStates.filter((state) => {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  }\n\n  // 设置组件的 item active\n  private setStateByElement(component, element: Element, enable: boolean) {\n    const field = component.get('field');\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    const text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }\n\n  // 设置状态\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      const delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }\n\n  // 多个 item 设置状态\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    const items = list.getItems();\n    each(items, (item) => {\n      if (item.name === name) {\n        this.setItemState(list, item, enable);\n      }\n    });\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    list.setItemState(item, this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 取消状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n      const enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  }\n\n  /**\n   * 取消状态\n   */\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  }\n}\n\nexport default ListState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}