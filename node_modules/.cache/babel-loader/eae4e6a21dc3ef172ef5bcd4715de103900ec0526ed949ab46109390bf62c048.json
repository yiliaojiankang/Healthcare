{"ast":null,"code":"import { isPathArray } from '../util/is-path-array';\nimport { scanSegment } from './scan-segment';\nimport { skipSpaces } from './skip-spaces';\nimport { PathParser } from './path-parser';\n/**\n * Parses a path string value and returns an array\n * of segments we like to call `pathArray`.\n */\nexport function parsePathString(pathInput) {\n  if (isPathArray(pathInput)) {\n    return [].concat(pathInput);\n  }\n  var path = new PathParser(pathInput);\n  skipSpaces(path);\n  while (path.index < path.max && !path.err.length) {\n    scanSegment(path);\n  }\n  return path.err ? path.err : path.segments;\n}","map":{"version":3,"names":["isPathArray","scanSegment","skipSpaces","PathParser","parsePathString","pathInput","concat","path","index","max","err","length","segments"],"sources":["src/path/parser/parse-path-string.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AAEnD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAE1C;;;;AAIA,OAAM,SAAUC,eAAeA,CAACC,SAA6B;EAC3D,IAAIL,WAAW,CAACK,SAAS,CAAC,EAAE;IAC1B,OAAO,EAAE,CAACC,MAAM,CAACD,SAAS,CAAc;;EAG1C,IAAME,IAAI,GAAG,IAAIJ,UAAU,CAACE,SAAS,CAAC;EAEtCH,UAAU,CAACK,IAAI,CAAC;EAEhB,OAAOA,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,GAAG,IAAI,CAACF,IAAI,CAACG,GAAG,CAACC,MAAM,EAAE;IAChDV,WAAW,CAACM,IAAI,CAAC;;EAGnB,OAAOA,IAAI,CAACG,GAAG,GAAGH,IAAI,CAACG,GAAG,GAAGH,IAAI,CAACK,QAAQ;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}