{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __read, __spreadArray } from \"tslib\";\nimport { isArray, isNil, get } from '@antv/util';\nimport { getAngle, getSectorPath } from '../../../util/graphics';\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo) {\n  var _a, _b;\n  var x = pointInfo.x,\n    y = pointInfo.y,\n    y0 = pointInfo.y0,\n    size = pointInfo.size;\n  // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n  var yMin;\n  var yMax;\n  if (isArray(y)) {\n    _a = __read(y, 2), yMin = _a[0], yMax = _a[1];\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n  var xMin;\n  var xMax;\n  if (isArray(x)) {\n    _b = __read(x, 2), xMin = _b[0], xMax = _b[1];\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n  var points = [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMin,\n    y: yMax\n  }];\n  // 矩形的四个关键点，结构如下（左下角顺时针连接）\n  // 1 ---- 2\n  // |      |\n  // 0 ---- 3\n  points.push({\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMax,\n    y: yMin\n  });\n  return points;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points, isClosed) {\n  if (isClosed === void 0) {\n    isClosed = true;\n  }\n  var path = [];\n  var firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n  for (var i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  }\n  // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n    path.push(['z']);\n  }\n  return path;\n}\n/**\n * 处理 rect path 的 radius\n * @returns 返回矩形 path 的四个角的 arc 半径\n */\nexport function parseRadius(radius, minLength) {\n  var r1 = 0;\n  var r2 = 0;\n  var r3 = 0;\n  var r4 = 0;\n  if (isArray(radius)) {\n    if (radius.length === 1) {\n      r1 = r2 = r3 = r4 = radius[0];\n    } else if (radius.length === 2) {\n      r1 = r3 = radius[0];\n      r2 = r4 = radius[1];\n    } else if (radius.length === 3) {\n      r1 = radius[0];\n      r2 = r4 = radius[1];\n      r3 = radius[2];\n    } else {\n      r1 = radius[0];\n      r2 = radius[1];\n      r3 = radius[2];\n      r4 = radius[3];\n    }\n  } else {\n    r1 = r2 = r3 = r4 = radius;\n  }\n  // 处理 边界值\n  if (r1 + r2 > minLength) {\n    r1 = r1 ? minLength / (1 + r2 / r1) : 0;\n    r2 = minLength - r1;\n  }\n  if (r3 + r4 > minLength) {\n    r3 = r3 ? minLength / (1 + r4 / r3) : 0;\n    r4 = minLength - r3;\n  }\n  return [r1 || 0, r2 || 0, r3 || 0, r4 || 0];\n}\n/**\n * 获取 interval 矩形背景的 path\n * @param cfg 关键点的信息\n * @param points 已转化为画布坐标的 4 个关键点\n * @param coordinate 坐标系\n * @returns 返回矩形背景的 path\n */\nexport function getBackgroundRectPath(cfg, points, coordinate) {\n  var path = [];\n  if (coordinate.isRect) {\n    var p0 = coordinate.isTransposed ? {\n      x: coordinate.start.x,\n      y: points[0].y\n    } : {\n      x: points[0].x,\n      y: coordinate.start.y\n    };\n    var p1 = coordinate.isTransposed ? {\n      x: coordinate.end.x,\n      y: points[2].y\n    } : {\n      x: points[3].x,\n      y: coordinate.end.y\n    };\n    // corner radius of background shape works only in 笛卡尔坐标系\n    var radius = get(cfg, ['background', 'style', 'radius']);\n    if (radius) {\n      var width = coordinate.isTransposed ? Math.abs(points[0].y - points[2].y) : points[2].x - points[1].x;\n      var height = coordinate.isTransposed ? coordinate.getWidth() : coordinate.getHeight();\n      var _a = __read(parseRadius(radius, Math.min(width, height)), 4),\n        r1 = _a[0],\n        r2 = _a[1],\n        r3 = _a[2],\n        r4 = _a[3];\n      // 同时存在 坐标系是否发生转置 和 y 镜像的时候\n      var isReflectYTransposed_1 = coordinate.isTransposed && coordinate.isReflect('y');\n      var bump = isReflectYTransposed_1 ? 0 : 1;\n      var opposite = function (r) {\n        return isReflectYTransposed_1 ? -r : r;\n      };\n      path.push(['M', p0.x, p1.y + opposite(r1)]);\n      r1 !== 0 && path.push(['A', r1, r1, 0, 0, bump, p0.x + r1, p1.y]);\n      path.push(['L', p1.x - r2, p1.y]);\n      r2 !== 0 && path.push(['A', r2, r2, 0, 0, bump, p1.x, p1.y + opposite(r2)]);\n      path.push(['L', p1.x, p0.y - opposite(r3)]);\n      r3 !== 0 && path.push(['A', r3, r3, 0, 0, bump, p1.x - r3, p0.y]);\n      path.push(['L', p0.x + r4, p0.y]);\n      r4 !== 0 && path.push(['A', r4, r4, 0, 0, bump, p0.x, p0.y - opposite(r4)]);\n    } else {\n      path.push(['M', p0.x, p0.y]);\n      path.push(['L', p1.x, p0.y]);\n      path.push(['L', p1.x, p1.y]);\n      path.push(['L', p0.x, p1.y]);\n      path.push(['L', p0.x, p0.y]);\n    }\n    path.push(['z']);\n  }\n  if (coordinate.isPolar) {\n    var center = coordinate.getCenter();\n    var _b = getAngle(cfg, coordinate),\n      startAngle = _b.startAngle,\n      endAngle = _b.endAngle;\n    if (coordinate.type !== 'theta' && !coordinate.isTransposed) {\n      // 获取扇形 path\n      path = getSectorPath(center.x, center.y, coordinate.getRadius(), startAngle, endAngle);\n    } else {\n      var pow = function (v) {\n        return Math.pow(v, 2);\n      };\n      var r1 = Math.sqrt(pow(center.x - points[0].x) + pow(center.y - points[0].y));\n      var r2 = Math.sqrt(pow(center.x - points[2].x) + pow(center.y - points[2].y));\n      // 获取扇形 path（其实是一个圆环，从 coordinate 的起始角度到结束角度）\n      path = getSectorPath(center.x, center.y, r1, coordinate.startAngle, coordinate.endAngle, r2);\n    }\n  }\n  return path;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points, lineCap, coor) {\n  var width = coor.getWidth();\n  var height = coor.getHeight();\n  var isRect = coor.type === 'rect';\n  var path = [];\n  var r = (points[2].x - points[1].x) / 2;\n  var ry = coor.isTransposed ? r * height / width : r * width / height;\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n  return path;\n}\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points, nextPoints, isPyramid) {\n  var path = [];\n  if (!isNil(nextPoints)) {\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', (points[2].x + points[3].x) / 2, (points[2].y + points[3].y) / 2], ['Z']);\n  } else {\n    // 漏斗图最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);\n  }\n  return path;\n}\n/**\n * 交换两个对象\n */\nfunction swap(p0, p1) {\n  return [p1, p0];\n}\n/**\n * 获取 倒角 矩形\n * - 目前只适用于笛卡尔坐标系下\n */\nexport function getRectWithCornerRadius(points, coordinate, radius) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  // 获取 四个关键点\n  var _h = __read(__spreadArray([], __read(points), false), 4),\n    p0 = _h[0],\n    p1 = _h[1],\n    p2 = _h[2],\n    p3 = _h[3];\n  var _j = __read(typeof radius === 'number' ? Array(4).fill(radius) : radius, 4),\n    r1 = _j[0],\n    r2 = _j[1],\n    r3 = _j[2],\n    r4 = _j[3];\n  if (coordinate.isTransposed) {\n    _a = __read(swap(p1, p3), 2), p1 = _a[0], p3 = _a[1];\n  }\n  /**\n   * 存在镜像\n   */\n  if (coordinate.isReflect('y')) {\n    _b = __read(swap(p0, p1), 2), p0 = _b[0], p1 = _b[1];\n    _c = __read(swap(p2, p3), 2), p2 = _c[0], p3 = _c[1];\n  }\n  if (coordinate.isReflect('x')) {\n    _d = __read(swap(p0, p3), 2), p0 = _d[0], p3 = _d[1];\n    _e = __read(swap(p1, p2), 2), p1 = _e[0], p2 = _e[1];\n  }\n  var path = [];\n  /**\n   *  p1 → p2\n   *  ↑    ↓\n   *  p0 ← p3\n   *\n   *  负数的情况，关键点会变成下面的形式\n   *\n   *  p0 ← p3               p2 ← p1\n   *  ↓    ↑                ↓     ↑\n   *  p1 → p2  --> (转置下)  p3 → p0\n   */\n  var abs = function (v) {\n    return Math.abs(v);\n  };\n  _f = __read(parseRadius([r1, r2, r3, r4], Math.min(abs(p3.x - p0.x), abs(p1.y - p0.y))).map(function (d) {\n    return abs(d);\n  }), 4), r1 = _f[0], r2 = _f[1], r3 = _f[2], r4 = _f[3];\n  if (coordinate.isTransposed) {\n    _g = __read([r4, r1, r2, r3], 4), r1 = _g[0], r2 = _g[1], r3 = _g[2], r4 = _g[3];\n  }\n  if (p0.y < p1.y /** 负数情况 */) {\n    path.push(['M', p3.x, p3.y + r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y + r4]);\n    path.push(['L', p1.x, p1.y - r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0 /** 逆时针 */, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y - r2]);\n    path.push(['L', p3.x, p3.y + r3]);\n    path.push(['z']);\n  } else if (p3.x < p0.x) {\n    path.push(['M', p2.x + r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x + r3, p3.y]);\n    path.push(['L', p0.x - r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0, p1.x - r1, p1.y]);\n    path.push(['L', p2.x + r2, p2.y]);\n    path.push(['z']);\n  } else {\n    path.push(['M', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 1, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 1, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 1, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 1, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    path.push(['z']);\n  }\n  return path;\n}","map":{"version":3,"names":["isArray","isNil","get","getAngle","getSectorPath","getRectPoints","pointInfo","x","y","y0","size","yMin","yMax","_a","__read","xMin","xMax","_b","points","push","getRectPath","isClosed","path","firstPoint","i","len","length","parseRadius","radius","minLength","r1","r2","r3","r4","getBackgroundRectPath","cfg","coordinate","isRect","p0","isTransposed","start","p1","end","width","Math","abs","height","getWidth","getHeight","min","isReflectYTransposed_1","isReflect","bump","opposite","r","isPolar","center","getCenter","startAngle","endAngle","type","getRadius","pow","v","sqrt","getIntervalRectPath","lineCap","coor","ry","getFunnelPath","nextPoints","isPyramid","swap","getRectWithCornerRadius","_h","__spreadArray","p2","p3","_j","Array","fill","_c","_d","_e","_f","map","d","_g"],"sources":["../../../../src/geometry/shape/interval/util.ts"],"sourcesContent":["import { Coordinate } from '@antv/coord';\nimport { isArray, isNil, get } from '@antv/util';\nimport { getAngle, getSectorPath } from '../../../util/graphics';\nimport { PathCommand } from '../../../dependents';\nimport { Point, ShapeInfo, ShapePoint } from '../../../interface';\n\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo: ShapePoint): Point[] {\n  const { x, y, y0, size } = pointInfo;\n  // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n  let yMin;\n  let yMax;\n  if (isArray(y)) {\n    [yMin, yMax] = y;\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n\n  let xMin;\n  let xMax;\n  if (isArray(x)) {\n    [xMin, xMax] = x;\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n\n  const points = [\n    { x: xMin, y: yMin },\n    { x: xMin, y: yMax },\n  ];\n\n  // 矩形的四个关键点，结构如下（左下角顺时针连接）\n  // 1 ---- 2\n  // |      |\n  // 0 ---- 3\n  points.push({ x: xMax, y: yMax }, { x: xMax, y: yMin });\n\n  return points;\n}\n\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points: Point[], isClosed: boolean = true): PathCommand[] {\n  const path = [];\n  const firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n  for (let i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  }\n  // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n    path.push(['z']);\n  }\n  return path;\n}\n\n/**\n * 处理 rect path 的 radius\n * @returns 返回矩形 path 的四个角的 arc 半径\n */\nexport function parseRadius(radius: number | number[], minLength: number): number[] {\n  let r1 = 0;\n  let r2 = 0;\n  let r3 = 0;\n  let r4 = 0;\n  if (isArray(radius)) {\n    if (radius.length === 1) {\n      r1 = r2 = r3 = r4 = radius[0];\n    } else if (radius.length === 2) {\n      r1 = r3 = radius[0];\n      r2 = r4 = radius[1];\n    } else if (radius.length === 3) {\n      r1 = radius[0];\n      r2 = r4 = radius[1];\n      r3 = radius[2];\n    } else {\n      r1 = radius[0];\n      r2 = radius[1];\n      r3 = radius[2];\n      r4 = radius[3];\n    }\n  } else {\n    r1 = r2 = r3 = r4 = radius;\n  }\n\n  // 处理 边界值\n  if (r1 + r2 > minLength) {\n    r1 = r1 ? minLength / (1 + r2 / r1) : 0;\n    r2 = minLength - r1;\n  }\n\n  if (r3 + r4 > minLength) {\n    r3 = r3 ? minLength / (1 + r4 / r3) : 0;\n    r4 = minLength - r3;\n  }\n\n  return [r1 || 0, r2 || 0, r3 || 0, r4 || 0];\n}\n\n/**\n * 获取 interval 矩形背景的 path\n * @param cfg 关键点的信息\n * @param points 已转化为画布坐标的 4 个关键点\n * @param coordinate 坐标系\n * @returns 返回矩形背景的 path\n */\nexport function getBackgroundRectPath(cfg: ShapeInfo, points: Point[], coordinate: Coordinate): PathCommand[] {\n  let path = [];\n  if (coordinate.isRect) {\n    const p0 = coordinate.isTransposed\n      ? { x: coordinate.start.x, y: points[0].y }\n      : { x: points[0].x, y: coordinate.start.y };\n    const p1 = coordinate.isTransposed\n      ? { x: coordinate.end.x, y: points[2].y }\n      : { x: points[3].x, y: coordinate.end.y };\n\n    // corner radius of background shape works only in 笛卡尔坐标系\n    const radius = get(cfg, ['background', 'style', 'radius']);\n    if (radius) {\n      const width = coordinate.isTransposed ? Math.abs(points[0].y - points[2].y) : points[2].x - points[1].x;\n      const height = coordinate.isTransposed ? coordinate.getWidth() : coordinate.getHeight();\n      const [r1, r2, r3, r4] = parseRadius(radius, Math.min(width, height));\n\n      // 同时存在 坐标系是否发生转置 和 y 镜像的时候\n      const isReflectYTransposed = (coordinate.isTransposed && coordinate.isReflect('y'));\n      const bump = isReflectYTransposed ? 0 : 1;\n      const opposite = (r: number) => isReflectYTransposed ? -r : r;\n\n      path.push(['M', p0.x, p1.y + opposite(r1)]);\n      r1 !== 0 && path.push(['A', r1, r1, 0, 0, bump, p0.x + r1, p1.y]);\n      path.push(['L', p1.x - r2, p1.y]);\n      r2 !== 0 && path.push(['A', r2, r2, 0, 0, bump, p1.x, p1.y + opposite(r2)]);\n      path.push(['L', p1.x, p0.y - opposite(r3)]);\n      r3 !== 0 && path.push(['A', r3, r3, 0, 0, bump, p1.x - r3, p0.y]);\n      path.push(['L', p0.x + r4, p0.y]);\n      r4 !== 0 && path.push(['A', r4, r4, 0, 0, bump, p0.x, p0.y - opposite(r4)]);\n    } else {\n      path.push(['M', p0.x, p0.y]);\n      path.push(['L', p1.x, p0.y]);\n      path.push(['L', p1.x, p1.y]);\n      path.push(['L', p0.x, p1.y]);\n      path.push(['L', p0.x, p0.y]);\n    }\n\n    path.push(['z']);\n  }\n\n  if (coordinate.isPolar) {\n    const center = coordinate.getCenter();\n    const { startAngle, endAngle } = getAngle(cfg, coordinate);\n    if (coordinate.type !== 'theta' && !coordinate.isTransposed) {\n      // 获取扇形 path\n      path = getSectorPath(center.x, center.y, coordinate.getRadius(), startAngle, endAngle);\n    } else {\n      const pow = (v) => Math.pow(v, 2);\n      const r1 = Math.sqrt(pow(center.x - points[0].x) + pow(center.y - points[0].y));\n      const r2 = Math.sqrt(pow(center.x - points[2].x) + pow(center.y - points[2].y));\n      // 获取扇形 path（其实是一个圆环，从 coordinate 的起始角度到结束角度）\n      path = getSectorPath(center.x, center.y, r1, coordinate.startAngle, coordinate.endAngle, r2);\n    }\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points: Point[], lineCap: CanvasLineCap, coor: Coordinate): PathCommand[] {\n  const width = coor.getWidth();\n  const height = coor.getHeight();\n  const isRect = coor.type === 'rect';\n  let path = [];\n  const r = (points[2].x - points[1].x) / 2;\n  const ry = coor.isTransposed ? (r * height) / width : (r * width) / height;\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points: Point[], nextPoints: Point[], isPyramid: boolean) {\n  const path = [];\n  if (!isNil(nextPoints)) {\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', nextPoints[1].x, nextPoints[1].y],\n      ['L', nextPoints[0].x, nextPoints[0].y],\n      ['Z']\n    );\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', (points[2].x + points[3].x) / 2, (points[2].y + points[3].y) / 2],\n      ['Z']\n    );\n  } else {\n    // 漏斗图最底部\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', points[2].x, points[2].y],\n      ['L', points[3].x, points[3].y],\n      ['Z']\n    );\n  }\n\n  return path;\n}\n\n/**\n * 交换两个对象\n */\nfunction swap<T>(p0: T, p1: T) {\n  return [p1, p0];\n}\n\n/**\n * 获取 倒角 矩形\n * - 目前只适用于笛卡尔坐标系下\n */\nexport function getRectWithCornerRadius(points: Point[], coordinate: Coordinate, radius?: number | number[]) {\n  // 获取 四个关键点\n  let [p0, p1, p2, p3] = [...points];\n  let [r1, r2, r3, r4] = typeof radius === 'number' ? Array(4).fill(radius) : radius;\n\n  if (coordinate.isTransposed) {\n    [p1, p3] = swap(p1, p3);\n  }\n\n  /**\n   * 存在镜像\n   */\n  if (coordinate.isReflect('y')) {\n    [p0, p1] = swap(p0, p1);\n    [p2, p3] = swap(p2, p3);\n  }\n  if (coordinate.isReflect('x')) {\n    [p0, p3] = swap(p0, p3);\n    [p1, p2] = swap(p1, p2);\n  }\n\n  const path = [];\n\n\n  /**\n   *  p1 → p2\n   *  ↑    ↓\n   *  p0 ← p3\n   *\n   *  负数的情况，关键点会变成下面的形式\n   *\n   *  p0 ← p3               p2 ← p1\n   *  ↓    ↑                ↓     ↑\n   *  p1 → p2  --> (转置下)  p3 → p0\n   */\n  const abs = v => Math.abs(v);\n  [r1, r2, r3, r4] = parseRadius([r1, r2, r3, r4], Math.min(abs(p3.x - p0.x), abs(p1.y - p0.y))).map(d => abs(d));\n\n  if (coordinate.isTransposed) {\n    [r1, r2, r3, r4] = [r4, r1, r2, r3]\n  }\n\n  if (p0.y < p1.y /** 负数情况 */) {\n    path.push(['M', p3.x, p3.y + r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y + r4]);\n    path.push(['L', p1.x, p1.y - r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0/** 逆时针 */, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y - r2]);\n    path.push(['L', p3.x, p3.y + r3]);\n    path.push(['z']);\n  } else if (p3.x < p0.x) {\n    path.push(['M', p2.x + r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x + r3, p3.y]);\n    path.push(['L', p0.x - r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0, p1.x - r1, p1.y]);\n    path.push(['L', p2.x + r2, p2.y]);\n    path.push(['z']);\n  } else {\n    path.push(['M', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 1, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 1, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 1, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 1, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    path.push(['z']);\n  }\n\n  return path;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}