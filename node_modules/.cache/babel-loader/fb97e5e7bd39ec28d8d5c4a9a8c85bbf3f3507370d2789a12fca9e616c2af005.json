{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { clone, deepMix, each, isArray, isObject, isString, upperFirst, throttle } from '@antv/util';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\nvar ItemController = /** @class */function () {\n  function ItemController(graph) {\n    var _this = this;\n    this.edgeToBeUpdateMap = {};\n    /**\n     * 更新边限流，同时可以防止相同的边频繁重复更新\n     * */\n    this.throttleRefresh = throttle(function (_) {\n      var graph = _this.graph;\n      if (!graph || graph.get('destroyed')) return;\n      var edgeToBeUpdateMap = _this.edgeToBeUpdateMap;\n      if (!edgeToBeUpdateMap) return;\n      var edgeValues = Object.values(edgeToBeUpdateMap);\n      if (!edgeValues.length) return;\n      edgeValues.forEach(function (obj) {\n        var edge = obj.edge;\n        if (!edge || edge.destroyed) return;\n        var source = edge.getSource();\n        var target = edge.getTarget();\n        if (!source || source.destroyed || !target || target.destroyed) return;\n        edge.refresh(obj.updateType);\n      });\n      _this.edgeToBeUpdateMap = {};\n    }, 16, {\n      trailing: true,\n      leading: true\n    });\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\n   * 增加 Item 实例\n   *\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\n   * @returns {(Item)}\n   * @memberof ItemController\n   */\n  ItemController.prototype.addItem = function (type, model) {\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(\"\".concat(vType, \"Group\")) || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null;\n    // 获取 this.get('styles') 中的值\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n    if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, val, model[cfg]);\n        } else if (isArray(val)) {\n          model[cfg] = model[cfg] || clone(defaultModel[cfg]);\n        } else {\n          model[cfg] = model[cfg] || defaultModel[cfg];\n        }\n      });\n    }\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n    if (mapper) {\n      var mappedModel_1 = mapper(model);\n      if (mappedModel_1[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel_1[STATE_SUFFIX];\n        delete mappedModel_1[STATE_SUFFIX];\n      }\n      // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n      each(mappedModel_1, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, model[cfg], val);\n        } else {\n          model[cfg] = mappedModel_1[cfg] || model[cfg];\n        }\n      });\n    }\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n      target = model.target; // eslint-disable-line prefer-destructuring\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \".concat(model.id, \" does not exist!\"));\n        return;\n      }\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true;\n        // graph.updateCombo(source as ICombo);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true;\n        // graph.updateCombo(target as ICombo);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      var bboxX = void 0,\n        bboxY = void 0;\n      if (!isNaN(comboBBox.x)) bboxX = comboBBox.x;else if (isNaN(model.x)) bboxX = Math.random() * 100;\n      if (!isNaN(comboBBox.y)) bboxY = comboBBox.y;else if (isNaN(model.y)) bboxY = Math.random() * 100;\n      if (isNaN(model.x) || isNaN(model.y)) {\n        model.x = bboxX;\n        model.y = bboxY;\n      } else {\n        // if there is x y in model, place the combo according to it and move its succeed items. that means, the priority of the combo's position is higher than succeed items'\n        var dx = model.x - bboxX;\n        var dy = model.y - bboxY;\n        // In the same time, adjust the children's positions\n        this.updateComboSucceeds(model.id, dx, dy, children);\n      }\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        animate: graph.get('animate'),\n        bbox: model.collapsed ? getComboBBox([], graph) : comboBBox,\n        group: comboGroup\n      });\n      // if it is a circle combo, diagonal length of the children's bbox should be the diameter of the combo's bbox\n      if (!model.collapsed && item.getKeyShape().get('type') === 'circle') {\n        comboBBox.width = Math.hypot(comboBBox.height, comboBBox.width);\n        comboBBox.height = comboBBox.width;\n        item.set('bbox', comboBBox);\n        item.refresh();\n      }\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      });\n    }\n    if (item) {\n      item.setOptimize(graph.getNodes().length > graph.get('optimizeThreshold'));\n      graph.get(\"\".concat(type, \"s\")).push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      });\n      // eslint-disable-next-line consistent-return\n      return item;\n    }\n  };\n  /**\n   * 更新节点或边\n   *\n   * @param {Item} item ID 或 实例\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\n   * @returns\n   * @memberof ItemController\n   */\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var _this = this;\n    var _a, _b;\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    if (!item || item.destroyed) {\n      return;\n    }\n    // 更新的 item 的类型\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n    var oriX = model.x,\n      oriY = model.y;\n    var updateType = item.getUpdateType(cfg);\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result);\n      // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n      var newModel = deepMix({}, model, mappedModel, cfg);\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    }\n    // emit beforeupdateitem 事件\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n        item.setSource(source);\n      }\n      if (cfg.target) {\n        var target = cfg.target;\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n        item.setTarget(target);\n      }\n      item.update(cfg);\n    } else if (type === NODE) {\n      item.update(cfg, updateType);\n      var edges = item.getEdges();\n      if (updateType === 'move') {\n        each(edges, function (edge) {\n          _this.edgeToBeUpdateMap[edge.getID()] = {\n            edge: edge,\n            updateType: updateType\n          };\n          _this.throttleRefresh();\n        });\n      } else if (updateType === null || updateType === void 0 ? void 0 : updateType.includes('bbox')) {\n        each(edges, function (edge) {\n          edge.refresh(updateType);\n        });\n      }\n    } else if (type === COMBO) {\n      item.update(cfg, updateType);\n      if (!isNaN(cfg.x) || !isNaN(cfg.y)) {\n        // if there is x y in model, place the combo according to it and move its succeed items. that means, the priority of the combo's position is higher than succeed items'\n        var dx = cfg.x - oriX || 0;\n        var dy = cfg.y - oriY || 0;\n        // In the same time, adjust the children's positions\n        this.updateComboSucceeds(model.id, dx, dy);\n      }\n      var edges_1 = item.getEdges();\n      var refreshEdge = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('bbox')) || updateType === 'move';\n      if (refreshEdge && type === COMBO) {\n        var shapeFactory = item.get('shapeFactory');\n        var shapeType = model.type || 'circle';\n        var comboAnimate = model.animate === undefined || cfg.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate || cfg.animate;\n        if (comboAnimate) {\n          setTimeout(function () {\n            if (!item || item.destroyed) return;\n            var keyShape = item.getKeyShape();\n            if (!keyShape || keyShape.destroyed) return;\n            each(edges_1, function (edge) {\n              if (edge && !edge.destroyed) edge.refresh();\n            });\n          }, 201);\n        } else {\n          each(edges_1, function (edge) {\n            edge.refresh();\n          });\n        }\n      }\n    }\n    item.setOptimize(graph.getNodes().length > graph.get('optimizeThreshold'));\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\n   * 根据 combo 的子元素更新 combo 的位置及大小\n   *\n   * @param {ICombo} combo ID 或 实例\n   * @returns\n   * @memberof ItemController\n   */\n  ItemController.prototype.updateCombo = function (combo, children, followCombo) {\n    var _this = this;\n    var _a, _b;\n    var graph = this.graph;\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n    if (!combo || combo.destroyed) {\n      return;\n    }\n    var model = combo.getModel();\n    var comboBBox = getComboBBox(children, graph, combo);\n    var comboX = comboBBox.x,\n      comboY = comboBBox.y;\n    combo.set('bbox', comboBBox);\n    var x = comboX,\n      y = comboY;\n    if (followCombo) {\n      // position of combo model first\n      x = isNaN(model.x) ? comboX : model.x;\n      y = isNaN(model.y) ? comboY : model.y;\n    } else {\n      // position of succeed items first\n      x = isNaN(comboX) ? model.x : comboX;\n      y = isNaN(comboY) ? model.y : comboY;\n    }\n    combo.update({\n      x: x,\n      y: y\n    });\n    var shapeFactory = combo.get('shapeFactory');\n    var shapeType = model.type || 'circle';\n    var comboAnimate = model.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate;\n    if (comboAnimate) {\n      setTimeout(function () {\n        if (!combo || combo.destroyed) return;\n        var keyShape = combo.getKeyShape();\n        if (!keyShape || keyShape.destroyed) return;\n        combo.getShapeCfg(model); // 更新 combo 缓存的 size\n        _this.updateComboEdges(combo);\n      }, 201);\n    } else {\n      this.updateComboEdges(combo);\n    }\n  };\n  ItemController.prototype.updateComboEdges = function (combo) {\n    var _a, _b;\n    var combEdges = combo.getEdges() || [];\n    for (var i = 0; i < combEdges.length; i++) {\n      var edge = combEdges[i];\n      if (!(edge === null || edge === void 0 ? void 0 : edge.destroyed) && !((_a = edge === null || edge === void 0 ? void 0 : edge.getSource()) === null || _a === void 0 ? void 0 : _a.destroyed) && !((_b = edge === null || edge === void 0 ? void 0 : edge.getTarget()) === null || _b === void 0 ? void 0 : _b.destroyed)) {\n        edge.refresh();\n      }\n    }\n  };\n  /**\n   * 收起 combo，隐藏相关元素\n   */\n  ItemController.prototype.collapseCombo = function (combo, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n    var graph = this.graph;\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node, stack);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c, stack);\n    });\n  };\n  /**\n   * 根据位置差量 dx dy，更新 comboId 后继元素的位置\n   * */\n  ItemController.prototype.updateComboSucceeds = function (comboId, dx, dy, children) {\n    var _this = this;\n    if (children === void 0) {\n      children = [];\n    }\n    var graph = this.graph;\n    if (!dx && !dy) return;\n    var kids = children;\n    if (!(kids === null || kids === void 0 ? void 0 : kids.length)) {\n      var comboTrees = graph.get('comboTrees');\n      comboTrees === null || comboTrees === void 0 ? void 0 : comboTrees.forEach(function (child) {\n        traverseTree(child, function (subTree) {\n          if (subTree.id === comboId) {\n            kids = subTree.children;\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n    kids === null || kids === void 0 ? void 0 : kids.forEach(function (child) {\n      var childItem = graph.findById(child.id);\n      if (childItem) {\n        var childModel = childItem.getModel();\n        _this.updateItem(child.id, {\n          x: (childModel.x || 0) + dx,\n          y: (childModel.y || 0) + dy\n        });\n      }\n    });\n  };\n  /**\n   * 展开 combo，相关元素出现\n   * 若子 combo 原先是收起状态，则保持它的收起状态\n   */\n  ItemController.prototype.expandCombo = function (combo, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n    var graph = this.graph;\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n    var children = combo.getChildren();\n    var edgeSet = new Set();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node, stack);\n      node.getEdges().forEach(function (edge) {\n        return edgeSet.add(edge);\n      });\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c, stack);\n      }\n      c.getEdges().forEach(function (edge) {\n        return edgeSet.add(edge);\n      });\n    });\n    edgeSet.forEach(function (edge) {\n      return edge.refresh();\n    });\n  };\n  /**\n   * 删除指定的节点或边\n   *\n   * @param {Item} item item ID 或实例\n   * @returns {void}\n   * @memberof ItemController\n   */\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    if (!item || item.destroyed) {\n      return;\n    }\n    var itemModel = clone(item.getModel());\n    var type = '';\n    if (item.getType) type = item.getType();\n    graph.emit('beforeremoveitem', {\n      item: itemModel,\n      type: type\n    });\n    var items = graph.get(\"\".concat(type, \"s\"));\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\".concat(type, \"s\"));\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n      if (comboTrees && comboId) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      }\n      // 若移除的是节点，需要将与之相连的边一同删除\n      var edges = item.getEdges();\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1;\n      // find the subtree rooted at the item to be removed\n      var found_2 = false; // the flag to terminate the forEach circulation\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      }\n      // 若移除的是 combo，需要将与之相连的边一同删除\n      var edges = item.getEdges();\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n      if (parentId) graph.updateCombo(parentId);\n    }\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel,\n      type: type\n    });\n  };\n  /**\n   * 更新 item 状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string} state 状态名称\n   * @param {boolean} value 是否启用状态或状态值\n   * @returns {void}\n   * @memberof ItemController\n   */\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n    if (isString(value)) {\n      stateName = \"\".concat(state, \":\").concat(value);\n    }\n    // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n    if (item.hasState(stateName) === value && value ||\n    // 当该状态已经存在且现在需要设置为 true 时，不需要继续。当该状态不存在，且设置为 false 时，需要继续\n    isString(value) && item.hasState(stateName)) {\n      // 当该状态 value 是字符串，且已经存在该状态，不需要继续\n      return;\n    }\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    }\n    // 先取消已有的 state\n    this.setItemState(currentItem, state, false);\n    // 再设置state，则此时该优先级为最高\n    this.setItemState(currentItem, state, true);\n  };\n  /**\n   * 清除所有指定的状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string[]} states 状态名称集合\n   * @memberof ItemController\n   */\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\n   * 刷新指定的 Item\n   *\n   * @param {Item} item Item ID 或 实例\n   * @memberof ItemController\n   */\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    graph.emit('beforeitemrefresh', {\n      item: item\n    });\n    // 调用 Item 的 refresh 方法，实现刷新功能\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\n   *\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\n   * @param {ComboConfig[]} comboModels combos 数据\n   * @memberof ItemController\n   */\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\n   * 改变Item的显示状态\n   *\n   * @param {Item} item Item ID 或 实例\n   * @param {boolean} visible 是否显示\n   * @memberof ItemController\n   */\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      if (children_1 && (!visible || visible && !item.getModel().collapsed)) {\n        children_1.forEach(function (child) {\n          var childItem = graph.findById(child.id);\n          _this.changeItemVisibility(childItem, visible);\n        });\n      }\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n  return ItemController;\n}();\nexport default ItemController;","map":{"version":3,"names":["__assign","clone","deepMix","each","isArray","isObject","isString","upperFirst","throttle","Edge","Node","Combo","traverseTreeUp","traverseTree","getComboBBox","NODE","EDGE","VEDGE","COMBO","CFG_PREFIX","MAPPER_SUFFIX","STATE_SUFFIX","ItemController","graph","_this","edgeToBeUpdateMap","throttleRefresh","_","get","edgeValues","Object","values","length","forEach","obj","edge","destroyed","source","getSource","target","getTarget","refresh","updateType","trailing","leading","prototype","addItem","type","model","vType","parent","concat","upperType","item","styles","defaultModel","val","cfg","mapper","mappedModel_1","emit","findById","console","warn","id","getType","isComboEdge","linkCenter","group","addGroup","children","comboBBox","bboxX","bboxY","isNaN","x","Math","random","y","dx","dy","updateComboSucceeds","comboGroup","setZIndex","depth","animate","bbox","collapsed","getKeyShape","width","hypot","height","set","comboModel_1","getModel","child","childItem","addChild","setOptimize","getNodes","push","updateItem","_a","_b","oriX","oriY","getUpdateType","result","mappedModel","newModel","key","setSource","setTarget","update","edges","getEdges","getID","includes","edges_1","refreshEdge","shapeFactory","shapeType","comboAnimate","undefined","options","setTimeout","keyShape","updateCombo","combo","followCombo","comboX","comboY","getShapeCfg","updateComboEdges","combEdges","i","collapseCombo","stack","getChildren","nodes","node","hideItem","combos","c","comboId","kids","comboTrees","subTree","childModel","expandCombo","edgeSet","Set","showItem","add","show","removeItem","itemModel","items","index","indexOf","splice","vitems","vindex","itemId","itemMap","brothers_1","found_1","ctree","bidx","parentId","comboInTree_1","found_2","removed","destroy","setItemState","state","value","stateName","hasState","enabled","setState","autoPaint","priorityState","currentItem","clearItemStates","states","clearStates","refreshItem","addCombos","comboModels","comboModel","sort","changeItemVisibility","visible","changeVisibility","isVisible","id_1","children_1","found_3"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/graph/controller/item.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { clone, deepMix, each, isArray, isObject, isString, upperFirst, throttle } from '@antv/util';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\nvar ItemController = /** @class */function () {\n  function ItemController(graph) {\n    var _this = this;\n    this.edgeToBeUpdateMap = {};\n    /**\n     * 更新边限流，同时可以防止相同的边频繁重复更新\n     * */\n    this.throttleRefresh = throttle(function (_) {\n      var graph = _this.graph;\n      if (!graph || graph.get('destroyed')) return;\n      var edgeToBeUpdateMap = _this.edgeToBeUpdateMap;\n      if (!edgeToBeUpdateMap) return;\n      var edgeValues = Object.values(edgeToBeUpdateMap);\n      if (!edgeValues.length) return;\n      edgeValues.forEach(function (obj) {\n        var edge = obj.edge;\n        if (!edge || edge.destroyed) return;\n        var source = edge.getSource();\n        var target = edge.getTarget();\n        if (!source || source.destroyed || !target || target.destroyed) return;\n        edge.refresh(obj.updateType);\n      });\n      _this.edgeToBeUpdateMap = {};\n    }, 16, {\n      trailing: true,\n      leading: true\n    });\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\n   * 增加 Item 实例\n   *\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\n   * @returns {(Item)}\n   * @memberof ItemController\n   */\n  ItemController.prototype.addItem = function (type, model) {\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(\"\".concat(vType, \"Group\")) || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null;\n    // 获取 this.get('styles') 中的值\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n    if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, val, model[cfg]);\n        } else if (isArray(val)) {\n          model[cfg] = model[cfg] || clone(defaultModel[cfg]);\n        } else {\n          model[cfg] = model[cfg] || defaultModel[cfg];\n        }\n      });\n    }\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n    if (mapper) {\n      var mappedModel_1 = mapper(model);\n      if (mappedModel_1[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel_1[STATE_SUFFIX];\n        delete mappedModel_1[STATE_SUFFIX];\n      }\n      // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n      each(mappedModel_1, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, model[cfg], val);\n        } else {\n          model[cfg] = mappedModel_1[cfg] || model[cfg];\n        }\n      });\n    }\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n      target = model.target; // eslint-disable-line prefer-destructuring\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \".concat(model.id, \" does not exist!\"));\n        return;\n      }\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true;\n        // graph.updateCombo(source as ICombo);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true;\n        // graph.updateCombo(target as ICombo);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      var bboxX = void 0,\n        bboxY = void 0;\n      if (!isNaN(comboBBox.x)) bboxX = comboBBox.x;else if (isNaN(model.x)) bboxX = Math.random() * 100;\n      if (!isNaN(comboBBox.y)) bboxY = comboBBox.y;else if (isNaN(model.y)) bboxY = Math.random() * 100;\n      if (isNaN(model.x) || isNaN(model.y)) {\n        model.x = bboxX;\n        model.y = bboxY;\n      } else {\n        // if there is x y in model, place the combo according to it and move its succeed items. that means, the priority of the combo's position is higher than succeed items'\n        var dx = model.x - bboxX;\n        var dy = model.y - bboxY;\n        // In the same time, adjust the children's positions\n        this.updateComboSucceeds(model.id, dx, dy, children);\n      }\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        animate: graph.get('animate'),\n        bbox: model.collapsed ? getComboBBox([], graph) : comboBBox,\n        group: comboGroup\n      });\n      // if it is a circle combo, diagonal length of the children's bbox should be the diameter of the combo's bbox\n      if (!model.collapsed && item.getKeyShape().get('type') === 'circle') {\n        comboBBox.width = Math.hypot(comboBBox.height, comboBBox.width);\n        comboBBox.height = comboBBox.width;\n        item.set('bbox', comboBBox);\n        item.refresh();\n      }\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      });\n    }\n    if (item) {\n      item.setOptimize(graph.getNodes().length > graph.get('optimizeThreshold'));\n      graph.get(\"\".concat(type, \"s\")).push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      });\n      // eslint-disable-next-line consistent-return\n      return item;\n    }\n  };\n  /**\n   * 更新节点或边\n   *\n   * @param {Item} item ID 或 实例\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\n   * @returns\n   * @memberof ItemController\n   */\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var _this = this;\n    var _a, _b;\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    if (!item || item.destroyed) {\n      return;\n    }\n    // 更新的 item 的类型\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n    var oriX = model.x,\n      oriY = model.y;\n    var updateType = item.getUpdateType(cfg);\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result);\n      // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n      var newModel = deepMix({}, model, mappedModel, cfg);\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    }\n    // emit beforeupdateitem 事件\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n        item.setSource(source);\n      }\n      if (cfg.target) {\n        var target = cfg.target;\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n        item.setTarget(target);\n      }\n      item.update(cfg);\n    } else if (type === NODE) {\n      item.update(cfg, updateType);\n      var edges = item.getEdges();\n      if (updateType === 'move') {\n        each(edges, function (edge) {\n          _this.edgeToBeUpdateMap[edge.getID()] = {\n            edge: edge,\n            updateType: updateType\n          };\n          _this.throttleRefresh();\n        });\n      } else if (updateType === null || updateType === void 0 ? void 0 : updateType.includes('bbox')) {\n        each(edges, function (edge) {\n          edge.refresh(updateType);\n        });\n      }\n    } else if (type === COMBO) {\n      item.update(cfg, updateType);\n      if (!isNaN(cfg.x) || !isNaN(cfg.y)) {\n        // if there is x y in model, place the combo according to it and move its succeed items. that means, the priority of the combo's position is higher than succeed items'\n        var dx = cfg.x - oriX || 0;\n        var dy = cfg.y - oriY || 0;\n        // In the same time, adjust the children's positions\n        this.updateComboSucceeds(model.id, dx, dy);\n      }\n      var edges_1 = item.getEdges();\n      var refreshEdge = (updateType === null || updateType === void 0 ? void 0 : updateType.includes('bbox')) || updateType === 'move';\n      if (refreshEdge && type === COMBO) {\n        var shapeFactory = item.get('shapeFactory');\n        var shapeType = model.type || 'circle';\n        var comboAnimate = model.animate === undefined || cfg.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate || cfg.animate;\n        if (comboAnimate) {\n          setTimeout(function () {\n            if (!item || item.destroyed) return;\n            var keyShape = item.getKeyShape();\n            if (!keyShape || keyShape.destroyed) return;\n            each(edges_1, function (edge) {\n              if (edge && !edge.destroyed) edge.refresh();\n            });\n          }, 201);\n        } else {\n          each(edges_1, function (edge) {\n            edge.refresh();\n          });\n        }\n      }\n    }\n    item.setOptimize(graph.getNodes().length > graph.get('optimizeThreshold'));\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\n   * 根据 combo 的子元素更新 combo 的位置及大小\n   *\n   * @param {ICombo} combo ID 或 实例\n   * @returns\n   * @memberof ItemController\n   */\n  ItemController.prototype.updateCombo = function (combo, children, followCombo) {\n    var _this = this;\n    var _a, _b;\n    var graph = this.graph;\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n    if (!combo || combo.destroyed) {\n      return;\n    }\n    var model = combo.getModel();\n    var comboBBox = getComboBBox(children, graph, combo);\n    var comboX = comboBBox.x,\n      comboY = comboBBox.y;\n    combo.set('bbox', comboBBox);\n    var x = comboX,\n      y = comboY;\n    if (followCombo) {\n      // position of combo model first\n      x = isNaN(model.x) ? comboX : model.x;\n      y = isNaN(model.y) ? comboY : model.y;\n    } else {\n      // position of succeed items first\n      x = isNaN(comboX) ? model.x : comboX;\n      y = isNaN(comboY) ? model.y : comboY;\n    }\n    combo.update({\n      x: x,\n      y: y\n    });\n    var shapeFactory = combo.get('shapeFactory');\n    var shapeType = model.type || 'circle';\n    var comboAnimate = model.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate;\n    if (comboAnimate) {\n      setTimeout(function () {\n        if (!combo || combo.destroyed) return;\n        var keyShape = combo.getKeyShape();\n        if (!keyShape || keyShape.destroyed) return;\n        combo.getShapeCfg(model); // 更新 combo 缓存的 size\n        _this.updateComboEdges(combo);\n      }, 201);\n    } else {\n      this.updateComboEdges(combo);\n    }\n  };\n  ItemController.prototype.updateComboEdges = function (combo) {\n    var _a, _b;\n    var combEdges = combo.getEdges() || [];\n    for (var i = 0; i < combEdges.length; i++) {\n      var edge = combEdges[i];\n      if (!(edge === null || edge === void 0 ? void 0 : edge.destroyed) && !((_a = edge === null || edge === void 0 ? void 0 : edge.getSource()) === null || _a === void 0 ? void 0 : _a.destroyed) && !((_b = edge === null || edge === void 0 ? void 0 : edge.getTarget()) === null || _b === void 0 ? void 0 : _b.destroyed)) {\n        edge.refresh();\n      }\n    }\n  };\n  /**\n   * 收起 combo，隐藏相关元素\n   */\n  ItemController.prototype.collapseCombo = function (combo, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n    var graph = this.graph;\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node, stack);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c, stack);\n    });\n  };\n  /**\n   * 根据位置差量 dx dy，更新 comboId 后继元素的位置\n   * */\n  ItemController.prototype.updateComboSucceeds = function (comboId, dx, dy, children) {\n    var _this = this;\n    if (children === void 0) {\n      children = [];\n    }\n    var graph = this.graph;\n    if (!dx && !dy) return;\n    var kids = children;\n    if (!(kids === null || kids === void 0 ? void 0 : kids.length)) {\n      var comboTrees = graph.get('comboTrees');\n      comboTrees === null || comboTrees === void 0 ? void 0 : comboTrees.forEach(function (child) {\n        traverseTree(child, function (subTree) {\n          if (subTree.id === comboId) {\n            kids = subTree.children;\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n    kids === null || kids === void 0 ? void 0 : kids.forEach(function (child) {\n      var childItem = graph.findById(child.id);\n      if (childItem) {\n        var childModel = childItem.getModel();\n        _this.updateItem(child.id, {\n          x: (childModel.x || 0) + dx,\n          y: (childModel.y || 0) + dy\n        });\n      }\n    });\n  };\n  /**\n   * 展开 combo，相关元素出现\n   * 若子 combo 原先是收起状态，则保持它的收起状态\n   */\n  ItemController.prototype.expandCombo = function (combo, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n    var graph = this.graph;\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n    var children = combo.getChildren();\n    var edgeSet = new Set();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node, stack);\n      node.getEdges().forEach(function (edge) {\n        return edgeSet.add(edge);\n      });\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c, stack);\n      }\n      c.getEdges().forEach(function (edge) {\n        return edgeSet.add(edge);\n      });\n    });\n    edgeSet.forEach(function (edge) {\n      return edge.refresh();\n    });\n  };\n  /**\n   * 删除指定的节点或边\n   *\n   * @param {Item} item item ID 或实例\n   * @returns {void}\n   * @memberof ItemController\n   */\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    if (!item || item.destroyed) {\n      return;\n    }\n    var itemModel = clone(item.getModel());\n    var type = '';\n    if (item.getType) type = item.getType();\n    graph.emit('beforeremoveitem', {\n      item: itemModel,\n      type: type\n    });\n    var items = graph.get(\"\".concat(type, \"s\"));\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\".concat(type, \"s\"));\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n      if (comboTrees && comboId) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      }\n      // 若移除的是节点，需要将与之相连的边一同删除\n      var edges = item.getEdges();\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1;\n      // find the subtree rooted at the item to be removed\n      var found_2 = false; // the flag to terminate the forEach circulation\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      }\n      // 若移除的是 combo，需要将与之相连的边一同删除\n      var edges = item.getEdges();\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n      if (parentId) graph.updateCombo(parentId);\n    }\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel,\n      type: type\n    });\n  };\n  /**\n   * 更新 item 状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string} state 状态名称\n   * @param {boolean} value 是否启用状态或状态值\n   * @returns {void}\n   * @memberof ItemController\n   */\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n    if (isString(value)) {\n      stateName = \"\".concat(state, \":\").concat(value);\n    }\n    // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n    if (item.hasState(stateName) === value && value ||\n    // 当该状态已经存在且现在需要设置为 true 时，不需要继续。当该状态不存在，且设置为 false 时，需要继续\n    isString(value) && item.hasState(stateName)) {\n      // 当该状态 value 是字符串，且已经存在该状态，不需要继续\n      return;\n    }\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    }\n    // 先取消已有的 state\n    this.setItemState(currentItem, state, false);\n    // 再设置state，则此时该优先级为最高\n    this.setItemState(currentItem, state, true);\n  };\n  /**\n   * 清除所有指定的状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string[]} states 状态名称集合\n   * @memberof ItemController\n   */\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\n   * 刷新指定的 Item\n   *\n   * @param {Item} item Item ID 或 实例\n   * @memberof ItemController\n   */\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    graph.emit('beforeitemrefresh', {\n      item: item\n    });\n    // 调用 Item 的 refresh 方法，实现刷新功能\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\n   *\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\n   * @param {ComboConfig[]} comboModels combos 数据\n   * @memberof ItemController\n   */\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\n   * 改变Item的显示状态\n   *\n   * @param {Item} item Item ID 或 实例\n   * @param {boolean} visible 是否显示\n   * @memberof ItemController\n   */\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n    var graph = this.graph;\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      if (children_1 && (!visible || visible && !item.getModel().collapsed)) {\n        children_1.forEach(function (child) {\n          var childItem = graph.findById(child.id);\n          _this.changeItemVisibility(childItem, visible);\n        });\n      }\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n  return ItemController;\n}();\nexport default ItemController;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}