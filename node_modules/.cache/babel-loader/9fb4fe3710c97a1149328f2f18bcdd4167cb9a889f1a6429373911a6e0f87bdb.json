{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nvar AsyncQueue = /** @class */function () {\n  function AsyncQueue() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n  /** Return an async iterator for this queue */\n  AsyncQueue.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  AsyncQueue.prototype.push = function (value) {\n    return this.enqueue(value);\n  };\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  AsyncQueue.prototype.enqueue = function (value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      var settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value: value\n        });\n      }\n    } else {\n      this._values.push(value);\n    }\n  };\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  AsyncQueue.prototype.close = function () {\n    while (this._settlers.length > 0) {\n      var settler = this._settlers.shift();\n      settler.resolve({\n        done: true\n      });\n    }\n    this._closed = true;\n  };\n  // ITERATOR IMPLEMENTATION\n  /** @returns a Promise for an IteratorResult */\n  AsyncQueue.prototype.next = function () {\n    var _this = this;\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      var value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({\n        done: false,\n        value: value\n      });\n    }\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({\n        done: true,\n        value: undefined\n      });\n    }\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise(function (resolve, reject) {\n      _this._settlers.push({\n        resolve: resolve,\n        reject: reject\n      });\n    });\n  };\n  return AsyncQueue;\n}();\nexport default AsyncQueue;","map":{"version":3,"names":["AsyncQueue","_values","_settlers","_closed","prototype","Symbol","asyncIterator","push","value","enqueue","Error","length","settler","shift","reject","resolve","close","done","next","_this","Promise","undefined"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/async-queue/async-queue.js"],"sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        this._values = []; // enqueues > dequeues\n        this._settlers = []; // dequeues > enqueues\n        this._closed = false;\n    }\n    /** Return an async iterator for this queue */\n    AsyncQueue.prototype[Symbol.asyncIterator] = function () {\n        return this;\n    };\n    /** Push a new value - the async iterator will yield a promise resolved to this value */\n    AsyncQueue.prototype.push = function (value) {\n        return this.enqueue(value);\n    };\n    /**\n     * Push a new value - the async iterator will yield a promise resolved to this value\n     * Add an error - the async iterator will yield a promise rejected with this value\n     */\n    AsyncQueue.prototype.enqueue = function (value) {\n        if (this._closed) {\n            throw new Error('Closed');\n        }\n        if (this._settlers.length > 0) {\n            if (this._values.length > 0) {\n                throw new Error('Illegal internal state');\n            }\n            var settler = this._settlers.shift();\n            if (value instanceof Error) {\n                settler.reject(value);\n            }\n            else {\n                settler.resolve({ value: value });\n            }\n        }\n        else {\n            this._values.push(value);\n        }\n    };\n    /** Indicate that we not waiting for more values - The async iterator will be done */\n    AsyncQueue.prototype.close = function () {\n        while (this._settlers.length > 0) {\n            var settler = this._settlers.shift();\n            settler.resolve({ done: true });\n        }\n        this._closed = true;\n    };\n    // ITERATOR IMPLEMENTATION\n    /** @returns a Promise for an IteratorResult */\n    AsyncQueue.prototype.next = function () {\n        var _this = this;\n        // If values in queue, yield the first value\n        if (this._values.length > 0) {\n            var value = this._values.shift();\n            if (value instanceof Error) {\n                return Promise.reject(value);\n            }\n            return Promise.resolve({ done: false, value: value });\n        }\n        // If queue is closed, the iterator is done\n        if (this._closed) {\n            if (this._settlers.length > 0) {\n                throw new Error('Illegal internal state');\n            }\n            return Promise.resolve({ done: true, value: undefined });\n        }\n        // Yield a promise that waits for new values to be enqueued\n        return new Promise(function (resolve, reject) {\n            _this._settlers.push({ resolve: resolve, reject: reject });\n        });\n    };\n    return AsyncQueue;\n}());\nexport default AsyncQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}