{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isArray } from '@antv/util';\nimport { getSplinePath } from './path';\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n  return value === null || value === undefined || isNaN(value);\n}\nfunction isYNil(point) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n  var value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\nexport function getPathPoints(points, connectNulls, showSinglePoint) {\n  if (connectNulls === void 0) {\n    connectNulls = false;\n  }\n  if (showSinglePoint === void 0) {\n    showSinglePoint = true;\n  }\n  if (!points.length || points.length === 1 && !showSinglePoint) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    var filtered = [];\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point = points[i];\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n    return [filtered];\n  }\n  var result = [];\n  var tmp = [];\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n  if (tmp.length) {\n    result.push(tmp);\n  }\n  return result;\n}\n/**\n * 获取小提琴图的边界 path\n * @param points\n * @returns\n */\nexport function getViolinPath(points) {\n  var path = [];\n  for (var i = 0; i < points.length; i++) {\n    var point = points[i];\n    if (point) {\n      var action = i === 0 ? 'M' : 'L';\n      path.push([action, point.x, point.y]);\n    }\n  }\n  var first = points[0];\n  if (first) {\n    path.push(['L', first.x, first.y]);\n    path.push(['z']);\n  }\n  return path;\n}\n/**\n * 获取小提琴图 平滑的边界 path\n * @param points\n * @returns\n */\nexport function getSmoothViolinPath(points) {\n  var half = points.length / 2;\n  var leftPoints = [];\n  var rightPoints = [];\n  for (var i = 0; i < points.length; i++) {\n    if (i < half) {\n      leftPoints.push(points[i]);\n    } else {\n      rightPoints.push(points[i]);\n    }\n  }\n  var leftPath = getSplinePath(leftPoints, false);\n  var rightPath = getSplinePath(rightPoints, false);\n  if (rightPoints.length) {\n    leftPath.push(['L', rightPoints[0].x, rightPoints[0].y]);\n  }\n  rightPath.shift();\n  var path = leftPath.concat(rightPath);\n  if (leftPoints.length) {\n    path.push(['L', leftPoints[0].x, leftPoints[0].y]);\n  }\n  path.push(['z']);\n  return path;\n}","map":{"version":3,"names":["isArray","getSplinePath","isValueEmpty","value","undefined","isNaN","isYNil","point","y","getPathPoints","points","connectNulls","showSinglePoint","length","filtered","i","len","push","result","tmp","getViolinPath","path","action","x","first","getSmoothViolinPath","half","leftPoints","rightPoints","leftPath","rightPath","shift","concat"],"sources":["../../../../src/geometry/shape/util/get-path-points.ts"],"sourcesContent":["import { isArray } from '@antv/util';\nimport { PathCommand } from '../../../dependents';\nimport { Point, RangePoint, ShapeVertices } from '../../../interface';\nimport { getSplinePath } from './path';\n\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n  return value === null || value === undefined || isNaN(value);\n}\n\nfunction isYNil(point: Point[] | RangePoint) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n  const value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\nexport function getPathPoints(points: ShapeVertices, connectNulls: boolean = false, showSinglePoint: boolean = true) {\n  if (!points.length || (points.length === 1 && !showSinglePoint)) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    const filtered = [];\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n    return [filtered];\n  }\n\n  const result = [];\n  let tmp = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n\n  if (tmp.length) {\n    result.push(tmp);\n  }\n  return result;\n}\n\n/**\n * 获取小提琴图的边界 path\n * @param points\n * @returns\n */\nexport function getViolinPath(points: ShapeVertices): PathCommand[] {\n  const path = [];\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i] as Point;\n    if (point) {\n      const action = i === 0 ? 'M' : 'L';\n      path.push([action, point.x, point.y]);\n    }\n  }\n  const first = points[0] as Point;\n  if (first) {\n    path.push(['L', first.x, first.y]);\n    path.push(['z']);\n  }\n  return path;\n}\n\n/**\n * 获取小提琴图 平滑的边界 path\n * @param points\n * @returns\n */\nexport function getSmoothViolinPath(points: ShapeVertices): PathCommand[] {\n  const half = points.length / 2;\n  const leftPoints = [];\n  const rightPoints = [];\n  for (let i = 0; i < points.length; i++) {\n    if (i < half) {\n      leftPoints.push(points[i]);\n    } else {\n      rightPoints.push(points[i]);\n    }\n  }\n  const leftPath = getSplinePath(leftPoints, false);\n  const rightPath = getSplinePath(rightPoints, false);\n  if (rightPoints.length) {\n    leftPath.push(['L', rightPoints[0].x, rightPoints[0].y]);\n  }\n  rightPath.shift();\n  const path = leftPath.concat(rightPath);\n  if (leftPoints.length) {\n    path.push(['L', leftPoints[0].x, leftPoints[0].y]);\n  }\n  path.push(['z']);\n  return path;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}