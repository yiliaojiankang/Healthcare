{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// @ts-ignore\n\n// @ts-ignore\n\nimport { getCoords } from '@turf/invariant';\nimport { flattenEach } from '@turf/meta';\nimport { geojsonRewind } from \"../utils/util\";\nexport default function json(data, cfg) {\n  var x = cfg.x,\n    y = cfg.y,\n    x1 = cfg.x1,\n    y1 = cfg.y1,\n    coordinates = cfg.coordinates,\n    geometry = cfg.geometry;\n  var resultData = [];\n  if (!Array.isArray(data)) {\n    return {\n      dataArray: []\n    };\n  }\n\n  // GeoJson geometry 数据\n  if (geometry) {\n    data.filter(function (item) {\n      return item[geometry] && item[geometry].type && item[geometry].coordinates && item[geometry].coordinates.length > 0;\n    }).forEach(function (col, index) {\n      var rewindGeometry = geojsonRewind(col[geometry]);\n      // multi feature 情况拆分\n      flattenEach(rewindGeometry, function (currentFeature) {\n        var coord = getCoords(currentFeature);\n        var dataItem = _objectSpread(_objectSpread({}, col), {}, {\n          _id: index,\n          coordinates: coord\n        });\n        resultData.push(dataItem);\n      });\n    });\n    return {\n      dataArray: resultData\n    };\n  }\n  for (var featureIndex = 0; featureIndex < data.length; featureIndex++) {\n    var col = data[featureIndex];\n    var coords = [];\n\n    // GeoJson coordinates 数据\n    // 仅支持 Point LineString Polygon 三种 coordinates\n    if (coordinates) {\n      var type = 'Polygon';\n      if (!Array.isArray(coordinates[0])) {\n        type = 'Point';\n      }\n      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {\n        type = 'LineString';\n      }\n      var rewindGeometry = geojsonRewind({\n        type: type,\n        coordinates: col[coordinates]\n      });\n      coords = rewindGeometry.coordinates;\n    } else if (x && y && x1 && y1) {\n      // 起终点数据\n      var from = [parseFloat(col[x]), parseFloat(col[y])];\n      var to = [parseFloat(col[x1]), parseFloat(col[y1])];\n      coords = [from, to];\n    } else if (x && y) {\n      // 点数据\n      coords = [parseFloat(col[x]), parseFloat(col[y])];\n    }\n    var dataItem = _objectSpread(_objectSpread({}, col), {}, {\n      _id: featureIndex,\n      coordinates: coords\n    });\n    resultData.push(dataItem);\n  }\n  return {\n    dataArray: resultData\n  };\n}","map":{"version":3,"names":["_objectSpread","getCoords","flattenEach","geojsonRewind","json","data","cfg","x","y","x1","y1","coordinates","geometry","resultData","Array","isArray","dataArray","filter","item","type","length","forEach","col","index","rewindGeometry","currentFeature","coord","dataItem","_id","push","featureIndex","coords","from","parseFloat","to"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-source/es/parser/json.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// @ts-ignore\n\n// @ts-ignore\n\nimport { getCoords } from '@turf/invariant';\nimport { flattenEach } from '@turf/meta';\nimport { geojsonRewind } from \"../utils/util\";\nexport default function json(data, cfg) {\n  var x = cfg.x,\n    y = cfg.y,\n    x1 = cfg.x1,\n    y1 = cfg.y1,\n    coordinates = cfg.coordinates,\n    geometry = cfg.geometry;\n  var resultData = [];\n  if (!Array.isArray(data)) {\n    return {\n      dataArray: []\n    };\n  }\n\n  // GeoJson geometry 数据\n  if (geometry) {\n    data.filter(function (item) {\n      return item[geometry] && item[geometry].type && item[geometry].coordinates && item[geometry].coordinates.length > 0;\n    }).forEach(function (col, index) {\n      var rewindGeometry = geojsonRewind(col[geometry]);\n      // multi feature 情况拆分\n      flattenEach(rewindGeometry, function (currentFeature) {\n        var coord = getCoords(currentFeature);\n        var dataItem = _objectSpread(_objectSpread({}, col), {}, {\n          _id: index,\n          coordinates: coord\n        });\n        resultData.push(dataItem);\n      });\n    });\n    return {\n      dataArray: resultData\n    };\n  }\n  for (var featureIndex = 0; featureIndex < data.length; featureIndex++) {\n    var col = data[featureIndex];\n    var coords = [];\n\n    // GeoJson coordinates 数据\n    // 仅支持 Point LineString Polygon 三种 coordinates\n    if (coordinates) {\n      var type = 'Polygon';\n      if (!Array.isArray(coordinates[0])) {\n        type = 'Point';\n      }\n      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {\n        type = 'LineString';\n      }\n      var rewindGeometry = geojsonRewind({\n        type: type,\n        coordinates: col[coordinates]\n      });\n      coords = rewindGeometry.coordinates;\n    } else if (x && y && x1 && y1) {\n      // 起终点数据\n      var from = [parseFloat(col[x]), parseFloat(col[y])];\n      var to = [parseFloat(col[x1]), parseFloat(col[y1])];\n      coords = [from, to];\n    } else if (x && y) {\n      // 点数据\n      coords = [parseFloat(col[x]), parseFloat(col[y])];\n    }\n    var dataItem = _objectSpread(_objectSpread({}, col), {}, {\n      _id: featureIndex,\n      coordinates: coords\n    });\n    resultData.push(dataItem);\n  }\n  return {\n    dataArray: resultData\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}