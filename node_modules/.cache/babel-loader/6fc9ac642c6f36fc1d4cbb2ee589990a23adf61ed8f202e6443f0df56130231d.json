{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graph_1 = require(\"../../graph\");\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nvar buildLayerGraph = function (g, rank, relationship) {\n  var root = createRootNode(g);\n  var result = new graph_1.Graph({\n    compound: true\n  }).setGraph({\n    root: root\n  }).setDefaultNodeLabel(function (v) {\n    return g.node(v);\n  });\n  g.nodes().forEach(function (v) {\n    var _a;\n    var node = g.node(v);\n    var parent = g.parent(v);\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n      // This assumes we have only short edges!\n      (_a = g[relationship](v)) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n        var u = e.v === v ? e.w : e.v;\n        var edge = result.edgeFromArgs(u, v);\n        var weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, {\n          weight: g.edge(e).weight + weight\n        });\n      });\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n  return result;\n};\nvar createRootNode = function (g) {\n  var v;\n  while (g.hasNode(v = \"_root\".concat(Math.random())));\n  return v;\n};\nexports.default = buildLayerGraph;","map":{"version":3,"names":["graph_1","require","buildLayerGraph","g","rank","relationship","root","createRootNode","result","Graph","compound","setGraph","setDefaultNodeLabel","v","node","nodes","forEach","parent","minRank","maxRank","setNode","setParent","_a","e","u","w","edge","edgeFromArgs","weight","undefined","setEdge","hasOwnProperty","borderLeft","borderRight","hasNode","concat","Math","random","exports","default"],"sources":["../../../../../src/layout/dagre/src/order/build-layer-graph.ts"],"sourcesContent":[null],"mappings":";;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAMC,eAAe,GAAG,SAAAA,CACtBC,CAAQ,EACRC,IAAY,EACZC,YAAoC;EAEpC,IAAMC,IAAI,GAAGC,cAAc,CAACJ,CAAC,CAAC;EAC9B,IAAMK,MAAM,GAAG,IAAIR,OAAA,CAAAS,KAAK,CAAC;IAAEC,QAAQ,EAAE;EAAI,CAAE,CAAC,CACzCC,QAAQ,CAAC;IAAEL,IAAI,EAAAA;EAAA,CAAE,CAAC,CAClBM,mBAAmB,CAAC,UAACC,CAAS;IAC7B,OAAOV,CAAC,CAACW,IAAI,CAACD,CAAC,CAAE;EACnB,CAAC,CAAC;EAEJV,CAAC,CAACY,KAAK,EAAE,CAACC,OAAO,CAAC,UAACH,CAAC;;IAClB,IAAMC,IAAI,GAAGX,CAAC,CAACW,IAAI,CAACD,CAAC,CAAE;IACvB,IAAMI,MAAM,GAAGd,CAAC,CAACc,MAAM,CAACJ,CAAC,CAAC;IAE1B,IACEC,IAAI,CAACV,IAAI,KAAKA,IAAI,IAChBU,IAAI,CAACI,OAAkB,IAAId,IAAI,IAAIA,IAAI,IAAKU,IAAI,CAACK,OAAmB,EACtE;MACAX,MAAM,CAACY,OAAO,CAACP,CAAC,CAAC;MACjBL,MAAM,CAACa,SAAS,CAACR,CAAC,EAAEI,MAAM,IAAIX,IAAI,CAAC;MAEnC;MACA,CAAAgB,EAAA,GAAAnB,CAAC,CAACE,YAAY,CAAC,CAACQ,CAAC,CAAC,cAAAS,EAAA,uBAAAA,EAAA,CAAEN,OAAO,CAAC,UAACO,CAAC;QAC5B,IAAMC,CAAC,GAAGD,CAAC,CAACV,CAAC,KAAKA,CAAC,GAAGU,CAAC,CAACE,CAAC,GAAGF,CAAC,CAACV,CAAC;QAC/B,IAAMa,IAAI,GAAGlB,MAAM,CAACmB,YAAY,CAACH,CAAC,EAAEX,CAAC,CAAC;QACtC,IAAMe,MAAM,GAAGF,IAAI,KAAKG,SAAS,GAAGH,IAAI,CAACE,MAAM,GAAG,CAAC;QACnDpB,MAAM,CAACsB,OAAO,CAACN,CAAC,EAAEX,CAAC,EAAE;UAAEe,MAAM,EAAEzB,CAAC,CAACuB,IAAI,CAACH,CAAC,CAAE,CAACK,MAAO,GAAGA;QAAO,CAAE,CAAC;MAChE,CAAC,CAAC;MAEF,IAAId,IAAI,CAACiB,cAAc,CAAC,SAAS,CAAC,EAAE;QAClCvB,MAAM,CAACY,OAAO,CAACP,CAAC,EAAE;UAChBmB,UAAU,EAAElB,IAAI,CAACkB,UAAU,CAAC5B,IAAI,CAAC;UACjC6B,WAAW,EAAEnB,IAAI,CAACmB,WAAW,CAAC7B,IAAI;SACnC,CAAC;;;EAGR,CAAC,CAAC;EAEF,OAAOI,MAAM;AACf,CAAC;AAED,IAAMD,cAAc,GAAG,SAAAA,CAACJ,CAAQ;EAC9B,IAAIU,CAAC;EACL,OAAOV,CAAC,CAAC+B,OAAO,CAAErB,CAAC,GAAG,QAAAsB,MAAA,CAAQC,IAAI,CAACC,MAAM,EAAE,CAAG,CAAC,CAAC;EAChD,OAAOxB,CAAC;AACV,CAAC;AAEDyB,OAAA,CAAAC,OAAA,GAAerC,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}