{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\n// 带有图标的圆，可用于拓扑图中\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  shapeMap: {},\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var name = \"\".concat(this.type, \"-keyShape\");\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    return keyShape;\n  },\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    // 如果设置了color，则覆盖默认的stroke属性\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var size = this.getSize(cfg);\n    // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    };\n    // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n  }\n}, 'single-node');","map":{"version":3,"names":["__assign","deepMix","Global","Shape","registerNode","options","size","defaultNode","style","x","y","stroke","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","stateStyles","nodeStateStyles","shapeType","labelPosition","shapeMap","drawShape","cfg","group","getShapeStyle","name","concat","type","keyShape","addShape","attrs","className","draggable","defaultStyle","mergeStyle","getOptions","strokeStyle","color","getSize","r","styles","update","item","updateType","get","attr","updateShape"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/element/nodes/simple-circle.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\n// 带有图标的圆，可用于拓扑图中\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  shapeMap: {},\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var name = \"\".concat(this.type, \"-keyShape\");\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    return keyShape;\n  },\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    // 如果设置了color，则覆盖默认的stroke属性\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var size = this.getSize(cfg);\n    // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    };\n    // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n  }\n}, 'single-node');"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}