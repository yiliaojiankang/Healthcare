{"ast":null,"code":"import { __assign, __read, __spreadArray } from \"tslib\";\nimport { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { GROUP_ATTRS } from '../constant';\nimport { getScale } from '../dependents';\nimport { isFullCircle } from './coordinate';\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\nfunction getDefaultType(value) {\n  var type = 'linear';\n  if (dateRegex.test(value)) {\n    type = 'timeCat';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n  return type;\n}\n/**\n * using the scale type if user specified, otherwise infer the type\n */\nexport function inferScaleType(scale, scaleDef, attrType, geometryType) {\n  if (scaleDef === void 0) {\n    scaleDef = {};\n  }\n  if (scaleDef.type) return scaleDef.type;\n  // identity scale 直接返回\n  // geometry 类型有: edge,heatmap,interval,line,path,point,polygon,schema,voilin等；理论上，interval 下，可以用 linear scale 作为分组字段\n  if (scale.type !== 'identity' && GROUP_ATTRS.includes(attrType) && ['interval'].includes(geometryType)) {\n    return 'cat';\n  }\n  return scale.isCategory ? 'cat' : scale.type;\n}\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\nexport function createScaleByField(field, data, scaleDef) {\n  var validData = data || [];\n  if (isNumber(field) || isNil(firstValue(validData, field)) && isEmpty(scaleDef)) {\n    var Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field]\n    });\n  }\n  var values = valuesOfKey(validData, field);\n  // 如果已经定义过这个度量 (fix-later 单纯从数据中，推断 scale type 是不精确的)\n  var type = get(scaleDef, 'type', getDefaultType(values[0]));\n  var ScaleCtor = getScale(type);\n  return new ScaleCtor(__assign({\n    field: field,\n    values: values\n  }, scaleDef));\n}\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\nexport function syncScale(scale, newScale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    var obj = {};\n    for (var k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n    scale.change(obj);\n  }\n}\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\nexport function getName(scale) {\n  return scale.alias || scale.field;\n}\n/**\n * 根据 scale values 和 coordinate 获取分类默认 range\n * @param scale 需要获取的 scale 实例\n * @param coordinate coordinate 实例\n * @param theme theme\n */\nexport function getDefaultCategoryScaleRange(scale, coordinate, theme) {\n  var values = scale.values;\n  var count = values.length;\n  var range;\n  if (count === 1) {\n    range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5] 的状态\n  } else {\n    var widthRatio = 1;\n    var offset = 0;\n    if (isFullCircle(coordinate)) {\n      if (!coordinate.isTransposed) {\n        range = [0, 1 - 1 / count];\n      } else {\n        widthRatio = get(theme, 'widthRatio.multiplePie', 1 / 1.3);\n        offset = 1 / count * widthRatio;\n        range = [offset / 2, 1 - offset / 2];\n      }\n    } else {\n      offset = 1 / count / 2; // 两边留下分类空间的一半\n      range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时\n    }\n  }\n\n  return range;\n}\n/**\n * @function y轴scale的max\n * @param {yScale}\n */\nexport function getMaxScale(scale) {\n  // 过滤values[]中 NaN/undefined/null 等\n  var values = scale.values.filter(function (item) {\n    return !isNil(item) && !isNaN(item);\n  });\n  return Math.max.apply(Math, __spreadArray(__spreadArray([], __read(values), false), [isNil(scale.max) ? -Infinity : scale.max], false));\n}","map":{"version":3,"names":["firstValue","get","isEmpty","isNil","isNumber","isString","valuesOfKey","GROUP_ATTRS","getScale","isFullCircle","dateRegex","getDefaultType","value","type","test","inferScaleType","scale","scaleDef","attrType","geometryType","includes","isCategory","createScaleByField","field","data","validData","Identity","toString","values","ScaleCtor","__assign","syncScale","newScale","obj","k","Object","prototype","hasOwnProperty","call","change","getName","alias","getDefaultCategoryScaleRange","coordinate","theme","count","length","range","widthRatio","offset","isTransposed","getMaxScale","filter","item","isNaN","Math","max","apply","__spreadArray","__read","Infinity"],"sources":["../../src/util/scale.ts"],"sourcesContent":["import { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { GROUP_ATTRS } from '../constant';\nimport { getScale, Scale, Coordinate } from '../dependents';\nimport { LooseObject, ScaleOption, ViewCfg } from '../interface';\nimport { isFullCircle } from './coordinate';\n\nconst dateRegex =\n  /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\nfunction getDefaultType(value: any): string {\n  let type = 'linear';\n  if (dateRegex.test(value)) {\n    type = 'timeCat';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n  return type;\n}\n\n/**\n * using the scale type if user specified, otherwise infer the type\n */\nexport function inferScaleType(scale: Scale, scaleDef: ScaleOption = {}, attrType: string, geometryType: string): string {\n  if (scaleDef.type) return scaleDef.type;\n  // identity scale 直接返回\n  // geometry 类型有: edge,heatmap,interval,line,path,point,polygon,schema,voilin等；理论上，interval 下，可以用 linear scale 作为分组字段\n  if (scale.type !== 'identity' && GROUP_ATTRS.includes(attrType) && ['interval'].includes(geometryType)) {\n    return 'cat';\n  }\n  return scale.isCategory ? 'cat' : scale.type;\n}\n\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\nexport function createScaleByField(field: string | number, data?: LooseObject[] | [], scaleDef?: ScaleOption): Scale {\n  const validData = data || [];\n\n  if (isNumber(field) || (isNil(firstValue(validData, field)) && isEmpty(scaleDef))) {\n    const Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field],\n    });\n  }\n\n  const values = valuesOfKey(validData, field);\n\n  // 如果已经定义过这个度量 (fix-later 单纯从数据中，推断 scale type 是不精确的)\n  const type = get(scaleDef, 'type', getDefaultType(values[0]));\n  const ScaleCtor = getScale(type);\n  return new ScaleCtor({\n    field,\n    values,\n    ...scaleDef,\n  });\n}\n\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\nexport function syncScale(scale: Scale, newScale: Scale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    const obj = {};\n    for (const k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\nexport function getName(scale: Scale): string {\n  return scale.alias || scale.field;\n}\n\n/**\n * 根据 scale values 和 coordinate 获取分类默认 range\n * @param scale 需要获取的 scale 实例\n * @param coordinate coordinate 实例\n * @param theme theme\n */\nexport function getDefaultCategoryScaleRange(\n  scale: Scale,\n  coordinate: Coordinate,\n  theme: ViewCfg['theme']\n): Scale['range'] {\n  const { values } = scale;\n  const count = values.length;\n  let range;\n\n  if (count === 1) {\n    range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5] 的状态\n  } else {\n    let widthRatio = 1;\n    let offset = 0;\n\n    if (isFullCircle(coordinate)) {\n      if (!coordinate.isTransposed) {\n        range = [0, 1 - 1 / count];\n      } else {\n        widthRatio = get(theme, 'widthRatio.multiplePie', 1 / 1.3);\n        offset = (1 / count) * widthRatio;\n        range = [offset / 2, 1 - offset / 2];\n      }\n    } else {\n      offset = 1 / count / 2; // 两边留下分类空间的一半\n      range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时\n    }\n  }\n  return range;\n}\n\n/**\n * @function y轴scale的max\n * @param {yScale}\n */\nexport function getMaxScale(scale: Scale) {\n  // 过滤values[]中 NaN/undefined/null 等\n  const values = scale.values.filter((item) => !isNil(item) && !isNaN(item));\n\n  return Math.max(...values, isNil(scale.max) ? -Infinity : scale.max);\n}\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,GAAG,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,YAAY;AAC7F,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAA2B,eAAe;AAE3D,SAASC,YAAY,QAAQ,cAAc;AAE3C,IAAMC,SAAS,GACb,sTAAsT;AAExT;;;;;;AAMA,SAASC,cAAcA,CAACC,KAAU;EAChC,IAAIC,IAAI,GAAG,QAAQ;EACnB,IAAIH,SAAS,CAACI,IAAI,CAACF,KAAK,CAAC,EAAE;IACzBC,IAAI,GAAG,SAAS;GACjB,MAAM,IAAIR,QAAQ,CAACO,KAAK,CAAC,EAAE;IAC1BC,IAAI,GAAG,KAAK;;EAEd,OAAOA,IAAI;AACb;AAEA;;;AAGA,OAAM,SAAUE,cAAcA,CAACC,KAAY,EAAEC,QAA0B,EAAEC,QAAgB,EAAEC,YAAoB;EAAlE,IAAAF,QAAA;IAAAA,QAAA,KAA0B;EAAA;EACrE,IAAIA,QAAQ,CAACJ,IAAI,EAAE,OAAOI,QAAQ,CAACJ,IAAI;EACvC;EACA;EACA,IAAIG,KAAK,CAACH,IAAI,KAAK,UAAU,IAAIN,WAAW,CAACa,QAAQ,CAACF,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAACE,QAAQ,CAACD,YAAY,CAAC,EAAE;IACtG,OAAO,KAAK;;EAEd,OAAOH,KAAK,CAACK,UAAU,GAAG,KAAK,GAAGL,KAAK,CAACH,IAAI;AAC9C;AAEA;;;;;;;;AAQA,OAAM,SAAUS,kBAAkBA,CAACC,KAAsB,EAAEC,IAAyB,EAAEP,QAAsB;EAC1G,IAAMQ,SAAS,GAAGD,IAAI,IAAI,EAAE;EAE5B,IAAIpB,QAAQ,CAACmB,KAAK,CAAC,IAAKpB,KAAK,CAACH,UAAU,CAACyB,SAAS,EAAEF,KAAK,CAAC,CAAC,IAAIrB,OAAO,CAACe,QAAQ,CAAE,EAAE;IACjF,IAAMS,QAAQ,GAAGlB,QAAQ,CAAC,UAAU,CAAC;IACrC,OAAO,IAAIkB,QAAQ,CAAC;MAClBH,KAAK,EAAEA,KAAK,CAACI,QAAQ,EAAE;MACvBC,MAAM,EAAE,CAACL,KAAK;KACf,CAAC;;EAGJ,IAAMK,MAAM,GAAGtB,WAAW,CAACmB,SAAS,EAAEF,KAAK,CAAC;EAE5C;EACA,IAAMV,IAAI,GAAGZ,GAAG,CAACgB,QAAQ,EAAE,MAAM,EAAEN,cAAc,CAACiB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7D,IAAMC,SAAS,GAAGrB,QAAQ,CAACK,IAAI,CAAC;EAChC,OAAO,IAAIgB,SAAS,CAAAC,QAAA;IAClBP,KAAK,EAAAA,KAAA;IACLK,MAAM,EAAAA;EAAA,GACHX,QAAQ,EACX;AACJ;AAEA;;;;;;;AAOA,OAAM,SAAUc,SAASA,CAACf,KAAY,EAAEgB,QAAe;EACrD,IAAIhB,KAAK,CAACH,IAAI,KAAK,UAAU,IAAImB,QAAQ,CAACnB,IAAI,KAAK,UAAU,EAAE;IAC7D,IAAMoB,GAAG,GAAG,EAAE;IACd,KAAK,IAAMC,CAAC,IAAIF,QAAQ,EAAE;MACxB,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,QAAQ,EAAEE,CAAC,CAAC,EAAE;QACrDD,GAAG,CAACC,CAAC,CAAC,GAAGF,QAAQ,CAACE,CAAC,CAAC;;;IAIxBlB,KAAK,CAACuB,MAAM,CAACN,GAAG,CAAC;;AAErB;AAEA;;;;;;AAMA,OAAM,SAAUO,OAAOA,CAACxB,KAAY;EAClC,OAAOA,KAAK,CAACyB,KAAK,IAAIzB,KAAK,CAACO,KAAK;AACnC;AAEA;;;;;;AAMA,OAAM,SAAUmB,4BAA4BA,CAC1C1B,KAAY,EACZ2B,UAAsB,EACtBC,KAAuB;EAEf,IAAAhB,MAAM,GAAKZ,KAAK,CAAAY,MAAV;EACd,IAAMiB,KAAK,GAAGjB,MAAM,CAACkB,MAAM;EAC3B,IAAIC,KAAK;EAET,IAAIF,KAAK,KAAK,CAAC,EAAE;IACfE,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;GACnB,MAAM;IACL,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,MAAM,GAAG,CAAC;IAEd,IAAIxC,YAAY,CAACkC,UAAU,CAAC,EAAE;MAC5B,IAAI,CAACA,UAAU,CAACO,YAAY,EAAE;QAC5BH,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAGF,KAAK,CAAC;OAC3B,MAAM;QACLG,UAAU,GAAG/C,GAAG,CAAC2C,KAAK,EAAE,wBAAwB,EAAE,CAAC,GAAG,GAAG,CAAC;QAC1DK,MAAM,GAAI,CAAC,GAAGJ,KAAK,GAAIG,UAAU;QACjCD,KAAK,GAAG,CAACE,MAAM,GAAG,CAAC,EAAE,CAAC,GAAGA,MAAM,GAAG,CAAC,CAAC;;KAEvC,MAAM;MACLA,MAAM,GAAG,CAAC,GAAGJ,KAAK,GAAG,CAAC,CAAC,CAAC;MACxBE,KAAK,GAAG,CAACE,MAAM,EAAE,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC;;;;EAGlC,OAAOF,KAAK;AACd;AAEA;;;;AAIA,OAAM,SAAUI,WAAWA,CAACnC,KAAY;EACtC;EACA,IAAMY,MAAM,GAAGZ,KAAK,CAACY,MAAM,CAACwB,MAAM,CAAC,UAACC,IAAI;IAAK,QAAClD,KAAK,CAACkD,IAAI,CAAC,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC;EAA5B,CAA4B,CAAC;EAE1E,OAAOE,IAAI,CAACC,GAAG,CAAAC,KAAA,CAARF,IAAI,EAAAG,aAAA,CAAAA,aAAA,KAAAC,MAAA,CAAQ/B,MAAM,YAAEzB,KAAK,CAACa,KAAK,CAACwC,GAAG,CAAC,GAAG,CAACI,QAAQ,GAAG5C,KAAK,CAACwC,GAAG;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}