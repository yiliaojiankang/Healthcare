{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __extends, __read } from \"tslib\";\nimport { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { Slider as SliderComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * @ignore\n * slider Controller\n */\nvar Slider = /** @class */function (_super) {\n  __extends(Slider, _super);\n  function Slider(view) {\n    var _this = _super.call(this, view) || this;\n    _this.onChangeFn = noop;\n    /**\n     * 清除测量\n     */\n    _this.resetMeasure = function () {\n      _this.clear();\n    };\n    /**\n     * 滑块滑动的时候出发\n     * @param v\n     */\n    _this.onValueChange = function (v) {\n      var _a = __read(v, 2),\n        min = _a[0],\n        max = _a[1];\n      _this.start = min;\n      _this.end = max;\n      _this.changeViewData(min, max);\n    };\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.onChangeFn = throttle(_this.onValueChange, 20, {\n      leading: true\n    });\n    _this.width = 0;\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, _this.resetMeasure);\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, _this.resetMeasure);\n    return _this;\n  }\n  Object.defineProperty(Slider.prototype, \"name\", {\n    get: function () {\n      return 'slider';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Slider.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  };\n  /**\n   * 初始化\n   */\n  Slider.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n  Slider.prototype.render = function () {\n    this.option = this.view.getOptions().slider;\n    var _a = this.getSliderCfg(),\n      start = _a.start,\n      end = _a.end;\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n    var viewData = this.view.getOptions().data;\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n  Slider.prototype.layout = function () {\n    var _this = this;\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(function () {\n        // 初始状态下的 view 数据过滤\n        if (!_this.view.destroyed) {\n          _this.changeViewData(_this.start, _this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      var width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      var padding = this.slider.component.get('padding');\n      var _a = __read(padding, 4),\n        paddingTop = _a[0],\n        paddingRight = _a[1],\n        paddingBottom = _a[2],\n        paddingLeft = _a[3];\n      var bboxObject = this.slider.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(padding);\n      var _b = this.getMinMaxText(this.start, this.end),\n        minText = _b.minText,\n        maxText = _b.maxText;\n      var _c = __read(directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM), 2),\n        x1 = _c[0],\n        y1 = _c[1];\n      var _d = __read(directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM), 2),\n        x2 = _d[0],\n        y2 = _d[1];\n      // 默认放在 bottom\n      this.slider.component.update(__assign(__assign({}, this.getSliderCfg()), {\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      }));\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  };\n  /**\n   * 更新\n   */\n  Slider.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  /**\n   * 创建 slider 组件\n   */\n  Slider.prototype.createSlider = function () {\n    var cfg = this.getSliderCfg();\n    // 添加 slider 组件\n    var component = new SliderComponent(__assign({\n      container: this.container\n    }, cfg));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER\n    };\n  };\n  /**\n   * 更新配置\n   */\n  Slider.prototype.updateSlider = function () {\n    var cfg = this.getSliderCfg();\n    if (this.width) {\n      var _a = this.getMinMaxText(this.start, this.end),\n        minText = _a.minText,\n        maxText = _a.maxText;\n      cfg = __assign(__assign({}, cfg), {\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      });\n    }\n    this.slider.component.update(cfg);\n    return this.slider;\n  };\n  /**\n   * 进行测量操作\n   */\n  Slider.prototype.measureSlider = function () {\n    var width = this.getSliderCfg().width;\n    this.width = width;\n  };\n  /**\n   * 生成 slider 配置\n   */\n  Slider.prototype.getSliderCfg = function () {\n    var cfg = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      var trendCfg = __assign({\n        data: this.getData()\n      }, get(this.option, 'trendCfg', {}));\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = __assign(__assign({}, cfg), {\n        trendCfg: trendCfg\n      });\n    }\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    return cfg;\n  };\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  Slider.prototype.getData = function () {\n    var data = this.view.getOptions().data;\n    var _a = __read(this.view.getYScales(), 1),\n      yScale = _a[0];\n    var groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      var _b = groupScales[0],\n        field_1 = _b.field,\n        ticks_1 = _b.ticks;\n      return data.reduce(function (pre, cur) {\n        if (cur[field_1] === ticks_1[0]) {\n          pre.push(cur[yScale.field]);\n        }\n        return pre;\n      }, []);\n    }\n    return data.map(function (datum) {\n      return datum[yScale.field] || 0;\n    });\n  };\n  /**\n   * 获取 slider 的主题配置\n   */\n  Slider.prototype.getThemeOptions = function () {\n    var theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  };\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  Slider.prototype.getMinMaxText = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n    var xValues = isHorizontal ? values : values.reverse();\n    var dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    var minText = get(xValues, [minIndex]);\n    var maxText = get(xValues, [maxIndex]);\n    var formatter = this.getSliderCfg().formatter;\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n    return {\n      minText: minText,\n      maxText: maxText\n    };\n  };\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  Slider.prototype.changeViewData = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    // 如果是 xScale 数值类型，则进行排序\n    var xScaleValues = this.view.getXScale().isLinear ? values.sort(function (a, b) {\n      return Number(a) - Number(b);\n    }) : values;\n    var xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    var xTickCount = size(xValues);\n    var minIndex = Math.round(min * (xTickCount - 1));\n    var maxIndex = Math.round(max * (xTickCount - 1));\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, function (value, datum) {\n      var idx = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  };\n  /**\n   * 覆写父类方法\n   */\n  Slider.prototype.getComponents = function () {\n    return this.slider ? [this.slider] : [];\n  };\n  /**\n   * 覆盖父类\n   */\n  Slider.prototype.clear = function () {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  };\n  return Slider;\n}(Controller);\nexport default Slider;","map":{"version":3,"names":["deepMix","get","isObject","size","clamp","isNil","noop","throttle","isEmpty","valuesOfKey","COMPONENT_TYPE","DIRECTION","LAYER","VIEW_LIFE_CIRCLE","Slider","SliderComponent","BBox","directionToPosition","isBetween","Controller","_super","__extends","view","_this","call","onChangeFn","resetMeasure","clear","onValueChange","v","_a","__read","min","max","start","end","changeViewData","container","getLayer","FORE","addGroup","leading","width","on","BEFORE_CHANGE_DATA","BEFORE_CHANGE_SIZE","Object","defineProperty","prototype","destroy","off","init","render","option","getOptions","slider","getSliderCfg","viewData","data","updateSlider","createSlider","component","undefined","layout","measureSlider","setTimeout","destroyed","coordinateBBox","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","bboxObject","getLayoutBBox","bbox","x","y","Math","height","expand","_b","getMinMaxText","minText","maxText","_c","viewBBox","BOTTOM","x1","y1","_d","x2","y2","update","__assign","cut","cfg","layer","direction","type","SLIDER","trendCfg","getData","getThemeOptions","getYScales","yScale","groupScales","getGroupScales","length","field_1","field","ticks_1","ticks","reduce","pre","cur","push","map","datum","theme","getTheme","xScale","getXScale","isHorizontal","values","isLinear","sort","xValues","reverse","dataSize","xTickCount","minIndex","round","maxIndex","formatter","xScaleValues","a","b","Number","filter","value","idx","indexOf","getComponents"],"sources":["../../../src/chart/controller/slider.ts"],"sourcesContent":["import { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { IGroup, Slider as SliderComponent } from '../../dependents';\nimport { ComponentOption, Datum, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Writeable } from '../../util/types';\nimport View from '../view';\nimport { Controller } from './base';\nimport { SliderOption, SliderCfg } from '../../interface';\n\n/**\n * @ignore\n * slider Controller\n */\nexport default class Slider extends Controller<SliderOption> {\n  private slider: ComponentOption;\n  private container: IGroup;\n\n  private width: number;\n  private start: number;\n  private end: number;\n\n  private onChangeFn: (evt: {}) => void = noop;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n    this.onChangeFn = throttle(this.onValueChange, 20, {\n      leading: true,\n    }) as (evt: {}) => void;\n\n    this.width = 0;\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  get name(): string {\n    return 'slider';\n  }\n\n  public destroy() {\n    super.destroy();\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {}\n\n  /**\n   * 渲染\n   */\n  public render() {\n    this.option = this.view.getOptions().slider;\n    const { start, end } = this.getSliderCfg();\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    const { data: viewData } = this.view.getOptions();\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * 布局\n   */\n  public layout() {\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(() => {\n        // 初始状态下的 view 数据过滤\n        if (!this.view.destroyed) {\n          this.changeViewData(this.start, this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      const width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      const padding: Padding = this.slider.component.get('padding') as Padding;\n      const [paddingTop, paddingRight, paddingBottom, paddingLeft] = padding;\n      const bboxObject = this.slider.component.getLayoutBBox();\n      const bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(\n        padding\n      );\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM);\n      const [x2, y2] = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM);\n\n      // 默认放在 bottom\n      this.slider.component.update({\n        ...this.getSliderCfg(),\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText,\n        maxText,\n      });\n\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 逻辑和 render 保持一致\n    this.render();\n  }\n\n  /**\n   * 创建 slider 组件\n   */\n  private createSlider(): ComponentOption {\n    const cfg: any = this.getSliderCfg();\n    // 添加 slider 组件\n    const component = new SliderComponent({\n      container: this.container,\n      ...cfg,\n    });\n\n    component.init();\n\n    return {\n      component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER,\n    };\n  }\n\n  /**\n   * 更新配置\n   */\n  private updateSlider() {\n    let cfg = this.getSliderCfg();\n    if (this.width) {\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n      cfg = { ...cfg, width: this.width, start: this.start, end: this.end, minText, maxText };\n    }\n\n    this.slider.component.update(cfg);\n\n    return this.slider;\n  }\n\n  /**\n   * 进行测量操作\n   */\n  private measureSlider() {\n    const { width } = this.getSliderCfg();\n\n    this.width = width;\n  }\n\n  /**\n   * 清除测量\n   */\n  private resetMeasure = () => {\n    this.clear();\n  };\n\n  /**\n   * 生成 slider 配置\n   */\n  private getSliderCfg() {\n    let cfg: Writeable<SliderCfg> & { x: number; y: number; width: number; minText: string; maxText: string } = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width,\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      const trendCfg = {\n        data: this.getData(),\n        ...get(this.option, 'trendCfg', {}),\n      };\n\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = { ...cfg, trendCfg };\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n\n    return cfg;\n  }\n\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  private getData(): number[] {\n    const data = this.view.getOptions().data;\n    const [yScale] = this.view.getYScales();\n    const groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      const { field, ticks } = groupScales[0];\n      return data.reduce((pre, cur) => {\n        if (cur[field] === ticks[0]) {\n          pre.push(cur[yScale.field] as number);\n        }\n        return pre;\n      }, []) as number[];\n    }\n\n    return data.map((datum) => datum[yScale.field] || 0);\n  }\n\n  /**\n   * 获取 slider 的主题配置\n   */\n  private getThemeOptions() {\n    const theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  }\n\n  /**\n   * 滑块滑动的时候出发\n   * @param v\n   */\n  private onValueChange = (v: any) => {\n    const [min, max] = v;\n\n    this.start = min;\n    this.end = max;\n\n    this.changeViewData(min, max);\n  };\n\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  private getMinMaxText(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const isHorizontal = true;\n    let values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    if (xScale.isLinear) {\n      values = values.sort();\n    }\n\n    const xValues = isHorizontal ? values : values.reverse();\n    const dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    let minText = get(xValues, [minIndex]);\n    let maxText = get(xValues, [maxIndex]);\n\n    const formatter = this.getSliderCfg().formatter as SliderCfg['formatter'];\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText,\n      maxText,\n    };\n  }\n\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  private changeViewData(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    const isHorizontal = true;\n    const values = valuesOfKey(data, xScale.field);\n\n    // 如果是 xScale 数值类型，则进行排序\n    const xScaleValues = this.view.getXScale().isLinear ? values.sort((a, b) => Number(a) - Number(b)) : values;\n\n    const xValues = isHorizontal ? xScaleValues : xScaleValues.reverse();\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.round(min * (xTickCount - 1));\n    const maxIndex = Math.round(max * (xTickCount - 1));\n\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, (value: any, datum: Datum) => {\n      const idx: number = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  }\n\n  /**\n   * 覆写父类方法\n   */\n  public getComponents() {\n    return this.slider ? [this.slider] : [];\n  }\n\n  /**\n   * 覆盖父类\n   */\n  public clear() {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}