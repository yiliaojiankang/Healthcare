{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n/**\n * Sibling filter\n * @ignore\n */\nvar SiblingFilter = /** @class */function (_super) {\n  __extends(SiblingFilter, _super);\n  function SiblingFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.byRecord = false;\n    return _this;\n  }\n  /**\n   * 过滤隐藏图形\n   */\n  SiblingFilter.prototype.filter = function () {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  };\n  // 根据框选的记录来做过滤\n  SiblingFilter.prototype.filterByRecord = function () {\n    var view = this.context.view;\n    var maskElements = getMaskedElements(this.context, 10);\n    if (!maskElements) {\n      return;\n    }\n    var xFiled = view.getXScale().field;\n    var yField = view.getYScales()[0].field;\n    var records = maskElements.map(function (el) {\n      return el.getModel().data;\n    });\n    var siblings = getSilbings(view);\n    each(siblings, function (sibling) {\n      var elements = getElements(sibling);\n      each(elements, function (el) {\n        var record = el.getModel().data;\n        // records.includes(record) 不生效，应该是数据的引用被改了\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  };\n  // 根据被框选的包围盒做过滤\n  SiblingFilter.prototype.filterByBBox = function () {\n    var _this = this;\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    each(siblings, function (sibling) {\n      var maskElements = getSiblingMaskElements(_this.context, sibling, 10);\n      var elements = getElements(sibling);\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, function (el) {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  };\n  /**\n   * 清理所有隐藏的图形\n   */\n  SiblingFilter.prototype.reset = function () {\n    var siblings = getSilbings(this.context.view);\n    each(siblings, function (sibling) {\n      var elements = getElements(sibling);\n      each(elements, function (el) {\n        el.show();\n      });\n    });\n  };\n  return SiblingFilter;\n}(Action);\nexport default SiblingFilter;","map":{"version":3,"names":["each","Action","getElements","getMaskedElements","getSiblingMaskElements","getSilbings","isInRecords","isMask","SiblingFilter","_super","__extends","_this","apply","arguments","byRecord","prototype","filter","context","filterByRecord","filterByBBox","view","maskElements","xFiled","getXScale","field","yField","getYScales","records","map","el","getModel","data","siblings","sibling","elements","record","show","hide","includes","reset"],"sources":["../../../../src/interaction/action/element/sibling-filter.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n\n/**\n * Sibling filter\n * @ignore\n */\nclass SiblingFilter extends Action {\n  protected byRecord = false;\n  /**\n   * 过滤隐藏图形\n   */\n  public filter() {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  }\n  // 根据框选的记录来做过滤\n  private filterByRecord() {\n    const view = this.context.view;\n    const maskElements = getMaskedElements(this.context, 10);\n    if (!maskElements) {\n      return;\n    }\n    const xFiled = view.getXScale().field;\n    const yField = view.getYScales()[0].field;\n    const records = maskElements.map((el) => {\n      return el.getModel().data;\n    });\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        const record = el.getModel().data;\n        // records.includes(record) 不生效，应该是数据的引用被改了\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  }\n\n  // 根据被框选的包围盒做过滤\n  private filterByBBox() {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const maskElements = getSiblingMaskElements(this.context, sibling, 10);\n      const elements = getElements(sibling);\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * 清理所有隐藏的图形\n   */\n  public reset() {\n    const siblings = getSilbings(this.context.view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        el.show();\n      });\n    });\n  }\n}\n\nexport default SiblingFilter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}