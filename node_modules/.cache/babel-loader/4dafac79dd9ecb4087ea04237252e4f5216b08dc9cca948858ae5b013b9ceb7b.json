{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __read } from \"tslib\";\nimport { vec2 } from '@antv/matrix-util';\nimport { each } from '@antv/util';\nimport { getDistanceToCenter } from '../../../util/coordinate';\nfunction _points2path(points, isInCircle) {\n  var path = [];\n  if (points.length) {\n    path.push(['M', points[0].x, points[0].y]);\n    for (var i = 1, length_1 = points.length; i < length_1; i += 1) {\n      var item = points[i];\n      path.push(['L', item.x, item.y]);\n    }\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  }\n  return path;\n}\nfunction _convertArr(arr, coord) {\n  var tmp = [arr[0]];\n  for (var i = 1, len = arr.length; i < len; i = i + 2) {\n    var point = coord.convert({\n      x: arr[i],\n      y: arr[i + 1]\n    });\n    tmp.push(point.x, point.y);\n  }\n  return tmp;\n}\nfunction _convertArcPath(path, coord) {\n  var isTransposed = coord.isTransposed;\n  var r = path[1];\n  var x = path[6];\n  var y = path[7];\n  var point = coord.convert({\n    x: x,\n    y: y\n  });\n  var direction = isTransposed ? 0 : 1;\n  return ['A', r, r, 0, 0, direction, point.x, point.y];\n}\nfunction _convertPolarPath(pre, cur, coord) {\n  var isTransposed = coord.isTransposed,\n    startAngle = coord.startAngle,\n    endAngle = coord.endAngle;\n  var prePoint = pre[0].toLowerCase() === 'a' ? {\n    x: pre[6],\n    y: pre[7]\n  } : {\n    x: pre[1],\n    y: pre[2]\n  };\n  var curPoint = {\n    x: cur[1],\n    y: cur[2]\n  };\n  var rst = [];\n  var xDim = isTransposed ? 'y' : 'x';\n  var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);\n  var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向\n  var flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位\n  var convertPoint = coord.convert(curPoint);\n  var r = getDistanceToCenter(coord, convertPoint);\n  if (r >= 0.5) {\n    // 小于1像素的圆在图像上无法识别\n    if (angleRange === Math.PI * 2) {\n      var middlePoint = {\n        x: (curPoint.x + prePoint.x) / 2,\n        y: (curPoint.y + prePoint.y) / 2\n      };\n      var middleConvertPoint = coord.convert(middlePoint);\n      rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);\n      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n    } else {\n      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n    }\n  }\n  return rst;\n}\n// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形\nfunction _filterFullCirleLine(path) {\n  each(path, function (subPath, index) {\n    var cur = subPath;\n    if (cur[0].toLowerCase() === 'a') {\n      var pre = path[index - 1];\n      var next = path[index + 1];\n      if (next && next[0].toLowerCase() === 'a') {\n        if (pre && pre[0].toLowerCase() === 'l') {\n          pre[0] = 'M';\n        }\n      } else if (pre && pre[0].toLowerCase() === 'a') {\n        if (next && next[0].toLowerCase() === 'l') {\n          next[0] = 'M';\n        }\n      }\n    }\n  });\n}\n/**\n * @ignore\n * 计算光滑的贝塞尔曲线\n */\nexport var smoothBezier = function (points, smooth, isLoop, constraint) {\n  var _a;\n  var cps = [];\n  var hasConstraint = !!constraint;\n  var prevPoint;\n  var nextPoint;\n  var min;\n  var max;\n  var nextCp0;\n  var cp1;\n  var cp0;\n  if (hasConstraint) {\n    _a = __read(constraint, 2), min = _a[0], max = _a[1];\n    for (var i = 0, l = points.length; i < l; i++) {\n      var point = points[i];\n      min = vec2.min([0, 0], min, point);\n      max = vec2.max([0, 0], max, point);\n    }\n  }\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n    if (i === 0 && !isLoop) {\n      cp0 = point;\n    } else if (i === len - 1 && !isLoop) {\n      cp1 = point;\n      cps.push(cp0);\n      cps.push(cp1);\n    } else {\n      prevPoint = points[isLoop ? i ? i - 1 : len - 1 : i - 1];\n      nextPoint = points[isLoop ? (i + 1) % len : i + 1];\n      var v = [0, 0];\n      v = vec2.sub(v, nextPoint, prevPoint);\n      v = vec2.scale(v, v, smooth);\n      var d0 = vec2.distance(point, prevPoint);\n      var d1 = vec2.distance(point, nextPoint);\n      var sum = d0 + d1;\n      if (sum !== 0) {\n        d0 /= sum;\n        d1 /= sum;\n      }\n      var v1 = vec2.scale([0, 0], v, -d0);\n      var v2 = vec2.scale([0, 0], v, d1);\n      cp1 = vec2.add([0, 0], point, v1);\n      nextCp0 = vec2.add([0, 0], point, v2);\n      // 下一个控制点必须在这个点和下一个点之间\n      nextCp0 = vec2.min([0, 0], nextCp0, vec2.max([0, 0], nextPoint, point));\n      nextCp0 = vec2.max([0, 0], nextCp0, vec2.min([0, 0], nextPoint, point));\n      // 重新计算 cp1 的值\n      v1 = vec2.sub([0, 0], nextCp0, point);\n      v1 = vec2.scale([0, 0], v1, -d0 / d1);\n      cp1 = vec2.add([0, 0], point, v1);\n      // 上一个控制点必须要在上一个点和这一个点之间\n      cp1 = vec2.min([0, 0], cp1, vec2.max([0, 0], prevPoint, point));\n      cp1 = vec2.max([0, 0], cp1, vec2.min([0, 0], prevPoint, point));\n      // 重新计算 nextCp0 的值\n      v2 = vec2.sub([0, 0], point, cp1);\n      v2 = vec2.scale([0, 0], v2, d1 / d0);\n      nextCp0 = vec2.add([0, 0], point, v2);\n      if (hasConstraint) {\n        cp1 = vec2.max([0, 0], cp1, min);\n        cp1 = vec2.min([0, 0], cp1, max);\n        nextCp0 = vec2.max([0, 0], nextCp0, min);\n        nextCp0 = vec2.min([0, 0], nextCp0, max);\n      }\n      cps.push(cp0);\n      cps.push(cp1);\n      cp0 = nextCp0;\n    }\n  }\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n  return cps;\n};\n/**\n * @ignore\n * 贝塞尔曲线\n */\nexport function catmullRom2bezier(crp, z, constraint) {\n  var isLoop = !!z;\n  var pointList = [];\n  for (var i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  var len = pointList.length;\n  var d1 = [];\n  var cp1;\n  var cp2;\n  var p;\n  for (var i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  return d1;\n}\n/**\n * @ignore\n * 将点连接成路径 path\n */\nexport function getLinePath(points, isInCircle) {\n  return _points2path(points, isInCircle);\n}\n/**\n * @ignore\n * 根据关键点获取限定了范围的平滑线\n */\nexport function getSplinePath(points, isInCircle, constaint) {\n  var data = [];\n  var first = points[0];\n  var prePoint = null;\n  if (points.length <= 2) {\n    // 两点以内直接绘制成路径\n    return getLinePath(points, isInCircle);\n  }\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n    if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n      data.push(point.x);\n      data.push(point.y);\n      prePoint = point;\n    }\n  }\n  var constraint = constaint || [\n  // 范围\n  [0, 0], [1, 1]];\n  var splinePath = catmullRom2bezier(data, isInCircle, constraint);\n  splinePath.unshift(['M', first.x, first.y]);\n  return splinePath;\n}\n/**\n * @ignore\n * 将归一化后的路径数据转换成坐标\n */\nexport function convertNormalPath(coord, path) {\n  var tmp = [];\n  each(path, function (subPath) {\n    var action = subPath[0];\n    switch (action.toLowerCase()) {\n      case 'm':\n      case 'l':\n      case 'c':\n        tmp.push(_convertArr(subPath, coord));\n        break;\n      case 'a':\n        tmp.push(_convertArcPath(subPath, coord));\n        break;\n      case 'z':\n      default:\n        tmp.push(subPath);\n        break;\n    }\n  });\n  return tmp;\n}\n/**\n * @ignore\n * 将路径转换为极坐标下的真实路径\n */\nexport function convertPolarPath(coord, path) {\n  var tmp = [];\n  var pre;\n  var cur;\n  var transposed;\n  var equals;\n  each(path, function (subPath, index) {\n    var action = subPath[0];\n    switch (action.toLowerCase()) {\n      case 'm':\n      case 'c':\n      case 'q':\n        tmp.push(_convertArr(subPath, coord));\n        break;\n      case 'l':\n        pre = path[index - 1];\n        cur = subPath;\n        transposed = coord.isTransposed;\n        // 是否半径相同，转换成圆弧\n        equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];\n        if (equals) {\n          tmp = tmp.concat(_convertPolarPath(pre, cur, coord));\n        } else {\n          // y 不相等，所以直接转换\n          tmp.push(_convertArr(subPath, coord));\n        }\n        break;\n      case 'a':\n        tmp.push(_convertArcPath(subPath, coord));\n        break;\n      case 'z':\n      default:\n        tmp.push(subPath);\n        break;\n    }\n  });\n  _filterFullCirleLine(tmp); // 过滤多余的直线\n  return tmp;\n}","map":{"version":3,"names":["vec2","each","getDistanceToCenter","_points2path","points","isInCircle","path","length","push","x","y","i","length_1","item","_convertArr","arr","coord","tmp","len","point","convert","_convertArcPath","isTransposed","r","direction","_convertPolarPath","pre","cur","startAngle","endAngle","prePoint","toLowerCase","curPoint","rst","xDim","angleRange","Math","abs","flag","PI","convertPoint","middlePoint","middleConvertPoint","_filterFullCirleLine","subPath","index","next","smoothBezier","smooth","isLoop","constraint","cps","hasConstraint","prevPoint","nextPoint","min","max","nextCp0","cp1","cp0","_a","__read","l","v","sub","scale","d0","distance","d1","sum","v1","v2","add","shift","catmullRom2bezier","crp","z","pointList","controlPointList","cp2","p","getLinePath","getSplinePath","constaint","data","first","splinePath","unshift","convertNormalPath","action","convertPolarPath","transposed","equals","concat"],"sources":["../../../../src/geometry/shape/util/path.ts"],"sourcesContent":["import { vec2 } from '@antv/matrix-util';\nimport { each } from '@antv/util';\nimport { Coordinate, PathCommand } from '../../../dependents';\nimport { Point, Position } from '../../../interface';\nimport { getDistanceToCenter } from '../../../util/coordinate';\n\nfunction _points2path(points: Point[], isInCircle: boolean): PathCommand[] {\n  const path = [];\n  if (points.length) {\n    path.push(['M', points[0].x, points[0].y]);\n    for (let i = 1, length = points.length; i < length; i += 1) {\n      const item = points[i];\n      path.push(['L', item.x, item.y]);\n    }\n\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  }\n\n  return path;\n}\n\nfunction _convertArr(arr: number[], coord: Coordinate): any[] {\n  const tmp = [arr[0]];\n  for (let i = 1, len = arr.length; i < len; i = i + 2) {\n    const point = coord.convert({\n      x: arr[i],\n      y: arr[i + 1],\n    });\n    tmp.push(point.x, point.y);\n  }\n  return tmp;\n}\nfunction _convertArcPath(path: PathCommand, coord: Coordinate): any[] {\n  const { isTransposed } = coord;\n  const r = path[1];\n  const x = path[6];\n  const y = path[7];\n  const point = coord.convert({ x, y });\n  const direction = isTransposed ? 0 : 1;\n  return ['A', r, r, 0, 0, direction, point.x, point.y];\n}\n\nfunction _convertPolarPath(pre: PathCommand, cur: PathCommand, coord: Coordinate): PathCommand[] {\n  const { isTransposed, startAngle, endAngle } = coord;\n  const prePoint =\n    pre[0].toLowerCase() === 'a'\n      ? {\n          x: pre[6],\n          y: pre[7],\n        }\n      : {\n          x: pre[1],\n          y: pre[2],\n        };\n  const curPoint = {\n    x: cur[1],\n    y: cur[2],\n  };\n  const rst = [];\n  const xDim = isTransposed ? 'y' : 'x';\n  const angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);\n  const direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向\n  const flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位\n  const convertPoint = coord.convert(curPoint);\n  const r = getDistanceToCenter(coord, convertPoint);\n  if (r >= 0.5) {\n    // 小于1像素的圆在图像上无法识别\n    if (angleRange === Math.PI * 2) {\n      const middlePoint = {\n        x: (curPoint.x + prePoint.x) / 2,\n        y: (curPoint.y + prePoint.y) / 2,\n      };\n      const middleConvertPoint = coord.convert(middlePoint);\n      rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);\n      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n    } else {\n      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n    }\n  }\n  return rst;\n}\n\n// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形\nfunction _filterFullCirleLine(path: PathCommand[]) {\n  each(path, (subPath, index) => {\n    const cur = subPath;\n    if (cur[0].toLowerCase() === 'a') {\n      const pre = path[index - 1];\n      const next = path[index + 1];\n      if (next && next[0].toLowerCase() === 'a') {\n        if (pre && pre[0].toLowerCase() === 'l') {\n          pre[0] = 'M';\n        }\n      } else if (pre && pre[0].toLowerCase() === 'a') {\n        if (next && next[0].toLowerCase() === 'l') {\n          next[0] = 'M';\n        }\n      }\n    }\n  });\n}\n\n/**\n * @ignore\n * 计算光滑的贝塞尔曲线\n */\nexport const smoothBezier = (\n  points: Position[],\n  smooth: number,\n  isLoop: boolean,\n  constraint: Position[]\n): Position[] => {\n  const cps = [];\n  const hasConstraint = !!constraint;\n\n  let prevPoint: Position;\n  let nextPoint: Position;\n  let min: Position;\n  let max: Position;\n  let nextCp0: Position;\n  let cp1: Position;\n  let cp0: Position;\n\n  if (hasConstraint) {\n    [min, max] = constraint;\n    for (let i = 0, l = points.length; i < l; i++) {\n      const point = points[i];\n      min = vec2.min([0, 0], min, point) as [number, number];\n      max = vec2.max([0, 0], max, point) as [number, number];\n    }\n  }\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (i === 0 && !isLoop) {\n      cp0 = point;\n    } else if (i === len - 1 && !isLoop) {\n      cp1 = point;\n      cps.push(cp0);\n      cps.push(cp1);\n    } else {\n      prevPoint = points[isLoop ? (i ? i - 1 : len - 1) : i - 1];\n      nextPoint = points[isLoop ? (i + 1) % len : i + 1];\n\n      let v: [number, number] = [0, 0];\n      v = vec2.sub(v, nextPoint, prevPoint) as [number, number];\n      v = vec2.scale(v, v, smooth) as [number, number];\n\n      let d0 = vec2.distance(point, prevPoint);\n      let d1 = vec2.distance(point, nextPoint);\n\n      const sum = d0 + d1;\n      if (sum !== 0) {\n        d0 /= sum;\n        d1 /= sum;\n      }\n\n      let v1 = vec2.scale([0, 0], v, -d0);\n      let v2 = vec2.scale([0, 0], v, d1);\n\n      cp1 = vec2.add([0, 0], point, v1) as Position;\n      nextCp0 = vec2.add([0, 0], point, v2) as Position;\n\n      // 下一个控制点必须在这个点和下一个点之间\n      nextCp0 = vec2.min([0, 0], nextCp0, vec2.max([0, 0], nextPoint, point)) as Position;\n      nextCp0 = vec2.max([0, 0], nextCp0, vec2.min([0, 0], nextPoint, point)) as Position;\n\n      // 重新计算 cp1 的值\n      v1 = vec2.sub([0, 0], nextCp0, point);\n      v1 = vec2.scale([0, 0], v1, -d0 / d1);\n      cp1 = vec2.add([0, 0], point, v1) as Position;\n\n      // 上一个控制点必须要在上一个点和这一个点之间\n      cp1 = vec2.min([0, 0], cp1, vec2.max([0, 0], prevPoint, point)) as Position;\n      cp1 = vec2.max([0, 0], cp1, vec2.min([0, 0], prevPoint, point)) as Position;\n\n      // 重新计算 nextCp0 的值\n      v2 = vec2.sub([0, 0], point, cp1);\n      v2 = vec2.scale([0, 0], v2, d1 / d0);\n      nextCp0 = vec2.add([0, 0], point, v2) as Position;\n\n      if (hasConstraint) {\n        cp1 = vec2.max([0, 0], cp1, min) as Position;\n        cp1 = vec2.min([0, 0], cp1, max) as Position;\n        nextCp0 = vec2.max([0, 0], nextCp0, min) as Position;\n        nextCp0 = vec2.min([0, 0], nextCp0, max) as Position;\n      }\n\n      cps.push(cp0);\n      cps.push(cp1);\n      cp0 = nextCp0;\n    }\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n\n  return cps;\n};\n\n/**\n * @ignore\n * 贝塞尔曲线\n */\nexport function catmullRom2bezier(crp: number[], z: boolean, constraint: Position[]): PathCommand[] {\n  const isLoop = !!z;\n  const pointList = [];\n  for (let i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n\n  const controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  const len = pointList.length;\n  const d1 = [];\n\n  let cp1: Position;\n  let cp2: Position;\n  let p: Position;\n\n  for (let i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  return d1;\n}\n\n/**\n * @ignore\n * 将点连接成路径 path\n */\nexport function getLinePath(points: Point[], isInCircle?: boolean): PathCommand[] {\n  return _points2path(points, isInCircle);\n}\n\n/**\n * @ignore\n * 根据关键点获取限定了范围的平滑线\n */\nexport function getSplinePath(points: Point[], isInCircle?: boolean, constaint?: Position[]): PathCommand[] {\n  const data = [];\n  const first = points[0];\n  let prePoint = null;\n  if (points.length <= 2) {\n    // 两点以内直接绘制成路径\n    return getLinePath(points, isInCircle);\n  }\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n      data.push(point.x);\n      data.push(point.y);\n      prePoint = point;\n    }\n  }\n  const constraint = constaint || [\n    // 范围\n    [0, 0],\n    [1, 1],\n  ];\n  const splinePath = catmullRom2bezier(data, isInCircle, constraint);\n  splinePath.unshift(['M', first.x, first.y]);\n  return splinePath;\n}\n\n/**\n * @ignore\n * 将归一化后的路径数据转换成坐标\n */\nexport function convertNormalPath(coord, path: PathCommand[]): PathCommand[] {\n  const tmp = [];\n  each(path, (subPath) => {\n    const action = subPath[0];\n    switch (action.toLowerCase()) {\n      case 'm':\n      case 'l':\n      case 'c':\n        tmp.push(_convertArr(subPath, coord));\n        break;\n      case 'a':\n        tmp.push(_convertArcPath(subPath, coord));\n        break;\n      case 'z':\n      default:\n        tmp.push(subPath);\n        break;\n    }\n  });\n  return tmp;\n}\n\n/**\n * @ignore\n * 将路径转换为极坐标下的真实路径\n */\nexport function convertPolarPath(coord, path: PathCommand[]): PathCommand[] {\n  let tmp = [];\n  let pre: PathCommand;\n  let cur: PathCommand;\n  let transposed: boolean;\n  let equals: boolean;\n  each(path, (subPath, index) => {\n    const action = subPath[0];\n\n    switch (action.toLowerCase()) {\n      case 'm':\n      case 'c':\n      case 'q':\n        tmp.push(_convertArr(subPath, coord));\n        break;\n      case 'l':\n        pre = path[index - 1];\n        cur = subPath;\n        transposed = coord.isTransposed;\n        // 是否半径相同，转换成圆弧\n        equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];\n        if (equals) {\n          tmp = tmp.concat(_convertPolarPath(pre, cur, coord));\n        } else {\n          // y 不相等，所以直接转换\n          tmp.push(_convertArr(subPath, coord));\n        }\n        break;\n      case 'a':\n        tmp.push(_convertArcPath(subPath, coord));\n        break;\n      case 'z':\n      default:\n        tmp.push(subPath);\n        break;\n    }\n  });\n  _filterFullCirleLine(tmp); // 过滤多余的直线\n  return tmp;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}