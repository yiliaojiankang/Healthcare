{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends, __values } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nvar Path = /** @class */function (_super) {\n  __extends(Path, _super);\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n      connectNulls = _a === void 0 ? false : _a,\n      _b = cfg.showSinglePoint,\n      showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    // Path 的每个 element 对应一组数据\n    var keyData = new Map();\n    var keyIndex = new Map();\n    var keys = [];\n    var index = 0;\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n    this.elements = new Array(index);\n    var _d = diff(this.lastElementsMap, keys),\n      added = _d.added,\n      updated = _d.updated,\n      removed = _d.removed;\n    try {\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingData = keyData.get(key);\n        var shapeFactory = this.getShapeFactory();\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var i = keyIndex.get(key);\n        var element = new Element({\n          shapeFactory: shapeFactory,\n          container: this.container,\n          offscreenGroup: this.getOffscreenGroup(),\n          elementIndex: i\n        });\n        element.geometry = this;\n        element.animate = this.animateOption;\n        element.draw(shapeCfg, isUpdate); // 绘制 shape\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    try {\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var mappingData = keyData.get(key);\n        var element = this.lastElementsMap[key];\n        var i = keyIndex.get(key);\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var preShapeCfg = element.getModel();\n        if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n          element.animate = this.animateOption;\n          // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n          element.update(shapeCfg); // 更新对应的 element\n        }\n\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    try {\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key];\n        // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n    return {\n      points: points,\n      data: data\n    };\n  };\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    var _a = this.getPointsAndData(mappingData),\n      points = _a.points,\n      data = _a.data;\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n  return Path;\n}(Geometry);\nexport default Path;","map":{"version":3,"names":["FIELD_ORIGIN","Geometry","Element","isModelChange","diff","Path","_super","__extends","cfg","_this","call","type","shapeType","_a","connectNulls","_b","showSinglePoint","prototype","updateElements","mappingDataArray","isUpdate","keyData","Map","keyIndex","keys","index","i","length","mappingData","key","getElementId","push","set","elements","Array","_d","lastElementsMap","added","updated","removed","added_1","__values","added_1_1","next","done","value","get","shapeFactory","getShapeFactory","shapeCfg","getShapeInfo","element","container","offscreenGroup","getOffscreenGroup","elementIndex","geometry","animate","animateOption","draw","elementsMap","updated_1","updated_1_1","preShapeCfg","getModel","isCoordinateChanged","update","removed_1","removed_1_1","destroy","getPointsAndData","points","data","len","obj","x","y","getDrawCfg","isStack","getAdjust"],"sources":["../../src/geometry/path.ts"],"sourcesContent":["import { FIELD_ORIGIN } from '../constant';\nimport { MappingDatum, ShapeInfo } from '../interface';\nimport Geometry, { GeometryCfg } from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n\n/** Path 构造函数参数类型 */\nexport interface PathCfg extends GeometryCfg {\n  /** 是否连接空值 */\n  connectNulls?: boolean;\n  /** 单个孤立数据点是否展示 */\n  showSinglePoint?: boolean;\n}\n\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nexport default class Path extends Geometry {\n  public readonly type: string = 'path';\n  public readonly shapeType: string = 'line';\n  /** 是否连接空值 */\n  public connectNulls: boolean;\n  /** 单个孤立数据点是否展示 */\n  public showSinglePoint: boolean;\n\n  constructor(cfg: PathCfg) {\n    super(cfg);\n\n    const { connectNulls = false, showSinglePoint = true } = cfg;\n    this.connectNulls = connectNulls;\n    this.showSinglePoint = showSinglePoint;\n  }\n\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  protected updateElements(mappingDataArray: MappingDatum[][], isUpdate: boolean = false) {\n    // Path 的每个 element 对应一组数据\n    const keyData = new Map<string, MappingDatum[]>();\n    const keyIndex = new Map<string, number>();\n    const keys: string[] = [];\n\n    let index = 0;\n    for (let i = 0; i < mappingDataArray.length; i++) {\n      const mappingData = mappingDataArray[i];\n      const key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    const { added, updated, removed } = diff(this.lastElementsMap, keys);\n\n    for (const key of added) {\n      const mappingData = keyData.get(key);\n      const shapeFactory = this.getShapeFactory();\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const i = keyIndex.get(key);\n      const element = new Element({\n        shapeFactory,\n        container: this.container,\n        offscreenGroup: this.getOffscreenGroup(),\n        elementIndex: i,\n      });\n      element.geometry = this;\n      element.animate = this.animateOption;\n      element.draw(shapeCfg, isUpdate); // 绘制 shape\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of updated) {\n      const mappingData = keyData.get(key);\n      const element = this.lastElementsMap[key];\n      const i = keyIndex.get(key);\n      const shapeCfg = this.getShapeInfo(mappingData);\n      const preShapeCfg = element.getModel();\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        element.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        element.update(shapeCfg); // 更新对应的 element\n      }\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (const key of removed) {\n      const element = this.lastElementsMap[key];\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  }\n\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  protected getPointsAndData(mappingData: MappingDatum[]) {\n    const points = [];\n    const data = [];\n\n    for (let i = 0, len = mappingData.length; i < len; i++) {\n      const obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y,\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points,\n      data,\n    };\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n    const { points, data } = this.getPointsAndData(mappingData);\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n\n    return shapeCfg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}