{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { newArray } from './util';\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / cols) / cols);\n    }\n  }\n  return variance;\n}\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / rows) / rows);\n    }\n  }\n  return variance;\n}\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - sum1 * sum1 / size) / (size - 1);\n  } else {\n    return (sum2 - sum1 * sum1 / size) / size;\n  }\n}\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}","map":{"version":3,"names":["newArray","sumByRow","matrix","sum","rows","i","j","columns","get","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","push","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","Math","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/layout/node_modules/ml-matrix/src/stat.js"],"sourcesContent":["import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}