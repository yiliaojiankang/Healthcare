{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ShaderLocation } from \"../core/CommonStyleAttribute\";\nimport { isTileGroup } from \"../tile/utils/utils\";\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\nvar RegisterStyleAttributePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function RegisterStyleAttributePlugin() {\n    _classCallCheck(this, RegisterStyleAttributePlugin);\n  }\n  _createClass(RegisterStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tapPromise('RegisterStyleAttributePlugin', function () {\n        // 过滤 tileGroup layer （瓦片图层不需要注册）\n        if (isTileGroup(layer)) {\n          return;\n        }\n        _this.registerBuiltinAttributes(styleAttributeService, layer);\n      });\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes(styleAttributeService, layer) {\n      // MaskLayer 只需要注册 a_Position\n      if (layer.type === 'MaskLayer') {\n        this.registerPositionAttribute(styleAttributeService);\n        return;\n      }\n      // Tip: normal render layer\n      this.registerPositionAttribute(styleAttributeService);\n      // this.registerFilterAttribute(styleAttributeService);//数据层数据过滤\n      this.registerColorAttribute(styleAttributeService);\n      this.registerVertexIdAttribute(styleAttributeService);\n    }\n  }, {\n    key: \"registerPositionAttribute\",\n    value: function registerPositionAttribute(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        name: 'position',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Position',\n          shaderLocation: ShaderLocation.POSITION,\n          buffer: {\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex) {\n            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"registerColorAttribute\",\n    value: function registerColorAttribute(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        name: 'color',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Color',\n          shaderLocation: ShaderLocation.COLOR,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature) {\n            var color = feature.color;\n            return !color || !color.length ? [1, 1, 1, 1] : color;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"registerVertexIdAttribute\",\n    value: function registerVertexIdAttribute(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        // 统一注册每个顶点的唯一编号（目前用于样式的数据映射计算使用）\n        name: 'vertexId',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_vertexId',\n          shaderLocation: ShaderLocation.VERTEX_ID,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx) {\n            return [featureIdx];\n          }\n        }\n      });\n    }\n  }]);\n  return RegisterStyleAttributePlugin;\n}()) || _class);\nexport { RegisterStyleAttributePlugin as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_dec","_class","AttributeType","gl","injectable","ShaderLocation","isTileGroup","RegisterStyleAttributePlugin","key","value","apply","layer","_ref","_this","styleAttributeService","hooks","init","tapPromise","registerBuiltinAttributes","type","registerPositionAttribute","registerColorAttribute","registerVertexIdAttribute","registerStyleAttribute","name","Attribute","descriptor","shaderLocation","POSITION","buffer","data","FLOAT","size","update","feature","featureIdx","vertex","length","COLOR","usage","DYNAMIC_DRAW","color","VERTEX_ID","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/plugins/RegisterStyleAttributePlugin.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { ShaderLocation } from \"../core/CommonStyleAttribute\";\nimport { isTileGroup } from \"../tile/utils/utils\";\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\nvar RegisterStyleAttributePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function RegisterStyleAttributePlugin() {\n    _classCallCheck(this, RegisterStyleAttributePlugin);\n  }\n  _createClass(RegisterStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tapPromise('RegisterStyleAttributePlugin', function () {\n        // 过滤 tileGroup layer （瓦片图层不需要注册）\n        if (isTileGroup(layer)) {\n          return;\n        }\n        _this.registerBuiltinAttributes(styleAttributeService, layer);\n      });\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes(styleAttributeService, layer) {\n      // MaskLayer 只需要注册 a_Position\n      if (layer.type === 'MaskLayer') {\n        this.registerPositionAttribute(styleAttributeService);\n        return;\n      }\n      // Tip: normal render layer\n      this.registerPositionAttribute(styleAttributeService);\n      // this.registerFilterAttribute(styleAttributeService);//数据层数据过滤\n      this.registerColorAttribute(styleAttributeService);\n      this.registerVertexIdAttribute(styleAttributeService);\n    }\n  }, {\n    key: \"registerPositionAttribute\",\n    value: function registerPositionAttribute(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        name: 'position',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Position',\n          shaderLocation: ShaderLocation.POSITION,\n          buffer: {\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex) {\n            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"registerColorAttribute\",\n    value: function registerColorAttribute(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        name: 'color',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Color',\n          shaderLocation: ShaderLocation.COLOR,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature) {\n            var color = feature.color;\n            return !color || !color.length ? [1, 1, 1, 1] : color;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"registerVertexIdAttribute\",\n    value: function registerVertexIdAttribute(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        // 统一注册每个顶点的唯一编号（目前用于样式的数据映射计算使用）\n        name: 'vertexId',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_vertexId',\n          shaderLocation: ShaderLocation.VERTEX_ID,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx) {\n            return [featureIdx];\n          }\n        }\n      });\n    }\n  }]);\n  return RegisterStyleAttributePlugin;\n}()) || _class);\nexport { RegisterStyleAttributePlugin as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}