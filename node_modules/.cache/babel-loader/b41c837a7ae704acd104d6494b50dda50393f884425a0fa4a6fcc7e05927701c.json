{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n// @ts-ignore\nimport { mat2, mat4, vec4 } from 'gl-matrix';\nimport Point from \"../geo/point\";\nimport { clamp, interpolate, wrap } from \"../util\";\nimport EdgeInsets from \"./edge_insets\";\nimport LngLat from \"./lng_lat\";\nimport LngLatBounds from \"./lng_lat_bounds\";\nimport MercatorCoordinate, { mercatorXfromLng, mercatorYfromLat, mercatorZfromAltitude } from \"./mercator\";\nexport var EXTENT = 8192;\nvar Transform = /*#__PURE__*/function () {\n  function Transform(minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies) {\n    _classCallCheck(this, Transform);\n    this.tileSize = 512; // constant\n    this.maxValidLatitude = 85.051129; // constant\n\n    this._renderWorldCopies = renderWorldCopies === undefined ? true : renderWorldCopies;\n    this._minZoom = minZoom || 0;\n    this._maxZoom = maxZoom || 22;\n    this._minPitch = minPitch === undefined || minPitch === null ? 0 : minPitch;\n    this._maxPitch = maxPitch === undefined || maxPitch === null ? 60 : maxPitch;\n    this.setMaxBounds();\n    this.width = 0;\n    this.height = 0;\n    this._center = new LngLat(0, 0);\n    this.zoom = 0;\n    this.angle = 0;\n    this._fov = 0.6435011087932844;\n    this._pitch = 0;\n    this.unmodified = true;\n    this.edgeInsets = new EdgeInsets();\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n  _createClass(Transform, [{\n    key: \"minZoom\",\n    get: function get() {\n      return this._minZoom;\n    },\n    set: function set(zoom) {\n      if (this._minZoom === zoom) {\n        return;\n      }\n      this._minZoom = zoom;\n      this.zoom = Math.max(this.zoom, zoom);\n    }\n  }, {\n    key: \"maxZoom\",\n    get: function get() {\n      return this._maxZoom;\n    },\n    set: function set(zoom) {\n      if (this._maxZoom === zoom) {\n        return;\n      }\n      this._maxZoom = zoom;\n      this.zoom = Math.min(this.zoom, zoom);\n    }\n  }, {\n    key: \"minPitch\",\n    get: function get() {\n      return this._minPitch;\n    },\n    set: function set(pitch) {\n      if (this._minPitch === pitch) {\n        return;\n      }\n      this._minPitch = pitch;\n      this._pitch = Math.max(this._pitch, pitch);\n    }\n  }, {\n    key: \"maxPitch\",\n    get: function get() {\n      return this._maxPitch;\n    },\n    set: function set(pitch) {\n      if (this._maxPitch === pitch) {\n        return;\n      }\n      this._maxPitch = pitch;\n      this._pitch = Math.min(this._pitch, pitch);\n    }\n  }, {\n    key: \"renderWorldCopies\",\n    get: function get() {\n      return this._renderWorldCopies;\n    },\n    set: function set(renderWorldCopies) {\n      if (renderWorldCopies === undefined) {\n        renderWorldCopies = true;\n      } else if (renderWorldCopies === null) {\n        renderWorldCopies = false;\n      }\n      this._renderWorldCopies = renderWorldCopies;\n    }\n  }, {\n    key: \"worldSize\",\n    get: function get() {\n      return this.tileSize * this.scale;\n    }\n  }, {\n    key: \"centerOffset\",\n    get: function get() {\n      return this.centerPoint._sub(this.size._div(2));\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return new Point(this.width, this.height);\n    }\n  }, {\n    key: \"bearing\",\n    get: function get() {\n      return -this.angle / Math.PI * 180;\n    },\n    set: function set(bearing) {\n      var b = -wrap(bearing, -180, 180) * Math.PI / 180;\n      if (this.angle === b) {\n        return;\n      }\n      this.unmodified = false;\n      this.angle = b;\n      this.calcMatrices();\n\n      // 2x2 matrix for rotating points\n      this.rotationMatrix = mat2.create();\n      mat2.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this._pitch / Math.PI * 180;\n    },\n    set: function set(pitch) {\n      var p = clamp(pitch, this._minPitch, this._maxPitch) / 180 * Math.PI;\n      if (this._pitch === p) {\n        return;\n      }\n      this.unmodified = false;\n      this._pitch = p;\n      this.calcMatrices();\n    }\n  }, {\n    key: \"fov\",\n    get: function get() {\n      return this._fov / Math.PI * 180;\n    },\n    set: function set(fov) {\n      fov = Math.max(0.01, Math.min(60, fov));\n      if (this._fov === fov) {\n        return;\n      }\n      this.unmodified = false;\n      this._fov = fov / 180 * Math.PI;\n      this.calcMatrices();\n    }\n  }, {\n    key: \"zoom\",\n    get: function get() {\n      return this._zoom;\n    },\n    set: function set(zoom) {\n      var z = Math.min(Math.max(zoom, this._minZoom), this._maxZoom);\n      if (this._zoom === z) {\n        return;\n      }\n      this.unmodified = false;\n      this._zoom = z;\n      this.scale = this.zoomScale(z);\n      this.tileZoom = Math.floor(z);\n      this.zoomFraction = z - this.tileZoom;\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"center\",\n    get: function get() {\n      return this._center;\n    },\n    set: function set(center) {\n      if (center.lat === this._center.lat && center.lng === this._center.lng) {\n        return;\n      }\n      this.unmodified = false;\n      this._center = center;\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this.edgeInsets.toJSON();\n    },\n    set: function set(padding) {\n      if (this.edgeInsets.equals(padding)) {\n        return;\n      }\n      this.unmodified = false;\n      // Update edge-insets inplace\n      this.edgeInsets.interpolate(this.edgeInsets, padding, 1);\n      this.calcMatrices();\n    }\n\n    /**\n     * The center of the screen in pixels with the top-left corner being (0,0)\n     * and +y axis pointing downwards. This accounts for padding.\n     *\n     * @readonly\n     * @type {Point}\n     * @memberof Transform\n     */\n  }, {\n    key: \"centerPoint\",\n    get: function get() {\n      return this.edgeInsets.getCenter(this.width, this.height);\n    }\n  }, {\n    key: \"point\",\n    get: function get() {\n      return this.project(this.center);\n    }\n\n    // tslint:disable:variable-name\n\n    // tslint:enable\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Transform(this._minZoom, this._maxZoom, this._minPitch, this._maxPitch, this._renderWorldCopies);\n      clone.tileSize = this.tileSize;\n      clone.latRange = this.latRange;\n      clone.width = this.width;\n      clone.height = this.height;\n      clone.center = this._center;\n      clone.zoom = this.zoom;\n      clone.angle = this.angle;\n      clone.fov = this._fov;\n      clone.pitch = this._pitch;\n      clone.unmodified = this.unmodified;\n      clone.edgeInsets = this.edgeInsets.clone();\n      clone.calcMatrices();\n      return clone;\n    }\n\n    /**\n     * Returns if the padding params match\n     *\n     * @param {IPaddingOptions} padding\n     * @returns {boolean}\n     * @memberof Transform\n     */\n  }, {\n    key: \"isPaddingEqual\",\n    value: function isPaddingEqual(padding) {\n      return this.edgeInsets.equals(padding);\n    }\n\n    /**\n     * Helper method to upadte edge-insets inplace\n     *\n     * @param {IPaddingOptions} target\n     * @param {number} t\n     * @memberof Transform\n     */\n  }, {\n    key: \"interpolatePadding\",\n    value: function interpolatePadding(start, target, t) {\n      this.unmodified = false;\n      this.edgeInsets.interpolate(start, target, t);\n      this.constrain();\n      this.calcMatrices();\n    }\n\n    /**\n     * Return a zoom level that will cover all tiles the transform\n     * @param {Object} options options\n     * @param {number} options.tileSize Tile size, expressed in screen pixels.\n     * @param {boolean} options.roundZoom Target zoom level. If true, the value will be rounded to the closest integer. Otherwise the value will be floored.\n     * @returns {number} zoom level An integer zoom level at which all tiles will be visible.\n     */\n  }, {\n    key: \"coveringZoomLevel\",\n    value: function coveringZoomLevel(options) {\n      var z = (options.roundZoom ? Math.round : Math.floor)(this.zoom + this.scaleZoom(this.tileSize / options.tileSize));\n      // At negative zoom levels load tiles from z0 because negative tile zoom levels don't exist.\n      return Math.max(0, z);\n    }\n\n    /**\n     * Return any \"wrapped\" copies of a given tile coordinate that are visible\n     * in the current view.\n     *\n     * @private\n     */\n    // public getVisibleUnwrappedCoordinates(tileID: CanonicalTileID) {\n    //   const result = [new UnwrappedTileID(0, tileID)];\n    //   if (this._renderWorldCopies) {\n    //     const utl = this.pointCoordinate(new Point(0, 0));\n    //     const utr = this.pointCoordinate(new Point(this.width, 0));\n    //     const ubl = this.pointCoordinate(new Point(this.width, this.height));\n    //     const ubr = this.pointCoordinate(new Point(0, this.height));\n    //     const w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));\n    //     const w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));\n\n    //     // Add an extra copy of the world on each side to properly render ImageSources and CanvasSources.\n    //     // Both sources draw outside the tile boundaries of the tile that \"contains them\" so we need\n    //     // to add extra copies on both sides in case offscreen tiles need to draw into on-screen ones.\n    //     const extraWorldCopy = 1;\n\n    //     for (let w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {\n    //       if (w === 0) {\n    //         continue;\n    //       }\n    //       result.push(new UnwrappedTileID(w, tileID));\n    //     }\n    //   }\n    //   return result;\n    // }\n\n    /**\n     * Return all coordinates that could cover this transform for a covering\n     * zoom level.\n     * @param {Object} options\n     * @param {number} options.tileSize\n     * @param {number} options.minzoom\n     * @param {number} options.maxzoom\n     * @param {boolean} options.roundZoom\n     * @param {boolean} options.reparseOverscaled\n     * @param {boolean} options.renderWorldCopies\n     * @returns {Array<OverscaledTileID>} OverscaledTileIDs\n     * @private\n     */\n    // public coveringTiles(options: {\n    //   tileSize: number;\n    //   minzoom?: number;\n    //   maxzoom?: number;\n    //   roundZoom?: boolean;\n    //   reparseOverscaled?: boolean;\n    //   renderWorldCopies?: boolean;\n    // }): OverscaledTileID[] {\n    //   let z = this.coveringZoomLevel(options);\n    //   const actualZ = z;\n\n    //   if (options.minzoom !== undefined && z < options.minzoom) {\n    //     return [];\n    //   }\n    //   if (options.maxzoom !== undefined && z > options.maxzoom) {\n    //     z = options.maxzoom;\n    //   }\n\n    //   const centerCoord = MercatorCoordinate.fromLngLat(this.center);\n    //   const numTiles = Math.pow(2, z);\n    //   const centerPoint = [numTiles * centerCoord.x, numTiles * centerCoord.y, 0];\n    //   const cameraFrustum = Frustum.fromInvProjectionMatrix(\n    //     this.invProjMatrix,\n    //     this.worldSize,\n    //     z,\n    //   );\n\n    //   // No change of LOD behavior for pitch lower than 60 and when there is no top padding: return only tile ids from the requested zoom level\n    //   let minZoom = options.minzoom || 0;\n    //   // Use 0.1 as an epsilon to avoid for explicit == 0.0 floating point checks\n    //   if (this._pitch <= 60.0 && this.edgeInsets.top < 0.1) {\n    //     minZoom = z;\n    //   }\n\n    //   // There should always be a certain number of maximum zoom level tiles surrounding the center location\n    //   const radiusOfMaxLvlLodInTiles = 3;\n\n    //   const newRootTile = (wrap: number): any => {\n    //     return {\n    //       // All tiles are on zero elevation plane => z difference is zero\n    //       aabb: new Aabb(\n    //         [wrap * numTiles, 0, 0],\n    //         [(wrap + 1) * numTiles, numTiles, 0],\n    //       ),\n    //       zoom: 0,\n    //       x: 0,\n    //       y: 0,\n    //       wrap,\n    //       fullyVisible: false,\n    //     };\n    //   };\n\n    //   // Do a depth-first traversal to find visible tiles and proper levels of detail\n    //   const stack = [];\n    //   const result = [];\n    //   const maxZoom = z;\n    //   const overscaledZ = options.reparseOverscaled ? actualZ : z;\n\n    //   if (this._renderWorldCopies) {\n    //     // Render copy of the globe thrice on both sides\n    //     for (let i = 1; i <= 3; i++) {\n    //       stack.push(newRootTile(-i));\n    //       stack.push(newRootTile(i));\n    //     }\n    //   }\n\n    //   stack.push(newRootTile(0));\n\n    //   while (stack.length > 0) {\n    //     const it = stack.pop();\n    //     const x = it.x;\n    //     const y = it.y;\n    //     let fullyVisible = it.fullyVisible;\n\n    //     // Visibility of a tile is not required if any of its ancestor if fully inside the frustum\n    //     if (!fullyVisible) {\n    //       const intersectResult = it.aabb.intersects(cameraFrustum);\n\n    //       if (intersectResult === 0) {\n    //         continue;\n    //       }\n\n    //       fullyVisible = intersectResult === 2;\n    //     }\n\n    //     const distanceX = it.aabb.distanceX(centerPoint);\n    //     const distanceY = it.aabb.distanceY(centerPoint);\n    //     const longestDim = Math.max(Math.abs(distanceX), Math.abs(distanceY));\n\n    //     // We're using distance based heuristics to determine if a tile should be split into quadrants or not.\n    //     // radiusOfMaxLvlLodInTiles defines that there's always a certain number of maxLevel tiles next to the map center.\n    //     // Using the fact that a parent node in quadtree is twice the size of its children (per dimension)\n    //     // we can define distance thresholds for each relative level:\n    //     // f(k) = offset + 2 + 4 + 8 + 16 + ... + 2^k. This is the same as \"offset+2^(k+1)-2\"\n    //     const distToSplit =\n    //       radiusOfMaxLvlLodInTiles + (1 << (maxZoom - it.zoom)) - 2;\n\n    //     // Have we reached the target depth or is the tile too far away to be any split further?\n    //     if (\n    //       it.zoom === maxZoom ||\n    //       (longestDim > distToSplit && it.zoom >= minZoom)\n    //     ) {\n    //       result.push({\n    //         tileID: new OverscaledTileID(\n    //           it.zoom === maxZoom ? overscaledZ : it.zoom,\n    //           it.wrap,\n    //           it.zoom,\n    //           x,\n    //           y,\n    //         ),\n    //         distanceSq: vec2.sqrLen([\n    //           centerPoint[0] - 0.5 - x,\n    //           centerPoint[1] - 0.5 - y,\n    //         ]),\n    //       });\n    //       continue;\n    //     }\n\n    //     for (let i = 0; i < 4; i++) {\n    //       const childX = (x << 1) + (i % 2);\n    //       const childY = (y << 1) + (i >> 1);\n\n    //       stack.push({\n    //         aabb: it.aabb.quadrant(i),\n    //         zoom: it.zoom + 1,\n    //         x: childX,\n    //         y: childY,\n    //         wrap: it.wrap,\n    //         fullyVisible,\n    //       });\n    //     }\n    //   }\n\n    //   return result\n    //     .sort((a, b) => a.distanceSq - b.distanceSq)\n    //     .map((a) => a.tileID);\n    // }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.pixelsToGLUnits = [2 / width, -2 / height];\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"zoomScale\",\n    value: function zoomScale(zoom) {\n      return Math.pow(2, zoom);\n    }\n  }, {\n    key: \"scaleZoom\",\n    value: function scaleZoom(scale) {\n      return Math.log(scale) / Math.LN2;\n    }\n  }, {\n    key: \"project\",\n    value: function project(lnglat) {\n      var lat = clamp(lnglat.lat, -this.maxValidLatitude, this.maxValidLatitude);\n      return new Point(mercatorXfromLng(lnglat.lng) * this.worldSize, mercatorYfromLat(lat) * this.worldSize);\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(point) {\n      return new MercatorCoordinate(point.x / this.worldSize, point.y / this.worldSize).toLngLat();\n    }\n  }, {\n    key: \"setLocationAtPoint\",\n    value: function setLocationAtPoint(lnglat, point) {\n      var a = this.pointCoordinate(point);\n      var b = this.pointCoordinate(this.centerPoint);\n      var loc = this.locationCoordinate(lnglat);\n      var newCenter = new MercatorCoordinate(loc.x - (a.x - b.x), loc.y - (a.y - b.y));\n      this.center = this.coordinateLocation(newCenter);\n      if (this._renderWorldCopies) {\n        this.center = this.center.wrap();\n      }\n    }\n  }, {\n    key: \"pointCoordinate\",\n    value: function pointCoordinate(p) {\n      var targetZ = 0;\n      // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that\n      // line with z=0\n\n      var coord0 = new Float64Array([p.x, p.y, 0, 1]);\n      var coord1 = new Float64Array([p.x, p.y, 1, 1]);\n\n      // @ts-ignore\n      vec4.transformMat4(coord0, coord0, this.pixelMatrixInverse);\n      // @ts-ignore\n      vec4.transformMat4(coord1, coord1, this.pixelMatrixInverse);\n      var w0 = coord0[3];\n      var w1 = coord1[3];\n      var x0 = coord0[0] / w0;\n      var x1 = coord1[0] / w1;\n      var y0 = coord0[1] / w0;\n      var y1 = coord1[1] / w1;\n      var z0 = coord0[2] / w0;\n      var z1 = coord1[2] / w1;\n      var t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);\n      return new MercatorCoordinate(interpolate(x0, x1, t) / this.worldSize, interpolate(y0, y1, t) / this.worldSize);\n    }\n\n    /**\n     * Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not\n     * an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.\n     * @returns {LngLatBounds} Returns a {@link LngLatBounds} object describing the map's geographical bounds.\n     */\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return new LngLatBounds().extend(this.pointLocation(new Point(0, 0))).extend(this.pointLocation(new Point(this.width, 0))).extend(this.pointLocation(new Point(this.width, this.height))).extend(this.pointLocation(new Point(0, this.height)));\n    }\n\n    /**\n     * Returns the maximum geographical bounds the map is constrained to, or `null` if none set.\n     * @returns {LngLatBounds} {@link LngLatBounds}\n     */\n  }, {\n    key: \"getMaxBounds\",\n    value: function getMaxBounds() {\n      if (!this.latRange || this.latRange.length !== 2 || !this.lngRange || this.lngRange.length !== 2) {\n        return null;\n      }\n      return new LngLatBounds([this.lngRange[0], this.latRange[0]], [this.lngRange[1], this.latRange[1]]);\n    }\n\n    /**\n     * Sets or clears the map's geographical constraints.\n     * @param {LngLatBounds} bounds A {@link LngLatBounds} object describing the new geographic boundaries of the map.\n     */\n  }, {\n    key: \"setMaxBounds\",\n    value: function setMaxBounds(bounds) {\n      if (bounds) {\n        this.lngRange = [bounds.getWest(), bounds.getEast()];\n        this.latRange = [bounds.getSouth(), bounds.getNorth()];\n        this.constrain();\n      } else {\n        this.lngRange = undefined;\n        this.latRange = [-this.maxValidLatitude, this.maxValidLatitude];\n      }\n    }\n  }, {\n    key: \"customLayerMatrix\",\n    value: function customLayerMatrix() {\n      return this.mercatorMatrix.slice();\n    }\n  }, {\n    key: \"maxPitchScaleFactor\",\n    value: function maxPitchScaleFactor() {\n      // calcMatrices hasn't run yet\n      if (!this.pixelMatrixInverse) {\n        return 1;\n      }\n      var coord = this.pointCoordinate(new Point(0, 0));\n      var p = new Float32Array([coord.x * this.worldSize, coord.y * this.worldSize, 0, 1]);\n      var topPoint = vec4.transformMat4(p, p, this.pixelMatrix);\n      return topPoint[3] / this.cameraToCenterDistance;\n    }\n\n    /*\n     * The camera looks at the map from a 3D (lng, lat, altitude) location. Let's use `cameraLocation`\n     * as the name for the location under the camera and on the surface of the earth (lng, lat, 0).\n     * `cameraPoint` is the projected position of the `cameraLocation`.\n     *\n     * This point is useful to us because only fill-extrusions that are between `cameraPoint` and\n     * the query point on the surface of the earth can extend and intersect the query.\n     *\n     * When the map is not pitched the `cameraPoint` is equivalent to the center of the map because\n     * the camera is right above the center of the map.\n     */\n  }, {\n    key: \"getCameraPoint\",\n    value: function getCameraPoint() {\n      var pitch = this._pitch;\n      var yOffset = Math.tan(pitch) * (this.cameraToCenterDistance || 1);\n      return this.centerPoint.add(new Point(0, yOffset));\n    }\n\n    /*\n     * When the map is pitched, some of the 3D features that intersect a query will not intersect\n     * the query at the surface of the earth. Instead the feature may be closer and only intersect\n     * the query because it extrudes into the air.\n     *\n     * This returns a geometry that includes all of the original query as well as all possible ares of the\n     * screen where the *base* of a visible extrusion could be.\n     *  - For point queries, the line from the query point to the \"camera point\"\n     *  - For other geometries, the envelope of the query geometry and the \"camera point\"\n     */\n  }, {\n    key: \"getCameraQueryGeometry\",\n    value: function getCameraQueryGeometry(queryGeometry) {\n      var c = this.getCameraPoint();\n      if (queryGeometry.length === 1) {\n        return [queryGeometry[0], c];\n      } else {\n        var minX = c.x;\n        var minY = c.y;\n        var maxX = c.x;\n        var maxY = c.y;\n        var _iterator = _createForOfIteratorHelper(queryGeometry),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var p = _step.value;\n            minX = Math.min(minX, p.x);\n            minY = Math.min(minY, p.y);\n            maxX = Math.max(maxX, p.x);\n            maxY = Math.max(maxY, p.y);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return [new Point(minX, minY), new Point(maxX, minY), new Point(maxX, maxY), new Point(minX, maxY), new Point(minX, minY)];\n      }\n    }\n\n    /**\n     * Given a coordinate, return the screen point that corresponds to it\n     * @param {Coordinate} coord\n     * @returns {Point} screen point\n     * @private\n     */\n  }, {\n    key: \"coordinatePoint\",\n    value: function coordinatePoint(coord) {\n      var p = vec4.fromValues(coord.x * this.worldSize, coord.y * this.worldSize, 0, 1);\n      vec4.transformMat4(p, p, this.pixelMatrix);\n      return new Point(p[0] / p[3], p[1] / p[3]);\n    }\n    /**\n     * Given a location, return the screen point that corresponds to it\n     * @param {LngLat} lnglat location\n     * @returns {Point} screen point\n     * @private\n     */\n  }, {\n    key: \"locationPoint\",\n    value: function locationPoint(lnglat) {\n      return this.coordinatePoint(this.locationCoordinate(lnglat));\n    }\n\n    /**\n     * Given a point on screen, return its lnglat\n     * @param {Point} p screen point\n     * @returns {LngLat} lnglat location\n     * @private\n     */\n  }, {\n    key: \"pointLocation\",\n    value: function pointLocation(p) {\n      // if(p.x !== 0 && p.x !== 1001) {\n      //   console.log(p.x)\n      // }\n\n      return this.coordinateLocation(this.pointCoordinate(p));\n    }\n\n    /**\n     * Given a geographical lnglat, return an unrounded\n     * coordinate that represents it at this transform's zoom level.\n     * @param {LngLat} lnglat\n     * @returns {Coordinate}\n     * @private\n     */\n  }, {\n    key: \"locationCoordinate\",\n    value: function locationCoordinate(lnglat) {\n      return MercatorCoordinate.fromLngLat(lnglat);\n    }\n\n    /**\n     * Given a Coordinate, return its geographical position.\n     * @param {Coordinate} coord\n     * @returns {LngLat} lnglat\n     * @private\n     */\n  }, {\n    key: \"coordinateLocation\",\n    value: function coordinateLocation(coord) {\n      return coord.toLngLat();\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projMatrix;\n    }\n    /**\n     * Calculate the posMatrix that, given a tile coordinate, would be used to display the tile on a map.\n     * @param {UnwrappedTileID} unwrappedTileID;\n     * @private\n     */\n    // private calculatePosMatrix(\n    //   unwrappedTileID: UnwrappedTileID,\n    //   aligned: boolean = false,\n    // ): Float32Array {\n    //   const posMatrixKey = unwrappedTileID.key;\n    //   const cache = aligned ? this.alignedPosMatrixCache : this.posMatrixCache;\n    //   if (cache[posMatrixKey]) {\n    //     return cache[posMatrixKey];\n    //   }\n\n    //   const canonical = unwrappedTileID.canonical;\n    //   const scale = this.worldSize / this.zoomScale(canonical.z);\n    //   const unwrappedX =\n    //     canonical.x + Math.pow(2, canonical.z) * unwrappedTileID.wrap;\n\n    //   const posMatrix = mat4.identity(new Float64Array(16));\n    //   mat4.translate(posMatrix, posMatrix, [\n    //     unwrappedX * scale,\n    //     canonical.y * scale,\n    //     0,\n    //   ]);\n    //   mat4.scale(posMatrix, posMatrix, [scale / EXTENT, scale / EXTENT, 1]);\n    //   mat4.multiply(\n    //     posMatrix,\n    //     aligned ? this.alignedProjMatrix : this.projMatrix,\n    //     posMatrix,\n    //   );\n\n    //   cache[posMatrixKey] = new Float32Array(posMatrix);\n    //   return cache[posMatrixKey];\n    // }\n  }, {\n    key: \"constrain\",\n    value: function constrain() {\n      if (!this.center || !this.width || !this.height || this.constraining) {\n        return;\n      }\n      this.constraining = true;\n      var minY = -90;\n      var maxY = 90;\n      var minX = -180;\n      var maxX = 180;\n      var sy;\n      var sx;\n      var x2;\n      var y2;\n      var size = this.size;\n      var unmodified = this.unmodified;\n      if (this.latRange) {\n        var latRange = this.latRange;\n        minY = mercatorYfromLat(latRange[1]) * this.worldSize;\n        maxY = mercatorYfromLat(latRange[0]) * this.worldSize;\n        sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;\n      }\n      if (this.lngRange) {\n        var lngRange = this.lngRange;\n        minX = mercatorXfromLng(lngRange[0]) * this.worldSize;\n        maxX = mercatorXfromLng(lngRange[1]) * this.worldSize;\n        sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;\n      }\n      var point = this.point;\n\n      // how much the map should scale to fit the screen into given latitude/longitude ranges\n      var s = Math.max(sx || 0, sy || 0);\n      if (s) {\n        this.center = this.unproject(new Point(sx ? (maxX + minX) / 2 : point.x, sy ? (maxY + minY) / 2 : point.y));\n        this.zoom += this.scaleZoom(s);\n        this.unmodified = unmodified;\n        this.constraining = false;\n        return;\n      }\n      if (this.latRange) {\n        var y = point.y;\n        var h2 = size.y / 2;\n        if (y - h2 < minY) {\n          y2 = minY + h2;\n        }\n        if (y + h2 > maxY) {\n          y2 = maxY - h2;\n        }\n      }\n      if (this.lngRange) {\n        var x = point.x;\n        var w2 = size.x / 2;\n        if (x - w2 < minX) {\n          x2 = minX + w2;\n        }\n        if (x + w2 > maxX) {\n          x2 = maxX - w2;\n        }\n      }\n\n      // pan the map if the screen goes off the range\n      if (x2 !== undefined || y2 !== undefined) {\n        this.center = this.unproject(new Point(x2 !== undefined ? x2 : point.x, y2 !== undefined ? y2 : point.y));\n      }\n      this.unmodified = unmodified;\n      this.constraining = false;\n    }\n  }, {\n    key: \"calcMatrices\",\n    value: function calcMatrices() {\n      if (!this.height) {\n        return;\n      }\n      var halfFov = this._fov / 2;\n      var offset = this.centerOffset;\n      this.cameraToCenterDistance = 0.5 / Math.tan(halfFov) * this.height;\n\n      // Find the distance from the center point [width/2 + offset.x, height/2 + offset.y] to the\n      // center top point [width/2 + offset.x, 0] in Z units, using the law of sines.\n      // 1 Z unit is equivalent to 1 horizontal px at the center of the map\n      // (the distance between[width/2, height/2] and [width/2 + 1, height/2])\n      var groundAngle = Math.PI / 2 + this._pitch;\n      var fovAboveCenter = this._fov * (0.5 + offset.y / this.height);\n      var topHalfSurfaceDistance = Math.sin(fovAboveCenter) * this.cameraToCenterDistance / Math.sin(clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01));\n      var point = this.point;\n      var x = point.x;\n      var y = point.y;\n\n      // Calculate z distance of the farthest fragment that should be rendered.\n      var furthestDistance = Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance + this.cameraToCenterDistance;\n      // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n      var farZ = furthestDistance * 1.01;\n\n      // The larger the value of nearZ is\n      // - the more depth precision is available for features (good)\n      // - clipping starts appearing sooner when the camera is close to 3d features (bad)\n      //\n      // Smaller values worked well for mapbox-gl-js but deckgl was encountering precision issues\n      // when rendering it's layers using custom layers. This value was experimentally chosen and\n      // seems to solve z-fighting issues in deckgl while not clipping buildings too close to the camera.\n      var nearZ = this.height / 50;\n\n      // matrix for conversion from location to GL coordinates (-1 .. 1)\n      // 使用 Float64Array 的原因是为了避免计算精度问题、 mat4.create() 默认使用 Float32Array\n      var m = new Float64Array(16);\n      // @ts-ignore\n      mat4.perspective(m, this._fov, this.width / this.height, nearZ, farZ);\n\n      // Apply center of perspective offset\n      m[8] = -offset.x * 2 / this.width;\n      m[9] = offset.y * 2 / this.height;\n\n      // @ts-ignore\n      mat4.scale(m, m, [1, -1, 1]);\n      // @ts-ignore\n      mat4.translate(m, m, [0, 0, -this.cameraToCenterDistance]);\n      // @ts-ignore\n      mat4.rotateX(m, m, this._pitch);\n      // @ts-ignore\n      mat4.rotateZ(m, m, this.angle);\n      // @ts-ignore\n      mat4.translate(m, m, [-x, -y, 0]);\n\n      // The mercatorMatrix can be used to transform points from mercator coordinates\n      // ([0, 0] nw, [1, 1] se) to GL coordinates.\n      // @ts-ignore\n      this.mercatorMatrix = mat4.scale([], m, [this.worldSize, this.worldSize, this.worldSize]);\n      // scale vertically to meters per pixel (inverse of ground resolution):\n\n      // @ts-ignore\n      mat4.scale(m, m, [1, 1, mercatorZfromAltitude(1, this.center.lat) * this.worldSize, 1]);\n      // @ts-ignore\n      this.projMatrix = m;\n      // @ts-ignore\n      this.invProjMatrix = mat4.invert([], this.projMatrix);\n\n      // Make a second projection matrix that is aligned to a pixel grid for rendering raster tiles.\n      // We're rounding the (floating point) x/y values to achieve to avoid rendering raster images to fractional\n      // coordinates. Additionally, we adjust by half a pixel in either direction in case that viewport dimension\n      // is an odd integer to preserve rendering to the pixel grid. We're rotating this shift based on the angle\n      // of the transformation so that 0°, 90°, 180°, and 270° rasters are crisp, and adjust the shift so that\n      // it is always <= 0.5 pixels.\n      var xShift = this.width % 2 / 2;\n      var yShift = this.height % 2 / 2;\n      var angleCos = Math.cos(this.angle);\n      var angleSin = Math.sin(this.angle);\n      var dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift;\n      var dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;\n      // const alignedM = mat4.clone(m);\n      var alignedM = new Float64Array(m);\n      // @ts-ignore\n      mat4.translate(alignedM, alignedM, [dx > 0.5 ? dx - 1 : dx, dy > 0.5 ? dy - 1 : dy, 0]);\n      // @ts-ignore\n      this.alignedProjMatrix = alignedM;\n\n      // @ts-ignore\n      m = mat4.create();\n      // @ts-ignore\n      mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n      // @ts-ignore\n      mat4.translate(m, m, [1, -1, 0]);\n      // @ts-ignore\n      this.labelPlaneMatrix = m;\n\n      // @ts-ignore\n      m = mat4.create();\n      // @ts-ignore\n      mat4.scale(m, m, [1, -1, 1]);\n      // @ts-ignore\n      mat4.translate(m, m, [-1, -1, 0]);\n      // @ts-ignore\n      mat4.scale(m, m, [2 / this.width, 2 / this.height, 1]);\n      // @ts-ignore\n      this.glCoordMatrix = m;\n\n      // matrix for conversion from location to screen coordinates\n      this.pixelMatrix = mat4.multiply(\n      // @ts-ignore\n      new Float64Array(16), this.labelPlaneMatrix, this.projMatrix);\n\n      // inverse matrix for conversion from screen coordinaes to location\n      // @ts-ignore\n      m = mat4.invert(new Float64Array(16), this.pixelMatrix);\n      if (!m) {\n        throw new Error('failed to invert matrix');\n      }\n      // @ts-ignore\n      this.pixelMatrixInverse = m;\n      this.posMatrixCache = {};\n      this.alignedPosMatrixCache = {};\n    }\n  }]);\n  return Transform;\n}();\nexport { Transform as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","mat2","mat4","vec4","Point","clamp","interpolate","wrap","EdgeInsets","LngLat","LngLatBounds","MercatorCoordinate","mercatorXfromLng","mercatorYfromLat","mercatorZfromAltitude","EXTENT","Transform","minZoom","maxZoom","minPitch","maxPitch","renderWorldCopies","tileSize","maxValidLatitude","_renderWorldCopies","undefined","_minZoom","_maxZoom","_minPitch","_maxPitch","setMaxBounds","width","height","_center","zoom","angle","_fov","_pitch","unmodified","edgeInsets","posMatrixCache","alignedPosMatrixCache","key","get","set","Math","max","min","pitch","scale","centerPoint","_sub","size","_div","PI","bearing","b","calcMatrices","rotationMatrix","create","rotate","p","fov","_zoom","z","zoomScale","tileZoom","floor","zoomFraction","constrain","center","lat","lng","toJSON","padding","equals","getCenter","project","clone","latRange","isPaddingEqual","interpolatePadding","start","target","t","coveringZoomLevel","options","roundZoom","round","scaleZoom","resize","pixelsToGLUnits","pow","log","LN2","lnglat","worldSize","unproject","point","x","y","toLngLat","setLocationAtPoint","a","pointCoordinate","loc","locationCoordinate","newCenter","coordinateLocation","targetZ","coord0","Float64Array","coord1","transformMat4","pixelMatrixInverse","w0","w1","x0","x1","y0","y1","z0","z1","getBounds","extend","pointLocation","getMaxBounds","lngRange","bounds","getWest","getEast","getSouth","getNorth","customLayerMatrix","mercatorMatrix","maxPitchScaleFactor","coord","Float32Array","topPoint","pixelMatrix","cameraToCenterDistance","getCameraPoint","yOffset","tan","add","getCameraQueryGeometry","queryGeometry","c","minX","minY","maxX","maxY","_iterator","_step","coordinatePoint","fromValues","locationPoint","fromLngLat","getProjectionMatrix","projMatrix","constraining","sy","sx","x2","y2","h2","w2","halfFov","offset","centerOffset","groundAngle","fovAboveCenter","topHalfSurfaceDistance","sin","furthestDistance","cos","farZ","nearZ","m","perspective","translate","rotateX","rotateZ","invProjMatrix","invert","xShift","yShift","angleCos","angleSin","dx","dy","alignedM","alignedProjMatrix","labelPlaneMatrix","glCoordMatrix","multiply","Error","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-map/es/geo/transform.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// @ts-ignore\nimport { mat2, mat4, vec4 } from 'gl-matrix';\nimport Point from \"../geo/point\";\nimport { clamp, interpolate, wrap } from \"../util\";\nimport EdgeInsets from \"./edge_insets\";\nimport LngLat from \"./lng_lat\";\nimport LngLatBounds from \"./lng_lat_bounds\";\nimport MercatorCoordinate, { mercatorXfromLng, mercatorYfromLat, mercatorZfromAltitude } from \"./mercator\";\nexport var EXTENT = 8192;\nvar Transform = /*#__PURE__*/function () {\n  function Transform(minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies) {\n    _classCallCheck(this, Transform);\n    this.tileSize = 512; // constant\n    this.maxValidLatitude = 85.051129; // constant\n\n    this._renderWorldCopies = renderWorldCopies === undefined ? true : renderWorldCopies;\n    this._minZoom = minZoom || 0;\n    this._maxZoom = maxZoom || 22;\n    this._minPitch = minPitch === undefined || minPitch === null ? 0 : minPitch;\n    this._maxPitch = maxPitch === undefined || maxPitch === null ? 60 : maxPitch;\n    this.setMaxBounds();\n    this.width = 0;\n    this.height = 0;\n    this._center = new LngLat(0, 0);\n    this.zoom = 0;\n    this.angle = 0;\n    this._fov = 0.6435011087932844;\n    this._pitch = 0;\n    this.unmodified = true;\n    this.edgeInsets = new EdgeInsets();\n    this.posMatrixCache = {};\n    this.alignedPosMatrixCache = {};\n  }\n  _createClass(Transform, [{\n    key: \"minZoom\",\n    get: function get() {\n      return this._minZoom;\n    },\n    set: function set(zoom) {\n      if (this._minZoom === zoom) {\n        return;\n      }\n      this._minZoom = zoom;\n      this.zoom = Math.max(this.zoom, zoom);\n    }\n  }, {\n    key: \"maxZoom\",\n    get: function get() {\n      return this._maxZoom;\n    },\n    set: function set(zoom) {\n      if (this._maxZoom === zoom) {\n        return;\n      }\n      this._maxZoom = zoom;\n      this.zoom = Math.min(this.zoom, zoom);\n    }\n  }, {\n    key: \"minPitch\",\n    get: function get() {\n      return this._minPitch;\n    },\n    set: function set(pitch) {\n      if (this._minPitch === pitch) {\n        return;\n      }\n      this._minPitch = pitch;\n      this._pitch = Math.max(this._pitch, pitch);\n    }\n  }, {\n    key: \"maxPitch\",\n    get: function get() {\n      return this._maxPitch;\n    },\n    set: function set(pitch) {\n      if (this._maxPitch === pitch) {\n        return;\n      }\n      this._maxPitch = pitch;\n      this._pitch = Math.min(this._pitch, pitch);\n    }\n  }, {\n    key: \"renderWorldCopies\",\n    get: function get() {\n      return this._renderWorldCopies;\n    },\n    set: function set(renderWorldCopies) {\n      if (renderWorldCopies === undefined) {\n        renderWorldCopies = true;\n      } else if (renderWorldCopies === null) {\n        renderWorldCopies = false;\n      }\n      this._renderWorldCopies = renderWorldCopies;\n    }\n  }, {\n    key: \"worldSize\",\n    get: function get() {\n      return this.tileSize * this.scale;\n    }\n  }, {\n    key: \"centerOffset\",\n    get: function get() {\n      return this.centerPoint._sub(this.size._div(2));\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return new Point(this.width, this.height);\n    }\n  }, {\n    key: \"bearing\",\n    get: function get() {\n      return -this.angle / Math.PI * 180;\n    },\n    set: function set(bearing) {\n      var b = -wrap(bearing, -180, 180) * Math.PI / 180;\n      if (this.angle === b) {\n        return;\n      }\n      this.unmodified = false;\n      this.angle = b;\n      this.calcMatrices();\n\n      // 2x2 matrix for rotating points\n      this.rotationMatrix = mat2.create();\n      mat2.rotate(this.rotationMatrix, this.rotationMatrix, this.angle);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this._pitch / Math.PI * 180;\n    },\n    set: function set(pitch) {\n      var p = clamp(pitch, this._minPitch, this._maxPitch) / 180 * Math.PI;\n      if (this._pitch === p) {\n        return;\n      }\n      this.unmodified = false;\n      this._pitch = p;\n      this.calcMatrices();\n    }\n  }, {\n    key: \"fov\",\n    get: function get() {\n      return this._fov / Math.PI * 180;\n    },\n    set: function set(fov) {\n      fov = Math.max(0.01, Math.min(60, fov));\n      if (this._fov === fov) {\n        return;\n      }\n      this.unmodified = false;\n      this._fov = fov / 180 * Math.PI;\n      this.calcMatrices();\n    }\n  }, {\n    key: \"zoom\",\n    get: function get() {\n      return this._zoom;\n    },\n    set: function set(zoom) {\n      var z = Math.min(Math.max(zoom, this._minZoom), this._maxZoom);\n      if (this._zoom === z) {\n        return;\n      }\n      this.unmodified = false;\n      this._zoom = z;\n      this.scale = this.zoomScale(z);\n      this.tileZoom = Math.floor(z);\n      this.zoomFraction = z - this.tileZoom;\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"center\",\n    get: function get() {\n      return this._center;\n    },\n    set: function set(center) {\n      if (center.lat === this._center.lat && center.lng === this._center.lng) {\n        return;\n      }\n      this.unmodified = false;\n      this._center = center;\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this.edgeInsets.toJSON();\n    },\n    set: function set(padding) {\n      if (this.edgeInsets.equals(padding)) {\n        return;\n      }\n      this.unmodified = false;\n      // Update edge-insets inplace\n      this.edgeInsets.interpolate(this.edgeInsets, padding, 1);\n      this.calcMatrices();\n    }\n\n    /**\n     * The center of the screen in pixels with the top-left corner being (0,0)\n     * and +y axis pointing downwards. This accounts for padding.\n     *\n     * @readonly\n     * @type {Point}\n     * @memberof Transform\n     */\n  }, {\n    key: \"centerPoint\",\n    get: function get() {\n      return this.edgeInsets.getCenter(this.width, this.height);\n    }\n  }, {\n    key: \"point\",\n    get: function get() {\n      return this.project(this.center);\n    }\n\n    // tslint:disable:variable-name\n\n    // tslint:enable\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Transform(this._minZoom, this._maxZoom, this._minPitch, this._maxPitch, this._renderWorldCopies);\n      clone.tileSize = this.tileSize;\n      clone.latRange = this.latRange;\n      clone.width = this.width;\n      clone.height = this.height;\n      clone.center = this._center;\n      clone.zoom = this.zoom;\n      clone.angle = this.angle;\n      clone.fov = this._fov;\n      clone.pitch = this._pitch;\n      clone.unmodified = this.unmodified;\n      clone.edgeInsets = this.edgeInsets.clone();\n      clone.calcMatrices();\n      return clone;\n    }\n\n    /**\n     * Returns if the padding params match\n     *\n     * @param {IPaddingOptions} padding\n     * @returns {boolean}\n     * @memberof Transform\n     */\n  }, {\n    key: \"isPaddingEqual\",\n    value: function isPaddingEqual(padding) {\n      return this.edgeInsets.equals(padding);\n    }\n\n    /**\n     * Helper method to upadte edge-insets inplace\n     *\n     * @param {IPaddingOptions} target\n     * @param {number} t\n     * @memberof Transform\n     */\n  }, {\n    key: \"interpolatePadding\",\n    value: function interpolatePadding(start, target, t) {\n      this.unmodified = false;\n      this.edgeInsets.interpolate(start, target, t);\n      this.constrain();\n      this.calcMatrices();\n    }\n\n    /**\n     * Return a zoom level that will cover all tiles the transform\n     * @param {Object} options options\n     * @param {number} options.tileSize Tile size, expressed in screen pixels.\n     * @param {boolean} options.roundZoom Target zoom level. If true, the value will be rounded to the closest integer. Otherwise the value will be floored.\n     * @returns {number} zoom level An integer zoom level at which all tiles will be visible.\n     */\n  }, {\n    key: \"coveringZoomLevel\",\n    value: function coveringZoomLevel(options) {\n      var z = (options.roundZoom ? Math.round : Math.floor)(this.zoom + this.scaleZoom(this.tileSize / options.tileSize));\n      // At negative zoom levels load tiles from z0 because negative tile zoom levels don't exist.\n      return Math.max(0, z);\n    }\n\n    /**\n     * Return any \"wrapped\" copies of a given tile coordinate that are visible\n     * in the current view.\n     *\n     * @private\n     */\n    // public getVisibleUnwrappedCoordinates(tileID: CanonicalTileID) {\n    //   const result = [new UnwrappedTileID(0, tileID)];\n    //   if (this._renderWorldCopies) {\n    //     const utl = this.pointCoordinate(new Point(0, 0));\n    //     const utr = this.pointCoordinate(new Point(this.width, 0));\n    //     const ubl = this.pointCoordinate(new Point(this.width, this.height));\n    //     const ubr = this.pointCoordinate(new Point(0, this.height));\n    //     const w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));\n    //     const w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));\n\n    //     // Add an extra copy of the world on each side to properly render ImageSources and CanvasSources.\n    //     // Both sources draw outside the tile boundaries of the tile that \"contains them\" so we need\n    //     // to add extra copies on both sides in case offscreen tiles need to draw into on-screen ones.\n    //     const extraWorldCopy = 1;\n\n    //     for (let w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {\n    //       if (w === 0) {\n    //         continue;\n    //       }\n    //       result.push(new UnwrappedTileID(w, tileID));\n    //     }\n    //   }\n    //   return result;\n    // }\n\n    /**\n     * Return all coordinates that could cover this transform for a covering\n     * zoom level.\n     * @param {Object} options\n     * @param {number} options.tileSize\n     * @param {number} options.minzoom\n     * @param {number} options.maxzoom\n     * @param {boolean} options.roundZoom\n     * @param {boolean} options.reparseOverscaled\n     * @param {boolean} options.renderWorldCopies\n     * @returns {Array<OverscaledTileID>} OverscaledTileIDs\n     * @private\n     */\n    // public coveringTiles(options: {\n    //   tileSize: number;\n    //   minzoom?: number;\n    //   maxzoom?: number;\n    //   roundZoom?: boolean;\n    //   reparseOverscaled?: boolean;\n    //   renderWorldCopies?: boolean;\n    // }): OverscaledTileID[] {\n    //   let z = this.coveringZoomLevel(options);\n    //   const actualZ = z;\n\n    //   if (options.minzoom !== undefined && z < options.minzoom) {\n    //     return [];\n    //   }\n    //   if (options.maxzoom !== undefined && z > options.maxzoom) {\n    //     z = options.maxzoom;\n    //   }\n\n    //   const centerCoord = MercatorCoordinate.fromLngLat(this.center);\n    //   const numTiles = Math.pow(2, z);\n    //   const centerPoint = [numTiles * centerCoord.x, numTiles * centerCoord.y, 0];\n    //   const cameraFrustum = Frustum.fromInvProjectionMatrix(\n    //     this.invProjMatrix,\n    //     this.worldSize,\n    //     z,\n    //   );\n\n    //   // No change of LOD behavior for pitch lower than 60 and when there is no top padding: return only tile ids from the requested zoom level\n    //   let minZoom = options.minzoom || 0;\n    //   // Use 0.1 as an epsilon to avoid for explicit == 0.0 floating point checks\n    //   if (this._pitch <= 60.0 && this.edgeInsets.top < 0.1) {\n    //     minZoom = z;\n    //   }\n\n    //   // There should always be a certain number of maximum zoom level tiles surrounding the center location\n    //   const radiusOfMaxLvlLodInTiles = 3;\n\n    //   const newRootTile = (wrap: number): any => {\n    //     return {\n    //       // All tiles are on zero elevation plane => z difference is zero\n    //       aabb: new Aabb(\n    //         [wrap * numTiles, 0, 0],\n    //         [(wrap + 1) * numTiles, numTiles, 0],\n    //       ),\n    //       zoom: 0,\n    //       x: 0,\n    //       y: 0,\n    //       wrap,\n    //       fullyVisible: false,\n    //     };\n    //   };\n\n    //   // Do a depth-first traversal to find visible tiles and proper levels of detail\n    //   const stack = [];\n    //   const result = [];\n    //   const maxZoom = z;\n    //   const overscaledZ = options.reparseOverscaled ? actualZ : z;\n\n    //   if (this._renderWorldCopies) {\n    //     // Render copy of the globe thrice on both sides\n    //     for (let i = 1; i <= 3; i++) {\n    //       stack.push(newRootTile(-i));\n    //       stack.push(newRootTile(i));\n    //     }\n    //   }\n\n    //   stack.push(newRootTile(0));\n\n    //   while (stack.length > 0) {\n    //     const it = stack.pop();\n    //     const x = it.x;\n    //     const y = it.y;\n    //     let fullyVisible = it.fullyVisible;\n\n    //     // Visibility of a tile is not required if any of its ancestor if fully inside the frustum\n    //     if (!fullyVisible) {\n    //       const intersectResult = it.aabb.intersects(cameraFrustum);\n\n    //       if (intersectResult === 0) {\n    //         continue;\n    //       }\n\n    //       fullyVisible = intersectResult === 2;\n    //     }\n\n    //     const distanceX = it.aabb.distanceX(centerPoint);\n    //     const distanceY = it.aabb.distanceY(centerPoint);\n    //     const longestDim = Math.max(Math.abs(distanceX), Math.abs(distanceY));\n\n    //     // We're using distance based heuristics to determine if a tile should be split into quadrants or not.\n    //     // radiusOfMaxLvlLodInTiles defines that there's always a certain number of maxLevel tiles next to the map center.\n    //     // Using the fact that a parent node in quadtree is twice the size of its children (per dimension)\n    //     // we can define distance thresholds for each relative level:\n    //     // f(k) = offset + 2 + 4 + 8 + 16 + ... + 2^k. This is the same as \"offset+2^(k+1)-2\"\n    //     const distToSplit =\n    //       radiusOfMaxLvlLodInTiles + (1 << (maxZoom - it.zoom)) - 2;\n\n    //     // Have we reached the target depth or is the tile too far away to be any split further?\n    //     if (\n    //       it.zoom === maxZoom ||\n    //       (longestDim > distToSplit && it.zoom >= minZoom)\n    //     ) {\n    //       result.push({\n    //         tileID: new OverscaledTileID(\n    //           it.zoom === maxZoom ? overscaledZ : it.zoom,\n    //           it.wrap,\n    //           it.zoom,\n    //           x,\n    //           y,\n    //         ),\n    //         distanceSq: vec2.sqrLen([\n    //           centerPoint[0] - 0.5 - x,\n    //           centerPoint[1] - 0.5 - y,\n    //         ]),\n    //       });\n    //       continue;\n    //     }\n\n    //     for (let i = 0; i < 4; i++) {\n    //       const childX = (x << 1) + (i % 2);\n    //       const childY = (y << 1) + (i >> 1);\n\n    //       stack.push({\n    //         aabb: it.aabb.quadrant(i),\n    //         zoom: it.zoom + 1,\n    //         x: childX,\n    //         y: childY,\n    //         wrap: it.wrap,\n    //         fullyVisible,\n    //       });\n    //     }\n    //   }\n\n    //   return result\n    //     .sort((a, b) => a.distanceSq - b.distanceSq)\n    //     .map((a) => a.tileID);\n    // }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.pixelsToGLUnits = [2 / width, -2 / height];\n      this.constrain();\n      this.calcMatrices();\n    }\n  }, {\n    key: \"zoomScale\",\n    value: function zoomScale(zoom) {\n      return Math.pow(2, zoom);\n    }\n  }, {\n    key: \"scaleZoom\",\n    value: function scaleZoom(scale) {\n      return Math.log(scale) / Math.LN2;\n    }\n  }, {\n    key: \"project\",\n    value: function project(lnglat) {\n      var lat = clamp(lnglat.lat, -this.maxValidLatitude, this.maxValidLatitude);\n      return new Point(mercatorXfromLng(lnglat.lng) * this.worldSize, mercatorYfromLat(lat) * this.worldSize);\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(point) {\n      return new MercatorCoordinate(point.x / this.worldSize, point.y / this.worldSize).toLngLat();\n    }\n  }, {\n    key: \"setLocationAtPoint\",\n    value: function setLocationAtPoint(lnglat, point) {\n      var a = this.pointCoordinate(point);\n      var b = this.pointCoordinate(this.centerPoint);\n      var loc = this.locationCoordinate(lnglat);\n      var newCenter = new MercatorCoordinate(loc.x - (a.x - b.x), loc.y - (a.y - b.y));\n      this.center = this.coordinateLocation(newCenter);\n      if (this._renderWorldCopies) {\n        this.center = this.center.wrap();\n      }\n    }\n  }, {\n    key: \"pointCoordinate\",\n    value: function pointCoordinate(p) {\n      var targetZ = 0;\n      // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that\n      // line with z=0\n\n      var coord0 = new Float64Array([p.x, p.y, 0, 1]);\n      var coord1 = new Float64Array([p.x, p.y, 1, 1]);\n\n      // @ts-ignore\n      vec4.transformMat4(coord0, coord0, this.pixelMatrixInverse);\n      // @ts-ignore\n      vec4.transformMat4(coord1, coord1, this.pixelMatrixInverse);\n      var w0 = coord0[3];\n      var w1 = coord1[3];\n      var x0 = coord0[0] / w0;\n      var x1 = coord1[0] / w1;\n      var y0 = coord0[1] / w0;\n      var y1 = coord1[1] / w1;\n      var z0 = coord0[2] / w0;\n      var z1 = coord1[2] / w1;\n      var t = z0 === z1 ? 0 : (targetZ - z0) / (z1 - z0);\n      return new MercatorCoordinate(interpolate(x0, x1, t) / this.worldSize, interpolate(y0, y1, t) / this.worldSize);\n    }\n\n    /**\n     * Returns the map's geographical bounds. When the bearing or pitch is non-zero, the visible region is not\n     * an axis-aligned rectangle, and the result is the smallest bounds that encompasses the visible region.\n     * @returns {LngLatBounds} Returns a {@link LngLatBounds} object describing the map's geographical bounds.\n     */\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return new LngLatBounds().extend(this.pointLocation(new Point(0, 0))).extend(this.pointLocation(new Point(this.width, 0))).extend(this.pointLocation(new Point(this.width, this.height))).extend(this.pointLocation(new Point(0, this.height)));\n    }\n\n    /**\n     * Returns the maximum geographical bounds the map is constrained to, or `null` if none set.\n     * @returns {LngLatBounds} {@link LngLatBounds}\n     */\n  }, {\n    key: \"getMaxBounds\",\n    value: function getMaxBounds() {\n      if (!this.latRange || this.latRange.length !== 2 || !this.lngRange || this.lngRange.length !== 2) {\n        return null;\n      }\n      return new LngLatBounds([this.lngRange[0], this.latRange[0]], [this.lngRange[1], this.latRange[1]]);\n    }\n\n    /**\n     * Sets or clears the map's geographical constraints.\n     * @param {LngLatBounds} bounds A {@link LngLatBounds} object describing the new geographic boundaries of the map.\n     */\n  }, {\n    key: \"setMaxBounds\",\n    value: function setMaxBounds(bounds) {\n      if (bounds) {\n        this.lngRange = [bounds.getWest(), bounds.getEast()];\n        this.latRange = [bounds.getSouth(), bounds.getNorth()];\n        this.constrain();\n      } else {\n        this.lngRange = undefined;\n        this.latRange = [-this.maxValidLatitude, this.maxValidLatitude];\n      }\n    }\n  }, {\n    key: \"customLayerMatrix\",\n    value: function customLayerMatrix() {\n      return this.mercatorMatrix.slice();\n    }\n  }, {\n    key: \"maxPitchScaleFactor\",\n    value: function maxPitchScaleFactor() {\n      // calcMatrices hasn't run yet\n      if (!this.pixelMatrixInverse) {\n        return 1;\n      }\n      var coord = this.pointCoordinate(new Point(0, 0));\n      var p = new Float32Array([coord.x * this.worldSize, coord.y * this.worldSize, 0, 1]);\n      var topPoint = vec4.transformMat4(p, p, this.pixelMatrix);\n      return topPoint[3] / this.cameraToCenterDistance;\n    }\n\n    /*\n     * The camera looks at the map from a 3D (lng, lat, altitude) location. Let's use `cameraLocation`\n     * as the name for the location under the camera and on the surface of the earth (lng, lat, 0).\n     * `cameraPoint` is the projected position of the `cameraLocation`.\n     *\n     * This point is useful to us because only fill-extrusions that are between `cameraPoint` and\n     * the query point on the surface of the earth can extend and intersect the query.\n     *\n     * When the map is not pitched the `cameraPoint` is equivalent to the center of the map because\n     * the camera is right above the center of the map.\n     */\n  }, {\n    key: \"getCameraPoint\",\n    value: function getCameraPoint() {\n      var pitch = this._pitch;\n      var yOffset = Math.tan(pitch) * (this.cameraToCenterDistance || 1);\n      return this.centerPoint.add(new Point(0, yOffset));\n    }\n\n    /*\n     * When the map is pitched, some of the 3D features that intersect a query will not intersect\n     * the query at the surface of the earth. Instead the feature may be closer and only intersect\n     * the query because it extrudes into the air.\n     *\n     * This returns a geometry that includes all of the original query as well as all possible ares of the\n     * screen where the *base* of a visible extrusion could be.\n     *  - For point queries, the line from the query point to the \"camera point\"\n     *  - For other geometries, the envelope of the query geometry and the \"camera point\"\n     */\n  }, {\n    key: \"getCameraQueryGeometry\",\n    value: function getCameraQueryGeometry(queryGeometry) {\n      var c = this.getCameraPoint();\n      if (queryGeometry.length === 1) {\n        return [queryGeometry[0], c];\n      } else {\n        var minX = c.x;\n        var minY = c.y;\n        var maxX = c.x;\n        var maxY = c.y;\n        var _iterator = _createForOfIteratorHelper(queryGeometry),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var p = _step.value;\n            minX = Math.min(minX, p.x);\n            minY = Math.min(minY, p.y);\n            maxX = Math.max(maxX, p.x);\n            maxY = Math.max(maxY, p.y);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return [new Point(minX, minY), new Point(maxX, minY), new Point(maxX, maxY), new Point(minX, maxY), new Point(minX, minY)];\n      }\n    }\n\n    /**\n     * Given a coordinate, return the screen point that corresponds to it\n     * @param {Coordinate} coord\n     * @returns {Point} screen point\n     * @private\n     */\n  }, {\n    key: \"coordinatePoint\",\n    value: function coordinatePoint(coord) {\n      var p = vec4.fromValues(coord.x * this.worldSize, coord.y * this.worldSize, 0, 1);\n      vec4.transformMat4(p, p, this.pixelMatrix);\n      return new Point(p[0] / p[3], p[1] / p[3]);\n    }\n    /**\n     * Given a location, return the screen point that corresponds to it\n     * @param {LngLat} lnglat location\n     * @returns {Point} screen point\n     * @private\n     */\n  }, {\n    key: \"locationPoint\",\n    value: function locationPoint(lnglat) {\n      return this.coordinatePoint(this.locationCoordinate(lnglat));\n    }\n\n    /**\n     * Given a point on screen, return its lnglat\n     * @param {Point} p screen point\n     * @returns {LngLat} lnglat location\n     * @private\n     */\n  }, {\n    key: \"pointLocation\",\n    value: function pointLocation(p) {\n      // if(p.x !== 0 && p.x !== 1001) {\n      //   console.log(p.x)\n      // }\n\n      return this.coordinateLocation(this.pointCoordinate(p));\n    }\n\n    /**\n     * Given a geographical lnglat, return an unrounded\n     * coordinate that represents it at this transform's zoom level.\n     * @param {LngLat} lnglat\n     * @returns {Coordinate}\n     * @private\n     */\n  }, {\n    key: \"locationCoordinate\",\n    value: function locationCoordinate(lnglat) {\n      return MercatorCoordinate.fromLngLat(lnglat);\n    }\n\n    /**\n     * Given a Coordinate, return its geographical position.\n     * @param {Coordinate} coord\n     * @returns {LngLat} lnglat\n     * @private\n     */\n  }, {\n    key: \"coordinateLocation\",\n    value: function coordinateLocation(coord) {\n      return coord.toLngLat();\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projMatrix;\n    }\n    /**\n     * Calculate the posMatrix that, given a tile coordinate, would be used to display the tile on a map.\n     * @param {UnwrappedTileID} unwrappedTileID;\n     * @private\n     */\n    // private calculatePosMatrix(\n    //   unwrappedTileID: UnwrappedTileID,\n    //   aligned: boolean = false,\n    // ): Float32Array {\n    //   const posMatrixKey = unwrappedTileID.key;\n    //   const cache = aligned ? this.alignedPosMatrixCache : this.posMatrixCache;\n    //   if (cache[posMatrixKey]) {\n    //     return cache[posMatrixKey];\n    //   }\n\n    //   const canonical = unwrappedTileID.canonical;\n    //   const scale = this.worldSize / this.zoomScale(canonical.z);\n    //   const unwrappedX =\n    //     canonical.x + Math.pow(2, canonical.z) * unwrappedTileID.wrap;\n\n    //   const posMatrix = mat4.identity(new Float64Array(16));\n    //   mat4.translate(posMatrix, posMatrix, [\n    //     unwrappedX * scale,\n    //     canonical.y * scale,\n    //     0,\n    //   ]);\n    //   mat4.scale(posMatrix, posMatrix, [scale / EXTENT, scale / EXTENT, 1]);\n    //   mat4.multiply(\n    //     posMatrix,\n    //     aligned ? this.alignedProjMatrix : this.projMatrix,\n    //     posMatrix,\n    //   );\n\n    //   cache[posMatrixKey] = new Float32Array(posMatrix);\n    //   return cache[posMatrixKey];\n    // }\n  }, {\n    key: \"constrain\",\n    value: function constrain() {\n      if (!this.center || !this.width || !this.height || this.constraining) {\n        return;\n      }\n      this.constraining = true;\n      var minY = -90;\n      var maxY = 90;\n      var minX = -180;\n      var maxX = 180;\n      var sy;\n      var sx;\n      var x2;\n      var y2;\n      var size = this.size;\n      var unmodified = this.unmodified;\n      if (this.latRange) {\n        var latRange = this.latRange;\n        minY = mercatorYfromLat(latRange[1]) * this.worldSize;\n        maxY = mercatorYfromLat(latRange[0]) * this.worldSize;\n        sy = maxY - minY < size.y ? size.y / (maxY - minY) : 0;\n      }\n      if (this.lngRange) {\n        var lngRange = this.lngRange;\n        minX = mercatorXfromLng(lngRange[0]) * this.worldSize;\n        maxX = mercatorXfromLng(lngRange[1]) * this.worldSize;\n        sx = maxX - minX < size.x ? size.x / (maxX - minX) : 0;\n      }\n      var point = this.point;\n\n      // how much the map should scale to fit the screen into given latitude/longitude ranges\n      var s = Math.max(sx || 0, sy || 0);\n      if (s) {\n        this.center = this.unproject(new Point(sx ? (maxX + minX) / 2 : point.x, sy ? (maxY + minY) / 2 : point.y));\n        this.zoom += this.scaleZoom(s);\n        this.unmodified = unmodified;\n        this.constraining = false;\n        return;\n      }\n      if (this.latRange) {\n        var y = point.y;\n        var h2 = size.y / 2;\n        if (y - h2 < minY) {\n          y2 = minY + h2;\n        }\n        if (y + h2 > maxY) {\n          y2 = maxY - h2;\n        }\n      }\n      if (this.lngRange) {\n        var x = point.x;\n        var w2 = size.x / 2;\n        if (x - w2 < minX) {\n          x2 = minX + w2;\n        }\n        if (x + w2 > maxX) {\n          x2 = maxX - w2;\n        }\n      }\n\n      // pan the map if the screen goes off the range\n      if (x2 !== undefined || y2 !== undefined) {\n        this.center = this.unproject(new Point(x2 !== undefined ? x2 : point.x, y2 !== undefined ? y2 : point.y));\n      }\n      this.unmodified = unmodified;\n      this.constraining = false;\n    }\n  }, {\n    key: \"calcMatrices\",\n    value: function calcMatrices() {\n      if (!this.height) {\n        return;\n      }\n      var halfFov = this._fov / 2;\n      var offset = this.centerOffset;\n      this.cameraToCenterDistance = 0.5 / Math.tan(halfFov) * this.height;\n\n      // Find the distance from the center point [width/2 + offset.x, height/2 + offset.y] to the\n      // center top point [width/2 + offset.x, 0] in Z units, using the law of sines.\n      // 1 Z unit is equivalent to 1 horizontal px at the center of the map\n      // (the distance between[width/2, height/2] and [width/2 + 1, height/2])\n      var groundAngle = Math.PI / 2 + this._pitch;\n      var fovAboveCenter = this._fov * (0.5 + offset.y / this.height);\n      var topHalfSurfaceDistance = Math.sin(fovAboveCenter) * this.cameraToCenterDistance / Math.sin(clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01));\n      var point = this.point;\n      var x = point.x;\n      var y = point.y;\n\n      // Calculate z distance of the farthest fragment that should be rendered.\n      var furthestDistance = Math.cos(Math.PI / 2 - this._pitch) * topHalfSurfaceDistance + this.cameraToCenterDistance;\n      // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n      var farZ = furthestDistance * 1.01;\n\n      // The larger the value of nearZ is\n      // - the more depth precision is available for features (good)\n      // - clipping starts appearing sooner when the camera is close to 3d features (bad)\n      //\n      // Smaller values worked well for mapbox-gl-js but deckgl was encountering precision issues\n      // when rendering it's layers using custom layers. This value was experimentally chosen and\n      // seems to solve z-fighting issues in deckgl while not clipping buildings too close to the camera.\n      var nearZ = this.height / 50;\n\n      // matrix for conversion from location to GL coordinates (-1 .. 1)\n      // 使用 Float64Array 的原因是为了避免计算精度问题、 mat4.create() 默认使用 Float32Array\n      var m = new Float64Array(16);\n      // @ts-ignore\n      mat4.perspective(m, this._fov, this.width / this.height, nearZ, farZ);\n\n      // Apply center of perspective offset\n      m[8] = -offset.x * 2 / this.width;\n      m[9] = offset.y * 2 / this.height;\n\n      // @ts-ignore\n      mat4.scale(m, m, [1, -1, 1]);\n      // @ts-ignore\n      mat4.translate(m, m, [0, 0, -this.cameraToCenterDistance]);\n      // @ts-ignore\n      mat4.rotateX(m, m, this._pitch);\n      // @ts-ignore\n      mat4.rotateZ(m, m, this.angle);\n      // @ts-ignore\n      mat4.translate(m, m, [-x, -y, 0]);\n\n      // The mercatorMatrix can be used to transform points from mercator coordinates\n      // ([0, 0] nw, [1, 1] se) to GL coordinates.\n      // @ts-ignore\n      this.mercatorMatrix = mat4.scale([], m, [this.worldSize, this.worldSize, this.worldSize]);\n      // scale vertically to meters per pixel (inverse of ground resolution):\n\n      // @ts-ignore\n      mat4.scale(m, m, [1, 1, mercatorZfromAltitude(1, this.center.lat) * this.worldSize, 1]);\n      // @ts-ignore\n      this.projMatrix = m;\n      // @ts-ignore\n      this.invProjMatrix = mat4.invert([], this.projMatrix);\n\n      // Make a second projection matrix that is aligned to a pixel grid for rendering raster tiles.\n      // We're rounding the (floating point) x/y values to achieve to avoid rendering raster images to fractional\n      // coordinates. Additionally, we adjust by half a pixel in either direction in case that viewport dimension\n      // is an odd integer to preserve rendering to the pixel grid. We're rotating this shift based on the angle\n      // of the transformation so that 0°, 90°, 180°, and 270° rasters are crisp, and adjust the shift so that\n      // it is always <= 0.5 pixels.\n      var xShift = this.width % 2 / 2;\n      var yShift = this.height % 2 / 2;\n      var angleCos = Math.cos(this.angle);\n      var angleSin = Math.sin(this.angle);\n      var dx = x - Math.round(x) + angleCos * xShift + angleSin * yShift;\n      var dy = y - Math.round(y) + angleCos * yShift + angleSin * xShift;\n      // const alignedM = mat4.clone(m);\n      var alignedM = new Float64Array(m);\n      // @ts-ignore\n      mat4.translate(alignedM, alignedM, [dx > 0.5 ? dx - 1 : dx, dy > 0.5 ? dy - 1 : dy, 0]);\n      // @ts-ignore\n      this.alignedProjMatrix = alignedM;\n\n      // @ts-ignore\n      m = mat4.create();\n      // @ts-ignore\n      mat4.scale(m, m, [this.width / 2, -this.height / 2, 1]);\n      // @ts-ignore\n      mat4.translate(m, m, [1, -1, 0]);\n      // @ts-ignore\n      this.labelPlaneMatrix = m;\n\n      // @ts-ignore\n      m = mat4.create();\n      // @ts-ignore\n      mat4.scale(m, m, [1, -1, 1]);\n      // @ts-ignore\n      mat4.translate(m, m, [-1, -1, 0]);\n      // @ts-ignore\n      mat4.scale(m, m, [2 / this.width, 2 / this.height, 1]);\n      // @ts-ignore\n      this.glCoordMatrix = m;\n\n      // matrix for conversion from location to screen coordinates\n      this.pixelMatrix = mat4.multiply(\n      // @ts-ignore\n      new Float64Array(16), this.labelPlaneMatrix, this.projMatrix);\n\n      // inverse matrix for conversion from screen coordinaes to location\n      // @ts-ignore\n      m = mat4.invert(new Float64Array(16), this.pixelMatrix);\n      if (!m) {\n        throw new Error('failed to invert matrix');\n      }\n      // @ts-ignore\n      this.pixelMatrixInverse = m;\n      this.posMatrixCache = {};\n      this.alignedPosMatrixCache = {};\n    }\n  }]);\n  return Transform;\n}();\nexport { Transform as default };"],"mappings":"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S,GAAG1C,IAAI,CAAC2C,KAAK,GAAG3C,IAAI,CAACsB,KAAK,EAAE,IAAI,CAACjC,IAAI,GAAG,IAAI,CAACuD,SAAS,CAAC,IAAI,CAACnE,QAAQ,GAAGgE,OAAO,CAAChE,QAAQ,CAAC,CAAC;MACnH;MACA,OAAOuB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEkB,CAAC,CAAC;IACvB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACF,CAAC,EAAE;IACDtB,GAAG,EAAE,QAAQ;IACbnE,KAAK,EAAE,SAASmH,MAAMA,CAAC3D,KAAK,EAAEC,MAAM,EAAE;MACpC,IAAI,CAACD,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}