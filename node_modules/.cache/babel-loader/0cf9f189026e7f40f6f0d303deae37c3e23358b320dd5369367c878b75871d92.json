{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { each, isEmpty, isEqual, last } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\nfunction getPath(points) {\n  var flag = points[0];\n  var i = 1;\n  var path = [['M', flag.x, flag.y]];\n  while (i < points.length) {\n    var c = points[i];\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n    i++;\n  }\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n  path.push(['Z']);\n  return path;\n}\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints: function (pointInfo) {\n    var points = [];\n    each(pointInfo.x, function (subX, index) {\n      var subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY\n      });\n    });\n    return points;\n  }\n});\nregisterShape('polygon', 'polygon', {\n  draw: function (cfg, container) {\n    if (!isEmpty(cfg.points)) {\n      var shapeAttrs = getStyle(cfg, true, true);\n      var path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: __assign(__assign({}, shapeAttrs), {\n          path: path\n        }),\n        name: 'polygon'\n      });\n    }\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default PolygonShapeFactory;","map":{"version":3,"names":["each","isEmpty","isEqual","last","registerShape","registerShapeFactory","getStyle","getPath","points","flag","i","path","x","y","length","c","push","PolygonShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","subX","index","subY","draw","cfg","container","shapeAttrs","parsePath","addShape","attrs","__assign","name","getMarker","markerCfg","color","symbol","style","r","fill"],"sources":["../../../../src/geometry/shape/polygon/index.ts"],"sourcesContent":["import { each, isEmpty, isEqual, last } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\n\nfunction getPath(points: any[]) {\n  let flag: any = points[0];\n  let i = 1;\n\n  const path = [['M', flag.x, flag.y]];\n\n  while (i < points.length) {\n    const c: any = points[i];\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n    i++;\n  }\n\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n\n  path.push(['Z']);\n\n  return path;\n}\n\nconst PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints(pointInfo: ShapePoint) {\n    const points = [];\n    each(pointInfo.x as number[], (subX, index) => {\n      const subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('polygon', 'polygon', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    if (!isEmpty(cfg.points)) {\n      const shapeAttrs = getStyle(cfg, true, true);\n      const path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: {\n          ...shapeAttrs,\n          path,\n        },\n        name: 'polygon',\n      });\n    }\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default PolygonShapeFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}