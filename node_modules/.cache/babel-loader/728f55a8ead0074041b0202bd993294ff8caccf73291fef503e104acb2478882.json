{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { isMobile } from '../utils/env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n/**\n * Process multiple data messages with small pool of identical workers\n */\nvar WorkerPool = /** @class */function () {\n  function WorkerPool(props) {\n    this.name = 'unnamed';\n    this.maxConcurrency = 1;\n    this.maxMobileConcurrency = 1;\n    this.onDebug = function () {};\n    this.reuseWorkers = true;\n    this.props = {};\n    this.jobQueue = [];\n    this.idleQueue = [];\n    this.count = 0;\n    this.isDestroyed = false;\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  WorkerPool.prototype.destroy = function () {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach(function (worker) {\n      return worker.destroy();\n    });\n    this.isDestroyed = true;\n  };\n  WorkerPool.prototype.setProps = function (props) {\n    this.props = __assign(__assign({}, this.props), props);\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  };\n  WorkerPool.prototype.startJob = function (name, onMessage, onError) {\n    if (onMessage === void 0) {\n      onMessage = function (job, type, data) {\n        return job.done(data);\n      };\n    }\n    if (onError === void 0) {\n      onError = function (job, error) {\n        return job.error(error);\n      };\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var startPromise;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            startPromise = new Promise(function (onStart) {\n              // Promise resolves when thread completes or fails working on this job\n              _this.jobQueue.push({\n                name: name,\n                onMessage: onMessage,\n                onError: onError,\n                onStart: onStart\n              });\n              return _this;\n            });\n            this.startQueuedJob();\n            return [4 /*yield*/, startPromise];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  WorkerPool.prototype.startQueuedJob = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var workerThread, queuedJob, job_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.jobQueue.length) {\n              return [2 /*return*/];\n            }\n\n            workerThread = this.getAvailableWorker();\n            if (!workerThread) {\n              return [2 /*return*/];\n            }\n\n            queuedJob = this.jobQueue.shift();\n            if (!queuedJob) return [3 /*break*/, 4];\n            this.onDebug({\n              message: 'Starting job',\n              name: queuedJob.name,\n              backlog: this.jobQueue.length,\n              workerThread: workerThread\n            });\n            job_1 = new WorkerJob(queuedJob.name, workerThread);\n            // Set the worker thread's message handlers\n            workerThread.onMessage = function (data) {\n              return queuedJob.onMessage(job_1, data.type, data.payload);\n            };\n            workerThread.onError = function (error) {\n              return queuedJob.onError(job_1, error);\n            };\n            // Resolve the start promise so that the app can start sending messages to worker\n            queuedJob.onStart(job_1);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, job_1.result];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            this.returnWorkerToQueue(workerThread);\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   */\n  WorkerPool.prototype.returnWorkerToQueue = function (worker) {\n    var shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this.getMaxConcurrency();\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n    if (!this.isDestroyed) {\n      this.startQueuedJob();\n    }\n  };\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  WorkerPool.prototype.getAvailableWorker = function () {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this.getMaxConcurrency()) {\n      this.count++;\n      var name_1 = this.name.toLowerCase() + \" (#\" + this.count + \" of \" + this.maxConcurrency + \")\";\n      return new WorkerThread({\n        name: name_1,\n        source: this.source,\n        url: this.url\n      });\n    }\n    // No worker available, have to wait\n    return null;\n  };\n  WorkerPool.prototype.getMaxConcurrency = function () {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  };\n  return WorkerPool;\n}();\nexport default WorkerPool;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","isMobile","WorkerThread","WorkerJob","WorkerPool","props","name","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","jobQueue","idleQueue","count","isDestroyed","source","url","setProps","destroy","forEach","worker","undefined","startJob","onMessage","onError","job","type","data","error","startPromise","_this","_a","onStart","startQueuedJob","workerThread","queuedJob","job_1","getAvailableWorker","shift","message","backlog","payload","returnWorkerToQueue","shouldDestroyWorker","getMaxConcurrency","name_1","toLowerCase"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/worker-farm/worker-pool.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { isMobile } from '../utils/env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n/**\n * Process multiple data messages with small pool of identical workers\n */\nvar WorkerPool = /** @class */ (function () {\n    function WorkerPool(props) {\n        this.name = 'unnamed';\n        this.maxConcurrency = 1;\n        this.maxMobileConcurrency = 1;\n        this.onDebug = function () { };\n        this.reuseWorkers = true;\n        this.props = {};\n        this.jobQueue = [];\n        this.idleQueue = [];\n        this.count = 0;\n        this.isDestroyed = false;\n        this.source = props.source;\n        this.url = props.url;\n        this.setProps(props);\n    }\n    /**\n     * Terminates all workers in the pool\n     * @note Can free up significant memory\n     */\n    WorkerPool.prototype.destroy = function () {\n        // Destroy idle workers, active Workers will be destroyed on completion\n        this.idleQueue.forEach(function (worker) { return worker.destroy(); });\n        this.isDestroyed = true;\n    };\n    WorkerPool.prototype.setProps = function (props) {\n        this.props = __assign(__assign({}, this.props), props);\n        if (props.name !== undefined) {\n            this.name = props.name;\n        }\n        if (props.maxConcurrency !== undefined) {\n            this.maxConcurrency = props.maxConcurrency;\n        }\n        if (props.maxMobileConcurrency !== undefined) {\n            this.maxMobileConcurrency = props.maxMobileConcurrency;\n        }\n        if (props.reuseWorkers !== undefined) {\n            this.reuseWorkers = props.reuseWorkers;\n        }\n        if (props.onDebug !== undefined) {\n            this.onDebug = props.onDebug;\n        }\n    };\n    WorkerPool.prototype.startJob = function (name, onMessage, onError) {\n        if (onMessage === void 0) { onMessage = function (job, type, data) { return job.done(data); }; }\n        if (onError === void 0) { onError = function (job, error) { return job.error(error); }; }\n        return __awaiter(this, void 0, void 0, function () {\n            var startPromise;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        startPromise = new Promise(function (onStart) {\n                            // Promise resolves when thread completes or fails working on this job\n                            _this.jobQueue.push({ name: name, onMessage: onMessage, onError: onError, onStart: onStart });\n                            return _this;\n                        });\n                        this.startQueuedJob();\n                        return [4 /*yield*/, startPromise];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Starts first queued job if worker is available or can be created\n     * Called when job is started and whenever a worker returns to the idleQueue\n     */\n    WorkerPool.prototype.startQueuedJob = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var workerThread, queuedJob, job_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.jobQueue.length) {\n                            return [2 /*return*/];\n                        }\n                        workerThread = this.getAvailableWorker();\n                        if (!workerThread) {\n                            return [2 /*return*/];\n                        }\n                        queuedJob = this.jobQueue.shift();\n                        if (!queuedJob) return [3 /*break*/, 4];\n                        this.onDebug({\n                            message: 'Starting job',\n                            name: queuedJob.name,\n                            backlog: this.jobQueue.length,\n                            workerThread: workerThread,\n                        });\n                        job_1 = new WorkerJob(queuedJob.name, workerThread);\n                        // Set the worker thread's message handlers\n                        workerThread.onMessage = function (data) { return queuedJob.onMessage(job_1, data.type, data.payload); };\n                        workerThread.onError = function (error) { return queuedJob.onError(job_1, error); };\n                        // Resolve the start promise so that the app can start sending messages to worker\n                        queuedJob.onStart(job_1);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 4]);\n                        return [4 /*yield*/, job_1.result];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        this.returnWorkerToQueue(workerThread);\n                        return [7 /*endfinally*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a worker to the idle queue\n     * Destroys the worker if\n     *  - pool is destroyed\n     *  - if this pool doesn't reuse workers\n     *  - if maxConcurrency has been lowered\n     */\n    WorkerPool.prototype.returnWorkerToQueue = function (worker) {\n        var shouldDestroyWorker = this.isDestroyed || !this.reuseWorkers || this.count > this.getMaxConcurrency();\n        if (shouldDestroyWorker) {\n            worker.destroy();\n            this.count--;\n        }\n        else {\n            this.idleQueue.push(worker);\n        }\n        if (!this.isDestroyed) {\n            this.startQueuedJob();\n        }\n    };\n    /**\n     * Returns idle worker or creates new worker if maxConcurrency has not been reached\n     */\n    WorkerPool.prototype.getAvailableWorker = function () {\n        // If a worker has completed and returned to the queue, it can be used\n        if (this.idleQueue.length > 0) {\n            return this.idleQueue.shift() || null;\n        }\n        // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n        if (this.count < this.getMaxConcurrency()) {\n            this.count++;\n            var name_1 = this.name.toLowerCase() + \" (#\" + this.count + \" of \" + this.maxConcurrency + \")\";\n            return new WorkerThread({ name: name_1, source: this.source, url: this.url });\n        }\n        // No worker available, have to wait\n        return null;\n    };\n    WorkerPool.prototype.getMaxConcurrency = function () {\n        return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n    };\n    return WorkerPool;\n}());\nexport default WorkerPool;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}