{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { each, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nimport { splitPoints } from '../util/split-points';\nimport { getLineMarker } from './util';\nfunction getShapeAttrs(cfg, smooth, constraint) {\n  var isStack = cfg.isStack,\n    connectNulls = cfg.connectNulls,\n    isInCircle = cfg.isInCircle,\n    showSinglePoint = cfg.showSinglePoint;\n  var shapeAttrs = getStyle(cfg, true, false, 'lineWidth');\n  var points = getPathPoints(cfg.points, connectNulls, showSinglePoint); // 根据 connectNulls 值处理 points\n  var path = [];\n  for (var i = 0, len = points.length; i < len; i++) {\n    var eachLinePoints = points[i];\n    path = path.concat(getPath(eachLinePoints, isInCircle, isStack, smooth, constraint, shapeAttrs));\n  }\n  shapeAttrs.path = path;\n  return shapeAttrs;\n}\n// 单条 path\nfunction getSinglePath(points, isInCircle, smooth, constraint, style) {\n  if (points.length === 1) {\n    // 只有一个点时\n    return [['M', points[0].x, points[0].y - style.lineWidth / 2], ['L', points[0].x, points[0].y], ['L', points[0].x, points[0].y + style.lineWidth / 2]];\n  }\n  var path;\n  if (!smooth) {\n    path = getLinePath(points, false);\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  } else {\n    // 直角坐标系下绘制曲线时限制最大值、最小值\n    if (isInCircle && points.length) {\n      points.push({\n        x: points[0].x,\n        y: points[0].y\n      });\n    }\n    path = getSplinePath(points, false, constraint);\n  }\n  return path;\n}\nfunction getRangePath(points, isInCircle, isStack, smooth, constraint, style) {\n  var topPoints = [];\n  var bottomPoints = [];\n  each(points, function (point) {\n    var result = splitPoints(point);\n    topPoints.push(result[1]); // 上边\n    bottomPoints.push(result[0]); // 底边\n  });\n\n  var topPath = getSinglePath(topPoints, isInCircle, smooth, constraint, style);\n  var bottomPath = getSinglePath(bottomPoints, isInCircle, smooth, constraint, style);\n  if (isStack) {\n    return topPath;\n  }\n  return topPath.concat(bottomPath);\n}\n/**\n * 获取折线图 path\n */\nexport function getPath(points, isInCircle, isStack, smooth, constraint, style) {\n  if (points.length) {\n    var first = points[0];\n    return isArray(first.y) ? getRangePath(points, isInCircle, isStack, smooth, constraint, style) : getSinglePath(points, isInCircle, smooth, constraint, style);\n  }\n  return [];\n}\nvar LineShapeFactory = registerShapeFactory('line', {\n  defaultShapeType: 'line'\n});\n// 这里因为代码公用，所以直接全部注册\n// 'line' 默认折线；'dot' 点线 ···；'dash' 断线 - - -\neach(['line', 'dot', 'dash', 'smooth'], function (shapeType) {\n  registerShape('line', shapeType, {\n    draw: function (cfg, container) {\n      var smooth = shapeType === 'smooth';\n      var constraint;\n      if (smooth) {\n        var _a = this.coordinate,\n          start = _a.start,\n          end = _a.end;\n        constraint = [[start.x, end.y], [end.x, start.y]];\n      }\n      var attrs = getShapeAttrs(cfg, smooth, constraint);\n      var shape = container.addShape({\n        type: 'path',\n        attrs: attrs,\n        name: 'line',\n        capture: !smooth\n      });\n      return shape;\n    },\n    getMarker: function (markerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    }\n  });\n});\nexport default LineShapeFactory;","map":{"version":3,"names":["each","isArray","registerShape","registerShapeFactory","getPathPoints","getStyle","getLinePath","getSplinePath","splitPoints","getLineMarker","getShapeAttrs","cfg","smooth","constraint","isStack","connectNulls","isInCircle","showSinglePoint","shapeAttrs","points","path","i","len","length","eachLinePoints","concat","getPath","getSinglePath","style","x","y","lineWidth","push","getRangePath","topPoints","bottomPoints","point","result","topPath","bottomPath","first","LineShapeFactory","defaultShapeType","shapeType","draw","container","_a","coordinate","start","end","attrs","shape","addShape","type","name","capture","getMarker","markerCfg"],"sources":["../../../../src/geometry/shape/line/index.ts"],"sourcesContent":["import { each, isArray } from '@antv/util';\nimport { IGroup, ShapeAttrs } from '../../../dependents';\nimport { Point, Position, RangePoint, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\nimport { splitPoints } from '../util/split-points';\nimport { getLineMarker } from './util';\n\nfunction getShapeAttrs(cfg: ShapeInfo, smooth?: boolean, constraint?: Position[]) {\n  const { isStack, connectNulls, isInCircle, showSinglePoint } = cfg;\n  const shapeAttrs = getStyle(cfg, true, false, 'lineWidth');\n\n  const points = getPathPoints(cfg.points, connectNulls, showSinglePoint); // 根据 connectNulls 值处理 points\n  let path = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const eachLinePoints = points[i];\n    path = path.concat(getPath(eachLinePoints, isInCircle, isStack, smooth, constraint, shapeAttrs));\n  }\n  shapeAttrs.path = path;\n\n  return shapeAttrs;\n}\n\n// 单条 path\nfunction getSinglePath(\n  points: Point[],\n  isInCircle: boolean,\n  smooth?: boolean,\n  constraint?: Position[],\n  style?: ShapeAttrs\n) {\n  if (points.length === 1) {\n    // 只有一个点时\n    return [\n      ['M', points[0].x, points[0].y - style.lineWidth / 2],\n      ['L', points[0].x, points[0].y],\n      ['L', points[0].x, points[0].y + style.lineWidth / 2],\n    ];\n  }\n\n  let path;\n  if (!smooth) {\n    path = getLinePath(points, false);\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  } else {\n    // 直角坐标系下绘制曲线时限制最大值、最小值\n    if (isInCircle && points.length) {\n      points.push({ x: points[0].x, y: points[0].y });\n    }\n    path = getSplinePath(points, false, constraint);\n  }\n\n  return path;\n}\n\nfunction getRangePath(\n  points: RangePoint[],\n  isInCircle: boolean,\n  isStack?: boolean,\n  smooth?: boolean,\n  constraint?: Position[],\n  style?: ShapeAttrs\n) {\n  const topPoints = [];\n  const bottomPoints = [];\n  each(points, (point: RangePoint) => {\n    const result = splitPoints(point);\n    topPoints.push(result[1]); // 上边\n    bottomPoints.push(result[0]); // 底边\n  });\n\n  const topPath = getSinglePath(topPoints, isInCircle, smooth, constraint, style);\n  const bottomPath = getSinglePath(bottomPoints, isInCircle, smooth, constraint, style);\n  if (isStack) {\n    return topPath;\n  }\n  return topPath.concat(bottomPath);\n}\n\n/**\n * 获取折线图 path\n */\nexport function getPath(\n  points: Point[] | RangePoint[],\n  isInCircle: boolean,\n  isStack?: boolean,\n  smooth?: boolean,\n  constraint?: Position[],\n  style?: ShapeAttrs\n) {\n  if (points.length) {\n    const first = points[0];\n\n    return isArray(first.y)\n      ? getRangePath(points as RangePoint[], isInCircle, isStack, smooth, constraint, style)\n      : getSinglePath(points as Point[], isInCircle, smooth, constraint, style);\n  }\n  return [];\n}\n\nconst LineShapeFactory = registerShapeFactory('line', {\n  defaultShapeType: 'line',\n});\n\n// 这里因为代码公用，所以直接全部注册\n// 'line' 默认折线；'dot' 点线 ···；'dash' 断线 - - -\neach(['line', 'dot', 'dash', 'smooth'], (shapeType) => {\n  registerShape('line', shapeType, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      const smooth = shapeType === 'smooth';\n      let constraint;\n      if (smooth) {\n        const { start, end } = this.coordinate;\n        constraint = [\n          [start.x, end.y],\n          [end.x, start.y],\n        ];\n      }\n\n      const attrs = getShapeAttrs(cfg, smooth, constraint);\n      const shape = container.addShape({\n        type: 'path',\n        attrs,\n        name: 'line',\n        capture: !smooth,\n      });\n\n      return shape;\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    },\n  });\n});\n\nexport default LineShapeFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}