{"ast":null,"code":"/**\n * Simplified from https://github.com/zertosh/invariant.\n */\nimport { __spreadArray } from \"tslib\";\nexport var LEVEL;\n(function (LEVEL) {\n  LEVEL[\"ERROR\"] = \"error\";\n  LEVEL[\"WARN\"] = \"warn\";\n  LEVEL[\"INFO\"] = \"log\";\n})(LEVEL || (LEVEL = {}));\nvar BRAND = 'AntV/G2Plot';\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\nfunction getMessage(format) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var argIndex = 0;\n  return \"\".concat(BRAND, \": \").concat(format.replace(/%s/g, function () {\n    return \"\".concat(args[argIndex++]);\n  }));\n}\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\nexport function invariant(condition, format) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (!condition) {\n    var error = new Error(getMessage.apply(void 0, __spreadArray([format], args, false)));\n    error.name = BRAND;\n    // error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\nexport function log(level, condition, format) {\n  var args = [];\n  for (var _i = 3; _i < arguments.length; _i++) {\n    args[_i - 3] = arguments[_i];\n  }\n  if (!condition) {\n    console[level](getMessage.apply(void 0, __spreadArray([format], args, false)));\n  }\n}","map":{"version":3,"names":["LEVEL","BRAND","getMessage","format","args","_i","arguments","length","argIndex","concat","replace","invariant","condition","error","Error","apply","__spreadArray","name","log","level","console"],"sources":["../../src/utils/invariant.ts"],"sourcesContent":["/**\n * Simplified from https://github.com/zertosh/invariant.\n */\n\nexport enum LEVEL {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'log',\n}\n\nconst BRAND = 'AntV/G2Plot';\n\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\nfunction getMessage(format: string, ...args: any[]): string {\n  let argIndex = 0;\n  return `${BRAND}: ${format.replace(/%s/g, (): string => `${args[argIndex++]}`)}`;\n}\n\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\nexport function invariant(condition: boolean, format: string, ...args: any[]): void {\n  if (!condition) {\n    const error = new Error(getMessage(format, ...args));\n    error.name = BRAND;\n    // error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\nexport function log(level: LEVEL, condition: boolean, format, ...args: any[]): void {\n  if (!condition) {\n    console[level](getMessage(format, ...args));\n  }\n}\n"],"mappings":"AAAA;;;;AAIA,WAAYA,KAIX;AAJD,WAAYA,KAAK;EACfA,KAAA,mBAAe;EACfA,KAAA,iBAAa;EACbA,KAAA,gBAAY;AACd,CAAC,EAJWA,KAAK,KAALA,KAAK;AAMjB,IAAMC,KAAK,GAAG,aAAa;AAE3B;;;;;AAKA,SAASC,UAAUA,CAACC,MAAc;EAAE,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAClC,IAAIG,QAAQ,GAAG,CAAC;EAChB,OAAO,GAAAC,MAAA,CAAGR,KAAK,QAAAQ,MAAA,CAAKN,MAAM,CAACO,OAAO,CAAC,KAAK,EAAE;IAAc,UAAAD,MAAA,CAAGL,IAAI,CAACI,QAAQ,EAAE,CAAC,CAAE;EAArB,CAAqB,CAAC,CAAE;AAClF;AAEA;;;;;;AAMA,OAAM,SAAUG,SAASA,CAACC,SAAkB,EAAET,MAAc;EAAE,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAC5D,IAAI,CAACO,SAAS,EAAE;IACd,IAAMC,KAAK,GAAG,IAAIC,KAAK,CAACZ,UAAU,CAAAa,KAAA,SAAAC,aAAA,EAACb,MAAM,GAAKC,IAAI,UAAE;IACpDS,KAAK,CAACI,IAAI,GAAGhB,KAAK;IAClB;IACA,MAAMY,KAAK;;AAEf;AAEA;;;;;;;AAOA,OAAM,SAAUK,GAAGA,CAACC,KAAY,EAAEP,SAAkB,EAAET,MAAM;EAAE,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAC5D,IAAI,CAACO,SAAS,EAAE;IACdQ,OAAO,CAACD,KAAK,CAAC,CAACjB,UAAU,CAAAa,KAAA,SAAAC,aAAA,EAACb,MAAM,GAAKC,IAAI,UAAE;;AAE/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}