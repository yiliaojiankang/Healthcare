{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError('vector size must be the same as the number of columns');\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices)\n  };\n}\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n  let rowOut = rowIndices.some(r => {\n    return r < 0 || r >= matrix.rows;\n  });\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n  return rowIndices;\n}\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n  let columnOut = columnIndices.some(c => {\n    return c < 0 || c >= matrix.columns;\n  });\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n  return columnIndices;\n}\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}","map":{"version":3,"names":["checkRowIndex","matrix","index","outer","max","rows","RangeError","checkColumnIndex","columns","checkRowVector","vector","to1DArray","length","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","TypeError","rowOut","some","r","Array","isArray","from","columnOut","c","checkRange","startRow","endRow","startColumn","endColumn","arguments","checkNumber","newArray","value","array","i","push","name"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/layout/node_modules/ml-matrix/src/util.js"],"sourcesContent":["/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAClD,IAAIC,GAAG,GAAGD,KAAK,GAAGF,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACI,IAAI,GAAG,CAAC;EAC/C,IAAIH,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGE,GAAG,EAAE;IAC5B,MAAM,IAAIE,UAAU,CAAC,wBAAwB,CAAC;EAChD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACN,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACrD,IAAIC,GAAG,GAAGD,KAAK,GAAGF,MAAM,CAACO,OAAO,GAAGP,MAAM,CAACO,OAAO,GAAG,CAAC;EACrD,IAAIN,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGE,GAAG,EAAE;IAC5B,MAAM,IAAIE,UAAU,CAAC,2BAA2B,CAAC;EACnD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,cAAcA,CAACR,MAAM,EAAES,MAAM,EAAE;EAC7C,IAAIA,MAAM,CAACC,SAAS,EAAE;IACpBD,MAAM,GAAGA,MAAM,CAACC,SAAS,CAAC,CAAC;EAC7B;EACA,IAAID,MAAM,CAACE,MAAM,KAAKX,MAAM,CAACO,OAAO,EAAE;IACpC,MAAM,IAAIF,UAAU,CAClB,uDACF,CAAC;EACH;EACA,OAAOI,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,iBAAiBA,CAACZ,MAAM,EAAES,MAAM,EAAE;EAChD,IAAIA,MAAM,CAACC,SAAS,EAAE;IACpBD,MAAM,GAAGA,MAAM,CAACC,SAAS,CAAC,CAAC;EAC7B;EACA,IAAID,MAAM,CAACE,MAAM,KAAKX,MAAM,CAACI,IAAI,EAAE;IACjC,MAAM,IAAIC,UAAU,CAAC,oDAAoD,CAAC;EAC5E;EACA,OAAOI,MAAM;AACf;AAEA,OAAO,SAASI,YAAYA,CAACb,MAAM,EAAEc,UAAU,EAAEC,aAAa,EAAE;EAC9D,OAAO;IACLC,GAAG,EAAEC,eAAe,CAACjB,MAAM,EAAEc,UAAU,CAAC;IACxCI,MAAM,EAAEC,kBAAkB,CAACnB,MAAM,EAAEe,aAAa;EAClD,CAAC;AACH;AAEA,OAAO,SAASE,eAAeA,CAACjB,MAAM,EAAEc,UAAU,EAAE;EAClD,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,MAAM,IAAIM,SAAS,CAAC,iCAAiC,CAAC;EACxD;EAEA,IAAIC,MAAM,GAAGP,UAAU,CAACQ,IAAI,CAAEC,CAAC,IAAK;IAClC,OAAOA,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAIvB,MAAM,CAACI,IAAI;EAClC,CAAC,CAAC;EAEF,IAAIiB,MAAM,EAAE;IACV,MAAM,IAAIhB,UAAU,CAAC,8BAA8B,CAAC;EACtD;EAEA,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACX,UAAU,CAAC,EAAEA,UAAU,GAAGU,KAAK,CAACE,IAAI,CAACZ,UAAU,CAAC;EAEnE,OAAOA,UAAU;AACnB;AAEA,OAAO,SAASK,kBAAkBA,CAACnB,MAAM,EAAEe,aAAa,EAAE;EACxD,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACrC,MAAM,IAAIK,SAAS,CAAC,oCAAoC,CAAC;EAC3D;EAEA,IAAIO,SAAS,GAAGZ,aAAa,CAACO,IAAI,CAAEM,CAAC,IAAK;IACxC,OAAOA,CAAC,GAAG,CAAC,IAAIA,CAAC,IAAI5B,MAAM,CAACO,OAAO;EACrC,CAAC,CAAC;EAEF,IAAIoB,SAAS,EAAE;IACb,MAAM,IAAItB,UAAU,CAAC,iCAAiC,CAAC;EACzD;EACA,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACV,aAAa,CAAC,EAAEA,aAAa,GAAGS,KAAK,CAACE,IAAI,CAACX,aAAa,CAAC;EAE5E,OAAOA,aAAa;AACtB;AAEA,OAAO,SAASc,UAAUA,CAAC7B,MAAM,EAAE8B,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAE;EAC3E,IAAIC,SAAS,CAACvB,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIN,UAAU,CAAC,sBAAsB,CAAC;EAC9C;EACA8B,WAAW,CAAC,UAAU,EAAEL,QAAQ,CAAC;EACjCK,WAAW,CAAC,QAAQ,EAAEJ,MAAM,CAAC;EAC7BI,WAAW,CAAC,aAAa,EAAEH,WAAW,CAAC;EACvCG,WAAW,CAAC,WAAW,EAAEF,SAAS,CAAC;EACnC,IACEH,QAAQ,GAAGC,MAAM,IACjBC,WAAW,GAAGC,SAAS,IACvBH,QAAQ,GAAG,CAAC,IACZA,QAAQ,IAAI9B,MAAM,CAACI,IAAI,IACvB2B,MAAM,GAAG,CAAC,IACVA,MAAM,IAAI/B,MAAM,CAACI,IAAI,IACrB4B,WAAW,GAAG,CAAC,IACfA,WAAW,IAAIhC,MAAM,CAACO,OAAO,IAC7B0B,SAAS,GAAG,CAAC,IACbA,SAAS,IAAIjC,MAAM,CAACO,OAAO,EAC3B;IACA,MAAM,IAAIF,UAAU,CAAC,oCAAoC,CAAC;EAC5D;AACF;AAEA,OAAO,SAAS+B,QAAQA,CAACzB,MAAM,EAAE0B,KAAK,GAAG,CAAC,EAAE;EAC1C,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,MAAM,EAAE4B,CAAC,EAAE,EAAE;IAC/BD,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC;EACnB;EACA,OAAOC,KAAK;AACd;AAEA,SAASH,WAAWA,CAACM,IAAI,EAAEJ,KAAK,EAAE;EAChC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAIjB,SAAS,CAAE,GAAEqB,IAAK,mBAAkB,CAAC;EACjD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}