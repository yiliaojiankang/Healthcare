{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepAssign } from '../../utils';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { geometry } from './base';\n/**\n * schema 的配置处理\n * @param params\n */\nexport function schema(params) {\n  var options = params.options;\n  var schema = options.schema,\n    xField = options.xField,\n    yField = options.yField,\n    seriesField = options.seriesField,\n    tooltip = options.tooltip,\n    useDeferredLabel = options.useDeferredLabel;\n  var _a = getTooltipMapping(tooltip, [xField, yField, seriesField]),\n    fields = _a.fields,\n    formatter = _a.formatter;\n  return schema ? geometry(deepAssign({}, params, {\n    options: {\n      type: 'schema',\n      colorField: seriesField,\n      tooltipFields: fields,\n      mapping: __assign({\n        tooltip: formatter\n      }, schema),\n      args: {\n        useDeferredLabel: useDeferredLabel\n      }\n    }\n  })) : params;\n}","map":{"version":3,"names":["deepAssign","getTooltipMapping","geometry","schema","params","options","xField","yField","seriesField","tooltip","useDeferredLabel","_a","fields","formatter","type","colorField","tooltipFields","mapping","__assign","args"],"sources":["../../../src/adaptor/geometries/schema.ts"],"sourcesContent":["import { Params } from '../../core/adaptor';\nimport { deepAssign } from '../../utils';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { geometry, GeometryOptions, MappingOptions } from './base';\n\nexport interface SchemaGeometryOptions extends GeometryOptions {\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly seriesField?: string;\n  /** point 图形映射规则 */\n  readonly schema?: MappingOptions;\n}\n\n/**\n * schema 的配置处理\n * @param params\n */\nexport function schema<O extends SchemaGeometryOptions>(params: Params<O>): Params<O> {\n  const { options } = params;\n  const { schema, xField, yField, seriesField, tooltip, useDeferredLabel } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField, seriesField]);\n\n  return schema\n    ? geometry(\n        deepAssign({}, params, {\n          options: {\n            type: 'schema',\n            colorField: seriesField,\n            tooltipFields: fields,\n            mapping: {\n              tooltip: formatter,\n              ...schema,\n            },\n            args: { useDeferredLabel },\n          },\n        })\n      )\n    : params;\n}\n"],"mappings":";AACA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,QAAQ,QAAyC,QAAQ;AAalE;;;;AAIA,OAAM,SAAUC,MAAMA,CAAkCC,MAAiB;EAC/D,IAAAC,OAAO,GAAKD,MAAM,CAAAC,OAAX;EACP,IAAAF,MAAM,GAA6DE,OAAO,CAAAF,MAApE;IAAEG,MAAM,GAAqDD,OAAO,CAAAC,MAA5D;IAAEC,MAAM,GAA6CF,OAAO,CAAAE,MAApD;IAAEC,WAAW,GAAgCH,OAAO,CAAAG,WAAvC;IAAEC,OAAO,GAAuBJ,OAAO,CAAAI,OAA9B;IAAEC,gBAAgB,GAAKL,OAAO,CAAAK,gBAAZ;EAEhE,IAAAC,EAAA,GAAwBV,iBAAiB,CAACQ,OAAO,EAAE,CAACH,MAAM,EAAEC,MAAM,EAAEC,WAAW,CAAC,CAAC;IAA/EI,MAAM,GAAAD,EAAA,CAAAC,MAAA;IAAEC,SAAS,GAAAF,EAAA,CAAAE,SAA8D;EAEvF,OAAOV,MAAM,GACTD,QAAQ,CACNF,UAAU,CAAC,EAAE,EAAEI,MAAM,EAAE;IACrBC,OAAO,EAAE;MACPS,IAAI,EAAE,QAAQ;MACdC,UAAU,EAAEP,WAAW;MACvBQ,aAAa,EAAEJ,MAAM;MACrBK,OAAO,EAAAC,QAAA;QACLT,OAAO,EAAEI;MAAS,GACfV,MAAM,CACV;MACDgB,IAAI,EAAE;QAAET,gBAAgB,EAAAA;MAAA;;GAE3B,CAAC,CACH,GACDN,MAAM;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}