{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { clone, debounce, deepMix } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:mousedown': 'onMouseDown',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      touchstart: 'onTouchStart',\n      touchmove: 'onTouchMove',\n      touchend: 'onDragEnd',\n      afterchangedata: 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n    var type = item.getType();\n    if (type !== 'combo') {\n      return false;\n    }\n    return true;\n  },\n  onTouchStart: function onTouchStart(evt) {\n    if (!evt.item) return;\n    var self = this;\n    try {\n      var touches = evt.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        return;\n      }\n      evt.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target,\n      origin: {\n        x: evt.x,\n        y: evt.y\n      }\n    };\n    this.dragstart = true;\n    self.onDragStart(evt);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    self.onDrag(e);\n  },\n  /**\n   * cache the manipulated item and target, since drag and dragend are global events but not node:*\n   * @param evt event param\n   */\n  onMouseDown: function onMouseDown(evt) {\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target,\n      origin: {\n        x: evt.x,\n        y: evt.y\n      }\n    };\n    // 绑定浏览器监听，触发拖拽结束，结束拖拽时移除\n    if (typeof window !== 'undefined' && !this.windowEventBinded) {\n      this.windowEventBinded = true;\n      document.body.addEventListener('contextmenu', this.onDragEnd.bind(this));\n      document.body.addEventListener('mouseup', this.onDragEnd.bind(this));\n    }\n  },\n  /**\n   * trigger dragstart/drag by mousedown and drag events\n   * @param evt event param\n   */\n  onDragMove: function onDragMove(evt) {\n    var _a, _b;\n    if (((_b = (_a = evt.item) === null || _a === void 0 ? void 0 : _a.getType) === null || _b === void 0 ? void 0 : _b.call(_a)) !== 'node') {\n      this.onDragEnd();\n      return;\n    }\n    if (!this.mousedown) return;\n    if (!this.dragstart) {\n      // dragstart\n      this.dragstart = true;\n      this.onDragStart(evt);\n    } else {\n      // drag\n      this.onDrag(__assign(__assign({}, evt), this.mousedown));\n    }\n  },\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n    this.currentShouldEnd = true;\n    if (!this.shouldBegin(__assign(__assign({}, evt), this.mousedown), this)) {\n      return;\n    }\n    var _a = this.mousedown,\n      item = _a.item,\n      target = _a.target;\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    }\n    // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item);\n    // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n    var graph = this.graph;\n    this.targets = [];\n    // 将节点拖入到指定的 Combo\n    this.targetCombo = null;\n    // 获取所有选中的元素\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id');\n    // 当前拖动的节点是否是选中的节点\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    });\n    // 只拖动当前节点\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n    if (this.graph.get('enabledStack') && this.enableStack) {\n      var beforeDragNodes_1 = [];\n      this.targets.forEach(function (t) {\n        var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        beforeDragNodes_1.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      this.set('beforeDragNodes', beforeDragNodes_1);\n    }\n    this.hidenEdge = {};\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n    this.origin = this.mousedown.origin;\n    this.point = {};\n    this.originPoint = {};\n  },\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n    if (!this.mousedown || !this.origin) return;\n    if (!this.shouldUpdate(evt, this)) return;\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) {\n        this.debounceUpdate({\n          targets: this.targets,\n          graph: this.graph,\n          point: this.point,\n          origin: this.origin,\n          evt: evt,\n          updateEdge: this.get('updateEdge'),\n          onlyChangeComboSize: this.onlyChangeComboSize,\n          updateParentCombos: this.updateParentCombos\n        });\n      } else {\n        var parentComboMap_1 = {};\n        this.targets.map(function (target) {\n          _this.update(target, evt);\n          var parentComboId = target.getModel().comboId;\n          if (parentComboId) parentComboMap_1[parentComboId] = _this.graph.findById(parentComboId);\n        });\n        if (this.onlyChangeComboSize) {\n          // 拖动节点过程中，动态改变 Combo 的大小\n          this.updateParentCombos();\n        }\n      }\n    }\n  },\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n    var _a;\n    this.mousedown = false;\n    this.dragstart = false;\n    // 移除浏览器监听\n    if (typeof window !== 'undefined' && this.windowEventBinded) {\n      this.windowEventBinded = false;\n      document.body.removeEventListener('contextmenu', this.onDragEnd.bind(this));\n      document.body.removeEventListener('mouseup', this.onDragEnd.bind(this));\n    }\n    if (!this.origin) {\n      return;\n    }\n    // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n    this.hidenEdge = {};\n    var graph = this.graph;\n    // 拖动结束后，入栈\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push(model);\n      });\n      this.targets.forEach(function (target) {\n        var _a = target.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        stackData_1.after.nodes.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    }\n    // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd(evt, item, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n    this.targetCombo = item;\n    // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    }\n    // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd(evt, undefined, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      this.updateParentCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd(evt, newParentCombo, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      this.updateParentCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n    // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n    if (!this.targets || this.targets.length === 0) return;\n    // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        onlyChangeComboSize: this.onlyChangeComboSize,\n        updateParentCombos: this.updateParentCombos\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n    var pos = {\n      x: x,\n      y: y\n    };\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n      graph = event.graph,\n      point = event.point,\n      origin = event.origin,\n      evt = event.evt,\n      updateEdge = event.updateEdge,\n      onlyChangeComboSize = event.onlyChangeComboSize,\n      updateParentCombos = event.updateParentCombos;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n    if (onlyChangeComboSize) {\n      updateParentCombos(graph, targets);\n    }\n  }, 50, true),\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} evt 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph;\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n      var _a = this.calculationGroupPosition(evt),\n        cx = _a.x,\n        cy = _a.y,\n        width = _a.width,\n        height = _a.height,\n        minX = _a.minX,\n        minY = _a.minY;\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n      // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity;\n    // 获取已节点的所有最大最小x y值\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n        minY = bbox.minY,\n        maxX = bbox.maxX,\n        maxY = bbox.maxY;\n      if (minX < minx) {\n        minx = minX;\n      }\n      if (minY < miny) {\n        miny = minY;\n      }\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  },\n  /**\n   * updates the parent combos' size and position\n   * @param paramGraph param for debounce function, where 'this' is not available\n   * @param paramTargets param for debounce function, where 'this' is not available\n   */\n  updateParentCombos: function updateParentCombos(paramGraph, paramTargets) {\n    var graph = paramGraph || this.graph;\n    var targets = paramTargets || this.targets;\n    var comboParentMap = {};\n    targets === null || targets === void 0 ? void 0 : targets.forEach(function (target) {\n      var comboId = target.getModel().comboId;\n      if (comboId) comboParentMap[comboId] = graph.findById(comboId);\n    });\n    Object.values(comboParentMap).forEach(function (combo) {\n      if (combo) graph.updateCombo(combo);\n    });\n  }\n};","map":{"version":3,"names":["__assign","clone","debounce","deepMix","Global","getDefaultCfg","updateEdge","delegateStyle","enableDelegate","onlyChangeComboSize","comboActiveState","selectedState","enableOptimize","enableDebounce","enableStack","getEvents","drag","dragend","touchstart","touchmove","touchend","afterchangedata","validationCombo","item","origin","destroyed","type","getType","onTouchStart","evt","self","touches","originalEvent","event1","event2","preventDefault","e","console","warn","mousedown","target","x","y","dragstart","onDragStart","onTouchMove","onDragEnd","onDrag","onMouseDown","window","windowEventBinded","document","body","addEventListener","bind","onDragMove","_a","_b","call","_this","currentShouldEnd","shouldBegin","hasLocked","group","getContainer","set","cachedCaptureItems","push","isAnchorPoint","get","graph","targets","targetCombo","nodes","findAllByState","currentNodeId","dragNodes","filter","node","nodeId","length","forEach","locked","beforeDragNodes_1","t","getModel","id","hidenEdge","edges","getEdges","edge","isVisible","getID","hide","point","originPoint","shouldUpdate","updateDelegate","debounceUpdate","updateParentCombos","parentComboMap_1","map","update","parentComboId","comboId","findById","removeEventListener","delegateRect","remove","show","refresh","stackData_1","before","combos","after","model","pushStack","emit","items","targetItem","onDropCombo","shouldEnd","updatePositions","setItemState","updateCombos","targetComboModel_1","nodeModel","updateComboTree","updateCombo","onDropCanvas","undefined","onDropNode","newParentCombo","combo","onDragEnter","onDragLeave","restore","pos","updateItem","updatePosition","event","parent_1","attrs","calculationGroupPosition","cx","cy","width","height","minX","minY","addShape","name","delegate","clientX","clientY","attr","minx","Infinity","maxx","miny","maxy","i","element","bbox","getBBox","maxX","maxY","Math","floor","ceil","paramGraph","paramTargets","comboParentMap","Object","values"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-pc/es/behavior/drag-node.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { clone, debounce, deepMix } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:mousedown': 'onMouseDown',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      touchstart: 'onTouchStart',\n      touchmove: 'onTouchMove',\n      touchend: 'onDragEnd',\n      afterchangedata: 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n    var type = item.getType();\n    if (type !== 'combo') {\n      return false;\n    }\n    return true;\n  },\n  onTouchStart: function onTouchStart(evt) {\n    if (!evt.item) return;\n    var self = this;\n    try {\n      var touches = evt.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        return;\n      }\n      evt.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target,\n      origin: {\n        x: evt.x,\n        y: evt.y\n      }\n    };\n    this.dragstart = true;\n    self.onDragStart(evt);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n    self.onDrag(e);\n  },\n  /**\n   * cache the manipulated item and target, since drag and dragend are global events but not node:*\n   * @param evt event param\n   */\n  onMouseDown: function onMouseDown(evt) {\n    this.mousedown = {\n      item: evt.item,\n      target: evt.target,\n      origin: {\n        x: evt.x,\n        y: evt.y\n      }\n    };\n    // 绑定浏览器监听，触发拖拽结束，结束拖拽时移除\n    if (typeof window !== 'undefined' && !this.windowEventBinded) {\n      this.windowEventBinded = true;\n      document.body.addEventListener('contextmenu', this.onDragEnd.bind(this));\n      document.body.addEventListener('mouseup', this.onDragEnd.bind(this));\n    }\n  },\n  /**\n   * trigger dragstart/drag by mousedown and drag events\n   * @param evt event param\n   */\n  onDragMove: function onDragMove(evt) {\n    var _a, _b;\n    if (((_b = (_a = evt.item) === null || _a === void 0 ? void 0 : _a.getType) === null || _b === void 0 ? void 0 : _b.call(_a)) !== 'node') {\n      this.onDragEnd();\n      return;\n    }\n    if (!this.mousedown) return;\n    if (!this.dragstart) {\n      // dragstart\n      this.dragstart = true;\n      this.onDragStart(evt);\n    } else {\n      // drag\n      this.onDrag(__assign(__assign({}, evt), this.mousedown));\n    }\n  },\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n    this.currentShouldEnd = true;\n    if (!this.shouldBegin(__assign(__assign({}, evt), this.mousedown), this)) {\n      return;\n    }\n    var _a = this.mousedown,\n      item = _a.item,\n      target = _a.target;\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    }\n    // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item);\n    // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n    var graph = this.graph;\n    this.targets = [];\n    // 将节点拖入到指定的 Combo\n    this.targetCombo = null;\n    // 获取所有选中的元素\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id');\n    // 当前拖动的节点是否是选中的节点\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    });\n    // 只拖动当前节点\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n    if (this.graph.get('enabledStack') && this.enableStack) {\n      var beforeDragNodes_1 = [];\n      this.targets.forEach(function (t) {\n        var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        beforeDragNodes_1.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      this.set('beforeDragNodes', beforeDragNodes_1);\n    }\n    this.hidenEdge = {};\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n    this.origin = this.mousedown.origin;\n    this.point = {};\n    this.originPoint = {};\n  },\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n    if (!this.mousedown || !this.origin) return;\n    if (!this.shouldUpdate(evt, this)) return;\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) {\n        this.debounceUpdate({\n          targets: this.targets,\n          graph: this.graph,\n          point: this.point,\n          origin: this.origin,\n          evt: evt,\n          updateEdge: this.get('updateEdge'),\n          onlyChangeComboSize: this.onlyChangeComboSize,\n          updateParentCombos: this.updateParentCombos\n        });\n      } else {\n        var parentComboMap_1 = {};\n        this.targets.map(function (target) {\n          _this.update(target, evt);\n          var parentComboId = target.getModel().comboId;\n          if (parentComboId) parentComboMap_1[parentComboId] = _this.graph.findById(parentComboId);\n        });\n        if (this.onlyChangeComboSize) {\n          // 拖动节点过程中，动态改变 Combo 的大小\n          this.updateParentCombos();\n        }\n      }\n    }\n  },\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n    var _a;\n    this.mousedown = false;\n    this.dragstart = false;\n    // 移除浏览器监听\n    if (typeof window !== 'undefined' && this.windowEventBinded) {\n      this.windowEventBinded = false;\n      document.body.removeEventListener('contextmenu', this.onDragEnd.bind(this));\n      document.body.removeEventListener('mouseup', this.onDragEnd.bind(this));\n    }\n    if (!this.origin) {\n      return;\n    }\n    // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n    this.hidenEdge = {};\n    var graph = this.graph;\n    // 拖动结束后，入栈\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push(model);\n      });\n      this.targets.forEach(function (target) {\n        var _a = target.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n        stackData_1.after.nodes.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    }\n    // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd(evt, item, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n    this.targetCombo = item;\n    // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    }\n    // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd(evt, undefined, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      this.updateParentCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd(evt, newParentCombo, this);\n    // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    if (this.onlyChangeComboSize) {\n      this.updateParentCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n    // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n    if (!this.targets || this.targets.length === 0) return;\n    // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        onlyChangeComboSize: this.onlyChangeComboSize,\n        updateParentCombos: this.updateParentCombos\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n    var pos = {\n      x: x,\n      y: y\n    };\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n      graph = event.graph,\n      point = event.point,\n      origin = event.origin,\n      evt = event.evt,\n      updateEdge = event.updateEdge,\n      onlyChangeComboSize = event.onlyChangeComboSize,\n      updateParentCombos = event.updateParentCombos;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n    if (onlyChangeComboSize) {\n      updateParentCombos(graph, targets);\n    }\n  }, 50, true),\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} evt 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph;\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n      var _a = this.calculationGroupPosition(evt),\n        cx = _a.x,\n        cy = _a.y,\n        width = _a.width,\n        height = _a.height,\n        minX = _a.minX,\n        minY = _a.minY;\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n      // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity;\n    // 获取已节点的所有最大最小x y值\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n        minY = bbox.minY,\n        maxX = bbox.maxX,\n        maxY = bbox.maxY;\n      if (minX < minx) {\n        minx = minX;\n      }\n      if (minY < miny) {\n        miny = minY;\n      }\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  },\n  /**\n   * updates the parent combos' size and position\n   * @param paramGraph param for debounce function, where 'this' is not available\n   * @param paramTargets param for debounce function, where 'this' is not available\n   */\n  updateParentCombos: function updateParentCombos(paramGraph, paramTargets) {\n    var graph = paramGraph || this.graph;\n    var targets = paramTargets || this.targets;\n    var comboParentMap = {};\n    targets === null || targets === void 0 ? void 0 : targets.forEach(function (target) {\n      var comboId = target.getModel().comboId;\n      if (comboId) comboParentMap[comboId] = graph.findById(comboId);\n    });\n    Object.values(comboParentMap).forEach(function (combo) {\n      if (combo) graph.updateCombo(combo);\n    });\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}