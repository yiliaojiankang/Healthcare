{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n/** 描边柱状图 */\nregisterShape('interval', 'hollow-rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false);\n    var group = container;\n    var backgroundCfg = cfg === null || cfg === void 0 ? void 0 : cfg.background;\n    if (backgroundCfg) {\n      group = container.addGroup();\n      var backgroundStyle = getBackgroundRectStyle(cfg);\n      var backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points), this.coordinate);\n      group.addShape('path', {\n        attrs: __assign(__assign({}, backgroundStyle), {\n          path: backgroundPath\n        }),\n        capture: false,\n        zIndex: -1,\n        name: BACKGROUND_SHAPE\n      });\n    }\n    var path = this.parsePath(getRectPath(cfg.points));\n    var shape = group.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return backgroundCfg ? group : shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n      isInPolar = markerCfg.isInPolar;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null\n      }\n    };\n  }\n});","map":{"version":3,"names":["registerShape","BACKGROUND_SHAPE","getBackgroundRectStyle","getStyle","getBackgroundRectPath","getRectPath","draw","cfg","container","style","group","backgroundCfg","background","addGroup","backgroundStyle","backgroundPath","parsePoints","points","coordinate","addShape","attrs","__assign","path","capture","zIndex","name","parsePath","shape","getMarker","markerCfg","color","isInPolar","symbol","r","stroke","fill"],"sources":["../../../../src/geometry/shape/interval/hollow-rect.ts"],"sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n\n/** 描边柱状图 */\nregisterShape('interval', 'hollow-rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false);\n    let group = container;\n    const backgroundCfg = cfg?.background;\n    if (backgroundCfg) {\n      group = container.addGroup();\n      const backgroundStyle = getBackgroundRectStyle(cfg);\n      const backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points) as Point[], this.coordinate);\n      group.addShape('path', {\n        attrs: {\n          ...backgroundStyle,\n          path: backgroundPath,\n        },\n        capture: false,\n        zIndex: -1,\n        name: BACKGROUND_SHAPE,\n      });\n    }\n\n    const path = this.parsePath(getRectPath(cfg.points as Point[]));\n    const shape = group.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return backgroundCfg ? group : shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null,\n      },\n    };\n  },\n});\n"],"mappings":";AAGA,SAASA,aAAa,QAAQ,SAAS;AACvC,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,sBAAsB,EAAEC,QAAQ,QAAQ,mBAAmB;AACpE,SAASC,qBAAqB,EAAEC,WAAW,QAAQ,QAAQ;AAE3D;AACAL,aAAa,CAAC,UAAU,EAAE,aAAa,EAAE;EACvCM,IAAI,EAAJ,SAAAA,CAAKC,GAAc,EAAEC,SAAiB;IACpC,IAAMC,KAAK,GAAGN,QAAQ,CAACI,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;IACxC,IAAIG,KAAK,GAAGF,SAAS;IACrB,IAAMG,aAAa,GAAGJ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEK,UAAU;IACrC,IAAID,aAAa,EAAE;MACjBD,KAAK,GAAGF,SAAS,CAACK,QAAQ,EAAE;MAC5B,IAAMC,eAAe,GAAGZ,sBAAsB,CAACK,GAAG,CAAC;MACnD,IAAMQ,cAAc,GAAGX,qBAAqB,CAACG,GAAG,EAAE,IAAI,CAACS,WAAW,CAACT,GAAG,CAACU,MAAM,CAAY,EAAE,IAAI,CAACC,UAAU,CAAC;MAC3GR,KAAK,CAACS,QAAQ,CAAC,MAAM,EAAE;QACrBC,KAAK,EAAAC,QAAA,CAAAA,QAAA,KACAP,eAAe;UAClBQ,IAAI,EAAEP;QAAc,EACrB;QACDQ,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE,CAAC,CAAC;QACVC,IAAI,EAAExB;OACP,CAAC;;IAGJ,IAAMqB,IAAI,GAAG,IAAI,CAACI,SAAS,CAACrB,WAAW,CAACE,GAAG,CAACU,MAAiB,CAAC,CAAC;IAC/D,IAAMU,KAAK,GAAGjB,KAAK,CAACS,QAAQ,CAAC,MAAM,EAAE;MACnCC,KAAK,EAAAC,QAAA,CAAAA,QAAA,KACAZ,KAAK;QACRa,IAAI,EAAAA;MAAA,EACL;MACDG,IAAI,EAAE;KACP,CAAC;IAEF,OAAOd,aAAa,GAAGD,KAAK,GAAGiB,KAAK;EACtC,CAAC;EACDC,SAAS,EAAT,SAAAA,CAAUC,SAAyB;IACzB,IAAAC,KAAK,GAAgBD,SAAS,CAAAC,KAAzB;MAAEC,SAAS,GAAKF,SAAS,CAAAE,SAAd;IACxB,IAAIA,SAAS,EAAE;MACb,OAAO;QACLC,MAAM,EAAE,QAAQ;QAChBvB,KAAK,EAAE;UACLwB,CAAC,EAAE,GAAG;UACNC,MAAM,EAAEJ,KAAK;UACbK,IAAI,EAAE;;OAET;;IAGH,OAAO;MACLH,MAAM,EAAE,QAAQ;MAChBvB,KAAK,EAAE;QACLwB,CAAC,EAAE,CAAC;QACJC,MAAM,EAAEJ,KAAK;QACbK,IAAI,EAAE;;KAET;EACH;CACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}