{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __extends, __read, __rest, __spreadArray } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, mix, remove, set, size, uniqueId, isEqual, isPlainObject, reduce } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n/**\n * G2 视图 View 类\n */\nvar View = /** @class */function (_super) {\n  __extends(View, _super);\n  function View(props) {\n    var _this = _super.call(this, {\n      visible: props.visible\n    }) || this;\n    /** 所有的子 view。 */\n    _this.views = [];\n    /** 所有的 geometry 实例。 */\n    _this.geometries = [];\n    /** 所有的组件 controllers。 */\n    _this.controllers = [];\n    /** 所有的 Interaction 实例。 */\n    _this.interactions = {};\n    /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n    _this.limitInPlot = false;\n    // 配置信息存储\n    _this.options = {\n      data: [],\n      animate: true // 默认开启动画\n    }; // 初始化为空\n    /** 配置开启的组件插件，默认为全局配置的组件。 */\n    _this.usedControllers = getComponentControllerNames();\n    /** 所有的 scales */\n    _this.scalePool = new ScalePool();\n    /** 布局函数 */\n    _this.layoutFunc = defaultLayout;\n    /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n    _this.isPreMouseInPlot = false;\n    /** 默认标识位，用于判定数据是否更新 */\n    _this.isDataChanged = false;\n    /** 用于判断坐标系范围是否发生变化的标志位 */\n    _this.isCoordinateChanged = false;\n    /** 从当前这个 view 创建的 scale key */\n    _this.createdScaleKeys = new Map();\n    _this.onCanvasEvent = function (evt) {\n      var name = evt.name;\n      if (!name.includes(':')) {\n        // 非委托事件\n        var e = _this.createViewEvent(evt);\n        // 处理 plot 事件\n        _this.doPlotEvent(e);\n        _this.emit(name, e);\n      }\n    };\n    /**\n     * 触发事件之后\n     * @param evt\n     */\n    _this.onDelegateEvents = function (evt) {\n      // 阻止继续冒泡，防止重复事件触发\n      // evt.preventDefault();\n      var name = evt.name;\n      if (!name.includes(':')) {\n        return;\n      }\n      // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n      var e = _this.createViewEvent(evt);\n      // 包含有基本事件、组合事件\n      _this.emit(name, e);\n      // const currentTarget = evt.currentTarget as IShape;\n      // const inheritNames = currentTarget.get('inheritNames');\n      // if (evt.delegateObject || inheritNames) {\n      //   const events = this.getEvents();\n      //   each(inheritNames, (subName) => {\n      //     const eventName = `${subName}:${type}`;\n      //     if (events[eventName]) {\n      //       this.emit(eventName, e);\n      //     }\n      //   });\n      // }\n    };\n\n    var _a = props.id,\n      id = _a === void 0 ? uniqueId('view') : _a,\n      parent = props.parent,\n      canvas = props.canvas,\n      backgroundGroup = props.backgroundGroup,\n      middleGroup = props.middleGroup,\n      foregroundGroup = props.foregroundGroup,\n      _b = props.region,\n      region = _b === void 0 ? {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: 1,\n          y: 1\n        }\n      } : _b,\n      padding = props.padding,\n      appendPadding = props.appendPadding,\n      theme = props.theme,\n      options = props.options,\n      limitInPlot = props.limitInPlot,\n      syncViewPadding = props.syncViewPadding;\n    _this.parent = parent;\n    _this.canvas = canvas;\n    _this.backgroundGroup = backgroundGroup;\n    _this.middleGroup = middleGroup;\n    _this.foregroundGroup = foregroundGroup;\n    _this.region = region;\n    _this.padding = padding;\n    _this.appendPadding = appendPadding;\n    // 接受父 view 传入的参数\n    _this.options = __assign(__assign({}, _this.options), options);\n    _this.limitInPlot = limitInPlot;\n    _this.id = id;\n    _this.syncViewPadding = syncViewPadding;\n    // 初始化 theme\n    _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n    _this.init();\n    return _this;\n  }\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n  View.prototype.setLayout = function (layout) {\n    this.layoutFunc = layout;\n  };\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n  View.prototype.init = function () {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox();\n    // 事件委托机制\n    this.initEvents();\n    // 初始化组件 controller\n    this.initComponentController();\n    this.initOptions();\n  };\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   * @param params render 事件参数\n   */\n  View.prototype.render = function (isUpdate, payload) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload));\n    // 递归渲染\n    this.paint(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n  View.prototype.clear = function () {\n    var _this = this;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n    // 1. 清空缓存和计算数据\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    this.isCoordinateChanged = false; // 复位\n    // 2. 清空 geometries\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      geometries[i].clear();\n      // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n      geometries[i].container.remove(true);\n      geometries[i].labelsContainer.remove(true);\n    }\n    this.geometries = [];\n    // 3. 清空 controllers\n    var controllers = this.controllers;\n    for (var i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        controllers[i].clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    }\n    // 4. 删除 scale 缓存\n    this.createdScaleKeys.forEach(function (v, k) {\n      _this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear();\n    // 递归处理子 view\n    var views = this.views;\n    for (var i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  };\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n  View.prototype.destroy = function () {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    var interactions = this.interactions;\n    // 销毁 interactions\n    each(interactions, function (interaction) {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n    this.clear();\n    // 销毁 controller 中的组件\n    var controllers = this.controllers;\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.destroy();\n    }\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n    _super.prototype.destroy.call(this);\n  };\n  /* end 生命周期函数 */\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n  View.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n    var geometries = this.geometries;\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n    var controllers = this.controllers;\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible);\n    // group.set('visible', visible) 不会触发自动刷新\n    this.getCanvas().draw();\n    return this;\n  };\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n  View.prototype.data = function (data) {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n  View.prototype.source = function (data) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  };\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n  View.prototype.filter = function (field, condition) {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    }\n    // condition 为空，则表示删除过滤条件\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n    return this;\n  };\n  View.prototype.axis = function (field, axisOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n    return this;\n  };\n  View.prototype.legend = function (field, legendOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n      if (isPlainObject(legendOption) && (legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected)) {\n        set(this.options, ['filters', field], function (name) {\n          var _a;\n          return (_a = legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected[name]) !== null && _a !== void 0 ? _a : true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n    return this;\n  };\n  View.prototype.scale = function (field, scaleOption) {\n    var _this = this;\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, function (v, k) {\n        set(_this.options, ['scales', k], v);\n      });\n    }\n    return this;\n  };\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n  View.prototype.tooltip = function (cfg) {\n    set(this.options, 'tooltip', cfg);\n    return this;\n  };\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n  View.prototype.annotation = function () {\n    return this.getController('annotation');\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n  View.prototype.guide = function () {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  };\n  View.prototype.coordinate = function (type, coordinateCfg) {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', {\n        type: type,\n        cfg: coordinateCfg\n      });\n    } else {\n      set(this.options, 'coordinate', type);\n    }\n    // 更新 coordinate 配置\n    this.coordinateController.update(this.options.coordinate);\n    return this.coordinateController;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n  View.prototype.coord = function (type, coordinateCfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n    // @ts-ignore\n    return this.coordinate(type, coordinateCfg);\n  };\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n  View.prototype.facet = function (type, cfg) {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    }\n    // 创建新的分面\n    var Ctor = getFacet(type);\n    if (!Ctor) {\n      throw new Error(\"facet '\".concat(type, \"' is not exist!\"));\n    }\n    this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), {\n      type: type\n    }));\n    return this;\n  };\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n  View.prototype.animate = function (status) {\n    set(this.options, 'animate', status);\n    return this;\n  };\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n  View.prototype.updateOptions = function (options) {\n    this.clear(); // 清空\n    mix(this.options, options);\n    // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n    this.views.forEach(function (view) {\n      return view.destroy();\n    });\n    this.views = [];\n    this.initOptions();\n    // 初始化坐标系大小，保证 padding 计算正确\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  };\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n  View.prototype.option = function (name, opt) {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(\"Can't use built in variable name \\\"\".concat(name, \"\\\", please change another one.\"));\n    }\n    // 存入到 option 中\n    set(this.options, name, opt);\n    return this;\n  };\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n  View.prototype.theme = function (theme) {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n    return this;\n  };\n  /* end 一系列传入配置的 API */\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n  View.prototype.interaction = function (name, cfg) {\n    var existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n    }\n    // 新建交互实例\n    var interaction = createInteraction(name, this, cfg);\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n    return this;\n  };\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n  View.prototype.removeInteraction = function (name) {\n    var existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  };\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n  View.prototype.changeData = function (data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 1. 保存数据\n    this.data(data);\n    // 2. 渲染\n    this.paint(true);\n    // 3. 遍历子 view 进行 change data\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    }\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /* View 管理相关的 API */\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n  View.prototype.createView = function (cfg) {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    }\n    // 子 view 共享 options 配置数据\n    var sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible\n    };\n    var v = new View(__assign(__assign({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: this.middleGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: this.foregroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      theme: this.themeObject,\n      padding: this.padding\n    }, cfg), {\n      options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {}))\n    }));\n    this.views.push(v);\n    return v;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n  View.prototype.view = function (cfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  };\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n  View.prototype.removeView = function (view) {\n    var removedView = remove(this.views, function (v) {\n      return v === view;\n    })[0];\n    if (removedView) {\n      removedView.destroy();\n    }\n    return removedView;\n  };\n  /* end View 管理相关的 API */\n  // 一些 get 方法\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n  View.prototype.getCoordinate = function () {\n    return this.coordinateInstance;\n  };\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n  View.prototype.getTheme = function () {\n    return this.themeObject;\n  };\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n  View.prototype.getXScale = function () {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    var g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  };\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n  View.prototype.getYScales = function () {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    var tmpMap = {};\n    var yScales = [];\n    this.geometries.forEach(function (g) {\n      var yScale = g.getYScale();\n      var field = yScale.field;\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        yScales.push(yScale);\n      }\n    });\n    return yScales;\n  };\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n  View.prototype.getScalesByDim = function (dimType) {\n    var geometries = this.geometries;\n    var scales = {};\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n    return scales;\n  };\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n  View.prototype.getScale = function (field, key) {\n    var defaultKey = key ? key : this.getScaleKey(field);\n    // 调用根节点 view 的方法获取\n    return this.getRootView().scalePool.getScale(defaultKey);\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Please use `getScale`.\n   */\n  View.prototype.getScaleByField = function (field, key) {\n    return this.getScale(field, key);\n  };\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n  View.prototype.getOptions = function () {\n    return this.options;\n  };\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n  View.prototype.getData = function () {\n    return this.filteredData;\n  };\n  /**\n   * 获取原始数据\n   * @returns 传入 G2 的原始数据\n   */\n  View.prototype.getOriginalData = function () {\n    return this.options.data;\n  };\n  /**\n   * 获取布局后的边距 padding\n   * @returns\n   */\n  View.prototype.getPadding = function () {\n    return this.autoPadding.getPadding();\n  };\n  /**\n   * 获取当前 view 有的 geometries\n   * @returns\n   */\n  View.prototype.getGeometries = function () {\n    return this.geometries;\n  };\n  /**\n   * 获取 view 中的所有 geome\n   */\n  View.prototype.getElements = function () {\n    return reduce(this.geometries, function (elements, geometry) {\n      return elements.concat(geometry.getElements());\n    }, []);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  View.prototype.getElementsBy = function (condition) {\n    return this.getElements().filter(function (el) {\n      return condition(el);\n    });\n  };\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n  View.prototype.getLayer = function (layer) {\n    return layer === LAYER.BG ? this.backgroundGroup : layer === LAYER.MID ? this.middleGroup : layer === LAYER.FORE ? this.foregroundGroup : this.foregroundGroup;\n  };\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n  View.prototype.isPointInPlot = function (point) {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  };\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n  View.prototype.getLegendAttributes = function () {\n    return flatten(this.geometries.map(function (g) {\n      return g.getGroupAttributes();\n    }));\n  };\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n  View.prototype.getGroupScales = function () {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    var scales = this.geometries.map(function (g) {\n      return g.getGroupScales();\n    });\n    return uniq(flatten(scales));\n  };\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n  View.prototype.getCanvas = function () {\n    return this.getRootView().canvas;\n  };\n  /**\n   * 获得根节点 view。\n   */\n  View.prototype.getRootView = function () {\n    var v = this;\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n      break;\n    }\n    return v;\n  };\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n  View.prototype.getXY = function (data) {\n    var coordinate = this.getCoordinate();\n    var xScales = this.getScalesByDim('x');\n    var yScales = this.getScalesByDim('y');\n    var x;\n    var y;\n    each(data, function (value, key) {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({\n        x: x,\n        y: y\n      });\n    }\n  };\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n  View.prototype.getController = function (name) {\n    return find(this.controllers, function (c) {\n      return c.name === name;\n    });\n  };\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n  View.prototype.showTooltip = function (point) {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n    return this;\n  };\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n  View.prototype.hideTooltip = function () {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n  View.prototype.lockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n  View.prototype.unlockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n    return this;\n  };\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n  View.prototype.isTooltipLocked = function () {\n    var tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  };\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n  View.prototype.getTooltipItems = function (point) {\n    var tooltip = this.getController('tooltip');\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  };\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n  View.prototype.getSnapRecords = function (point) {\n    var geometries = this.geometries;\n    var rst = [];\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geom = geometries[i];\n      var dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      var record = void 0;\n      for (var j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        var data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n        if (record) {\n          rst.push(record);\n        }\n      }\n    }\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      var snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n    return rst;\n  };\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n  View.prototype.getComponents = function () {\n    var components = [];\n    var controllers = this.controllers;\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n    return components;\n  };\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n  View.prototype.filterData = function (data) {\n    var filters = this.options.filters;\n    // 不存在 filters，则不需要进行数据过滤\n    if (size(filters) === 0) {\n      return data;\n    }\n    // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n    return filter(data, function (datum, idx) {\n      // 所有的 filter 字段\n      var fields = Object.keys(filters);\n      // 所有的条件都通过，才算通过\n      return fields.every(function (field) {\n        var condition = filters[field];\n        // condition 返回 true，则保留\n        return condition(datum[field], datum, idx);\n      });\n    });\n  };\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n  View.prototype.filterFieldData = function (field, data) {\n    var filters = this.options.filters;\n    var condition = get(filters, field);\n    if (isUndefined(condition)) {\n      return data;\n    }\n    return data.filter(function (datum, idx) {\n      return condition(datum[field], datum, idx);\n    });\n  };\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n  View.prototype.adjustCoordinate = function () {\n    var _a = this.getCoordinate(),\n      curStart = _a.start,\n      curEnd = _a.end;\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false;\n      // 如果大小没有变化则不更新\n      return;\n    }\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  };\n  View.prototype.paint = function (isUpdate) {\n    this.renderDataRecursive(isUpdate);\n    // 处理 sync scale 的逻辑\n    this.syncScale();\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n    // 初始化图形、组件位置，计算 padding\n    this.renderPaddingRecursive(isUpdate);\n    // 布局图形、组件\n    this.renderLayoutRecursive(isUpdate);\n    // 背景色 shape\n    this.renderBackgroundStyleShape();\n    // 最终的绘制 render\n    this.renderPaintRecursive(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n    this.isDataChanged = false; // 渲染完毕复位\n  };\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n  View.prototype.renderBackgroundStyleShape = function () {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n    var background = get(this.themeObject, 'background');\n    // 配置了背景色\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false\n        });\n        this.backgroundStyleRectShape.toBack();\n      }\n      // 2. 有了 shape 之后设置背景，位置（更新的时候）\n      var _a = this.viewBBox,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  };\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  View.prototype.renderPaddingRecursive = function (isUpdate) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox();\n    // 2. 更新 coordinate\n    this.adjustCoordinate();\n    // 3. 初始化组件 component\n    this.initComponents(isUpdate);\n    // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n    // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate();\n    // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n    var tooltipController = this.controllers.find(function (c) {\n      return c.name === 'tooltip';\n    });\n    tooltipController.update();\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  };\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  View.prototype.renderLayoutRecursive = function (isUpdate) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    var syncViewPaddingFn = this.syncViewPadding === true ? defaultSyncViewPadding : isFunction(this.syncViewPadding) ? this.syncViewPadding : undefined;\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal);\n      // 同步 padding 之后，更新 coordinate\n      this.views.forEach(function (v) {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    }\n    // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n    this.doLayout();\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  };\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n  View.prototype.renderPaintRecursive = function (isUpdate) {\n    var middleGroup = this.middleGroup;\n    if (this.limitInPlot) {\n      var _a = getCoordinateClipCfg(this.coordinateInstance),\n        type = _a.type,\n        attrs = _a.attrs;\n      middleGroup.setClip({\n        type: type,\n        attrs: attrs\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    }\n    // 1. 渲染几何标记\n    this.paintGeometries(isUpdate);\n    // 2. 绘制组件\n    this.renderComponents(isUpdate);\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  };\n  // end Get 方法\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  View.prototype.createScale = function (field, data, scaleDef, key) {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    var currentScaleDef = get(this.options.scales, [field]);\n    var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef);\n    // 2. 是否存在父 view，在则递归，否则创建\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    }\n    // 3. 在根节点 view 通过 scalePool 创建\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  };\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n  View.prototype.renderDataRecursive = function (isUpdate) {\n    // 1. 处理数据\n    this.doFilterData();\n    // 2. 创建实例\n    this.createCoordinate();\n    // 3. 初始化 Geometry\n    this.initGeometries(isUpdate);\n    // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n    this.renderFacet(isUpdate);\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  };\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n  View.prototype.calculateViewBBox = function () {\n    var x;\n    var y;\n    var width;\n    var height;\n    if (this.parent) {\n      var bbox = this.parent.coordinateBBox;\n      // 存在 parent， 那么就是通过父容器大小计算\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n    var _a = this.region,\n      start = _a.start,\n      end = _a.end;\n    // 根据 region 计算当前 view 的 bbox 大小。\n    var viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n    }\n    // 初始的 coordinate bbox 大小\n    this.coordinateBBox = this.viewBBox;\n  };\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n  View.prototype.initEvents = function () {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n    this.canvas.on('*', this.onCanvasEvent);\n  };\n  /**\n   * 初始化插件\n   */\n  View.prototype.initComponentController = function () {\n    var usedControllers = this.usedControllers;\n    for (var i = 0, len = usedControllers.length; i < len; i++) {\n      var controllerName = usedControllers[i];\n      var Ctor = getComponentController(controllerName);\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  };\n  View.prototype.createViewEvent = function (evt) {\n    var shape = evt.shape,\n      name = evt.name;\n    var data = shape ? shape.get('origin') : null;\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    var e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  };\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n  View.prototype.doPlotEvent = function (e) {\n    var type = e.type,\n      x = e.x,\n      y = e.y;\n    var point = {\n      x: x,\n      y: y\n    };\n    var ALL_EVENTS = ['mousedown', 'mouseup', 'mousemove', 'mouseleave', 'mousewheel', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'click', 'dblclick', 'contextmenu'];\n    if (ALL_EVENTS.includes(type)) {\n      var currentInPlot = this.isPointInPlot(point);\n      var newEvent = e.clone();\n      if (currentInPlot) {\n        var TYPE = \"plot:\".concat(type); // 组合 plot 事件\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      }\n      // 对于 mouseenter, mouseleave 的计算处理\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        }\n        // 赋新的状态值\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  };\n  // view 生命周期 —— 渲染流程\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n  View.prototype.doFilterData = function () {\n    var data = this.options.data;\n    this.filteredData = this.filterData(data);\n  };\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n  View.prototype.initGeometries = function (isUpdate) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales();\n    // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n    var coordinate = this.getCoordinate();\n    var scaleDefs = get(this.options, 'scales', {});\n    var geometries = this.geometries;\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      // 保持 scales 引用不要变化\n      geometry.scales = this.getGeometryScales();\n      var cfg = {\n        coordinate: coordinate,\n        scaleDefs: scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged\n      };\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }\n    // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n    this.adjustScales();\n  };\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n  View.prototype.createOrUpdateScales = function () {\n    var fields = this.getScaleFields();\n    var groupedFields = this.getGroupedFields();\n    var _a = this.getOptions(),\n      data = _a.data,\n      _b = _a.scales,\n      scales = _b === void 0 ? {} : _b;\n    var filteredData = this.filteredData;\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var field = fields[i];\n      var scaleDef = scales[field];\n      // 调用方法，递归去创建\n      var key = this.getScaleKey(field);\n      this.createScale(field,\n      // 分组字段的 scale 使用未过滤的数据创建\n      groupedFields.includes(field) ? data : filteredData, scaleDef, key);\n      // 缓存从当前 view 创建的 scale key\n      this.createdScaleKeys.set(key, true);\n    }\n  };\n  /**\n   * 处理 scale 同步逻辑\n   */\n  View.prototype.syncScale = function () {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  };\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n  View.prototype.getGeometryScales = function () {\n    var fields = this.getScaleFields();\n    var scales = {};\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n    return scales;\n  };\n  View.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n    return fields;\n  };\n  View.prototype.getGroupedFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n    return fields;\n  };\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n  View.prototype.adjustScales = function () {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  };\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n  View.prototype.adjustCategoryScaleRange = function () {\n    var _this = this;\n    var xyScales = __spreadArray([this.getXScale()], __read(this.getYScales()), false).filter(function (e) {\n      return !!e;\n    });\n    var coordinate = this.getCoordinate();\n    var scaleOptions = this.options.scales;\n    each(xyScales, function (scale) {\n      var field = scale.field,\n        values = scale.values,\n        isCategory = scale.isCategory,\n        isIdentity = scale.isIdentity;\n      // 分类或者 identity 的 scale 才进行处理\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, _this.theme);\n        }\n      }\n    });\n  };\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n  View.prototype.initComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    var controllers = this.controllers;\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i];\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  };\n  View.prototype.doLayout = function () {\n    this.layoutFunc(this);\n  };\n  /**\n   * 创建坐标系\n   * @private\n   */\n  View.prototype.createCoordinate = function () {\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  };\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n  View.prototype.paintGeometries = function (isUpdate) {\n    var doAnimation = this.options.animate;\n    // geometry 的 paint 阶段\n    var coordinate = this.getCoordinate();\n    var canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height\n    };\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n      geometry.paint(isUpdate);\n    }\n  };\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n  View.prototype.renderComponents = function (isUpdate) {\n    var components = this.getComponents();\n    // 先全部清空，然后 render\n    for (var i = 0; i < components.length; i++) {\n      var co = components[i];\n      co.component.render();\n    }\n  };\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n  View.prototype.renderFacet = function (isUpdate) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear();\n        // 计算分面数据\n        this.facetInstance.init();\n        // 渲染组件和 views\n        this.facetInstance.render();\n      }\n    }\n  };\n  View.prototype.initOptions = function () {\n    var _this = this;\n    var _a = this.options,\n      _b = _a.geometries,\n      geometries = _b === void 0 ? [] : _b,\n      _c = _a.interactions,\n      interactions = _c === void 0 ? [] : _c,\n      _d = _a.views,\n      views = _d === void 0 ? [] : _d,\n      _e = _a.annotations,\n      annotations = _e === void 0 ? [] : _e,\n      coordinate = _a.coordinate,\n      events = _a.events,\n      facets = _a.facets;\n    // 设置坐标系\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    }\n    // 创建 geometry 实例\n    for (var i = 0; i < geometries.length; i++) {\n      var geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    }\n    // 创建 interactions 实例\n    for (var j = 0; j < interactions.length; j++) {\n      var interactionOption = interactions[j];\n      var type = interactionOption.type,\n        cfg = interactionOption.cfg;\n      this.interaction(type, cfg);\n    }\n    // 创建 view 实例\n    for (var k = 0; k < views.length; k++) {\n      var viewOption = views[k];\n      this.createView(viewOption);\n    }\n    // 设置 annotation\n    var annotationComponent = this.getController('annotation');\n    for (var l = 0; l < annotations.length; l++) {\n      var annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    }\n    // 设置 events\n    if (events) {\n      each(events, function (eventCallback, eventName) {\n        _this.on(eventName, eventCallback);\n      });\n    }\n    if (facets) {\n      each(facets, function (facet) {\n        var type = facet.type,\n          rest = __rest(facet, [\"type\"]);\n        _this.facet(type, rest);\n      });\n    }\n  };\n  View.prototype.createGeometry = function (geometryOption) {\n    var type = geometryOption.type,\n      _a = geometryOption.cfg,\n      cfg = _a === void 0 ? {} : _a;\n    if (this[type]) {\n      var geometry_1 = this[type](cfg);\n      each(geometryOption, function (v, k) {\n        if (isFunction(geometry_1[k])) {\n          geometry_1[k](v);\n        }\n      });\n    }\n  };\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n  View.prototype.getScaleKey = function (field) {\n    return \"\".concat(this.id, \"-\").concat(field);\n  };\n  return View;\n}(Base);\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name, Ctor) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    var props = __assign({\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup()\n    }, cfg);\n    var geometry = new Ctor(props);\n    this.geometries.push(geometry);\n    return geometry;\n  };\n}\nexport default View;","map":{"version":3,"names":["clone","deepMix","each","filter","find","flatten","get","isBoolean","isFunction","isNil","isObject","isString","isUndefined","mix","remove","set","size","uniqueId","isEqual","isPlainObject","reduce","GROUP_Z_INDEX","LAYER","PLOT_EVENTS","VIEW_LIFE_CIRCLE","Base","getFacet","createInteraction","getTheme","BBox","getCoordinateClipCfg","isPointInCoordinate","uniq","findDataByPoint","parsePadding","getDefaultCategoryScaleRange","createTheme","getComponentController","getComponentControllerNames","CoordinateController","Event","defaultLayout","ScalePool","PaddingCal","calculatePadding","defaultSyncViewPadding","View","_super","__extends","props","_this","call","visible","views","geometries","controllers","interactions","limitInPlot","options","data","animate","usedControllers","scalePool","layoutFunc","isPreMouseInPlot","isDataChanged","isCoordinateChanged","createdScaleKeys","Map","onCanvasEvent","evt","name","includes","e","createViewEvent","doPlotEvent","emit","onDelegateEvents","_a","id","parent","canvas","backgroundGroup","middleGroup","foregroundGroup","_b","region","start","x","y","end","padding","appendPadding","theme","syncViewPadding","__assign","themeObject","init","prototype","setLayout","layout","calculateViewBBox","initEvents","initComponentController","initOptions","render","isUpdate","payload","BEFORE_RENDER","fromData","paint","AFTER_RENDER","changeVisible","clear","BEFORE_CLEAR","filteredData","coordinateInstance","undefined","i","length","container","labelsContainer","forEach","v","k","getRootView","deleteScale","AFTER_CLEAR","destroy","BEFORE_DESTROY","interaction","len","controller","geometry","getCanvas","draw","source","console","warn","field","condition","filters","axis","axisOption","legend","legendOption","selected","scale","scaleOption","tooltip","cfg","annotation","getController","guide","coordinate","type","coordinateCfg","coordinateController","update","coord","facet","facetInstance","Ctor","Error","concat","status","updateOptions","view","coordinateBBox","viewBBox","option","opt","existInteraction","removeInteraction","changeData","BEFORE_CHANGE_DATA","AFTER_CHANGE_DATA","createView","sharedOptions","scales","axes","getOption","legends","addGroup","zIndex","BG","MID","FORE","push","removeView","removedView","getCoordinate","getXScale","g","getYScales","tmpMap","yScales","yScale","getYScale","getScalesByDim","dimType","getScale","key","defaultKey","getScaleKey","getScaleByField","getOptions","getData","getOriginalData","getPadding","autoPadding","getGeometries","getElements","elements","getElementsBy","el","getLayer","layer","isPointInPlot","point","getLegendAttributes","map","getGroupAttributes","getGroupScales","getXY","xScales","value","convert","c","showTooltip","hideTooltip","lockTooltip","unlockTooltip","isTooltipLocked","getTooltipItems","getSnapRecords","rst","geom","dataArray","sort","record","j","dataLen","snapRecords","getComponents","components","filterData","datum","idx","fields","Object","keys","every","filterFieldData","adjustCoordinate","curStart","curEnd","bl","tr","adjust","renderDataRecursive","syncScale","BEFORE_PAINT","renderPaddingRecursive","renderLayoutRecursive","renderBackgroundStyleShape","renderPaintRecursive","AFTER_PAINT","background","backgroundStyleRectShape","addShape","attrs","capture","toBack","width","height","attr","fill","initComponents","shrink","tooltipController","syncViewPaddingFn","doLayout","setClip","paintGeometries","renderComponents","createScale","scaleDef","currentScaleDef","mergedScaleDef","doFilterData","createCoordinate","initGeometries","renderFacet","bbox","on","controllerName","shape","ALL_EVENTS","currentInPlot","newEvent","TYPE","MOUSE_LEAVE","LEAVE","MOUSE_ENTER","ENTER","createOrUpdateScales","scaleDefs","getGeometryScales","adjustScales","getScaleFields","groupedFields","getGroupedFields","sync","geometryScales","groupFields","getGroupFields","adjustCategoryScaleRange","xyScales","__spreadArray","__read","scaleOptions","values","isCategory","isIdentity","range","create","doAnimation","canvasRegion","minX","minY","maxX","maxY","co","component","_c","_d","_e","annotations","events","facets","geometryOption","createGeometry","interactionOption","viewOption","annotationComponent","l","annotationOption","eventCallback","eventName","rest","__rest","geometry_1","registerGeometry","toLowerCase"],"sources":["../../src/chart/view.ts"],"sourcesContent":["import {\n  clone,\n  deepMix,\n  each,\n  filter,\n  find,\n  flatten,\n  get,\n  isBoolean,\n  isFunction,\n  isNil,\n  isObject,\n  isString,\n  isUndefined,\n  mix,\n  remove,\n  set,\n  size,\n  uniqueId,\n  isEqual,\n  isPlainObject,\n  reduce,\n} from '@antv/util';\nimport { Attribute, Coordinate, Event as GEvent, GroupComponent, ICanvas, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AxisOption,\n  ComponentOption,\n  CoordinateCfg,\n  CoordinateOption,\n  Data,\n  Datum,\n  FacetCfgMap,\n  FilterCondition,\n  GeometryOption,\n  LegendOption,\n  LooseObject,\n  Options,\n  Point,\n  Region,\n  ScaleOption,\n  TooltipOption,\n  ViewCfg,\n  ViewPadding,\n  ViewAppendPadding,\n  EventPayload,\n  Padding,\n} from '../interface';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { Facet, getFacet } from '../facet';\nimport Geometry from '../geometry/base';\nimport Element from '../geometry/element';\nimport { createInteraction, Interaction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport Chart from './chart';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport Annotation from './controller/annotation';\nimport { Controller } from './controller/base';\nimport CoordinateController from './controller/coordinate';\nimport Tooltip from './controller/tooltip';\nimport Slider from './controller/slider';\nimport Scrollbar from './controller/scrollbar';\nimport Axis from './controller/axis';\nimport Gesture from './controller/gesture';\nimport Legend from './controller/legend';\nimport Event from './event';\nimport defaultLayout, { Layout } from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n\n/**\n * G2 视图 View 类\n */\nexport class View extends Base {\n  /** view id，全局唯一。 */\n  public id: string;\n  /** 父级 view，如果没有父级，则为空。 */\n  public parent: View;\n  /** 所有的子 view。 */\n  public views: View[] = [];\n  /** 所有的 geometry 实例。 */\n  public geometries: Geometry[] = [];\n  /** 所有的组件 controllers。 */\n  public controllers: Controller[] = [];\n  /** 所有的 Interaction 实例。 */\n  public interactions: Record<string, Interaction> = {};\n\n  /** view 区域空间。 */\n  public viewBBox: BBox;\n  /** 坐标系的位置大小，ViewBBox - padding = coordinateBBox。 */\n  public coordinateBBox: BBox;\n  /** view 的 padding 大小，传入的配置（不是解析之后的值）。 */\n  public padding: ViewPadding;\n  /** padding的基础上增加的调整值 */\n  public appendPadding: ViewAppendPadding;\n  /** G.Canvas 实例。 */\n  public canvas: ICanvas;\n  /** 存储最终计算的 padding 结果 */\n  public autoPadding: PaddingCal;\n\n  /** 三层 Group 图形中的背景层。 */\n  public backgroundGroup: IGroup;\n  /** 三层 Group 图形中的中间层。 */\n  public middleGroup: IGroup;\n  /** 三层 Group 图形中的前景层。 */\n  public foregroundGroup: IGroup;\n  /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n  public limitInPlot: boolean = false;\n\n  /**\n   * 标记 view 的大小位置范围，均是 0 ~ 1 范围，便于开发者使用，起始点为左上角。\n   */\n  protected region: Region;\n  /** 主题配置，存储当前主题配置。 */\n  protected themeObject: LooseObject;\n\n  // 配置信息存储\n  protected options: Options = {\n    data: [],\n    animate: true, // 默认开启动画\n  }; // 初始化为空\n\n  /** 过滤之后的数据 */\n  protected filteredData: Data;\n\n  /** 配置开启的组件插件，默认为全局配置的组件。 */\n  private usedControllers: string[] = getComponentControllerNames();\n\n  /** 所有的 scales */\n  private scalePool: ScalePool = new ScalePool();\n\n  /** 布局函数 */\n  protected layoutFunc: Layout = defaultLayout;\n  /** 生成的坐标系实例，{@link https://github.com/antvis/coord/blob/master/src/coord/base.ts|Coordinate} */\n  protected coordinateInstance: Coordinate;\n  /** Coordinate 相关的控制器类，负责坐标系实例的创建、更新、变换等 */\n  protected coordinateController: CoordinateController;\n  /** 分面类实例 */\n  protected facetInstance: Facet;\n\n  /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n  private isPreMouseInPlot: boolean = false;\n  /** 默认标识位，用于判定数据是否更新 */\n  private isDataChanged: boolean = false;\n  /** 用于判断坐标系范围是否发生变化的标志位 */\n  private isCoordinateChanged: boolean = false;\n  /** 从当前这个 view 创建的 scale key */\n  private createdScaleKeys = new Map<string, boolean>();\n  /** 背景色样式的 shape */\n  private backgroundStyleRectShape;\n  /** 是否同步子 view 的 padding */\n  private syncViewPadding;\n\n  constructor(props: ViewCfg) {\n    super({ visible: props.visible });\n\n    const {\n      id = uniqueId('view'),\n      parent,\n      canvas,\n      backgroundGroup,\n      middleGroup,\n      foregroundGroup,\n      region = { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } },\n      padding,\n      appendPadding,\n      theme,\n      options,\n      limitInPlot,\n      syncViewPadding,\n    } = props;\n\n    this.parent = parent;\n    this.canvas = canvas;\n    this.backgroundGroup = backgroundGroup;\n    this.middleGroup = middleGroup;\n    this.foregroundGroup = foregroundGroup;\n    this.region = region;\n    this.padding = padding;\n    this.appendPadding = appendPadding;\n    // 接受父 view 传入的参数\n    this.options = { ...this.options, ...options };\n    this.limitInPlot = limitInPlot;\n    this.id = id;\n    this.syncViewPadding = syncViewPadding;\n\n    // 初始化 theme\n    this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n    this.init();\n  }\n\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n  public setLayout(layout: Layout) {\n    this.layoutFunc = layout;\n  }\n\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n  public init() {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox();\n\n    // 事件委托机制\n    this.initEvents();\n\n    // 初始化组件 controller\n    this.initComponentController();\n\n    this.initOptions();\n  }\n\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   * @param params render 事件参数\n   */\n  public render(isUpdate: boolean = false, payload?: EventPayload) {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload));\n    // 递归渲染\n    this.paint(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n  public clear() {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n    // 1. 清空缓存和计算数据\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    this.isCoordinateChanged = false; // 复位\n\n    // 2. 清空 geometries\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      geometries[i].clear();\n      // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n      geometries[i].container.remove(true);\n      geometries[i].labelsContainer.remove(true);\n    }\n    this.geometries = [];\n\n    // 3. 清空 controllers\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        (controllers[i] as Annotation).clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    }\n\n    // 4. 删除 scale 缓存\n    this.createdScaleKeys.forEach((v: boolean, k: string) => {\n      this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear();\n\n    // 递归处理子 view\n    const views = this.views;\n    for (let i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  }\n\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n  public destroy() {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    const interactions = this.interactions;\n    // 销毁 interactions\n    each(interactions, (interaction) => {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n\n    this.clear();\n\n    // 销毁 controller 中的组件\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.destroy();\n    }\n\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    super.destroy();\n  }\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n  public changeVisible(visible: boolean): View {\n    super.changeVisible(visible);\n\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible);\n\n    // group.set('visible', visible) 不会触发自动刷新\n    this.getCanvas().draw();\n\n    return this;\n  }\n\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n  public data(data: Data): View {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n  public source(data: Data): View {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  }\n\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n  public filter(field: string, condition: FilterCondition | null): View {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    }\n    // condition 为空，则表示删除过滤条件\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  }\n\n  /**\n   * 开启或者关闭坐标轴。\n   *\n   * ```ts\n   *  view.axis(false); // 不展示坐标轴\n   * ```\n   * @param field 坐标轴开关\n   */\n  public axis(field: boolean): View;\n  /**\n   * 对特定的某条坐标轴进行配置。\n   *\n   * @example\n   * ```ts\n   * view.axis('city', false); // 不展示 'city' 字段对应的坐标轴\n   *\n   * // 将 'city' 字段对应的坐标轴的标题隐藏\n   * view.axis('city', {\n   *   title: null,\n   * });\n   * ```\n   *\n   * @param field 要配置的坐标轴对应的字段名称\n   * @param axisOption 坐标轴具体配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   */\n  public axis(field: string, axisOption: AxisOption): View;\n  public axis(field: string | boolean, axisOption?: AxisOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  }\n\n  /**\n   * 对图例进行整体配置。\n   *\n   * ```ts\n   * view.legend(false); // 关闭图例\n   *\n   * view.legend({\n   *   position: 'right',\n   * }); // 图例进行整体配置\n   * ```\n   * @param field\n   * @returns View\n   */\n  public legend(field: LegendOption): View;\n  /**\n   * 对特定的图例进行配置。\n   *\n   * @example\n   * ```ts\n   * view.legend('city', false); // 关闭某个图例，通过数据字段名进行关联\n   *\n   * // 对特定的图例进行配置\n   * view.legend('city', {\n   *   position: 'right',\n   * });\n   * ```\n   *\n   * @param field 图例对应的数据字段名称\n   * @param legendOption 图例配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   * @returns View\n   */\n  public legend(field: string, legendOption: LegendOption): View;\n  public legend(field: string | LegendOption, legendOption?: LegendOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n      if (isPlainObject(legendOption) && legendOption?.selected) {\n        set(this.options, ['filters', field], (name: string) => {\n          return legendOption?.selected[name] ?? true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  }\n\n  /**\n   * 批量设置 scale 配置。\n   *\n   * ```ts\n   * view.scale({\n   *   sale: {\n   *     min: 0,\n   *     max: 100,\n   *   }\n   * });\n   * ```\n   * Scale 的详细配置项可以参考：https://github.com/antvis/scale#api\n   * @returns View\n   */\n  public scale(field: Record<string, ScaleOption>): View;\n  /**\n   * 为特性的数据字段进行 scale 配置。\n   *\n   * ```ts\n   * view.scale('sale', {\n   *   min: 0,\n   *   max: 100,\n   * });\n   * ```\n   *\n   * @returns View\n   */\n  public scale(field: string, scaleOption: ScaleOption): View;\n  public scale(field: string | Record<string, ScaleOption>, scaleOption?: ScaleOption): View {\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, (v: ScaleOption, k: string) => {\n        set(this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n  public tooltip(cfg: boolean | TooltipOption): View {\n    set(this.options, 'tooltip', cfg);\n\n    return this;\n  }\n\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n  public annotation(): Annotation {\n    return this.getController('annotation');\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n  public guide(): Annotation {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  }\n\n  /**\n   * 坐标系配置。\n   *\n   * @example\n   * ```ts\n   * view.coordinate({\n   *   type: 'polar',\n   *   cfg: {\n   *     radius: 0.85,\n   *   },\n   *   actions: [\n   *     [ 'transpose' ],\n   *   ],\n   * });\n   * ```\n   *\n   * @param option\n   * @returns\n   */\n  public coordinate(option?: CoordinateOption): CoordinateController;\n  /**\n   * 声明坐标系类型，并进行配置。\n   *\n   * ```ts\n   * // 直角坐标系，并进行转置变换\n   * view.coordinate('rect').transpose();\n   *\n   * // 默认创建直角坐标系\n   * view.coordinate();\n   * ```\n   *\n   * @param type 坐标系类型\n   * @param [coordinateCfg] 坐标系配置\n   * @returns\n   */\n  public coordinate(type: string, coordinateCfg?: CoordinateCfg): CoordinateController;\n  public coordinate(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', { type, cfg: coordinateCfg } as CoordinateOption);\n    } else {\n      set(this.options, 'coordinate', type);\n    }\n\n    // 更新 coordinate 配置\n    this.coordinateController.update(this.options.coordinate);\n\n    return this.coordinateController;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n  public coord(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n    // @ts-ignore\n    return this.coordinate(type, coordinateCfg);\n  }\n\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n  public facet<T extends keyof FacetCfgMap>(type: T, cfg: FacetCfgMap[T]): View {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    }\n\n    // 创建新的分面\n    const Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(`facet '${type}' is not exist!`);\n    }\n\n    this.facetInstance = new Ctor(this, { ...cfg, type });\n\n    return this;\n  }\n\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n  public animate(status: boolean): View {\n    set(this.options, 'animate', status);\n    return this;\n  }\n\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n  public updateOptions(options: Options) {\n    this.clear(); // 清空\n    mix(this.options, options);\n\n    // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n    this.views.forEach((view) => view.destroy());\n    this.views = [];\n\n    this.initOptions();\n    // 初始化坐标系大小，保证 padding 计算正确\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  }\n\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n  public option(name: string, opt: any): View {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(`Can't use built in variable name \"${name}\", please change another one.`);\n    }\n\n    // 存入到 option 中\n    set(this.options, name, opt);\n    return this;\n  }\n\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n  public theme(theme: string | LooseObject): View {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n\n    return this;\n  }\n\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n  public interaction(name: string, cfg?: LooseObject): View {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n    }\n\n    // 新建交互实例\n    const interaction = createInteraction(name, this, cfg);\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n    return this;\n  }\n\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n  public removeInteraction(name: string) {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  }\n\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n  public changeData(data: Data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 1. 保存数据\n    this.data(data);\n\n    // 2. 渲染\n    this.paint(true);\n\n    // 3. 遍历子 view 进行 change data\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  }\n\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n  public createView(cfg?: Partial<ViewCfg>): View {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    }\n\n    // 子 view 共享 options 配置数据\n    const sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible,\n    };\n\n    const v = new View({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: this.middleGroup.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: this.foregroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      theme: this.themeObject,\n      padding: this.padding,\n      ...cfg,\n      options: {\n        ...sharedOptions,\n        ...get(cfg, 'options', {}),\n      },\n    });\n\n    this.views.push(v);\n\n    return v;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n  public view(cfg?: Partial<ViewCfg>) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  }\n\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n  public removeView(view: View): View {\n    const removedView = remove(this.views, (v: View) => v === view)[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  }\n  /* end View 管理相关的 API */\n\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n  public getCoordinate() {\n    return this.coordinateInstance;\n  }\n\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n  public getTheme(): LooseObject {\n    return this.themeObject;\n  }\n\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n  public getXScale(): Scale {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    const g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  }\n\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n  public getYScales(): Scale[] {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    const tmpMap = {};\n    const yScales = [];\n    this.geometries.forEach((g: Geometry) => {\n      const yScale = g.getYScale();\n      const field = yScale.field;\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        yScales.push(yScale);\n      }\n    });\n    return yScales;\n  }\n\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n  public getScalesByDim(dimType: 'x' | 'y'): Record<string, Scale> {\n    const geometries = this.geometries;\n    const scales = {};\n\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      const scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  }\n\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n  public getScale(field: string, key?: string): Scale {\n    const defaultKey = key ? key : this.getScaleKey(field);\n    // 调用根节点 view 的方法获取\n    return this.getRootView().scalePool.getScale(defaultKey);\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Please use `getScale`.\n   */\n  public getScaleByField(field: string, key?: string): Scale {\n    return this.getScale(field, key);\n  }\n\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n  public getOptions(): Options {\n    return this.options;\n  }\n\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n  public getData() {\n    return this.filteredData;\n  }\n\n  /**\n   * 获取原始数据\n   * @returns 传入 G2 的原始数据\n   */\n  public getOriginalData() {\n    return this.options.data;\n  }\n\n  /**\n   * 获取布局后的边距 padding\n   * @returns\n   */\n  public getPadding(): Padding {\n    return this.autoPadding.getPadding();\n  }\n\n  /**\n   * 获取当前 view 有的 geometries\n   * @returns\n   */\n  public getGeometries() {\n    return this.geometries;\n  }\n\n  /**\n   * 获取 view 中的所有 geome\n   */\n  public getElements(): Element[] {\n    return reduce(\n      this.geometries,\n      (elements: Element[], geometry: Geometry) => {\n        return elements.concat(geometry.getElements());\n      },\n      []\n    );\n  }\n\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  public getElementsBy(condition: (element: Element) => boolean): Element[] {\n    return this.getElements().filter((el) => condition(el));\n  }\n\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n  public getLayer(layer: LAYER): IGroup {\n    return layer === LAYER.BG\n      ? this.backgroundGroup\n      : layer === LAYER.MID\n      ? this.middleGroup\n      : layer === LAYER.FORE\n      ? this.foregroundGroup\n      : this.foregroundGroup;\n  }\n\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n  public isPointInPlot(point: Point): boolean {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  }\n\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n  public getLegendAttributes(): Attribute[] {\n    return flatten(this.geometries.map((g: Geometry) => g.getGroupAttributes())) as unknown as Attribute[];\n  }\n\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n  public getGroupScales(): Scale[] {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    const scales = this.geometries.map((g: Geometry) => g.getGroupScales());\n    return uniq(flatten(scales));\n  }\n\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n  public getCanvas(): ICanvas {\n    return (this.getRootView() as unknown as Chart).canvas;\n  }\n\n  /**\n   * 获得根节点 view。\n   */\n  public getRootView(): View {\n    let v = this as View;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n      break;\n    }\n    return v;\n  }\n\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n  public getXY(data: Datum): Point {\n    const coordinate = this.getCoordinate();\n    const xScales = this.getScalesByDim('x');\n    const yScales = this.getScalesByDim('y');\n    let x;\n    let y;\n\n    each(data, (value, key) => {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({ x, y });\n    }\n  }\n\n  public getController(name: 'tooltip'): Tooltip;\n  public getController(name: 'axis'): Axis;\n  public getController(name: 'legend'): Legend;\n  public getController(name: 'scrollbar'): Scrollbar;\n  public getController(name: 'slider'): Slider;\n  public getController(name: 'annotation'): Annotation;\n  public getController(name: 'gestucre'): Gesture;\n  public getController(name: string): Controller;\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n  public getController(name: string): Controller {\n    return find(this.controllers, (c: Controller) => c.name === name);\n  }\n\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n  public showTooltip(point: Point): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n    return this;\n  }\n\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n  public hideTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n  public lockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n  public unlockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n  public isTooltipLocked() {\n    const tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  }\n\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n  public getTooltipItems(point: Point) {\n    const tooltip = this.getController('tooltip');\n\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  }\n\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n  public getSnapRecords(point: Point) {\n    const geometries = this.geometries;\n    let rst = [];\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geom = geometries[i];\n      const dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      let record;\n      for (let j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        const data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n        if (record) {\n          rst.push(record);\n        }\n      }\n    }\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      const snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n\n    return rst;\n  }\n\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n  public getComponents(): ComponentOption[] {\n    let components = [];\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n\n    return components;\n  }\n\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n  public filterData(data: Data): Data {\n    const { filters } = this.options;\n    // 不存在 filters，则不需要进行数据过滤\n    if (size(filters) === 0) {\n      return data;\n    }\n\n    // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n    return filter(data, (datum: Datum, idx: number) => {\n      // 所有的 filter 字段\n      const fields = Object.keys(filters);\n\n      // 所有的条件都通过，才算通过\n      return fields.every((field: string) => {\n        const condition = filters[field];\n\n        // condition 返回 true，则保留\n        return condition(datum[field], datum, idx);\n      });\n    });\n  }\n\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n  public filterFieldData(field: string, data: Data): Data {\n    const { filters } = this.options;\n    const condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n    return data.filter((datum: Datum, idx: number) => condition(datum[field], datum, idx));\n  }\n\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n  public adjustCoordinate() {\n    const { start: curStart, end: curEnd } = this.getCoordinate();\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n\n    // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false;\n      // 如果大小没有变化则不更新\n      return;\n    }\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  }\n\n  protected paint(isUpdate: boolean) {\n    this.renderDataRecursive(isUpdate);\n\n    // 处理 sync scale 的逻辑\n    this.syncScale();\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n\n    // 初始化图形、组件位置，计算 padding\n    this.renderPaddingRecursive(isUpdate);\n    // 布局图形、组件\n    this.renderLayoutRecursive(isUpdate);\n    // 背景色 shape\n    this.renderBackgroundStyleShape();\n    // 最终的绘制 render\n    this.renderPaintRecursive(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n\n    this.isDataChanged = false; // 渲染完毕复位\n  }\n\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n  private renderBackgroundStyleShape() {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n    const background = get(this.themeObject, 'background');\n    // 配置了背景色\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false,\n        });\n        this.backgroundStyleRectShape.toBack();\n      }\n\n      // 2. 有了 shape 之后设置背景，位置（更新的时候）\n      const { x, y, width, height } = this.viewBBox;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x,\n        y,\n        width,\n        height,\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  }\n\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderPaddingRecursive(isUpdate: boolean) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox();\n    // 2. 更新 coordinate\n    this.adjustCoordinate();\n    // 3. 初始化组件 component\n    this.initComponents(isUpdate);\n    // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n    // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate();\n\n    // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n    const tooltipController = this.controllers.find((c) => c.name === 'tooltip');\n    tooltipController.update();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderLayoutRecursive(isUpdate: boolean) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    const syncViewPaddingFn =\n      this.syncViewPadding === true\n        ? defaultSyncViewPadding\n        : isFunction(this.syncViewPadding)\n        ? this.syncViewPadding\n        : undefined;\n\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal);\n      // 同步 padding 之后，更新 coordinate\n      this.views.forEach((v: View) => {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    }\n\n    // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n    this.doLayout();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n  protected renderPaintRecursive(isUpdate: boolean) {\n    const middleGroup = this.middleGroup;\n    if (this.limitInPlot) {\n      const { type, attrs } = getCoordinateClipCfg(this.coordinateInstance);\n      middleGroup.setClip({\n        type,\n        attrs,\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    }\n\n    // 1. 渲染几何标记\n    this.paintGeometries(isUpdate);\n    // 2. 绘制组件\n    this.renderComponents(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  }\n\n  // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  protected createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    const currentScaleDef = get(this.options.scales, [field]);\n    const mergedScaleDef = { ...currentScaleDef, ...scaleDef };\n\n    // 2. 是否存在父 view，在则递归，否则创建\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    }\n\n    // 3. 在根节点 view 通过 scalePool 创建\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  }\n\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n  private renderDataRecursive(isUpdate: boolean) {\n    // 1. 处理数据\n    this.doFilterData();\n    // 2. 创建实例\n    this.createCoordinate();\n    // 3. 初始化 Geometry\n    this.initGeometries(isUpdate);\n    // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n    this.renderFacet(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n  private calculateViewBBox() {\n    let x;\n    let y;\n    let width;\n    let height;\n\n    if (this.parent) {\n      const bbox = this.parent.coordinateBBox;\n      // 存在 parent， 那么就是通过父容器大小计算\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    const { start, end } = this.region;\n\n    // 根据 region 计算当前 view 的 bbox 大小。\n    const viewBBox = new BBox(\n      x + width * start.x,\n      y + height * start.y,\n      width * (end.x - start.x),\n      height * (end.y - start.y)\n    );\n\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(\n        x + width * start.x,\n        y + height * start.y,\n        width * (end.x - start.x),\n        height * (end.y - start.y)\n      );\n    }\n\n    // 初始的 coordinate bbox 大小\n    this.coordinateBBox = this.viewBBox;\n  }\n\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n  private initEvents() {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n\n    this.canvas.on('*', this.onCanvasEvent);\n  }\n\n  private onCanvasEvent = (evt: GEvent): void => {\n    const name = evt.name;\n    if (!name.includes(':')) {\n      // 非委托事件\n      const e = this.createViewEvent(evt);\n      // 处理 plot 事件\n      this.doPlotEvent(e);\n      this.emit(name, e);\n    }\n  };\n\n  /**\n   * 初始化插件\n   */\n  private initComponentController() {\n    const usedControllers = this.usedControllers;\n    for (let i = 0, len = usedControllers.length; i < len; i++) {\n      const controllerName = usedControllers[i];\n      const Ctor = getComponentController(controllerName);\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  }\n\n  private createViewEvent(evt: GEvent) {\n    const { shape, name } = evt;\n\n    const data = shape ? shape.get('origin') : null;\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  }\n  /**\n   * 触发事件之后\n   * @param evt\n   */\n  private onDelegateEvents = (evt: GEvent): void => {\n    // 阻止继续冒泡，防止重复事件触发\n    // evt.preventDefault();\n    const { name } = evt;\n    if (!name.includes(':')) {\n      return;\n    }\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = this.createViewEvent(evt);\n\n    // 包含有基本事件、组合事件\n    this.emit(name, e);\n    // const currentTarget = evt.currentTarget as IShape;\n    // const inheritNames = currentTarget.get('inheritNames');\n    // if (evt.delegateObject || inheritNames) {\n    //   const events = this.getEvents();\n    //   each(inheritNames, (subName) => {\n    //     const eventName = `${subName}:${type}`;\n    //     if (events[eventName]) {\n    //       this.emit(eventName, e);\n    //     }\n    //   });\n    // }\n  };\n\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n  private doPlotEvent(e: Event) {\n    const { type, x, y } = e;\n\n    const point = { x, y };\n\n    const ALL_EVENTS = [\n      'mousedown',\n      'mouseup',\n      'mousemove',\n      'mouseleave',\n      'mousewheel',\n      'touchstart',\n      'touchmove',\n      'touchend',\n      'touchcancel',\n      'click',\n      'dblclick',\n      'contextmenu',\n    ];\n\n    if (ALL_EVENTS.includes(type)) {\n      const currentInPlot = this.isPointInPlot(point);\n      const newEvent = e.clone();\n\n      if (currentInPlot) {\n        const TYPE = `plot:${type}`; // 组合 plot 事件\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      }\n\n      // 对于 mouseenter, mouseleave 的计算处理\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        }\n        // 赋新的状态值\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }\n\n  // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n  private doFilterData() {\n    const { data } = this.options;\n    this.filteredData = this.filterData(data);\n  }\n\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n  private initGeometries(isUpdate: boolean) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales();\n    // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n    const coordinate = this.getCoordinate();\n    const scaleDefs = get(this.options, 'scales', {});\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      // 保持 scales 引用不要变化\n      geometry.scales = this.getGeometryScales();\n      const cfg = {\n        coordinate, // 使用 coordinate 引用，可以保持 coordinate 的同步更新\n        scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged,\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }\n\n    // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n    this.adjustScales();\n  }\n\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n  private createOrUpdateScales() {\n    const fields = this.getScaleFields();\n    const groupedFields = this.getGroupedFields();\n\n    const { data, scales = {} } = this.getOptions();\n    const filteredData = this.filteredData;\n\n    for (let i = 0, len = fields.length; i < len; i++) {\n      const field = fields[i];\n      const scaleDef = scales[field];\n\n      // 调用方法，递归去创建\n      const key = this.getScaleKey(field);\n      this.createScale(\n        field,\n        // 分组字段的 scale 使用未过滤的数据创建\n        groupedFields.includes(field) ? data : filteredData,\n        scaleDef,\n        key\n      );\n\n      // 缓存从当前 view 创建的 scale key\n      this.createdScaleKeys.set(key, true);\n    }\n  }\n\n  /**\n   * 处理 scale 同步逻辑\n   */\n  private syncScale() {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  }\n\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n  private getGeometryScales(): Record<string, Scale> {\n    const fields = this.getScaleFields();\n\n    const scales = {};\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n\n    return scales;\n  }\n\n  private getScaleFields() {\n    const fields = [];\n    const tmpMap = new Map();\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  private getGroupedFields() {\n    const fields = [];\n    const tmpMap = new Map();\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n  private adjustScales() {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  }\n\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n  private adjustCategoryScaleRange() {\n    const xyScales = [this.getXScale(), ...this.getYScales()].filter((e) => !!e);\n    const coordinate = this.getCoordinate();\n    const scaleOptions = this.options.scales;\n\n    each(xyScales, (scale: Scale) => {\n      const { field, values, isCategory, isIdentity } = scale;\n\n      // 分类或者 identity 的 scale 才进行处理\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, this.theme);\n        }\n      }\n    });\n  }\n\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n  private initComponents(isUpdate: boolean) {\n    // 先全部清空，然后 render\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      const controller = controllers[i];\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  }\n\n  private doLayout() {\n    this.layoutFunc(this);\n  }\n\n  /**\n   * 创建坐标系\n   * @private\n   */\n  private createCoordinate() {\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  }\n\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n  private paintGeometries(isUpdate: boolean) {\n    const doAnimation = this.options.animate;\n    // geometry 的 paint 阶段\n    const coordinate = this.getCoordinate();\n    const canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height,\n    };\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n      geometry.paint(isUpdate);\n    }\n  }\n\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n  private renderComponents(isUpdate: boolean) {\n    const components = this.getComponents();\n    // 先全部清空，然后 render\n    for (let i = 0; i < components.length; i++) {\n      const co = components[i];\n      (co.component as GroupComponent).render();\n    }\n  }\n\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n  private renderFacet(isUpdate: boolean) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear();\n        // 计算分面数据\n        this.facetInstance.init();\n        // 渲染组件和 views\n        this.facetInstance.render();\n      }\n    }\n  }\n\n  private initOptions() {\n    const {\n      geometries = [],\n      interactions = [],\n      views = [],\n      annotations = [],\n      coordinate,\n      events,\n      facets,\n    } = this.options;\n\n    // 设置坐标系\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    }\n\n    // 创建 geometry 实例\n    for (let i = 0; i < geometries.length; i++) {\n      const geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    }\n\n    // 创建 interactions 实例\n    for (let j = 0; j < interactions.length; j++) {\n      const interactionOption = interactions[j];\n      const { type, cfg } = interactionOption;\n      this.interaction(type, cfg);\n    }\n\n    // 创建 view 实例\n    for (let k = 0; k < views.length; k++) {\n      const viewOption = views[k];\n      this.createView(viewOption);\n    }\n\n    // 设置 annotation\n    const annotationComponent = this.getController('annotation');\n    for (let l = 0; l < annotations.length; l++) {\n      const annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    }\n\n    // 设置 events\n    if (events) {\n      each(events, (eventCallback, eventName) => {\n        this.on(eventName, eventCallback);\n      });\n    }\n\n    if (facets) {\n      each(facets, (facet) => {\n        const { type, ...rest } = facet;\n\n        this.facet(type, rest);\n      });\n    }\n  }\n\n  private createGeometry(geometryOption: GeometryOption) {\n    const { type, cfg = {} } = geometryOption;\n    if (this[type]) {\n      const geometry = this[type](cfg);\n      each(geometryOption, (v, k) => {\n        if (isFunction(geometry[k])) {\n          geometry[k](v);\n        }\n      });\n    }\n  }\n\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n  private getScaleKey(field: string): string {\n    return `${this.id}-${field}`;\n  }\n}\n\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name: string, Ctor: any) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg: any = {}) {\n    const props = {\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup(),\n      ...cfg,\n    };\n\n    const geometry = new Ctor(props);\n    this.geometries.push(geometry);\n\n    return geometry;\n  };\n}\n\nexport default View;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}