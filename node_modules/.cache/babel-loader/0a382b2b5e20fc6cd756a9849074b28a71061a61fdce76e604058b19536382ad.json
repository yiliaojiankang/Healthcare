{"ast":null,"code":"import { clamp, get, size, uniq } from '@antv/util';\nimport { PERCENT, RANGE_TYPE, RANGE_VALUE } from './constants';\n/**\n * 将 range 生成为 data 数据\n * @param range\n * @param key\n * @returns {GaugeRangeData}\n */\nexport function processRangeData(range, percent) {\n  return range\n  // 映射为 stack 的数据\n  .map(function (r, idx) {\n    var _a;\n    return _a = {}, _a[RANGE_VALUE] = r - (range[idx - 1] || 0), _a[RANGE_TYPE] = \"\".concat(idx), _a[PERCENT] = percent, _a;\n  });\n}\n/**\n * 获取 仪表盘 指针数据\n * @param percent\n */\nexport function getIndicatorData(percent) {\n  var _a;\n  return [(_a = {}, _a[PERCENT] = clamp(percent, 0, 1), _a)];\n}\n/**\n * 获取仪表盘 表盘弧形数据\n * @param percent\n * @param range\n */\nexport function getRangeData(percent, range) {\n  var ticks = get(range, ['ticks'], []);\n  var clampTicks = size(ticks) ? uniq(ticks) : [0, clamp(percent, 0, 1), 1];\n  if (!clampTicks[0]) {\n    clampTicks.shift();\n  }\n  return processRangeData(clampTicks, percent);\n}","map":{"version":3,"names":["clamp","get","size","uniq","PERCENT","RANGE_TYPE","RANGE_VALUE","processRangeData","range","percent","map","r","idx","_a","concat","getIndicatorData","getRangeData","ticks","clampTicks","shift"],"sources":["../../../src/plots/gauge/utils.ts"],"sourcesContent":["import { clamp, get, size, uniq } from '@antv/util';\nimport { Data } from '../../types';\nimport { PERCENT, RANGE_TYPE, RANGE_VALUE } from './constants';\nimport { GaugeOptions, GaugeRangeData } from './types';\n\n/**\n * 将 range 生成为 data 数据\n * @param range\n * @param key\n * @returns {GaugeRangeData}\n */\nexport function processRangeData(range: number[], percent: GaugeOptions['percent']): GaugeRangeData {\n  return (\n    range\n      // 映射为 stack 的数据\n      .map((r: number, idx: number) => {\n        return { [RANGE_VALUE]: r - (range[idx - 1] || 0), [RANGE_TYPE]: `${idx}`, [PERCENT]: percent };\n      })\n  );\n}\n\n/**\n * 获取 仪表盘 指针数据\n * @param percent\n */\nexport function getIndicatorData(percent: GaugeOptions['percent']): Data {\n  return [{ [PERCENT]: clamp(percent, 0, 1) }];\n}\n\n/**\n * 获取仪表盘 表盘弧形数据\n * @param percent\n * @param range\n */\nexport function getRangeData(percent: GaugeOptions['percent'], range?: GaugeOptions['range']): GaugeRangeData {\n  const ticks = get(range, ['ticks'], []);\n\n  const clampTicks = size(ticks) ? uniq(ticks) : [0, clamp(percent, 0, 1), 1];\n  if (!clampTicks[0]) {\n    clampTicks.shift();\n  }\n  return processRangeData(clampTicks as number[], percent);\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,QAAQ,YAAY;AAEnD,SAASC,OAAO,EAAEC,UAAU,EAAEC,WAAW,QAAQ,aAAa;AAG9D;;;;;;AAMA,OAAM,SAAUC,gBAAgBA,CAACC,KAAe,EAAEC,OAAgC;EAChF,OACED;EACE;EAAA,CACCE,GAAG,CAAC,UAACC,CAAS,EAAEC,GAAW;;IAC1B,OAAAC,EAAA,OAASA,EAAA,CAACP,WAAW,IAAGK,CAAC,IAAIH,KAAK,CAACI,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAEC,EAAA,CAACR,UAAU,IAAG,GAAAS,MAAA,CAAGF,GAAG,CAAE,EAAEC,EAAA,CAACT,OAAO,IAAGK,OAAO,EAAAI,EAAA;EAC/F,CAAC,CAAC;AAER;AAEA;;;;AAIA,OAAM,SAAUE,gBAAgBA,CAACN,OAAgC;;EAC/D,OAAO,EAAAI,EAAA,OAAGA,EAAA,CAACT,OAAO,IAAGJ,KAAK,CAACS,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,EAAAI,EAAA,EAAG;AAC9C;AAEA;;;;;AAKA,OAAM,SAAUG,YAAYA,CAACP,OAAgC,EAAED,KAA6B;EAC1F,IAAMS,KAAK,GAAGhB,GAAG,CAACO,KAAK,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC;EAEvC,IAAMU,UAAU,GAAGhB,IAAI,CAACe,KAAK,CAAC,GAAGd,IAAI,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,EAAEjB,KAAK,CAACS,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3E,IAAI,CAACS,UAAU,CAAC,CAAC,CAAC,EAAE;IAClBA,UAAU,CAACC,KAAK,EAAE;;EAEpB,OAAOZ,gBAAgB,CAACW,UAAsB,EAAET,OAAO,CAAC;AAC1D"},"metadata":{},"sourceType":"module","externalDependencies":[]}