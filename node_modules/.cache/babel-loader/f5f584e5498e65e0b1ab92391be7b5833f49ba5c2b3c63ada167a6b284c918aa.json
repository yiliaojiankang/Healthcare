{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _isTypedArray from \"lodash/isTypedArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AST_TOKEN_TYPES, createEntity, STORAGE_CLASS } from '@antv/g-webgpu-core';\n/* babel-plugin-inline-import './shaders/quad.vert.glsl' */\nvar quadVert = \"attribute vec3 a_Position;\\nattribute vec2 a_TexCoord;\\n\\nvarying vec2 v_TexCoord;\\n\\nvoid main() {\\n  gl_Position = vec4(a_Position, 1.0);\\n  v_TexCoord = a_TexCoord;\\n}\";\nvar textureId = 0;\nvar debug = false;\n\n/**\n * adaptor for regl.DrawCommand\n */\nvar ReglComputeModel = /*#__PURE__*/function () {\n  function ReglComputeModel(reGl, context) {\n    var _this = this;\n    _classCallCheck(this, ReglComputeModel);\n    this.reGl = reGl;\n    this.context = context;\n    this.entity = createEntity();\n    this.texFBO = void 0;\n    this.computeCommand = void 0;\n    this.textureCache = {};\n    this.outputTextureName = void 0;\n    this.swapOutputTextureName = void 0;\n    this.compiledPingpong = void 0;\n    this.dynamicPingpong = void 0;\n    var uniforms = {};\n    this.context.uniforms.forEach(function (uniform) {\n      var name = uniform.name,\n        type = uniform.type,\n        data = uniform.data,\n        isReferer = uniform.isReferer,\n        storageClass = uniform.storageClass;\n      // store data with a 2D texture\n      if (storageClass === STORAGE_CLASS.StorageBuffer) {\n        if (!isReferer) {\n          _this.textureCache[name] = _this.calcDataTexture(name, type, data);\n          var _this$textureCache$na = _this.textureCache[name],\n            width = _this$textureCache$na.textureWidth,\n            isOutput = _this$textureCache$na.isOutput;\n          uniforms[\"\".concat(name, \"Size\")] = [width, width];\n          if (isOutput) {\n            _this.outputTextureName = name;\n            if (_this.context.needPingpong) {\n              _this.outputTextureName = \"\".concat(name, \"Output\");\n              _this.textureCache[_this.outputTextureName] = _this.calcDataTexture(name, type, data);\n            }\n          }\n        } else {\n          // @ts-ignore\n          _this.textureCache[name] = {\n            data: undefined\n          };\n          // refer to another kernel's output,\n          // the referred kernel may not have been initialized, so we use dynamic way here\n          uniforms[\"\".concat(name, \"Size\")] = function () {\n            return (\n              // @ts-ignore\n              data.compiledBundle.context.output.textureSize\n            );\n          };\n        }\n        uniforms[name] = function () {\n          if (debug) {\n            console.log(\"[\".concat(_this.entity, \"]: \").concat(name, \" \").concat(_this.textureCache[name].id));\n          }\n          return _this.textureCache[name].texture;\n        };\n      } else if (storageClass === STORAGE_CLASS.Uniform) {\n        if (data && (Array.isArray(data) || _isTypedArray(data)) && data.length > 16) {\n          // up to mat4 which includes 16 elements\n          throw new Error(\"invalid data type \".concat(type));\n        }\n        // get uniform dynamically\n        uniforms[name] = function () {\n          return uniform.data;\n        };\n      }\n    });\n    var _this$getOuputDataTex = this.getOuputDataTexture(),\n      textureWidth = _this$getOuputDataTex.textureWidth,\n      texelCount = _this$getOuputDataTex.texelCount;\n\n    // 传入 output 纹理尺寸和数据长度，便于多余的 texel 提前退出\n    uniforms.u_OutputTextureSize = [textureWidth, textureWidth];\n    uniforms.u_OutputTexelCount = texelCount;\n\n    // 保存在 Kernel 的上下文中，供其他 Kernel 引用\n    this.context.output.textureSize = [textureWidth, textureWidth];\n    var drawParams = {\n      attributes: {\n        a_Position: [[-1, 1, 0], [-1, -1, 0], [1, 1, 0], [1, -1, 0]],\n        a_TexCoord: [[0, 1], [0, 0], [1, 1], [1, 0]]\n      },\n      frag: \"#ifdef GL_FRAGMENT_PRECISION_HIGH\\n  precision highp float;\\n#else\\n  precision mediump float;\\n#endif\\n\".concat(this.context.shader),\n      uniforms: uniforms,\n      vert: quadVert,\n      // TODO: use a fullscreen triangle instead.\n      primitive: 'triangle strip',\n      count: 4\n    };\n    this.computeCommand = this.reGl(drawParams);\n  }\n  _createClass(ReglComputeModel, [{\n    key: \"run\",\n    value: function run() {\n      var _this2 = this;\n      if (this.context.maxIteration > 1 && this.context.needPingpong) {\n        this.compiledPingpong = true;\n      }\n      // need pingpong when (@in@out and execute(10)) or use `setBinding('out', self)`\n      // this.needPingpong =\n      //   !!(this.context.maxIteration > 1 && this.context.needPingpong);\n\n      // if (this.relativeOutputTextureNames.length) {\n      //   const { id, texture } = this.getOuputDataTexture();\n      //   this.relativeOutputTextureNames.forEach((name) => {\n      //     this.textureCache[name].id = id;\n      //     this.textureCache[name].texture = texture;\n      //   });\n      //   this.swap();\n      // }\n\n      if (this.compiledPingpong || this.dynamicPingpong) {\n        this.swap();\n      }\n      this.texFBO = this.reGl.framebuffer({\n        color: this.getOuputDataTexture().texture\n      });\n      this.texFBO.use(function () {\n        _this2.computeCommand();\n      });\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: output \").concat(this.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"readData\",\n    value: function () {\n      var _readData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n        var pixels, _this$getOuputDataTex2, originalDataLength, elementsPerTexel, _this$getOuputDataTex3, typedArrayConstructor, formattedPixels, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.reGl({\n                  framebuffer: this.texFBO\n                })(function () {\n                  pixels = _this3.reGl.read();\n                });\n\n                // @ts-ignore\n                if (!pixels) {\n                  _context.next = 6;\n                  break;\n                }\n                _this$getOuputDataTex2 = this.getOuputDataTexture(), originalDataLength = _this$getOuputDataTex2.originalDataLength, elementsPerTexel = _this$getOuputDataTex2.elementsPerTexel, _this$getOuputDataTex3 = _this$getOuputDataTex2.typedArrayConstructor, typedArrayConstructor = _this$getOuputDataTex3 === void 0 ? Float32Array : _this$getOuputDataTex3;\n                formattedPixels = [];\n                if (elementsPerTexel !== 4) {\n                  for (i = 0; i < pixels.length; i += 4) {\n                    if (elementsPerTexel === 1) {\n                      formattedPixels.push(pixels[i]);\n                    } else if (elementsPerTexel === 2) {\n                      formattedPixels.push(pixels[i], pixels[i + 1]);\n                    } else {\n                      formattedPixels.push(pixels[i], pixels[i + 1], pixels[i + 2]);\n                    }\n                  }\n                } else {\n                  // @ts-ignore\n                  formattedPixels = pixels;\n                }\n\n                // 截取多余的部分\n                // @ts-ignore\n                return _context.abrupt(\"return\", new typedArrayConstructor(formattedPixels.slice(0, originalDataLength)));\n              case 6:\n                return _context.abrupt(\"return\", new Float32Array());\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function readData() {\n        return _readData.apply(this, arguments);\n      }\n      return readData;\n    }()\n  }, {\n    key: \"confirmInput\",\n    value: function confirmInput(model, inputName) {\n      var inputModel;\n      // refer to self, same as pingpong\n      if (this.entity === model.entity) {\n        this.dynamicPingpong = true;\n        inputModel = this;\n      } else {\n        inputModel = model;\n      }\n      this.textureCache[inputName].id = inputModel.getOuputDataTexture().id;\n      this.textureCache[inputName].texture = inputModel.getOuputDataTexture().texture;\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: confirm input \").concat(inputName, \" from model \").concat(inputModel.entity, \", \").concat(inputModel.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"updateUniform\",\n    value: function updateUniform() {\n      // already get uniform's data dynamically when created, do nothing here\n    }\n  }, {\n    key: \"updateBuffer\",\n    value: function updateBuffer(bufferName, data) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // regenerate data texture\n      var buffer = this.context.uniforms.find(function (_ref) {\n        var name = _ref.name;\n        return name === bufferName;\n      });\n      if (buffer) {\n        var _this$calcDataTexture = this.calcDataTexture(bufferName, buffer.type, data),\n          texture = _this$calcDataTexture.texture,\n          paddingData = _this$calcDataTexture.data;\n\n        // TODO: destroy outdated texture\n        this.textureCache[bufferName].data = paddingData;\n        this.textureCache[bufferName].texture = texture;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      // regl will destroy all resources\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      if (!this.swapOutputTextureName) {\n        this.createSwapOutputDataTexture();\n      }\n      if (this.compiledPingpong) {\n        var outputTextureUniformName = this.context.output.name;\n        this.textureCache[outputTextureUniformName].id = this.getOuputDataTexture().id;\n        this.textureCache[outputTextureUniformName].texture = this.getOuputDataTexture().texture;\n      }\n      var tmp = this.outputTextureName;\n      this.outputTextureName = this.swapOutputTextureName;\n      this.swapOutputTextureName = tmp;\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: after swap, output \").concat(this.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"getOuputDataTexture\",\n    value: function getOuputDataTexture() {\n      return this.textureCache[this.outputTextureName];\n    }\n  }, {\n    key: \"createSwapOutputDataTexture\",\n    value: function createSwapOutputDataTexture() {\n      var texture = this.cloneDataTexture(this.getOuputDataTexture());\n      this.swapOutputTextureName = \"\".concat(this.entity, \"-swap\");\n      this.textureCache[this.swapOutputTextureName] = texture;\n    }\n  }, {\n    key: \"cloneDataTexture\",\n    value: function cloneDataTexture(texture) {\n      var data = texture.data,\n        textureWidth = texture.textureWidth;\n      return _objectSpread(_objectSpread({}, texture), {}, {\n        id: textureId++,\n        // @ts-ignore\n        texture: this.reGl.texture({\n          width: textureWidth,\n          height: textureWidth,\n          data: data,\n          type: 'float'\n        })\n      });\n    }\n  }, {\n    key: \"calcDataTexture\",\n    value: function calcDataTexture(name, type, data) {\n      var elementsPerTexel = 1;\n      if (type === AST_TOKEN_TYPES.Vector4FloatArray) {\n        elementsPerTexel = 4;\n      }\n\n      // 用 0 补全不足 vec4 的部分\n      var paddingData = [];\n      for (var i = 0; i < data.length; i += elementsPerTexel) {\n        if (elementsPerTexel === 1) {\n          paddingData.push(data[i], 0, 0, 0);\n        } else if (elementsPerTexel === 2) {\n          paddingData.push(data[i], data[i + 1], 0, 0);\n        } else if (elementsPerTexel === 3) {\n          paddingData.push(data[i], data[i + 1], data[i + 2], 0);\n        } else if (elementsPerTexel === 4) {\n          paddingData.push(data[i], data[i + 1], data[i + 2], data[i + 3]);\n        }\n      }\n\n      // 使用纹理存储，例如 Array(8) 使用 3 * 3 纹理，末尾空白使用 0 填充\n      var originalDataLength = data.length;\n      var texelCount = Math.ceil(originalDataLength / elementsPerTexel);\n      var width = Math.ceil(Math.sqrt(texelCount));\n      var paddingTexelCount = width * width;\n      if (texelCount < paddingTexelCount) {\n        paddingData.push.apply(paddingData, _toConsumableArray(new Array((paddingTexelCount - texelCount) * 4).fill(0)));\n      }\n      var texture = this.reGl.texture({\n        width: width,\n        height: width,\n        data: paddingData,\n        type: 'float'\n      });\n      return {\n        id: textureId++,\n        data: paddingData,\n        originalDataLength: originalDataLength,\n        typedArrayConstructor: _isTypedArray(data) ? data.constructor : undefined,\n        textureWidth: width,\n        texture: texture,\n        texelCount: texelCount,\n        elementsPerTexel: elementsPerTexel,\n        isOutput: name === this.context.output.name\n      };\n    }\n  }]);\n  return ReglComputeModel;\n}();\nexport { ReglComputeModel as default };","map":{"version":3,"names":["AST_TOKEN_TYPES","createEntity","STORAGE_CLASS","quadVert","textureId","debug","ReglComputeModel","reGl","context","_this","_classCallCheck","entity","texFBO","computeCommand","textureCache","outputTextureName","swapOutputTextureName","compiledPingpong","dynamicPingpong","uniforms","forEach","uniform","name","type","data","isReferer","storageClass","StorageBuffer","calcDataTexture","_this$textureCache$na","width","textureWidth","isOutput","concat","needPingpong","undefined","compiledBundle","output","textureSize","console","log","id","texture","Uniform","Array","isArray","_isTypedArray","length","Error","_this$getOuputDataTex","getOuputDataTexture","texelCount","u_OutputTextureSize","u_OutputTexelCount","drawParams","attributes","a_Position","a_TexCoord","frag","shader","vert","primitive","count","_createClass","key","value","run","_this2","maxIteration","swap","framebuffer","color","use","_readData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this3","pixels","_this$getOuputDataTex2","originalDataLength","elementsPerTexel","_this$getOuputDataTex3","typedArrayConstructor","formattedPixels","i","wrap","_callee$","_context","prev","next","read","Float32Array","push","abrupt","slice","stop","readData","apply","arguments","confirmInput","model","inputName","inputModel","updateUniform","updateBuffer","bufferName","offset","buffer","find","_ref","_this$calcDataTexture","paddingData","destroy","createSwapOutputDataTexture","outputTextureUniformName","tmp","cloneDataTexture","_objectSpread","height","Vector4FloatArray","Math","ceil","sqrt","paddingTexelCount","_toConsumableArray","fill","constructor","default"],"sources":["../../src/webgl/ReglComputeModel.ts"],"sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DataType,\n  GLSLContext,\n  IComputeModel,\n  STORAGE_CLASS,\n} from '@antv/g-webgpu-core';\nimport { isTypedArray } from 'lodash';\nimport regl from 'regl';\nimport quadVert from './shaders/quad.vert.glsl';\n\ninterface DataTextureDescriptor {\n  id: number;\n  data:\n    | number\n    | number[]\n    | Float32Array\n    | Uint8Array\n    | Uint16Array\n    | Uint32Array\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | undefined;\n  textureWidth: number;\n  texture: regl.Texture2D;\n  texelCount: number;\n  originalDataLength: number;\n  elementsPerTexel: number;\n  typedArrayConstructor?: Function;\n  isOutput: boolean;\n}\n\nlet textureId = 0;\nconst debug = false;\n\n/**\n * adaptor for regl.DrawCommand\n */\nexport default class ReglComputeModel implements IComputeModel {\n  private entity = createEntity();\n  private texFBO: regl.Framebuffer2D;\n  private computeCommand: regl.DrawCommand;\n  private textureCache: {\n    [textureName: string]: DataTextureDescriptor;\n  } = {};\n  private outputTextureName: string;\n  private swapOutputTextureName: string;\n  private compiledPingpong: boolean;\n  private dynamicPingpong: boolean;\n\n  constructor(private reGl: regl.Regl, private context: GLSLContext) {\n    const uniforms: Record<string, any> = {};\n    this.context.uniforms.forEach((uniform) => {\n      const { name, type, data, isReferer, storageClass } = uniform;\n      // store data with a 2D texture\n      if (storageClass === STORAGE_CLASS.StorageBuffer) {\n        if (!isReferer) {\n          this.textureCache[name] = this.calcDataTexture(name, type, data!);\n          const { textureWidth: width, isOutput } = this.textureCache[name];\n          uniforms[`${name}Size`] = [width, width];\n\n          if (isOutput) {\n            this.outputTextureName = name;\n            if (this.context.needPingpong) {\n              this.outputTextureName = `${name}Output`;\n              this.textureCache[this.outputTextureName] = this.calcDataTexture(\n                name,\n                type,\n                data!,\n              );\n            }\n          }\n        } else {\n          // @ts-ignore\n          this.textureCache[name] = {\n            data: undefined,\n          };\n          // refer to another kernel's output,\n          // the referred kernel may not have been initialized, so we use dynamic way here\n          uniforms[`${name}Size`] = () =>\n            // @ts-ignore\n            data.compiledBundle.context.output.textureSize;\n        }\n\n        uniforms[name] = () => {\n          if (debug) {\n            console.log(\n              `[${this.entity}]: ${name} ${this.textureCache[name].id}`,\n            );\n          }\n          return this.textureCache[name].texture;\n        };\n      } else if (storageClass === STORAGE_CLASS.Uniform) {\n        if (\n          data &&\n          (Array.isArray(data) || isTypedArray(data)) &&\n          (data as ArrayLike<number>).length > 16\n        ) {\n          // up to mat4 which includes 16 elements\n          throw new Error(`invalid data type ${type}`);\n        }\n        // get uniform dynamically\n        uniforms[name] = () => uniform.data;\n      }\n    });\n\n    const { textureWidth, texelCount } = this.getOuputDataTexture();\n\n    // 传入 output 纹理尺寸和数据长度，便于多余的 texel 提前退出\n    uniforms.u_OutputTextureSize = [textureWidth, textureWidth];\n    uniforms.u_OutputTexelCount = texelCount;\n\n    // 保存在 Kernel 的上下文中，供其他 Kernel 引用\n    this.context.output.textureSize = [textureWidth!, textureWidth!];\n\n    const drawParams: regl.DrawConfig = {\n      attributes: {\n        a_Position: [\n          [-1, 1, 0],\n          [-1, -1, 0],\n          [1, 1, 0],\n          [1, -1, 0],\n        ],\n        a_TexCoord: [\n          [0, 1],\n          [0, 0],\n          [1, 1],\n          [1, 0],\n        ],\n      },\n      frag: `#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n${this.context.shader}`,\n      uniforms,\n      vert: quadVert,\n      // TODO: use a fullscreen triangle instead.\n      primitive: 'triangle strip',\n      count: 4,\n    };\n\n    this.computeCommand = this.reGl(drawParams);\n  }\n\n  public run() {\n    if (this.context.maxIteration > 1 && this.context.needPingpong) {\n      this.compiledPingpong = true;\n    }\n    // need pingpong when (@in@out and execute(10)) or use `setBinding('out', self)`\n    // this.needPingpong =\n    //   !!(this.context.maxIteration > 1 && this.context.needPingpong);\n\n    // if (this.relativeOutputTextureNames.length) {\n    //   const { id, texture } = this.getOuputDataTexture();\n    //   this.relativeOutputTextureNames.forEach((name) => {\n    //     this.textureCache[name].id = id;\n    //     this.textureCache[name].texture = texture;\n    //   });\n    //   this.swap();\n    // }\n\n    if (this.compiledPingpong || this.dynamicPingpong) {\n      this.swap();\n    }\n\n    this.texFBO = this.reGl.framebuffer({\n      color: this.getOuputDataTexture().texture,\n    });\n    this.texFBO.use(() => {\n      this.computeCommand();\n    });\n    if (debug) {\n      console.log(`[${this.entity}]: output ${this.getOuputDataTexture().id}`);\n    }\n  }\n\n  public async readData() {\n    let pixels: Uint8Array | Float32Array;\n    this.reGl({\n      framebuffer: this.texFBO,\n    })(() => {\n      pixels = this.reGl.read();\n    });\n\n    // @ts-ignore\n    if (pixels) {\n      const {\n        originalDataLength,\n        elementsPerTexel,\n        typedArrayConstructor = Float32Array,\n      } = this.getOuputDataTexture();\n\n      let formattedPixels = [];\n      if (elementsPerTexel !== 4) {\n        for (let i = 0; i < pixels.length; i += 4) {\n          if (elementsPerTexel === 1) {\n            formattedPixels.push(pixels[i]);\n          } else if (elementsPerTexel === 2) {\n            formattedPixels.push(pixels[i], pixels[i + 1]);\n          } else {\n            formattedPixels.push(pixels[i], pixels[i + 1], pixels[i + 2]);\n          }\n        }\n      } else {\n        // @ts-ignore\n        formattedPixels = pixels;\n      }\n\n      // 截取多余的部分\n      // @ts-ignore\n      return new typedArrayConstructor(\n        formattedPixels.slice(0, originalDataLength),\n      );\n    }\n\n    return new Float32Array();\n  }\n\n  public confirmInput(model: IComputeModel, inputName: string) {\n    let inputModel: ReglComputeModel;\n    // refer to self, same as pingpong\n    if (this.entity === (model as ReglComputeModel).entity) {\n      this.dynamicPingpong = true;\n      inputModel = this;\n    } else {\n      inputModel = model as ReglComputeModel;\n    }\n\n    this.textureCache[inputName].id = inputModel.getOuputDataTexture().id;\n    this.textureCache[\n      inputName\n    ].texture = inputModel.getOuputDataTexture().texture;\n\n    if (debug) {\n      console.log(\n        `[${this.entity}]: confirm input ${inputName} from model ${\n          inputModel.entity\n        }, ${(inputModel as ReglComputeModel).getOuputDataTexture().id}`,\n      );\n    }\n  }\n\n  public updateUniform() {\n    // already get uniform's data dynamically when created, do nothing here\n  }\n\n  public updateBuffer(\n    bufferName: string,\n    data:\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n    offset: number = 0,\n  ) {\n    // regenerate data texture\n    const buffer = this.context.uniforms.find(\n      ({ name }) => name === bufferName,\n    );\n    if (buffer) {\n      const { texture, data: paddingData } = this.calcDataTexture(\n        bufferName,\n        buffer.type,\n        data,\n      );\n\n      // TODO: destroy outdated texture\n      this.textureCache[bufferName].data = paddingData;\n      this.textureCache[bufferName].texture = texture;\n    }\n  }\n\n  public destroy() {\n    // regl will destroy all resources\n  }\n\n  private swap() {\n    if (!this.swapOutputTextureName) {\n      this.createSwapOutputDataTexture();\n    }\n\n    if (this.compiledPingpong) {\n      const outputTextureUniformName = this.context.output.name;\n      this.textureCache[\n        outputTextureUniformName\n      ].id = this.getOuputDataTexture().id;\n      this.textureCache[\n        outputTextureUniformName\n      ].texture = this.getOuputDataTexture().texture;\n    }\n\n    const tmp = this.outputTextureName;\n    this.outputTextureName = this.swapOutputTextureName;\n    this.swapOutputTextureName = tmp;\n\n    if (debug) {\n      console.log(\n        `[${this.entity}]: after swap, output ${this.getOuputDataTexture().id}`,\n      );\n    }\n  }\n\n  private getOuputDataTexture() {\n    return this.textureCache[this.outputTextureName];\n  }\n\n  private createSwapOutputDataTexture() {\n    const texture = this.cloneDataTexture(this.getOuputDataTexture());\n    this.swapOutputTextureName = `${this.entity}-swap`;\n    this.textureCache[this.swapOutputTextureName] = texture;\n  }\n\n  private cloneDataTexture(texture: DataTextureDescriptor) {\n    const { data, textureWidth } = texture;\n    return {\n      ...texture,\n      id: textureId++,\n      // @ts-ignore\n      texture: this.reGl.texture({\n        width: textureWidth,\n        height: textureWidth,\n        data,\n        type: 'float',\n      }),\n    };\n  }\n\n  private calcDataTexture(\n    name: string,\n    type: DataType,\n    data:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n  ) {\n    let elementsPerTexel = 1;\n    if (type === AST_TOKEN_TYPES.Vector4FloatArray) {\n      elementsPerTexel = 4;\n    }\n\n    // 用 0 补全不足 vec4 的部分\n    const paddingData: number[] = [];\n    for (let i = 0; i < (data as number[]).length; i += elementsPerTexel) {\n      if (elementsPerTexel === 1) {\n        paddingData.push((data as number[])[i], 0, 0, 0);\n      } else if (elementsPerTexel === 2) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          0,\n          0,\n        );\n      } else if (elementsPerTexel === 3) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          (data as number[])[i + 2],\n          0,\n        );\n      } else if (elementsPerTexel === 4) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          (data as number[])[i + 2],\n          (data as number[])[i + 3],\n        );\n      }\n    }\n\n    // 使用纹理存储，例如 Array(8) 使用 3 * 3 纹理，末尾空白使用 0 填充\n    const originalDataLength = (data as ArrayLike<number>).length;\n    const texelCount = Math.ceil(originalDataLength / elementsPerTexel);\n    const width = Math.ceil(Math.sqrt(texelCount));\n    const paddingTexelCount = width * width;\n    if (texelCount < paddingTexelCount) {\n      paddingData.push(\n        ...new Array((paddingTexelCount - texelCount) * 4).fill(0),\n      );\n    }\n\n    const texture = this.reGl.texture({\n      width,\n      height: width,\n      data: paddingData,\n      type: 'float',\n    });\n\n    return {\n      id: textureId++,\n      data: paddingData,\n      originalDataLength,\n      typedArrayConstructor: isTypedArray(data) ? data!.constructor : undefined,\n      textureWidth: width,\n      texture,\n      texelCount,\n      elementsPerTexel,\n      isOutput: name === this.context.output.name,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}