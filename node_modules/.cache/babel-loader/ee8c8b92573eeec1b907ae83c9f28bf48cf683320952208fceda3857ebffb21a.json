{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Plot } from '../core/plot';\nimport { deepAssign } from '../utils';\n/**\n * 给 G2Plot 提供非常简单的开放开发的机制。目的是能够让社区和业务上自己基于 G2Plot 开发自己的定制图表库。主要分成几类图表：\n * 1. 领域专业的图表，内部同学因为没有场景，不一定能做的完善。\n * 2. 定制业务的图表，不具备通用性\n * 3. 趣味性的可视化组件\n * 然后官方可以根据社区的情况，可以进行一些官方推荐和采纳。\n *\n * 如果使用？\n *\n * ```ts\n * import { P } from '@antv/g2plot';\n * import { GeoWorldMap, GeoWorldMapOptions } from 'g2plot-geo-world-map';\n *\n * const plot = new P('container', {\n *   geoJson: '',\n *   longitude: '',\n *   latitude: '',\n * }, GeoWorldMap, defaultOptions);\n *\n * plot.render();\n * ```\n */\nvar P = /** @class */function (_super) {\n  __extends(P, _super);\n  /**\n   * 相比普通图表增加 adaptor 参数。\n   * @param container\n   * @param options\n   * @param adaptor\n   * @param defaultOptions\n   */\n  function P(container, options, adaptor, defaultOptions) {\n    var _this = _super.call(this, container, deepAssign({}, defaultOptions, options)) || this;\n    /** 统一为 any plot */\n    _this.type = 'g2-plot';\n    _this.defaultOptions = defaultOptions;\n    _this.adaptor = adaptor;\n    return _this;\n  }\n  /**\n   * 实现父类方法，直接使用传入的\n   */\n  P.prototype.getDefaultOptions = function () {\n    return this.defaultOptions;\n  };\n  /**\n   * 实现父类方法，直接使用传入的\n   */\n  P.prototype.getSchemaAdaptor = function () {\n    return this.adaptor;\n  };\n  return P;\n}(Plot);\nexport { P };","map":{"version":3,"names":["Plot","deepAssign","P","_super","__extends","container","options","adaptor","defaultOptions","_this","call","type","prototype","getDefaultOptions","getSchemaAdaptor"],"sources":["../../src/plugin/index.ts"],"sourcesContent":["import { Adaptor } from '../core/adaptor';\nimport { PickOptions, Plot } from '../core/plot';\nimport { deepAssign } from '../utils';\n/**\n * 给 G2Plot 提供非常简单的开放开发的机制。目的是能够让社区和业务上自己基于 G2Plot 开发自己的定制图表库。主要分成几类图表：\n * 1. 领域专业的图表，内部同学因为没有场景，不一定能做的完善。\n * 2. 定制业务的图表，不具备通用性\n * 3. 趣味性的可视化组件\n * 然后官方可以根据社区的情况，可以进行一些官方推荐和采纳。\n *\n * 如果使用？\n *\n * ```ts\n * import { P } from '@antv/g2plot';\n * import { GeoWorldMap, GeoWorldMapOptions } from 'g2plot-geo-world-map';\n *\n * const plot = new P('container', {\n *   geoJson: '',\n *   longitude: '',\n *   latitude: '',\n * }, GeoWorldMap, defaultOptions);\n *\n * plot.render();\n * ```\n */\nexport class P<O extends PickOptions> extends Plot<O> {\n  /** 统一为 any plot */\n  public readonly type = 'g2-plot';\n\n  /** 外部传入的 defaultOptions */\n  private defaultOptions: Partial<O>;\n\n  /** 外部传入的 adaptor 函数 */\n  private adaptor: Adaptor<O>;\n\n  /**\n   * 相比普通图表增加 adaptor 参数。\n   * @param container\n   * @param options\n   * @param adaptor\n   * @param defaultOptions\n   */\n  constructor(container: string | HTMLElement, options: O, adaptor: Adaptor<O>, defaultOptions?: Partial<O>) {\n    super(container, deepAssign({}, defaultOptions, options));\n\n    this.defaultOptions = defaultOptions;\n    this.adaptor = adaptor;\n  }\n\n  /**\n   * 实现父类方法，直接使用传入的\n   */\n  protected getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  /**\n   * 实现父类方法，直接使用传入的\n   */\n  protected getSchemaAdaptor(): Adaptor<O> {\n    return this.adaptor;\n  }\n}\n"],"mappings":";AACA,SAAsBA,IAAI,QAAQ,cAAc;AAChD,SAASC,UAAU,QAAQ,UAAU;AACrC;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAAC,CAAA,0BAAAC,MAAA;EAA8CC,SAAA,CAAAF,CAAA,EAAAC,MAAA;EAU5C;;;;;;;EAOA,SAAAD,EAAYG,SAA+B,EAAEC,OAAU,EAAEC,OAAmB,EAAEC,cAA2B;IAAzG,IAAAC,KAAA,GACEN,MAAA,CAAAO,IAAA,OAAML,SAAS,EAAEJ,UAAU,CAAC,EAAE,EAAEO,cAAc,EAAEF,OAAO,CAAC,CAAC;IAjB3D;IACgBG,KAAA,CAAAE,IAAI,GAAG,SAAS;IAkB9BF,KAAI,CAACD,cAAc,GAAGA,cAAc;IACpCC,KAAI,CAACF,OAAO,GAAGA,OAAO;;EACxB;EAEA;;;EAGUL,CAAA,CAAAU,SAAA,CAAAC,iBAAiB,GAA3B;IACE,OAAO,IAAI,CAACL,cAAc;EAC5B,CAAC;EAED;;;EAGUN,CAAA,CAAAU,SAAA,CAAAE,gBAAgB,GAA1B;IACE,OAAO,IAAI,CAACP,OAAO;EACrB,CAAC;EACH,OAAAL,CAAC;AAAD,CAAC,CArC6CF,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}