{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\nexport default function fitBounds(_ref) {\n  var width = _ref.width,\n    height = _ref.height,\n    bounds = _ref.bounds,\n    _ref$minExtent = _ref.minExtent,\n    minExtent = _ref$minExtent === void 0 ? 0 : _ref$minExtent,\n    _ref$maxZoom = _ref.maxZoom,\n    maxZoom = _ref$maxZoom === void 0 ? 24 : _ref$maxZoom,\n    _ref$padding = _ref.padding,\n    padding = _ref$padding === void 0 ? 0 : _ref$padding,\n    _ref$offset = _ref.offset,\n    offset = _ref$offset === void 0 ? [0, 0] : _ref$offset;\n  var _bounds = _slicedToArray(bounds, 2),\n    _bounds$ = _slicedToArray(_bounds[0], 2),\n    west = _bounds$[0],\n    south = _bounds$[1],\n    _bounds$2 = _slicedToArray(_bounds[1], 2),\n    east = _bounds$2[0],\n    north = _bounds$2[1];\n  if (Number.isFinite(padding)) {\n    var p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    assert(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));\n  }\n  var viewport = new WebMercatorViewport({\n    width: width,\n    height: height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n  var nw = viewport.project([west, north]);\n  var se = viewport.project([east, south]);\n  var size = [Math.max(Math.abs(se[0] - nw[0]), minExtent), Math.max(Math.abs(se[1] - nw[1]), minExtent)];\n  var targetSize = [width - padding.left - padding.right - Math.abs(offset[0]) * 2, height - padding.top - padding.bottom - Math.abs(offset[1]) * 2];\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n  var scaleX = targetSize[0] / size[0];\n  var scaleY = targetSize[1] / size[1];\n  var offsetX = (padding.right - padding.left) / 2 / scaleX;\n  var offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n  var center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n  var centerLngLat = viewport.unproject(center);\n  var zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom: Math.min(zoom, maxZoom)\n  };\n}","map":{"version":3,"names":["WebMercatorViewport","assert","fitBounds","_ref","width","height","bounds","_ref$minExtent","minExtent","_ref$maxZoom","maxZoom","_ref$padding","padding","_ref$offset","offset","_bounds","_slicedToArray","_bounds$","west","south","_bounds$2","east","north","Number","isFinite","p","top","bottom","left","right","viewport","longitude","latitude","zoom","nw","project","se","size","Math","max","abs","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","log2","min"],"sources":["../../src/fit-bounds.js"],"sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\n\n/**\n * * An object describing the padding to add to the bounds.\n * @typedef {Object} PaddingObject\n * @property {Number} top - Padding from top in pixels to add to the given bounds\n * @property {Number} bottom - Padding from bottom in pixels to add to the given bounds\n * @property {Number} left - Padding from left in pixels to add to the given bounds\n * @property {Number} right - Padding from right in pixels to add to the given bounds\n */\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n * Only supports non-perspective mode.\n * @param {Number} width - viewport width\n * @param {Number} height - viewport height\n * @param {Array} bounds - [[lon, lat], [lon, lat]]\n * @param {Array} minExtent - The width/height of the bounded area will never be smaller than this\n * @param {Number|PaddingObject} [padding] - The amount of padding in pixels\n *  to add to the given bounds. Can also be an object with top, bottom, left and right\n *  properties defining the padding.\n * @param {Array} [offset] - The center of the given bounds relative to the map's center,\n *    [x, y] measured in pixels.\n * @returns {Object} - latitude, longitude and zoom\n */\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  minExtent = 0,  // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [\n    (se[0] + nw[0]) / 2 + offsetX,\n    (se[1] + nw[1]) / 2 + offsetY\n  ];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom: Math.min(zoom, maxZoom)\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}