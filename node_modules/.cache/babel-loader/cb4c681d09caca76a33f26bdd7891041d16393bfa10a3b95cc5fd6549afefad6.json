{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getArrayBuffer, makeXMLHttpRequestPromise } from '@antv/l7-utils';\nimport { processRasterData } from \"../bandOperation/bands\";\nimport { bindCancel, getTileBandParams } from \"./request\";\nexport var getRasterFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, requestParameters, callback, rasterFormat, operation) {\n    var tileBandParams, _yield$getMultiArrayB, rasterFiles, xhrList, errList, xhr;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // Tip: 至少存在一个请求文件的 url，处理得到标准的 ITileBand[] url 路径和 bands 参数\n          tileBandParams = getTileBandParams(requestParameters.url);\n          if (!(tileBandParams.length > 1)) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 4;\n          return getMultiArrayBuffer(tileBandParams, requestParameters);\n        case 4:\n          _yield$getMultiArrayB = _context.sent;\n          rasterFiles = _yield$getMultiArrayB.rasterFiles;\n          xhrList = _yield$getMultiArrayB.xhrList;\n          errList = _yield$getMultiArrayB.errList;\n          // 多波段计算\n          bindCancel(tile, xhrList);\n          if (!(errList.length > 0)) {\n            _context.next = 12;\n            break;\n          }\n          callback(errList, null);\n          return _context.abrupt(\"return\");\n        case 12:\n          processRasterData(rasterFiles, rasterFormat, operation, callback);\n          _context.next = 17;\n          break;\n        case 15:\n          xhr = getArrayBuffer(requestParameters, function (err, imgData) {\n            if (err) {\n              callback(err);\n            } else if (imgData) {\n              var _rasterFiles = [{\n                data: imgData,\n                bands: tileBandParams[0].bands\n              }];\n              processRasterData(_rasterFiles, rasterFormat, operation, callback);\n            }\n          });\n          bindCancel(tile, [xhr]);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getRasterFile(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * get multi raster files async\n * @param tileBandParams\n * @param requestParameters\n * @returns\n */\nfunction getMultiArrayBuffer(_x6, _x7) {\n  return _getMultiArrayBuffer.apply(this, arguments);\n}\nfunction _getMultiArrayBuffer() {\n  _getMultiArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tileBandParams, requestParameters) {\n    var rasterFiles, xhrList, errList, i, tileBandParam, params, bands, _yield$makeXMLHttpReq, err, data, xhr;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          rasterFiles = [];\n          xhrList = [];\n          errList = []; // tslint:disable-next-line: prefer-for-of\n          i = 0;\n        case 4:\n          if (!(i < tileBandParams.length)) {\n            _context2.next = 20;\n            break;\n          }\n          tileBandParam = tileBandParams[i];\n          params = _objectSpread(_objectSpread({}, requestParameters), {}, {\n            url: tileBandParam.url\n          });\n          bands = tileBandParam.bands;\n          _context2.next = 10;\n          return makeXMLHttpRequestPromise(_objectSpread(_objectSpread({}, params), {}, {\n            type: 'arrayBuffer'\n          }));\n        case 10:\n          _yield$makeXMLHttpReq = _context2.sent;\n          err = _yield$makeXMLHttpReq.err;\n          data = _yield$makeXMLHttpReq.data;\n          xhr = _yield$makeXMLHttpReq.xhr;\n          if (err) {\n            errList.push(err);\n          }\n          xhrList.push(xhr);\n          rasterFiles.push({\n            data: data,\n            bands: bands\n          });\n        case 17:\n          i++;\n          _context2.next = 4;\n          break;\n        case 20:\n          return _context2.abrupt(\"return\", {\n            rasterFiles: rasterFiles,\n            xhrList: xhrList,\n            errList: errList\n          });\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getMultiArrayBuffer.apply(this, arguments);\n}","map":{"version":3,"names":["_objectSpread","_asyncToGenerator","_regeneratorRuntime","getArrayBuffer","makeXMLHttpRequestPromise","processRasterData","bindCancel","getTileBandParams","getRasterFile","_ref","mark","_callee","tile","requestParameters","callback","rasterFormat","operation","tileBandParams","_yield$getMultiArrayB","rasterFiles","xhrList","errList","xhr","wrap","_callee$","_context","prev","next","url","length","getMultiArrayBuffer","sent","abrupt","err","imgData","_rasterFiles","data","bands","stop","_x","_x2","_x3","_x4","_x5","apply","arguments","_x6","_x7","_getMultiArrayBuffer","_callee2","i","tileBandParam","params","_yield$makeXMLHttpReq","_callee2$","_context2","type","push"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-source/es/utils/tile/getRasterData.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getArrayBuffer, makeXMLHttpRequestPromise } from '@antv/l7-utils';\nimport { processRasterData } from \"../bandOperation/bands\";\nimport { bindCancel, getTileBandParams } from \"./request\";\nexport var getRasterFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tile, requestParameters, callback, rasterFormat, operation) {\n    var tileBandParams, _yield$getMultiArrayB, rasterFiles, xhrList, errList, xhr;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          // Tip: 至少存在一个请求文件的 url，处理得到标准的 ITileBand[] url 路径和 bands 参数\n          tileBandParams = getTileBandParams(requestParameters.url);\n          if (!(tileBandParams.length > 1)) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 4;\n          return getMultiArrayBuffer(tileBandParams, requestParameters);\n        case 4:\n          _yield$getMultiArrayB = _context.sent;\n          rasterFiles = _yield$getMultiArrayB.rasterFiles;\n          xhrList = _yield$getMultiArrayB.xhrList;\n          errList = _yield$getMultiArrayB.errList;\n          // 多波段计算\n          bindCancel(tile, xhrList);\n          if (!(errList.length > 0)) {\n            _context.next = 12;\n            break;\n          }\n          callback(errList, null);\n          return _context.abrupt(\"return\");\n        case 12:\n          processRasterData(rasterFiles, rasterFormat, operation, callback);\n          _context.next = 17;\n          break;\n        case 15:\n          xhr = getArrayBuffer(requestParameters, function (err, imgData) {\n            if (err) {\n              callback(err);\n            } else if (imgData) {\n              var _rasterFiles = [{\n                data: imgData,\n                bands: tileBandParams[0].bands\n              }];\n              processRasterData(_rasterFiles, rasterFormat, operation, callback);\n            }\n          });\n          bindCancel(tile, [xhr]);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getRasterFile(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * get multi raster files async\n * @param tileBandParams\n * @param requestParameters\n * @returns\n */\nfunction getMultiArrayBuffer(_x6, _x7) {\n  return _getMultiArrayBuffer.apply(this, arguments);\n}\nfunction _getMultiArrayBuffer() {\n  _getMultiArrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tileBandParams, requestParameters) {\n    var rasterFiles, xhrList, errList, i, tileBandParam, params, bands, _yield$makeXMLHttpReq, err, data, xhr;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          rasterFiles = [];\n          xhrList = [];\n          errList = []; // tslint:disable-next-line: prefer-for-of\n          i = 0;\n        case 4:\n          if (!(i < tileBandParams.length)) {\n            _context2.next = 20;\n            break;\n          }\n          tileBandParam = tileBandParams[i];\n          params = _objectSpread(_objectSpread({}, requestParameters), {}, {\n            url: tileBandParam.url\n          });\n          bands = tileBandParam.bands;\n          _context2.next = 10;\n          return makeXMLHttpRequestPromise(_objectSpread(_objectSpread({}, params), {}, {\n            type: 'arrayBuffer'\n          }));\n        case 10:\n          _yield$makeXMLHttpReq = _context2.sent;\n          err = _yield$makeXMLHttpReq.err;\n          data = _yield$makeXMLHttpReq.data;\n          xhr = _yield$makeXMLHttpReq.xhr;\n          if (err) {\n            errList.push(err);\n          }\n          xhrList.push(xhr);\n          rasterFiles.push({\n            data: data,\n            bands: bands\n          });\n        case 17:\n          i++;\n          _context2.next = 4;\n          break;\n        case 20:\n          return _context2.abrupt(\"return\", {\n            rasterFiles: rasterFiles,\n            xhrList: xhrList,\n            errList: errList\n          });\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getMultiArrayBuffer.apply(this, arguments);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}