{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _dec, _class;\n// import Ajv from 'ajv';\nimport { injectable } from 'inversify';\nimport { lodashUtil } from '@antv/l7-utils';\nimport 'reflect-metadata';\nimport { MaskOperation } from \"../layer/ILayerService\";\nimport WarnInfo from \"./warnInfo\";\nvar merge = lodashUtil.merge;\n/**\n * 场景默认配置项\n */\nvar defaultSceneConfig = {\n  id: 'map',\n  logoPosition: 'bottomleft',\n  logoVisible: true,\n  antialias: true,\n  stencil: true,\n  preserveDrawingBuffer: false,\n  pickBufferScale: 1.0,\n  fitBoundsOptions: {\n    animate: false\n  }\n};\n\n/**\n * 图层基类默认样式属性\n */\nvar defaultLayerConfig = {\n  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  pickingBuffer: 0,\n  enablePropagation: false,\n  zIndex: 0,\n  blend: 'normal',\n  maskLayers: [],\n  enableMask: true,\n  maskOperation: MaskOperation.AND,\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: false,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  activeMix: 0,\n  selectColor: 'blue',\n  selectMix: 0,\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15\n  },\n  forward: true // 默认是正方向\n};\n\n// @see https://github.com/epoberezkin/ajv#options\n// const ajv = new Ajv({\n//   allErrors: true,\n//   verbose: true,\n// });\nvar GlobalConfigService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function GlobalConfigService() {\n    _classCallCheck(this, GlobalConfigService);\n    /**\n     * 全部场景配置项缓存\n     */\n    _defineProperty(this, \"sceneConfigCache\", {});\n    /**\n     * 场景配置项校验器\n     */\n    // private sceneConfigValidator: Ajv.ValidateFunction;\n    /**\n     * 地图配置项校验器\n     */\n    // private mapConfigValidator: Ajv.ValidateFunction;\n    /**\n     * 全部图层配置项缓存\n     */\n    _defineProperty(this, \"layerConfigCache\", {});\n    /**\n     * 数据映射缓存\n     */\n    _defineProperty(this, \"layerAttributeConfigCache\", {});\n  }\n  _createClass(GlobalConfigService, [{\n    key: \"getSceneConfig\",\n    value:\n    /**\n     * 保存每一种 Layer 配置项的校验器\n     */\n    // private layerConfigValidatorCache: {\n    //   [layerName: string]: Ajv.ValidateFunction;\n    // } = {};\n    function getSceneConfig(sceneId) {\n      return this.sceneConfigCache[sceneId];\n    }\n  }, {\n    key: \"getSceneWarninfo\",\n    value: function getSceneWarninfo(id) {\n      return WarnInfo[id];\n    }\n  }, {\n    key: \"setSceneConfig\",\n    value: function setSceneConfig(sceneId, config) {\n      this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);\n    }\n\n    // public validateSceneConfig(data: object) {\n    //   return this.validate(this.sceneConfigValidator, data);\n    // }\n\n    // public validateMapConfig(data: object) {\n    //   return this.validate(this.mapConfigValidator, data);\n    // }\n  }, {\n    key: \"getLayerConfig\",\n    value: function getLayerConfig(layerId) {\n      // @ts-ignore\n      return this.layerConfigCache[layerId];\n    }\n  }, {\n    key: \"setLayerConfig\",\n    value: function setLayerConfig(sceneId, layerId, config) {\n      // @ts-ignore\n      this.layerConfigCache[layerId] = _objectSpread({}, merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));\n    }\n  }, {\n    key: \"getAttributeConfig\",\n    value: function getAttributeConfig(layerId) {\n      return this.layerAttributeConfigCache[layerId];\n    }\n  }, {\n    key: \"setAttributeConfig\",\n    value: function setAttributeConfig(layerId, attr) {\n      // TODO\n      this.layerAttributeConfigCache[layerId] = _objectSpread(_objectSpread({}, this.layerAttributeConfigCache[layerId]), attr);\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.sceneConfigCache = {};\n      this.layerConfigCache = {};\n    }\n\n    // @postConstruct()\n    // private registerSceneConfigSchemaValidator() {\n    //   this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n    //   this.mapConfigValidator = ajv.compile(mapConfigSchema);\n    // }\n\n    // private validate(\n    //   validateFunc: Ajv.ValidateFunction | undefined,\n    //   data: object,\n    // ) {\n    //   if (validateFunc) {\n    //     const valid = validateFunc(data);\n    //     if (!valid) {\n    //       return {\n    //         valid,\n    //         errors: validateFunc.errors,\n    //         errorText: ajv.errorsText(validateFunc.errors),\n    //       };\n    //     }\n    //   }\n    //   return {\n    //     valid: true,\n    //     errors: null,\n    //     errorText: null,\n    //   };\n    // }\n  }]);\n\n  return GlobalConfigService;\n}()) || _class);\nexport { GlobalConfigService as default };","map":{"version":3,"names":["_objectSpread","_classCallCheck","_createClass","_defineProperty","_dec","_class","injectable","lodashUtil","MaskOperation","WarnInfo","merge","defaultSceneConfig","id","logoPosition","logoVisible","antialias","stencil","preserveDrawingBuffer","pickBufferScale","fitBoundsOptions","animate","defaultLayerConfig","colors","size","shape","scales","shape2d","shape3d","minZoom","maxZoom","visible","autoFit","pickingBuffer","enablePropagation","zIndex","blend","maskLayers","enableMask","maskOperation","AND","pickedFeatureID","enableMultiPassRenderer","enablePicking","active","activeColor","enableHighlight","enableSelect","highlightColor","activeMix","selectColor","selectMix","enableTAA","jitterScale","enableLighting","animateOption","enable","interval","duration","trailLength","forward","GlobalConfigService","key","value","getSceneConfig","sceneId","sceneConfigCache","getSceneWarninfo","setSceneConfig","config","getLayerConfig","layerId","layerConfigCache","setLayerConfig","getAttributeConfig","layerAttributeConfigCache","setAttributeConfig","attr","clean","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-core/es/services/config/ConfigService.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _dec, _class;\n// import Ajv from 'ajv';\nimport { injectable } from 'inversify';\nimport { lodashUtil } from '@antv/l7-utils';\nimport 'reflect-metadata';\nimport { MaskOperation } from \"../layer/ILayerService\";\nimport WarnInfo from \"./warnInfo\";\nvar merge = lodashUtil.merge;\n/**\n * 场景默认配置项\n */\nvar defaultSceneConfig = {\n  id: 'map',\n  logoPosition: 'bottomleft',\n  logoVisible: true,\n  antialias: true,\n  stencil: true,\n  preserveDrawingBuffer: false,\n  pickBufferScale: 1.0,\n  fitBoundsOptions: {\n    animate: false\n  }\n};\n\n/**\n * 图层基类默认样式属性\n */\nvar defaultLayerConfig = {\n  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  pickingBuffer: 0,\n  enablePropagation: false,\n  zIndex: 0,\n  blend: 'normal',\n  maskLayers: [],\n  enableMask: true,\n  maskOperation: MaskOperation.AND,\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: false,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  activeMix: 0,\n  selectColor: 'blue',\n  selectMix: 0,\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15\n  },\n  forward: true // 默认是正方向\n};\n\n// @see https://github.com/epoberezkin/ajv#options\n// const ajv = new Ajv({\n//   allErrors: true,\n//   verbose: true,\n// });\nvar GlobalConfigService = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function GlobalConfigService() {\n    _classCallCheck(this, GlobalConfigService);\n    /**\n     * 全部场景配置项缓存\n     */\n    _defineProperty(this, \"sceneConfigCache\", {});\n    /**\n     * 场景配置项校验器\n     */\n    // private sceneConfigValidator: Ajv.ValidateFunction;\n    /**\n     * 地图配置项校验器\n     */\n    // private mapConfigValidator: Ajv.ValidateFunction;\n    /**\n     * 全部图层配置项缓存\n     */\n    _defineProperty(this, \"layerConfigCache\", {});\n    /**\n     * 数据映射缓存\n     */\n    _defineProperty(this, \"layerAttributeConfigCache\", {});\n  }\n  _createClass(GlobalConfigService, [{\n    key: \"getSceneConfig\",\n    value:\n    /**\n     * 保存每一种 Layer 配置项的校验器\n     */\n    // private layerConfigValidatorCache: {\n    //   [layerName: string]: Ajv.ValidateFunction;\n    // } = {};\n    function getSceneConfig(sceneId) {\n      return this.sceneConfigCache[sceneId];\n    }\n  }, {\n    key: \"getSceneWarninfo\",\n    value: function getSceneWarninfo(id) {\n      return WarnInfo[id];\n    }\n  }, {\n    key: \"setSceneConfig\",\n    value: function setSceneConfig(sceneId, config) {\n      this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);\n    }\n\n    // public validateSceneConfig(data: object) {\n    //   return this.validate(this.sceneConfigValidator, data);\n    // }\n\n    // public validateMapConfig(data: object) {\n    //   return this.validate(this.mapConfigValidator, data);\n    // }\n  }, {\n    key: \"getLayerConfig\",\n    value: function getLayerConfig(layerId) {\n      // @ts-ignore\n      return this.layerConfigCache[layerId];\n    }\n  }, {\n    key: \"setLayerConfig\",\n    value: function setLayerConfig(sceneId, layerId, config) {\n      // @ts-ignore\n      this.layerConfigCache[layerId] = _objectSpread({}, merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));\n    }\n  }, {\n    key: \"getAttributeConfig\",\n    value: function getAttributeConfig(layerId) {\n      return this.layerAttributeConfigCache[layerId];\n    }\n  }, {\n    key: \"setAttributeConfig\",\n    value: function setAttributeConfig(layerId, attr) {\n      // TODO\n      this.layerAttributeConfigCache[layerId] = _objectSpread(_objectSpread({}, this.layerAttributeConfigCache[layerId]), attr);\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.sceneConfigCache = {};\n      this.layerConfigCache = {};\n    }\n\n    // @postConstruct()\n    // private registerSceneConfigSchemaValidator() {\n    //   this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n    //   this.mapConfigValidator = ajv.compile(mapConfigSchema);\n    // }\n\n    // private validate(\n    //   validateFunc: Ajv.ValidateFunction | undefined,\n    //   data: object,\n    // ) {\n    //   if (validateFunc) {\n    //     const valid = validateFunc(data);\n    //     if (!valid) {\n    //       return {\n    //         valid,\n    //         errors: validateFunc.errors,\n    //         errorText: ajv.errorsText(validateFunc.errors),\n    //       };\n    //     }\n    //   }\n    //   return {\n    //     valid: true,\n    //     errors: null,\n    //     errorText: null,\n    //   };\n    // }\n  }]);\n  return GlobalConfigService;\n}()) || _class);\nexport { GlobalConfigService as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}