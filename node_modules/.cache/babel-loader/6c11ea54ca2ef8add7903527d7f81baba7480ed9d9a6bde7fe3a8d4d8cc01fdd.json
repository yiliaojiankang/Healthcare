{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _dec, _class;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nimport { AttributeType, TextureUsage, gl } from '@antv/l7-core';\nimport { generateColorRamp, getCullFace, lodashUtil } from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport BaseModel from \"../../core/BaseModel\";\nimport { HeatmapTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_frag.glsl' */\nvar heatmap_3d_frag = \"layout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nin vec2 v_texCoord;\\nin float v_intensity;\\nout vec4 outputColor;\\n\\nvoid main(){\\n   \\n    float intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture),vec2(intensity, 0));\\n    outputColor = color;\\n    // gl_FragColor.a = color.a * smoothstep(0.1,0.2,intensity)* u_opacity;\\n   outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_vert.glsl' */\nvar heatmap_3d_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 14) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nout vec2 v_texCoord;\\nout float v_intensity;\\n\\nvec2 toBezier(float t, vec2 P0, vec2 P1, vec2 P2, vec2 P3) {\\n    float t2 = t * t;\\n    float one_minus_t = 1.0 - t;\\n    float one_minus_t2 = one_minus_t * one_minus_t;\\n    return (P0 * one_minus_t2 * one_minus_t + P1 * 3.0 * t * one_minus_t2 + P2 * 3.0 * t2 * one_minus_t + P3 * t2 * t);\\n}\\nvec2 toBezier(float t, vec4 p){\\n    return toBezier(t, vec2(0.0, 0.0), vec2(p.x, p.y), vec2(p.z, p.w), vec2(1.0, 1.0));\\n}\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n\\nvoid main() {\\n  v_texCoord = a_Uv;\\n\\n  vec2 pos = a_Uv * vec2(2.0) - vec2(1.0); // \\u5C06\\u539F\\u672C 0 -> 1 \\u7684 uv \\u8F6C\\u6362\\u4E3A -1 -> 1 \\u7684\\u6807\\u51C6\\u5750\\u6807\\u7A7A\\u95F4\\uFF08NDC\\uFF09\\n\\n  vec4 p1 = vec4(pos, 0.0, 1.0); // x/y \\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF08z == 0\\uFF09\\u53EF\\u4EE5\\u8BA4\\u4E3A\\u662F\\u4E09\\u7EF4\\u4E0A\\u7684\\u70B9\\u88AB\\u6295\\u5F71\\u5230\\u5E73\\u9762\\u540E\\u7684\\u70B9\\n\\tvec4 p2 = vec4(pos, 1.0, 1.0); // \\u5E73\\u884C\\u4E8Ex/y\\u5E73\\u9762\\u3001z==1 \\u7684\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\n\\n\\tvec4 inverseP1 = u_InverseViewProjectionMatrix * p1; // \\u6839\\u636E\\u89C6\\u56FE\\u6295\\u5F71\\u77E9\\u9635\\u7684\\u9006\\u77E9\\u9635\\u5E73\\u9762\\u4E0A\\u7684\\u53CD\\u7B97\\u51FA\\u4E09\\u7EF4\\u7A7A\\u95F4\\u4E2D\\u7684\\u70B9\\uFF08p1\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF09\\n\\tvec4 inverseP2 = u_InverseViewProjectionMatrix * p2;\\n\\n  inverseP1 = inverseP1 / inverseP1.w; // \\u5F52\\u4E00\\u5316\\u64CD\\u4F5C\\uFF08\\u5F52\\u4E00\\u5316\\u540E\\u4E3A\\u4E16\\u754C\\u5750\\u6807\\uFF09\\n\\tinverseP2 = inverseP2 / inverseP2.w;\\n\\n\\tfloat zPos = (0.0 - inverseP1.z) / (inverseP2.z - inverseP1.z); // ??\\n\\tvec4 position = inverseP1 + zPos * (inverseP2 - inverseP1);\\n\\n  vec4 b= vec4(0.5000, 0.0, 1.0, 0.5000);\\n  float fh;\\n\\n  v_intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n  fh = toBezier(v_intensity, b).y;\\n  gl_Position = u_ViewProjectionMatrixUncentered * vec4(position.xy, fh * project_pixel(50.), 1.0);\\n \\n}\\n\"; // 绘制平面热力的 shader\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_frag.glsl' */\nvar heatmap_frag = \"uniform sampler2D u_texture;        // \\u70ED\\u529B\\u5F3A\\u5EA6\\u56FE\\nuniform sampler2D u_colorTexture;   // \\u6839\\u636E\\u5F3A\\u5EA6\\u5206\\u5E03\\u7684\\u8272\\u5E26\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\nin vec2 v_texCoord;\\nout vec4 outputColor;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nfloat getBlurIndusty() {\\n    float vW = 2.0/ u_ViewportSize.x;\\n    float vH = 2.0/ u_ViewportSize.y;\\n    vec2 vUv = v_texCoord;\\n    float i11 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i12 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i13 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n\\n    float i21 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y) ).r;\\n    float i22 = texture(SAMPLER_2D(u_texture), vec2( vUv.x , vUv.y) ).r;\\n    float i23 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y) ).r;\\n\\n    float i31 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i32 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i33 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y-1.0*vH) ).r;\\n\\n    return(\\n        i11 + \\n        i12 + \\n        i13 + \\n        i21 + \\n        i21 + \\n        i22 + \\n        i23 + \\n        i31 + \\n        i32 + \\n        i33\\n        )/9.0;\\n}\\n\\n\\nvoid main(){\\n    // float intensity = texture(u_texture, v_texCoord).r;\\n    float intensity = getBlurIndusty();\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture), vec2(intensity, 0.0));\\n    outputColor = color;\\n    outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_vert.glsl' */\nvar heatmap_vert = \"\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 14) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nout vec2 v_texCoord;\\nvoid main() {\\n  v_texCoord = a_Uv;\\n  #ifdef VIEWPORT_ORIGIN_TL\\n    v_texCoord.y = 1.0 - v_texCoord.y;\\n  #endif\\n\\n  gl_Position = vec4(a_Position.xy, 0, 1.);\\n}\\n\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_frag.glsl' */\nvar heatmap_framebuffer_frag = \"layout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nin vec2 v_extrude;\\nin float v_weight;\\nout vec4 outputColor;\\n#define GAUSS_COEF  0.3989422804014327\\n\\nvoid main(){\\n    float d = -0.5 * 3.0 * 3.0 * dot(v_extrude, v_extrude);\\n    float val = v_weight * u_intensity * GAUSS_COEF * exp(d);\\n    outputColor = vec4(val, 1., 1., 1.);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_vert.glsl' */\nvar heatmap_framebuffer_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 10) in vec2 a_Dir;\\n\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nout vec2 v_extrude;\\nout float v_weight;\\n\\n#define GAUSS_COEF  0.3989422804014327\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main(){\\n    vec3 picking_color_placeholder = u_PickingColor;\\n\\n    v_weight = a_Size;\\n    float ZERO = 1.0 / 255.0 / 16.0;\\n    float extrude_x = a_Dir.x * 2.0 -1.0;\\n    float extrude_y = a_Dir.y * 2.0 -1.0;\\n    vec2 extrude_dir = normalize(vec2(extrude_x,extrude_y));\\n    float S = sqrt(-2.0 * log(ZERO / a_Size / u_intensity / GAUSS_COEF)) / 2.5;\\n    v_extrude = extrude_dir * S;\\n\\n    vec2 offset = project_pixel(v_extrude * u_radius);\\n    vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n\\n    // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n        gl_Position = u_Mvp * (vec4(project_pos.xy + offset, 0.0, 1.0));\\n    } else {\\n        gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n    }\\n}\\n\";\nimport { heatMap3DTriangulation } from \"../triangulation\";\nvar isEqual = lodashUtil.isEqual;\nvar HeatMapModel = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_BaseModel) {\n  _inherits(HeatMapModel, _BaseModel);\n  var _super = _createSuper(HeatMapModel);\n  function HeatMapModel() {\n    var _this;\n    _classCallCheck(this, HeatMapModel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"colorModelUniformBuffer\", []);\n    _defineProperty(_assertThisInitialized(_this), \"heat3DModelUniformBuffer\", []);\n    return _this;\n  }\n  _createClass(HeatMapModel, [{\n    key: \"prerender\",\n    value: function prerender() {\n      var _this2 = this;\n      var _this$rendererService = this.rendererService,\n        clear = _this$rendererService.clear,\n        useFramebuffer = _this$rendererService.useFramebuffer;\n      useFramebuffer(this.heatmapFramerBuffer, function () {\n        clear({\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0,\n          framebuffer: _this2.heatmapFramerBuffer\n        });\n        _this2.drawIntensityMode(); // 密度图\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(options) {\n      var _ref = this.layer.getLayerConfig(),\n        rampColors = _ref.rampColors;\n      if (!isEqual(this.preRampColors, rampColors)) {\n        this.updateColorTexture();\n      }\n      this.shapeType === 'heatmap' ? this.drawHeatMap(options) // 2D\n      : this.draw3DHeatMap(options); // 3D\n    }\n  }, {\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _shapeAttr$scale;\n        var _this$rendererService2, createFramebuffer, getViewportSize, createTexture2D, shapeAttr, shapeType, _getViewportSize, width, height;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$rendererService2 = this.rendererService, createFramebuffer = _this$rendererService2.createFramebuffer, getViewportSize = _this$rendererService2.getViewportSize, createTexture2D = _this$rendererService2.createTexture2D;\n              shapeAttr = this.styleAttributeService.getLayerStyleAttribute('shape');\n              shapeType = (shapeAttr === null || shapeAttr === void 0 || (_shapeAttr$scale = shapeAttr.scale) === null || _shapeAttr$scale === void 0 ? void 0 : _shapeAttr$scale.field) || 'heatmap';\n              this.shapeType = shapeType;\n              // 生成热力图密度图\n              _context.next = 6;\n              return this.buildHeatMapIntensity();\n            case 6:\n              this.intensityModel = _context.sent;\n              // 渲染到屏幕\n              this.colorModel = shapeType === 'heatmap' ? this.buildHeatmap() // 2D\n              : this.build3dHeatMap(); // 3D\n              _getViewportSize = getViewportSize(), width = _getViewportSize.width, height = _getViewportSize.height; // 初始化密度图纹理\n              this.heatmapTexture = createTexture2D({\n                width: Math.floor(width / 4),\n                height: Math.floor(height / 4),\n                wrapS: gl.CLAMP_TO_EDGE,\n                wrapT: gl.CLAMP_TO_EDGE,\n                min: gl.LINEAR,\n                mag: gl.LINEAR,\n                usage: TextureUsage.RENDER_TARGET\n              });\n              this.heatmapFramerBuffer = createFramebuffer({\n                color: this.heatmapTexture,\n                depth: true,\n                width: Math.floor(width / 4),\n                height: Math.floor(height / 4)\n              });\n              this.updateColorTexture();\n              return _context.abrupt(\"return\", [this.intensityModel, this.colorModel]);\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.initModels());\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'dir',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Dir',\n          shaderLocation: 10,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 1 : _feature$size;\n            return [size];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"buildHeatMapIntensity\",\n    value: function () {\n      var _buildHeatMapIntensity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.uniformBuffers = [this.rendererService.createBuffer({\n                // opacity\n                data: new Float32Array(4).fill(0),\n                // 长度需要大于等于 4\n                isUBO: true\n              })];\n              this.layer.triangulation = HeatmapTriangulation;\n              _context3.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: 'heatmapIntensity',\n                vertexShader: heatmap_framebuffer_vert,\n                fragmentShader: heatmap_framebuffer_frag,\n                triangulation: HeatmapTriangulation,\n                depth: {\n                  enable: false\n                },\n                cull: {\n                  enable: true,\n                  face: getCullFace(this.mapService.version)\n                }\n              });\n            case 4:\n              model = _context3.sent;\n              return _context3.abrupt(\"return\", model);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function buildHeatMapIntensity() {\n        return _buildHeatMapIntensity.apply(this, arguments);\n      }\n      return buildHeatMapIntensity;\n    }()\n  }, {\n    key: \"buildHeatmap\",\n    value: function buildHeatmap() {\n      this.shaderModuleService.registerModule('heatmapColor', {\n        vs: heatmap_vert,\n        fs: heatmap_frag\n      });\n      this.colorModelUniformBuffer = [this.rendererService.createBuffer({\n        // opacity\n        data: new Float32Array(4).fill(0),\n        // 长度需要大于等于 4\n        isUBO: true\n      })];\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('heatmapColor'),\n        vs = _this$shaderModuleSer.vs,\n        fs = _this$shaderModuleSer.fs,\n        uniforms = _this$shaderModuleSer.uniforms;\n      var _this$rendererService3 = this.rendererService,\n        createAttribute = _this$rendererService3.createAttribute,\n        createElements = _this$rendererService3.createElements,\n        createBuffer = _this$rendererService3.createBuffer,\n        createModel = _this$rendererService3.createModel;\n      return createModel({\n        vs: vs,\n        fs: fs,\n        uniformBuffers: [].concat(_toConsumableArray(this.colorModelUniformBuffer), _toConsumableArray(this.rendererService.uniformBuffers)),\n        attributes: {\n          a_Position: createAttribute({\n            shaderLocation: ShaderLocation.POSITION,\n            buffer: createBuffer({\n              data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n              type: gl.FLOAT\n            }),\n            size: 3\n          }),\n          a_Uv: createAttribute({\n            shaderLocation: ShaderLocation.UV,\n            buffer: createBuffer({\n              data: [0, 1, 1, 1, 0, 0, 1, 0],\n              type: gl.FLOAT\n            }),\n            size: 2\n          })\n        },\n        uniforms: _objectSpread({}, uniforms),\n        depth: {\n          enable: false\n        },\n        elements: createElements({\n          data: [0, 2, 1, 2, 3, 1],\n          type: gl.UNSIGNED_INT,\n          count: 6\n        })\n      });\n    }\n    // 绘制密度图\n  }, {\n    key: \"drawIntensityMode\",\n    value: function drawIntensityMode() {\n      var _this$intensityModel;\n      var _ref2 = this.layer.getLayerConfig(),\n        _ref2$intensity = _ref2.intensity,\n        intensity = _ref2$intensity === void 0 ? 10 : _ref2$intensity,\n        _ref2$radius = _ref2.radius,\n        radius = _ref2$radius === void 0 ? 5 : _ref2$radius;\n      var commonOptions = {\n        u_radius: radius,\n        u_intensity: intensity\n      };\n      this.uniformBuffers[0].subData({\n        offset: 0,\n        data: [radius, intensity]\n      });\n      this.layerService.beforeRenderData(this.layer);\n      this.layer.hooks.beforeRender.call();\n\n      // 绘制密度图\n      (_this$intensityModel = this.intensityModel) === null || _this$intensityModel === void 0 || _this$intensityModel.draw({\n        uniforms: commonOptions,\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.ONE,\n            srcAlpha: 1,\n            dstRGB: gl.ONE,\n            dstAlpha: 1\n          }\n        },\n        stencil: {\n          enable: false,\n          mask: 0xff,\n          func: {\n            cmp: 514,\n            // gl.EQUAL,\n            ref: 1,\n            mask: 0xff\n          }\n        }\n      });\n      this.layer.hooks.afterRender.call();\n    }\n  }, {\n    key: \"drawHeatMap\",\n    value: function drawHeatMap(options) {\n      var _this$colorModel;\n      var _ref3 = this.layer.getLayerConfig(),\n        _ref3$opacity = _ref3.opacity,\n        opacity = _ref3$opacity === void 0 ? 1.0 : _ref3$opacity;\n      var commonOptions = {\n        u_opacity: opacity,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer\n      };\n      var textures = [this.heatmapTexture, this.colorTexture];\n      this.colorModelUniformBuffer[0].subData({\n        offset: 0,\n        data: [opacity]\n      });\n      (_this$colorModel = this.colorModel) === null || _this$colorModel === void 0 || _this$colorModel.draw({\n        uniforms: commonOptions,\n        textures: textures,\n        blend: this.getBlend(),\n        stencil: this.getStencil(options)\n      });\n    }\n  }, {\n    key: \"draw3DHeatMap\",\n    value: function draw3DHeatMap(options) {\n      var _this$colorModel2;\n      var _ref4 = this.layer.getLayerConfig(),\n        _ref4$opacity = _ref4.opacity,\n        opacity = _ref4$opacity === void 0 ? 1.0 : _ref4$opacity;\n      var invert = mat4.create();\n      mat4.invert(invert, this.cameraService.getViewProjectionMatrixUncentered());\n      var commonOptions = {\n        u_opacity: opacity,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n        u_ViewProjectionMatrixUncentered: this.cameraService.getViewProjectionMatrixUncentered(),\n        u_InverseViewProjectionMatrix: _toConsumableArray(invert)\n      };\n      this.heat3DModelUniformBuffer[0].subData({\n        offset: 0,\n        data: [].concat(_toConsumableArray(commonOptions.u_ViewProjectionMatrixUncentered), _toConsumableArray(commonOptions.u_InverseViewProjectionMatrix), [opacity])\n      });\n      var textures = [this.heatmapTexture, this.colorTexture];\n      (_this$colorModel2 = this.colorModel) === null || _this$colorModel2 === void 0 || _this$colorModel2.draw({\n        uniforms: commonOptions,\n        textures: textures,\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.SRC_ALPHA,\n            srcAlpha: 1,\n            dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n            dstAlpha: 1\n          }\n        },\n        stencil: this.getStencil(options)\n      });\n    }\n  }, {\n    key: \"build3dHeatMap\",\n    value: function build3dHeatMap() {\n      var getViewportSize = this.rendererService.getViewportSize;\n      var _getViewportSize2 = getViewportSize(),\n        width = _getViewportSize2.width,\n        height = _getViewportSize2.height;\n      var triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n      this.shaderModuleService.registerModule('heatmap3dColor', {\n        vs: heatmap_3d_vert,\n        fs: heatmap_3d_frag\n      });\n      this.heat3DModelUniformBuffer = [this.rendererService.createBuffer({\n        // opacity\n        data: new Float32Array(16 * 2 + 4).fill(0),\n        // 长度需要大于等于 4\n        isUBO: true\n      })];\n      var _this$shaderModuleSer2 = this.shaderModuleService.getModule('heatmap3dColor'),\n        vs = _this$shaderModuleSer2.vs,\n        fs = _this$shaderModuleSer2.fs,\n        uniforms = _this$shaderModuleSer2.uniforms;\n      var _this$rendererService4 = this.rendererService,\n        createAttribute = _this$rendererService4.createAttribute,\n        createElements = _this$rendererService4.createElements,\n        createBuffer = _this$rendererService4.createBuffer,\n        createModel = _this$rendererService4.createModel;\n      return createModel({\n        vs: vs,\n        fs: fs,\n        attributes: {\n          a_Position: createAttribute({\n            shaderLocation: ShaderLocation.POSITION,\n            buffer: createBuffer({\n              data: triangulation.vertices,\n              type: gl.FLOAT\n            }),\n            size: 3\n          }),\n          a_Uv: createAttribute({\n            shaderLocation: ShaderLocation.UV,\n            buffer: createBuffer({\n              data: triangulation.uvs,\n              type: gl.FLOAT\n            }),\n            size: 2\n          })\n        },\n        primitive: gl.TRIANGLES,\n        uniformBuffers: [].concat(_toConsumableArray(this.heat3DModelUniformBuffer), _toConsumableArray(this.rendererService.uniformBuffers)),\n        uniforms: _objectSpread({}, uniforms),\n        depth: {\n          enable: true\n        },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.SRC_ALPHA,\n            srcAlpha: 1,\n            dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n            dstAlpha: 1\n          }\n        },\n        elements: createElements({\n          data: triangulation.indices,\n          type: gl.UNSIGNED_INT,\n          count: triangulation.indices.length\n        })\n      });\n    }\n  }, {\n    key: \"updateColorTexture\",\n    value: function updateColorTexture() {\n      var createTexture2D = this.rendererService.createTexture2D;\n      if (this.texture) {\n        this.texture.destroy();\n      }\n      var _ref5 = this.layer.getLayerConfig(),\n        rampColors = _ref5.rampColors;\n      var imageData = generateColorRamp(rampColors);\n      this.colorTexture = createTexture2D({\n        data: imageData.data,\n        usage: TextureUsage.SAMPLED,\n        width: imageData.width,\n        height: imageData.height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.NEAREST,\n        mag: gl.NEAREST,\n        flipY: false,\n        unorm: true\n      });\n      this.preRampColors = rampColors;\n    }\n  }]);\n  return HeatMapModel;\n}(BaseModel)) || _class);\nexport { HeatMapModel as default };","map":{"version":3,"names":["_objectSpread","_toConsumableArray","_asyncToGenerator","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_dec","_class","_regeneratorRuntime","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AttributeType","TextureUsage","gl","generateColorRamp","getCullFace","lodashUtil","mat4","injectable","BaseModel","HeatmapTriangulation","heatmap_3d_frag","heatmap_3d_vert","heatmap_frag","heatmap_vert","ShaderLocation","heatmap_framebuffer_frag","heatmap_framebuffer_vert","heatMap3DTriangulation","isEqual","HeatMapModel","_BaseModel","_super","_this","_len","length","args","Array","_key","concat","key","value","prerender","_this2","_this$rendererService","rendererService","clear","useFramebuffer","heatmapFramerBuffer","color","depth","stencil","framebuffer","drawIntensityMode","render","options","_ref","layer","getLayerConfig","rampColors","preRampColors","updateColorTexture","shapeType","drawHeatMap","draw3DHeatMap","getUninforms","Error","_initModels","mark","_callee","_shapeAttr$scale","_this$rendererService2","createFramebuffer","getViewportSize","createTexture2D","shapeAttr","_getViewportSize","width","height","wrap","_callee$","_context","prev","next","styleAttributeService","getLayerStyleAttribute","scale","field","buildHeatMapIntensity","intensityModel","sent","colorModel","buildHeatmap","build3dHeatMap","heatmapTexture","Math","floor","wrapS","CLAMP_TO_EDGE","wrapT","min","LINEAR","mag","usage","RENDER_TARGET","abrupt","stop","initModels","_buildModels","_callee2","_callee2$","_context2","buildModels","registerBuiltinAttributes","registerStyleAttribute","name","type","Attribute","descriptor","shaderLocation","buffer","DYNAMIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","SIZE","_feature$size","_buildHeatMapIntensity","_callee3","model","_callee3$","_context3","uniformBuffers","createBuffer","Float32Array","fill","isUBO","triangulation","buildLayerModel","moduleName","vertexShader","fragmentShader","enable","cull","face","mapService","version","shaderModuleService","registerModule","vs","fs","colorModelUniformBuffer","_this$shaderModuleSer","getModule","uniforms","_this$rendererService3","createAttribute","createElements","createModel","attributes","a_Position","POSITION","a_Uv","UV","elements","UNSIGNED_INT","count","_this$intensityModel","_ref2","_ref2$intensity","intensity","_ref2$radius","radius","commonOptions","u_radius","u_intensity","subData","offset","layerService","beforeRenderData","hooks","beforeRender","draw","blend","func","srcRGB","ONE","srcAlpha","dstRGB","dstAlpha","mask","cmp","ref","afterRender","_this$colorModel","_ref3","_ref3$opacity","opacity","u_opacity","u_colorTexture","colorTexture","u_texture","textures","getBlend","getStencil","_this$colorModel2","_ref4","_ref4$opacity","invert","create","cameraService","getViewProjectionMatrixUncentered","u_ViewProjectionMatrixUncentered","u_InverseViewProjectionMatrix","heat3DModelUniformBuffer","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_getViewportSize2","_this$shaderModuleSer2","_this$rendererService4","vertices","uvs","primitive","TRIANGLES","indices","texture","destroy","_ref5","imageData","SAMPLED","NEAREST","flipY","unorm","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/heatmap/models/heatmap.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _dec, _class;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { AttributeType, TextureUsage, gl } from '@antv/l7-core';\nimport { generateColorRamp, getCullFace, lodashUtil } from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport BaseModel from \"../../core/BaseModel\";\nimport { HeatmapTriangulation } from \"../../core/triangulation\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_frag.glsl' */\nvar heatmap_3d_frag = \"layout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nin vec2 v_texCoord;\\nin float v_intensity;\\nout vec4 outputColor;\\n\\nvoid main(){\\n   \\n    float intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture),vec2(intensity, 0));\\n    outputColor = color;\\n    // gl_FragColor.a = color.a * smoothstep(0.1,0.2,intensity)* u_opacity;\\n   outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_3d_vert.glsl' */\nvar heatmap_3d_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 14) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  mat4 u_ViewProjectionMatrixUncentered;\\n  mat4 u_InverseViewProjectionMatrix;\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\n\\nout vec2 v_texCoord;\\nout float v_intensity;\\n\\nvec2 toBezier(float t, vec2 P0, vec2 P1, vec2 P2, vec2 P3) {\\n    float t2 = t * t;\\n    float one_minus_t = 1.0 - t;\\n    float one_minus_t2 = one_minus_t * one_minus_t;\\n    return (P0 * one_minus_t2 * one_minus_t + P1 * 3.0 * t * one_minus_t2 + P2 * 3.0 * t2 * one_minus_t + P3 * t2 * t);\\n}\\nvec2 toBezier(float t, vec4 p){\\n    return toBezier(t, vec2(0.0, 0.0), vec2(p.x, p.y), vec2(p.z, p.w), vec2(1.0, 1.0));\\n}\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n\\nvoid main() {\\n  v_texCoord = a_Uv;\\n\\n  vec2 pos = a_Uv * vec2(2.0) - vec2(1.0); // \\u5C06\\u539F\\u672C 0 -> 1 \\u7684 uv \\u8F6C\\u6362\\u4E3A -1 -> 1 \\u7684\\u6807\\u51C6\\u5750\\u6807\\u7A7A\\u95F4\\uFF08NDC\\uFF09\\n\\n  vec4 p1 = vec4(pos, 0.0, 1.0); // x/y \\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF08z == 0\\uFF09\\u53EF\\u4EE5\\u8BA4\\u4E3A\\u662F\\u4E09\\u7EF4\\u4E0A\\u7684\\u70B9\\u88AB\\u6295\\u5F71\\u5230\\u5E73\\u9762\\u540E\\u7684\\u70B9\\n\\tvec4 p2 = vec4(pos, 1.0, 1.0); // \\u5E73\\u884C\\u4E8Ex/y\\u5E73\\u9762\\u3001z==1 \\u7684\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\n\\n\\tvec4 inverseP1 = u_InverseViewProjectionMatrix * p1; // \\u6839\\u636E\\u89C6\\u56FE\\u6295\\u5F71\\u77E9\\u9635\\u7684\\u9006\\u77E9\\u9635\\u5E73\\u9762\\u4E0A\\u7684\\u53CD\\u7B97\\u51FA\\u4E09\\u7EF4\\u7A7A\\u95F4\\u4E2D\\u7684\\u70B9\\uFF08p1\\u5E73\\u9762\\u4E0A\\u7684\\u70B9\\uFF09\\n\\tvec4 inverseP2 = u_InverseViewProjectionMatrix * p2;\\n\\n  inverseP1 = inverseP1 / inverseP1.w; // \\u5F52\\u4E00\\u5316\\u64CD\\u4F5C\\uFF08\\u5F52\\u4E00\\u5316\\u540E\\u4E3A\\u4E16\\u754C\\u5750\\u6807\\uFF09\\n\\tinverseP2 = inverseP2 / inverseP2.w;\\n\\n\\tfloat zPos = (0.0 - inverseP1.z) / (inverseP2.z - inverseP1.z); // ??\\n\\tvec4 position = inverseP1 + zPos * (inverseP2 - inverseP1);\\n\\n  vec4 b= vec4(0.5000, 0.0, 1.0, 0.5000);\\n  float fh;\\n\\n  v_intensity = texture(SAMPLER_2D(u_texture), v_texCoord).r;\\n  fh = toBezier(v_intensity, b).y;\\n  gl_Position = u_ViewProjectionMatrixUncentered * vec4(position.xy, fh * project_pixel(50.), 1.0);\\n \\n}\\n\"; // 绘制平面热力的 shader\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_frag.glsl' */\nvar heatmap_frag = \"uniform sampler2D u_texture;        // \\u70ED\\u529B\\u5F3A\\u5EA6\\u56FE\\nuniform sampler2D u_colorTexture;   // \\u6839\\u636E\\u5F3A\\u5EA6\\u5206\\u5E03\\u7684\\u8272\\u5E26\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\nin vec2 v_texCoord;\\nout vec4 outputColor;\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nfloat getBlurIndusty() {\\n    float vW = 2.0/ u_ViewportSize.x;\\n    float vH = 2.0/ u_ViewportSize.y;\\n    vec2 vUv = v_texCoord;\\n    float i11 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i12 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y + 1.0 * vH) ).r;\\n    float i13 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y + 1.0 * vH) ).r;\\n\\n    float i21 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y) ).r;\\n    float i22 = texture(SAMPLER_2D(u_texture), vec2( vUv.x , vUv.y) ).r;\\n    float i23 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y) ).r;\\n\\n    float i31 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 1.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i32 = texture(SAMPLER_2D(u_texture), vec2( vUv.x - 0.0 * vW, vUv.y-1.0*vH) ).r;\\n    float i33 = texture(SAMPLER_2D(u_texture), vec2( vUv.x + 1.0 * vW, vUv.y-1.0*vH) ).r;\\n\\n    return(\\n        i11 + \\n        i12 + \\n        i13 + \\n        i21 + \\n        i21 + \\n        i22 + \\n        i23 + \\n        i31 + \\n        i32 + \\n        i33\\n        )/9.0;\\n}\\n\\n\\nvoid main(){\\n    // float intensity = texture(u_texture, v_texCoord).r;\\n    float intensity = getBlurIndusty();\\n    vec4 color = texture(SAMPLER_2D(u_colorTexture), vec2(intensity, 0.0));\\n    outputColor = color;\\n    outputColor.a = color.a * smoothstep(0.,0.1,intensity) * u_opacity;\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_vert.glsl' */\nvar heatmap_vert = \"\\nlayout(location = 0) in vec3 a_Position;\\nlayout(location = 14) in vec2 a_Uv;\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_opacity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n  float u_common_uniforms_padding3;\\n};\\n\\n#pragma include \\\"scene_uniforms\\\"\\n\\nout vec2 v_texCoord;\\nvoid main() {\\n  v_texCoord = a_Uv;\\n  #ifdef VIEWPORT_ORIGIN_TL\\n    v_texCoord.y = 1.0 - v_texCoord.y;\\n  #endif\\n\\n  gl_Position = vec4(a_Position.xy, 0, 1.);\\n}\\n\";\nimport { ShaderLocation } from \"../../core/CommonStyleAttribute\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_frag.glsl' */\nvar heatmap_framebuffer_frag = \"layout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nin vec2 v_extrude;\\nin float v_weight;\\nout vec4 outputColor;\\n#define GAUSS_COEF  0.3989422804014327\\n\\nvoid main(){\\n    float d = -0.5 * 3.0 * 3.0 * dot(v_extrude, v_extrude);\\n    float val = v_weight * u_intensity * GAUSS_COEF * exp(d);\\n    outputColor = vec4(val, 1., 1., 1.);\\n}\\n\";\n/* babel-plugin-inline-import '../shaders/heatmap/heatmap_framebuffer_vert.glsl' */\nvar heatmap_framebuffer_vert = \"layout(location = 0) in vec3 a_Position;\\nlayout(location = 9) in float a_Size;\\nlayout(location = 10) in vec2 a_Dir;\\n\\n\\nlayout(std140) uniform commonUniforms {\\n  float u_radius;\\n  float u_intensity;\\n  float u_common_uniforms_padding1;\\n  float u_common_uniforms_padding2;\\n};\\n\\nout vec2 v_extrude;\\nout float v_weight;\\n\\n#define GAUSS_COEF  0.3989422804014327\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main(){\\n    vec3 picking_color_placeholder = u_PickingColor;\\n\\n    v_weight = a_Size;\\n    float ZERO = 1.0 / 255.0 / 16.0;\\n    float extrude_x = a_Dir.x * 2.0 -1.0;\\n    float extrude_y = a_Dir.y * 2.0 -1.0;\\n    vec2 extrude_dir = normalize(vec2(extrude_x,extrude_y));\\n    float S = sqrt(-2.0 * log(ZERO / a_Size / u_intensity / GAUSS_COEF)) / 2.5;\\n    v_extrude = extrude_dir * S;\\n\\n    vec2 offset = project_pixel(v_extrude * u_radius);\\n    vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n\\n    // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n        gl_Position = u_Mvp * (vec4(project_pos.xy + offset, 0.0, 1.0));\\n    } else {\\n        gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n    }\\n}\\n\";\nimport { heatMap3DTriangulation } from \"../triangulation\";\nvar isEqual = lodashUtil.isEqual;\nvar HeatMapModel = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_BaseModel) {\n  _inherits(HeatMapModel, _BaseModel);\n  var _super = _createSuper(HeatMapModel);\n  function HeatMapModel() {\n    var _this;\n    _classCallCheck(this, HeatMapModel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"colorModelUniformBuffer\", []);\n    _defineProperty(_assertThisInitialized(_this), \"heat3DModelUniformBuffer\", []);\n    return _this;\n  }\n  _createClass(HeatMapModel, [{\n    key: \"prerender\",\n    value: function prerender() {\n      var _this2 = this;\n      var _this$rendererService = this.rendererService,\n        clear = _this$rendererService.clear,\n        useFramebuffer = _this$rendererService.useFramebuffer;\n      useFramebuffer(this.heatmapFramerBuffer, function () {\n        clear({\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0,\n          framebuffer: _this2.heatmapFramerBuffer\n        });\n        _this2.drawIntensityMode(); // 密度图\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(options) {\n      var _ref = this.layer.getLayerConfig(),\n        rampColors = _ref.rampColors;\n      if (!isEqual(this.preRampColors, rampColors)) {\n        this.updateColorTexture();\n      }\n      this.shapeType === 'heatmap' ? this.drawHeatMap(options) // 2D\n      : this.draw3DHeatMap(options); // 3D\n    }\n  }, {\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"initModels\",\n    value: function () {\n      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _shapeAttr$scale;\n        var _this$rendererService2, createFramebuffer, getViewportSize, createTexture2D, shapeAttr, shapeType, _getViewportSize, width, height;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _this$rendererService2 = this.rendererService, createFramebuffer = _this$rendererService2.createFramebuffer, getViewportSize = _this$rendererService2.getViewportSize, createTexture2D = _this$rendererService2.createTexture2D;\n              shapeAttr = this.styleAttributeService.getLayerStyleAttribute('shape');\n              shapeType = (shapeAttr === null || shapeAttr === void 0 || (_shapeAttr$scale = shapeAttr.scale) === null || _shapeAttr$scale === void 0 ? void 0 : _shapeAttr$scale.field) || 'heatmap';\n              this.shapeType = shapeType;\n              // 生成热力图密度图\n              _context.next = 6;\n              return this.buildHeatMapIntensity();\n            case 6:\n              this.intensityModel = _context.sent;\n              // 渲染到屏幕\n              this.colorModel = shapeType === 'heatmap' ? this.buildHeatmap() // 2D\n              : this.build3dHeatMap(); // 3D\n              _getViewportSize = getViewportSize(), width = _getViewportSize.width, height = _getViewportSize.height; // 初始化密度图纹理\n              this.heatmapTexture = createTexture2D({\n                width: Math.floor(width / 4),\n                height: Math.floor(height / 4),\n                wrapS: gl.CLAMP_TO_EDGE,\n                wrapT: gl.CLAMP_TO_EDGE,\n                min: gl.LINEAR,\n                mag: gl.LINEAR,\n                usage: TextureUsage.RENDER_TARGET\n              });\n              this.heatmapFramerBuffer = createFramebuffer({\n                color: this.heatmapTexture,\n                depth: true,\n                width: Math.floor(width / 4),\n                height: Math.floor(height / 4)\n              });\n              this.updateColorTexture();\n              return _context.abrupt(\"return\", [this.intensityModel, this.colorModel]);\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initModels() {\n        return _initModels.apply(this, arguments);\n      }\n      return initModels;\n    }()\n  }, {\n    key: \"buildModels\",\n    value: function () {\n      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.initModels());\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function buildModels() {\n        return _buildModels.apply(this, arguments);\n      }\n      return buildModels;\n    }()\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'dir',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Dir',\n          shaderLocation: 10,\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          shaderLocation: ShaderLocation.SIZE,\n          buffer: {\n            // give the WebGL driver a hint that this buffer may change\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature) {\n            var _feature$size = feature.size,\n              size = _feature$size === void 0 ? 1 : _feature$size;\n            return [size];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"buildHeatMapIntensity\",\n    value: function () {\n      var _buildHeatMapIntensity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var model;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.uniformBuffers = [this.rendererService.createBuffer({\n                // opacity\n                data: new Float32Array(4).fill(0),\n                // 长度需要大于等于 4\n                isUBO: true\n              })];\n              this.layer.triangulation = HeatmapTriangulation;\n              _context3.next = 4;\n              return this.layer.buildLayerModel({\n                moduleName: 'heatmapIntensity',\n                vertexShader: heatmap_framebuffer_vert,\n                fragmentShader: heatmap_framebuffer_frag,\n                triangulation: HeatmapTriangulation,\n                depth: {\n                  enable: false\n                },\n                cull: {\n                  enable: true,\n                  face: getCullFace(this.mapService.version)\n                }\n              });\n            case 4:\n              model = _context3.sent;\n              return _context3.abrupt(\"return\", model);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function buildHeatMapIntensity() {\n        return _buildHeatMapIntensity.apply(this, arguments);\n      }\n      return buildHeatMapIntensity;\n    }()\n  }, {\n    key: \"buildHeatmap\",\n    value: function buildHeatmap() {\n      this.shaderModuleService.registerModule('heatmapColor', {\n        vs: heatmap_vert,\n        fs: heatmap_frag\n      });\n      this.colorModelUniformBuffer = [this.rendererService.createBuffer({\n        // opacity\n        data: new Float32Array(4).fill(0),\n        // 长度需要大于等于 4\n        isUBO: true\n      })];\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('heatmapColor'),\n        vs = _this$shaderModuleSer.vs,\n        fs = _this$shaderModuleSer.fs,\n        uniforms = _this$shaderModuleSer.uniforms;\n      var _this$rendererService3 = this.rendererService,\n        createAttribute = _this$rendererService3.createAttribute,\n        createElements = _this$rendererService3.createElements,\n        createBuffer = _this$rendererService3.createBuffer,\n        createModel = _this$rendererService3.createModel;\n      return createModel({\n        vs: vs,\n        fs: fs,\n        uniformBuffers: [].concat(_toConsumableArray(this.colorModelUniformBuffer), _toConsumableArray(this.rendererService.uniformBuffers)),\n        attributes: {\n          a_Position: createAttribute({\n            shaderLocation: ShaderLocation.POSITION,\n            buffer: createBuffer({\n              data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n              type: gl.FLOAT\n            }),\n            size: 3\n          }),\n          a_Uv: createAttribute({\n            shaderLocation: ShaderLocation.UV,\n            buffer: createBuffer({\n              data: [0, 1, 1, 1, 0, 0, 1, 0],\n              type: gl.FLOAT\n            }),\n            size: 2\n          })\n        },\n        uniforms: _objectSpread({}, uniforms),\n        depth: {\n          enable: false\n        },\n        elements: createElements({\n          data: [0, 2, 1, 2, 3, 1],\n          type: gl.UNSIGNED_INT,\n          count: 6\n        })\n      });\n    }\n    // 绘制密度图\n  }, {\n    key: \"drawIntensityMode\",\n    value: function drawIntensityMode() {\n      var _this$intensityModel;\n      var _ref2 = this.layer.getLayerConfig(),\n        _ref2$intensity = _ref2.intensity,\n        intensity = _ref2$intensity === void 0 ? 10 : _ref2$intensity,\n        _ref2$radius = _ref2.radius,\n        radius = _ref2$radius === void 0 ? 5 : _ref2$radius;\n      var commonOptions = {\n        u_radius: radius,\n        u_intensity: intensity\n      };\n      this.uniformBuffers[0].subData({\n        offset: 0,\n        data: [radius, intensity]\n      });\n      this.layerService.beforeRenderData(this.layer);\n      this.layer.hooks.beforeRender.call();\n\n      // 绘制密度图\n      (_this$intensityModel = this.intensityModel) === null || _this$intensityModel === void 0 || _this$intensityModel.draw({\n        uniforms: commonOptions,\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.ONE,\n            srcAlpha: 1,\n            dstRGB: gl.ONE,\n            dstAlpha: 1\n          }\n        },\n        stencil: {\n          enable: false,\n          mask: 0xff,\n          func: {\n            cmp: 514,\n            // gl.EQUAL,\n            ref: 1,\n            mask: 0xff\n          }\n        }\n      });\n      this.layer.hooks.afterRender.call();\n    }\n  }, {\n    key: \"drawHeatMap\",\n    value: function drawHeatMap(options) {\n      var _this$colorModel;\n      var _ref3 = this.layer.getLayerConfig(),\n        _ref3$opacity = _ref3.opacity,\n        opacity = _ref3$opacity === void 0 ? 1.0 : _ref3$opacity;\n      var commonOptions = {\n        u_opacity: opacity,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer\n      };\n      var textures = [this.heatmapTexture, this.colorTexture];\n      this.colorModelUniformBuffer[0].subData({\n        offset: 0,\n        data: [opacity]\n      });\n      (_this$colorModel = this.colorModel) === null || _this$colorModel === void 0 || _this$colorModel.draw({\n        uniforms: commonOptions,\n        textures: textures,\n        blend: this.getBlend(),\n        stencil: this.getStencil(options)\n      });\n    }\n  }, {\n    key: \"draw3DHeatMap\",\n    value: function draw3DHeatMap(options) {\n      var _this$colorModel2;\n      var _ref4 = this.layer.getLayerConfig(),\n        _ref4$opacity = _ref4.opacity,\n        opacity = _ref4$opacity === void 0 ? 1.0 : _ref4$opacity;\n      var invert = mat4.create();\n      mat4.invert(invert, this.cameraService.getViewProjectionMatrixUncentered());\n      var commonOptions = {\n        u_opacity: opacity,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n        u_ViewProjectionMatrixUncentered: this.cameraService.getViewProjectionMatrixUncentered(),\n        u_InverseViewProjectionMatrix: _toConsumableArray(invert)\n      };\n      this.heat3DModelUniformBuffer[0].subData({\n        offset: 0,\n        data: [].concat(_toConsumableArray(commonOptions.u_ViewProjectionMatrixUncentered), _toConsumableArray(commonOptions.u_InverseViewProjectionMatrix), [opacity])\n      });\n      var textures = [this.heatmapTexture, this.colorTexture];\n      (_this$colorModel2 = this.colorModel) === null || _this$colorModel2 === void 0 || _this$colorModel2.draw({\n        uniforms: commonOptions,\n        textures: textures,\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.SRC_ALPHA,\n            srcAlpha: 1,\n            dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n            dstAlpha: 1\n          }\n        },\n        stencil: this.getStencil(options)\n      });\n    }\n  }, {\n    key: \"build3dHeatMap\",\n    value: function build3dHeatMap() {\n      var getViewportSize = this.rendererService.getViewportSize;\n      var _getViewportSize2 = getViewportSize(),\n        width = _getViewportSize2.width,\n        height = _getViewportSize2.height;\n      var triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n      this.shaderModuleService.registerModule('heatmap3dColor', {\n        vs: heatmap_3d_vert,\n        fs: heatmap_3d_frag\n      });\n      this.heat3DModelUniformBuffer = [this.rendererService.createBuffer({\n        // opacity\n        data: new Float32Array(16 * 2 + 4).fill(0),\n        // 长度需要大于等于 4\n        isUBO: true\n      })];\n      var _this$shaderModuleSer2 = this.shaderModuleService.getModule('heatmap3dColor'),\n        vs = _this$shaderModuleSer2.vs,\n        fs = _this$shaderModuleSer2.fs,\n        uniforms = _this$shaderModuleSer2.uniforms;\n      var _this$rendererService4 = this.rendererService,\n        createAttribute = _this$rendererService4.createAttribute,\n        createElements = _this$rendererService4.createElements,\n        createBuffer = _this$rendererService4.createBuffer,\n        createModel = _this$rendererService4.createModel;\n      return createModel({\n        vs: vs,\n        fs: fs,\n        attributes: {\n          a_Position: createAttribute({\n            shaderLocation: ShaderLocation.POSITION,\n            buffer: createBuffer({\n              data: triangulation.vertices,\n              type: gl.FLOAT\n            }),\n            size: 3\n          }),\n          a_Uv: createAttribute({\n            shaderLocation: ShaderLocation.UV,\n            buffer: createBuffer({\n              data: triangulation.uvs,\n              type: gl.FLOAT\n            }),\n            size: 2\n          })\n        },\n        primitive: gl.TRIANGLES,\n        uniformBuffers: [].concat(_toConsumableArray(this.heat3DModelUniformBuffer), _toConsumableArray(this.rendererService.uniformBuffers)),\n        uniforms: _objectSpread({}, uniforms),\n        depth: {\n          enable: true\n        },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: gl.SRC_ALPHA,\n            srcAlpha: 1,\n            dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n            dstAlpha: 1\n          }\n        },\n        elements: createElements({\n          data: triangulation.indices,\n          type: gl.UNSIGNED_INT,\n          count: triangulation.indices.length\n        })\n      });\n    }\n  }, {\n    key: \"updateColorTexture\",\n    value: function updateColorTexture() {\n      var createTexture2D = this.rendererService.createTexture2D;\n      if (this.texture) {\n        this.texture.destroy();\n      }\n      var _ref5 = this.layer.getLayerConfig(),\n        rampColors = _ref5.rampColors;\n      var imageData = generateColorRamp(rampColors);\n      this.colorTexture = createTexture2D({\n        data: imageData.data,\n        usage: TextureUsage.SAMPLED,\n        width: imageData.width,\n        height: imageData.height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.NEAREST,\n        mag: gl.NEAREST,\n        flipY: false,\n        unorm: true\n      });\n      this.preRampColors = rampColors;\n    }\n  }]);\n  return HeatMapModel;\n}(BaseModel)) || _class);\nexport { HeatMapModel as default };"],"mappings":";;;AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,OAAOC,kBAAkB,MAAM,8CAA8C;AAC7E,OAAOC,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,eAAe,MAAM,2CAA2C;AACvE,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,sBAAsB,MAAM,kDAAkD;AACrF,OAAOC,SAAS,MAAM,qCAAqC;AAC3D,OAAOC,0BAA0B,MAAM,sDAAsD;AAC7F,OAAOC,eAAe,MAAM,2CAA2C;AACvE,OAAOC,eAAe,MAAM,2CAA2C;AACvE,IAAIC,IAAI,EAAEC,MAAM;AAChB,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,SAASC,YAAYA,CAACC,OAAO,EAAE;EAAE,IAAIC,yBAAyB,GAAGC,yBAAyB,CAAC,CAAC;EAAE,OAAO,SAASC,oBAAoBA,CAAA,EAAG;IAAE,IAAIC,KAAK,GAAGV,eAAe,CAACM,OAAO,CAAC;MAAEK,MAAM;IAAE,IAAIJ,yBAAyB,EAAE;MAAE,IAAIK,SAAS,GAAGZ,eAAe,CAAC,IAAI,CAAC,CAACa,WAAW;MAAEF,MAAM,GAAGG,OAAO,CAACC,SAAS,CAACL,KAAK,EAAEM,SAAS,EAAEJ,SAAS,CAAC;IAAE,CAAC,MAAM;MAAED,MAAM,GAAGD,KAAK,CAACO,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;IAAE;IAAE,OAAOjB,0BAA0B,CAAC,IAAI,EAAEY,MAAM,CAAC;EAAE,CAAC;AAAE;AACxa,SAASH,yBAAyBA,CAAA,EAAG;EAAE,IAAI,OAAOM,OAAO,KAAK,WAAW,IAAI,CAACA,OAAO,CAACC,SAAS,EAAE,OAAO,KAAK;EAAE,IAAID,OAAO,CAACC,SAAS,CAACG,IAAI,EAAE,OAAO,KAAK;EAAE,IAAI,OAAOC,KAAK,KAAK,UAAU,EAAE,OAAO,IAAI;EAAE,IAAI;IAAEC,OAAO,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAACT,OAAO,CAACC,SAAS,CAACK,OAAO,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;IAAE,OAAO,IAAI;EAAE,CAAC,CAAC,OAAOI,CAAC,EAAE;IAAE,OAAO,KAAK;EAAE;AAAE;AACxU,SAASC,aAAa,EAAEC,YAAY,EAAEC,EAAE,QAAQ,eAAe;AAC/D,SAASC,iBAAiB,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAC3E,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,UAAU,QAAQ,WAAW;AACtC,OAAO,kBAAkB;AACzB,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D;AACA,IAAIC,eAAe,GAAG,iuBAAiuB;AACvvB;AACA,IAAIC,eAAe,GAAG,00EAA00E,CAAC,CAAC;AACl2E;AACA,IAAIC,YAAY,GAAG,+zDAA+zD;AACl1D;AACA,IAAIC,YAAY,GAAG,yeAAye;AAC5f,SAASC,cAAc,QAAQ,iCAAiC;AAChE;AACA,IAAIC,wBAAwB,GAAG,ocAAoc;AACne;AACA,IAAIC,wBAAwB,GAAG,wzCAAwzC;AACv1C,SAASC,sBAAsB,QAAQ,kBAAkB;AACzD,IAAIC,OAAO,GAAGb,UAAU,CAACa,OAAO;AAChC,IAAIC,YAAY,IAAI1C,IAAI,GAAG8B,UAAU,CAAC,CAAC,EAAE9B,IAAI,CAACC,MAAM,GAAG,aAAa,UAAU0C,UAAU,EAAE;EACxF/C,SAAS,CAAC8C,YAAY,EAAEC,UAAU,CAAC;EACnC,IAAIC,MAAM,GAAGzC,YAAY,CAACuC,YAAY,CAAC;EACvC,SAASA,YAAYA,CAAA,EAAG;IACtB,IAAIG,KAAK;IACTpD,eAAe,CAAC,IAAI,EAAEiD,YAAY,CAAC;IACnC,KAAK,IAAII,IAAI,GAAGhC,SAAS,CAACiC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACH,IAAI,CAAC,EAAEI,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGJ,IAAI,EAAEI,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAGpC,SAAS,CAACoC,IAAI,CAAC;IAC9B;IACAL,KAAK,GAAGD,MAAM,CAACvB,IAAI,CAACN,KAAK,CAAC6B,MAAM,EAAE,CAAC,IAAI,CAAC,CAACO,MAAM,CAACH,IAAI,CAAC,CAAC;IACtDjD,eAAe,CAACJ,sBAAsB,CAACkD,KAAK,CAAC,EAAE,yBAAyB,EAAE,EAAE,CAAC;IAC7E9C,eAAe,CAACJ,sBAAsB,CAACkD,KAAK,CAAC,EAAE,0BAA0B,EAAE,EAAE,CAAC;IAC9E,OAAOA,KAAK;EACd;EACAnD,YAAY,CAACgD,YAAY,EAAE,CAAC;IAC1BU,GAAG,EAAE,WAAW;IAChBC,KAAK,EAAE,SAASC,SAASA,CAAA,EAAG;MAC1B,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAIC,qBAAqB,GAAG,IAAI,CAACC,eAAe;QAC9CC,KAAK,GAAGF,qBAAqB,CAACE,KAAK;QACnCC,cAAc,GAAGH,qBAAqB,CAACG,cAAc;MACvDA,cAAc,CAAC,IAAI,CAACC,mBAAmB,EAAE,YAAY;QACnDF,KAAK,CAAC;UACJG,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACnBC,KAAK,EAAE,CAAC;UACRC,OAAO,EAAE,CAAC;UACVC,WAAW,EAAET,MAAM,CAACK;QACtB,CAAC,CAAC;QACFL,MAAM,CAACU,iBAAiB,CAAC,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IACDb,GAAG,EAAE,QAAQ;IACbC,KAAK,EAAE,SAASa,MAAMA,CAACC,OAAO,EAAE;MAC9B,IAAIC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,cAAc,CAAC,CAAC;QACpCC,UAAU,GAAGH,IAAI,CAACG,UAAU;MAC9B,IAAI,CAAC9B,OAAO,CAAC,IAAI,CAAC+B,aAAa,EAAED,UAAU,CAAC,EAAE;QAC5C,IAAI,CAACE,kBAAkB,CAAC,CAAC;MAC3B;MACA,IAAI,CAACC,SAAS,KAAK,SAAS,GAAG,IAAI,CAACC,WAAW,CAACR,OAAO,CAAC,CAAC;MAAA,EACvD,IAAI,CAACS,aAAa,CAACT,OAAO,CAAC,CAAC,CAAC;IACjC;EACF,CAAC,EAAE;IACDf,GAAG,EAAE,cAAc;IACnBC,KAAK,EAAE,SAASwB,YAAYA,CAAA,EAAG;MAC7B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC,EAAE;IACD1B,GAAG,EAAE,YAAY;IACjBC,KAAK,EAAE,YAAY;MACjB,IAAI0B,WAAW,GAAGvF,iBAAiB,EAAE,aAAaU,mBAAmB,CAAC8E,IAAI,CAAC,SAASC,OAAOA,CAAA,EAAG;QAC5F,IAAIC,gBAAgB;QACpB,IAAIC,sBAAsB,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,SAAS,EAAEb,SAAS,EAAEc,gBAAgB,EAAEC,KAAK,EAAEC,MAAM;QACtI,OAAOxF,mBAAmB,CAACyF,IAAI,CAAC,SAASC,QAAQA,CAACC,QAAQ,EAAE;UAC1D,OAAO,CAAC,EAAE,QAAQA,QAAQ,CAACC,IAAI,GAAGD,QAAQ,CAACE,IAAI;YAC7C,KAAK,CAAC;cACJZ,sBAAsB,GAAG,IAAI,CAAC1B,eAAe,EAAE2B,iBAAiB,GAAGD,sBAAsB,CAACC,iBAAiB,EAAEC,eAAe,GAAGF,sBAAsB,CAACE,eAAe,EAAEC,eAAe,GAAGH,sBAAsB,CAACG,eAAe;cAC/NC,SAAS,GAAG,IAAI,CAACS,qBAAqB,CAACC,sBAAsB,CAAC,OAAO,CAAC;cACtEvB,SAAS,GAAG,CAACa,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,IAAI,CAACL,gBAAgB,GAAGK,SAAS,CAACW,KAAK,MAAM,IAAI,IAAIhB,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACiB,KAAK,KAAK,SAAS;cACvL,IAAI,CAACzB,SAAS,GAAGA,SAAS;cAC1B;cACAmB,QAAQ,CAACE,IAAI,GAAG,CAAC;cACjB,OAAO,IAAI,CAACK,qBAAqB,CAAC,CAAC;YACrC,KAAK,CAAC;cACJ,IAAI,CAACC,cAAc,GAAGR,QAAQ,CAACS,IAAI;cACnC;cACA,IAAI,CAACC,UAAU,GAAG7B,SAAS,KAAK,SAAS,GAAG,IAAI,CAAC8B,YAAY,CAAC,CAAC,CAAC;cAAA,EAC9D,IAAI,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;cACzBjB,gBAAgB,GAAGH,eAAe,CAAC,CAAC,EAAEI,KAAK,GAAGD,gBAAgB,CAACC,KAAK,EAAEC,MAAM,GAAGF,gBAAgB,CAACE,MAAM,CAAC,CAAC;cACxG,IAAI,CAACgB,cAAc,GAAGpB,eAAe,CAAC;gBACpCG,KAAK,EAAEkB,IAAI,CAACC,KAAK,CAACnB,KAAK,GAAG,CAAC,CAAC;gBAC5BC,MAAM,EAAEiB,IAAI,CAACC,KAAK,CAAClB,MAAM,GAAG,CAAC,CAAC;gBAC9BmB,KAAK,EAAEpF,EAAE,CAACqF,aAAa;gBACvBC,KAAK,EAAEtF,EAAE,CAACqF,aAAa;gBACvBE,GAAG,EAAEvF,EAAE,CAACwF,MAAM;gBACdC,GAAG,EAAEzF,EAAE,CAACwF,MAAM;gBACdE,KAAK,EAAE3F,YAAY,CAAC4F;cACtB,CAAC,CAAC;cACF,IAAI,CAACxD,mBAAmB,GAAGwB,iBAAiB,CAAC;gBAC3CvB,KAAK,EAAE,IAAI,CAAC6C,cAAc;gBAC1B5C,KAAK,EAAE,IAAI;gBACX2B,KAAK,EAAEkB,IAAI,CAACC,KAAK,CAACnB,KAAK,GAAG,CAAC,CAAC;gBAC5BC,MAAM,EAAEiB,IAAI,CAACC,KAAK,CAAClB,MAAM,GAAG,CAAC;cAC/B,CAAC,CAAC;cACF,IAAI,CAACjB,kBAAkB,CAAC,CAAC;cACzB,OAAOoB,QAAQ,CAACwB,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAChB,cAAc,EAAE,IAAI,CAACE,UAAU,CAAC,CAAC;YAC1E,KAAK,EAAE;YACP,KAAK,KAAK;cACR,OAAOV,QAAQ,CAACyB,IAAI,CAAC,CAAC;UAC1B;QACF,CAAC,EAAErC,OAAO,EAAE,IAAI,CAAC;MACnB,CAAC,CAAC,CAAC;MACH,SAASsC,UAAUA,CAAA,EAAG;QACpB,OAAOxC,WAAW,CAAChE,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MAC3C;MACA,OAAOyG,UAAU;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE;IACDnE,GAAG,EAAE,aAAa;IAClBC,KAAK,EAAE,YAAY;MACjB,IAAImE,YAAY,GAAGhI,iBAAiB,EAAE,aAAaU,mBAAmB,CAAC8E,IAAI,CAAC,SAASyC,QAAQA,CAAA,EAAG;QAC9F,OAAOvH,mBAAmB,CAACyF,IAAI,CAAC,SAAS+B,SAASA,CAACC,SAAS,EAAE;UAC5D,OAAO,CAAC,EAAE,QAAQA,SAAS,CAAC7B,IAAI,GAAG6B,SAAS,CAAC5B,IAAI;YAC/C,KAAK,CAAC;cACJ,OAAO4B,SAAS,CAACN,MAAM,CAAC,QAAQ,EAAE,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC;YACtD,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOI,SAAS,CAACL,IAAI,CAAC,CAAC;UAC3B;QACF,CAAC,EAAEG,QAAQ,EAAE,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,SAASG,WAAWA,CAAA,EAAG;QACrB,OAAOJ,YAAY,CAACzG,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MAC5C;MACA,OAAO8G,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC,EAAE;IACDxE,GAAG,EAAE,2BAA2B;IAChCC,KAAK,EAAE,SAASwE,yBAAyBA,CAAA,EAAG;MAC1C,IAAI,CAAC7B,qBAAqB,CAAC8B,sBAAsB,CAAC;QAChDC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAEzG,aAAa,CAAC0G,SAAS;QAC7BC,UAAU,EAAE;UACVH,IAAI,EAAE,OAAO;UACbI,cAAc,EAAE,EAAE;UAClBC,MAAM,EAAE;YACNjB,KAAK,EAAE1F,EAAE,CAAC4G,YAAY;YACtBC,IAAI,EAAE,EAAE;YACRN,IAAI,EAAEvG,EAAE,CAAC8G;UACX,CAAC;UACDC,IAAI,EAAE,CAAC;UACPC,MAAM,EAAE,SAASA,MAAMA,CAACC,OAAO,EAAEC,UAAU,EAAEC,MAAM,EAAE;YACnD,OAAO,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;UAC/B;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAAC5C,qBAAqB,CAAC8B,sBAAsB,CAAC;QAChDC,IAAI,EAAE,MAAM;QACZC,IAAI,EAAEzG,aAAa,CAAC0G,SAAS;QAC7BC,UAAU,EAAE;UACVH,IAAI,EAAE,QAAQ;UACdI,cAAc,EAAE9F,cAAc,CAACwG,IAAI;UACnCT,MAAM,EAAE;YACN;YACAjB,KAAK,EAAE1F,EAAE,CAAC4G,YAAY;YACtBC,IAAI,EAAE,EAAE;YACRN,IAAI,EAAEvG,EAAE,CAAC8G;UACX,CAAC;UACDC,IAAI,EAAE,CAAC;UACPC,MAAM,EAAE,SAASA,MAAMA,CAACC,OAAO,EAAE;YAC/B,IAAII,aAAa,GAAGJ,OAAO,CAACF,IAAI;cAC9BA,IAAI,GAAGM,aAAa,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGA,aAAa;YACrD,OAAO,CAACN,IAAI,CAAC;UACf;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IACDpF,GAAG,EAAE,uBAAuB;IAC5BC,KAAK,EAAE,YAAY;MACjB,IAAI0F,sBAAsB,GAAGvJ,iBAAiB,EAAE,aAAaU,mBAAmB,CAAC8E,IAAI,CAAC,SAASgE,QAAQA,CAAA,EAAG;QACxG,IAAIC,KAAK;QACT,OAAO/I,mBAAmB,CAACyF,IAAI,CAAC,SAASuD,SAASA,CAACC,SAAS,EAAE;UAC5D,OAAO,CAAC,EAAE,QAAQA,SAAS,CAACrD,IAAI,GAAGqD,SAAS,CAACpD,IAAI;YAC/C,KAAK,CAAC;cACJ,IAAI,CAACqD,cAAc,GAAG,CAAC,IAAI,CAAC3F,eAAe,CAAC4F,YAAY,CAAC;gBACvD;gBACAf,IAAI,EAAE,IAAIgB,YAAY,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;gBACjC;gBACAC,KAAK,EAAE;cACT,CAAC,CAAC,CAAC;cACH,IAAI,CAACnF,KAAK,CAACoF,aAAa,GAAGzH,oBAAoB;cAC/CmH,SAAS,CAACpD,IAAI,GAAG,CAAC;cAClB,OAAO,IAAI,CAAC1B,KAAK,CAACqF,eAAe,CAAC;gBAChCC,UAAU,EAAE,kBAAkB;gBAC9BC,YAAY,EAAErH,wBAAwB;gBACtCsH,cAAc,EAAEvH,wBAAwB;gBACxCmH,aAAa,EAAEzH,oBAAoB;gBACnC8B,KAAK,EAAE;kBACLgG,MAAM,EAAE;gBACV,CAAC;gBACDC,IAAI,EAAE;kBACJD,MAAM,EAAE,IAAI;kBACZE,IAAI,EAAErI,WAAW,CAAC,IAAI,CAACsI,UAAU,CAACC,OAAO;gBAC3C;cACF,CAAC,CAAC;YACJ,KAAK,CAAC;cACJjB,KAAK,GAAGE,SAAS,CAAC7C,IAAI;cACtB,OAAO6C,SAAS,CAAC9B,MAAM,CAAC,QAAQ,EAAE4B,KAAK,CAAC;YAC1C,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOE,SAAS,CAAC7B,IAAI,CAAC,CAAC;UAC3B;QACF,CAAC,EAAE0B,QAAQ,EAAE,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,SAAS5C,qBAAqBA,CAAA,EAAG;QAC/B,OAAO2C,sBAAsB,CAAChI,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MACtD;MACA,OAAOsF,qBAAqB;IAC9B,CAAC,CAAC;EACJ,CAAC,EAAE;IACDhD,GAAG,EAAE,cAAc;IACnBC,KAAK,EAAE,SAASmD,YAAYA,CAAA,EAAG;MAC7B,IAAI,CAAC2D,mBAAmB,CAACC,cAAc,CAAC,cAAc,EAAE;QACtDC,EAAE,EAAEjI,YAAY;QAChBkI,EAAE,EAAEnI;MACN,CAAC,CAAC;MACF,IAAI,CAACoI,uBAAuB,GAAG,CAAC,IAAI,CAAC9G,eAAe,CAAC4F,YAAY,CAAC;QAChE;QACAf,IAAI,EAAE,IAAIgB,YAAY,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QACjC;QACAC,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;MACH,IAAIgB,qBAAqB,GAAG,IAAI,CAACL,mBAAmB,CAACM,SAAS,CAAC,cAAc,CAAC;QAC5EJ,EAAE,GAAGG,qBAAqB,CAACH,EAAE;QAC7BC,EAAE,GAAGE,qBAAqB,CAACF,EAAE;QAC7BI,QAAQ,GAAGF,qBAAqB,CAACE,QAAQ;MAC3C,IAAIC,sBAAsB,GAAG,IAAI,CAAClH,eAAe;QAC/CmH,eAAe,GAAGD,sBAAsB,CAACC,eAAe;QACxDC,cAAc,GAAGF,sBAAsB,CAACE,cAAc;QACtDxB,YAAY,GAAGsB,sBAAsB,CAACtB,YAAY;QAClDyB,WAAW,GAAGH,sBAAsB,CAACG,WAAW;MAClD,OAAOA,WAAW,CAAC;QACjBT,EAAE,EAAEA,EAAE;QACNC,EAAE,EAAEA,EAAE;QACNlB,cAAc,EAAE,EAAE,CAACjG,MAAM,CAAC5D,kBAAkB,CAAC,IAAI,CAACgL,uBAAuB,CAAC,EAAEhL,kBAAkB,CAAC,IAAI,CAACkE,eAAe,CAAC2F,cAAc,CAAC,CAAC;QACpI2B,UAAU,EAAE;UACVC,UAAU,EAAEJ,eAAe,CAAC;YAC1BzC,cAAc,EAAE9F,cAAc,CAAC4I,QAAQ;YACvC7C,MAAM,EAAEiB,YAAY,CAAC;cACnBf,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;cAC9CN,IAAI,EAAEvG,EAAE,CAAC8G;YACX,CAAC,CAAC;YACFC,IAAI,EAAE;UACR,CAAC,CAAC;UACF0C,IAAI,EAAEN,eAAe,CAAC;YACpBzC,cAAc,EAAE9F,cAAc,CAAC8I,EAAE;YACjC/C,MAAM,EAAEiB,YAAY,CAAC;cACnBf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;cAC9BN,IAAI,EAAEvG,EAAE,CAAC8G;YACX,CAAC,CAAC;YACFC,IAAI,EAAE;UACR,CAAC;QACH,CAAC;QACDkC,QAAQ,EAAEpL,aAAa,CAAC,CAAC,CAAC,EAAEoL,QAAQ,CAAC;QACrC5G,KAAK,EAAE;UACLgG,MAAM,EAAE;QACV,CAAC;QACDsB,QAAQ,EAAEP,cAAc,CAAC;UACvBvC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UACxBN,IAAI,EAAEvG,EAAE,CAAC4J,YAAY;UACrBC,KAAK,EAAE;QACT,CAAC;MACH,CAAC,CAAC;IACJ;IACA;EACF,CAAC,EAAE;IACDlI,GAAG,EAAE,mBAAmB;IACxBC,KAAK,EAAE,SAASY,iBAAiBA,CAAA,EAAG;MAClC,IAAIsH,oBAAoB;MACxB,IAAIC,KAAK,GAAG,IAAI,CAACnH,KAAK,CAACC,cAAc,CAAC,CAAC;QACrCmH,eAAe,GAAGD,KAAK,CAACE,SAAS;QACjCA,SAAS,GAAGD,eAAe,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,eAAe;QAC7DE,YAAY,GAAGH,KAAK,CAACI,MAAM;QAC3BA,MAAM,GAAGD,YAAY,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGA,YAAY;MACrD,IAAIE,aAAa,GAAG;QAClBC,QAAQ,EAAEF,MAAM;QAChBG,WAAW,EAAEL;MACf,CAAC;MACD,IAAI,CAACtC,cAAc,CAAC,CAAC,CAAC,CAAC4C,OAAO,CAAC;QAC7BC,MAAM,EAAE,CAAC;QACT3D,IAAI,EAAE,CAACsD,MAAM,EAAEF,SAAS;MAC1B,CAAC,CAAC;MACF,IAAI,CAACQ,YAAY,CAACC,gBAAgB,CAAC,IAAI,CAAC9H,KAAK,CAAC;MAC9C,IAAI,CAACA,KAAK,CAAC+H,KAAK,CAACC,YAAY,CAAChL,IAAI,CAAC,CAAC;;MAEpC;MACA,CAACkK,oBAAoB,GAAG,IAAI,CAAClF,cAAc,MAAM,IAAI,IAAIkF,oBAAoB,KAAK,KAAK,CAAC,IAAIA,oBAAoB,CAACe,IAAI,CAAC;QACpH5B,QAAQ,EAAEmB,aAAa;QACvBU,KAAK,EAAE;UACLzC,MAAM,EAAE,IAAI;UACZ0C,IAAI,EAAE;YACJC,MAAM,EAAEhL,EAAE,CAACiL,GAAG;YACdC,QAAQ,EAAE,CAAC;YACXC,MAAM,EAAEnL,EAAE,CAACiL,GAAG;YACdG,QAAQ,EAAE;UACZ;QACF,CAAC;QACD9I,OAAO,EAAE;UACP+F,MAAM,EAAE,KAAK;UACbgD,IAAI,EAAE,IAAI;UACVN,IAAI,EAAE;YACJO,GAAG,EAAE,GAAG;YACR;YACAC,GAAG,EAAE,CAAC;YACNF,IAAI,EAAE;UACR;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAACzI,KAAK,CAAC+H,KAAK,CAACa,WAAW,CAAC5L,IAAI,CAAC,CAAC;IACrC;EACF,CAAC,EAAE;IACD+B,GAAG,EAAE,aAAa;IAClBC,KAAK,EAAE,SAASsB,WAAWA,CAACR,OAAO,EAAE;MACnC,IAAI+I,gBAAgB;MACpB,IAAIC,KAAK,GAAG,IAAI,CAAC9I,KAAK,CAACC,cAAc,CAAC,CAAC;QACrC8I,aAAa,GAAGD,KAAK,CAACE,OAAO;QAC7BA,OAAO,GAAGD,aAAa,KAAK,KAAK,CAAC,GAAG,GAAG,GAAGA,aAAa;MAC1D,IAAIvB,aAAa,GAAG;QAClByB,SAAS,EAAED,OAAO;QAClBE,cAAc,EAAE,IAAI,CAACC,YAAY;QACjCC,SAAS,EAAE,IAAI,CAAC7J;MAClB,CAAC;MACD,IAAI8J,QAAQ,GAAG,CAAC,IAAI,CAAChH,cAAc,EAAE,IAAI,CAAC8G,YAAY,CAAC;MACvD,IAAI,CAACjD,uBAAuB,CAAC,CAAC,CAAC,CAACyB,OAAO,CAAC;QACtCC,MAAM,EAAE,CAAC;QACT3D,IAAI,EAAE,CAAC+E,OAAO;MAChB,CAAC,CAAC;MACF,CAACH,gBAAgB,GAAG,IAAI,CAAC3G,UAAU,MAAM,IAAI,IAAI2G,gBAAgB,KAAK,KAAK,CAAC,IAAIA,gBAAgB,CAACZ,IAAI,CAAC;QACpG5B,QAAQ,EAAEmB,aAAa;QACvB6B,QAAQ,EAAEA,QAAQ;QAClBnB,KAAK,EAAE,IAAI,CAACoB,QAAQ,CAAC,CAAC;QACtB5J,OAAO,EAAE,IAAI,CAAC6J,UAAU,CAACzJ,OAAO;MAClC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IACDf,GAAG,EAAE,eAAe;IACpBC,KAAK,EAAE,SAASuB,aAAaA,CAACT,OAAO,EAAE;MACrC,IAAI0J,iBAAiB;MACrB,IAAIC,KAAK,GAAG,IAAI,CAACzJ,KAAK,CAACC,cAAc,CAAC,CAAC;QACrCyJ,aAAa,GAAGD,KAAK,CAACT,OAAO;QAC7BA,OAAO,GAAGU,aAAa,KAAK,KAAK,CAAC,GAAG,GAAG,GAAGA,aAAa;MAC1D,IAAIC,MAAM,GAAGnM,IAAI,CAACoM,MAAM,CAAC,CAAC;MAC1BpM,IAAI,CAACmM,MAAM,CAACA,MAAM,EAAE,IAAI,CAACE,aAAa,CAACC,iCAAiC,CAAC,CAAC,CAAC;MAC3E,IAAItC,aAAa,GAAG;QAClByB,SAAS,EAAED,OAAO;QAClBE,cAAc,EAAE,IAAI,CAACC,YAAY;QACjCC,SAAS,EAAE,IAAI,CAAC7J,mBAAmB;QACnCwK,gCAAgC,EAAE,IAAI,CAACF,aAAa,CAACC,iCAAiC,CAAC,CAAC;QACxFE,6BAA6B,EAAE9O,kBAAkB,CAACyO,MAAM;MAC1D,CAAC;MACD,IAAI,CAACM,wBAAwB,CAAC,CAAC,CAAC,CAACtC,OAAO,CAAC;QACvCC,MAAM,EAAE,CAAC;QACT3D,IAAI,EAAE,EAAE,CAACnF,MAAM,CAAC5D,kBAAkB,CAACsM,aAAa,CAACuC,gCAAgC,CAAC,EAAE7O,kBAAkB,CAACsM,aAAa,CAACwC,6BAA6B,CAAC,EAAE,CAAChB,OAAO,CAAC;MAChK,CAAC,CAAC;MACF,IAAIK,QAAQ,GAAG,CAAC,IAAI,CAAChH,cAAc,EAAE,IAAI,CAAC8G,YAAY,CAAC;MACvD,CAACK,iBAAiB,GAAG,IAAI,CAACtH,UAAU,MAAM,IAAI,IAAIsH,iBAAiB,KAAK,KAAK,CAAC,IAAIA,iBAAiB,CAACvB,IAAI,CAAC;QACvG5B,QAAQ,EAAEmB,aAAa;QACvB6B,QAAQ,EAAEA,QAAQ;QAClBnB,KAAK,EAAE;UACLzC,MAAM,EAAE,IAAI;UACZ0C,IAAI,EAAE;YACJC,MAAM,EAAEhL,EAAE,CAAC8M,SAAS;YACpB5B,QAAQ,EAAE,CAAC;YACXC,MAAM,EAAEnL,EAAE,CAAC+M,mBAAmB;YAC9B3B,QAAQ,EAAE;UACZ;QACF,CAAC;QACD9I,OAAO,EAAE,IAAI,CAAC6J,UAAU,CAACzJ,OAAO;MAClC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IACDf,GAAG,EAAE,gBAAgB;IACrBC,KAAK,EAAE,SAASoD,cAAcA,CAAA,EAAG;MAC/B,IAAIpB,eAAe,GAAG,IAAI,CAAC5B,eAAe,CAAC4B,eAAe;MAC1D,IAAIoJ,iBAAiB,GAAGpJ,eAAe,CAAC,CAAC;QACvCI,KAAK,GAAGgJ,iBAAiB,CAAChJ,KAAK;QAC/BC,MAAM,GAAG+I,iBAAiB,CAAC/I,MAAM;MACnC,IAAI+D,aAAa,GAAGjH,sBAAsB,CAACiD,KAAK,GAAG,GAAG,EAAEC,MAAM,GAAG,GAAG,CAAC;MACrE,IAAI,CAACyE,mBAAmB,CAACC,cAAc,CAAC,gBAAgB,EAAE;QACxDC,EAAE,EAAEnI,eAAe;QACnBoI,EAAE,EAAErI;MACN,CAAC,CAAC;MACF,IAAI,CAACqM,wBAAwB,GAAG,CAAC,IAAI,CAAC7K,eAAe,CAAC4F,YAAY,CAAC;QACjE;QACAf,IAAI,EAAE,IAAIgB,YAAY,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QAC1C;QACAC,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;MACH,IAAIkF,sBAAsB,GAAG,IAAI,CAACvE,mBAAmB,CAACM,SAAS,CAAC,gBAAgB,CAAC;QAC/EJ,EAAE,GAAGqE,sBAAsB,CAACrE,EAAE;QAC9BC,EAAE,GAAGoE,sBAAsB,CAACpE,EAAE;QAC9BI,QAAQ,GAAGgE,sBAAsB,CAAChE,QAAQ;MAC5C,IAAIiE,sBAAsB,GAAG,IAAI,CAAClL,eAAe;QAC/CmH,eAAe,GAAG+D,sBAAsB,CAAC/D,eAAe;QACxDC,cAAc,GAAG8D,sBAAsB,CAAC9D,cAAc;QACtDxB,YAAY,GAAGsF,sBAAsB,CAACtF,YAAY;QAClDyB,WAAW,GAAG6D,sBAAsB,CAAC7D,WAAW;MAClD,OAAOA,WAAW,CAAC;QACjBT,EAAE,EAAEA,EAAE;QACNC,EAAE,EAAEA,EAAE;QACNS,UAAU,EAAE;UACVC,UAAU,EAAEJ,eAAe,CAAC;YAC1BzC,cAAc,EAAE9F,cAAc,CAAC4I,QAAQ;YACvC7C,MAAM,EAAEiB,YAAY,CAAC;cACnBf,IAAI,EAAEmB,aAAa,CAACmF,QAAQ;cAC5B5G,IAAI,EAAEvG,EAAE,CAAC8G;YACX,CAAC,CAAC;YACFC,IAAI,EAAE;UACR,CAAC,CAAC;UACF0C,IAAI,EAAEN,eAAe,CAAC;YACpBzC,cAAc,EAAE9F,cAAc,CAAC8I,EAAE;YACjC/C,MAAM,EAAEiB,YAAY,CAAC;cACnBf,IAAI,EAAEmB,aAAa,CAACoF,GAAG;cACvB7G,IAAI,EAAEvG,EAAE,CAAC8G;YACX,CAAC,CAAC;YACFC,IAAI,EAAE;UACR,CAAC;QACH,CAAC;QACDsG,SAAS,EAAErN,EAAE,CAACsN,SAAS;QACvB3F,cAAc,EAAE,EAAE,CAACjG,MAAM,CAAC5D,kBAAkB,CAAC,IAAI,CAAC+O,wBAAwB,CAAC,EAAE/O,kBAAkB,CAAC,IAAI,CAACkE,eAAe,CAAC2F,cAAc,CAAC,CAAC;QACrIsB,QAAQ,EAAEpL,aAAa,CAAC,CAAC,CAAC,EAAEoL,QAAQ,CAAC;QACrC5G,KAAK,EAAE;UACLgG,MAAM,EAAE;QACV,CAAC;QACDyC,KAAK,EAAE;UACLzC,MAAM,EAAE,IAAI;UACZ0C,IAAI,EAAE;YACJC,MAAM,EAAEhL,EAAE,CAAC8M,SAAS;YACpB5B,QAAQ,EAAE,CAAC;YACXC,MAAM,EAAEnL,EAAE,CAAC+M,mBAAmB;YAC9B3B,QAAQ,EAAE;UACZ;QACF,CAAC;QACDzB,QAAQ,EAAEP,cAAc,CAAC;UACvBvC,IAAI,EAAEmB,aAAa,CAACuF,OAAO;UAC3BhH,IAAI,EAAEvG,EAAE,CAAC4J,YAAY;UACrBC,KAAK,EAAE7B,aAAa,CAACuF,OAAO,CAACjM;QAC/B,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC,EAAE;IACDK,GAAG,EAAE,oBAAoB;IACzBC,KAAK,EAAE,SAASoB,kBAAkBA,CAAA,EAAG;MACnC,IAAIa,eAAe,GAAG,IAAI,CAAC7B,eAAe,CAAC6B,eAAe;MAC1D,IAAI,IAAI,CAAC2J,OAAO,EAAE;QAChB,IAAI,CAACA,OAAO,CAACC,OAAO,CAAC,CAAC;MACxB;MACA,IAAIC,KAAK,GAAG,IAAI,CAAC9K,KAAK,CAACC,cAAc,CAAC,CAAC;QACrCC,UAAU,GAAG4K,KAAK,CAAC5K,UAAU;MAC/B,IAAI6K,SAAS,GAAG1N,iBAAiB,CAAC6C,UAAU,CAAC;MAC7C,IAAI,CAACiJ,YAAY,GAAGlI,eAAe,CAAC;QAClCgD,IAAI,EAAE8G,SAAS,CAAC9G,IAAI;QACpBnB,KAAK,EAAE3F,YAAY,CAAC6N,OAAO;QAC3B5J,KAAK,EAAE2J,SAAS,CAAC3J,KAAK;QACtBC,MAAM,EAAE0J,SAAS,CAAC1J,MAAM;QACxBmB,KAAK,EAAEpF,EAAE,CAACqF,aAAa;QACvBC,KAAK,EAAEtF,EAAE,CAACqF,aAAa;QACvBE,GAAG,EAAEvF,EAAE,CAAC6N,OAAO;QACfpI,GAAG,EAAEzF,EAAE,CAAC6N,OAAO;QACfC,KAAK,EAAE,KAAK;QACZC,KAAK,EAAE;MACT,CAAC,CAAC;MACF,IAAI,CAAChL,aAAa,GAAGD,UAAU;IACjC;EACF,CAAC,CAAC,CAAC;EACH,OAAO7B,YAAY;AACrB,CAAC,CAACX,SAAS,CAAC,CAAC,IAAI9B,MAAM,CAAC;AACxB,SAASyC,YAAY,IAAI+M,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}