{"ast":null,"code":"/**\n * @file Functions that used to find similar element between two graph\n * @file.zh-CN 在两个图中查找相似元素的函数\n */\n\n/**\n * @description Check if two graphs are contains the same nodes.\n * @description.zh-CN 检查两个图是否包含相同的节点。\n */\nexport var containSameNodes = function containSameNodes(aGraph, bGraph) {\n  var aNodes = aGraph.nodes();\n  for (var i = 0; i < aNodes.length; i++) {\n    var aNode = aNodes[i];\n    if (bGraph.hasNode(aNode)) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * @description Check if two graphs are contains the same edges.\n * @description.zh-CN 检查两个图是否包含相同的边。\n */\n\nexport var containSameEdges = function containSameEdges(aGraph, bGraph) {\n  var aEdges = aGraph.edges();\n  for (var i = 0; i < aEdges.length; i++) {\n    var aEdge = aEdges[i];\n    if (bGraph.hasEdge(aEdge.v, aEdge.w, aEdge.name)) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * @description get same nodes in two graphs.\n * @description.zh-CN 获取两个图中相同的节点。\n */\n\nexport var getSameNodes = function getSameNodes(aGraph, bGraph) {\n  var aNodes = aGraph.nodes();\n  var sameNodes = aNodes.filter(function (aNode) {\n    return bGraph.hasNode(aNode);\n  });\n  return sameNodes;\n};\n/**\n * @description get same edges in two graphs.\n * @description.zh-CN 获取两个图中相同的边。\n */\n\nexport var getSameEdges = function getSameEdges(aGraph, bGraph) {\n  var aEdges = aGraph.edges();\n  var sameEdges = aEdges.filter(function (aEdge) {\n    return bGraph.hasEdge(aEdge.v, aEdge.w, aEdge.name);\n  });\n  return sameEdges;\n};\n/**\n * @description Check if two graphs'option are the same.\n * @description.zh-CN 检查两个图的选项是否相同。\n */\n\nexport var isGraphOptionSame = function isGraphOptionSame(aGraph, bGraph) {\n  return aGraph.isCompound() === bGraph.isCompound() && aGraph.isDirected() === bGraph.isDirected() && aGraph.isMultigraph() === bGraph.isMultigraph();\n};\n/**\n * @description Check if a graph contains all nodes in another graph.\n * @description.zh-CN 检查一个图是否包含另一个图的所有节点。\n */\n\nexport var containAllSameNodes = function containAllSameNodes(aGraph, bGraph) {\n  var sameNodes = getSameNodes(aGraph, bGraph);\n  return sameNodes.length === aGraph.nodes().length;\n};\n/**\n * @description Check if a graph contains all edges in another graph.\n * @description.zh-CN 检查一个图是否包含另一个图的所有边。\n */\n\nexport var containAllSameEdges = function containAllSameEdges(aGraph, bGraph) {\n  var sameEdges = getSameEdges(aGraph, bGraph);\n  return sameEdges.length === aGraph.edges().length;\n};\n/**\n * @description Check if two graphs are the same.\n * @description.zh-CN 检查两个图是否相同。\n */\n\nexport var isGraphSame = function isGraphSame(aGraph, bGraph) {\n  return isGraphOptionSame(aGraph, bGraph) && aGraph.nodeCount() === bGraph.nodeCount() && containAllSameNodes(aGraph, bGraph) && aGraph.edgeCount() === bGraph.edgeCount() && containAllSameEdges(aGraph, bGraph);\n};\n/**\n * @description Check if one graph is the subgraph of another graph.\n * @description.zh-CN 检查一个图是否是另一个图的子图。\n */\n\nexport var isGraphContainsAnother = function isGraphContainsAnother(originGraph, targetGraph) {\n  return containAllSameNodes(originGraph, targetGraph) && containAllSameEdges(originGraph, targetGraph);\n};","map":{"version":3,"names":["containSameNodes","aGraph","bGraph","aNodes","nodes","i","length","aNode","hasNode","containSameEdges","aEdges","edges","aEdge","hasEdge","v","w","name","getSameNodes","sameNodes","filter","getSameEdges","sameEdges","isGraphOptionSame","isCompound","isDirected","isMultigraph","containAllSameNodes","containAllSameEdges","isGraphSame","nodeCount","edgeCount","isGraphContainsAnother","originGraph","targetGraph"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/graphlib/es/comparision/contain.js"],"sourcesContent":["/**\n * @file Functions that used to find similar element between two graph\n * @file.zh-CN 在两个图中查找相似元素的函数\n */\n\n/**\n * @description Check if two graphs are contains the same nodes.\n * @description.zh-CN 检查两个图是否包含相同的节点。\n */\nexport var containSameNodes = function containSameNodes(aGraph, bGraph) {\n  var aNodes = aGraph.nodes();\n\n  for (var i = 0; i < aNodes.length; i++) {\n    var aNode = aNodes[i];\n\n    if (bGraph.hasNode(aNode)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * @description Check if two graphs are contains the same edges.\n * @description.zh-CN 检查两个图是否包含相同的边。\n */\n\nexport var containSameEdges = function containSameEdges(aGraph, bGraph) {\n  var aEdges = aGraph.edges();\n\n  for (var i = 0; i < aEdges.length; i++) {\n    var aEdge = aEdges[i];\n\n    if (bGraph.hasEdge(aEdge.v, aEdge.w, aEdge.name)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * @description get same nodes in two graphs.\n * @description.zh-CN 获取两个图中相同的节点。\n */\n\nexport var getSameNodes = function getSameNodes(aGraph, bGraph) {\n  var aNodes = aGraph.nodes();\n  var sameNodes = aNodes.filter(function (aNode) {\n    return bGraph.hasNode(aNode);\n  });\n  return sameNodes;\n};\n/**\n * @description get same edges in two graphs.\n * @description.zh-CN 获取两个图中相同的边。\n */\n\nexport var getSameEdges = function getSameEdges(aGraph, bGraph) {\n  var aEdges = aGraph.edges();\n  var sameEdges = aEdges.filter(function (aEdge) {\n    return bGraph.hasEdge(aEdge.v, aEdge.w, aEdge.name);\n  });\n  return sameEdges;\n};\n/**\n * @description Check if two graphs'option are the same.\n * @description.zh-CN 检查两个图的选项是否相同。\n */\n\nexport var isGraphOptionSame = function isGraphOptionSame(aGraph, bGraph) {\n  return aGraph.isCompound() === bGraph.isCompound() && aGraph.isDirected() === bGraph.isDirected() && aGraph.isMultigraph() === bGraph.isMultigraph();\n};\n/**\n * @description Check if a graph contains all nodes in another graph.\n * @description.zh-CN 检查一个图是否包含另一个图的所有节点。\n */\n\nexport var containAllSameNodes = function containAllSameNodes(aGraph, bGraph) {\n  var sameNodes = getSameNodes(aGraph, bGraph);\n  return sameNodes.length === aGraph.nodes().length;\n};\n/**\n * @description Check if a graph contains all edges in another graph.\n * @description.zh-CN 检查一个图是否包含另一个图的所有边。\n */\n\nexport var containAllSameEdges = function containAllSameEdges(aGraph, bGraph) {\n  var sameEdges = getSameEdges(aGraph, bGraph);\n  return sameEdges.length === aGraph.edges().length;\n};\n/**\n * @description Check if two graphs are the same.\n * @description.zh-CN 检查两个图是否相同。\n */\n\nexport var isGraphSame = function isGraphSame(aGraph, bGraph) {\n  return isGraphOptionSame(aGraph, bGraph) && aGraph.nodeCount() === bGraph.nodeCount() && containAllSameNodes(aGraph, bGraph) && aGraph.edgeCount() === bGraph.edgeCount() && containAllSameEdges(aGraph, bGraph);\n};\n/**\n * @description Check if one graph is the subgraph of another graph.\n * @description.zh-CN 检查一个图是否是另一个图的子图。\n */\n\nexport var isGraphContainsAnother = function isGraphContainsAnother(originGraph, targetGraph) {\n  return containAllSameNodes(originGraph, targetGraph) && containAllSameEdges(originGraph, targetGraph);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}