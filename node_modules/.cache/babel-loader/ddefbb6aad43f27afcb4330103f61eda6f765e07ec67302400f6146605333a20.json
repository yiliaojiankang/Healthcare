{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nfunction normalizeSize(arr) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  var maxValue = max(arr);\n  return map(arr, function (num) {\n    return num / maxValue;\n  });\n}\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints: function (pointInfo) {\n    var radius = pointInfo.size / 2;\n    var points = [];\n    var sizeArr = normalizeSize(pointInfo._size);\n    each(pointInfo.y, function (y, index) {\n      var offset = sizeArr[index] * radius;\n      var isMin = index === 0;\n      var isMax = index === pointInfo.y.length - 1;\n      points.push({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x - offset,\n        y: y\n      });\n      points.unshift({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x + offset,\n        y: y\n      });\n    });\n    return points;\n  }\n});\nregisterShape('violin', 'violin', {\n  draw: function (cfg, container) {\n    var shapeAttrs = getStyle(cfg, true, true);\n    var path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, shapeAttrs), {\n        path: path\n      }),\n      name: 'violin'\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default ViolinShapeFactory;","map":{"version":3,"names":["each","max","map","isArray","registerShape","registerShapeFactory","getViolinPath","getStyle","normalizeSize","arr","maxValue","num","ViolinShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","radius","size","points","sizeArr","_size","y","index","offset","isMin","isMax","length","push","x","unshift","draw","cfg","container","shapeAttrs","path","parsePath","addShape","attrs","__assign","name","getMarker","markerCfg","color","symbol","style","r","fill"],"sources":["../../../../src/geometry/shape/violin/index.ts"],"sourcesContent":["import { each, max, map, isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ViolinShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\n\nfunction normalizeSize(arr: number[]) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  const maxValue = max(arr);\n  return map(arr, (num) => num / maxValue);\n}\n\nconst ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints(pointInfo: ViolinShapePoint) {\n    const radius = pointInfo.size / 2;\n    const points = [];\n    const sizeArr = normalizeSize(pointInfo._size);\n\n    each(pointInfo.y as number[], (y, index) => {\n      const offset = sizeArr[index] * radius;\n      const isMin = index === 0;\n      const isMax = index === (pointInfo.y as number[]).length - 1;\n      points.push({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) - offset,\n        y,\n      });\n      points.unshift({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) + offset,\n        y,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('violin', 'violin', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const shapeAttrs = getStyle(cfg, true, true);\n    const path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: {\n        ...shapeAttrs,\n        path,\n      },\n      name: 'violin',\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default ViolinShapeFactory;\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,OAAO,QAAQ,YAAY;AAGpD,SAASC,aAAa,EAAEC,oBAAoB,QAAQ,SAAS;AAC7D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,QAAQ,QAAQ,mBAAmB;AAE5C,SAASC,aAAaA,CAACC,GAAa;EAClC,IAAI,CAACN,OAAO,CAACM,GAAG,CAAC,EAAE;IACjB,OAAO,EAAE;;EAEX,IAAMC,QAAQ,GAAGT,GAAG,CAACQ,GAAG,CAAC;EACzB,OAAOP,GAAG,CAACO,GAAG,EAAE,UAACE,GAAG;IAAK,OAAAA,GAAG,GAAGD,QAAQ;EAAd,CAAc,CAAC;AAC1C;AAEA,IAAME,kBAAkB,GAAGP,oBAAoB,CAAC,QAAQ,EAAE;EACxDQ,gBAAgB,EAAE,QAAQ;EAC1BC,gBAAgB,EAAhB,SAAAA,CAAiBC,SAA2B;IAC1C,IAAMC,MAAM,GAAGD,SAAS,CAACE,IAAI,GAAG,CAAC;IACjC,IAAMC,MAAM,GAAG,EAAE;IACjB,IAAMC,OAAO,GAAGX,aAAa,CAACO,SAAS,CAACK,KAAK,CAAC;IAE9CpB,IAAI,CAACe,SAAS,CAACM,CAAa,EAAE,UAACA,CAAC,EAAEC,KAAK;MACrC,IAAMC,MAAM,GAAGJ,OAAO,CAACG,KAAK,CAAC,GAAGN,MAAM;MACtC,IAAMQ,KAAK,GAAGF,KAAK,KAAK,CAAC;MACzB,IAAMG,KAAK,GAAGH,KAAK,KAAMP,SAAS,CAACM,CAAc,CAACK,MAAM,GAAG,CAAC;MAC5DR,MAAM,CAACS,IAAI,CAAC;QACVH,KAAK,EAAAA,KAAA;QACLC,KAAK,EAAAA,KAAA;QACLG,CAAC,EAAGb,SAAS,CAACa,CAAY,GAAGL,MAAM;QACnCF,CAAC,EAAAA;OACF,CAAC;MACFH,MAAM,CAACW,OAAO,CAAC;QACbL,KAAK,EAAAA,KAAA;QACLC,KAAK,EAAAA,KAAA;QACLG,CAAC,EAAGb,SAAS,CAACa,CAAY,GAAGL,MAAM;QACnCF,CAAC,EAAAA;OACF,CAAC;IACJ,CAAC,CAAC;IACF,OAAOH,MAAM;EACf;CACD,CAAC;AAEFd,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;EAChC0B,IAAI,EAAJ,SAAAA,CAAKC,GAAc,EAAEC,SAAiB;IACpC,IAAMC,UAAU,GAAG1B,QAAQ,CAACwB,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5C,IAAMG,IAAI,GAAG,IAAI,CAACC,SAAS,CAAC7B,aAAa,CAACyB,GAAG,CAACb,MAAM,CAAC,CAAC;IACtD,OAAOc,SAAS,CAACI,QAAQ,CAAC,MAAM,EAAE;MAChCC,KAAK,EAAAC,QAAA,CAAAA,QAAA,KACAL,UAAU;QACbC,IAAI,EAAAA;MAAA,EACL;MACDK,IAAI,EAAE;KACP,CAAC;EACJ,CAAC;EACDC,SAAS,EAAT,SAAAA,CAAUC,SAAyB;IACzB,IAAAC,KAAK,GAAKD,SAAS,CAAAC,KAAd;IAEb,OAAO;MACLC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;QACLC,CAAC,EAAE,CAAC;QACJC,IAAI,EAAEJ;;KAET;EACH;CACD,CAAC;AAEF,eAAe9B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}