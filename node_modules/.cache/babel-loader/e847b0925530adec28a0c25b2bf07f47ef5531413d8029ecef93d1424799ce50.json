{"ast":null,"code":"import { assign, isFunction, isString } from '@antv/util';\nimport { center, justify, left, right, sankey } from './sankey';\nvar ALIGN_METHOD = {\n  left: left,\n  right: right,\n  center: center,\n  justify: justify\n};\n/**\n * 默认值\n */\nvar DEFAULT_OPTIONS = {\n  nodeId: function (node) {\n    return node.index;\n  },\n  nodeAlign: 'justify',\n  nodeWidth: 0.008,\n  nodePadding: 0.03,\n  nodeSort: undefined\n};\n/**\n * 获得 align function\n * @param nodeAlign\n * @param nodeDepth\n */\nexport function getNodeAlignFunction(nodeAlign) {\n  var func = isString(nodeAlign) ? ALIGN_METHOD[nodeAlign] : isFunction(nodeAlign) ? nodeAlign : null;\n  return func || justify;\n}\nexport function getDefaultOptions(sankeyLayoutOptions) {\n  return assign({}, DEFAULT_OPTIONS, sankeyLayoutOptions);\n}\n/**\n * 桑基图利用数据进行布局的函数，最终返回节点、边的位置（0 - 1 的信息）\n * 将会修改 data 数据\n * @param sankeyLayoutOptions\n * @param data\n */\nexport function sankeyLayout(sankeyLayoutOptions, data) {\n  var options = getDefaultOptions(sankeyLayoutOptions);\n  var nodeId = options.nodeId,\n    nodeSort = options.nodeSort,\n    nodeAlign = options.nodeAlign,\n    nodeWidth = options.nodeWidth,\n    nodePadding = options.nodePadding,\n    nodeDepth = options.nodeDepth;\n  var sankeyProcessor = sankey()\n  // .links((d: any) => d.links)\n  // .nodes((d: any) => d.nodes)\n  .nodeSort(nodeSort).nodeWidth(nodeWidth).nodePadding(nodePadding).nodeDepth(nodeDepth).nodeAlign(getNodeAlignFunction(nodeAlign)).extent([[0, 0], [1, 1]]).nodeId(nodeId);\n  // 进行桑基图布局处理\n  var layoutData = sankeyProcessor(data);\n  // post process (x, y), etc.\n  var nodes = layoutData.nodes.map(function (node) {\n    var x0 = node.x0,\n      x1 = node.x1,\n      y0 = node.y0,\n      y1 = node.y1;\n    /* points\n     * 3---2\n     * |   |\n     * 0---1\n     */\n    node.x = [x0, x1, x1, x0];\n    node.y = [y0, y0, y1, y1];\n    return node;\n  }).filter(function (node) {\n    return node.name !== null;\n  });\n  var links = layoutData.links.map(function (edge) {\n    var source = edge.source,\n      target = edge.target;\n    var sx = source.x1;\n    var tx = target.x0;\n    edge.x = [sx, sx, tx, tx];\n    var offset = edge.width / 2;\n    edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];\n    return edge;\n  }).filter(function (edge) {\n    var source = edge.source,\n      target = edge.target;\n    return source.name !== null && target.name !== null;\n  });\n  return {\n    nodes: nodes,\n    links: links\n  };\n}","map":{"version":3,"names":["assign","isFunction","isString","center","justify","left","right","sankey","ALIGN_METHOD","DEFAULT_OPTIONS","nodeId","node","index","nodeAlign","nodeWidth","nodePadding","nodeSort","undefined","getNodeAlignFunction","func","getDefaultOptions","sankeyLayoutOptions","sankeyLayout","data","options","nodeDepth","sankeyProcessor","extent","layoutData","nodes","map","x0","x1","y0","y1","x","y","filter","name","links","edge","source","target","sx","tx","offset","width"],"sources":["../../../src/plots/sankey/layout.ts"],"sourcesContent":["import { assign, isFunction, isString } from '@antv/util';\nimport { Datum } from '../../types';\nimport { center, justify, left, right, sankey } from './sankey';\n\nconst ALIGN_METHOD = {\n  left,\n  right,\n  center,\n  justify,\n};\n\ntype InputNode = {\n  readonly name: string;\n};\n\ntype InputLink = {\n  readonly source: number;\n  readonly target: number;\n  readonly value: number;\n};\n\ntype OutputNode = {\n  readonly name: string;\n  readonly x0: number;\n  readonly x1: number;\n  readonly y0: number;\n  readonly y1: number;\n  readonly depth: number;\n  readonly value: number;\n\n  // 用于绘制 polygon\n  x: number[];\n  y: number[];\n};\n\ntype OutputLink = {\n  readonly source: OutputNode;\n  readonly target: OutputNode;\n  readonly value: number;\n  readonly width: number;\n  readonly y0: number;\n  readonly y1: number;\n\n  // 用于绘制 edge\n  x?: number[];\n  y?: number[];\n};\n\n/**\n * 桑基图布局的数据结构定义\n */\nexport type SankeyLayoutInputData = {\n  readonly nodes: InputNode[];\n  readonly links: InputLink[];\n};\n\ntype SankeyLayoutOutputData = {\n  readonly nodes: OutputNode[];\n  readonly links: OutputLink[];\n};\n\n/**\n * 对齐方式的类型定义\n */\nexport type NodeAlign = keyof typeof ALIGN_METHOD | ((...args: any[]) => any);\n\n/**\n * 节点的 depth 自定义\n */\nexport type NodeDepth = (datum: Datum, maxDepth: number) => number;\n\n/**\n * 节点排序方法的类型定义\n */\nexport type NodeSort = (a: Datum, b: Datum) => number;\n\n/**\n * 布局参数的定义\n */\nexport type SankeyLayoutOptions = {\n  readonly nodeId?: (node: Datum) => any;\n  // readonly value?: (node: Datum) => any;\n  // readonly source?: (edge: Datum) => any;\n  // readonly target?: (edge: Datum) => any;\n  // sankey.nodeSort(undefined) is the default and resorts by ascending breadth during each iteration.\n  // sankey.nodeSort(null) specifies the input order of nodes and never sorts.\n  // sankey.nodeSort(function) specifies the given order as a comparator function and sorts once on initialization.\n  readonly nodeSort?: (a: any, b: any) => number;\n  readonly nodeAlign?: NodeAlign;\n  readonly nodeWidth?: number;\n  readonly nodePadding?: number;\n  readonly nodeDepth?: NodeDepth;\n};\n\n/**\n * 默认值\n */\nconst DEFAULT_OPTIONS: Partial<SankeyLayoutOptions> = {\n  nodeId: (node: Datum) => node.index,\n  nodeAlign: 'justify',\n  nodeWidth: 0.008,\n  nodePadding: 0.03,\n  nodeSort: undefined,\n};\n\n/**\n * 获得 align function\n * @param nodeAlign\n * @param nodeDepth\n */\nexport function getNodeAlignFunction(nodeAlign: NodeAlign) {\n  const func = isString(nodeAlign) ? ALIGN_METHOD[nodeAlign] : isFunction(nodeAlign) ? nodeAlign : null;\n\n  return func || justify;\n}\n\nexport function getDefaultOptions(sankeyLayoutOptions: SankeyLayoutOptions) {\n  return assign({}, DEFAULT_OPTIONS, sankeyLayoutOptions);\n}\n\n/**\n * 桑基图利用数据进行布局的函数，最终返回节点、边的位置（0 - 1 的信息）\n * 将会修改 data 数据\n * @param sankeyLayoutOptions\n * @param data\n */\nexport function sankeyLayout(\n  sankeyLayoutOptions: SankeyLayoutOptions,\n  data: SankeyLayoutInputData\n): SankeyLayoutOutputData {\n  const options = getDefaultOptions(sankeyLayoutOptions);\n\n  const { nodeId, nodeSort, nodeAlign, nodeWidth, nodePadding, nodeDepth } = options;\n\n  const sankeyProcessor = sankey()\n    // .links((d: any) => d.links)\n    // .nodes((d: any) => d.nodes)\n    .nodeSort(nodeSort)\n    .nodeWidth(nodeWidth)\n    .nodePadding(nodePadding)\n    .nodeDepth(nodeDepth)\n    .nodeAlign(getNodeAlignFunction(nodeAlign))\n    .extent([\n      [0, 0],\n      [1, 1],\n    ])\n    .nodeId(nodeId);\n\n  // 进行桑基图布局处理\n  const layoutData: SankeyLayoutOutputData = sankeyProcessor(data);\n\n  // post process (x, y), etc.\n  const nodes = layoutData.nodes\n    .map((node) => {\n      const { x0, x1, y0, y1 } = node;\n      /* points\n       * 3---2\n       * |   |\n       * 0---1\n       */\n      node.x = [x0, x1, x1, x0];\n      node.y = [y0, y0, y1, y1];\n\n      return node;\n    })\n    .filter((node) => {\n      return node.name !== null;\n    });\n\n  const links = layoutData.links\n    .map((edge) => {\n      const { source, target } = edge;\n      const sx = source.x1;\n      const tx = target.x0;\n      edge.x = [sx, sx, tx, tx];\n      const offset = edge.width / 2;\n      edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];\n\n      return edge;\n    })\n    .filter((edge) => {\n      const { source, target } = edge;\n      return source.name !== null && target.name !== null;\n    });\n\n  return { nodes, links };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}