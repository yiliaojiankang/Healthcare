{"ast":null,"code":"import { flatten, isString, valuesOfKey, isNil } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n  var count = arr.length;\n  var sourceArr = arr;\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map(function (v) {\n      return scale.translate(v);\n    });\n  }\n  var distance = sourceArr[1] - sourceArr[0];\n  for (var i = 2; i < count; i++) {\n    var tmp = sourceArr[i] - sourceArr[i - 1];\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n  return distance;\n}\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    var mergeData = flatten(dataArray);\n    var values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n  return dataArray.length;\n}\n/** @ignore */\nexport function getDefaultSize(geometry) {\n  var theme = geometry.theme;\n  var coordinate = geometry.coordinate;\n  var xScale = geometry.getXScale();\n  var xValues = xScale.values;\n  var dataArray = geometry.beforeMappingData;\n  var count = xValues.length;\n  var xDimensionLength = getXDimensionLength(geometry.coordinate);\n  // 获取柱宽相关配置项\n  var intervalPadding = geometry.intervalPadding,\n    dodgePadding = geometry.dodgePadding;\n  // 兼容theme配置\n  var maxColumnWidth = geometry.maxColumnWidth || theme.maxColumnWidth;\n  var minColumnWidth = geometry.minColumnWidth || theme.minColumnWidth;\n  var columnWidthRatio = geometry.columnWidthRatio || theme.columnWidthRatio;\n  var multiplePieWidthRatio = geometry.multiplePieWidthRatio || theme.multiplePieWidthRatio;\n  var roseWidthRatio = geometry.roseWidthRatio || theme.roseWidthRatio;\n  // 线性情况下count值\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    var interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n  var range = xScale.range;\n  var normalizedSize = 1 / count;\n  var wr = 1;\n  if (coordinate.isPolar) {\n    // 极坐标场景\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = multiplePieWidthRatio;\n    } else {\n      wr = roseWidthRatio;\n    }\n  } else {\n    // 非极坐标场景\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n    wr = columnWidthRatio;\n  }\n  // 基础柱状图\n  if (!isNil(intervalPadding) && intervalPadding >= 0) {\n    // 配置组间距情况\n    var normalizedIntervalPadding = intervalPadding / xDimensionLength;\n    normalizedSize = (1 - (count - 1) * normalizedIntervalPadding) / count;\n  } else {\n    // 默认情况\n    normalizedSize *= wr;\n  }\n  // 分组柱状图\n  if (geometry.getAdjust('dodge')) {\n    var dodgeAdjust = geometry.getAdjust('dodge');\n    var dodgeBy = dodgeAdjust.dodgeBy;\n    var dodgeCount = getDodgeCount(dataArray, dodgeBy);\n    if (!isNil(dodgePadding) && dodgePadding >= 0) {\n      // 仅配置组内间距情况\n      var normalizedDodgePadding = dodgePadding / xDimensionLength;\n      normalizedSize = (normalizedSize - normalizedDodgePadding * (dodgeCount - 1)) / dodgeCount;\n    } else if (!isNil(intervalPadding) && intervalPadding >= 0) {\n      // 设置组间距但未设置组内间距情况，避免组间距过小导致图形重叠，需乘以wr\n      normalizedSize *= wr;\n      normalizedSize = normalizedSize / dodgeCount;\n    } else {\n      // 组间距和组内间距均未配置\n      normalizedSize = normalizedSize / dodgeCount;\n    }\n    normalizedSize = normalizedSize >= 0 ? normalizedSize : 0;\n  }\n  // 最大和最小限制\n  if (!isNil(maxColumnWidth) && maxColumnWidth >= 0) {\n    var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n  // \bminColumnWidth可能设置为0\n  if (!isNil(minColumnWidth) && minColumnWidth >= 0) {\n    var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n  return normalizedSize;\n}","map":{"version":3,"names":["flatten","isString","valuesOfKey","isNil","getXDimensionLength","findMinDistance","arr","scale","count","length","sourceArr","map","v","translate","distance","i","tmp","getDodgeCount","dataArray","dodgeBy","mergeData","values","getDefaultSize","geometry","theme","coordinate","xScale","getXScale","xValues","beforeMappingData","xDimensionLength","intervalPadding","dodgePadding","maxColumnWidth","minColumnWidth","columnWidthRatio","multiplePieWidthRatio","roseWidthRatio","isLinear","sort","interval","max","min","range","normalizedSize","wr","isPolar","isTransposed","normalizedIntervalPadding","getAdjust","dodgeAdjust","dodgeCount","normalizedDodgePadding","normalizedMaxColumnWidth","normalizedMinColumnWidth"],"sources":["../../../src/geometry/util/shape-size.ts"],"sourcesContent":["import { flatten, isString, valuesOfKey, isNil } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n  const count = arr.length;\n  let sourceArr = arr;\n  if (isString(sourceArr[0])) {\n    // 日期类型的 values 经常上文本类型，所以需要转换一下\n    sourceArr = arr.map((v: string) => {\n      return scale.translate(v);\n    });\n  }\n  let distance = sourceArr[1] - sourceArr[0];\n  for (let i = 2; i < count; i++) {\n    const tmp = sourceArr[i] - sourceArr[i - 1];\n    if (distance > tmp) {\n      distance = tmp;\n    }\n  }\n  return distance;\n}\n\nfunction getDodgeCount(dataArray, dodgeBy) {\n  if (dodgeBy) {\n    const mergeData = flatten(dataArray);\n    const values = valuesOfKey(mergeData, dodgeBy);\n    return values.length;\n  }\n\n  return dataArray.length;\n}\n\n/** @ignore */\nexport function getDefaultSize(geometry): number {\n  const theme = geometry.theme;\n  const coordinate = geometry.coordinate;\n  const xScale = geometry.getXScale();\n  const xValues = xScale.values;\n  const dataArray = geometry.beforeMappingData;\n  let count: number = xValues.length;\n  const xDimensionLength = getXDimensionLength(geometry.coordinate);\n  // 获取柱宽相关配置项\n  const { intervalPadding, dodgePadding } = geometry;\n  // 兼容theme配置\n  const maxColumnWidth = geometry.maxColumnWidth || theme.maxColumnWidth;\n  const minColumnWidth = geometry.minColumnWidth || theme.minColumnWidth;\n  const columnWidthRatio = geometry.columnWidthRatio || theme.columnWidthRatio;\n  const multiplePieWidthRatio = geometry.multiplePieWidthRatio || theme.multiplePieWidthRatio;\n  const roseWidthRatio = geometry.roseWidthRatio || theme.roseWidthRatio;\n\n  // 线性情况下count值\n  if (xScale.isLinear && xValues.length > 1) {\n    // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n    xValues.sort();\n    const interval = findMinDistance(xValues, xScale);\n    count = (xScale.max - xScale.min) / interval;\n    if (xValues.length > count) {\n      count = xValues.length;\n    }\n  }\n\n  const range = xScale.range;\n  let normalizedSize = 1 / count;\n  let wr = 1;\n  if (coordinate.isPolar) {\n    // 极坐标场景\n    if (coordinate.isTransposed && count > 1) {\n      // 极坐标下多层环图\n      wr = multiplePieWidthRatio;\n    } else {\n      wr = roseWidthRatio;\n    }\n  } else {\n    // 非极坐标场景\n    if (xScale.isLinear) {\n      normalizedSize *= range[1] - range[0];\n    }\n    wr = columnWidthRatio;\n  }\n\n  // 基础柱状图\n  if (!isNil(intervalPadding) && intervalPadding >= 0) {\n    // 配置组间距情况\n    const normalizedIntervalPadding = intervalPadding / xDimensionLength;\n    normalizedSize = (1 - (count - 1) * normalizedIntervalPadding) / count;\n  } else {\n    // 默认情况\n    normalizedSize *= wr;\n  }\n  // 分组柱状图\n  if (geometry.getAdjust('dodge')) {\n    const dodgeAdjust = geometry.getAdjust('dodge');\n    const dodgeBy = dodgeAdjust.dodgeBy;\n    const dodgeCount = getDodgeCount(dataArray, dodgeBy);\n    if (!isNil(dodgePadding) && dodgePadding >= 0) {\n      // 仅配置组内间距情况\n      const normalizedDodgePadding = dodgePadding / xDimensionLength;\n      normalizedSize = (normalizedSize - normalizedDodgePadding * (dodgeCount - 1)) / dodgeCount;\n    } else if (!isNil(intervalPadding) && intervalPadding >= 0) {\n      // 设置组间距但未设置组内间距情况，避免组间距过小导致图形重叠，需乘以wr\n      normalizedSize *= wr;\n      normalizedSize = normalizedSize / dodgeCount;\n    } else {\n      // 组间距和组内间距均未配置\n      normalizedSize = normalizedSize / dodgeCount;\n    }\n    normalizedSize = normalizedSize >= 0 ? normalizedSize : 0;\n  }\n\n  // 最大和最小限制\n  if (!isNil(maxColumnWidth) && maxColumnWidth >= 0) {\n    const normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n    if (normalizedSize > normalizedMaxColumnWidth) {\n      normalizedSize = normalizedMaxColumnWidth;\n    }\n  }\n\n  // \bminColumnWidth可能设置为0\n  if (!isNil(minColumnWidth) && minColumnWidth >= 0) {\n    const normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n    if (normalizedSize < normalizedMinColumnWidth) {\n      normalizedSize = normalizedMinColumnWidth;\n    }\n  }\n\n  return normalizedSize;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}