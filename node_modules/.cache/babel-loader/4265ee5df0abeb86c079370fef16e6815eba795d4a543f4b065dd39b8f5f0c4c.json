{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\nvar _dec, _dec2, _class, _class2, _descriptor;\nimport { mat4, vec4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from \"../../types\";\nimport { getDistanceScales } from \"../../utils/project\";\n\n// import { IMapService } from '../map/IMapService'\n\nimport { CoordinateSystem } from \"./ICoordinateSystemService\";\nvar VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nvar CoordinateSystemService = (_dec = injectable(), _dec2 = inject(TYPES.ICameraService), _dec(_class = (_class2 = /*#__PURE__*/function () {\n  function CoordinateSystemService() {\n    _classCallCheck(this, CoordinateSystemService);\n    _defineProperty(this, \"needRefresh\", true);\n    _initializerDefineProperty(this, \"cameraService\", _descriptor, this);\n    // map.getCenter\n    // @inject(TYPES.IMapService)\n    // private readonly mapService: IMapService\n    /**\n     * 1. Web 墨卡托坐标系\n     * 2. 偏移经纬度，用于解决高精度抖动问题\n     * 3. 瓦片坐标，用于数据瓦片\n     * 4. 常规世界坐标系，用于常规 2D/3D 可视化场景\n     * 5. P20 坐标系，高德地图使用\n     * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91\n     */\n    _defineProperty(this, \"coordinateSystem\", void 0);\n    /**\n     * 屏幕中心点 [lng, lat]\n     */\n    _defineProperty(this, \"viewportCenter\", void 0);\n    /**\n     * 屏幕中心点的最终投影结果，在 CPU 侧计算后传入 Shader\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"viewportCenterProjection\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [x, y, z]\n     */\n    _defineProperty(this, \"pixelsPerDegree\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [lng, lat] 使用泰勒级数展开\n     * 通过墨卡托坐标系下的差值估计世界坐标系下的差值\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"pixelsPerDegree2\", void 0);\n    /**\n     * 像素单位 -> 米\n     */\n    _defineProperty(this, \"pixelsPerMeter\", void 0);\n  }\n  _createClass(CoordinateSystemService, [{\n    key: \"refresh\",\n    value:\n    /**\n     * 重新计算当前坐标系参数\n     * TODO: 使用 memoize 缓存参数以及计算结果\n     */\n    function refresh(offsetCenter) {\n      // if (!this.needRefresh) {\n      //   return;\n      // }\n      var zoom = this.cameraService.getZoom();\n      var zoomScale = this.cameraService.getZoomScale();\n      var center = offsetCenter ? offsetCenter : this.cameraService.getCenter();\n\n      // 计算像素到米以及经纬度之间的转换\n      var _getDistanceScales = getDistanceScales({\n          // longitude: center[0],\n          latitude: center[1],\n          zoom: zoom\n        }),\n        pixelsPerMeter = _getDistanceScales.pixelsPerMeter,\n        pixelsPerDegree = _getDistanceScales.pixelsPerDegree;\n      this.viewportCenter = center;\n      this.viewportCenterProjection = [0, 0, 0, 0];\n      this.pixelsPerMeter = pixelsPerMeter;\n      this.pixelsPerDegree = pixelsPerDegree;\n      this.pixelsPerDegree2 = [0, 0, 0];\n      if (this.coordinateSystem === CoordinateSystem.LNGLAT || this.coordinateSystem === CoordinateSystem.P20) {\n        // 继续使用相机服务计算的 VP 矩阵\n        this.cameraService.setViewProjectionMatrix(undefined);\n      } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {\n        this.calculateLnglatOffset(center, zoom);\n      } else if (this.coordinateSystem === CoordinateSystem.P20_OFFSET) {\n        this.calculateLnglatOffset(center, zoom, zoomScale, true);\n      }\n      this.needRefresh = false;\n\n      // TODO: 判断是否应用瓦片 & 常规坐标系\n    }\n  }, {\n    key: \"getCoordinateSystem\",\n    value: function getCoordinateSystem() {\n      return this.coordinateSystem;\n    }\n  }, {\n    key: \"setCoordinateSystem\",\n    value: function setCoordinateSystem(coordinateSystem) {\n      this.coordinateSystem = coordinateSystem;\n    }\n  }, {\n    key: \"getViewportCenter\",\n    value: function getViewportCenter() {\n      return this.viewportCenter;\n    }\n  }, {\n    key: \"getViewportCenterProjection\",\n    value: function getViewportCenterProjection() {\n      return this.viewportCenterProjection;\n    }\n  }, {\n    key: \"getPixelsPerDegree\",\n    value: function getPixelsPerDegree() {\n      return this.pixelsPerDegree;\n    }\n  }, {\n    key: \"getPixelsPerDegree2\",\n    value: function getPixelsPerDegree2() {\n      return this.pixelsPerDegree2;\n    }\n  }, {\n    key: \"getPixelsPerMeter\",\n    value: function getPixelsPerMeter() {\n      return this.pixelsPerMeter;\n    }\n  }, {\n    key: \"calculateLnglatOffset\",\n    value: function calculateLnglatOffset(center, zoom, scale, flipY) {\n      // http://uber-common.github.io/viewport-mercator-project/docs/api-reference/web-mercator-utils#code-classlanguage-textgetdistancescalesviewportcode\n      var _getDistanceScales2 = getDistanceScales({\n          // longitude: center[0],\n          latitude: center[1],\n          zoom: zoom,\n          scale: scale,\n          flipY: flipY,\n          highPrecision: true\n        }),\n        ppm = _getDistanceScales2.pixelsPerMeter,\n        ppd = _getDistanceScales2.pixelsPerDegree,\n        pixelsPerDegree2 = _getDistanceScales2.pixelsPerDegree2;\n      var viewMatrix = this.cameraService.getViewMatrix();\n      var projectionMatrix = this.cameraService.getProjectionMatrix();\n      var viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n\n      // 经纬度投影到 Web 墨卡托坐标系\n      var positionPixels = this.cameraService.projectFlat([Math.fround(center[0]), Math.fround(center[1])], Math.pow(2, zoom));\n\n      // Web 墨卡托坐标系通过 VP 矩阵变换到世界坐标系\n      this.viewportCenterProjection = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);\n\n      // Always apply uncentered projection matrix if available (shader adds center)\n      viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;\n\n      // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n      viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n\n      // 重新计算相机 VP 矩阵\n      this.cameraService.setViewProjectionMatrix(viewProjectionMatrix);\n      this.pixelsPerMeter = ppm;\n      this.pixelsPerDegree = ppd;\n      this.pixelsPerDegree2 = pixelsPerDegree2;\n    }\n  }]);\n  return CoordinateSystemService;\n}(), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"cameraService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { CoordinateSystemService as default };","map":{"version":3,"names":["_initializerDefineProperty","_classCallCheck","_createClass","_defineProperty","_applyDecoratedDescriptor","_initializerWarningHelper","_dec","_dec2","_class","_class2","_descriptor","mat4","vec4","inject","injectable","TYPES","getDistanceScales","CoordinateSystem","VECTOR_TO_POINT_MATRIX","CoordinateSystemService","ICameraService","key","value","refresh","offsetCenter","zoom","cameraService","getZoom","zoomScale","getZoomScale","center","getCenter","_getDistanceScales","latitude","pixelsPerMeter","pixelsPerDegree","viewportCenter","viewportCenterProjection","pixelsPerDegree2","coordinateSystem","LNGLAT","P20","setViewProjectionMatrix","undefined","LNGLAT_OFFSET","calculateLnglatOffset","P20_OFFSET","needRefresh","getCoordinateSystem","setCoordinateSystem","getViewportCenter","getViewportCenterProjection","getPixelsPerDegree","getPixelsPerDegree2","getPixelsPerMeter","scale","flipY","_getDistanceScales2","highPrecision","ppm","ppd","viewMatrix","getViewMatrix","projectionMatrix","getProjectionMatrix","viewProjectionMatrix","multiply","positionPixels","projectFlat","Math","fround","pow","transformMat4","getViewMatrixUncentered","prototype","configurable","enumerable","writable","initializer","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-core/es/services/coordinate/CoordinateSystemService.js"],"sourcesContent":["import _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\nvar _dec, _dec2, _class, _class2, _descriptor;\nimport { mat4, vec4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from \"../../types\";\nimport { getDistanceScales } from \"../../utils/project\";\n\n// import { IMapService } from '../map/IMapService'\n\nimport { CoordinateSystem } from \"./ICoordinateSystemService\";\nvar VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nvar CoordinateSystemService = (_dec = injectable(), _dec2 = inject(TYPES.ICameraService), _dec(_class = (_class2 = /*#__PURE__*/function () {\n  function CoordinateSystemService() {\n    _classCallCheck(this, CoordinateSystemService);\n    _defineProperty(this, \"needRefresh\", true);\n    _initializerDefineProperty(this, \"cameraService\", _descriptor, this);\n    // map.getCenter\n    // @inject(TYPES.IMapService)\n    // private readonly mapService: IMapService\n    /**\n     * 1. Web 墨卡托坐标系\n     * 2. 偏移经纬度，用于解决高精度抖动问题\n     * 3. 瓦片坐标，用于数据瓦片\n     * 4. 常规世界坐标系，用于常规 2D/3D 可视化场景\n     * 5. P20 坐标系，高德地图使用\n     * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/doml91\n     */\n    _defineProperty(this, \"coordinateSystem\", void 0);\n    /**\n     * 屏幕中心点 [lng, lat]\n     */\n    _defineProperty(this, \"viewportCenter\", void 0);\n    /**\n     * 屏幕中心点的最终投影结果，在 CPU 侧计算后传入 Shader\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"viewportCenterProjection\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [x, y, z]\n     */\n    _defineProperty(this, \"pixelsPerDegree\", void 0);\n    /**\n     * 像素单位 -> 经纬度 [lng, lat] 使用泰勒级数展开\n     * 通过墨卡托坐标系下的差值估计世界坐标系下的差值\n     * @see https://zhuanlan.zhihu.com/p/57469121\n     */\n    _defineProperty(this, \"pixelsPerDegree2\", void 0);\n    /**\n     * 像素单位 -> 米\n     */\n    _defineProperty(this, \"pixelsPerMeter\", void 0);\n  }\n  _createClass(CoordinateSystemService, [{\n    key: \"refresh\",\n    value:\n    /**\n     * 重新计算当前坐标系参数\n     * TODO: 使用 memoize 缓存参数以及计算结果\n     */\n    function refresh(offsetCenter) {\n      // if (!this.needRefresh) {\n      //   return;\n      // }\n      var zoom = this.cameraService.getZoom();\n      var zoomScale = this.cameraService.getZoomScale();\n      var center = offsetCenter ? offsetCenter : this.cameraService.getCenter();\n\n      // 计算像素到米以及经纬度之间的转换\n      var _getDistanceScales = getDistanceScales({\n          // longitude: center[0],\n          latitude: center[1],\n          zoom: zoom\n        }),\n        pixelsPerMeter = _getDistanceScales.pixelsPerMeter,\n        pixelsPerDegree = _getDistanceScales.pixelsPerDegree;\n      this.viewportCenter = center;\n      this.viewportCenterProjection = [0, 0, 0, 0];\n      this.pixelsPerMeter = pixelsPerMeter;\n      this.pixelsPerDegree = pixelsPerDegree;\n      this.pixelsPerDegree2 = [0, 0, 0];\n      if (this.coordinateSystem === CoordinateSystem.LNGLAT || this.coordinateSystem === CoordinateSystem.P20) {\n        // 继续使用相机服务计算的 VP 矩阵\n        this.cameraService.setViewProjectionMatrix(undefined);\n      } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {\n        this.calculateLnglatOffset(center, zoom);\n      } else if (this.coordinateSystem === CoordinateSystem.P20_OFFSET) {\n        this.calculateLnglatOffset(center, zoom, zoomScale, true);\n      }\n      this.needRefresh = false;\n\n      // TODO: 判断是否应用瓦片 & 常规坐标系\n    }\n  }, {\n    key: \"getCoordinateSystem\",\n    value: function getCoordinateSystem() {\n      return this.coordinateSystem;\n    }\n  }, {\n    key: \"setCoordinateSystem\",\n    value: function setCoordinateSystem(coordinateSystem) {\n      this.coordinateSystem = coordinateSystem;\n    }\n  }, {\n    key: \"getViewportCenter\",\n    value: function getViewportCenter() {\n      return this.viewportCenter;\n    }\n  }, {\n    key: \"getViewportCenterProjection\",\n    value: function getViewportCenterProjection() {\n      return this.viewportCenterProjection;\n    }\n  }, {\n    key: \"getPixelsPerDegree\",\n    value: function getPixelsPerDegree() {\n      return this.pixelsPerDegree;\n    }\n  }, {\n    key: \"getPixelsPerDegree2\",\n    value: function getPixelsPerDegree2() {\n      return this.pixelsPerDegree2;\n    }\n  }, {\n    key: \"getPixelsPerMeter\",\n    value: function getPixelsPerMeter() {\n      return this.pixelsPerMeter;\n    }\n  }, {\n    key: \"calculateLnglatOffset\",\n    value: function calculateLnglatOffset(center, zoom, scale, flipY) {\n      // http://uber-common.github.io/viewport-mercator-project/docs/api-reference/web-mercator-utils#code-classlanguage-textgetdistancescalesviewportcode\n      var _getDistanceScales2 = getDistanceScales({\n          // longitude: center[0],\n          latitude: center[1],\n          zoom: zoom,\n          scale: scale,\n          flipY: flipY,\n          highPrecision: true\n        }),\n        ppm = _getDistanceScales2.pixelsPerMeter,\n        ppd = _getDistanceScales2.pixelsPerDegree,\n        pixelsPerDegree2 = _getDistanceScales2.pixelsPerDegree2;\n      var viewMatrix = this.cameraService.getViewMatrix();\n      var projectionMatrix = this.cameraService.getProjectionMatrix();\n      var viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n\n      // 经纬度投影到 Web 墨卡托坐标系\n      var positionPixels = this.cameraService.projectFlat([Math.fround(center[0]), Math.fround(center[1])], Math.pow(2, zoom));\n\n      // Web 墨卡托坐标系通过 VP 矩阵变换到世界坐标系\n      this.viewportCenterProjection = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);\n\n      // Always apply uncentered projection matrix if available (shader adds center)\n      viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;\n\n      // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n      viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n\n      // 重新计算相机 VP 矩阵\n      this.cameraService.setViewProjectionMatrix(viewProjectionMatrix);\n      this.pixelsPerMeter = ppm;\n      this.pixelsPerDegree = ppd;\n      this.pixelsPerDegree2 = pixelsPerDegree2;\n    }\n  }]);\n  return CoordinateSystemService;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"cameraService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { CoordinateSystemService as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}