{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n/** @ignore */\nvar ScalePool = /** @class */function () {\n  function ScalePool() {\n    /** 所有的 scales */\n    this.scales = new Map();\n    /** 需要同步的 scale 分组， key: scaleKeyArray */\n    this.syncScales = new Map();\n  }\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n    var finalScaleDef = scaleDef;\n    var cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      var cacheScale = cacheScaleMeta.scale;\n      var cacheScaleDef = {\n        type: cacheScale.type\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n    var scale = createScaleByField(field, data, finalScaleDef);\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n    return scale;\n  };\n  /**\n   * 同步 scale\n   */\n  ScalePool.prototype.sync = function (coordinate, theme) {\n    var _this = this;\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      // min, max, values, ranges\n      var min = Number.MAX_SAFE_INTEGER;\n      var max = Number.MIN_SAFE_INTEGER;\n      var values = [];\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n        // 去重\n        each(scale.values, function (v) {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n      // 2. 同步\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        if (scale.isContinuous) {\n          scale.change({\n            min: min,\n            max: max,\n            values: values\n          });\n        } else if (scale.isCategory) {\n          var range = scale.range;\n          var cacheScaleMeta = _this.getScaleMeta(key);\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(deepMix({}, scale, {\n              values: values\n            }), coordinate, theme);\n          }\n          scale.change({\n            values: values,\n            range: range\n          });\n        }\n      });\n    });\n  };\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n    // 1. 缓存到 scales\n    var sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key: key,\n        scale: scale,\n        scaleDef: scaleDef\n      };\n      this.scales.set(key, sm);\n    }\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    var syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      var scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      var field = last(key.split('-'));\n      var scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  };\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  ScalePool.prototype.deleteScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      var syncKey = scaleMeta.syncKey;\n      var scaleKeys = this.syncScales.get(syncKey);\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        var idx = scaleKeys.indexOf(key);\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n    // 删除 scale 实例\n    this.scales.delete(key);\n  };\n  /**\n   * 清空\n   */\n  ScalePool.prototype.clear = function () {\n    this.scales.clear();\n    this.syncScales.clear();\n  };\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  ScalePool.prototype.removeFromSyncScales = function (key) {\n    var _this = this;\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      var idx = scaleKeys.indexOf(key);\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          _this.syncScales.delete(syncKey);\n        }\n        return false; // 跳出循环\n      }\n    });\n  };\n  /**\n   * get sync key\n   * @param sm\n   */\n  ScalePool.prototype.getSyncKey = function (sm) {\n    var scale = sm.scale,\n      scaleDef = sm.scaleDef;\n    var field = scale.field;\n    var sync = get(scaleDef, ['sync']);\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScaleMeta = function (key) {\n    return this.scales.get(key);\n  };\n  return ScalePool;\n}();\nexport { ScalePool };","map":{"version":3,"names":["deepMix","each","get","isNumber","last","createScaleByField","syncScale","getDefaultCategoryScaleRange","ScalePool","scales","Map","syncScales","prototype","createScale","field","data","scaleDef","key","finalScaleDef","cacheScaleMeta","getScaleMeta","length","cacheScale","scale","cacheScaleDef","type","isCategory","values","sync","coordinate","theme","_this","forEach","scaleKeys","syncKey","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","getScale","Math","v","includes","push","isContinuous","change","range","sm","set","getSyncKey","removeFromSyncScales","scaleMeta","split","deleteScale","idx","indexOf","splice","delete","clear","undefined"],"sources":["../../../src/chart/util/scale-pool.ts"],"sourcesContent":["/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { Scale, Coordinate } from '../../dependents';\nimport { Data, LooseObject, ScaleOption, ViewCfg } from '../../interface';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n\n/** @ignore */\ninterface ScaleMeta {\n  readonly key: string;\n  readonly scale: Scale;\n  scaleDef: ScaleOption;\n  syncKey?: string;\n}\n\n/** @ignore */\nexport class ScalePool {\n  /** 所有的 scales */\n  private scales = new Map<string, ScaleMeta>();\n  /** 需要同步的 scale 分组， key: scaleKeyArray */\n  private syncScales = new Map<string, string[]>();\n\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  public createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    let finalScaleDef = scaleDef;\n\n    const cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      const cacheScale = cacheScaleMeta.scale;\n      const cacheScaleDef: LooseObject = {\n        type: cacheScale.type,\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n\n    const scale = createScaleByField(field, data, finalScaleDef);\n\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n\n    return scale;\n  }\n\n  /**\n   * 同步 scale\n   */\n  public sync(coordinate: Coordinate, theme: ViewCfg['theme']) {\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach((scaleKeys: string[], syncKey: string) => {\n      // min, max, values, ranges\n      let min = Number.MAX_SAFE_INTEGER;\n      let max = Number.MIN_SAFE_INTEGER;\n      const values = [];\n\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, (key: string) => {\n        const scale = this.getScale(key);\n\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n\n        // 去重\n        each(scale.values, (v: any) => {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n\n      // 2. 同步\n      each(scaleKeys, (key: string) => {\n        const scale = this.getScale(key);\n\n        if (scale.isContinuous) {\n          scale.change({\n            min,\n            max,\n            values,\n          });\n        } else if (scale.isCategory) {\n          let range = scale.range;\n          const cacheScaleMeta = this.getScaleMeta(key);\n\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(\n              deepMix({}, scale, {\n                values,\n              }),\n              coordinate,\n              theme\n            );\n          }\n          scale.change({\n            values,\n            range,\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  private cacheScale(scale: Scale, scaleDef: ScaleOption, key: string) {\n    // 1. 缓存到 scales\n\n    let sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key,\n        scale,\n        scaleDef,\n      };\n\n      this.scales.set(key, sm);\n    }\n\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    const syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      let scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  }\n\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  public getScale(key: string): Scale {\n    let scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      const field = last(key.split('-'));\n      const scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  }\n\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  public deleteScale(key: string) {\n    const scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      const { syncKey } = scaleMeta;\n\n      const scaleKeys = this.syncScales.get(syncKey);\n\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        const idx = scaleKeys.indexOf(key);\n\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n\n    // 删除 scale 实例\n    this.scales.delete(key);\n  }\n\n  /**\n   * 清空\n   */\n  public clear() {\n    this.scales.clear();\n    this.syncScales.clear();\n  }\n\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  private removeFromSyncScales(key: string) {\n    this.syncScales.forEach((scaleKeys: string[], syncKey: string) => {\n      const idx = scaleKeys.indexOf(key);\n\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          this.syncScales.delete(syncKey);\n        }\n\n        return false; // 跳出循环\n      }\n    });\n  }\n\n  /**\n   * get sync key\n   * @param sm\n   */\n  private getSyncKey(sm: ScaleMeta): string {\n    const { scale, scaleDef } = sm;\n    const { field } = scale;\n    const sync = get(scaleDef, ['sync']);\n\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  }\n\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  private getScaleMeta(key: string): ScaleMeta {\n    return this.scales.get(key);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}