{"ast":null,"code":"// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object, recursive, transfers) {\n  if (recursive === void 0) {\n    recursive = true;\n  }\n  // Make sure that items in the transfer list is unique\n  var transfersSet = transfers || new Set();\n  if (!object) {\n    // ignore\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n    // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n    // Do not iterate through the content in this case\n  } else if (recursive && typeof object === 'object') {\n    for (var key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["getTransferList","object","recursive","transfers","transfersSet","Set","isTransferable","add","buffer","ArrayBuffer","isView","key","undefined","Array","from","MessagePort","ImageBitmap","OffscreenCanvas"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/utils/worker-utils/get-transfer-list.js"],"sourcesContent":["// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(object, recursive, transfers) {\n    if (recursive === void 0) { recursive = true; }\n    // Make sure that items in the transfer list is unique\n    var transfersSet = transfers || new Set();\n    if (!object) {\n        // ignore\n    }\n    else if (isTransferable(object)) {\n        transfersSet.add(object);\n    }\n    else if (isTransferable(object.buffer)) {\n        // Typed array\n        transfersSet.add(object.buffer);\n    }\n    else if (ArrayBuffer.isView(object)) {\n        // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n        // Do not iterate through the content in this case\n    }\n    else if (recursive && typeof object === 'object') {\n        for (var key in object) {\n            // Avoid perf hit - only go one level deep\n            getTransferList(object[key], recursive, transfersSet);\n        }\n    }\n    // If transfers is defined, is internal recursive call\n    // Otherwise it's called by the user\n    return transfers === undefined ? Array.from(transfersSet) : [];\n}\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n    if (!object) {\n        return false;\n    }\n    if (object instanceof ArrayBuffer) {\n        return true;\n    }\n    if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n        return true;\n    }\n    if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAE;EAC1D,IAAID,SAAS,KAAK,KAAK,CAAC,EAAE;IAAEA,SAAS,GAAG,IAAI;EAAE;EAC9C;EACA,IAAIE,YAAY,GAAGD,SAAS,IAAI,IAAIE,GAAG,CAAC,CAAC;EACzC,IAAI,CAACJ,MAAM,EAAE;IACT;EAAA,CACH,MACI,IAAIK,cAAc,CAACL,MAAM,CAAC,EAAE;IAC7BG,YAAY,CAACG,GAAG,CAACN,MAAM,CAAC;EAC5B,CAAC,MACI,IAAIK,cAAc,CAACL,MAAM,CAACO,MAAM,CAAC,EAAE;IACpC;IACAJ,YAAY,CAACG,GAAG,CAACN,MAAM,CAACO,MAAM,CAAC;EACnC,CAAC,MACI,IAAIC,WAAW,CAACC,MAAM,CAACT,MAAM,CAAC,EAAE;IACjC;IACA;EAAA,CACH,MACI,IAAIC,SAAS,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9C,KAAK,IAAIU,GAAG,IAAIV,MAAM,EAAE;MACpB;MACAD,eAAe,CAACC,MAAM,CAACU,GAAG,CAAC,EAAET,SAAS,EAAEE,YAAY,CAAC;IACzD;EACJ;EACA;EACA;EACA,OAAOD,SAAS,KAAKS,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACV,YAAY,CAAC,GAAG,EAAE;AAClE;AACA;AACA,SAASE,cAAcA,CAACL,MAAM,EAAE;EAC5B,IAAI,CAACA,MAAM,EAAE;IACT,OAAO,KAAK;EAChB;EACA,IAAIA,MAAM,YAAYQ,WAAW,EAAE;IAC/B,OAAO,IAAI;EACf;EACA,IAAI,OAAOM,WAAW,KAAK,WAAW,IAAId,MAAM,YAAYc,WAAW,EAAE;IACrE,OAAO,IAAI;EACf;EACA,IAAI,OAAOC,WAAW,KAAK,WAAW,IAAIf,MAAM,YAAYe,WAAW,EAAE;IACrE,OAAO,IAAI;EACf;EACA;EACA;EACA,IAAI,OAAOC,eAAe,KAAK,WAAW,IAAIhB,MAAM,YAAYgB,eAAe,EAAE;IAC7E,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}