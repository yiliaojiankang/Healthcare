{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { mat4, vec3 } from 'gl-matrix';\n// 该文件专门记录地球模式的数值\n\n// 地球网格半径\nexport var EARTH_RADIUS = 100;\nexport var EARTH_SEGMENTS = 36;\nexport var EARTH_RADIUS_OUTER = 40;\n\n/**\n * 角度转弧度\n * @param deg\n * @returns\n */\nfunction torad(deg) {\n  return deg / 180 * Math.acos(-1);\n}\n/**\n * 经纬度转xyz\n * @param longitude 经度\n * @param latitude 纬度\n * @param radius 半径\n */\nexport function lglt2xyz(lnglat) {\n  // TODO: + Math.PI/2 是为了对齐坐标\n  var lng = torad(lnglat[0]) + Math.PI / 2;\n  var lat = torad(lnglat[1]);\n\n  // TODO: 手动增加一些偏移，减轻面的冲突\n  var radius = EARTH_RADIUS + Math.random() * 0.4;\n  var z = radius * Math.cos(lat) * Math.cos(lng);\n  var x = radius * Math.cos(lat) * Math.sin(lng);\n  var y = radius * Math.sin(lat);\n  return [x, y, z];\n}\n\n/**\n * 构建地球球体网格\n * @param radius\n * @param opt\n * @returns\n */\nexport function primitiveSphere(radius, opt) {\n  var matRotY = mat4.create();\n  var matRotZ = mat4.create();\n  var up = vec3.fromValues(0, 1, 0);\n  var tmpVec3 = vec3.fromValues(0, 0, 0);\n  opt = opt || {};\n  radius = typeof radius !== 'undefined' ? radius : 1;\n  var segments = typeof opt.segments !== 'undefined' ? opt.segments : 32;\n  var totalZRotationSteps = 2 + segments;\n  var totalYRotationSteps = 2 * totalZRotationSteps;\n  var indices = [];\n  var indicesArr = [];\n  var positions = [];\n  var positionsArr = [];\n  var normalArr = [];\n  var uvs = [];\n  for (var zRotationStep = 0; zRotationStep <= totalZRotationSteps; zRotationStep++) {\n    var normalizedZ = zRotationStep / totalZRotationSteps;\n    var angleZ = normalizedZ * Math.PI;\n    for (var yRotationStep = 0; yRotationStep <= totalYRotationSteps; yRotationStep++) {\n      var normalizedY = yRotationStep / totalYRotationSteps;\n      var angleY = normalizedY * Math.PI * 2;\n      mat4.identity(matRotZ);\n      mat4.rotateZ(matRotZ, matRotZ, -angleZ);\n      mat4.identity(matRotY);\n      mat4.rotateY(matRotY, matRotY, angleY);\n      vec3.transformMat4(tmpVec3, up, matRotZ);\n      vec3.transformMat4(tmpVec3, tmpVec3, matRotY);\n      vec3.scale(tmpVec3, tmpVec3, -radius);\n      positions.push(tmpVec3.slice());\n      positionsArr.push.apply(positionsArr, _toConsumableArray(tmpVec3.slice()));\n      vec3.normalize(tmpVec3, tmpVec3);\n      normalArr.push.apply(normalArr, _toConsumableArray(tmpVec3.slice()));\n      uvs.push([normalizedY, 1 - normalizedZ]);\n\n      // position 和 uv 一起存储\n      positionsArr.push(normalizedY, 1 - normalizedZ);\n    }\n    if (zRotationStep > 0) {\n      var verticesCount = positions.length;\n      var firstIndex = verticesCount - 2 * (totalYRotationSteps + 1);\n      for (; firstIndex + totalYRotationSteps + 2 < verticesCount; firstIndex++) {\n        indices.push([firstIndex, firstIndex + 1, firstIndex + totalYRotationSteps + 1]);\n        indicesArr.push(firstIndex, firstIndex + 1, firstIndex + totalYRotationSteps + 1);\n        indices.push([firstIndex + totalYRotationSteps + 1, firstIndex + 1, firstIndex + totalYRotationSteps + 2]);\n        indicesArr.push(firstIndex + totalYRotationSteps + 1, firstIndex + 1, firstIndex + totalYRotationSteps + 2);\n      }\n    }\n  }\n  return {\n    cells: indices,\n    positions: positions,\n    uvs: uvs,\n    positionsArr: positionsArr,\n    indicesArr: indicesArr,\n    normalArr: normalArr\n  };\n}","map":{"version":3,"names":["_toConsumableArray","mat4","vec3","EARTH_RADIUS","EARTH_SEGMENTS","EARTH_RADIUS_OUTER","torad","deg","Math","acos","lglt2xyz","lnglat","lng","PI","lat","radius","random","z","cos","x","sin","y","primitiveSphere","opt","matRotY","create","matRotZ","up","fromValues","tmpVec3","segments","totalZRotationSteps","totalYRotationSteps","indices","indicesArr","positions","positionsArr","normalArr","uvs","zRotationStep","normalizedZ","angleZ","yRotationStep","normalizedY","angleY","identity","rotateZ","rotateY","transformMat4","scale","push","slice","apply","normalize","verticesCount","length","firstIndex","cells"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/earth/utils.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { mat4, vec3 } from 'gl-matrix';\n// 该文件专门记录地球模式的数值\n\n// 地球网格半径\nexport var EARTH_RADIUS = 100;\nexport var EARTH_SEGMENTS = 36;\nexport var EARTH_RADIUS_OUTER = 40;\n\n/**\n * 角度转弧度\n * @param deg\n * @returns\n */\nfunction torad(deg) {\n  return deg / 180 * Math.acos(-1);\n}\n/**\n * 经纬度转xyz\n * @param longitude 经度\n * @param latitude 纬度\n * @param radius 半径\n */\nexport function lglt2xyz(lnglat) {\n  // TODO: + Math.PI/2 是为了对齐坐标\n  var lng = torad(lnglat[0]) + Math.PI / 2;\n  var lat = torad(lnglat[1]);\n\n  // TODO: 手动增加一些偏移，减轻面的冲突\n  var radius = EARTH_RADIUS + Math.random() * 0.4;\n  var z = radius * Math.cos(lat) * Math.cos(lng);\n  var x = radius * Math.cos(lat) * Math.sin(lng);\n  var y = radius * Math.sin(lat);\n  return [x, y, z];\n}\n\n/**\n * 构建地球球体网格\n * @param radius\n * @param opt\n * @returns\n */\nexport function primitiveSphere(radius, opt) {\n  var matRotY = mat4.create();\n  var matRotZ = mat4.create();\n  var up = vec3.fromValues(0, 1, 0);\n  var tmpVec3 = vec3.fromValues(0, 0, 0);\n  opt = opt || {};\n  radius = typeof radius !== 'undefined' ? radius : 1;\n  var segments = typeof opt.segments !== 'undefined' ? opt.segments : 32;\n  var totalZRotationSteps = 2 + segments;\n  var totalYRotationSteps = 2 * totalZRotationSteps;\n  var indices = [];\n  var indicesArr = [];\n  var positions = [];\n  var positionsArr = [];\n  var normalArr = [];\n  var uvs = [];\n  for (var zRotationStep = 0; zRotationStep <= totalZRotationSteps; zRotationStep++) {\n    var normalizedZ = zRotationStep / totalZRotationSteps;\n    var angleZ = normalizedZ * Math.PI;\n    for (var yRotationStep = 0; yRotationStep <= totalYRotationSteps; yRotationStep++) {\n      var normalizedY = yRotationStep / totalYRotationSteps;\n      var angleY = normalizedY * Math.PI * 2;\n      mat4.identity(matRotZ);\n      mat4.rotateZ(matRotZ, matRotZ, -angleZ);\n      mat4.identity(matRotY);\n      mat4.rotateY(matRotY, matRotY, angleY);\n      vec3.transformMat4(tmpVec3, up, matRotZ);\n      vec3.transformMat4(tmpVec3, tmpVec3, matRotY);\n      vec3.scale(tmpVec3, tmpVec3, -radius);\n      positions.push(tmpVec3.slice());\n      positionsArr.push.apply(positionsArr, _toConsumableArray(tmpVec3.slice()));\n      vec3.normalize(tmpVec3, tmpVec3);\n      normalArr.push.apply(normalArr, _toConsumableArray(tmpVec3.slice()));\n      uvs.push([normalizedY, 1 - normalizedZ]);\n\n      // position 和 uv 一起存储\n      positionsArr.push(normalizedY, 1 - normalizedZ);\n    }\n    if (zRotationStep > 0) {\n      var verticesCount = positions.length;\n      var firstIndex = verticesCount - 2 * (totalYRotationSteps + 1);\n      for (; firstIndex + totalYRotationSteps + 2 < verticesCount; firstIndex++) {\n        indices.push([firstIndex, firstIndex + 1, firstIndex + totalYRotationSteps + 1]);\n        indicesArr.push(firstIndex, firstIndex + 1, firstIndex + totalYRotationSteps + 1);\n        indices.push([firstIndex + totalYRotationSteps + 1, firstIndex + 1, firstIndex + totalYRotationSteps + 2]);\n        indicesArr.push(firstIndex + totalYRotationSteps + 1, firstIndex + 1, firstIndex + totalYRotationSteps + 2);\n      }\n    }\n  }\n  return {\n    cells: indices,\n    positions: positions,\n    uvs: uvs,\n    positionsArr: positionsArr,\n    indicesArr: indicesArr,\n    normalArr: normalArr\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}