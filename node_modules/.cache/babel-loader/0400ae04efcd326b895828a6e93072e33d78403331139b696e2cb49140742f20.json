{"ast":null,"code":"import { getTransferList } from '../utils/worker-utils/get-transfer-list';\nvar onMessageWrapperMap = new Map();\n/**\n * Type safe wrapper for worker code\n */\nvar WorkerBody = /** @class */function () {\n  function WorkerBody() {}\n  Object.defineProperty(WorkerBody, \"onmessage\", {\n    /*\n     * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n     */\n    set: function (onMessage) {\n      self.onmessage = function (message) {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        var _a = message.data,\n          type = _a.type,\n          payload = _a.payload;\n        onMessage(type, payload);\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  WorkerBody.addEventListener = function (onMessage) {\n    var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    if (!onMessageWrapper) {\n      onMessageWrapper = function (message) {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        var _a = message.data,\n          type = _a.type,\n          payload = _a.payload;\n        onMessage(type, payload);\n      };\n    }\n    self.addEventListener('message', onMessageWrapper);\n  };\n  WorkerBody.removeEventListener = function (onMessage) {\n    var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    self.removeEventListener('message', onMessageWrapper);\n  };\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * 从 worker 线程发送消息到主线程\n   * @param type\n   * @param payload\n   */\n  WorkerBody.postMessage = function (type, payload) {\n    if (self) {\n      var data = {\n        source: 'Worker thread',\n        type: type,\n        payload: payload\n      };\n      var transferList = getTransferList(payload);\n      // TODO: targetOrigin, transferList\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  };\n  return WorkerBody;\n}();\nexport default WorkerBody;\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  var type = message.type,\n    data = message.data;\n  return type === 'message' && data && typeof data.source === 'string' && data.source === 'Main thread';\n}","map":{"version":3,"names":["getTransferList","onMessageWrapperMap","Map","WorkerBody","Object","defineProperty","set","onMessage","self","onmessage","message","isKnownMessage","_a","data","type","payload","enumerable","configurable","addEventListener","onMessageWrapper","get","removeEventListener","delete","postMessage","source","transferList"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/web-worker-helper/dist/esm/worker-farm/worker-body.js"],"sourcesContent":["import { getTransferList } from '../utils/worker-utils/get-transfer-list';\nvar onMessageWrapperMap = new Map();\n/**\n * Type safe wrapper for worker code\n */\nvar WorkerBody = /** @class */ (function () {\n    function WorkerBody() {\n    }\n    Object.defineProperty(WorkerBody, \"onmessage\", {\n        /*\n         * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n         */\n        set: function (onMessage) {\n            self.onmessage = function (message) {\n                if (!isKnownMessage(message)) {\n                    return;\n                }\n                // Confusingly the message itself also has a 'type' field which is always set to 'message'\n                var _a = message.data, type = _a.type, payload = _a.payload;\n                onMessage(type, payload);\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    WorkerBody.addEventListener = function (onMessage) {\n        var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n        if (!onMessageWrapper) {\n            onMessageWrapper = function (message) {\n                if (!isKnownMessage(message)) {\n                    return;\n                }\n                // Confusingly the message itself also has a 'type' field which is always set to 'message'\n                var _a = message.data, type = _a.type, payload = _a.payload;\n                onMessage(type, payload);\n            };\n        }\n        self.addEventListener('message', onMessageWrapper);\n    };\n    WorkerBody.removeEventListener = function (onMessage) {\n        var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n        onMessageWrapperMap.delete(onMessage);\n        self.removeEventListener('message', onMessageWrapper);\n    };\n    /**\n     * Send a message from a worker to creating thread (main thread)\n     * 从 worker 线程发送消息到主线程\n     * @param type\n     * @param payload\n     */\n    WorkerBody.postMessage = function (type, payload) {\n        if (self) {\n            var data = { source: 'Worker thread', type: type, payload: payload };\n            var transferList = getTransferList(payload);\n            // TODO: targetOrigin, transferList\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            self.postMessage(data, transferList);\n        }\n    };\n    return WorkerBody;\n}());\nexport default WorkerBody;\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n    var type = message.type, data = message.data;\n    return type === 'message' && data && typeof data.source === 'string' && data.source === 'Main thread';\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,yCAAyC;AACzE,IAAIC,mBAAmB,GAAG,IAAIC,GAAG,CAAC,CAAC;AACnC;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC,SAASA,UAAUA,CAAA,EAAG,CACtB;EACAC,MAAM,CAACC,cAAc,CAACF,UAAU,EAAE,WAAW,EAAE;IAC3C;AACR;AACA;IACQG,GAAG,EAAE,SAAAA,CAAUC,SAAS,EAAE;MACtBC,IAAI,CAACC,SAAS,GAAG,UAAUC,OAAO,EAAE;QAChC,IAAI,CAACC,cAAc,CAACD,OAAO,CAAC,EAAE;UAC1B;QACJ;QACA;QACA,IAAIE,EAAE,GAAGF,OAAO,CAACG,IAAI;UAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;UAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;QAC3DR,SAAS,CAACO,IAAI,EAAEC,OAAO,CAAC;MAC5B,CAAC;IACL,CAAC;IACDC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,UAAU,CAACe,gBAAgB,GAAG,UAAUX,SAAS,EAAE;IAC/C,IAAIY,gBAAgB,GAAGlB,mBAAmB,CAACmB,GAAG,CAACb,SAAS,CAAC;IACzD,IAAI,CAACY,gBAAgB,EAAE;MACnBA,gBAAgB,GAAG,SAAAA,CAAUT,OAAO,EAAE;QAClC,IAAI,CAACC,cAAc,CAACD,OAAO,CAAC,EAAE;UAC1B;QACJ;QACA;QACA,IAAIE,EAAE,GAAGF,OAAO,CAACG,IAAI;UAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;UAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;QAC3DR,SAAS,CAACO,IAAI,EAAEC,OAAO,CAAC;MAC5B,CAAC;IACL;IACAP,IAAI,CAACU,gBAAgB,CAAC,SAAS,EAAEC,gBAAgB,CAAC;EACtD,CAAC;EACDhB,UAAU,CAACkB,mBAAmB,GAAG,UAAUd,SAAS,EAAE;IAClD,IAAIY,gBAAgB,GAAGlB,mBAAmB,CAACmB,GAAG,CAACb,SAAS,CAAC;IACzDN,mBAAmB,CAACqB,MAAM,CAACf,SAAS,CAAC;IACrCC,IAAI,CAACa,mBAAmB,CAAC,SAAS,EAAEF,gBAAgB,CAAC;EACzD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIhB,UAAU,CAACoB,WAAW,GAAG,UAAUT,IAAI,EAAEC,OAAO,EAAE;IAC9C,IAAIP,IAAI,EAAE;MACN,IAAIK,IAAI,GAAG;QAAEW,MAAM,EAAE,eAAe;QAAEV,IAAI,EAAEA,IAAI;QAAEC,OAAO,EAAEA;MAAQ,CAAC;MACpE,IAAIU,YAAY,GAAGzB,eAAe,CAACe,OAAO,CAAC;MAC3C;MACA;MACA;MACAP,IAAI,CAACe,WAAW,CAACV,IAAI,EAAEY,YAAY,CAAC;IACxC;EACJ,CAAC;EACD,OAAOtB,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,eAAeA,UAAU;AACzB;AACA,SAASQ,cAAcA,CAACD,OAAO,EAAE;EAC7B,IAAII,IAAI,GAAGJ,OAAO,CAACI,IAAI;IAAED,IAAI,GAAGH,OAAO,CAACG,IAAI;EAC5C,OAAOC,IAAI,KAAK,SAAS,IAAID,IAAI,IAAI,OAAOA,IAAI,CAACW,MAAM,KAAK,QAAQ,IAAIX,IAAI,CAACW,MAAM,KAAK,aAAa;AACzG"},"metadata":{},"sourceType":"module","externalDependencies":[]}