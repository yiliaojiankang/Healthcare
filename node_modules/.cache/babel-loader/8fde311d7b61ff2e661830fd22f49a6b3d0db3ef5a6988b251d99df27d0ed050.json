{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { createMat4, transformVector } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nvar DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\nexport function lngLatToWorld(_ref, scale) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    lng = _ref2[0],\n    lat = _ref2[1];\n  assert(Number.isFinite(lng) && Number.isFinite(scale));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  scale *= TILE_SIZE;\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = scale * (lambda2 + PI) / (2 * PI);\n  var y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref3, scale) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n    x = _ref4[0],\n    y = _ref4[1];\n  scale *= TILE_SIZE;\n  var lambda2 = x / scale * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(PI - y / scale * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref5) {\n  var latitude = _ref5.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref6) {\n  var latitude = _ref6.latitude,\n    longitude = _ref6.longitude,\n    zoom = _ref6.zoom,\n    scale = _ref6.scale,\n    _ref6$highPrecision = _ref6.highPrecision,\n    highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n  var result = {};\n  var worldSize = TILE_SIZE * scale;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var pixelsPerDegreeX = worldSize / 360;\n  var pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n  var altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    var altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n    longitude = _lngLatZ[0],\n    latitude = _lngLatZ[1],\n    z0 = _lngLatZ[2];\n  var _xyz = _slicedToArray(xyz, 3),\n    x = _xyz[0],\n    y = _xyz[1],\n    z = _xyz[2];\n  var scale = 1;\n  var _getDistanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude,\n      scale: scale,\n      highPrecision: true\n    }),\n    pixelsPerMeter = _getDistanceScales.pixelsPerMeter,\n    pixelsPerMeter2 = _getDistanceScales.pixelsPerMeter2;\n  var worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace, scale);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(_ref7) {\n  var height = _ref7.height,\n    pitch = _ref7.pitch,\n    bearing = _ref7.bearing,\n    altitude = _ref7.altitude,\n    _ref7$center = _ref7.center,\n    center = _ref7$center === void 0 ? null : _ref7$center,\n    _ref7$flipY = _ref7.flipY,\n    flipY = _ref7$flipY === void 0 ? false : _ref7$flipY;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.scale(vm, vm, [1, 1, 1 / height]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  if (flipY) {\n    mat4.scale(vm, vm, [1, -1, 1]);\n  }\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n  return vm;\n}\nexport function getProjectionParameters(_ref8) {\n  var width = _ref8.width,\n    height = _ref8.height,\n    _ref8$altitude = _ref8.altitude,\n    altitude = _ref8$altitude === void 0 ? DEFAULT_ALTITUDE : _ref8$altitude,\n    _ref8$pitch = _ref8.pitch,\n    pitch = _ref8$pitch === void 0 ? 0 : _ref8$pitch,\n    _ref8$nearZMultiplier = _ref8.nearZMultiplier,\n    nearZMultiplier = _ref8$nearZMultiplier === void 0 ? 1 : _ref8$nearZMultiplier,\n    _ref8$farZMultiplier = _ref8.farZMultiplier,\n    farZMultiplier = _ref8$farZMultiplier === void 0 ? 1 : _ref8$farZMultiplier;\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var halfFov = Math.atan(0.5 / altitude);\n  var topHalfSurfaceDistance = Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n  var farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n  return {\n    fov: 2 * Math.atan(height / 2 / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref9) {\n  var width = _ref9.width,\n    height = _ref9.height,\n    pitch = _ref9.pitch,\n    altitude = _ref9.altitude,\n    nearZMultiplier = _ref9.nearZMultiplier,\n    farZMultiplier = _ref9.farZMultiplier;\n  var _getProjectionParamet = getProjectionParameters({\n      width: width,\n      height: height,\n      altitude: altitude,\n      pitch: pitch,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    }),\n    fov = _getProjectionParamet.fov,\n    aspect = _getProjectionParamet.aspect,\n    near = _getProjectionParamet.near,\n    far = _getProjectionParamet.far;\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n    x = _xyz2[0],\n    y = _xyz2[1],\n    _xyz2$ = _xyz2[2],\n    z = _xyz2$ === void 0 ? 0 : _xyz2$;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var _xyz3 = _slicedToArray(xyz, 3),\n    x = _xyz3[0],\n    y = _xyz3[1],\n    z = _xyz3[2];\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"names":["createMat4","transformVector","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","log2","lngLatToWorld","_ref","_ref2","_slicedToArray","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","_ref3","_ref4","atan","exp","getMeterZoom","_ref5","latitude","latCosine","cos","getDistanceScales","_ref6","longitude","_ref6$highPrecision","highPrecision","undefined","result","worldSize","pixelsPerDegreeX","pixelsPerDegreeY","altPixelsPerMeter","pixelsPerMeter","metersPerPixel","pixelsPerDegree","degreesPerPixel","latCosine2","pixelsPerDegreeY2","altPixelsPerDegree2","altPixelsPerMeter2","pixelsPerDegree2","pixelsPerMeter2","addMetersToLngLat","lngLatZ","xyz","_lngLatZ","z0","_xyz","z","_getDistanceScales","worldspace","newLngLat","newZ","getViewMatrix","_ref7","height","pitch","bearing","altitude","_ref7$center","center","_ref7$flipY","flipY","vm","translate","rotateX","rotateZ","negate","getProjectionParameters","_ref8","width","_ref8$altitude","_ref8$pitch","_ref8$nearZMultiplier","nearZMultiplier","_ref8$farZMultiplier","farZMultiplier","pitchRadians","halfFov","topHalfSurfaceDistance","sin","farZ","fov","aspect","focalDistance","near","far","getProjectionMatrix","_ref9","_getProjectionParamet","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","_xyz2","_xyz2$","pixelsToWorld","pixelUnprojectionMatrix","targetZ","arguments","length","_xyz3","coord","coord0","coord1","z1","t","lerp"],"sources":["../../src/web-mercator-utils.js"],"sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n\n// Mapbox default altitude\nconst DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return Math.log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param {Array} lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return {Array} [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat], scale) {\n  assert(Number.isFinite(lng) && Number.isFinite(scale));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  scale *= TILE_SIZE;\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = scale * (lambda2 + PI) / (2 * PI);\n  const y = scale * (PI - Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\n\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param {object|Vector} xy - object with {x,y} members\n *  representing point on projected map plane\n * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat([x, y], scale) {\n  scale *= TILE_SIZE;\n  const lambda2 = (x / scale) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp(PI - (y / scale) * (2 * PI))) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales({latitude, longitude, zoom, scale, highPrecision = false}) {\n  // Calculate scale from zoom if not provided\n  scale = scale !== undefined ? scale : zoomToScale(zoom);\n\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude) && Number.isFinite(scale));\n\n  const result = {};\n  const worldSize = TILE_SIZE * scale;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     pixelsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     pixelsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const pixelsPerDegreeX = worldSize / 360;\n  const pixelsPerDegreeY = pixelsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altPixelsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.pixelsPerMeter = [altPixelsPerMeter, -altPixelsPerMeter, altPixelsPerMeter];\n  result.metersPerPixel = [1 / altPixelsPerMeter, -1 / altPixelsPerMeter, 1 / altPixelsPerMeter];\n\n  result.pixelsPerDegree = [pixelsPerDegreeX, -pixelsPerDegreeY, altPixelsPerMeter];\n  result.degreesPerPixel = [1 / pixelsPerDegreeX, -1 / pixelsPerDegreeY, 1 / altPixelsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    const pixelsPerDegreeY2 = pixelsPerDegreeX * latCosine2 / 2;\n    const altPixelsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    const altPixelsPerMeter2 = altPixelsPerDegree2 / pixelsPerDegreeY * altPixelsPerMeter;\n\n    result.pixelsPerDegree2 = [0, -pixelsPerDegreeY2, altPixelsPerDegree2];\n    result.pixelsPerMeter2 = [altPixelsPerMeter2, 0, altPixelsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const scale = 1; // any constant works\n  const {pixelsPerMeter, pixelsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    scale,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ, scale);\n  worldspace[0] += x * (pixelsPerMeter[0] + pixelsPerMeter2[0] * y);\n  worldspace[1] += y * (pixelsPerMeter[1] + pixelsPerMeter2[1] * y);\n\n  const newLngLat = worldToLngLat(worldspace, scale);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  center = null,\n  // Options\n  flipY = false\n}) {\n\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // After the rotateX, z values are in pixel units. Convert them to\n  // altitude units. 1 altitude unit = the screen height.\n  mat4.scale(vm, vm, [1, 1, 1 / height]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  if (flipY) {\n    mat4.scale(vm, vm, [1, -1, 1]);\n  }\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  altitude = DEFAULT_ALTITUDE,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // Find the distance from the center point to the center top\n  // in altitude units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const halfFov = Math.atan(0.5 / altitude);\n  const topHalfSurfaceDistance =\n    Math.sin(halfFov) * altitude / Math.sin(Math.PI / 2 - pitchRadians - halfFov);\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.cos(Math.PI / 2 - pitchRadians) * topHalfSurfaceDistance + altitude;\n\n  return {\n    fov: 2 * Math.atan((height / 2) / altitude),\n    aspect: width / height,\n    focalDistance: altitude,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} =\n    getProjectionParameters({width, height, altitude, pitch, nearZMultiplier, farZMultiplier});\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov,      // fov in radians\n    aspect,   // aspect ratio\n    near,     // near plane\n    far       // far plane\n  );\n\n  return projectionMatrix;\n}\n\n/**\n * Project flat coordinates to pixels on screen.\n *\n * @param {Array} xyz - flat coordinate on 512*512 Mercator Zoom 0 tile\n * @param {Matrix4} pixelProjectionMatrix - projection matrix\n * @return {Array} [x, y, depth] pixel coordinate on screen.\n */\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param {Array} xyz - pixel coordinate on screen.\n * @param {Matrix4} pixelUnprojectionMatrix - unprojection matrix\n * @param {Number} targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return {Array} [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}