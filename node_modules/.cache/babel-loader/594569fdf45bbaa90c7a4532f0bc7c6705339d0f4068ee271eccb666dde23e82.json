{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { IDebugLog, ILayerStage, TYPES } from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar DataSourcePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function DataSourcePlugin() {\n    _classCallCheck(this, DataSourcePlugin);\n  }\n  _createClass(DataSourcePlugin, [{\n    key: \"apply\",\n    value: function apply(layer) {\n      var _this = this;\n      this.mapService = layer.getContainer().get(TYPES.IMapService);\n      layer.hooks.init.tapPromise('DataSourcePlugin', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var source, _ref2, data, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              layer.log(IDebugLog.SourceInitStart, ILayerStage.INIT);\n              source = layer.getSource();\n              if (!source) {\n                // Tip: 用户没有传入 source 的时候使用图层的默认数据\n                _ref2 = layer.sourceOption || layer.defaultSourceConfig, data = _ref2.data, options = _ref2.options;\n                source = new Source(data, options);\n                layer.setSource(source);\n              }\n              if (!source.inited) {\n                _context.next = 8;\n                break;\n              }\n              _this.updateClusterData(layer);\n              layer.log(IDebugLog.SourceInitEnd, ILayerStage.INIT);\n              _context.next = 10;\n              break;\n            case 8:\n              _context.next = 10;\n              return new Promise(function (resolve) {\n                source.on('update', function (e) {\n                  if (e.type === 'inited') {\n                    _this.updateClusterData(layer);\n                    layer.log(IDebugLog.SourceInitEnd, ILayerStage.INIT);\n                  }\n                  resolve(null);\n                });\n              });\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })));\n\n      // 检测数据是否需要更新\n      layer.hooks.beforeRenderData.tapPromise('DataSourcePlugin', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var neeUpdateCluster, dataSourceNeedUpdate, needScale;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              neeUpdateCluster = _this.updateClusterData(layer);\n              dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n              layer.dataState.dataSourceNeedUpdate = false;\n              needScale = neeUpdateCluster || dataSourceNeedUpdate;\n              return _context2.abrupt(\"return\", needScale);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      })));\n    }\n  }, {\n    key: \"updateClusterData\",\n    value: function updateClusterData(layer) {\n      // Tip: 矢量瓦片不需要进行聚合操作\n      if (layer.isTileLayer || layer.tileLayer || !layer.getSource()) {\n        return false;\n      }\n      var source = layer.getSource();\n      var cluster = source.cluster;\n      var _source$clusterOption = source.clusterOptions.zoom,\n        zoom = _source$clusterOption === void 0 ? 0 : _source$clusterOption;\n      var newZoom = this.mapService.getZoom() - 1;\n      var dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n      if (cluster && dataSourceNeedUpdate) {\n        // 数据发生更新\n        source.updateClusterData(Math.floor(newZoom));\n      }\n      // 如果 dataSource 有更新，跳过 zoom 的判断，直接更新一次\n      if (cluster && Math.abs(layer.clusterZoom - newZoom) >= 1) {\n        if (zoom !== Math.floor(newZoom)) {\n          source.updateClusterData(Math.floor(newZoom));\n        }\n        layer.clusterZoom = newZoom;\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return DataSourcePlugin;\n}()) || _class);\nexport { DataSourcePlugin as default };","map":{"version":3,"names":["_asyncToGenerator","_classCallCheck","_createClass","_dec","_class","_regeneratorRuntime","IDebugLog","ILayerStage","TYPES","Source","injectable","DataSourcePlugin","key","value","apply","layer","_this","mapService","getContainer","get","IMapService","hooks","init","tapPromise","mark","_callee","source","_ref2","data","options","wrap","_callee$","_context","prev","next","log","SourceInitStart","INIT","getSource","sourceOption","defaultSourceConfig","setSource","inited","updateClusterData","SourceInitEnd","Promise","resolve","on","e","type","stop","beforeRenderData","_callee2","neeUpdateCluster","dataSourceNeedUpdate","needScale","_callee2$","_context2","dataState","abrupt","isTileLayer","tileLayer","cluster","_source$clusterOption","clusterOptions","zoom","newZoom","getZoom","Math","floor","abs","clusterZoom","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/plugins/DataSourcePlugin.js"],"sourcesContent":["import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { IDebugLog, ILayerStage, TYPES } from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar DataSourcePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function DataSourcePlugin() {\n    _classCallCheck(this, DataSourcePlugin);\n  }\n  _createClass(DataSourcePlugin, [{\n    key: \"apply\",\n    value: function apply(layer) {\n      var _this = this;\n      this.mapService = layer.getContainer().get(TYPES.IMapService);\n      layer.hooks.init.tapPromise('DataSourcePlugin', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var source, _ref2, data, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              layer.log(IDebugLog.SourceInitStart, ILayerStage.INIT);\n              source = layer.getSource();\n              if (!source) {\n                // Tip: 用户没有传入 source 的时候使用图层的默认数据\n                _ref2 = layer.sourceOption || layer.defaultSourceConfig, data = _ref2.data, options = _ref2.options;\n                source = new Source(data, options);\n                layer.setSource(source);\n              }\n              if (!source.inited) {\n                _context.next = 8;\n                break;\n              }\n              _this.updateClusterData(layer);\n              layer.log(IDebugLog.SourceInitEnd, ILayerStage.INIT);\n              _context.next = 10;\n              break;\n            case 8:\n              _context.next = 10;\n              return new Promise(function (resolve) {\n                source.on('update', function (e) {\n                  if (e.type === 'inited') {\n                    _this.updateClusterData(layer);\n                    layer.log(IDebugLog.SourceInitEnd, ILayerStage.INIT);\n                  }\n                  resolve(null);\n                });\n              });\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })));\n\n      // 检测数据是否需要更新\n      layer.hooks.beforeRenderData.tapPromise('DataSourcePlugin', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var neeUpdateCluster, dataSourceNeedUpdate, needScale;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              neeUpdateCluster = _this.updateClusterData(layer);\n              dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n              layer.dataState.dataSourceNeedUpdate = false;\n              needScale = neeUpdateCluster || dataSourceNeedUpdate;\n              return _context2.abrupt(\"return\", needScale);\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      })));\n    }\n  }, {\n    key: \"updateClusterData\",\n    value: function updateClusterData(layer) {\n      // Tip: 矢量瓦片不需要进行聚合操作\n      if (layer.isTileLayer || layer.tileLayer || !layer.getSource()) {\n        return false;\n      }\n      var source = layer.getSource();\n      var cluster = source.cluster;\n      var _source$clusterOption = source.clusterOptions.zoom,\n        zoom = _source$clusterOption === void 0 ? 0 : _source$clusterOption;\n      var newZoom = this.mapService.getZoom() - 1;\n      var dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n      if (cluster && dataSourceNeedUpdate) {\n        // 数据发生更新\n        source.updateClusterData(Math.floor(newZoom));\n      }\n      // 如果 dataSource 有更新，跳过 zoom 的判断，直接更新一次\n      if (cluster && Math.abs(layer.clusterZoom - newZoom) >= 1) {\n        if (zoom !== Math.floor(newZoom)) {\n          source.updateClusterData(Math.floor(newZoom));\n        }\n        layer.clusterZoom = newZoom;\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return DataSourcePlugin;\n}()) || _class);\nexport { DataSourcePlugin as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}