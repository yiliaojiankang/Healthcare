{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\n/*\n * @Author: moyee\n * @LastEditors: moyee\n * @Description: 拖动 Combo\n */\nimport { each } from '@antv/util';\nimport Util from '../util';\nimport Global from '../global';\nvar calculationItemsBBox = Util.calculationItemsBBox;\n/**\n * 遍历拖动的 Combo 下的所有 Combo\n * @param data 拖动的 Combo\n * @param fn\n */\nvar traverseCombo = function traverseCombo(data, fn) {\n  if (fn(data) === false) {\n    return;\n  }\n  if (data) {\n    var combos = data.get('combos');\n    if (combos.length === 0) {\n      return false;\n    }\n    each(combos, function (child) {\n      traverseCombo(child, fn);\n    });\n  }\n};\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      enableDelegate: false,\n      delegateStyle: {},\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      activeState: '',\n      selectedState: 'selected',\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'combo:mousedown': 'onMouseDown',\n      'combo:dragstart': 'onDragStart',\n      'combo:drag': 'onDrag',\n      'combo:dragend': 'onDragEnd',\n      'combo:drop': 'onDrop',\n      'node:drop': 'onNodeDrop',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave'\n    };\n  },\n  validationCombo: function validationCombo(evt) {\n    var item = evt.item;\n    if (!item || item.destroyed) {\n      return false;\n    }\n    if (!this.shouldUpdate(evt, this)) {\n      return false;\n    }\n    var type = item.getType();\n    if (type !== 'combo') {\n      return false;\n    }\n    return true;\n  },\n  onMouseDown: function onMouseDown(evt) {\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n  },\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n    var graph = this.graph;\n    var item = evt.item;\n    this.currentShouldEnd = true;\n    if (!this.validationCombo(evt)) return;\n    this.targets = [];\n    // 获取所有选中的 Combo\n    var combos = graph.findAllByState('combo', this.selectedState);\n    var currentCombo = item.get('id');\n    var dragCombos = combos.filter(function (combo) {\n      var comboId = combo.get('id');\n      return currentCombo === comboId;\n    });\n    if (dragCombos.length === 0) {\n      this.targets.push(item);\n    } else {\n      this.targets = combos;\n    }\n    var beforeDragItems = [];\n    this.targets.forEach(function (t) {\n      var _a = t.getModel(),\n        x = _a.x,\n        y = _a.y,\n        id = _a.id;\n      beforeDragItems.push({\n        x: x,\n        y: y,\n        id: id\n      });\n    });\n    this.set('beforeDragItems', beforeDragItems);\n    if (this.activeState) {\n      this.targets.map(function (combo) {\n        var model = combo.getModel();\n        if (model.parentId) {\n          var parentCombo = graph.findById(model.parentId);\n          if (parentCombo) {\n            graph.setItemState(parentCombo, _this.activeState, true);\n          }\n        }\n      });\n    }\n    this.point = {};\n    this.originPoint = {};\n    this.currentItemChildCombos = [];\n    traverseCombo(item, function (param) {\n      if (param.destroyed) {\n        return false;\n      }\n      var model = param.getModel();\n      _this.currentItemChildCombos.push(model.id);\n      return true;\n    });\n  },\n  onDrag: function onDrag(evt) {\n    var _this = this;\n    if (!this.origin) {\n      return;\n    }\n    if (!this.validationCombo(evt)) return;\n    if (this.enableDelegate) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.activeState) {\n        var graph_1 = this.graph;\n        var item = evt.item;\n        var model_1 = item.getModel();\n        // 拖动过程中实时计算距离\n        var combos = graph_1.getCombos();\n        var sourceBBox = item.getBBox();\n        var centerX_1 = sourceBBox.centerX,\n          centerY_1 = sourceBBox.centerY,\n          width_1 = sourceBBox.width;\n        // 参与计算的 Combo，需要排除掉：\n        // 1、拖动 combo 自己\n        // 2、拖动 combo 的 parent\n        // 3、拖动 Combo 的 children\n        var calcCombos = combos.filter(function (combo) {\n          var cmodel = combo.getModel();\n          // 被拖动的是最外层的 Combo，无 parent，排除自身和子元素\n          if (!model_1.parentId) {\n            return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n          }\n          return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n        });\n        calcCombos.map(function (combo) {\n          var _a = combo.getBBox(),\n            cx = _a.centerX,\n            cy = _a.centerY,\n            w = _a.width;\n          // 拖动的 combo 和要进入的 combo 之间的距离\n          var disX = centerX_1 - cx;\n          var disY = centerY_1 - cy;\n          // 圆心距离\n          var distance = 2 * Math.sqrt(disX * disX + disY * disY);\n          if (width_1 + w - distance > 0.8 * width_1) {\n            graph_1.setItemState(combo, _this.activeState, true);\n          } else {\n            graph_1.setItemState(combo, _this.activeState, false);\n          }\n        });\n      }\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt);\n      });\n      if (this.onlyChangeComboSize) {\n        // 拖动节点过程中，动态改变 Combo 的大小\n        this.updateParentCombos();\n      }\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n    // 当启用 delegate 时，拖动结束时需要更新 combo\n    if (this.enableDelegate || restore) {\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt, restore);\n      });\n    }\n  },\n  onDrop: function onDrop(evt) {\n    var _this = this;\n    // 被放下的目标 combo\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd(evt, item, this);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !item || !this.targets || item.destroyed) return;\n    var graph = this.graph;\n    var targetModel = item.getModel();\n    this.targets.map(function (combo) {\n      var model = combo.getModel();\n      if (model.parentId !== targetModel.id) {\n        if (_this.activeState) {\n          graph.setItemState(item, _this.activeState, false);\n        }\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, targetModel.id, false);\n        } else {\n          graph.updateCombo(combo);\n        }\n      } else {\n        graph.updateCombo(item);\n      }\n    });\n    this.end(item, evt);\n    // 如果已经拖放下了，则不需要再通过距离判断了\n    this.endComparison = true;\n  },\n  onNodeDrop: function onNodeDrop(evt) {\n    var _this = this;\n    if (!this.targets || this.targets.length === 0) return;\n    var graph = this.graph;\n    var item = evt.item;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd(evt, newParentCombo, this);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    var droppedCombo;\n    // 如果被放置的的节点有 comboId，且这个 comboId 与正在被拖拽的 combo 的父 id 不相同，则更新父亲为 comboId\n    if (comboId) {\n      if (this.activeState) {\n        var combo = graph.findById(comboId);\n        graph.setItemState(combo, this.activeState, false);\n      }\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          if (comboId !== combo.getID()) {\n            droppedCombo = graph.findById(comboId);\n            if (comboId !== combo.getModel().parentId) graph.updateComboTree(combo, comboId, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } else {\n      // 如果被放置的节点没有 comboId，且正在被拖拽的 combo 有父 id，则更新父亲为 undefined\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          var model = combo.getModel();\n          if (model.comboId) {\n            graph.updateComboTree(combo, undefined, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    }\n    // 如果已经拖放下了，则不需要再通过距离判断了\n    this.endComparison = true;\n    this.end(droppedCombo, evt);\n  },\n  onDragEnter: function onDragEnter(evt) {\n    if (!this.origin) {\n      return;\n    }\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, true);\n    }\n  },\n  onDragLeave: function onDragLeave(evt) {\n    if (!this.origin) {\n      return;\n    }\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, false);\n    }\n  },\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var item = evt.item;\n    if (this.currentShouldEnd) {\n      this.updatePositions(evt);\n    }\n    var parentCombo = this.getParentCombo(item.getModel().parentId);\n    var graph = this.graph;\n    if (parentCombo && this.activeState) {\n      graph.setItemState(parentCombo, this.activeState, false);\n    }\n    this.end(undefined, evt);\n  },\n  end: function end(comboDropedOn, evt) {\n    var _this = this;\n    if (!this.origin) return;\n    var graph = this.graph;\n    // 删除delegate shape\n    if (this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      delegateGroup.clear();\n      this.delegateShape = null;\n    }\n    if (comboDropedOn && this.activeState) {\n      graph.setItemState(comboDropedOn, this.activeState, false);\n    }\n    // 若没有被放置的 combo，则是被放置在画布上\n    if (!comboDropedOn) {\n      var stack_1 = graph.get('enabledStack') && this.enableStack;\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: [].concat(this.get('beforeDragItems'))\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.targets.map(function (combo) {\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, undefined, stack_1);\n        } else {\n          graph.updateCombo(combo);\n          var _a = combo.getModel(),\n            x = _a.x,\n            y = _a.y,\n            id = _a.id;\n          stackData_1.after.combos.push({\n            x: x,\n            y: y,\n            id: id\n          });\n          graph.pushStack('update', stackData_1);\n        }\n      });\n    }\n    this.point = [];\n    this.origin = null;\n    this.originPoint = null;\n    this.targets.length = 0;\n  },\n  /**\n   * 遍历 comboTree，分别更新 node 和 combo\n   * @param data\n   * @param fn\n   */\n  traverse: function traverse(data, fn, edgesToBeUpdate) {\n    var _this = this;\n    if (edgesToBeUpdate === void 0) {\n      edgesToBeUpdate = {};\n    }\n    if (fn(data, edgesToBeUpdate) === false) {\n      return;\n    }\n    if (data) {\n      var combos = data.get('combos');\n      each(combos, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n      var nodes = data.get('nodes');\n      each(nodes, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n    }\n  },\n  updateCombo: function updateCombo(item, evt, restore) {\n    this.updateSingleItem(item, evt, restore);\n    var edgesToBeUpdate = {};\n    this.traverse(item, function (paramItem, paramEdgesMap) {\n      if (paramItem.destroyed) {\n        return false;\n      }\n      paramItem.getEdges().forEach(function (edge) {\n        return paramEdgesMap[edge.getID()] = edge;\n      });\n      return true;\n    }, edgesToBeUpdate);\n    Object.values(edgesToBeUpdate).forEach(function (edge) {\n      return edge.refresh();\n    });\n  },\n  /**\n   *\n   * @param item 当前正在拖动的元素\n   * @param evt\n   */\n  updateSingleItem: function updateSingleItem(item, evt, restore) {\n    var origin = this.origin;\n    var graph = this.graph;\n    var model = item.getModel();\n    var itemId = item.get('id');\n    if (!this.point[itemId]) {\n      this.point[itemId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n    var x = evt.x - origin.x + this.point[itemId].x;\n    var y = evt.y - origin.y + this.point[itemId].y;\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n    graph.updateItem(item, {\n      x: x,\n      y: y\n    }, false);\n    // item.getEdges()?.forEach(edge => edge.refresh());\n  },\n\n  /**\n   * 根据 ID 获取父 Combo\n   * @param parentId 父 Combo ID\n   */\n  getParentCombo: function getParentCombo(parentId) {\n    var graph = this.graph;\n    if (!parentId) {\n      return undefined;\n    }\n    var parentCombo = graph.findById(parentId);\n    if (!parentCombo) {\n      return undefined;\n    }\n    return parentCombo;\n  },\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph;\n    // 当没有 delegate shape 时创建\n    if (!this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      var bbox = null;\n      if (this.targets.length > 1) {\n        bbox = calculationItemsBBox(this.targets);\n      } else {\n        bbox = this.targets[0].getBBox();\n      }\n      var x = bbox.x,\n        y = bbox.y,\n        width = bbox.width,\n        height = bbox.height,\n        minX = bbox.minX,\n        minY = bbox.minY;\n      this.originPoint = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n      var attrs = __assign(__assign({}, Global.delegateStyle), this.delegateStyle);\n      this.delegateShape = delegateGroup.addShape('rect', {\n        attrs: __assign({\n          width: bbox.width,\n          height: bbox.height,\n          x: bbox.x,\n          y: bbox.y\n        }, attrs),\n        name: 'combo-delegate-shape'\n      });\n      this.delegateShape.set('capture', false);\n      this.delegate = this.delegateShape;\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateShape.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n  /**\n   * updates the parent combos' size and position\n   */\n  updateParentCombos: function updateParentCombos() {\n    var _a = this,\n      graph = _a.graph,\n      targets = _a.targets;\n    var comboParentMap = {};\n    targets === null || targets === void 0 ? void 0 : targets.forEach(function (target) {\n      var comboId = target.getModel().parentId;\n      if (comboId) comboParentMap[comboId] = graph.findById(comboId);\n    });\n    Object.values(comboParentMap).forEach(function (combo) {\n      if (combo) graph.updateCombo(combo);\n    });\n  }\n};","map":{"version":3,"names":["__assign","each","Util","Global","calculationItemsBBox","traverseCombo","data","fn","combos","get","length","child","getDefaultCfg","enableDelegate","delegateStyle","onlyChangeComboSize","activeState","selectedState","enableStack","getEvents","validationCombo","evt","item","destroyed","shouldUpdate","type","getType","onMouseDown","origin","x","y","onDragStart","_this","graph","currentShouldEnd","targets","findAllByState","currentCombo","dragCombos","filter","combo","comboId","push","beforeDragItems","forEach","t","_a","getModel","id","set","map","model","parentId","parentCombo","findById","setItemState","point","originPoint","currentItemChildCombos","param","onDrag","updateDelegate","graph_1","model_1","getCombos","sourceBBox","getBBox","centerX_1","centerX","centerY_1","centerY","width_1","width","calcCombos","cmodel","includes","cx","cy","w","disX","disY","distance","Math","sqrt","updateCombo","updateParentCombos","updatePositions","restore","onDrop","shouldEnd","targetModel","updateComboTree","end","endComparison","onNodeDrop","newParentCombo","undefined","droppedCombo","getID","onDragEnter","onDragLeave","onDragEnd","getParentCombo","comboDropedOn","delegateShape","delegateGroup","clear","stack_1","stackData_1","before","nodes","edges","concat","after","pushStack","traverse","edgesToBeUpdate","updateSingleItem","paramItem","paramEdgesMap","getEdges","edge","Object","values","refresh","itemId","updateItem","bbox","height","minX","minY","attrs","addShape","name","delegate","clientX","clientY","attr","comboParentMap","target"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-pc/es/behavior/drag-combo.js"],"sourcesContent":["import { __assign } from \"tslib\";\n/*\n * @Author: moyee\n * @LastEditors: moyee\n * @Description: 拖动 Combo\n */\nimport { each } from '@antv/util';\nimport Util from '../util';\nimport Global from '../global';\nvar calculationItemsBBox = Util.calculationItemsBBox;\n/**\n * 遍历拖动的 Combo 下的所有 Combo\n * @param data 拖动的 Combo\n * @param fn\n */\nvar traverseCombo = function traverseCombo(data, fn) {\n  if (fn(data) === false) {\n    return;\n  }\n  if (data) {\n    var combos = data.get('combos');\n    if (combos.length === 0) {\n      return false;\n    }\n    each(combos, function (child) {\n      traverseCombo(child, fn);\n    });\n  }\n};\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      enableDelegate: false,\n      delegateStyle: {},\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      activeState: '',\n      selectedState: 'selected',\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'combo:mousedown': 'onMouseDown',\n      'combo:dragstart': 'onDragStart',\n      'combo:drag': 'onDrag',\n      'combo:dragend': 'onDragEnd',\n      'combo:drop': 'onDrop',\n      'node:drop': 'onNodeDrop',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave'\n    };\n  },\n  validationCombo: function validationCombo(evt) {\n    var item = evt.item;\n    if (!item || item.destroyed) {\n      return false;\n    }\n    if (!this.shouldUpdate(evt, this)) {\n      return false;\n    }\n    var type = item.getType();\n    if (type !== 'combo') {\n      return false;\n    }\n    return true;\n  },\n  onMouseDown: function onMouseDown(evt) {\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n  },\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n    var graph = this.graph;\n    var item = evt.item;\n    this.currentShouldEnd = true;\n    if (!this.validationCombo(evt)) return;\n    this.targets = [];\n    // 获取所有选中的 Combo\n    var combos = graph.findAllByState('combo', this.selectedState);\n    var currentCombo = item.get('id');\n    var dragCombos = combos.filter(function (combo) {\n      var comboId = combo.get('id');\n      return currentCombo === comboId;\n    });\n    if (dragCombos.length === 0) {\n      this.targets.push(item);\n    } else {\n      this.targets = combos;\n    }\n    var beforeDragItems = [];\n    this.targets.forEach(function (t) {\n      var _a = t.getModel(),\n        x = _a.x,\n        y = _a.y,\n        id = _a.id;\n      beforeDragItems.push({\n        x: x,\n        y: y,\n        id: id\n      });\n    });\n    this.set('beforeDragItems', beforeDragItems);\n    if (this.activeState) {\n      this.targets.map(function (combo) {\n        var model = combo.getModel();\n        if (model.parentId) {\n          var parentCombo = graph.findById(model.parentId);\n          if (parentCombo) {\n            graph.setItemState(parentCombo, _this.activeState, true);\n          }\n        }\n      });\n    }\n    this.point = {};\n    this.originPoint = {};\n    this.currentItemChildCombos = [];\n    traverseCombo(item, function (param) {\n      if (param.destroyed) {\n        return false;\n      }\n      var model = param.getModel();\n      _this.currentItemChildCombos.push(model.id);\n      return true;\n    });\n  },\n  onDrag: function onDrag(evt) {\n    var _this = this;\n    if (!this.origin) {\n      return;\n    }\n    if (!this.validationCombo(evt)) return;\n    if (this.enableDelegate) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.activeState) {\n        var graph_1 = this.graph;\n        var item = evt.item;\n        var model_1 = item.getModel();\n        // 拖动过程中实时计算距离\n        var combos = graph_1.getCombos();\n        var sourceBBox = item.getBBox();\n        var centerX_1 = sourceBBox.centerX,\n          centerY_1 = sourceBBox.centerY,\n          width_1 = sourceBBox.width;\n        // 参与计算的 Combo，需要排除掉：\n        // 1、拖动 combo 自己\n        // 2、拖动 combo 的 parent\n        // 3、拖动 Combo 的 children\n        var calcCombos = combos.filter(function (combo) {\n          var cmodel = combo.getModel();\n          // 被拖动的是最外层的 Combo，无 parent，排除自身和子元素\n          if (!model_1.parentId) {\n            return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n          }\n          return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n        });\n        calcCombos.map(function (combo) {\n          var _a = combo.getBBox(),\n            cx = _a.centerX,\n            cy = _a.centerY,\n            w = _a.width;\n          // 拖动的 combo 和要进入的 combo 之间的距离\n          var disX = centerX_1 - cx;\n          var disY = centerY_1 - cy;\n          // 圆心距离\n          var distance = 2 * Math.sqrt(disX * disX + disY * disY);\n          if (width_1 + w - distance > 0.8 * width_1) {\n            graph_1.setItemState(combo, _this.activeState, true);\n          } else {\n            graph_1.setItemState(combo, _this.activeState, false);\n          }\n        });\n      }\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt);\n      });\n      if (this.onlyChangeComboSize) {\n        // 拖动节点过程中，动态改变 Combo 的大小\n        this.updateParentCombos();\n      }\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n    // 当启用 delegate 时，拖动结束时需要更新 combo\n    if (this.enableDelegate || restore) {\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt, restore);\n      });\n    }\n  },\n  onDrop: function onDrop(evt) {\n    var _this = this;\n    // 被放下的目标 combo\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd(evt, item, this);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !item || !this.targets || item.destroyed) return;\n    var graph = this.graph;\n    var targetModel = item.getModel();\n    this.targets.map(function (combo) {\n      var model = combo.getModel();\n      if (model.parentId !== targetModel.id) {\n        if (_this.activeState) {\n          graph.setItemState(item, _this.activeState, false);\n        }\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, targetModel.id, false);\n        } else {\n          graph.updateCombo(combo);\n        }\n      } else {\n        graph.updateCombo(item);\n      }\n    });\n    this.end(item, evt);\n    // 如果已经拖放下了，则不需要再通过距离判断了\n    this.endComparison = true;\n  },\n  onNodeDrop: function onNodeDrop(evt) {\n    var _this = this;\n    if (!this.targets || this.targets.length === 0) return;\n    var graph = this.graph;\n    var item = evt.item;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd(evt, newParentCombo, this);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    var droppedCombo;\n    // 如果被放置的的节点有 comboId，且这个 comboId 与正在被拖拽的 combo 的父 id 不相同，则更新父亲为 comboId\n    if (comboId) {\n      if (this.activeState) {\n        var combo = graph.findById(comboId);\n        graph.setItemState(combo, this.activeState, false);\n      }\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          if (comboId !== combo.getID()) {\n            droppedCombo = graph.findById(comboId);\n            if (comboId !== combo.getModel().parentId) graph.updateComboTree(combo, comboId, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } else {\n      // 如果被放置的节点没有 comboId，且正在被拖拽的 combo 有父 id，则更新父亲为 undefined\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          var model = combo.getModel();\n          if (model.comboId) {\n            graph.updateComboTree(combo, undefined, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    }\n    // 如果已经拖放下了，则不需要再通过距离判断了\n    this.endComparison = true;\n    this.end(droppedCombo, evt);\n  },\n  onDragEnter: function onDragEnter(evt) {\n    if (!this.origin) {\n      return;\n    }\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, true);\n    }\n  },\n  onDragLeave: function onDragLeave(evt) {\n    if (!this.origin) {\n      return;\n    }\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, false);\n    }\n  },\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var item = evt.item;\n    if (this.currentShouldEnd) {\n      this.updatePositions(evt);\n    }\n    var parentCombo = this.getParentCombo(item.getModel().parentId);\n    var graph = this.graph;\n    if (parentCombo && this.activeState) {\n      graph.setItemState(parentCombo, this.activeState, false);\n    }\n    this.end(undefined, evt);\n  },\n  end: function end(comboDropedOn, evt) {\n    var _this = this;\n    if (!this.origin) return;\n    var graph = this.graph;\n    // 删除delegate shape\n    if (this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      delegateGroup.clear();\n      this.delegateShape = null;\n    }\n    if (comboDropedOn && this.activeState) {\n      graph.setItemState(comboDropedOn, this.activeState, false);\n    }\n    // 若没有被放置的 combo，则是被放置在画布上\n    if (!comboDropedOn) {\n      var stack_1 = graph.get('enabledStack') && this.enableStack;\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: [].concat(this.get('beforeDragItems'))\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.targets.map(function (combo) {\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, undefined, stack_1);\n        } else {\n          graph.updateCombo(combo);\n          var _a = combo.getModel(),\n            x = _a.x,\n            y = _a.y,\n            id = _a.id;\n          stackData_1.after.combos.push({\n            x: x,\n            y: y,\n            id: id\n          });\n          graph.pushStack('update', stackData_1);\n        }\n      });\n    }\n    this.point = [];\n    this.origin = null;\n    this.originPoint = null;\n    this.targets.length = 0;\n  },\n  /**\n   * 遍历 comboTree，分别更新 node 和 combo\n   * @param data\n   * @param fn\n   */\n  traverse: function traverse(data, fn, edgesToBeUpdate) {\n    var _this = this;\n    if (edgesToBeUpdate === void 0) {\n      edgesToBeUpdate = {};\n    }\n    if (fn(data, edgesToBeUpdate) === false) {\n      return;\n    }\n    if (data) {\n      var combos = data.get('combos');\n      each(combos, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n      var nodes = data.get('nodes');\n      each(nodes, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n    }\n  },\n  updateCombo: function updateCombo(item, evt, restore) {\n    this.updateSingleItem(item, evt, restore);\n    var edgesToBeUpdate = {};\n    this.traverse(item, function (paramItem, paramEdgesMap) {\n      if (paramItem.destroyed) {\n        return false;\n      }\n      paramItem.getEdges().forEach(function (edge) {\n        return paramEdgesMap[edge.getID()] = edge;\n      });\n      return true;\n    }, edgesToBeUpdate);\n    Object.values(edgesToBeUpdate).forEach(function (edge) {\n      return edge.refresh();\n    });\n  },\n  /**\n   *\n   * @param item 当前正在拖动的元素\n   * @param evt\n   */\n  updateSingleItem: function updateSingleItem(item, evt, restore) {\n    var origin = this.origin;\n    var graph = this.graph;\n    var model = item.getModel();\n    var itemId = item.get('id');\n    if (!this.point[itemId]) {\n      this.point[itemId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n    var x = evt.x - origin.x + this.point[itemId].x;\n    var y = evt.y - origin.y + this.point[itemId].y;\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n    graph.updateItem(item, {\n      x: x,\n      y: y\n    }, false);\n    // item.getEdges()?.forEach(edge => edge.refresh());\n  },\n\n  /**\n   * 根据 ID 获取父 Combo\n   * @param parentId 父 Combo ID\n   */\n  getParentCombo: function getParentCombo(parentId) {\n    var graph = this.graph;\n    if (!parentId) {\n      return undefined;\n    }\n    var parentCombo = graph.findById(parentId);\n    if (!parentCombo) {\n      return undefined;\n    }\n    return parentCombo;\n  },\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph;\n    // 当没有 delegate shape 时创建\n    if (!this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      var bbox = null;\n      if (this.targets.length > 1) {\n        bbox = calculationItemsBBox(this.targets);\n      } else {\n        bbox = this.targets[0].getBBox();\n      }\n      var x = bbox.x,\n        y = bbox.y,\n        width = bbox.width,\n        height = bbox.height,\n        minX = bbox.minX,\n        minY = bbox.minY;\n      this.originPoint = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n      var attrs = __assign(__assign({}, Global.delegateStyle), this.delegateStyle);\n      this.delegateShape = delegateGroup.addShape('rect', {\n        attrs: __assign({\n          width: bbox.width,\n          height: bbox.height,\n          x: bbox.x,\n          y: bbox.y\n        }, attrs),\n        name: 'combo-delegate-shape'\n      });\n      this.delegateShape.set('capture', false);\n      this.delegate = this.delegateShape;\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateShape.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n  /**\n   * updates the parent combos' size and position\n   */\n  updateParentCombos: function updateParentCombos() {\n    var _a = this,\n      graph = _a.graph,\n      targets = _a.targets;\n    var comboParentMap = {};\n    targets === null || targets === void 0 ? void 0 : targets.forEach(function (target) {\n      var comboId = target.getModel().parentId;\n      if (comboId) comboParentMap[comboId] = graph.findById(comboId);\n    });\n    Object.values(comboParentMap).forEach(function (combo) {\n      if (combo) graph.updateCombo(combo);\n    });\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}