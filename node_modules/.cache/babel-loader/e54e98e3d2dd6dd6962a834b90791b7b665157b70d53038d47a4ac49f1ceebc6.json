{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { animation, interaction, pattern, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { getLiquidData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var percent = options.percent,\n    liquidStyle = options.liquidStyle,\n    radius = options.radius,\n    outline = options.outline,\n    wave = options.wave,\n    shape = options.shape,\n    shapeStyle = options.shapeStyle,\n    animation = options.animation;\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1\n    }\n  });\n  chart.data(getLiquidData(percent));\n  var color = options.color || chart.getTheme().defaultColor;\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color: color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge'\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry;\n  var background = chart.getTheme().background;\n  var customInfo = {\n    percent: percent,\n    radius: radius,\n    outline: outline,\n    wave: wave,\n    shape: shape,\n    shapeStyle: shapeStyle,\n    background: background,\n    animation: animation\n  };\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var statistic = options.statistic,\n    percent = options.percent,\n    meta = options.meta;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n    return \"\".concat((v * 100).toFixed(2), \"%\");\n  };\n  var contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n    });\n  }\n  renderStatistic(chart, {\n    statistic: __assign(__assign({}, statistic), {\n      content: contentOpt\n    }),\n    plotType: 'liquid'\n  }, {\n    percent: percent\n  });\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}","map":{"version":3,"names":["get","isNil","animation","interaction","pattern","scale","theme","interval","deepAssign","flow","renderStatistic","getLiquidData","geometry","params","chart","options","percent","liquidStyle","radius","outline","wave","shape","shapeStyle","min","max","data","color","getTheme","defaultColor","p","xField","yField","widthRatio","style","ext","background","customInfo","legend","axis","tooltip","statistic","updated","meta","getController","clear","metaFormatter","v","concat","toFixed","contentOpt","content","__assign","plotType","render","adaptor"],"sources":["../../../src/plots/liquid/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get, isNil } from '@antv/util';\nimport { animation, interaction, pattern, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { CustomInfo, LiquidOptions } from './types';\nimport { getLiquidData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { percent, liquidStyle, radius, outline, wave, shape, shapeStyle, animation } = options;\n\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1,\n    },\n  });\n\n  chart.data(getLiquidData(percent));\n\n  const color = options.color || chart.getTheme().defaultColor;\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  radius 生成的\n      widthRatio: radius,\n      interval: {\n        color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge',\n      },\n    },\n  });\n  const { ext } = interval(p);\n  const geometry = ext.geometry as Geometry;\n  const { background } = chart.getTheme();\n  const customInfo: CustomInfo = {\n    percent,\n    radius,\n    outline,\n    wave,\n    shape,\n    shapeStyle,\n    background,\n    animation,\n  };\n\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo(customInfo);\n\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params: Params<LiquidOptions>, updated?: boolean): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n  let contentOpt = statistic.content;\n  if (contentOpt) {\n    contentOpt = deepAssign({}, contentOpt, {\n      content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n    });\n  }\n\n  renderStatistic(chart, { statistic: { ...statistic, content: contentOpt }, plotType: 'liquid' }, { percent });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LiquidOptions>) {\n  // flow 的方式处理所有的配置到 G2 API (主题前置，会影响绘制的取色)\n  return flow(theme, pattern('liquidStyle'), geometry, statistic, scale({}), animation, interaction)(params);\n}\n"],"mappings":";AACA,SAASA,GAAG,EAAEC,KAAK,QAAQ,YAAY;AACvC,SAASC,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,sBAAsB;AACpF,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,SAASC,UAAU,EAAEC,IAAI,EAAEC,eAAe,QAAQ,aAAa;AAE/D,SAASC,aAAa,QAAQ,SAAS;AAEvC;;;;AAIA,SAASC,QAAQA,CAACC,MAA6B;EACrC,IAAAC,KAAK,GAAcD,MAAM,CAAAC,KAApB;IAAEC,OAAO,GAAKF,MAAM,CAAAE,OAAX;EACd,IAAAC,OAAO,GAAuED,OAAO,CAAAC,OAA9E;IAAEC,WAAW,GAA0DF,OAAO,CAAAE,WAAjE;IAAEC,MAAM,GAAkDH,OAAO,CAAAG,MAAzD;IAAEC,OAAO,GAAyCJ,OAAO,CAAAI,OAAhD;IAAEC,IAAI,GAAmCL,OAAO,CAAAK,IAA1C;IAAEC,KAAK,GAA4BN,OAAO,CAAAM,KAAnC;IAAEC,UAAU,GAAgBP,OAAO,CAAAO,UAAvB;IAAEpB,SAAS,GAAKa,OAAO,CAAAb,SAAZ;EAEjFY,KAAK,CAACT,KAAK,CAAC;IACVW,OAAO,EAAE;MACPO,GAAG,EAAE,CAAC;MACNC,GAAG,EAAE;;GAER,CAAC;EAEFV,KAAK,CAACW,IAAI,CAACd,aAAa,CAACK,OAAO,CAAC,CAAC;EAElC,IAAMU,KAAK,GAAGX,OAAO,CAACW,KAAK,IAAIZ,KAAK,CAACa,QAAQ,EAAE,CAACC,YAAY;EAE5D,IAAMC,CAAC,GAAGrB,UAAU,CAAC,EAAE,EAAEK,MAAM,EAAE;IAC/BE,OAAO,EAAE;MACPe,MAAM,EAAE,MAAM;MACdC,MAAM,EAAE,SAAS;MACjB;MACA;MACAC,UAAU,EAAEd,MAAM;MAClBX,QAAQ,EAAE;QACRmB,KAAK,EAAAA,KAAA;QACLO,KAAK,EAAEhB,WAAW;QAClBI,KAAK,EAAE;;;GAGZ,CAAC;EACM,IAAAa,GAAG,GAAK3B,QAAQ,CAACsB,CAAC,CAAC,CAAAK,GAAhB;EACX,IAAMtB,QAAQ,GAAGsB,GAAG,CAACtB,QAAoB;EACjC,IAAAuB,UAAU,GAAKrB,KAAK,CAACa,QAAQ,EAAE,CAAAQ,UAArB;EAClB,IAAMC,UAAU,GAAe;IAC7BpB,OAAO,EAAAA,OAAA;IACPE,MAAM,EAAAA,MAAA;IACNC,OAAO,EAAAA,OAAA;IACPC,IAAI,EAAAA,IAAA;IACJC,KAAK,EAAAA,KAAA;IACLC,UAAU,EAAAA,UAAA;IACVa,UAAU,EAAAA,UAAA;IACVjC,SAAS,EAAAA;GACV;EAED;EACAU,QAAQ,CAACwB,UAAU,CAACA,UAAU,CAAC;EAE/B;EACAtB,KAAK,CAACuB,MAAM,CAAC,KAAK,CAAC;EACnBvB,KAAK,CAACwB,IAAI,CAAC,KAAK,CAAC;EACjBxB,KAAK,CAACyB,OAAO,CAAC,KAAK,CAAC;EAEpB,OAAO1B,MAAM;AACf;AAEA;;;;AAIA,OAAM,SAAU2B,SAASA,CAAC3B,MAA6B,EAAE4B,OAAiB;EAChE,IAAA3B,KAAK,GAAcD,MAAM,CAAAC,KAApB;IAAEC,OAAO,GAAKF,MAAM,CAAAE,OAAX;EACd,IAAAyB,SAAS,GAAoBzB,OAAO,CAAAyB,SAA3B;IAAExB,OAAO,GAAWD,OAAO,CAAAC,OAAlB;IAAE0B,IAAI,GAAK3B,OAAO,CAAA2B,IAAZ;EAEhC;EACA5B,KAAK,CAAC6B,aAAa,CAAC,YAAY,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAE7C,IAAMC,aAAa,GAAG7C,GAAG,CAAC0C,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,IAAK,UAACI,CAAC;IAAK,UAAAC,MAAA,CAAG,CAACD,CAAC,GAAG,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC,MAAG;EAA1B,CAA2B;EAChG,IAAIC,UAAU,GAAGT,SAAS,CAACU,OAAO;EAClC,IAAID,UAAU,EAAE;IACdA,UAAU,GAAGzC,UAAU,CAAC,EAAE,EAAEyC,UAAU,EAAE;MACtCC,OAAO,EAAE,CAACjD,KAAK,CAACgD,UAAU,CAACC,OAAO,CAAC,GAAGD,UAAU,CAACC,OAAO,GAAGL,aAAa,CAAC7B,OAAO;KACjF,CAAC;;EAGJN,eAAe,CAACI,KAAK,EAAE;IAAE0B,SAAS,EAAAW,QAAA,CAAAA,QAAA,KAAOX,SAAS;MAAEU,OAAO,EAAED;IAAU,EAAE;IAAEG,QAAQ,EAAE;EAAQ,CAAE,EAAE;IAAEpC,OAAO,EAAAA;EAAA,CAAE,CAAC;EAE7G,IAAIyB,OAAO,EAAE;IACX3B,KAAK,CAACuC,MAAM,CAAC,IAAI,CAAC;;EAGpB,OAAOxC,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUyC,OAAOA,CAACzC,MAA6B;EACnD;EACA,OAAOJ,IAAI,CAACH,KAAK,EAAEF,OAAO,CAAC,aAAa,CAAC,EAAEQ,QAAQ,EAAE4B,SAAS,EAAEnC,KAAK,CAAC,EAAE,CAAC,EAAEH,SAAS,EAAEC,WAAW,CAAC,CAACU,MAAM,CAAC;AAC5G"},"metadata":{},"sourceType":"module","externalDependencies":[]}