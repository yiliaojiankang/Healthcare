{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { upperFirst } from '@antv/util';\nimport { createNodeFromXML } from './xml';\nvar cache = {}; // ucfirst 开销过大，进行缓存\n// 首字母大写\nfunction ucfirst(str) {\n  if (!cache[str]) {\n    cache[str] = upperFirst(str);\n  }\n  return cache[str];\n}\n/**\n * 工厂方法的基类\n * @type Shape.FactoryBase\n */\nexport var ShapeFactoryBase = {\n  /**\n   * 默认的形状，当没有指定/匹配 shapeType 时，使用默认的\n   * @type {String}\n   */\n  defaultShapeType: 'defaultType',\n  /**\n   * 形状的 className，用于搜索\n   * @type {String}\n   */\n  className: null,\n  /**\n   * 获取绘制 Shape 的工具类，无状态\n   * @param  {String} type 类型\n   * @return {Shape} 工具类\n   */\n  getShape: function getShape(type) {\n    var self = this;\n    var shape = self[type] || self[self.defaultShapeType] || self['simple-circle'];\n    return shape;\n  },\n  /**\n   * 绘制图形\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G.Group} group 图形的分组\n   * @return {IShape} 图形对象\n   */\n  draw: function draw(type, cfg, group) {\n    var shape = this.getShape(type);\n    group['shapeMap'] = {};\n    var rst = shape.draw(cfg, group);\n    if (shape.afterDraw) {\n      shape.afterDraw(cfg, group, rst);\n    }\n    return rst;\n  },\n  /**\n   * 更新\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G6.Item} item 节点、边、分组等\n   */\n  baseUpdate: function baseUpdate(type, cfg, item, updateType) {\n    var _a, _b;\n    var shape = this.getShape(type);\n    // 防止没定义 update 函数\n    if (shape.update) {\n      // shape.mergeStyle = updateType === 'move' || updateType === 'bbox' ? {} : shape.getOptions?.(cfg);\n      shape.mergeStyle = (_a = shape.getOptions) === null || _a === void 0 ? void 0 : _a.call(shape, cfg, updateType);\n      (_b = shape.update) === null || _b === void 0 ? void 0 : _b.call(shape, cfg, item, updateType);\n    }\n    if (shape.afterUpdate) {\n      shape.afterUpdate(cfg, item);\n    }\n  },\n  /**\n   * 设置状态\n   * @param {String} type  类型\n   * @param {String} name  状态名\n   * @param {String | Boolean} value 状态值\n   * @param {G6.Item} item  节点、边、分组等\n   */\n  setState: function setState(type, name, value, item) {\n    var shape = this.getShape(type);\n    // 调用 shape/shapeBase.ts 中的 setState 方法\n    shape.setState(name, value, item);\n  },\n  /**\n   * 是否允许更新，不重新绘制图形\n   * @param  {String} type 类型\n   * @return {Boolean} 是否允许使用更新\n   */\n  shouldUpdate: function shouldUpdate(type) {\n    var shape = this.getShape(type);\n    return !!shape.update;\n  },\n  getControlPoints: function getControlPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getControlPoints(cfg);\n  },\n  /**\n   * 获取控制点\n   * @param {String} type 节点、边类型\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getAnchorPoints(cfg);\n  }\n};\n/**\n * 元素的框架\n */\nvar ShapeFramework = {\n  // 默认样式及配置\n  options: {},\n  /**\n   * 绘制\n   */\n  draw: function draw(cfg, group) {\n    return this.drawShape(cfg, group);\n  },\n  /**\n   * 绘制\n   */\n  drawShape: function drawShape( /* cfg, group */) {},\n  /**\n   * 绘制完成后的操作，便于用户继承现有的节点、边\n   */\n  afterDraw: function afterDraw( /* cfg, group */) {},\n  // update(cfg, item) // 默认不定义\n  afterUpdate: function afterUpdate( /* cfg, item */) {},\n  /**\n   * 设置节点、边状态\n   */\n  setState: function setState( /* name, value, item */) {},\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getControlPoints: function getControlPoints(cfg) {\n    return cfg.controlPoints;\n  },\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(cfg) {\n    var defaultAnchorPoints = this.options.anchorPoints;\n    var anchorPoints = cfg.anchorPoints || defaultAnchorPoints;\n    return anchorPoints;\n  }\n  /* 如果没定义 update 方法，每次都调用 draw 方法\n  update(cfg, item) {\n     }\n  */\n};\n\nvar Shape = /** @class */function () {\n  function Shape() {}\n  Shape.registerFactory = function (factoryType, cfg) {\n    var className = ucfirst(factoryType);\n    var factoryBase = ShapeFactoryBase;\n    var shapeFactory = __assign(__assign({}, factoryBase), cfg);\n    Shape[className] = shapeFactory;\n    shapeFactory.className = className;\n    return shapeFactory;\n  };\n  Shape.getFactory = function (factoryType) {\n    var className = ucfirst(factoryType);\n    return Shape[className];\n  };\n  Shape.registerNode = function (shapeType, nodeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Node;\n    var shapeObj;\n    if (typeof nodeDefinition === 'string' || typeof nodeDefinition === 'function') {\n      var autoNodeDefinition = createNodeFromXML(nodeDefinition);\n      shapeObj = __assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition);\n    } else if (nodeDefinition.jsx) {\n      var jsx = nodeDefinition.jsx;\n      var autoNodeDefinition = createNodeFromXML(jsx);\n      shapeObj = __assign(__assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition), nodeDefinition);\n    } else {\n      shapeFactory.getShape(extendShapeType);\n      var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n      shapeObj = __assign(__assign({}, extendShape), nodeDefinition);\n    }\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'node';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n  Shape.registerEdge = function (shapeType, edgeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Edge;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n    var shapeObj = __assign(__assign({}, extendShape), edgeDefinition);\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'edge';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n  Shape.registerCombo = function (shapeType, comboDefinition, extendShapeType) {\n    var shapeFactory = Shape.Combo;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n    var shapeObj = __assign(__assign({}, extendShape), comboDefinition);\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'combo';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n  return Shape;\n}();\nexport default Shape;\n// 注册 Node 的工厂方法\nShape.registerFactory('node', {\n  defaultShapeType: 'circle'\n});\n// 注册 Edge 的工厂方法\nShape.registerFactory('edge', {\n  defaultShapeType: 'line'\n});\n// 注册 Combo 的工厂方法\nShape.registerFactory('combo', {\n  defaultShapeType: 'circle'\n});","map":{"version":3,"names":["__assign","upperFirst","createNodeFromXML","cache","ucfirst","str","ShapeFactoryBase","defaultShapeType","className","getShape","type","self","shape","draw","cfg","group","rst","afterDraw","baseUpdate","item","updateType","_a","_b","update","mergeStyle","getOptions","call","afterUpdate","setState","name","value","shouldUpdate","getControlPoints","getAnchorPoints","ShapeFramework","options","drawShape","controlPoints","defaultAnchorPoints","anchorPoints","Shape","registerFactory","factoryType","factoryBase","shapeFactory","getFactory","registerNode","shapeType","nodeDefinition","extendShapeType","Node","shapeObj","autoNodeDefinition","jsx","extendShape","itemType","registerEdge","edgeDefinition","Edge","registerCombo","comboDefinition","Combo"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/g6-core/es/element/shape.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { upperFirst } from '@antv/util';\nimport { createNodeFromXML } from './xml';\nvar cache = {}; // ucfirst 开销过大，进行缓存\n// 首字母大写\nfunction ucfirst(str) {\n  if (!cache[str]) {\n    cache[str] = upperFirst(str);\n  }\n  return cache[str];\n}\n/**\n * 工厂方法的基类\n * @type Shape.FactoryBase\n */\nexport var ShapeFactoryBase = {\n  /**\n   * 默认的形状，当没有指定/匹配 shapeType 时，使用默认的\n   * @type {String}\n   */\n  defaultShapeType: 'defaultType',\n  /**\n   * 形状的 className，用于搜索\n   * @type {String}\n   */\n  className: null,\n  /**\n   * 获取绘制 Shape 的工具类，无状态\n   * @param  {String} type 类型\n   * @return {Shape} 工具类\n   */\n  getShape: function getShape(type) {\n    var self = this;\n    var shape = self[type] || self[self.defaultShapeType] || self['simple-circle'];\n    return shape;\n  },\n  /**\n   * 绘制图形\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G.Group} group 图形的分组\n   * @return {IShape} 图形对象\n   */\n  draw: function draw(type, cfg, group) {\n    var shape = this.getShape(type);\n    group['shapeMap'] = {};\n    var rst = shape.draw(cfg, group);\n    if (shape.afterDraw) {\n      shape.afterDraw(cfg, group, rst);\n    }\n    return rst;\n  },\n  /**\n   * 更新\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G6.Item} item 节点、边、分组等\n   */\n  baseUpdate: function baseUpdate(type, cfg, item, updateType) {\n    var _a, _b;\n    var shape = this.getShape(type);\n    // 防止没定义 update 函数\n    if (shape.update) {\n      // shape.mergeStyle = updateType === 'move' || updateType === 'bbox' ? {} : shape.getOptions?.(cfg);\n      shape.mergeStyle = (_a = shape.getOptions) === null || _a === void 0 ? void 0 : _a.call(shape, cfg, updateType);\n      (_b = shape.update) === null || _b === void 0 ? void 0 : _b.call(shape, cfg, item, updateType);\n    }\n    if (shape.afterUpdate) {\n      shape.afterUpdate(cfg, item);\n    }\n  },\n  /**\n   * 设置状态\n   * @param {String} type  类型\n   * @param {String} name  状态名\n   * @param {String | Boolean} value 状态值\n   * @param {G6.Item} item  节点、边、分组等\n   */\n  setState: function setState(type, name, value, item) {\n    var shape = this.getShape(type);\n    // 调用 shape/shapeBase.ts 中的 setState 方法\n    shape.setState(name, value, item);\n  },\n  /**\n   * 是否允许更新，不重新绘制图形\n   * @param  {String} type 类型\n   * @return {Boolean} 是否允许使用更新\n   */\n  shouldUpdate: function shouldUpdate(type) {\n    var shape = this.getShape(type);\n    return !!shape.update;\n  },\n  getControlPoints: function getControlPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getControlPoints(cfg);\n  },\n  /**\n   * 获取控制点\n   * @param {String} type 节点、边类型\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getAnchorPoints(cfg);\n  }\n};\n/**\n * 元素的框架\n */\nvar ShapeFramework = {\n  // 默认样式及配置\n  options: {},\n  /**\n   * 绘制\n   */\n  draw: function draw(cfg, group) {\n    return this.drawShape(cfg, group);\n  },\n  /**\n   * 绘制\n   */\n  drawShape: function drawShape( /* cfg, group */) {},\n  /**\n   * 绘制完成后的操作，便于用户继承现有的节点、边\n   */\n  afterDraw: function afterDraw( /* cfg, group */) {},\n  // update(cfg, item) // 默认不定义\n  afterUpdate: function afterUpdate( /* cfg, item */) {},\n  /**\n   * 设置节点、边状态\n   */\n  setState: function setState( /* name, value, item */) {},\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getControlPoints: function getControlPoints(cfg) {\n    return cfg.controlPoints;\n  },\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(cfg) {\n    var defaultAnchorPoints = this.options.anchorPoints;\n    var anchorPoints = cfg.anchorPoints || defaultAnchorPoints;\n    return anchorPoints;\n  }\n  /* 如果没定义 update 方法，每次都调用 draw 方法\n  update(cfg, item) {\n     }\n  */\n};\n\nvar Shape = /** @class */function () {\n  function Shape() {}\n  Shape.registerFactory = function (factoryType, cfg) {\n    var className = ucfirst(factoryType);\n    var factoryBase = ShapeFactoryBase;\n    var shapeFactory = __assign(__assign({}, factoryBase), cfg);\n    Shape[className] = shapeFactory;\n    shapeFactory.className = className;\n    return shapeFactory;\n  };\n  Shape.getFactory = function (factoryType) {\n    var className = ucfirst(factoryType);\n    return Shape[className];\n  };\n  Shape.registerNode = function (shapeType, nodeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Node;\n    var shapeObj;\n    if (typeof nodeDefinition === 'string' || typeof nodeDefinition === 'function') {\n      var autoNodeDefinition = createNodeFromXML(nodeDefinition);\n      shapeObj = __assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition);\n    } else if (nodeDefinition.jsx) {\n      var jsx = nodeDefinition.jsx;\n      var autoNodeDefinition = createNodeFromXML(jsx);\n      shapeObj = __assign(__assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition), nodeDefinition);\n    } else {\n      shapeFactory.getShape(extendShapeType);\n      var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n      shapeObj = __assign(__assign({}, extendShape), nodeDefinition);\n    }\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'node';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n  Shape.registerEdge = function (shapeType, edgeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Edge;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n    var shapeObj = __assign(__assign({}, extendShape), edgeDefinition);\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'edge';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n  Shape.registerCombo = function (shapeType, comboDefinition, extendShapeType) {\n    var shapeFactory = Shape.Combo;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n    var shapeObj = __assign(__assign({}, extendShape), comboDefinition);\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'combo';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n  return Shape;\n}();\nexport default Shape;\n// 注册 Node 的工厂方法\nShape.registerFactory('node', {\n  defaultShapeType: 'circle'\n});\n// 注册 Edge 的工厂方法\nShape.registerFactory('edge', {\n  defaultShapeType: 'line'\n});\n// 注册 Combo 的工厂方法\nShape.registerFactory('combo', {\n  defaultShapeType: 'circle'\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}