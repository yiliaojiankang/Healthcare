{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport parsePathString from './parse-path-string';\nvar REGEX_MD = /[a-z]/;\nfunction toSymmetry(p, c) {\n  return [c[0] + (c[0] - p[0]), c[1] + (c[1] - p[1])];\n}\nexport default function pathToAbsolute(pathString) {\n  var pathArray = parsePathString(pathString);\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  var needProcess = false; // 如果存在小写的命令或者 V,H,T,S 则需要处理\n  for (var i = 0; i < pathArray.length; i++) {\n    var cmd = pathArray[i][0];\n    // 如果存在相对位置的命令，则中断返回\n    if (REGEX_MD.test(cmd) || ['V', 'H', 'T', 'S'].indexOf(cmd) >= 0) {\n      needProcess = true;\n      break;\n    }\n  }\n  // 如果不存在相对命令，则直接返回\n  // 如果在业务上都写绝对路径，这种方式最快，仅做了一次检测\n  if (!needProcess) {\n    return pathArray;\n  }\n  var res = [];\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var start = 0;\n  var pa0;\n  var dots;\n  var first = pathArray[0];\n  if (first[0] === 'M' || first[0] === 'm') {\n    x = +first[1];\n    y = +first[2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n  for (var i = start, ii = pathArray.length; i < ii; i++) {\n    var pa = pathArray[i];\n    var preParams = res[i - 1]; // 取前一个已经处理后的节点，否则会出现问题\n    var r = [];\n    var cmd = pa[0];\n    var upCmd = cmd.toUpperCase();\n    if (cmd !== upCmd) {\n      r[0] = upCmd;\n      switch (upCmd) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n          r[1] = mx;\n          r[2] = my;\n          break;\n        // for lint\n        default:\n          for (var j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n      }\n    } else {\n      // 如果本来已经大写，则不处理\n      r = pathArray[i];\n    }\n    // 需要在外面统一做，同时处理 V,H,S,T 等特殊指令\n    switch (upCmd) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n      case 'H':\n        x = r[1];\n        r = ['L', x, y];\n        break;\n      case 'V':\n        y = r[1];\n        r = ['L', x, y];\n        break;\n      case 'T':\n        x = r[1];\n        y = r[2];\n        // 以 x, y 为中心的，上一个控制点的对称点\n        // 需要假设上一个节点的命令为 Q\n        var symetricT = toSymmetry([preParams[1], preParams[2]], [preParams[3], preParams[4]]);\n        r = ['Q', symetricT[0], symetricT[1], x, y];\n        break;\n      case 'S':\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        // 以 x,y 为中心，取上一个控制点，\n        // 需要假设上一个线段为 C 或者 S\n        var length_1 = preParams.length;\n        var symetricS = toSymmetry([preParams[length_1 - 4], preParams[length_1 - 3]], [preParams[length_1 - 2], preParams[length_1 - 1]]);\n        r = ['C', symetricS[0], symetricS[1], r[1], r[2], x, y];\n        break;\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n        break;\n      // for lint\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n    }\n    res.push(r);\n  }\n  return res;\n}","map":{"version":3,"names":["parsePathString","REGEX_MD","toSymmetry","p","c","pathToAbsolute","pathString","pathArray","length","needProcess","i","cmd","test","indexOf","res","x","y","mx","my","start","pa0","dots","first","ii","pa","preParams","r","upCmd","toUpperCase","j","jj","symetricT","length_1","symetricS","push"],"sources":["../src/path-2-absolute.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}