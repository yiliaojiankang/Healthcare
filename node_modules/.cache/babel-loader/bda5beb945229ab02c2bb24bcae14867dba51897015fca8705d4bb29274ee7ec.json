{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __read, __spreadArray } from \"tslib\";\nfunction dot(a, b) {\n  return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n}\n/**\n * @private\n * 1. 获取投影轴\n */\nfunction getAxes(points /** 多边形的关键点 */) {\n  // 目前先处理 平行矩形 的场景, 其他多边形不处理\n  if (points.length > 4) {\n    return [];\n  }\n  // 获取向量\n  var vector = function (start, end) {\n    return [end.x - start.x, end.y - start.y];\n  };\n  // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n  var AB = vector(points[0], points[1]);\n  var BC = vector(points[1], points[2]);\n  return [AB, BC];\n}\n/**\n * @private\n * 绕指定点顺时针旋转后的点坐标\n * 默认绕原点旋转\n */\nfunction rotateAtPoint(point, deg, origin) {\n  if (deg === void 0) {\n    deg = 0;\n  }\n  if (origin === void 0) {\n    origin = {\n      x: 0,\n      y: 0\n    };\n  }\n  var x = point.x,\n    y = point.y;\n  return {\n    x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n    y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y\n  };\n}\n/**\n * @private\n * 转化为顶点坐标数组\n *\n * @param {Object} box\n */\nfunction getRectPoints(box) {\n  var points = [{\n    x: box.x,\n    y: box.y\n  }, {\n    x: box.x + box.width,\n    y: box.y\n  }, {\n    x: box.x + box.width,\n    y: box.y + box.height\n  }, {\n    x: box.x,\n    y: box.y + box.height\n  }];\n  var rotation = box.rotation;\n  if (rotation) {\n    return [rotateAtPoint(points[0], rotation, points[0]), rotateAtPoint(points[1], rotation, points[0]), rotateAtPoint(points[2], rotation, points[0]), rotateAtPoint(points[3], rotation, points[0])];\n  }\n  return points;\n}\n/**\n * @private\n * 2. 获取多边形在投影轴上的投影\n *\n * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n */\nfunction getProjection(points /** 多边形的关键点 */, axis) {\n  // 目前先处理矩形的场景\n  if (points.length > 4) {\n    return {\n      min: 0,\n      max: 0\n    };\n  }\n  var scalars = [];\n  points.forEach(function (point) {\n    scalars.push(dot([point.x, point.y], axis));\n  });\n  return {\n    min: Math.min.apply(Math, __spreadArray([], __read(scalars), false)),\n    max: Math.max.apply(Math, __spreadArray([], __read(scalars), false))\n  };\n}\nfunction isProjectionOverlap(projection1, projection2) {\n  return projection1.max > projection2.min && projection1.min < projection2.max;\n}\nfunction isValidNumber(d) {\n  return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n}\nfunction isValidBox(box) {\n  return ['x', 'y', 'width', 'height'].every(function (attr) {\n    return isValidNumber(box[attr]);\n  });\n}\n/**\n * 快速判断两个无旋转矩形是否遮挡\n */\nexport function isIntersectRect(box1, box2, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n  return !(box2.x > box1.x + box1.width + margin || box2.x + box2.width < box1.x - margin || box2.y > box1.y + box1.height + margin || box2.y + box2.height < box1.y - margin);\n}\n/**\n * detect whether two shape is intersected, useful when shape is been rotated\n * 判断两个矩形是否重叠（相交和包含, 是否旋转）\n *\n * - 原理: 分离轴定律\n */\nexport function intersect(box1, box2, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n  // 如果两个 box 中有一个是不合法的 box，也就是不会被渲染出来的，那么它们就不相交。\n  if (!isValidBox(box1) || !isValidBox(box2)) return false;\n  // 如果两个矩形没有旋转，使用快速判断\n  if (!box1.rotation && !box2.rotation) {\n    return isIntersectRect(box1, box2, margin);\n  }\n  // 分别获取 4 个关键点\n  var rect1Points = getRectPoints(box1);\n  var rect2Points = getRectPoints(box2);\n  // 获取所有投影轴\n  var axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n  for (var i = 0; i < axes.length; i++) {\n    var axis = axes[i];\n    var projection1 = getProjection(rect1Points, axis);\n    var projection2 = getProjection(rect2Points, axis);\n    // 判断投影轴上的投影是否存在重叠，若检测到存在间隙则立刻退出判断，消除不必要的运算。\n    if (!isProjectionOverlap(projection1, projection2)) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["dot","a","b","getAxes","points","length","vector","start","end","x","y","AB","BC","rotateAtPoint","point","deg","origin","Math","cos","sin","getRectPoints","box","width","height","rotation","getProjection","axis","min","max","scalars","forEach","push","apply","__spreadArray","__read","isProjectionOverlap","projection1","projection2","isValidNumber","d","Number","isNaN","Infinity","isValidBox","every","attr","isIntersectRect","box1","box2","margin","intersect","rect1Points","rect2Points","axes","concat","i"],"sources":["../../src/util/collision-detect.ts"],"sourcesContent":["import { isNumber } from '@antv/util';\nimport { Point } from '../dependents';\n\ntype Vec2 = [number, number];\n\ntype Item = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  rotation?: number;\n  visible?: boolean;\n};\n/**\n * 定义投影对象\n */\ntype Projection = { min: number; max: number };\n\nfunction dot(a, b) {\n  return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n}\n\n/**\n * @private\n * 1. 获取投影轴\n */\nfunction getAxes(points: Point[] /** 多边形的关键点 */): Vec2[] {\n  // 目前先处理 平行矩形 的场景, 其他多边形不处理\n  if (points.length > 4) {\n    return [];\n  }\n  // 获取向量\n  const vector = (start: Point, end: Point): Vec2 => {\n    return [end.x - start.x, end.y - start.y];\n  };\n\n  // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n  const AB = vector(points[0], points[1]);\n  const BC = vector(points[1], points[2]);\n\n  return [AB, BC];\n}\n\n/**\n * @private\n * 绕指定点顺时针旋转后的点坐标\n * 默认绕原点旋转\n */\nfunction rotateAtPoint(point: Point, deg = 0, origin = { x: 0, y: 0 }): Point {\n  const { x, y } = point;\n  return {\n    x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n    y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y,\n  };\n}\n\n/**\n * @private\n * 转化为顶点坐标数组\n *\n * @param {Object} box\n */\nfunction getRectPoints(box: Item): Point[] {\n  const points = [\n    { x: box.x, y: box.y },\n    { x: box.x + box.width, y: box.y },\n    { x: box.x + box.width, y: box.y + box.height },\n    { x: box.x, y: box.y + box.height },\n  ];\n\n  const rotation = box.rotation;\n  if (rotation) {\n    return [\n      rotateAtPoint(points[0], rotation, points[0]),\n      rotateAtPoint(points[1], rotation, points[0]),\n      rotateAtPoint(points[2], rotation, points[0]),\n      rotateAtPoint(points[3], rotation, points[0]),\n    ];\n  }\n\n  return points;\n}\n\n/**\n * @private\n * 2. 获取多边形在投影轴上的投影\n *\n * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n */\nfunction getProjection(points: Point[] /** 多边形的关键点 */, axis: Vec2): Projection {\n  // 目前先处理矩形的场景\n  if (points.length > 4) {\n    return { min: 0, max: 0 };\n  }\n\n  const scalars = [];\n  points.forEach((point) => {\n    scalars.push(dot([point.x, point.y], axis));\n  });\n\n  return { min: Math.min(...scalars), max: Math.max(...scalars) };\n}\n\nfunction isProjectionOverlap(projection1: Projection, projection2: Projection): boolean {\n  return projection1.max > projection2.min && projection1.min < projection2.max;\n}\n\nfunction isValidNumber(d: number) {\n  return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n}\n\nfunction isValidBox(box: Item) {\n  return ['x', 'y', 'width', 'height'].every(attr => isValidNumber(box[attr]))\n}\n\n/**\n * 快速判断两个无旋转矩形是否遮挡\n */\nexport function isIntersectRect(box1: Item, box2: Item, margin: number = 0): boolean {\n  return !(\n    box2.x > box1.x + box1.width + margin ||\n    box2.x + box2.width < box1.x - margin ||\n    box2.y > box1.y + box1.height + margin ||\n    box2.y + box2.height < box1.y - margin\n  );\n}\n\n/**\n * detect whether two shape is intersected, useful when shape is been rotated\n * 判断两个矩形是否重叠（相交和包含, 是否旋转）\n *\n * - 原理: 分离轴定律\n */\nexport function intersect(box1: Item, box2: Item, margin: number = 0) {\n  // 如果两个 box 中有一个是不合法的 box，也就是不会被渲染出来的，那么它们就不相交。\n  if (!isValidBox(box1) || !isValidBox(box2)) return false;\n\n  // 如果两个矩形没有旋转，使用快速判断\n  if (!box1.rotation && !box2.rotation) {\n    return isIntersectRect(box1, box2, margin);\n  }\n\n  // 分别获取 4 个关键点\n  const rect1Points = getRectPoints(box1);\n  const rect2Points = getRectPoints(box2);\n\n  // 获取所有投影轴\n  const axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n\n  for (let i = 0; i < axes.length; i++) {\n    const axis = axes[i];\n    const projection1 = getProjection(rect1Points, axis);\n    const projection2 = getProjection(rect2Points, axis);\n\n    // 判断投影轴上的投影是否存在重叠，若检测到存在间隙则立刻退出判断，消除不必要的运算。\n    if (!isProjectionOverlap(projection1, projection2)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}