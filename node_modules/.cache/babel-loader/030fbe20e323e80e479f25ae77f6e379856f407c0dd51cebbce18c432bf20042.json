{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nvar ListHighlight = /** @class */function (_super) {\n  __extends(ListHighlight, _super);\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n    return _this;\n  }\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  };\n  // 单个 item 设置状态\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 highlight\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 需要全部清理 active 和 unactive\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n  return ListHighlight;\n}(ListState);\nexport default ListHighlight;","map":{"version":3,"names":["each","clearList","ListState","STATUS_UNACTIVE","STATUS_ACTIVE","ListHighlight","_super","__extends","_this","apply","arguments","stateName","ignoreItemStates","prototype","setItemsState","list","name","enable","setHighlightBy","item","setItemState","items","getItems","el","callback","hasState","activeItems","getItemsByState","allCancel_1","clear","highlight","setState","triggerInfo","getTriggerListInfo","components","getAllowComponents","component","clearItemsState"],"sources":["../../../../src/interaction/action/component/list-highlight.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}