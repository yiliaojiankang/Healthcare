{"ast":null,"code":"/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\nfunction isCanvas(dom) {\n  return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\nvar ImageShape = /** @class */function (_super) {\n  __extends(ImageShape, _super);\n  function ImageShape() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ImageShape.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    });\n  };\n  ImageShape.prototype.initAttrs = function (attrs) {\n    this._setImage(attrs.img);\n  };\n  // image 不计算 stroke\n  ImageShape.prototype.isStroke = function () {\n    return false;\n  };\n  // 仅仅使用包围盒检测来进行拾取\n  // 所以不需要复写 isInStrokeOrPath 的方法\n  ImageShape.prototype.isOnlyHitBox = function () {\n    return true;\n  };\n  ImageShape.prototype._afterLoading = function () {\n    if (this.get('toDraw') === true) {\n      var canvas = this.get('canvas');\n      if (canvas) {\n        // 这段应该改成局部渲染\n        canvas.draw();\n      } else {\n        // 这种方式如果发生遮挡会出现问题\n        this.createPath(this.get('context'));\n      }\n    }\n  };\n  ImageShape.prototype._setImage = function (img) {\n    var _this = this;\n    var attrs = this.attrs;\n    if (isString(img)) {\n      var image_1 = new Image();\n      image_1.onload = function () {\n        // 图片未加载完，则已经被销毁\n        if (_this.destroyed) {\n          return false;\n        }\n        // 缓存原始地址，可以做对比，防止重复加载图片\n        // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n        // this.set('imgSrc', img);\n        // 这里会循环调用 _setImage 方法，但不会再走这个分支\n        _this.attr('img', image_1);\n        _this.set('loading', false);\n        _this._afterLoading();\n        var callback = _this.get('callback');\n        if (callback) {\n          callback.call(_this);\n        }\n      };\n      // 设置跨域\n      image_1.crossOrigin = 'Anonymous';\n      image_1.src = img;\n      // loading 过程中不绘制\n      this.set('loading', true);\n    } else if (img instanceof Image) {\n      // 如果是一个 image 对象，则设置宽高\n      if (!attrs.width) {\n        attrs.width = img.width;\n      }\n      if (!attrs.height) {\n        attrs.height = img.height;\n      }\n    } else if (isCanvas(img)) {\n      // 如果设置了 canvas 对象\n      if (!attrs.width) {\n        attrs.width = Number(img.getAttribute('width'));\n      }\n      if (!attrs.height) {\n        attrs.height, Number(img.getAttribute('height'));\n      }\n    }\n  };\n  ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    // 如果加载的已经是当前图片，则不再处理\n    if (name === 'img') {\n      // 可以加缓冲，&& this.get('imgSrc') !== value\n      this._setImage(value);\n    }\n  };\n  ImageShape.prototype.createPath = function (context) {\n    // 正在加载则不绘制\n    if (this.get('loading')) {\n      this.set('toDraw', true); // 加载完成后绘制\n      this.set('context', context);\n      return;\n    }\n    var attrs = this.attr();\n    var x = attrs.x,\n      y = attrs.y,\n      width = attrs.width,\n      height = attrs.height,\n      sx = attrs.sx,\n      sy = attrs.sy,\n      swidth = attrs.swidth,\n      sheight = attrs.sheight;\n    var img = attrs.img;\n    if (img instanceof Image || isCanvas(img)) {\n      if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n        context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n      } else {\n        context.drawImage(img, x, y, width, height);\n      }\n    }\n  };\n  return ImageShape;\n}(ShapeBase);\nexport default ImageShape;","map":{"version":3,"names":["ShapeBase","isString","isNil","isCanvas","dom","HTMLElement","nodeName","toUpperCase","ImageShape","_super","__extends","prototype","getDefaultAttrs","attrs","call","__assign","x","y","width","height","initAttrs","_setImage","img","isStroke","isOnlyHitBox","_afterLoading","get","canvas","draw","createPath","_this","image_1","Image","onload","destroyed","attr","set","callback","crossOrigin","src","Number","getAttribute","onAttrChange","name","value","originValue","context","sx","sy","swidth","sheight","drawImage"],"sources":["../../src/shape/image.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}