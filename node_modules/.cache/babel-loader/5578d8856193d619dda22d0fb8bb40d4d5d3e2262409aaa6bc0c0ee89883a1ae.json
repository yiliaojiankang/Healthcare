{"ast":null,"code":"import { __assign, __extends, __spreadArray } from \"tslib\";\nimport { Action } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { findViewById } from '../../../../utils';\nimport { EDGES_VIEW_ID, NODES_VIEW_ID } from '../../constant';\nvar SankeyNodeDragAction = /** @class */function (_super) {\n  __extends(SankeyNodeDragAction, _super);\n  function SankeyNodeDragAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 是否在拖拽中的标记\n     */\n    _this.isDragging = false;\n    return _this;\n  }\n  /**\n   * 当前操作的是否是 element\n   */\n  SankeyNodeDragAction.prototype.isNodeElement = function () {\n    var shape = get(this.context, 'event.target');\n    if (shape) {\n      var element = shape.get('element');\n      return element && element.getModel().data.isNode;\n    }\n    return false;\n  };\n  SankeyNodeDragAction.prototype.getNodeView = function () {\n    return findViewById(this.context.view, NODES_VIEW_ID);\n  };\n  SankeyNodeDragAction.prototype.getEdgeView = function () {\n    return findViewById(this.context.view, EDGES_VIEW_ID);\n  };\n  /**\n   * 获取当前操作的 index\n   * @param element\n   */\n  SankeyNodeDragAction.prototype.getCurrentDatumIdx = function (element) {\n    return this.getNodeView().geometries[0].elements.indexOf(element);\n  };\n  /**\n   * 点击下去，开始\n   */\n  SankeyNodeDragAction.prototype.start = function () {\n    // 记录开始了的状态\n    if (this.isNodeElement()) {\n      this.prevPoint = {\n        x: get(this.context, 'event.x'),\n        y: get(this.context, 'event.y')\n      };\n      var element = this.context.event.target.get('element');\n      var idx = this.getCurrentDatumIdx(element);\n      if (idx === -1) {\n        return;\n      }\n      this.currentElementIdx = idx;\n      this.context.isDragging = true;\n      this.isDragging = true;\n      // 关闭动画并暂存配置\n      this.prevNodeAnimateCfg = this.getNodeView().getOptions().animate;\n      this.prevEdgeAnimateCfg = this.getEdgeView().getOptions().animate;\n      this.getNodeView().animate(false);\n      this.getEdgeView().animate(false);\n    }\n  };\n  /**\n   * 移动过程中，平移\n   */\n  SankeyNodeDragAction.prototype.translate = function () {\n    if (this.isDragging) {\n      var chart = this.context.view;\n      var currentPoint = {\n        x: get(this.context, 'event.x'),\n        y: get(this.context, 'event.y')\n      };\n      var x = currentPoint.x - this.prevPoint.x;\n      var y = currentPoint.y - this.prevPoint.y;\n      var nodeView = this.getNodeView();\n      var element = nodeView.geometries[0].elements[this.currentElementIdx];\n      // 修改数据\n      if (element && element.getModel()) {\n        var prevDatum = element.getModel().data;\n        var data = nodeView.getOptions().data;\n        var coordinate = nodeView.getCoordinate();\n        var datumGap_1 = {\n          x: x / coordinate.getWidth(),\n          y: y / coordinate.getHeight()\n        };\n        var nextDatum = __assign(__assign({}, prevDatum), {\n          x: prevDatum.x.map(function (x) {\n            return x += datumGap_1.x;\n          }),\n          y: prevDatum.y.map(function (y) {\n            return y += datumGap_1.y;\n          })\n        });\n        // 处理一下在 [0, 1] 范围\n        // 1. 更新 node 数据\n        var newData = __spreadArray([], data, true);\n        newData[this.currentElementIdx] = nextDatum;\n        nodeView.data(newData);\n        // 2. 更新 edge 数据\n        var name_1 = prevDatum.name;\n        var edgeView = this.getEdgeView();\n        var edgeData = edgeView.getOptions().data;\n        edgeData.forEach(function (datum) {\n          // 2.1 以该 node 为 source 的边，修改 [x0, x1, x2, x3] 中的 x0, x1\n          if (datum.source === name_1) {\n            datum.x[0] += datumGap_1.x;\n            datum.x[1] += datumGap_1.x;\n            datum.y[0] += datumGap_1.y;\n            datum.y[1] += datumGap_1.y;\n          }\n          // 2.2 以该 node 为 target 的边，修改 [x0, x1, x2, x3] 中的 x2, x3\n          if (datum.target === name_1) {\n            datum.x[2] += datumGap_1.x;\n            datum.x[3] += datumGap_1.x;\n            datum.y[2] += datumGap_1.y;\n            datum.y[3] += datumGap_1.y;\n          }\n        });\n        edgeView.data(edgeData);\n        // 3. 更新最新位置\n        this.prevPoint = currentPoint;\n        // node edge 都改变了，所以要从底层 render\n        chart.render(true);\n      }\n    }\n  };\n  /**\n   * 结论，清除状态\n   */\n  SankeyNodeDragAction.prototype.end = function () {\n    this.isDragging = false;\n    this.context.isDragging = false;\n    this.prevPoint = null;\n    this.currentElementIdx = null;\n    // 还原动画\n    this.getNodeView().animate(this.prevNodeAnimateCfg);\n    this.getEdgeView().animate(this.prevEdgeAnimateCfg);\n  };\n  return SankeyNodeDragAction;\n}(Action);\nexport { SankeyNodeDragAction };","map":{"version":3,"names":["Action","get","findViewById","EDGES_VIEW_ID","NODES_VIEW_ID","SankeyNodeDragAction","_super","__extends","_this","apply","arguments","isDragging","prototype","isNodeElement","shape","context","element","getModel","data","isNode","getNodeView","view","getEdgeView","getCurrentDatumIdx","geometries","elements","indexOf","start","prevPoint","x","y","event","target","idx","currentElementIdx","prevNodeAnimateCfg","getOptions","animate","prevEdgeAnimateCfg","translate","chart","currentPoint","nodeView","prevDatum","coordinate","getCoordinate","datumGap_1","getWidth","getHeight","nextDatum","__assign","map","newData","__spreadArray","name_1","name","edgeView","edgeData","forEach","datum","source","render","end"],"sources":["../../../../../src/plots/sankey/interactions/actions/node-drag.ts"],"sourcesContent":["import { Action, Element } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { Datum, Point } from '../../../../types';\nimport { findViewById } from '../../../../utils';\nimport { EDGES_VIEW_ID, NODES_VIEW_ID } from '../../constant';\n\nexport class SankeyNodeDragAction extends Action {\n  /**\n   * 是否在拖拽中的标记\n   */\n  private isDragging = false;\n\n  /**\n   * 鼠标上一次的位置的坐标点\n   */\n  private prevPoint: Point;\n  /**\n   * 之前的节点动画配置\n   */\n  private prevNodeAnimateCfg: any;\n  /**\n   * 之前的边动画配置\n   */\n  private prevEdgeAnimateCfg: any;\n  /**\n   * 当前拖拽的 element 索引\n   */\n  private currentElementIdx: number;\n\n  /**\n   * 当前操作的是否是 element\n   */\n  private isNodeElement() {\n    const shape = get(this.context, 'event.target');\n    if (shape) {\n      const element = shape.get('element');\n      return element && element.getModel().data.isNode;\n    }\n    return false;\n  }\n\n  private getNodeView() {\n    return findViewById(this.context.view, NODES_VIEW_ID);\n  }\n\n  private getEdgeView() {\n    return findViewById(this.context.view, EDGES_VIEW_ID);\n  }\n\n  /**\n   * 获取当前操作的 index\n   * @param element\n   */\n  private getCurrentDatumIdx(element: Element) {\n    return this.getNodeView().geometries[0].elements.indexOf(element);\n  }\n\n  /**\n   * 点击下去，开始\n   */\n  public start() {\n    // 记录开始了的状态\n    if (this.isNodeElement()) {\n      this.prevPoint = {\n        x: get(this.context, 'event.x'),\n        y: get(this.context, 'event.y'),\n      };\n\n      const element = this.context.event.target.get('element');\n      const idx = this.getCurrentDatumIdx(element);\n\n      if (idx === -1) {\n        return;\n      }\n\n      this.currentElementIdx = idx;\n      this.context.isDragging = true;\n      this.isDragging = true;\n\n      // 关闭动画并暂存配置\n      this.prevNodeAnimateCfg = this.getNodeView().getOptions().animate;\n      this.prevEdgeAnimateCfg = this.getEdgeView().getOptions().animate;\n      this.getNodeView().animate(false);\n      this.getEdgeView().animate(false);\n    }\n  }\n\n  /**\n   * 移动过程中，平移\n   */\n  public translate() {\n    if (this.isDragging) {\n      const chart = this.context.view;\n\n      const currentPoint = {\n        x: get(this.context, 'event.x'),\n        y: get(this.context, 'event.y'),\n      };\n\n      const x = currentPoint.x - this.prevPoint.x;\n      const y = currentPoint.y - this.prevPoint.y;\n\n      const nodeView = this.getNodeView();\n      const element = nodeView.geometries[0].elements[this.currentElementIdx];\n\n      // 修改数据\n      if (element && element.getModel()) {\n        const prevDatum: Datum = element.getModel().data;\n        const data = nodeView.getOptions().data;\n        const coordinate = nodeView.getCoordinate();\n\n        const datumGap = {\n          x: x / coordinate.getWidth(),\n          y: y / coordinate.getHeight(),\n        };\n\n        const nextDatum = {\n          ...prevDatum,\n          x: prevDatum.x.map((x: number) => (x += datumGap.x)),\n          y: prevDatum.y.map((y: number) => (y += datumGap.y)),\n        };\n        // 处理一下在 [0, 1] 范围\n\n        // 1. 更新 node 数据\n        const newData = [...data];\n        newData[this.currentElementIdx] = nextDatum;\n        nodeView.data(newData);\n\n        // 2. 更新 edge 数据\n        const name = prevDatum.name;\n        const edgeView = this.getEdgeView();\n        const edgeData = edgeView.getOptions().data;\n\n        edgeData.forEach((datum) => {\n          // 2.1 以该 node 为 source 的边，修改 [x0, x1, x2, x3] 中的 x0, x1\n          if (datum.source === name) {\n            datum.x[0] += datumGap.x;\n            datum.x[1] += datumGap.x;\n            datum.y[0] += datumGap.y;\n            datum.y[1] += datumGap.y;\n          }\n\n          // 2.2 以该 node 为 target 的边，修改 [x0, x1, x2, x3] 中的 x2, x3\n          if (datum.target === name) {\n            datum.x[2] += datumGap.x;\n            datum.x[3] += datumGap.x;\n            datum.y[2] += datumGap.y;\n            datum.y[3] += datumGap.y;\n          }\n        });\n        edgeView.data(edgeData);\n\n        // 3. 更新最新位置\n        this.prevPoint = currentPoint;\n\n        // node edge 都改变了，所以要从底层 render\n        chart.render(true);\n      }\n    }\n  }\n\n  /**\n   * 结论，清除状态\n   */\n  public end() {\n    this.isDragging = false;\n    this.context.isDragging = false;\n    this.prevPoint = null;\n    this.currentElementIdx = null;\n\n    // 还原动画\n    this.getNodeView().animate(this.prevNodeAnimateCfg);\n    this.getEdgeView().animate(this.prevEdgeAnimateCfg);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}