{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nvar ElementSingleState = /** @class */function (_super) {\n  __extends(ElementSingleState, _super);\n  function ElementSingleState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ElementSingleState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  };\n  /**\n   * 切换选中，只允许选中一个\n   */\n  ElementSingleState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n    if (element) {\n      var hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n  ElementSingleState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  return ElementSingleState;\n}(StateBase);\nexport default ElementSingleState;","map":{"version":3,"names":["getCurrentElement","isElementChange","StateBase","ElementSingleState","_super","__extends","prototype","setStateEnable","enable","element","context","clear","setElementState","hasState","toggle","reset"],"sources":["../../../../src/interaction/action/element/single-state.ts"],"sourcesContent":["import { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nclass ElementSingleState extends StateBase {\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  }\n\n  /**\n   * 切换选中，只允许选中一个\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementSingleState;\n"],"mappings":";AAAA,SAASA,iBAAiB,EAAEC,eAAe,QAAQ,SAAS;AAC5D,OAAOC,SAAS,MAAM,cAAc;AAEpC;;;;;AAKA,IAAAC,kBAAA,0BAAAC,MAAA;EAAiCC,SAAA,CAAAF,kBAAA,EAAAC,MAAA;EAAjC,SAAAD,mBAAA;;EAsCA;EArCYA,kBAAA,CAAAG,SAAA,CAAAC,cAAc,GAAxB,UAAyBC,MAAe;IACtC,IAAMC,OAAO,GAAGT,iBAAiB,CAAC,IAAI,CAACU,OAAO,CAAC;IAC/C,IAAID,OAAO,EAAE;MACX;MACA,IAAI,CAACR,eAAe,CAAC,IAAI,CAACS,OAAO,CAAC,EAAE;QAClC;;MAEF;MACA,IAAIF,MAAM,EAAE;QACV,IAAI,CAACG,KAAK,EAAE;QACZ,IAAI,CAACC,eAAe,CAACH,OAAO,EAAE,IAAI,CAAC;OACpC,MAAM,IAAI,IAAI,CAACI,QAAQ,CAACJ,OAAO,CAAC,EAAE;QACjC,IAAI,CAACG,eAAe,CAACH,OAAO,EAAE,KAAK,CAAC;;;EAG1C,CAAC;EAED;;;EAGON,kBAAA,CAAAG,SAAA,CAAAQ,MAAM,GAAb;IACE,IAAML,OAAO,GAAGT,iBAAiB,CAAC,IAAI,CAACU,OAAO,CAAC;IAC/C,IAAID,OAAO,EAAE;MACX,IAAMI,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACJ,OAAO,CAAC,CAAC,CAAC;MACzC,IAAI,CAACI,QAAQ,EAAE;QACb,IAAI,CAACF,KAAK,EAAE;;MAEd,IAAI,CAACC,eAAe,CAACH,OAAO,EAAE,CAACI,QAAQ,CAAC;;EAE5C,CAAC;EAED;;;EAGOV,kBAAA,CAAAG,SAAA,CAAAS,KAAK,GAAZ;IACE,IAAI,CAACR,cAAc,CAAC,KAAK,CAAC;EAC5B,CAAC;EACH,OAAAJ,kBAAC;AAAD,CAAC,CAtCgCD,SAAS;AAwC1C,eAAeC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}