{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\nvar ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n  /** 主题样式 */\n  theme: null,\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints: function (shapeType, shapePoint) {\n    var shape = this.getShape(shapeType);\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n    return this.getDefaultPoints(shapePoint);\n  },\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape: function (shapeType) {\n    var shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n    return shape;\n  },\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints: function () {\n    return [];\n  },\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle: function (geometryTheme) {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker: function (shapeType, markerCfg) {\n    var shape = this.getShape(shapeType);\n    if (!shape.getMarker) {\n      var defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n    var theme = this.theme;\n    var shapeStyle = get(theme, [shapeType, 'default'], {});\n    var markerStyle = shape.getMarker(markerCfg);\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape: function (shapeType, cfg, container) {\n    var shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  }\n};\n/** Shape 基类 */\nvar ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath: function (path) {\n    var coordinate = this.coordinate;\n    var parsedPath = parsePathString(path);\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n    return parsedPath;\n  },\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint: function (point) {\n    var coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints: function (points) {\n    var coordinate = this.coordinate;\n    return points.map(function (point) {\n      return coordinate.convert(point);\n    });\n  },\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw: function (cfg, container) {}\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName, cfg) {\n  var className = upperFirst(factoryName);\n  var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), {\n    geometryType: factoryName\n  });\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName, shapeType, cfg) {\n  var className = upperFirst(factoryName);\n  var factory = ShapeFactoryMap[className];\n  var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName) {\n  var className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}","map":{"version":3,"names":["parsePathString","deepMix","get","upperFirst","convertNormalPath","convertPolarPath","ShapeFactoryBase","coordinate","defaultShapeType","theme","getShapePoints","shapeType","shapePoint","shape","getShape","getPoints","getDefaultPoints","getDefaultStyle","geometryTheme","getMarker","markerCfg","shapeStyle","markerStyle","drawShape","cfg","container","draw","ShapeBase","parsePath","path","parsedPath","isPolar","parsePoint","point","convert","parsePoints","points","map","ShapeFactoryMap","registerShapeFactory","factoryName","className","geomObj","__assign","geometryType","registerShape","factory","shapeObj","getShapeFactory"],"sources":["../../../src/geometry/shape/base.ts"],"sourcesContent":["import { LooseObject } from '@antv/g-svg';\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { IGroup, IShape, PathCommand } from '../../dependents';\nimport {\n  Point,\n  RegisterShape,\n  RegisterShapeFactory,\n  Shape,\n  ShapeFactory,\n  ShapeInfo,\n  ShapeMarkerAttrs,\n  ShapeMarkerCfg,\n  ShapePoint,\n} from '../../interface';\n\nimport { convertNormalPath, convertPolarPath } from './util/path';\n\n/** ShapeFactory 基类 */\nconst ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n  /** 主题样式 */\n  theme: null,\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints(shapeType: string, shapePoint: ShapePoint) {\n    const shape = this.getShape(shapeType);\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n\n    return this.getDefaultPoints(shapePoint);\n  },\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape(shapeType: string): Shape {\n    const shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n\n    return shape;\n  },\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints() {\n    return [];\n  },\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle(geometryTheme: LooseObject): LooseObject {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker(shapeType: string, markerCfg: ShapeMarkerCfg): ShapeMarkerAttrs {\n    let shape = this.getShape(shapeType);\n\n    if (!shape.getMarker) {\n      const defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n\n    const theme = this.theme;\n    const shapeStyle = get(theme, [shapeType, 'default'], {});\n    const markerStyle = shape.getMarker(markerCfg);\n\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape(shapeType: string, cfg: ShapeInfo, container: IGroup): IShape | IGroup {\n    const shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  },\n};\n\n/** Shape 基类 */\nconst ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath(path: string): PathCommand[] {\n    const coordinate = this.coordinate;\n    let parsedPath = parsePathString(path);\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n    return parsedPath;\n  },\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint(point: Point): Point {\n    const coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints(points: Point[]): Point[] {\n    const coordinate = this.coordinate;\n    return points.map((point) => {\n      return coordinate.convert(point);\n    });\n  },\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw(cfg: ShapeInfo, container: IGroup) {},\n};\n\nconst ShapeFactoryMap = {};\n\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName: string, cfg: RegisterShapeFactory): ShapeFactory {\n  const className = upperFirst(factoryName);\n  const geomObj = {\n    ...ShapeFactoryBase,\n    ...cfg,\n    geometryType: factoryName,\n  };\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName: string, shapeType: string, cfg: RegisterShape): Shape {\n  const className = upperFirst(factoryName);\n  const factory = ShapeFactoryMap[className];\n  const shapeObj = {\n    ...ShapeBase,\n    ...cfg,\n  };\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName: string): ShapeFactory {\n  const className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}