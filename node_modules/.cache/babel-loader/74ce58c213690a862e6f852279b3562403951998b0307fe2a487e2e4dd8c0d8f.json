{"ast":null,"code":"import { isArray, isNumber } from '@antv/util';\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding) {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    var length_1 = padding.length;\n    if (length_1 === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length_1 === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length_1 === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length_1 === 4) {\n      return padding;\n    }\n  }\n  return [0, 0, 0, 0];\n}\n/**\n * 获取调整的 appendPadding\n */\nexport function getAdjustAppendPadding(padding, position, append) {\n  if (position === void 0) {\n    position = 'bottom';\n  }\n  if (append === void 0) {\n    append = 25;\n  }\n  var currentAppendPadding = normalPadding(padding);\n  var PADDING = [position.startsWith('top') ? append : 0, position.startsWith('right') ? append : 0, position.startsWith('bottom') ? append : 0, position.startsWith('left') ? append : 0];\n  return [currentAppendPadding[0] + PADDING[0], currentAppendPadding[1] + PADDING[1], currentAppendPadding[2] + PADDING[2], currentAppendPadding[3] + PADDING[3]];\n}\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\nexport function resolveAllPadding(paddings) {\n  // 先把数组里的 padding 全部转换成 normal\n  var normalPaddings = paddings.map(function (item) {\n    return normalPadding(item);\n  });\n  var finalPadding = [0, 0, 0, 0];\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map(function (item, index) {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach(function (d, i) {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n  return finalPadding;\n}","map":{"version":3,"names":["isArray","isNumber","normalPadding","padding","length_1","length","getAdjustAppendPadding","position","append","currentAppendPadding","PADDING","startsWith","resolveAllPadding","paddings","normalPaddings","map","item","finalPadding","index","forEach","d","i"],"sources":["../../src/utils/padding.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { isArray, isNumber } from '@antv/util';\n\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding: number | number[] | 'auto'): [number, number, number, number] {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    const length = padding.length;\n\n    if (length === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length === 4) {\n      return padding as [number, number, number, number];\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n\n/**\n * 获取调整的 appendPadding\n */\nexport function getAdjustAppendPadding(padding: Types.ViewAppendPadding, position = 'bottom', append = 25) {\n  const currentAppendPadding = normalPadding(padding);\n\n  const PADDING = [\n    position.startsWith('top') ? append : 0,\n    position.startsWith('right') ? append : 0,\n    position.startsWith('bottom') ? append : 0,\n    position.startsWith('left') ? append : 0,\n  ];\n  return [\n    currentAppendPadding[0] + PADDING[0],\n    currentAppendPadding[1] + PADDING[1],\n    currentAppendPadding[2] + PADDING[2],\n    currentAppendPadding[3] + PADDING[3],\n  ];\n}\n\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\nexport function resolveAllPadding(paddings: Types.ViewPadding[]) {\n  // 先把数组里的 padding 全部转换成 normal\n  const normalPaddings = paddings.map((item) => normalPadding(item));\n  let finalPadding = [0, 0, 0, 0];\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map((item, index) => {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach((d, i) => {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n  return finalPadding;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}