{"ast":null,"code":"import { isAbsoluteArray } from '../util/is-absolute-array';\nimport { parsePathString } from '../parser/parse-path-string';\nexport function path2Absolute(pathInput) {\n  if (isAbsoluteArray(pathInput)) {\n    return [].concat(pathInput);\n  }\n  var path = parsePathString(pathInput);\n  // if (!path || !path.length) {\n  //   return [['M', 0, 0]];\n  // }\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  // @ts-ignore\n  return path.map(function (segment) {\n    var values = segment.slice(1).map(Number);\n    var pathCommand = segment[0];\n    var absCommand = pathCommand.toUpperCase();\n    if (pathCommand === 'M') {\n      x = values[0], y = values[1];\n      mx = x;\n      my = y;\n      return ['M', x, y];\n    }\n    var absoluteSegment;\n    if (pathCommand !== absCommand) {\n      switch (absCommand) {\n        case 'A':\n          absoluteSegment = [absCommand, values[0], values[1], values[2], values[3], values[4], values[5] + x, values[6] + y];\n          break;\n        case 'V':\n          absoluteSegment = [absCommand, values[0] + y];\n          break;\n        case 'H':\n          absoluteSegment = [absCommand, values[0] + x];\n          break;\n        default:\n          {\n            // use brakets for `eslint: no-case-declaration`\n            // https://stackoverflow.com/a/50753272/803358\n            var absValues = values.map(function (n, j) {\n              return n + (j % 2 ? y : x);\n            });\n            // for n, l, c, s, q, t\n            // @ts-ignore\n            absoluteSegment = [absCommand].concat(absValues);\n          }\n      }\n    } else {\n      // @ts-ignore\n      absoluteSegment = [absCommand].concat(values);\n    }\n    var segLength = absoluteSegment.length;\n    switch (absCommand) {\n      case 'Z':\n        x = mx;\n        y = my;\n        break;\n      case 'H':\n        x = absoluteSegment[1];\n        break;\n      case 'V':\n        y = absoluteSegment[1];\n        break;\n      default:\n        x = absoluteSegment[segLength - 2];\n        y = absoluteSegment[segLength - 1];\n        if (absCommand === 'M') {\n          mx = x;\n          my = y;\n        }\n    }\n    return absoluteSegment;\n  });\n}","map":{"version":3,"names":["isAbsoluteArray","parsePathString","path2Absolute","pathInput","concat","path","x","y","mx","my","map","segment","values","slice","Number","pathCommand","absCommand","toUpperCase","absoluteSegment","absValues","n","j","segLength","length"],"sources":["src/path/convert/path-2-absolute.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,eAAe,QAAQ,6BAA6B;AAG7D,OAAM,SAAUC,aAAaA,CAACC,SAA6B;EACzD,IAAIH,eAAe,CAACG,SAAS,CAAC,EAAE;IAC9B,OAAO,EAAE,CAACC,MAAM,CAACD,SAAS,CAAkB;;EAG9C,IAAME,IAAI,GAAGJ,eAAe,CAACE,SAAsB,CAAc;EAEjE;EACA;EACA;EACA,IAAIG,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EAEV;EACA,OAAOJ,IAAI,CAACK,GAAG,CAAC,UAACC,OAAO;IACtB,IAAMC,MAAM,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC,CAACH,GAAG,CAACI,MAAM,CAAC;IACpC,IAAAC,WAAW,GAAIJ,OAAO,GAAX;IAClB,IAAMK,UAAU,GAAGD,WAAW,CAACE,WAAW,EAAE;IAE5C,IAAIF,WAAW,KAAK,GAAG,EAAE;MACtBT,CAAC,GAAOM,MAAM,GAAb,EAAEL,CAAC,GAAIK,MAAM,GAAV;MACLJ,EAAE,GAAGF,CAAC;MACNG,EAAE,GAAGF,CAAC;MACN,OAAO,CAAC,GAAG,EAAED,CAAC,EAAEC,CAAC,CAAC;;IAEpB,IAAIW,eAAgC;IAEpC,IAAIH,WAAW,KAAKC,UAAU,EAAE;MAC9B,QAAQA,UAAU;QAChB,KAAK,GAAG;UACNE,eAAe,GAAG,CAChBF,UAAU,EACVJ,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,EACTA,MAAM,CAAC,CAAC,CAAC,GAAGN,CAAC,EACbM,MAAM,CAAC,CAAC,CAAC,GAAGL,CAAC,CACd;UACD;QACF,KAAK,GAAG;UACNW,eAAe,GAAG,CAACF,UAAU,EAAEJ,MAAM,CAAC,CAAC,CAAC,GAAGL,CAAC,CAAC;UAC7C;QACF,KAAK,GAAG;UACNW,eAAe,GAAG,CAACF,UAAU,EAAEJ,MAAM,CAAC,CAAC,CAAC,GAAGN,CAAC,CAAC;UAC7C;QACF;UAAS;YACP;YACA;YACA,IAAMa,SAAS,GAAGP,MAAM,CAACF,GAAG,CAAC,UAACU,CAAC,EAAEC,CAAC;cAAK,OAAAD,CAAC,IAAIC,CAAC,GAAG,CAAC,GAAGd,CAAC,GAAGD,CAAC,CAAC;YAAnB,CAAmB,CAAC;YAC3D;YACA;YACAY,eAAe,GAAG,CAACF,UAAU,CAAC,CAACZ,MAAM,CAACe,SAAS,CAAoB;;;KAGxE,MAAM;MACL;MACAD,eAAe,GAAG,CAACF,UAAU,CAAC,CAACZ,MAAM,CAACQ,MAAM,CAAoB;;IAGlE,IAAMU,SAAS,GAAGJ,eAAe,CAACK,MAAM;IACxC,QAAQP,UAAU;MAChB,KAAK,GAAG;QACNV,CAAC,GAAGE,EAAE;QACND,CAAC,GAAGE,EAAE;QACN;MACF,KAAK,GAAG;QACHH,CAAC,GAAIY,eAAe,GAAnB;QACJ;MACF,KAAK,GAAG;QACHX,CAAC,GAAIW,eAAe,GAAnB;QACJ;MACF;QACEZ,CAAC,GAAGY,eAAe,CAACI,SAAS,GAAG,CAAC,CAAW;QAC5Cf,CAAC,GAAGW,eAAe,CAACI,SAAS,GAAG,CAAC,CAAW;QAE5C,IAAIN,UAAU,KAAK,GAAG,EAAE;UACtBR,EAAE,GAAGF,CAAC;UACNG,EAAE,GAAGF,CAAC;;;IAGZ,OAAOW,eAAe;EACxB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}