{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// represents a body(a point mass) and its position\nvar Body = /** @class */function () {\n  function Body(params) {\n    /**\n     * the id of this body, the same with the node id\n     * @type  {number}\n     */\n    this.id = params.id || 0;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n    this.rx = params.rx;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n    this.ry = params.ry;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n    this.fx = 0;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n    this.fy = 0;\n    /**\n     * the mass of this body, =1 for a node\n     * @type  {number}\n     */\n    this.mass = params.mass;\n    /**\n     * the degree of the node represented by this body\n     * @type  {number}\n     */\n    this.degree = params.degree;\n    /**\n     * the parameter for repulsive force, = kr\n     * @type  {number}\n     */\n    this.g = params.g || 0;\n  }\n  // returns the euclidean distance\n  Body.prototype.distanceTo = function (bo) {\n    var dx = this.rx - bo.rx;\n    var dy = this.ry - bo.ry;\n    return Math.hypot(dx, dy);\n  };\n  Body.prototype.setPos = function (x, y) {\n    this.rx = x;\n    this.ry = y;\n  };\n  // resets the forces\n  Body.prototype.resetForce = function () {\n    this.fx = 0;\n    this.fy = 0;\n  };\n  Body.prototype.addForce = function (b) {\n    var dx = b.rx - this.rx;\n    var dy = b.ry - this.ry;\n    var dist = Math.hypot(dx, dy);\n    dist = dist < 0.0001 ? 0.0001 : dist;\n    // the repulsive defined by force atlas 2\n    var F = this.g * (this.degree + 1) * (b.degree + 1) / dist;\n    this.fx += F * dx / dist;\n    this.fy += F * dy / dist;\n  };\n  // if quad contains this body\n  Body.prototype.in = function (quad) {\n    return quad.contains(this.rx, this.ry);\n  };\n  // returns a new body\n  Body.prototype.add = function (bo) {\n    var nenwMass = this.mass + bo.mass;\n    var x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n    var y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n    var dg = this.degree + bo.degree;\n    var params = {\n      rx: x,\n      ry: y,\n      mass: nenwMass,\n      degree: dg\n    };\n    return new Body(params);\n  };\n  return Body;\n}();\nexports.default = Body;","map":{"version":3,"names":["Body","params","id","rx","ry","fx","fy","mass","degree","g","prototype","distanceTo","bo","dx","dy","Math","hypot","setPos","x","y","resetForce","addForce","b","dist","F","in","quad","contains","add","nenwMass","dg"],"sources":["../../../src/layout/forceAtlas2/body.ts"],"sourcesContent":[null],"mappings":";;;;;AAkBA;AACA,IAAAA,IAAA;EAUE,SAAAA,KAAYC,MAAiB;IAC3B;;;;IAIA,IAAI,CAACC,EAAE,GAAGD,MAAM,CAACC,EAAE,IAAI,CAAC;IACxB;;;;IAIA,IAAI,CAACC,EAAE,GAAGF,MAAM,CAACE,EAAE;IACnB;;;;IAIA,IAAI,CAACC,EAAE,GAAGH,MAAM,CAACG,EAAE;IACnB;;;;IAIA,IAAI,CAACC,EAAE,GAAG,CAAC;IACX;;;;IAIA,IAAI,CAACC,EAAE,GAAG,CAAC;IACX;;;;IAIA,IAAI,CAACC,IAAI,GAAGN,MAAM,CAACM,IAAI;IACvB;;;;IAIA,IAAI,CAACC,MAAM,GAAGP,MAAM,CAACO,MAAM;IAC3B;;;;IAIA,IAAI,CAACC,CAAC,GAAGR,MAAM,CAACQ,CAAC,IAAI,CAAC;EACxB;EACA;EACAT,IAAA,CAAAU,SAAA,CAAAC,UAAU,GAAV,UAAWC,EAAQ;IACjB,IAAMC,EAAE,GAAG,IAAI,CAACV,EAAE,GAAGS,EAAE,CAACT,EAAE;IAC1B,IAAMW,EAAE,GAAG,IAAI,CAACV,EAAE,GAAGQ,EAAE,CAACR,EAAE;IAC1B,OAAOW,IAAI,CAACC,KAAK,CAACH,EAAE,EAAEC,EAAE,CAAC;EAC3B,CAAC;EACDd,IAAA,CAAAU,SAAA,CAAAO,MAAM,GAAN,UAAOC,CAAS,EAAEC,CAAS;IACzB,IAAI,CAAChB,EAAE,GAAGe,CAAC;IACX,IAAI,CAACd,EAAE,GAAGe,CAAC;EACb,CAAC;EACD;EACAnB,IAAA,CAAAU,SAAA,CAAAU,UAAU,GAAV;IACE,IAAI,CAACf,EAAE,GAAG,CAAC;IACX,IAAI,CAACC,EAAE,GAAG,CAAC;EACb,CAAC;EACDN,IAAA,CAAAU,SAAA,CAAAW,QAAQ,GAAR,UAASC,CAAO;IACd,IAAMT,EAAE,GAAGS,CAAC,CAACnB,EAAE,GAAG,IAAI,CAACA,EAAE;IACzB,IAAMW,EAAE,GAAGQ,CAAC,CAAClB,EAAE,GAAG,IAAI,CAACA,EAAE;IACzB,IAAImB,IAAI,GAAGR,IAAI,CAACC,KAAK,CAACH,EAAE,EAAEC,EAAE,CAAC;IAC7BS,IAAI,GAAGA,IAAI,GAAG,MAAM,GAAG,MAAM,GAAGA,IAAI;IACpC;IACA,IAAMC,CAAC,GAAI,IAAI,CAACf,CAAC,IAAI,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,IAAIc,CAAC,CAACd,MAAM,GAAG,CAAC,CAAC,GAAIe,IAAI;IAC9D,IAAI,CAAClB,EAAE,IAAImB,CAAC,GAAGX,EAAE,GAAGU,IAAI;IACxB,IAAI,CAACjB,EAAE,IAAIkB,CAAC,GAAGV,EAAE,GAAGS,IAAI;EAC1B,CAAC;EACD;EACAvB,IAAA,CAAAU,SAAA,CAAAe,EAAE,GAAF,UAAGC,IAAU;IACX,OAAOA,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACxB,EAAE,EAAE,IAAI,CAACC,EAAE,CAAC;EACxC,CAAC;EACD;EACAJ,IAAA,CAAAU,SAAA,CAAAkB,GAAG,GAAH,UAAIhB,EAAQ;IACV,IAAMiB,QAAQ,GAAG,IAAI,CAACtB,IAAI,GAAGK,EAAE,CAACL,IAAI;IACpC,IAAMW,CAAC,GAAG,CAAC,IAAI,CAACf,EAAE,GAAG,IAAI,CAACI,IAAI,GAAGK,EAAE,CAACT,EAAE,GAAGS,EAAE,CAACL,IAAI,IAAIsB,QAAQ;IAC5D,IAAMV,CAAC,GAAG,CAAC,IAAI,CAACf,EAAE,GAAG,IAAI,CAACG,IAAI,GAAGK,EAAE,CAACR,EAAE,GAAGQ,EAAE,CAACL,IAAI,IAAIsB,QAAQ;IAC5D,IAAMC,EAAE,GAAG,IAAI,CAACtB,MAAM,GAAGI,EAAE,CAACJ,MAAM;IAClC,IAAMP,MAAM,GAAc;MACxBE,EAAE,EAAEe,CAAC;MACLd,EAAE,EAAEe,CAAC;MACLZ,IAAI,EAAEsB,QAAQ;MACdrB,MAAM,EAAEsB;KACT;IACD,OAAO,IAAI9B,IAAI,CAACC,MAAM,CAAC;EACzB,CAAC;EACH,OAAAD,IAAC;AAAD,CAAC,CA/FD"},"metadata":{},"sourceType":"script","externalDependencies":[]}