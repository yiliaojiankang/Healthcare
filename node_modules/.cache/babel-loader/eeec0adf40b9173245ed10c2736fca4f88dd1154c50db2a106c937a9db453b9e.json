{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { bisect, conjugateGradient, nelderMead, norm2, scale, zeros, zerosM } from 'fmin';\nimport { circleCircleIntersection, circleOverlap, distance, intersectionArea } from './circleintersection';\n/** given a list of set objects, and their corresponding overlaps.\nupdates the (x, y, radius) attribute on each set such that their positions\nroughly correspond to the desired overlaps */\nexport function venn(areas, parameters) {\n  parameters = parameters || {};\n  parameters.maxIterations = parameters.maxIterations || 500;\n  var initialLayout = parameters.initialLayout || bestInitialLayout;\n  var loss = parameters.lossFunction || lossFunction;\n  // add in missing pairwise areas as having 0 size\n  areas = addMissingAreas(areas);\n  // initial layout is done greedily\n  var circles = initialLayout(areas, parameters);\n  // transform x/y coordinates to a vector to optimize\n  var initial = [],\n    setids = [];\n  var setid;\n  for (setid in circles) {\n    // eslint-disable-next-line\n    if (circles.hasOwnProperty(setid)) {\n      initial.push(circles[setid].x);\n      initial.push(circles[setid].y);\n      setids.push(setid);\n    }\n  }\n  // optimize initial layout from our loss function\n  var solution = nelderMead(function (values) {\n    var current = {};\n    for (var i = 0; i < setids.length; ++i) {\n      var setid_1 = setids[i];\n      current[setid_1] = {\n        x: values[2 * i],\n        y: values[2 * i + 1],\n        radius: circles[setid_1].radius\n        // size : circles[setid].size\n      };\n    }\n\n    return loss(current, areas);\n  }, initial, parameters);\n  // transform solution vector back to x/y points\n  var positions = solution.x;\n  for (var i = 0; i < setids.length; ++i) {\n    setid = setids[i];\n    circles[setid].x = positions[2 * i];\n    circles[setid].y = positions[2 * i + 1];\n  }\n  return circles;\n}\nvar SMALL = 1e-10;\n/** Returns the distance necessary for two circles of radius r1 + r2 to\nhave the overlap area 'overlap' */\nexport function distanceFromIntersectArea(r1, r2, overlap) {\n  // handle complete overlapped circles\n  if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL) {\n    return Math.abs(r1 - r2);\n  }\n  return bisect(function (distance) {\n    return circleOverlap(r1, r2, distance) - overlap;\n  }, 0, r1 + r2);\n}\n/** Missing pair-wise intersection area data can cause problems:\n treating as an unknown means that sets will be laid out overlapping,\n which isn't what people expect. To reflect that we want disjoint sets\n here, set the overlap to 0 for all missing pairwise set intersections */\nfunction addMissingAreas(areas) {\n  areas = areas.slice();\n  // two circle intersections that aren't defined\n  var ids = [],\n    pairs = {};\n  var i, j, a, b;\n  for (i = 0; i < areas.length; ++i) {\n    var area = areas[i];\n    if (area.sets.length == 1) {\n      ids.push(area.sets[0]);\n    } else if (area.sets.length == 2) {\n      a = area.sets[0];\n      b = area.sets[1];\n      // @ts-ignore\n      pairs[[a, b]] = true;\n      // @ts-ignore\n      pairs[[b, a]] = true;\n    }\n  }\n  ids.sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n  for (i = 0; i < ids.length; ++i) {\n    a = ids[i];\n    for (j = i + 1; j < ids.length; ++j) {\n      b = ids[j];\n      // @ts-ignore\n      if (!([a, b] in pairs)) {\n        areas.push({\n          sets: [a, b],\n          size: 0\n        });\n      }\n    }\n  }\n  return areas;\n}\n/// Returns two matrices, one of the euclidean distances between the sets\n/// and the other indicating if there are subset or disjoint set relationships\nexport function getDistanceMatrices(areas, sets, setids) {\n  // initialize an empty distance matrix between all the points\n  var distances = zerosM(sets.length, sets.length),\n    constraints = zerosM(sets.length, sets.length);\n  // compute required distances between all the sets such that\n  // the areas match\n  areas.filter(function (x) {\n    return x.sets.length == 2;\n  }).map(function (current) {\n    var left = setids[current.sets[0]],\n      right = setids[current.sets[1]],\n      r1 = Math.sqrt(sets[left].size / Math.PI),\n      r2 = Math.sqrt(sets[right].size / Math.PI),\n      distance = distanceFromIntersectArea(r1, r2, current.size);\n    distances[left][right] = distances[right][left] = distance;\n    // also update constraints to indicate if its a subset or disjoint\n    // relationship\n    var c = 0;\n    if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {\n      c = 1;\n    } else if (current.size <= 1e-10) {\n      c = -1;\n    }\n    constraints[left][right] = constraints[right][left] = c;\n  });\n  return {\n    distances: distances,\n    constraints: constraints\n  };\n}\n/// computes the gradient and loss simulatenously for our constrained MDS optimizer\nfunction constrainedMDSGradient(x, fxprime, distances, constraints) {\n  var loss = 0,\n    i;\n  for (i = 0; i < fxprime.length; ++i) {\n    fxprime[i] = 0;\n  }\n  for (i = 0; i < distances.length; ++i) {\n    var xi = x[2 * i],\n      yi = x[2 * i + 1];\n    for (var j = i + 1; j < distances.length; ++j) {\n      var xj = x[2 * j],\n        yj = x[2 * j + 1],\n        dij = distances[i][j],\n        constraint = constraints[i][j];\n      var squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi),\n        distance_1 = Math.sqrt(squaredDistance),\n        delta = squaredDistance - dij * dij;\n      if (constraint > 0 && distance_1 <= dij || constraint < 0 && distance_1 >= dij) {\n        continue;\n      }\n      loss += 2 * delta * delta;\n      fxprime[2 * i] += 4 * delta * (xi - xj);\n      fxprime[2 * i + 1] += 4 * delta * (yi - yj);\n      fxprime[2 * j] += 4 * delta * (xj - xi);\n      fxprime[2 * j + 1] += 4 * delta * (yj - yi);\n    }\n  }\n  return loss;\n}\n/// takes the best working variant of either constrained MDS or greedy\nexport function bestInitialLayout(areas, params) {\n  var initial = greedyLayout(areas, params);\n  var loss = params.lossFunction || lossFunction;\n  // greedylayout is sufficient for all 2/3 circle cases. try out\n  // constrained MDS for higher order problems, take its output\n  // if it outperforms. (greedy is aesthetically better on 2/3 circles\n  // since it axis aligns)\n  if (areas.length >= 8) {\n    var constrained = constrainedMDSLayout(areas, params),\n      constrainedLoss = loss(constrained, areas),\n      greedyLoss = loss(initial, areas);\n    if (constrainedLoss + 1e-8 < greedyLoss) {\n      initial = constrained;\n    }\n  }\n  return initial;\n}\n/// use the constrained MDS variant to generate an initial layout\nexport function constrainedMDSLayout(areas, params) {\n  params = params || {};\n  var restarts = params.restarts || 10;\n  // bidirectionally map sets to a rowid  (so we can create a matrix)\n  var sets = [],\n    setids = {};\n  var i;\n  for (i = 0; i < areas.length; ++i) {\n    var area = areas[i];\n    if (area.sets.length == 1) {\n      setids[area.sets[0]] = sets.length;\n      sets.push(area);\n    }\n  }\n  var matrices = getDistanceMatrices(areas, sets, setids);\n  var distances = matrices.distances;\n  var constraints = matrices.constraints;\n  // keep distances bounded, things get messed up otherwise.\n  // TODO: proper preconditioner?\n  var norm = norm2(distances.map(norm2)) / distances.length;\n  distances = distances.map(function (row) {\n    return row.map(function (value) {\n      return value / norm;\n    });\n  });\n  var obj = function (x, fxprime) {\n    return constrainedMDSGradient(x, fxprime, distances, constraints);\n  };\n  var best, current;\n  for (i = 0; i < restarts; ++i) {\n    var initial = zeros(distances.length * 2).map(Math.random);\n    current = conjugateGradient(obj, initial, params);\n    if (!best || current.fx < best.fx) {\n      best = current;\n    }\n  }\n  var positions = best.x;\n  // translate rows back to (x,y,radius) coordinates\n  var circles = {};\n  for (i = 0; i < sets.length; ++i) {\n    var set = sets[i];\n    circles[set.sets[0]] = {\n      x: positions[2 * i] * norm,\n      y: positions[2 * i + 1] * norm,\n      radius: Math.sqrt(set.size / Math.PI)\n    };\n  }\n  if (params.history) {\n    for (i = 0; i < params.history.length; ++i) {\n      scale(params.history[i].x, norm);\n    }\n  }\n  return circles;\n}\n/** Lays out a Venn diagram greedily, going from most overlapped sets to\nleast overlapped, attempting to position each new set such that the\noverlapping areas to already positioned sets are basically right */\nexport function greedyLayout(areas, params) {\n  var loss = params && params.lossFunction ? params.lossFunction : lossFunction;\n  // define a circle for each set\n  var circles = {},\n    setOverlaps = {};\n  var set;\n  for (var i = 0; i < areas.length; ++i) {\n    var area = areas[i];\n    if (area.sets.length == 1) {\n      set = area.sets[0];\n      circles[set] = {\n        x: 1e10,\n        y: 1e10,\n        // rowid: circles.length, // fix to ->\n        rowid: Object.keys(circles).length,\n        size: area.size,\n        radius: Math.sqrt(area.size / Math.PI)\n      };\n      setOverlaps[set] = [];\n    }\n  }\n  areas = areas.filter(function (a) {\n    return a.sets.length == 2;\n  });\n  // map each set to a list of all the other sets that overlap it\n  for (var i = 0; i < areas.length; ++i) {\n    var current = areas[i];\n    // eslint-disable-next-line\n    var weight = current.hasOwnProperty('weight') ? current.weight : 1.0;\n    var left = current.sets[0],\n      right = current.sets[1];\n    // completely overlapped circles shouldn't be positioned early here\n    if (current.size + SMALL >= Math.min(circles[left].size, circles[right].size)) {\n      weight = 0;\n    }\n    setOverlaps[left].push({\n      set: right,\n      size: current.size,\n      weight: weight\n    });\n    setOverlaps[right].push({\n      set: left,\n      size: current.size,\n      weight: weight\n    });\n  }\n  // get list of most overlapped sets\n  var mostOverlapped = [];\n  for (set in setOverlaps) {\n    // eslint-disable-next-line\n    if (setOverlaps.hasOwnProperty(set)) {\n      var size = 0;\n      for (var i = 0; i < setOverlaps[set].length; ++i) {\n        size += setOverlaps[set][i].size * setOverlaps[set][i].weight;\n      }\n      mostOverlapped.push({\n        set: set,\n        size: size\n      });\n    }\n  }\n  // sort by size desc\n  function sortOrder(a, b) {\n    return b.size - a.size;\n  }\n  mostOverlapped.sort(sortOrder);\n  // keep track of what sets have been laid out\n  var positioned = {};\n  function isPositioned(element) {\n    return element.set in positioned;\n  }\n  // adds a point to the output\n  function positionSet(point, index) {\n    circles[index].x = point.x;\n    circles[index].y = point.y;\n    positioned[index] = true;\n  }\n  // add most overlapped set at (0,0)\n  positionSet({\n    x: 0,\n    y: 0\n  }, mostOverlapped[0].set);\n  // get distances between all points. TODO, necessary?\n  // answer: probably not\n  // var distances = venn.getDistanceMatrices(circles, areas).distances;\n  for (var i = 1; i < mostOverlapped.length; ++i) {\n    var setIndex = mostOverlapped[i].set,\n      overlap = setOverlaps[setIndex].filter(isPositioned);\n    set = circles[setIndex];\n    overlap.sort(sortOrder);\n    if (overlap.length === 0) {\n      // this shouldn't happen anymore with addMissingAreas\n      throw 'ERROR: missing pairwise overlap information';\n    }\n    var points = [];\n    for (var j = 0; j < overlap.length; ++j) {\n      // get appropriate distance from most overlapped already added set\n      var p1 = circles[overlap[j].set],\n        d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size);\n      // sample positions at 90 degrees for maximum aesthetics\n      points.push({\n        x: p1.x + d1,\n        y: p1.y\n      });\n      points.push({\n        x: p1.x - d1,\n        y: p1.y\n      });\n      points.push({\n        y: p1.y + d1,\n        x: p1.x\n      });\n      points.push({\n        y: p1.y - d1,\n        x: p1.x\n      });\n      // if we have at least 2 overlaps, then figure out where the\n      // set should be positioned analytically and try those too\n      for (var k = j + 1; k < overlap.length; ++k) {\n        var p2 = circles[overlap[k].set],\n          d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);\n        var extraPoints = circleCircleIntersection({\n          x: p1.x,\n          y: p1.y,\n          radius: d1\n        }, {\n          x: p2.x,\n          y: p2.y,\n          radius: d2\n        });\n        for (var l = 0; l < extraPoints.length; ++l) {\n          points.push(extraPoints[l]);\n        }\n      }\n    }\n    // we have some candidate positions for the set, examine loss\n    // at each position to figure out where to put it at\n    var bestLoss = 1e50,\n      bestPoint = points[0];\n    for (var j = 0; j < points.length; ++j) {\n      circles[setIndex].x = points[j].x;\n      circles[setIndex].y = points[j].y;\n      var localLoss = loss(circles, areas);\n      if (localLoss < bestLoss) {\n        bestLoss = localLoss;\n        bestPoint = points[j];\n      }\n    }\n    positionSet(bestPoint, setIndex);\n  }\n  return circles;\n}\n/** Given a bunch of sets, and the desired overlaps between these sets - computes\nthe distance from the actual overlaps to the desired overlaps. Note that\nthis method ignores overlaps of more than 2 circles */\nexport function lossFunction(sets, overlaps) {\n  var output = 0;\n  function getCircles(indices) {\n    return indices.map(function (i) {\n      return sets[i];\n    });\n  }\n  for (var i = 0; i < overlaps.length; ++i) {\n    var area = overlaps[i];\n    var overlap = void 0;\n    if (area.sets.length == 1) {\n      continue;\n    } else if (area.sets.length == 2) {\n      var left = sets[area.sets[0]],\n        right = sets[area.sets[1]];\n      overlap = circleOverlap(left.radius, right.radius, distance(left, right));\n    } else {\n      overlap = intersectionArea(getCircles(area.sets));\n    }\n    // eslint-disable-next-line\n    var weight = area.hasOwnProperty('weight') ? area.weight : 1.0;\n    output += weight * (overlap - area.size) * (overlap - area.size);\n  }\n  return output;\n}\n// orientates a bunch of circles to point in orientation\nfunction orientateCircles(circles, orientation, orientationOrder) {\n  if (orientationOrder === null) {\n    circles.sort(function (a, b) {\n      return b.radius - a.radius;\n    });\n  } else {\n    circles.sort(orientationOrder);\n  }\n  var i;\n  // shift circles so largest circle is at (0, 0)\n  if (circles.length > 0) {\n    var largestX = circles[0].x,\n      largestY = circles[0].y;\n    for (i = 0; i < circles.length; ++i) {\n      circles[i].x -= largestX;\n      circles[i].y -= largestY;\n    }\n  }\n  if (circles.length == 2) {\n    // if the second circle is a subset of the first, arrange so that\n    // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120\n    var dist = distance(circles[0], circles[1]);\n    if (dist < Math.abs(circles[1].radius - circles[0].radius)) {\n      circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;\n      circles[1].y = circles[0].y;\n    }\n  }\n  // rotate circles so that second largest is at an angle of 'orientation'\n  // from largest\n  if (circles.length > 1) {\n    var rotation = Math.atan2(circles[1].x, circles[1].y) - orientation;\n    var x = void 0,\n      y = void 0;\n    var c = Math.cos(rotation),\n      s = Math.sin(rotation);\n    for (i = 0; i < circles.length; ++i) {\n      x = circles[i].x;\n      y = circles[i].y;\n      circles[i].x = c * x - s * y;\n      circles[i].y = s * x + c * y;\n    }\n  }\n  // mirror solution if third solution is above plane specified by\n  // first two circles\n  if (circles.length > 2) {\n    var angle = Math.atan2(circles[2].x, circles[2].y) - orientation;\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    if (angle > Math.PI) {\n      var slope = circles[1].y / (1e-10 + circles[1].x);\n      for (i = 0; i < circles.length; ++i) {\n        var d = (circles[i].x + slope * circles[i].y) / (1 + slope * slope);\n        circles[i].x = 2 * d - circles[i].x;\n        circles[i].y = 2 * d * slope - circles[i].y;\n      }\n    }\n  }\n}\nexport function disjointCluster(circles) {\n  // union-find clustering to get disjoint sets\n  circles.map(function (circle) {\n    circle.parent = circle;\n  });\n  // path compression step in union find\n  function find(circle) {\n    if (circle.parent !== circle) {\n      circle.parent = find(circle.parent);\n    }\n    return circle.parent;\n  }\n  function union(x, y) {\n    var xRoot = find(x),\n      yRoot = find(y);\n    xRoot.parent = yRoot;\n  }\n  // get the union of all overlapping sets\n  for (var i = 0; i < circles.length; ++i) {\n    for (var j = i + 1; j < circles.length; ++j) {\n      var maxDistance = circles[i].radius + circles[j].radius;\n      if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {\n        union(circles[j], circles[i]);\n      }\n    }\n  }\n  // find all the disjoint clusters and group them together\n  var disjointClusters = {};\n  var setid;\n  for (var i = 0; i < circles.length; ++i) {\n    setid = find(circles[i]).parent.setid;\n    if (!(setid in disjointClusters)) {\n      disjointClusters[setid] = [];\n    }\n    disjointClusters[setid].push(circles[i]);\n  }\n  // cleanup bookkeeping\n  circles.map(function (circle) {\n    delete circle.parent;\n  });\n  // return in more usable form\n  var ret = [];\n  for (setid in disjointClusters) {\n    // eslint-disable-next-line\n    if (disjointClusters.hasOwnProperty(setid)) {\n      ret.push(disjointClusters[setid]);\n    }\n  }\n  return ret;\n}\nfunction getBoundingBox(circles) {\n  var minMax = function (d) {\n    var hi = Math.max.apply(null, circles.map(function (c) {\n        return c[d] + c.radius;\n      })),\n      lo = Math.min.apply(null, circles.map(function (c) {\n        return c[d] - c.radius;\n      }));\n    return {\n      max: hi,\n      min: lo\n    };\n  };\n  return {\n    xRange: minMax('x'),\n    yRange: minMax('y')\n  };\n}\nexport function normalizeSolution(solution, orientation, orientationOrder) {\n  if (orientation === null) {\n    orientation = Math.PI / 2;\n  }\n  // work with a list instead of a dictionary, and take a copy so we\n  // don't mutate input\n  var circles = [],\n    i,\n    setid;\n  for (setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      var previous = solution[setid];\n      circles.push({\n        x: previous.x,\n        y: previous.y,\n        radius: previous.radius,\n        setid: setid\n      });\n    }\n  }\n  // get all the disjoint clusters\n  var clusters = disjointCluster(circles);\n  // orientate all disjoint sets, get sizes\n  for (i = 0; i < clusters.length; ++i) {\n    orientateCircles(clusters[i], orientation, orientationOrder);\n    var bounds = getBoundingBox(clusters[i]);\n    clusters[i].size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);\n    clusters[i].bounds = bounds;\n  }\n  clusters.sort(function (a, b) {\n    return b.size - a.size;\n  });\n  // orientate the largest at 0,0, and get the bounds\n  circles = clusters[0];\n  // @ts-ignore fixme 从逻辑上看似乎是不对的，后续看看\n  var returnBounds = circles.bounds;\n  var spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;\n  function addCluster(cluster, right, bottom) {\n    if (!cluster) return;\n    var bounds = cluster.bounds;\n    var xOffset, yOffset, centreing;\n    if (right) {\n      xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;\n    } else {\n      xOffset = returnBounds.xRange.max - bounds.xRange.max;\n      centreing = (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;\n      if (centreing < 0) xOffset += centreing;\n    }\n    if (bottom) {\n      yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;\n    } else {\n      yOffset = returnBounds.yRange.max - bounds.yRange.max;\n      centreing = (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;\n      if (centreing < 0) yOffset += centreing;\n    }\n    for (var j = 0; j < cluster.length; ++j) {\n      cluster[j].x += xOffset;\n      cluster[j].y += yOffset;\n      circles.push(cluster[j]);\n    }\n  }\n  var index = 1;\n  while (index < clusters.length) {\n    addCluster(clusters[index], true, false);\n    addCluster(clusters[index + 1], false, true);\n    addCluster(clusters[index + 2], true, true);\n    index += 3;\n    // have one cluster (in top left). lay out next three relative\n    // to it in a grid\n    returnBounds = getBoundingBox(circles);\n  }\n  // convert back to solution form\n  var ret = {};\n  for (i = 0; i < circles.length; ++i) {\n    ret[circles[i].setid] = circles[i];\n  }\n  return ret;\n}\n/** Scales a solution from venn.venn or venn.greedyLayout such that it fits in\na rectangle of width/height - with padding around the borders. also\ncenters the diagram in the available space at the same time */\nexport function scaleSolution(solution, width, height, padding) {\n  var circles = [],\n    setids = [];\n  for (var setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      setids.push(setid);\n      circles.push(solution[setid]);\n    }\n  }\n  width -= 2 * padding;\n  height -= 2 * padding;\n  var bounds = getBoundingBox(circles),\n    xRange = bounds.xRange,\n    yRange = bounds.yRange;\n  if (xRange.max == xRange.min || yRange.max == yRange.min) {\n    console.log('not scaling solution: zero size detected');\n    return solution;\n  }\n  var xScaling = width / (xRange.max - xRange.min),\n    yScaling = height / (yRange.max - yRange.min),\n    scaling = Math.min(yScaling, xScaling),\n    // while we're at it, center the diagram too\n    xOffset = (width - (xRange.max - xRange.min) * scaling) / 2,\n    yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;\n  var scaled = {};\n  for (var i = 0; i < circles.length; ++i) {\n    var circle = circles[i];\n    scaled[setids[i]] = {\n      radius: scaling * circle.radius,\n      x: padding + xOffset + (circle.x - xRange.min) * scaling,\n      y: padding + yOffset + (circle.y - yRange.min) * scaling\n    };\n  }\n  return scaled;\n}","map":{"version":3,"names":["bisect","conjugateGradient","nelderMead","norm2","scale","zeros","zerosM","circleCircleIntersection","circleOverlap","distance","intersectionArea","venn","areas","parameters","maxIterations","initialLayout","bestInitialLayout","loss","lossFunction","addMissingAreas","circles","initial","setids","setid","hasOwnProperty","push","x","y","solution","values","current","i","length","setid_1","radius","positions","SMALL","distanceFromIntersectArea","r1","r2","overlap","Math","min","PI","abs","slice","ids","pairs","j","a","b","area","sets","sort","size","getDistanceMatrices","distances","constraints","filter","map","left","right","sqrt","c","constrainedMDSGradient","fxprime","xi","yi","xj","yj","dij","constraint","squaredDistance","distance_1","delta","params","greedyLayout","constrained","constrainedMDSLayout","constrainedLoss","greedyLoss","restarts","matrices","norm","row","value","obj","best","random","fx","set","history","setOverlaps","rowid","Object","keys","weight","mostOverlapped","sortOrder","positioned","isPositioned","element","positionSet","point","index","setIndex","points","p1","d1","k","p2","d2","extraPoints","l","bestLoss","bestPoint","localLoss","overlaps","output","getCircles","indices","orientateCircles","orientation","orientationOrder","largestX","largestY","dist","rotation","atan2","cos","s","sin","angle","slope","d","disjointCluster","circle","parent","find","union","xRoot","yRoot","maxDistance","disjointClusters","ret","getBoundingBox","minMax","hi","max","apply","lo","xRange","yRange","normalizeSolution","previous","clusters","bounds","returnBounds","spacing","addCluster","cluster","bottom","xOffset","yOffset","centreing","scaleSolution","width","height","padding","console","log","xScaling","yScaling","scaling","scaled"],"sources":["../../../../src/plots/venn/layout/layout.ts"],"sourcesContent":["import { bisect, conjugateGradient, nelderMead, norm2, scale, zeros, zerosM } from 'fmin';\nimport { circleCircleIntersection, circleOverlap, distance, intersectionArea } from './circleintersection';\n\n/** given a list of set objects, and their corresponding overlaps.\nupdates the (x, y, radius) attribute on each set such that their positions\nroughly correspond to the desired overlaps */\nexport function venn(areas, parameters?: any) {\n  parameters = parameters || {};\n  parameters.maxIterations = parameters.maxIterations || 500;\n  const initialLayout = parameters.initialLayout || bestInitialLayout;\n  const loss = parameters.lossFunction || lossFunction;\n\n  // add in missing pairwise areas as having 0 size\n  areas = addMissingAreas(areas);\n\n  // initial layout is done greedily\n  const circles = initialLayout(areas, parameters);\n\n  // transform x/y coordinates to a vector to optimize\n  const initial = [],\n    setids = [];\n  let setid;\n  for (setid in circles) {\n    // eslint-disable-next-line\n    if (circles.hasOwnProperty(setid)) {\n      initial.push(circles[setid].x);\n      initial.push(circles[setid].y);\n      setids.push(setid);\n    }\n  }\n\n  // optimize initial layout from our loss function\n  const solution = nelderMead(\n    function (values) {\n      const current = {};\n      for (let i = 0; i < setids.length; ++i) {\n        const setid = setids[i];\n        current[setid] = {\n          x: values[2 * i],\n          y: values[2 * i + 1],\n          radius: circles[setid].radius,\n          // size : circles[setid].size\n        };\n      }\n      return loss(current, areas);\n    },\n    initial,\n    parameters\n  );\n\n  // transform solution vector back to x/y points\n  const positions = solution.x;\n  for (let i = 0; i < setids.length; ++i) {\n    setid = setids[i];\n    circles[setid].x = positions[2 * i];\n    circles[setid].y = positions[2 * i + 1];\n  }\n\n  return circles;\n}\n\nconst SMALL = 1e-10;\n\n/** Returns the distance necessary for two circles of radius r1 + r2 to\nhave the overlap area 'overlap' */\nexport function distanceFromIntersectArea(r1, r2, overlap) {\n  // handle complete overlapped circles\n  if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL) {\n    return Math.abs(r1 - r2);\n  }\n\n  return bisect(\n    function (distance) {\n      return circleOverlap(r1, r2, distance) - overlap;\n    },\n    0,\n    r1 + r2\n  );\n}\n\n/** Missing pair-wise intersection area data can cause problems:\n treating as an unknown means that sets will be laid out overlapping,\n which isn't what people expect. To reflect that we want disjoint sets\n here, set the overlap to 0 for all missing pairwise set intersections */\nfunction addMissingAreas(areas) {\n  areas = areas.slice();\n\n  // two circle intersections that aren't defined\n  const ids: number[] = [],\n    pairs: any = {};\n  let i, j, a, b;\n  for (i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length == 1) {\n      ids.push(area.sets[0]);\n    } else if (area.sets.length == 2) {\n      a = area.sets[0];\n      b = area.sets[1];\n      // @ts-ignore\n      pairs[[a, b]] = true;\n      // @ts-ignore\n      pairs[[b, a]] = true;\n    }\n  }\n  ids.sort((a, b) => {\n    return a > b ? 1 : -1;\n  });\n\n  for (i = 0; i < ids.length; ++i) {\n    a = ids[i];\n    for (j = i + 1; j < ids.length; ++j) {\n      b = ids[j];\n      // @ts-ignore\n      if (!([a, b] in pairs)) {\n        areas.push({ sets: [a, b], size: 0 });\n      }\n    }\n  }\n  return areas;\n}\n\n/// Returns two matrices, one of the euclidean distances between the sets\n/// and the other indicating if there are subset or disjoint set relationships\nexport function getDistanceMatrices(areas, sets, setids) {\n  // initialize an empty distance matrix between all the points\n  const distances = zerosM(sets.length, sets.length),\n    constraints = zerosM(sets.length, sets.length);\n\n  // compute required distances between all the sets such that\n  // the areas match\n  areas\n    .filter(function (x) {\n      return x.sets.length == 2;\n    })\n    .map(function (current) {\n      const left = setids[current.sets[0]],\n        right = setids[current.sets[1]],\n        r1 = Math.sqrt(sets[left].size / Math.PI),\n        r2 = Math.sqrt(sets[right].size / Math.PI),\n        distance = distanceFromIntersectArea(r1, r2, current.size);\n\n      distances[left][right] = distances[right][left] = distance;\n\n      // also update constraints to indicate if its a subset or disjoint\n      // relationship\n      let c = 0;\n      if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {\n        c = 1;\n      } else if (current.size <= 1e-10) {\n        c = -1;\n      }\n      constraints[left][right] = constraints[right][left] = c;\n    });\n\n  return { distances: distances, constraints: constraints };\n}\n\n/// computes the gradient and loss simulatenously for our constrained MDS optimizer\nfunction constrainedMDSGradient(x, fxprime, distances, constraints) {\n  let loss = 0,\n    i;\n  for (i = 0; i < fxprime.length; ++i) {\n    fxprime[i] = 0;\n  }\n\n  for (i = 0; i < distances.length; ++i) {\n    const xi = x[2 * i],\n      yi = x[2 * i + 1];\n    for (let j = i + 1; j < distances.length; ++j) {\n      const xj = x[2 * j],\n        yj = x[2 * j + 1],\n        dij = distances[i][j],\n        constraint = constraints[i][j];\n\n      const squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi),\n        distance = Math.sqrt(squaredDistance),\n        delta = squaredDistance - dij * dij;\n\n      if ((constraint > 0 && distance <= dij) || (constraint < 0 && distance >= dij)) {\n        continue;\n      }\n\n      loss += 2 * delta * delta;\n\n      fxprime[2 * i] += 4 * delta * (xi - xj);\n      fxprime[2 * i + 1] += 4 * delta * (yi - yj);\n\n      fxprime[2 * j] += 4 * delta * (xj - xi);\n      fxprime[2 * j + 1] += 4 * delta * (yj - yi);\n    }\n  }\n  return loss;\n}\n\n/// takes the best working variant of either constrained MDS or greedy\nexport function bestInitialLayout(areas, params) {\n  let initial = greedyLayout(areas, params);\n  const loss = params.lossFunction || lossFunction;\n\n  // greedylayout is sufficient for all 2/3 circle cases. try out\n  // constrained MDS for higher order problems, take its output\n  // if it outperforms. (greedy is aesthetically better on 2/3 circles\n  // since it axis aligns)\n  if (areas.length >= 8) {\n    const constrained = constrainedMDSLayout(areas, params),\n      constrainedLoss = loss(constrained, areas),\n      greedyLoss = loss(initial, areas);\n\n    if (constrainedLoss + 1e-8 < greedyLoss) {\n      initial = constrained;\n    }\n  }\n  return initial;\n}\n\n/// use the constrained MDS variant to generate an initial layout\nexport function constrainedMDSLayout(areas, params) {\n  params = params || {};\n  const restarts = params.restarts || 10;\n\n  // bidirectionally map sets to a rowid  (so we can create a matrix)\n  const sets = [],\n    setids = {};\n  let i;\n  for (i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length == 1) {\n      setids[area.sets[0]] = sets.length;\n      sets.push(area);\n    }\n  }\n\n  const matrices = getDistanceMatrices(areas, sets, setids);\n  let distances = matrices.distances;\n  const constraints = matrices.constraints;\n\n  // keep distances bounded, things get messed up otherwise.\n  // TODO: proper preconditioner?\n  const norm = norm2(distances.map(norm2)) / distances.length;\n  distances = distances.map(function (row) {\n    return row.map(function (value) {\n      return value / norm;\n    });\n  });\n\n  const obj = function (x, fxprime) {\n    return constrainedMDSGradient(x, fxprime, distances, constraints);\n  };\n\n  let best, current;\n  for (i = 0; i < restarts; ++i) {\n    const initial = zeros(distances.length * 2).map(Math.random);\n\n    current = conjugateGradient(obj, initial, params);\n    if (!best || current.fx < best.fx) {\n      best = current;\n    }\n  }\n  const positions = best.x;\n\n  // translate rows back to (x,y,radius) coordinates\n  const circles = {};\n  for (i = 0; i < sets.length; ++i) {\n    const set = sets[i];\n    circles[set.sets[0]] = {\n      x: positions[2 * i] * norm,\n      y: positions[2 * i + 1] * norm,\n      radius: Math.sqrt(set.size / Math.PI),\n    };\n  }\n\n  if (params.history) {\n    for (i = 0; i < params.history.length; ++i) {\n      scale(params.history[i].x, norm);\n    }\n  }\n  return circles;\n}\n\n/** Lays out a Venn diagram greedily, going from most overlapped sets to\nleast overlapped, attempting to position each new set such that the\noverlapping areas to already positioned sets are basically right */\nexport function greedyLayout(areas, params) {\n  const loss = params && params.lossFunction ? params.lossFunction : lossFunction;\n  // define a circle for each set\n  const circles = {},\n    setOverlaps = {};\n  let set;\n  for (let i = 0; i < areas.length; ++i) {\n    const area = areas[i];\n    if (area.sets.length == 1) {\n      set = area.sets[0];\n      circles[set] = {\n        x: 1e10,\n        y: 1e10,\n        // rowid: circles.length, // fix to ->\n        rowid: Object.keys(circles).length,\n        size: area.size,\n        radius: Math.sqrt(area.size / Math.PI),\n      };\n      setOverlaps[set] = [];\n    }\n  }\n  areas = areas.filter(function (a) {\n    return a.sets.length == 2;\n  });\n\n  // map each set to a list of all the other sets that overlap it\n  for (let i = 0; i < areas.length; ++i) {\n    const current = areas[i];\n    // eslint-disable-next-line\n    let weight = current.hasOwnProperty('weight') ? current.weight : 1.0;\n    const left = current.sets[0],\n      right = current.sets[1];\n\n    // completely overlapped circles shouldn't be positioned early here\n    if (current.size + SMALL >= Math.min(circles[left].size, circles[right].size)) {\n      weight = 0;\n    }\n\n    setOverlaps[left].push({ set: right, size: current.size, weight: weight });\n    setOverlaps[right].push({ set: left, size: current.size, weight: weight });\n  }\n\n  // get list of most overlapped sets\n  const mostOverlapped = [];\n  for (set in setOverlaps) {\n    // eslint-disable-next-line\n    if (setOverlaps.hasOwnProperty(set)) {\n      let size = 0;\n      for (let i = 0; i < setOverlaps[set].length; ++i) {\n        size += setOverlaps[set][i].size * setOverlaps[set][i].weight;\n      }\n\n      mostOverlapped.push({ set: set, size: size });\n    }\n  }\n\n  // sort by size desc\n  function sortOrder(a, b) {\n    return b.size - a.size;\n  }\n  mostOverlapped.sort(sortOrder);\n\n  // keep track of what sets have been laid out\n  const positioned = {};\n  function isPositioned(element) {\n    return element.set in positioned;\n  }\n\n  // adds a point to the output\n  function positionSet(point, index) {\n    circles[index].x = point.x;\n    circles[index].y = point.y;\n    positioned[index] = true;\n  }\n\n  // add most overlapped set at (0,0)\n  positionSet({ x: 0, y: 0 }, mostOverlapped[0].set);\n\n  // get distances between all points. TODO, necessary?\n  // answer: probably not\n  // var distances = venn.getDistanceMatrices(circles, areas).distances;\n  for (let i = 1; i < mostOverlapped.length; ++i) {\n    const setIndex = mostOverlapped[i].set,\n      overlap = setOverlaps[setIndex].filter(isPositioned);\n    set = circles[setIndex];\n    overlap.sort(sortOrder);\n\n    if (overlap.length === 0) {\n      // this shouldn't happen anymore with addMissingAreas\n      throw 'ERROR: missing pairwise overlap information';\n    }\n\n    const points = [];\n    for (let j = 0; j < overlap.length; ++j) {\n      // get appropriate distance from most overlapped already added set\n      const p1 = circles[overlap[j].set],\n        d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size);\n\n      // sample positions at 90 degrees for maximum aesthetics\n      points.push({ x: p1.x + d1, y: p1.y });\n      points.push({ x: p1.x - d1, y: p1.y });\n      points.push({ y: p1.y + d1, x: p1.x });\n      points.push({ y: p1.y - d1, x: p1.x });\n\n      // if we have at least 2 overlaps, then figure out where the\n      // set should be positioned analytically and try those too\n      for (let k = j + 1; k < overlap.length; ++k) {\n        const p2 = circles[overlap[k].set],\n          d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);\n\n        const extraPoints = circleCircleIntersection(\n          { x: p1.x, y: p1.y, radius: d1 },\n          { x: p2.x, y: p2.y, radius: d2 }\n        );\n\n        for (let l = 0; l < extraPoints.length; ++l) {\n          points.push(extraPoints[l]);\n        }\n      }\n    }\n\n    // we have some candidate positions for the set, examine loss\n    // at each position to figure out where to put it at\n    let bestLoss = 1e50,\n      bestPoint = points[0];\n    for (let j = 0; j < points.length; ++j) {\n      circles[setIndex].x = points[j].x;\n      circles[setIndex].y = points[j].y;\n      const localLoss = loss(circles, areas);\n      if (localLoss < bestLoss) {\n        bestLoss = localLoss;\n        bestPoint = points[j];\n      }\n    }\n\n    positionSet(bestPoint, setIndex);\n  }\n\n  return circles;\n}\n\n/** Given a bunch of sets, and the desired overlaps between these sets - computes\nthe distance from the actual overlaps to the desired overlaps. Note that\nthis method ignores overlaps of more than 2 circles */\nexport function lossFunction(sets, overlaps) {\n  let output = 0;\n\n  function getCircles(indices) {\n    return indices.map(function (i) {\n      return sets[i];\n    });\n  }\n\n  for (let i = 0; i < overlaps.length; ++i) {\n    const area = overlaps[i];\n    let overlap;\n    if (area.sets.length == 1) {\n      continue;\n    } else if (area.sets.length == 2) {\n      const left = sets[area.sets[0]],\n        right = sets[area.sets[1]];\n      overlap = circleOverlap(left.radius, right.radius, distance(left, right));\n    } else {\n      overlap = intersectionArea(getCircles(area.sets));\n    }\n\n    // eslint-disable-next-line\n    const weight = area.hasOwnProperty('weight') ? area.weight : 1.0;\n    output += weight * (overlap - area.size) * (overlap - area.size);\n  }\n\n  return output;\n}\n\n// orientates a bunch of circles to point in orientation\nfunction orientateCircles(circles, orientation, orientationOrder) {\n  if (orientationOrder === null) {\n    circles.sort(function (a, b) {\n      return b.radius - a.radius;\n    });\n  } else {\n    circles.sort(orientationOrder);\n  }\n\n  let i;\n  // shift circles so largest circle is at (0, 0)\n  if (circles.length > 0) {\n    const largestX = circles[0].x,\n      largestY = circles[0].y;\n\n    for (i = 0; i < circles.length; ++i) {\n      circles[i].x -= largestX;\n      circles[i].y -= largestY;\n    }\n  }\n\n  if (circles.length == 2) {\n    // if the second circle is a subset of the first, arrange so that\n    // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120\n    const dist = distance(circles[0], circles[1]);\n    if (dist < Math.abs(circles[1].radius - circles[0].radius)) {\n      circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;\n      circles[1].y = circles[0].y;\n    }\n  }\n\n  // rotate circles so that second largest is at an angle of 'orientation'\n  // from largest\n  if (circles.length > 1) {\n    const rotation = Math.atan2(circles[1].x, circles[1].y) - orientation;\n    let x, y;\n    const c = Math.cos(rotation),\n      s = Math.sin(rotation);\n    for (i = 0; i < circles.length; ++i) {\n      x = circles[i].x;\n      y = circles[i].y;\n      circles[i].x = c * x - s * y;\n      circles[i].y = s * x + c * y;\n    }\n  }\n\n  // mirror solution if third solution is above plane specified by\n  // first two circles\n  if (circles.length > 2) {\n    let angle = Math.atan2(circles[2].x, circles[2].y) - orientation;\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    if (angle > Math.PI) {\n      const slope = circles[1].y / (1e-10 + circles[1].x);\n      for (i = 0; i < circles.length; ++i) {\n        const d = (circles[i].x + slope * circles[i].y) / (1 + slope * slope);\n        circles[i].x = 2 * d - circles[i].x;\n        circles[i].y = 2 * d * slope - circles[i].y;\n      }\n    }\n  }\n}\n\nexport function disjointCluster(circles) {\n  // union-find clustering to get disjoint sets\n  circles.map(function (circle) {\n    circle.parent = circle;\n  });\n\n  // path compression step in union find\n  function find(circle) {\n    if (circle.parent !== circle) {\n      circle.parent = find(circle.parent);\n    }\n    return circle.parent;\n  }\n\n  function union(x, y) {\n    const xRoot = find(x),\n      yRoot = find(y);\n    xRoot.parent = yRoot;\n  }\n\n  // get the union of all overlapping sets\n  for (let i = 0; i < circles.length; ++i) {\n    for (let j = i + 1; j < circles.length; ++j) {\n      const maxDistance = circles[i].radius + circles[j].radius;\n      if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {\n        union(circles[j], circles[i]);\n      }\n    }\n  }\n\n  // find all the disjoint clusters and group them together\n  const disjointClusters = {};\n  let setid;\n  for (let i = 0; i < circles.length; ++i) {\n    setid = find(circles[i]).parent.setid;\n    if (!(setid in disjointClusters)) {\n      disjointClusters[setid] = [];\n    }\n    disjointClusters[setid].push(circles[i]);\n  }\n\n  // cleanup bookkeeping\n  circles.map(function (circle) {\n    delete circle.parent;\n  });\n\n  // return in more usable form\n  const ret = [];\n  for (setid in disjointClusters) {\n    // eslint-disable-next-line\n    if (disjointClusters.hasOwnProperty(setid)) {\n      ret.push(disjointClusters[setid]);\n    }\n  }\n  return ret;\n}\n\nfunction getBoundingBox(circles) {\n  const minMax = function (d) {\n    const hi = Math.max.apply(\n        null,\n        circles.map(function (c) {\n          return c[d] + c.radius;\n        })\n      ),\n      lo = Math.min.apply(\n        null,\n        circles.map(function (c) {\n          return c[d] - c.radius;\n        })\n      );\n    return { max: hi, min: lo };\n  };\n\n  return { xRange: minMax('x'), yRange: minMax('y') };\n}\n\nexport function normalizeSolution(solution, orientation, orientationOrder) {\n  if (orientation === null) {\n    orientation = Math.PI / 2;\n  }\n\n  // work with a list instead of a dictionary, and take a copy so we\n  // don't mutate input\n  let circles = [],\n    i,\n    setid;\n  for (setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      const previous = solution[setid];\n      circles.push({ x: previous.x, y: previous.y, radius: previous.radius, setid: setid });\n    }\n  }\n\n  // get all the disjoint clusters\n  const clusters = disjointCluster(circles);\n\n  // orientate all disjoint sets, get sizes\n  for (i = 0; i < clusters.length; ++i) {\n    orientateCircles(clusters[i], orientation, orientationOrder);\n    const bounds = getBoundingBox(clusters[i]);\n    clusters[i].size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);\n    clusters[i].bounds = bounds;\n  }\n  clusters.sort(function (a, b) {\n    return b.size - a.size;\n  });\n\n  // orientate the largest at 0,0, and get the bounds\n  circles = clusters[0];\n  // @ts-ignore fixme 从逻辑上看似乎是不对的，后续看看\n  let returnBounds = circles.bounds;\n\n  const spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;\n\n  function addCluster(cluster, right, bottom) {\n    if (!cluster) return;\n\n    const bounds = cluster.bounds;\n    let xOffset, yOffset, centreing;\n\n    if (right) {\n      xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;\n    } else {\n      xOffset = returnBounds.xRange.max - bounds.xRange.max;\n      centreing = (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;\n      if (centreing < 0) xOffset += centreing;\n    }\n\n    if (bottom) {\n      yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;\n    } else {\n      yOffset = returnBounds.yRange.max - bounds.yRange.max;\n      centreing = (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;\n      if (centreing < 0) yOffset += centreing;\n    }\n\n    for (let j = 0; j < cluster.length; ++j) {\n      cluster[j].x += xOffset;\n      cluster[j].y += yOffset;\n      circles.push(cluster[j]);\n    }\n  }\n\n  let index = 1;\n  while (index < clusters.length) {\n    addCluster(clusters[index], true, false);\n    addCluster(clusters[index + 1], false, true);\n    addCluster(clusters[index + 2], true, true);\n    index += 3;\n\n    // have one cluster (in top left). lay out next three relative\n    // to it in a grid\n    returnBounds = getBoundingBox(circles);\n  }\n\n  // convert back to solution form\n  const ret = {};\n  for (i = 0; i < circles.length; ++i) {\n    ret[circles[i].setid] = circles[i];\n  }\n  return ret;\n}\n\n/** Scales a solution from venn.venn or venn.greedyLayout such that it fits in\na rectangle of width/height - with padding around the borders. also\ncenters the diagram in the available space at the same time */\nexport function scaleSolution(solution, width, height, padding) {\n  const circles = [],\n    setids = [];\n  for (const setid in solution) {\n    // eslint-disable-next-line\n    if (solution.hasOwnProperty(setid)) {\n      setids.push(setid);\n      circles.push(solution[setid]);\n    }\n  }\n\n  width -= 2 * padding;\n  height -= 2 * padding;\n\n  const bounds = getBoundingBox(circles),\n    xRange = bounds.xRange,\n    yRange = bounds.yRange;\n\n  if (xRange.max == xRange.min || yRange.max == yRange.min) {\n    console.log('not scaling solution: zero size detected');\n    return solution;\n  }\n\n  const xScaling = width / (xRange.max - xRange.min),\n    yScaling = height / (yRange.max - yRange.min),\n    scaling = Math.min(yScaling, xScaling),\n    // while we're at it, center the diagram too\n    xOffset = (width - (xRange.max - xRange.min) * scaling) / 2,\n    yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;\n\n  const scaled = {};\n  for (let i = 0; i < circles.length; ++i) {\n    const circle = circles[i];\n    scaled[setids[i]] = {\n      radius: scaling * circle.radius,\n      x: padding + xOffset + (circle.x - xRange.min) * scaling,\n      y: padding + yOffset + (circle.y - yRange.min) * scaling,\n    };\n  }\n\n  return scaled;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}