{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\nvar Dodge = /** @class */function (_super) {\n  __extends(Dodge, _super);\n  function Dodge(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.cacheMap = {};\n    _this.adjustDataArray = [];\n    _this.mergeData = [];\n    var _a = cfg.marginRatio,\n      marginRatio = _a === void 0 ? MARGIN_RATIO : _a,\n      _b = cfg.dodgeRatio,\n      dodgeRatio = _b === void 0 ? DODGE_RATIO : _b,\n      dodgeBy = cfg.dodgeBy,\n      intervalPadding = cfg.intervalPadding,\n      dodgePadding = cfg.dodgePadding,\n      xDimensionLength = cfg.xDimensionLength,\n      groupNum = cfg.groupNum,\n      defaultSize = cfg.defaultSize,\n      maxColumnWidth = cfg.maxColumnWidth,\n      minColumnWidth = cfg.minColumnWidth,\n      columnWidthRatio = cfg.columnWidthRatio,\n      customOffset = cfg.customOffset;\n    _this.marginRatio = marginRatio;\n    _this.dodgeRatio = dodgeRatio;\n    _this.dodgeBy = dodgeBy;\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.xDimensionLegenth = xDimensionLength;\n    _this.groupNum = groupNum;\n    _this.defaultSize = defaultSize;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.customOffset = customOffset;\n    return _this;\n  }\n  Dodge.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray);\n    // 将数据数组展开一层\n    var mergeData = _.flatten(groupedDataArray);\n    var dodgeBy = this.dodgeBy;\n    // 如果指定了分组 dim 的字段\n    var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n    this.cacheMap = {};\n    this.adjustDataArray = adjustDataArray;\n    this.mergeData = mergeData;\n    this.adjustData(adjustDataArray, mergeData);\n    this.adjustDataArray = [];\n    this.mergeData = [];\n    return groupedDataArray;\n  };\n  Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n    var _this = this;\n    var customOffset = this.customOffset;\n    var map = this.getDistribution(dim);\n    var groupData = this.groupData(data, dim); // 根据值分组\n    _.each(groupData, function (group, key) {\n      var range;\n      // xField 中只有一个值，不需要做 dodge\n      if (values.length === 1) {\n        range = {\n          pre: values[0] - 1,\n          next: values[0] + 1\n        };\n      } else {\n        // 如果有多个，则需要获取调整的范围\n        range = _this.getAdjustRange(dim, parseFloat(key), values);\n      }\n      _.each(group, function (d) {\n        var value = d[dim];\n        var valueArr = map[value];\n        var valIndex = valueArr.indexOf(frameIndex);\n        if (!_.isNil(customOffset)) {\n          var pre = range.pre,\n            next = range.next;\n          d[dim] = _.isFunction(customOffset) ? customOffset(d, range) : (pre + next) / 2 + customOffset;\n        } else {\n          d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n        }\n      });\n    });\n    return [];\n  };\n  Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n    var _a = this,\n      dodgeRatio = _a.dodgeRatio,\n      marginRatio = _a.marginRatio,\n      intervalPadding = _a.intervalPadding,\n      dodgePadding = _a.dodgePadding;\n    var pre = range.pre,\n      next = range.next;\n    var tickLength = next - pre;\n    var position;\n    // 分多种输入情况\n    if (!_.isNil(intervalPadding) && _.isNil(dodgePadding) && intervalPadding >= 0) {\n      // 仅配置intervalPadding\n      var offset = this.getIntervalOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(dodgePadding) && _.isNil(intervalPadding) && dodgePadding >= 0) {\n      // 仅配置dodgePadding\n      var offset = this.getDodgeOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(intervalPadding) && !_.isNil(dodgePadding) && intervalPadding >= 0 && dodgePadding >= 0) {\n      // 同时配置intervalPadding和dodgePadding\n      var offset = this.getIntervalAndDodgeOffset(len, idx);\n      position = pre + offset;\n    } else {\n      // 默认情况\n      var width = tickLength * dodgeRatio / len;\n      var margin = marginRatio * width;\n      var offset = 1 / 2 * (tickLength - len * width - (len - 1) * margin) + ((idx + 1) * width + idx * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n      position = (pre + next) / 2 + offset;\n    }\n    return position;\n  };\n  Dodge.prototype.getIntervalOnlyOffset = function (len, idx) {\n    var _a = this,\n      defaultSize = _a.defaultSize,\n      intervalPadding = _a.intervalPadding,\n      xDimensionLegenth = _a.xDimensionLegenth,\n      groupNum = _a.groupNum,\n      dodgeRatio = _a.dodgeRatio,\n      maxColumnWidth = _a.maxColumnWidth,\n      minColumnWidth = _a.minColumnWidth,\n      columnWidthRatio = _a.columnWidthRatio;\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = (1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum * dodgeRatio / (len - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n    geomWidth = !_.isNil(columnWidthRatio) ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth;\n    // 调整组内间隔\n    normalizedDodgePadding = ((1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum - len * geomWidth) / (len - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n  Dodge.prototype.getDodgeOnlyOffset = function (len, idx) {\n    var _a = this,\n      defaultSize = _a.defaultSize,\n      dodgePadding = _a.dodgePadding,\n      xDimensionLegenth = _a.xDimensionLegenth,\n      groupNum = _a.groupNum,\n      marginRatio = _a.marginRatio,\n      maxColumnWidth = _a.maxColumnWidth,\n      minColumnWidth = _a.minColumnWidth,\n      columnWidthRatio = _a.columnWidthRatio;\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var normalizedIntervalPadding = 1 * marginRatio / (groupNum - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n    geomWidth = columnWidthRatio ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth;\n    // 调整组间距\n    normalizedIntervalPadding = (1 - (geomWidth * len + normalizedDodgePadding * (len - 1)) * groupNum) / (groupNum - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n  Dodge.prototype.getIntervalAndDodgeOffset = function (len, idx) {\n    var _a = this,\n      intervalPadding = _a.intervalPadding,\n      dodgePadding = _a.dodgePadding,\n      xDimensionLegenth = _a.xDimensionLegenth,\n      groupNum = _a.groupNum;\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n  Dodge.prototype.getDistribution = function (dim) {\n    var groupedDataArray = this.adjustDataArray;\n    var cacheMap = this.cacheMap;\n    var map = cacheMap[dim];\n    if (!map) {\n      map = {};\n      _.each(groupedDataArray, function (data, index) {\n        var values = _.valuesOfKey(data, dim);\n        if (!values.length) {\n          values.push(0);\n        }\n        _.each(values, function (val) {\n          if (!map[val]) {\n            map[val] = [];\n          }\n          map[val].push(index);\n        });\n      });\n      cacheMap[dim] = map;\n    }\n    return map;\n  };\n  return Dodge;\n}(Adjust);\nexport default Dodge;","map":{"version":3,"names":["_","DODGE_RATIO","MARGIN_RATIO","Adjust","Dodge","_super","__extends","cfg","_this","call","cacheMap","adjustDataArray","mergeData","_a","marginRatio","_b","dodgeRatio","dodgeBy","intervalPadding","dodgePadding","xDimensionLength","groupNum","defaultSize","maxColumnWidth","minColumnWidth","columnWidthRatio","customOffset","xDimensionLegenth","prototype","process","groupDataArray","groupedDataArray","clone","flatten","group","adjustData","adjustDim","dim","values","data","frameIndex","map","getDistribution","groupData","each","key","range","length","pre","next","getAdjustRange","parseFloat","d","value","valueArr","valIndex","indexOf","isNil","isFunction","getDodgeOffset","idx","len","tickLength","position","offset","getIntervalOnlyOffset","getDodgeOnlyOffset","getIntervalAndDodgeOffset","width","margin","normalizedIntervalPadding","normalizedDodgePadding","geomWidth","normalizedMaxWidht","Math","min","normalizedMinWidht","max","index","valuesOfKey","push","val"],"sources":["../../src/adjusts/dodge.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}