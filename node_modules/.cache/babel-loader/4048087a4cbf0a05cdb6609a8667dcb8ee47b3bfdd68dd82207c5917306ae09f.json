{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport earcut from 'earcut';\nimport { calculateCentroid } from \"../geo\";\nimport ExtrudePolyline from \"./extrude_polyline\";\nexport function LineTriangulation(feature) {\n  var coordinates = feature.coordinates,\n    originCoordinates = feature.originCoordinates,\n    version = feature.version;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  var line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel'\n  });\n  if (version === 'GAODE2.x') {\n    // 处理高德2.0几何体构建\n    var path1 = coordinates; // 计算位置\n    if (!Array.isArray(path1[0][0])) {\n      path1 = [coordinates];\n    }\n    var path2 = originCoordinates; // 计算法线\n    if (!Array.isArray(path2[0][0])) {\n      path2 = [originCoordinates];\n    }\n    for (var i = 0; i < path1.length; i++) {\n      // 高德2.0在计算线时，需要使用经纬度计算发现，使用 customCoords.lnglatToCoords 计算的数据来计算顶点的位置\n      var item1 = path1[i];\n      var item2 = path2[i];\n      line.extrude_gaode2(item1, item2);\n    }\n  } else {\n    // 处理非高德2.0的几何体构建\n    var path = coordinates;\n    if (path[0] && !Array.isArray(path[0][0])) {\n      path = [coordinates];\n    }\n    path.forEach(function (item) {\n      line.extrude(item);\n    });\n  }\n  var linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions,\n    // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    indexes: linebuffer.indexes,\n    size: 6\n  };\n}\nexport function PointFillTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [].concat(_toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates)),\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length\n  };\n}\nexport function polygonFillTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var flattengeo = earcut.flatten(coordinates);\n  var vertices = flattengeo.vertices,\n    dimensions = flattengeo.dimensions,\n    holes = flattengeo.holes;\n  // if (version !== 'GAODE2.x') {\n  //   for (let i = 0; i < vertices.length; i += dimensions) {\n  //     const mer = project_mercator(vertices[i + 0], vertices[i + 1]);\n  //     vertices[i] = mer[0];\n  //     vertices[i + 1] = mer[1];\n  //   }\n  // }\n  // https://github.com/mapbox/earcut/issues/159\n  var triangles = earcut(vertices, holes, dimensions);\n  // if (version !== 'GAODE2.x') {\n  //   for (let i = 0; i < vertices.length; i += dimensions) {\n  //     const ll = mercator_lnglat(vertices[i + 0], vertices[i + 1]);\n  //     vertices[i] = ll[0];\n  //     vertices[i + 1] = ll[1];\n  //   }\n  // }\n\n  return {\n    indices: triangles,\n    vertices: vertices,\n    size: dimensions\n  };\n}","map":{"version":3,"names":["_toConsumableArray","earcut","calculateCentroid","ExtrudePolyline","LineTriangulation","feature","coordinates","originCoordinates","version","line","dash","join","path1","Array","isArray","path2","i","length","item1","item2","extrude_gaode2","path","forEach","item","extrude","linebuffer","complex","vertices","positions","indices","normals","indexes","size","PointFillTriangulation","concat","polygonFillTriangulation","flattengeo","flatten","dimensions","holes","triangles"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-utils/es/workers/triangulation.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport earcut from 'earcut';\nimport { calculateCentroid } from \"../geo\";\nimport ExtrudePolyline from \"./extrude_polyline\";\nexport function LineTriangulation(feature) {\n  var coordinates = feature.coordinates,\n    originCoordinates = feature.originCoordinates,\n    version = feature.version;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  var line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel'\n  });\n  if (version === 'GAODE2.x') {\n    // 处理高德2.0几何体构建\n    var path1 = coordinates; // 计算位置\n    if (!Array.isArray(path1[0][0])) {\n      path1 = [coordinates];\n    }\n    var path2 = originCoordinates; // 计算法线\n    if (!Array.isArray(path2[0][0])) {\n      path2 = [originCoordinates];\n    }\n    for (var i = 0; i < path1.length; i++) {\n      // 高德2.0在计算线时，需要使用经纬度计算发现，使用 customCoords.lnglatToCoords 计算的数据来计算顶点的位置\n      var item1 = path1[i];\n      var item2 = path2[i];\n      line.extrude_gaode2(item1, item2);\n    }\n  } else {\n    // 处理非高德2.0的几何体构建\n    var path = coordinates;\n    if (path[0] && !Array.isArray(path[0][0])) {\n      path = [coordinates];\n    }\n    path.forEach(function (item) {\n      line.extrude(item);\n    });\n  }\n  var linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions,\n    // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    indexes: linebuffer.indexes,\n    size: 6\n  };\n}\nexport function PointFillTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [].concat(_toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates)),\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length\n  };\n}\nexport function polygonFillTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var flattengeo = earcut.flatten(coordinates);\n  var vertices = flattengeo.vertices,\n    dimensions = flattengeo.dimensions,\n    holes = flattengeo.holes;\n  // if (version !== 'GAODE2.x') {\n  //   for (let i = 0; i < vertices.length; i += dimensions) {\n  //     const mer = project_mercator(vertices[i + 0], vertices[i + 1]);\n  //     vertices[i] = mer[0];\n  //     vertices[i + 1] = mer[1];\n  //   }\n  // }\n  // https://github.com/mapbox/earcut/issues/159\n  var triangles = earcut(vertices, holes, dimensions);\n  // if (version !== 'GAODE2.x') {\n  //   for (let i = 0; i < vertices.length; i += dimensions) {\n  //     const ll = mercator_lnglat(vertices[i + 0], vertices[i + 1]);\n  //     vertices[i] = ll[0];\n  //     vertices[i + 1] = ll[1];\n  //   }\n  // }\n\n  return {\n    indices: triangles,\n    vertices: vertices,\n    size: dimensions\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}