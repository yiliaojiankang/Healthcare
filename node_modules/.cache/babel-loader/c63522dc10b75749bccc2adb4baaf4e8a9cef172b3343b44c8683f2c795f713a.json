{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// from https://github.com/simple-statistics\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nexport function quantileSorted(x, p) {\n  var idx = x.length * p;\n  if (x.length === 0) {\n    throw new Error('quantile requires at least one data point.');\n  } else if (p < 0 || p > 1) {\n    throw new Error('quantiles must be between 0 and 1');\n  } else if (p === 1) {\n    // If p is 1, directly return the last element\n    return x[x.length - 1];\n  } else if (p === 0) {\n    // If p is 0, directly return the first element\n    return x[0];\n  } else if (idx % 1 !== 0) {\n    // If p is not integer, return the next element in array\n    return x[Math.ceil(idx) - 1];\n  } else if (x.length % 2 === 0) {\n    // If the list has even-length, we'll take the average of this number\n    // and the next value, if there is one\n    return (x[idx - 1] + x[idx]) / 2;\n  } else {\n    // Finally, in the simple case of an integer value\n    // with an odd-length list, return the x value at the index.\n    return x[idx];\n  }\n}\n/**\n * 交换数组位置\n * @param arr T[]\n * @param i number\n * @param j number\n */\nexport function swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nexport function quickselect(arr, k, left, right) {\n  left = left || 0;\n  right = right || arr.length - 1;\n  while (right > left) {\n    // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n    if (right - left > 600) {\n      var n = right - left + 1;\n      var m = k - left + 1;\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);\n      if (m - n / 2 < 0) sd *= -1;\n      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(arr, k, newLeft, newRight);\n    }\n    var t = arr[k];\n    var i = left;\n    var j = right;\n    swap(arr, left, k);\n    if (arr[right] > t) swap(arr, left, right);\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n      while (arr[i] < t) i++;\n      while (arr[j] > t) j--;\n    }\n    if (arr[left] === t) swap(arr, left, j);else {\n      j++;\n      swap(arr, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\nfunction quantile(x, p) {\n  var copy = x.slice();\n  if (Array.isArray(p)) {\n    // rearrange elements so that each element corresponding to a requested\n    // quantile is on a place it would be if the array was fully sorted\n    multiQuantileSelect(copy, p);\n    // Initialize the result array\n    var results = [];\n    // For each requested quantile\n    for (var i = 0; i < p.length; i++) {\n      results[i] = quantileSorted(copy, p[i]);\n    }\n    return results;\n  } else {\n    var idx = quantileIndex(copy.length, p);\n    quantileSelect(copy, idx, 0, copy.length - 1);\n    return quantileSorted(copy, p);\n  }\n}\nfunction quantileSelect(arr, k, left, right) {\n  if (k % 1 === 0) {\n    quickselect(arr, k, left, right);\n  } else {\n    k = Math.floor(k);\n    quickselect(arr, k, left, right);\n    quickselect(arr, k + 1, k + 1, right);\n  }\n}\nfunction multiQuantileSelect(arr, p) {\n  var indices = [0];\n  for (var i = 0; i < p.length; i++) {\n    indices.push(quantileIndex(arr.length, p[i]));\n  }\n  indices.push(arr.length - 1);\n  indices.sort(compare);\n  var stack = [0, indices.length - 1];\n  while (stack.length) {\n    var r = Math.ceil(stack.pop());\n    var l = Math.floor(stack.pop());\n    if (r - l <= 1) continue;\n    var m = Math.floor((l + r) / 2);\n    quantileSelect(arr, indices[m], Math.floor(indices[l]), Math.ceil(indices[r]));\n    stack.push(l, m, m, r);\n  }\n}\nfunction compare(a, b) {\n  return a - b;\n}\nfunction quantileIndex(len, p) {\n  var idx = len * p;\n  if (p === 1) {\n    // If p is 1, directly return the last index\n    return len - 1;\n  } else if (p === 0) {\n    // If p is 0, directly return the first index\n    return 0;\n  } else if (idx % 1 !== 0) {\n    // If index is not integer, return the next index in array\n    return Math.ceil(idx) - 1;\n  } else if (len % 2 === 0) {\n    // If the list has even-length, we'll return the middle of two indices\n    // around quantile to indicate that we need an average value of the two\n    return idx - 0.5;\n  } else {\n    // Finally, in the simple case of an integer index\n    // with an odd-length list, return the index\n    return idx;\n  }\n}\nexport { quantile };","map":{"version":3,"names":["quantileSorted","x","p","idx","length","Error","Math","ceil","swap","arr","i","j","tmp","quickselect","k","left","right","n","m","z","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","quantile","copy","slice","Array","isArray","multiQuantileSelect","results","quantileIndex","quantileSelect","indices","push","sort","compare","stack","r","pop","l","a","b","len"],"sources":["../../../src/utils/transform/quantile.ts"],"sourcesContent":["// from https://github.com/simple-statistics\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nexport function quantileSorted(x: number[], p: number) {\n  const idx = x.length * p;\n  if (x.length === 0) {\n    throw new Error('quantile requires at least one data point.');\n  } else if (p < 0 || p > 1) {\n    throw new Error('quantiles must be between 0 and 1');\n  } else if (p === 1) {\n    // If p is 1, directly return the last element\n    return x[x.length - 1];\n  } else if (p === 0) {\n    // If p is 0, directly return the first element\n    return x[0];\n  } else if (idx % 1 !== 0) {\n    // If p is not integer, return the next element in array\n    return x[Math.ceil(idx) - 1];\n  } else if (x.length % 2 === 0) {\n    // If the list has even-length, we'll take the average of this number\n    // and the next value, if there is one\n    return (x[idx - 1] + x[idx]) / 2;\n  } else {\n    // Finally, in the simple case of an integer value\n    // with an odd-length list, return the x value at the index.\n    return x[idx];\n  }\n}\n\n/**\n * 交换数组位置\n * @param arr T[]\n * @param i number\n * @param j number\n */\nexport function swap<T = any>(arr: T[], i: number, j: number): void {\n  const tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nexport function quickselect(arr: number[], k, left?: number, right?: number): void {\n  left = left || 0;\n  right = right || arr.length - 1;\n\n  while (right > left) {\n    // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp((2 * z) / 3);\n      let sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n      if (m - n / 2 < 0) sd *= -1;\n      const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n      const newRight = Math.min(right, Math.floor(k + ((n - m) * s) / n + sd));\n      quickselect(arr, k, newLeft, newRight);\n    }\n\n    const t = arr[k];\n    let i = left;\n    let j = right;\n\n    swap(arr, left, k);\n    if (arr[right] > t) swap(arr, left, right);\n\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n      while (arr[i] < t) i++;\n      while (arr[j] > t) j--;\n    }\n\n    if (arr[left] === t) swap(arr, left, j);\n    else {\n      j++;\n      swap(arr, j, right);\n    }\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x: number[], p: number): number;\nfunction quantile(x: number[], p: number[]): number[];\nfunction quantile(x: any, p: any): any {\n  const copy = x.slice();\n\n  if (Array.isArray(p)) {\n    // rearrange elements so that each element corresponding to a requested\n    // quantile is on a place it would be if the array was fully sorted\n    multiQuantileSelect(copy, p);\n    // Initialize the result array\n    const results: number[] = [];\n    // For each requested quantile\n    for (let i = 0; i < p.length; i++) {\n      results[i] = quantileSorted(copy, p[i]);\n    }\n    return results;\n  } else {\n    const idx = quantileIndex(copy.length, p);\n    quantileSelect(copy, idx, 0, copy.length - 1);\n    return quantileSorted(copy, p);\n  }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n  if (k % 1 === 0) {\n    quickselect(arr, k, left, right);\n  } else {\n    k = Math.floor(k);\n    quickselect(arr, k, left, right);\n    quickselect(arr, k + 1, k + 1, right);\n  }\n}\n\nfunction multiQuantileSelect(arr, p) {\n  const indices = [0];\n  for (let i = 0; i < p.length; i++) {\n    indices.push(quantileIndex(arr.length, p[i]));\n  }\n  indices.push(arr.length - 1);\n  indices.sort(compare);\n\n  const stack = [0, indices.length - 1];\n\n  while (stack.length) {\n    const r = Math.ceil(stack.pop());\n    const l = Math.floor(stack.pop());\n    if (r - l <= 1) continue;\n\n    const m = Math.floor((l + r) / 2);\n    quantileSelect(arr, indices[m], Math.floor(indices[l]), Math.ceil(indices[r]));\n\n    stack.push(l, m, m, r);\n  }\n}\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction quantileIndex(len, p) {\n  const idx = len * p;\n  if (p === 1) {\n    // If p is 1, directly return the last index\n    return len - 1;\n  } else if (p === 0) {\n    // If p is 0, directly return the first index\n    return 0;\n  } else if (idx % 1 !== 0) {\n    // If index is not integer, return the next index in array\n    return Math.ceil(idx) - 1;\n  } else if (len % 2 === 0) {\n    // If the list has even-length, we'll return the middle of two indices\n    // around quantile to indicate that we need an average value of the two\n    return idx - 0.5;\n  } else {\n    // Finally, in the simple case of an integer index\n    // with an odd-length list, return the index\n    return idx;\n  }\n}\n\nexport { quantile };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}