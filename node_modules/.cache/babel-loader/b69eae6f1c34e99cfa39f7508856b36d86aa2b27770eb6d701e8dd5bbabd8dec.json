{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { deepAssign } from '../utils';\nimport { getCanvasPattern } from '../utils/pattern';\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\nexport function pattern(key) {\n  var _this = this;\n  return function (params) {\n    var _a;\n    var options = params.options,\n      chart = params.chart;\n    var patternOption = options.pattern;\n    // 没有 pattern 配置，则直接返回\n    if (!patternOption) {\n      return params;\n    }\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n    var style = function (datum) {\n      var _a, _b, _c;\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n      var defaultColor = chart.getTheme().defaultColor;\n      var color = defaultColor;\n      var colorAttribute = (_b = (_a = chart.geometries) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getAttribute('color');\n      if (colorAttribute) {\n        var colorField = colorAttribute.getFields()[0];\n        var seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, ((_c = colorAttribute.values) === null || _c === void 0 ? void 0 : _c[0]) || defaultColor);\n      }\n      var pattern = patternOption;\n      // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(_this, datum, color);\n      }\n      // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, {\n          cfg: {\n            backgroundColor: color\n          }\n        }, pattern));\n      }\n      var styleOption = options[key];\n      return __assign(__assign({}, typeof styleOption === 'function' ? styleOption.call.apply(styleOption, __spreadArray([_this, datum], args, false)) : styleOption || {}), {\n        fill: pattern || color\n      });\n    };\n    return deepAssign({}, params, {\n      options: (_a = {}, _a[key] = style, _a)\n    });\n  };\n}","map":{"version":3,"names":["Util","get","deepAssign","getCanvasPattern","pattern","key","_this","params","options","chart","patternOption","style","datum","args","_i","arguments","length","defaultColor","getTheme","color","colorAttribute","_b","_a","geometries","getAttribute","colorField","getFields","seriesValue","getMappingValue","_c","values","call","CanvasPattern","cfg","backgroundColor","styleOption","__assign","apply","__spreadArray","fill"],"sources":["../../src/adaptor/pattern.ts"],"sourcesContent":["import { Util } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { Params } from '../core/adaptor';\nimport { Datum, Options, StyleAttr } from '../types';\nimport { deepAssign } from '../utils';\nimport { getCanvasPattern } from '../utils/pattern';\n\n/**\n * 使用 Pattern 通道的 options，要求有 colorField/seriesField/stackField 作为分类字段（进行颜色映射）\n */\ntype OptionsRequiredInPattern = Omit<Options, 'data'>;\n\n/**\n * Pattern 通道，处理图案填充\n * 🚀 目前支持图表类型：饼图、柱状图、条形图、玉珏图等（不支持在多 view 图表中，后续按需扩展）\n *\n * @param key key of style property\n * @returns\n */\nexport function pattern(key: string) {\n  return <O extends OptionsRequiredInPattern = OptionsRequiredInPattern>(params: Params<O>): Params<O> => {\n    const { options, chart } = params;\n    const { pattern: patternOption } = options;\n\n    // 没有 pattern 配置，则直接返回\n    if (!patternOption) {\n      return params;\n    }\n\n    /** ~~~~~~~ 进行贴图图案处理 ~~~~~~~ */\n\n    const style: StyleAttr = (datum?: Datum, ...args: any[]) => {\n      const { defaultColor } = chart.getTheme();\n      let color = defaultColor;\n\n      const colorAttribute = chart.geometries?.[0]?.getAttribute('color');\n      if (colorAttribute) {\n        const colorField = colorAttribute.getFields()[0];\n        const seriesValue = get(datum, colorField);\n        color = Util.getMappingValue(colorAttribute, seriesValue, colorAttribute.values?.[0] || defaultColor);\n      }\n\n      let pattern: CanvasPattern = patternOption as CanvasPattern;\n\n      // 1. 如果 patternOption 是一个回调，则获取回调结果。`(datum: Datum, color: string) => CanvasPattern`\n      if (typeof patternOption === 'function') {\n        pattern = patternOption.call(this, datum, color);\n      }\n\n      // 2. 如果 pattern 不是 CanvasPattern，则进一步处理，否则直接赋予给 fill\n      if (pattern instanceof CanvasPattern === false) {\n        // 通过 createPattern(PatternStyle) 转换为 CanvasPattern\n        pattern = getCanvasPattern(deepAssign({}, { cfg: { backgroundColor: color } }, pattern));\n      }\n\n      const styleOption = options[key] as StyleAttr;\n\n      return {\n        ...(typeof styleOption === 'function' ? styleOption.call(this, datum, ...args) : styleOption || {}),\n        fill: pattern || color,\n      };\n    };\n\n    return deepAssign({}, params, { options: { [key]: style } });\n  };\n}\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,UAAU;AAC/B,SAASC,GAAG,QAAQ,YAAY;AAGhC,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,gBAAgB,QAAQ,kBAAkB;AAOnD;;;;;;;AAOA,OAAM,SAAUC,OAAOA,CAACC,GAAW;EAAnC,IAAAC,KAAA;EACE,OAAO,UAAgEC,MAAiB;;IAC9E,IAAAC,OAAO,GAAYD,MAAM,CAAAC,OAAlB;MAAEC,KAAK,GAAKF,MAAM,CAAAE,KAAX;IACd,IAASC,aAAa,GAAKF,OAAO,CAAAJ,OAAZ;IAE9B;IACA,IAAI,CAACM,aAAa,EAAE;MAClB,OAAOH,MAAM;;IAGf;IAEA,IAAMI,KAAK,GAAc,SAAAA,CAACC,KAAa;;MAAE,IAAAC,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;MAC/B,IAAAG,YAAY,GAAKR,KAAK,CAACS,QAAQ,EAAE,CAAAD,YAArB;MACpB,IAAIE,KAAK,GAAGF,YAAY;MAExB,IAAMG,cAAc,GAAG,CAAAC,EAAA,IAAAC,EAAA,GAAAb,KAAK,CAACc,UAAU,cAAAD,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAEG,YAAY,CAAC,OAAO,CAAC;MACnE,IAAIJ,cAAc,EAAE;QAClB,IAAMK,UAAU,GAAGL,cAAc,CAACM,SAAS,EAAE,CAAC,CAAC,CAAC;QAChD,IAAMC,WAAW,GAAG1B,GAAG,CAACW,KAAK,EAAEa,UAAU,CAAC;QAC1CN,KAAK,GAAGnB,IAAI,CAAC4B,eAAe,CAACR,cAAc,EAAEO,WAAW,EAAE,EAAAE,EAAA,GAAAT,cAAc,CAACU,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC,KAAIZ,YAAY,CAAC;;MAGvG,IAAIb,OAAO,GAAkBM,aAA8B;MAE3D;MACA,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;QACvCN,OAAO,GAAGM,aAAa,CAACqB,IAAI,CAACzB,KAAI,EAAEM,KAAK,EAAEO,KAAK,CAAC;;MAGlD;MACA,IAAIf,OAAO,YAAY4B,aAAa,KAAK,KAAK,EAAE;QAC9C;QACA5B,OAAO,GAAGD,gBAAgB,CAACD,UAAU,CAAC,EAAE,EAAE;UAAE+B,GAAG,EAAE;YAAEC,eAAe,EAAEf;UAAK;QAAE,CAAE,EAAEf,OAAO,CAAC,CAAC;;MAG1F,IAAM+B,WAAW,GAAG3B,OAAO,CAACH,GAAG,CAAc;MAE7C,OAAA+B,QAAA,CAAAA,QAAA,KACM,OAAOD,WAAW,KAAK,UAAU,GAAGA,WAAW,CAACJ,IAAI,CAAAM,KAAA,CAAhBF,WAAW,EAAAG,aAAA,EAAMhC,KAAI,EAAEM,KAAK,GAAKC,IAAI,YAAIsB,WAAW,IAAI,EAAG;QACnGI,IAAI,EAAEnC,OAAO,IAAIe;MAAK;IAE1B,CAAC;IAED,OAAOjB,UAAU,CAAC,EAAE,EAAEK,MAAM,EAAE;MAAEC,OAAO,GAAAc,EAAA,OAAIA,EAAA,CAACjB,GAAG,IAAGM,KAAK,EAAAW,EAAA;IAAE,CAAE,CAAC;EAC9D,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}