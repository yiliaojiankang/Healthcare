{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\nvar UpdateStyleAttributePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function UpdateStyleAttributePlugin() {\n    _classCallCheck(this, UpdateStyleAttributePlugin);\n  }\n  _createClass(UpdateStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tapPromise('UpdateStyleAttributePlugin', function () {\n        _this.initStyleAttribute(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {\n        if (layer.layerModelNeedUpdate) {\n          return;\n        }\n        if (layer.inited) {\n          _this.updateStyleAttribute(layer, {\n            styleAttributeService: styleAttributeService\n          });\n        }\n      });\n    }\n  }, {\n    key: \"updateStyleAttribute\",\n    value: function updateStyleAttribute(layer, _ref2) {\n      var styleAttributeService = _ref2.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      var filter = styleAttributeService.getLayerStyleAttribute('filter');\n      if (filter && filter.needRegenerateVertices) {\n        layer.layerModelNeedUpdate = true;\n        attributes.forEach(function (attr) {\n          return attr.needRegenerateVertices = false;\n        });\n        return;\n      }\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n        // 获取经过 mapping 最新的数据\n        attribute.featureRange.startIndex, attribute.featureRange.endIndex, layer);\n        attribute.needRegenerateVertices = false;\n      });\n    }\n  }, {\n    key: \"initStyleAttribute\",\n    value: function initStyleAttribute(layer, _ref3) {\n      var styleAttributeService = _ref3.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n        // 获取经过 mapping 最新的数据\n        attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n        attribute.needRegenerateVertices = false;\n      });\n    }\n  }]);\n  return UpdateStyleAttributePlugin;\n}()) || _class);\nexport { UpdateStyleAttributePlugin as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_dec","_class","injectable","UpdateStyleAttributePlugin","key","value","apply","layer","_ref","_this","styleAttributeService","hooks","init","tapPromise","initStyleAttribute","beforeRender","tap","layerModelNeedUpdate","inited","updateStyleAttribute","_ref2","attributes","getLayerStyleAttributes","filter","getLayerStyleAttribute","needRegenerateVertices","forEach","attr","attribute","updateAttributeByFeatureRange","name","getEncodedData","featureRange","startIndex","endIndex","_ref3","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/plugins/UpdateStyleAttributePlugin.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _dec, _class;\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\nvar UpdateStyleAttributePlugin = (_dec = injectable(), _dec(_class = /*#__PURE__*/function () {\n  function UpdateStyleAttributePlugin() {\n    _classCallCheck(this, UpdateStyleAttributePlugin);\n  }\n  _createClass(UpdateStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tapPromise('UpdateStyleAttributePlugin', function () {\n        _this.initStyleAttribute(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {\n        if (layer.layerModelNeedUpdate) {\n          return;\n        }\n        if (layer.inited) {\n          _this.updateStyleAttribute(layer, {\n            styleAttributeService: styleAttributeService\n          });\n        }\n      });\n    }\n  }, {\n    key: \"updateStyleAttribute\",\n    value: function updateStyleAttribute(layer, _ref2) {\n      var styleAttributeService = _ref2.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      var filter = styleAttributeService.getLayerStyleAttribute('filter');\n      if (filter && filter.needRegenerateVertices) {\n        layer.layerModelNeedUpdate = true;\n        attributes.forEach(function (attr) {\n          return attr.needRegenerateVertices = false;\n        });\n        return;\n      }\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n        // 获取经过 mapping 最新的数据\n        attribute.featureRange.startIndex, attribute.featureRange.endIndex, layer);\n        attribute.needRegenerateVertices = false;\n      });\n    }\n  }, {\n    key: \"initStyleAttribute\",\n    value: function initStyleAttribute(layer, _ref3) {\n      var styleAttributeService = _ref3.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx d\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(),\n        // 获取经过 mapping 最新的数据\n        attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n        attribute.needRegenerateVertices = false;\n      });\n    }\n  }]);\n  return UpdateStyleAttributePlugin;\n}()) || _class);\nexport { UpdateStyleAttributePlugin as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}