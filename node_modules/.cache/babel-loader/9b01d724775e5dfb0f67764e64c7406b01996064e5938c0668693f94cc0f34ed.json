{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ext, vec2 } from '@antv/matrix-util';\nimport { isNumberEqual } from '@antv/util';\nimport Coordinate from './base';\n/**\n * 螺旋坐标系\n */\nvar Helix = /** @class */function (_super) {\n  __extends(Helix, _super);\n  function Helix(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.isHelix = true;\n    _this.type = 'helix';\n    var _a = cfg.startAngle,\n      startAngle = _a === void 0 ? 1.25 * Math.PI : _a,\n      _b = cfg.endAngle,\n      endAngle = _b === void 0 ? 7.25 * Math.PI : _b,\n      _c = cfg.innerRadius,\n      innerRadius = _c === void 0 ? 0 : _c,\n      radius = cfg.radius;\n    _this.startAngle = startAngle;\n    _this.endAngle = endAngle;\n    _this.innerRadius = innerRadius;\n    _this.radius = radius;\n    _this.initial();\n    return _this;\n  }\n  Helix.prototype.initial = function () {\n    _super.prototype.initial.call(this);\n    var index = (this.endAngle - this.startAngle) / (2 * Math.PI) + 1; // 螺线圈数\n    var maxRadius = Math.min(this.width, this.height) / 2;\n    if (this.radius && this.radius >= 0 && this.radius <= 1) {\n      maxRadius = maxRadius * this.radius;\n    }\n    this.d = Math.floor(maxRadius * (1 - this.innerRadius) / index);\n    this.a = this.d / (Math.PI * 2); // 螺线系数\n    this.x = {\n      start: this.startAngle,\n      end: this.endAngle\n    };\n    this.y = {\n      start: this.innerRadius * maxRadius,\n      end: this.innerRadius * maxRadius + this.d * 0.99\n    };\n  };\n  /**\n   * 将百分比数据变成屏幕坐标\n   * @param point 归一化的点坐标\n   * @return      返回对应的屏幕坐标\n   */\n  Helix.prototype.convertPoint = function (point) {\n    var _a;\n    var x = point.x,\n      y = point.y;\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n    var thi = this.convertDim(x, 'x');\n    var r = this.a * thi;\n    var newY = this.convertDim(y, 'y');\n    return {\n      x: this.center.x + Math.cos(thi) * (r + newY),\n      y: this.center.y + Math.sin(thi) * (r + newY)\n    };\n  };\n  /**\n   * 将屏幕坐标点还原成百分比数据\n   * @param point 屏幕坐标\n   * @return      返回对应的归一化后的数据\n   */\n  Helix.prototype.invertPoint = function (point) {\n    var _a;\n    var d = this.d + this.y.start;\n    var v = vec2.subtract([0, 0], [point.x, point.y], [this.center.x, this.center.y]);\n    var thi = ext.angleTo(v, [1, 0], true);\n    var rMin = thi * this.a; // 坐标与原点的连线在第一圈上的交点，最小r值\n    if (vec2.length(v) < rMin) {\n      // 坐标与原点的连线不可能小于最小r值，但不排除因小数计算产生的略小于rMin的情况\n      rMin = vec2.length(v);\n    }\n    var index = Math.floor((vec2.length(v) - rMin) / d); // 当前点位于第index圈\n    thi = 2 * index * Math.PI + thi;\n    var r = this.a * thi;\n    var newY = vec2.length(v) - r;\n    newY = isNumberEqual(newY, 0) ? 0 : newY;\n    var x = this.invertDim(thi, 'x');\n    var y = this.invertDim(newY, 'y');\n    x = isNumberEqual(x, 0) ? 0 : x;\n    y = isNumberEqual(y, 0) ? 0 : y;\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n    return {\n      x: x,\n      y: y\n    };\n  };\n  return Helix;\n}(Coordinate);\nexport default Helix;","map":{"version":3,"names":["ext","vec2","isNumberEqual","Coordinate","Helix","_super","__extends","cfg","_this","call","isHelix","type","_a","startAngle","Math","PI","_b","endAngle","_c","innerRadius","radius","initial","prototype","index","maxRadius","min","width","height","d","floor","a","x","start","end","y","convertPoint","point","isTransposed","thi","convertDim","r","newY","center","cos","sin","invertPoint","v","subtract","angleTo","rMin","length","invertDim"],"sources":["../../src/coord/helix.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}