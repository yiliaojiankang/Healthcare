{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __read, __spreadArray } from \"tslib\";\nimport { groupBy, keys, map } from '@antv/util';\nimport { findLabelTextShape } from '../../util';\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\nfunction sortLabels(geometry, labels) {\n  var yField = geometry.getXYFields()[1];\n  var result = [];\n  var sortedLabels = labels.sort(function (left, right) {\n    return left.get('data')[yField] - left.get('data')[yField];\n  });\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n  result.push.apply(result, __spreadArray([], __read(sortedLabels), false));\n  return result;\n}\nfunction hasSome(dones, current, compare) {\n  return dones.some(function (done) {\n    return compare(done, current);\n  });\n}\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nfunction getOverlapArea(a, b, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n  var xOverlap = Math.max(0, Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin));\n  var yOverlap = Math.max(0, Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin));\n  return xOverlap * yOverlap;\n}\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\nfunction checkShapeOverlap(dones, current) {\n  return hasSome(dones, current, function (left, right) {\n    var leftText = findLabelTextShape(left);\n    var rightText = findLabelTextShape(right);\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\nexport function pointAdjustPosition(items, labels, shapes, region, cfg) {\n  var _a, _b;\n  if (shapes.length === 0) {\n    return;\n  }\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n  if (!geometry || geometry.type !== 'point') {\n    return;\n  }\n  var _c = __read(geometry.getXYFields(), 2),\n    xField = _c[0],\n    yField = _c[1];\n  var groupedLabels = groupBy(labels, function (label) {\n    return label.get('data')[xField];\n  });\n  var dones = [];\n  var offset = cfg && cfg.offset || ((_b = items[0]) === null || _b === void 0 ? void 0 : _b.offset) || 12;\n  map(keys(groupedLabels).reverse(), function (xValue) {\n    var sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n    while (sortedCollections.length) {\n      var current = sortedCollections.shift();\n      var textShape = findLabelTextShape(current);\n      if (hasSome(dones, current, function (left, right) {\n        return left.get('data')[xField] === right.get('data')[xField] && left.get('data')[yField] === right.get('data')[yField];\n      })) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n      var upFail = checkShapeOverlap(dones, current);\n      var downFail = false;\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n      dones.push(current);\n    }\n  });\n}","map":{"version":3,"names":["groupBy","keys","map","findLabelTextShape","sortLabels","geometry","labels","yField","getXYFields","result","sortedLabels","sort","left","right","get","length","push","shift","pop","apply","__spreadArray","__read","hasSome","dones","current","compare","some","done","getOverlapArea","a","b","margin","xOverlap","Math","max","min","x","width","yOverlap","y","height","checkShapeOverlap","leftText","rightText","getCanvasBBox","pointAdjustPosition","items","shapes","region","cfg","element","_a","type","_c","xField","groupedLabels","label","offset","_b","reverse","xValue","sortedCollections","textShape","set","upFail","downFail","attr"],"sources":["../../../../../src/geometry/label/layout/point/adjust-position.ts"],"sourcesContent":["import { groupBy, keys, map } from '@antv/util';\nimport { IElement, IGroup, IShape, BBox } from '../../../../dependents';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\n/**\n * point-adjust-position layout 的配置类型\n */\nexport interface PointAdjustPositionLayoutCfg {\n  offset?: number;\n}\n\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\nfunction sortLabels(geometry: Geometry, labels: IGroup[]) {\n  const yField = geometry.getXYFields()[1];\n  const result: IGroup[] = [];\n  const sortedLabels = labels.sort((left, right) => left.get('data')[yField] - left.get('data')[yField]);\n\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n  result.push(...sortedLabels);\n\n  return result;\n}\n\nfunction hasSome(dones: IGroup[], current: IGroup, compare: (left: IGroup, right: IGroup) => boolean): boolean {\n  return dones.some((done) => compare(done, current));\n}\n\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nfunction getOverlapArea(a: BBox, b: BBox, margin = 0) {\n  const xOverlap = Math.max(\n    0,\n    Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin)\n  );\n  const yOverlap = Math.max(\n    0,\n    Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin)\n  );\n\n  return xOverlap * yOverlap;\n}\n\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\nfunction checkShapeOverlap(dones: IGroup[], current: IGroup): boolean {\n  return hasSome(dones, current, (left, right) => {\n    const leftText = findLabelTextShape(left);\n    const rightText = findLabelTextShape(right);\n\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\nexport function pointAdjustPosition(\n  items: LabelItem[],\n  labels: IGroup[],\n  shapes: IShape[] | IGroup[],\n  region: BBox,\n  cfg: PointAdjustPositionLayoutCfg\n): void {\n  if (shapes.length === 0) {\n    return;\n  }\n\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'point') {\n    return;\n  }\n  const [xField, yField] = geometry.getXYFields();\n  const groupedLabels = groupBy(labels, (label) => label.get('data')[xField]);\n  const dones: IGroup[] = [];\n  const offset = (cfg && cfg.offset) || items[0]?.offset || 12;\n\n  map(keys(groupedLabels).reverse(), (xValue) => {\n    const sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n    while (sortedCollections.length) {\n      const current = sortedCollections.shift();\n      const textShape = findLabelTextShape(current);\n      if (\n        hasSome(\n          dones,\n          current,\n          (left, right) =>\n            left.get('data')[xField] === right.get('data')[xField] &&\n            left.get('data')[yField] === right.get('data')[yField]\n        )\n      ) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n      const upFail = checkShapeOverlap(dones, current);\n      let downFail: boolean = false;\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n      dones.push(current);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}