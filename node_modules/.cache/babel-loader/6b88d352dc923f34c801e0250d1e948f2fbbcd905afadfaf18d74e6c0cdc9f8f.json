{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Format, TextureUsage } from '@antv/g-device-api';\nimport { isTexture2D } from \"./DeviceTexture2D\";\n\n/**\n * Contains 2 render targets: color and depth.\n */\nvar DeviceFramebuffer = /*#__PURE__*/function () {\n  function DeviceFramebuffer(device, options) {\n    _classCallCheck(this, DeviceFramebuffer);\n    this.device = device;\n    this.options = options;\n    this.createColorRenderTarget();\n    this.createDepthRenderTarget();\n  }\n  _createClass(DeviceFramebuffer, [{\n    key: \"createColorRenderTarget\",\n    value: function createColorRenderTarget() {\n      var resize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$options = this.options,\n        width = _this$options.width,\n        height = _this$options.height,\n        color = _this$options.color;\n      if (color) {\n        if (isTexture2D(color)) {\n          if (resize) {\n            color.resize({\n              width: width,\n              height: height\n            });\n          }\n          this.colorTexture = color.get();\n          this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);\n          this.width = color['width'];\n          this.height = color['height'];\n        } else if (width && height) {\n          this.colorTexture = this.device.createTexture({\n            format: Format.U8_RGBA_RT,\n            usage: TextureUsage.RENDER_TARGET,\n            width: width,\n            height: height\n          });\n          this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);\n          this.width = width;\n          this.height = height;\n        }\n      }\n    }\n  }, {\n    key: \"createDepthRenderTarget\",\n    value: function createDepthRenderTarget() {\n      var resize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$options2 = this.options,\n        width = _this$options2.width,\n        height = _this$options2.height,\n        depth = _this$options2.depth;\n      // TODO: avoid creating depth texture if not needed\n      if (depth) {\n        if (isTexture2D(depth)) {\n          if (resize) {\n            depth.resize({\n              width: width,\n              height: height\n            });\n          }\n          this.depthTexture = depth.get();\n          this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);\n          this.width = depth['width'];\n          this.height = depth['height'];\n        } else if (width && height) {\n          this.depthTexture = this.device.createTexture({\n            format: Format.D24_S8,\n            usage: TextureUsage.RENDER_TARGET,\n            width: width,\n            height: height\n          });\n          this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);\n          this.width = width;\n          this.height = height;\n        }\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.colorRenderTarget;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$colorRenderTarg, _this$depthRenderTarg;\n      (_this$colorRenderTarg = this.colorRenderTarget) === null || _this$colorRenderTarg === void 0 || _this$colorRenderTarg.destroy();\n      (_this$depthRenderTarg = this.depthRenderTarget) === null || _this$depthRenderTarg === void 0 || _this$depthRenderTarg.destroy();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n        height = _ref.height;\n      if (this.width !== width || this.height !== height) {\n        this.destroy();\n        // Prevent double free texture.\n        // @ts-ignore\n        this.colorTexture.destroyed = true;\n        // @ts-ignore\n        this.depthTexture.destroyed = true;\n        this.options.width = width;\n        this.options.height = height;\n        this.createColorRenderTarget(true);\n        this.createDepthRenderTarget(true);\n      }\n    }\n  }]);\n  return DeviceFramebuffer;\n}();\nexport { DeviceFramebuffer as default };","map":{"version":3,"names":["_classCallCheck","_createClass","Format","TextureUsage","isTexture2D","DeviceFramebuffer","device","options","createColorRenderTarget","createDepthRenderTarget","key","value","resize","arguments","length","undefined","_this$options","width","height","color","colorTexture","get","colorRenderTarget","createRenderTargetFromTexture","createTexture","format","U8_RGBA_RT","usage","RENDER_TARGET","_this$options2","depth","depthTexture","depthRenderTarget","D24_S8","destroy","_this$colorRenderTarg","_this$depthRenderTarg","_ref","destroyed","default"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-renderer/es/device/DeviceFramebuffer.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Format, TextureUsage } from '@antv/g-device-api';\nimport { isTexture2D } from \"./DeviceTexture2D\";\n\n/**\n * Contains 2 render targets: color and depth.\n */\nvar DeviceFramebuffer = /*#__PURE__*/function () {\n  function DeviceFramebuffer(device, options) {\n    _classCallCheck(this, DeviceFramebuffer);\n    this.device = device;\n    this.options = options;\n    this.createColorRenderTarget();\n    this.createDepthRenderTarget();\n  }\n  _createClass(DeviceFramebuffer, [{\n    key: \"createColorRenderTarget\",\n    value: function createColorRenderTarget() {\n      var resize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$options = this.options,\n        width = _this$options.width,\n        height = _this$options.height,\n        color = _this$options.color;\n      if (color) {\n        if (isTexture2D(color)) {\n          if (resize) {\n            color.resize({\n              width: width,\n              height: height\n            });\n          }\n          this.colorTexture = color.get();\n          this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);\n          this.width = color['width'];\n          this.height = color['height'];\n        } else if (width && height) {\n          this.colorTexture = this.device.createTexture({\n            format: Format.U8_RGBA_RT,\n            usage: TextureUsage.RENDER_TARGET,\n            width: width,\n            height: height\n          });\n          this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);\n          this.width = width;\n          this.height = height;\n        }\n      }\n    }\n  }, {\n    key: \"createDepthRenderTarget\",\n    value: function createDepthRenderTarget() {\n      var resize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _this$options2 = this.options,\n        width = _this$options2.width,\n        height = _this$options2.height,\n        depth = _this$options2.depth;\n      // TODO: avoid creating depth texture if not needed\n      if (depth) {\n        if (isTexture2D(depth)) {\n          if (resize) {\n            depth.resize({\n              width: width,\n              height: height\n            });\n          }\n          this.depthTexture = depth.get();\n          this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);\n          this.width = depth['width'];\n          this.height = depth['height'];\n        } else if (width && height) {\n          this.depthTexture = this.device.createTexture({\n            format: Format.D24_S8,\n            usage: TextureUsage.RENDER_TARGET,\n            width: width,\n            height: height\n          });\n          this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);\n          this.width = width;\n          this.height = height;\n        }\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.colorRenderTarget;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$colorRenderTarg, _this$depthRenderTarg;\n      (_this$colorRenderTarg = this.colorRenderTarget) === null || _this$colorRenderTarg === void 0 || _this$colorRenderTarg.destroy();\n      (_this$depthRenderTarg = this.depthRenderTarget) === null || _this$depthRenderTarg === void 0 || _this$depthRenderTarg.destroy();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n        height = _ref.height;\n      if (this.width !== width || this.height !== height) {\n        this.destroy();\n        // Prevent double free texture.\n        // @ts-ignore\n        this.colorTexture.destroyed = true;\n        // @ts-ignore\n        this.depthTexture.destroyed = true;\n        this.options.width = width;\n        this.options.height = height;\n        this.createColorRenderTarget(true);\n        this.createDepthRenderTarget(true);\n      }\n    }\n  }]);\n  return DeviceFramebuffer;\n}();\nexport { DeviceFramebuffer as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}