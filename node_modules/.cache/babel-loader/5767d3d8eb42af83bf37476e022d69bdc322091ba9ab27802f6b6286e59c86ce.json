{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isString } from '@antv/util';\nimport { animation, annotation, interaction, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { DEFAULT_COLOR, INDICATEOR_VIEW_ID, PERCENT, RANGE_TYPE, RANGE_VALUE, RANGE_VIEW_ID } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var percent = options.percent,\n    range = options.range,\n    radius = options.radius,\n    innerRadius = options.innerRadius,\n    startAngle = options.startAngle,\n    endAngle = options.endAngle,\n    axis = options.axis,\n    indicator = options.indicator,\n    gaugeStyle = options.gaugeStyle,\n    type = options.type,\n    meter = options.meter;\n  var color = range.color,\n    rangeWidth = range.width;\n  // 指标 & 指针\n  // 如果开启在应用\n  if (indicator) {\n    var indicatorData = getIndicatorData(percent);\n    var v1 = chart.createView({\n      id: INDICATEOR_VIEW_ID\n    });\n    v1.data(indicatorData);\n    v1.point().position(\"\".concat(PERCENT, \"*1\")).shape(indicator.shape || 'gauge-indicator')\n    // 传入指针的样式到自定义 shape 中\n    .customInfo({\n      defaultColor: chart.getTheme().defaultColor,\n      indicator: indicator\n    });\n    v1.coordinate('polar', {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radius: innerRadius * radius // 外部的 innerRadius * radius = 这里的 radius\n    });\n\n    v1.axis(PERCENT, axis);\n    // 一部分应用到 scale 中\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  }\n  // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n  var rangeData = getRangeData(percent, options.range);\n  var v2 = chart.createView({\n    id: RANGE_VIEW_ID\n  });\n  v2.data(rangeData);\n  var rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n  var ext = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth\n    }\n  }).ext;\n  var geometry = ext.geometry;\n  // 传入到自定义 shape 中\n  geometry.customInfo({\n    meter: meter\n  });\n  v2.coordinate('polar', {\n    innerRadius: innerRadius,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  }).transpose();\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params) {\n  var _a;\n  return flow(scale((_a = {\n    range: {\n      min: 0,\n      max: 1,\n      maxLimit: 1,\n      minLimit: 0\n    }\n  }, _a[PERCENT] = {}, _a)))(params);\n}\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var statistic = options.statistic,\n    percent = options.percent;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  if (statistic) {\n    var contentOption = statistic.content;\n    var transformContent = void 0;\n    // 当设置 content 的时候，设置默认样式\n    if (contentOption) {\n      transformContent = deepAssign({}, {\n        content: \"\".concat((percent * 100).toFixed(2), \"%\"),\n        style: {\n          opacity: 0.75,\n          fontSize: '30px',\n          lineHeight: 1,\n          textAlign: 'center',\n          color: 'rgba(44,53,66,0.85)'\n        }\n      }, contentOption);\n    }\n    renderGaugeStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: transformContent\n      })\n    }, {\n      percent: percent\n    });\n  }\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * tooltip 配置\n */\nfunction tooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip;\n  if (tooltip) {\n    chart.tooltip(deepAssign({\n      showTitle: false,\n      showMarkers: false,\n      containerTpl: '<div class=\"g2-tooltip\"><div class=\"g2-tooltip-list\"></div></div>',\n      domStyles: {\n        'g2-tooltip': {\n          padding: '4px 8px',\n          fontSize: '10px'\n        }\n      },\n      customContent: function (x, data) {\n        var percent = get(data, [0, 'data', PERCENT], 0);\n        return \"\".concat((percent * 100).toFixed(2), \"%\");\n      }\n    }, tooltip));\n  } else {\n    // 默认，不展示 tooltip\n    chart.tooltip(false);\n  }\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\nfunction other(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * 对外暴露的 adaptor\n */\nexport { statistic };\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme,\n  // animation 配置必须在 createView 之前，不然无法让子 View 生效\n  animation, geometry, meta, tooltip, statistic, interaction, annotation(), other\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"names":["get","isString","animation","annotation","interaction","scale","theme","interval","AXIS_META_CONFIG_KEYS","deepAssign","flow","pick","renderGaugeStatistic","DEFAULT_COLOR","INDICATEOR_VIEW_ID","PERCENT","RANGE_TYPE","RANGE_VALUE","RANGE_VIEW_ID","getIndicatorData","getRangeData","geometry","params","chart","options","percent","range","radius","innerRadius","startAngle","endAngle","axis","indicator","gaugeStyle","type","meter","color","rangeWidth","width","indicatorData","v1","createView","id","data","point","position","concat","shape","customInfo","defaultColor","getTheme","coordinate","rangeData","v2","rangeColor","ext","xField","yField","seriesField","rawFields","isStack","style","args","zIndexReversed","sortZIndex","minColumnWidth","maxColumnWidth","transpose","meta","_a","min","max","maxLimit","minLimit","statistic","updated","getController","clear","contentOption","content","transformContent","toFixed","opacity","fontSize","lineHeight","textAlign","__assign","render","tooltip","showTitle","showMarkers","containerTpl","domStyles","padding","customContent","x","other","legend","adaptor"],"sources":["../../../src/plots/gauge/adaptor.ts"],"sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get, isString } from '@antv/util';\nimport { animation, annotation, interaction, scale, theme } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, pick, renderGaugeStatistic } from '../../utils';\nimport { DEFAULT_COLOR, INDICATEOR_VIEW_ID, PERCENT, RANGE_TYPE, RANGE_VALUE, RANGE_VIEW_ID } from './constants';\nimport { GaugeOptions } from './types';\nimport { getIndicatorData, getRangeData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { percent, range, radius, innerRadius, startAngle, endAngle, axis, indicator, gaugeStyle, type, meter } =\n    options;\n  const { color, width: rangeWidth } = range;\n\n  // 指标 & 指针\n  // 如果开启在应用\n  if (indicator) {\n    const indicatorData = getIndicatorData(percent);\n\n    const v1 = chart.createView({ id: INDICATEOR_VIEW_ID });\n    v1.data(indicatorData);\n\n    v1.point()\n      .position(`${PERCENT}*1`)\n      .shape(indicator.shape || 'gauge-indicator')\n      // 传入指针的样式到自定义 shape 中\n      .customInfo({\n        defaultColor: chart.getTheme().defaultColor,\n        indicator,\n      });\n\n    v1.coordinate('polar', {\n      startAngle,\n      endAngle,\n      radius: innerRadius * radius, // 外部的 innerRadius * radius = 这里的 radius\n    });\n\n    v1.axis(PERCENT, axis);\n    // 一部分应用到 scale 中\n    v1.scale(PERCENT, pick(axis, AXIS_META_CONFIG_KEYS));\n  }\n\n  // 辅助 range\n  // [{ range: 1, type: '0', percent: 原始进度百分比 }]\n  const rangeData = getRangeData(percent, options.range);\n  const v2 = chart.createView({ id: RANGE_VIEW_ID });\n  v2.data(rangeData);\n\n  const rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n\n  const { ext } = interval({\n    chart: v2,\n    options: {\n      xField: '1',\n      yField: RANGE_VALUE,\n      seriesField: RANGE_TYPE,\n      rawFields: [PERCENT],\n      isStack: true,\n      interval: {\n        color: rangeColor,\n        style: gaugeStyle,\n        shape: type === 'meter' ? 'meter-gauge' : null,\n      },\n      args: {\n        zIndexReversed: true,\n        sortZIndex: true,\n      },\n      minColumnWidth: rangeWidth,\n      maxColumnWidth: rangeWidth,\n    },\n  });\n\n  const geometry = ext.geometry as Geometry;\n  // 传入到自定义 shape 中\n  geometry.customInfo({ meter });\n\n  v2.coordinate('polar', {\n    innerRadius,\n    radius,\n    startAngle,\n    endAngle,\n  }).transpose();\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  return flow(\n    scale({\n      range: {\n        min: 0,\n        max: 1,\n        maxLimit: 1,\n        minLimit: 0,\n      },\n      [PERCENT]: {},\n    })\n  )(params);\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params: Params<GaugeOptions>, updated?: boolean): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { statistic, percent } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  if (statistic) {\n    const { content: contentOption } = statistic;\n    let transformContent;\n    // 当设置 content 的时候，设置默认样式\n    if (contentOption) {\n      transformContent = deepAssign(\n        {},\n        {\n          content: `${(percent * 100).toFixed(2)}%`,\n          style: {\n            opacity: 0.75,\n            fontSize: '30px',\n            lineHeight: 1,\n            textAlign: 'center',\n            color: 'rgba(44,53,66,0.85)',\n          },\n        },\n        contentOption\n      );\n    }\n    renderGaugeStatistic(chart, { statistic: { ...statistic, content: transformContent } }, { percent });\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * tooltip 配置\n */\nfunction tooltip(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip) {\n    chart.tooltip(\n      deepAssign(\n        {\n          showTitle: false,\n          showMarkers: false,\n          containerTpl: '<div class=\"g2-tooltip\"><div class=\"g2-tooltip-list\"></div></div>',\n          domStyles: {\n            'g2-tooltip': {\n              padding: '4px 8px',\n              fontSize: '10px',\n            },\n          },\n          customContent: (x: string, data: any[]) => {\n            const percent = get(data, [0, 'data', PERCENT], 0);\n            return `${(percent * 100).toFixed(2)}%`;\n          },\n        },\n        tooltip\n      )\n    );\n  } else {\n    // 默认，不展示 tooltip\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction other(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart } = params;\n\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * 对外暴露的 adaptor\n */\nexport { statistic };\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<GaugeOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    theme,\n    // animation 配置必须在 createView 之前，不然无法让子 View 生效\n    animation,\n    geometry,\n    meta,\n    tooltip,\n    statistic,\n    interaction,\n    annotation(),\n    other\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}