{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nvar CORNER_PERCENT = 1 / 3;\nfunction getVHVPath(from, to) {\n  var points = [];\n  points.push({\n    x: from.x,\n    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT\n  });\n  points.push({\n    x: to.x,\n    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT\n  });\n  points.push(to);\n  var path = [['M', from.x, from.y]];\n  each(points, function (point) {\n    path.push(['L', point.x, point.y]);\n  });\n  return path;\n}\nregisterShape('edge', 'vhv', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false, 'lineWidth');\n    var points = cfg.points;\n    var path = this.parsePath(getVHVPath(points[0], points[1]));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      })\n    });\n  },\n  getMarker: function (markerCfg) {\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: markerCfg.color\n      }\n    };\n  }\n});","map":{"version":3,"names":["each","registerShape","getStyle","CORNER_PERCENT","getVHVPath","from","to","points","push","x","y","path","point","draw","cfg","container","style","parsePath","addShape","attrs","__assign","getMarker","markerCfg","symbol","r","fill","color"],"sources":["../../../../src/geometry/shape/edge/vhv.ts"],"sourcesContent":["import { each } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\n\nconst CORNER_PERCENT = 1 / 3;\n\nfunction getVHVPath(from: Point, to: Point) {\n  const points = [];\n  points.push({\n    x: from.x,\n    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,\n  });\n  points.push({\n    x: to.x,\n    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,\n  });\n  points.push(to);\n\n  const path = [['M', from.x, from.y]];\n  each(points, (point) => {\n    path.push(['L', point.x, point.y]);\n  });\n\n  return path;\n}\n\nregisterShape('edge', 'vhv', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false, 'lineWidth');\n    const points = cfg.points;\n    const path = this.parsePath(getVHVPath(points[0] as Point, points[1] as Point));\n    return container.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: markerCfg.color,\n      },\n    };\n  },\n});\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,YAAY;AAIjC,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAE5C,IAAMC,cAAc,GAAG,CAAC,GAAG,CAAC;AAE5B,SAASC,UAAUA,CAACC,IAAW,EAAEC,EAAS;EACxC,IAAMC,MAAM,GAAG,EAAE;EACjBA,MAAM,CAACC,IAAI,CAAC;IACVC,CAAC,EAAEJ,IAAI,CAACI,CAAC;IACTC,CAAC,EAAEL,IAAI,CAACK,CAAC,IAAI,CAAC,GAAGP,cAAc,CAAC,GAAGG,EAAE,CAACI,CAAC,GAAGP;GAC3C,CAAC;EACFI,MAAM,CAACC,IAAI,CAAC;IACVC,CAAC,EAAEH,EAAE,CAACG,CAAC;IACPC,CAAC,EAAEL,IAAI,CAACK,CAAC,IAAI,CAAC,GAAGP,cAAc,CAAC,GAAGG,EAAE,CAACI,CAAC,GAAGP;GAC3C,CAAC;EACFI,MAAM,CAACC,IAAI,CAACF,EAAE,CAAC;EAEf,IAAMK,IAAI,GAAG,CAAC,CAAC,GAAG,EAAEN,IAAI,CAACI,CAAC,EAAEJ,IAAI,CAACK,CAAC,CAAC,CAAC;EACpCV,IAAI,CAACO,MAAM,EAAE,UAACK,KAAK;IACjBD,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEI,KAAK,CAACH,CAAC,EAAEG,KAAK,CAACF,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC;EAEF,OAAOC,IAAI;AACb;AAEAV,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE;EAC3BY,IAAI,EAAJ,SAAAA,CAAKC,GAAc,EAAEC,SAAiB;IACpC,IAAMC,KAAK,GAAGd,QAAQ,CAACY,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC;IACrD,IAAMP,MAAM,GAAGO,GAAG,CAACP,MAAM;IACzB,IAAMI,IAAI,GAAG,IAAI,CAACM,SAAS,CAACb,UAAU,CAACG,MAAM,CAAC,CAAC,CAAU,EAAEA,MAAM,CAAC,CAAC,CAAU,CAAC,CAAC;IAC/E,OAAOQ,SAAS,CAACG,QAAQ,CAAC,MAAM,EAAE;MAChCC,KAAK,EAAAC,QAAA,CAAAA,QAAA,KACAJ,KAAK;QACRL,IAAI,EAAAA;MAAA;KAEP,CAAC;EACJ,CAAC;EACDU,SAAS,EAAT,SAAAA,CAAUC,SAAyB;IACjC,OAAO;MACLC,MAAM,EAAE,QAAQ;MAChBP,KAAK,EAAE;QACLQ,CAAC,EAAE,GAAG;QACNC,IAAI,EAAEH,SAAS,CAACI;;KAEnB;EACH;CACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}