{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { calculateCentroid, calculatePointsCenterAndRadius, lngLatToMeters, aProjectFlat } from '@antv/l7-utils';\nimport earcut from 'earcut';\n// @ts-ignore\nimport { vec3 } from 'gl-matrix';\nimport { EARTH_RADIUS, EARTH_RADIUS_OUTER, EARTH_SEGMENTS, lglt2xyz, primitiveSphere } from \"../earth/utils\";\nimport ExtrudePolyline from \"../utils/extrude_polyline\";\nimport extrudePolygon, { extrude_PolygonNormal, fillPolygon } from \"./shape/extrude\";\nimport { geometryShape } from \"./shape/Path\";\nvar GeometryCache = {};\n\n/**\n * 计算2D 填充点图顶点\n * @param feature 映射feature\n */\n\nexport function PointFillTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [].concat(_toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates)),\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length\n  };\n}\n/**\n * 计算2D 填充点图顶点 (地球模式)\n * @param feature 映射feature\n */\nexport function GlobelPointFillTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  var xyz = lglt2xyz(coordinates);\n  return {\n    vertices: [].concat(_toConsumableArray(xyz), _toConsumableArray(xyz), _toConsumableArray(xyz), _toConsumableArray(xyz)),\n    indices: [0, 1, 2, 2, 3, 0],\n    size: xyz.length\n  };\n}\n\n/**\n * 计算3D 拉伸点图\n * @param feature 映射feature\n */\nexport function PointExtrudeTriangulation(feature) {\n  var shape = feature.shape;\n  var _getGeometry = getGeometry(shape, false),\n    positions = _getGeometry.positions,\n    index = _getGeometry.index,\n    normals = _getGeometry.normals;\n  return {\n    vertices: positions,\n    indices: index,\n    normals: normals,\n    size: 5\n  };\n}\n\n/**\n * 计算图片标注\n * @param feature 映射feature\n */\nexport function PointImageTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: _toConsumableArray(coordinates),\n    indices: [0],\n    size: coordinates.length\n  };\n}\n\n/**\n * 线三角化\n * @param feature 映射feature\n */\nexport function LineTriangulation(feature) {\n  var coordinates = feature.coordinates,\n    originCoordinates = feature.originCoordinates,\n    version = feature.version;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  var line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel'\n  });\n  if (version === 'GAODE2.x') {\n    // 处理高德2.0几何体构建\n    var path1 = coordinates; // 计算位置\n    if (!Array.isArray(path1[0][0])) {\n      path1 = [coordinates];\n    }\n    var path2 = originCoordinates; // 计算法线\n    if (!Array.isArray(path2[0][0])) {\n      path2 = [originCoordinates];\n    }\n    for (var i = 0; i < path1.length; i++) {\n      // 高德2.0在计算线时，需要使用经纬度计算发现，使用 customCoords.lnglatToCoords 计算的数据来计算顶点的位置\n      var item1 = path1[i];\n      var item2 = path2[i];\n      line.extrude_gaode2(item1, item2);\n    }\n  } else {\n    // 处理非高德2.0的几何体构建\n    var path = coordinates;\n    if (path[0] && !Array.isArray(path[0][0])) {\n      path = [coordinates];\n    }\n    path.forEach(function (item) {\n      line.extrude(item);\n    });\n  }\n  var linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions,\n    // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    indexes: linebuffer.indexes,\n    size: 6\n  };\n}\nexport function FlowLineFillTriangulation(feature) {\n  // @ts-ignore\n  var coord = feature.coordinates.flat();\n  var tin = 1;\n  var tout = 1.0;\n  return {\n    vertices: [1, 0, 0].concat(_toConsumableArray(coord), [\n    // 0\n    1, 2, -3], _toConsumableArray(coord), [\n    // 1\n    1, 1, -3], _toConsumableArray(coord), [\n    // 2\n    0, 1, 0], _toConsumableArray(coord), [\n    // 3\n    0, 0, 0], _toConsumableArray(coord), [\n    // 4\n    1, 0, 0], _toConsumableArray(coord), [\n    // 0\n    1, 2, -3], _toConsumableArray(coord), [\n    // 1\n    1, 1, -3], _toConsumableArray(coord), [\n    // 2\n    0, 1, 0], _toConsumableArray(coord), [\n    // 3\n    0, 0, 0], _toConsumableArray(coord)),\n    normals: [-tin, 2 * tout, 1,\n    // 0\n    2 * tout, -tout, 1,\n    // 1\n    tout, -tout, 1,\n    // 2\n    tout, -tout, 1,\n    // 3\n    -tin, -tout, 1,\n    // 4\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    indices: [0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 6, 7, 5, 7, 8, 5, 8, 9],\n    size: 7\n  };\n}\nexport function SimpleLineTriangulation(feature) {\n  var coordinates = feature.coordinates,\n    originCoordinates = feature.originCoordinates;\n  var pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      normals: [],\n      size: 6,\n      count: 0\n    };\n  }\n  var _getSimpleLineVertice = getSimpleLineVertices(coordinates, originCoordinates),\n    results = _getSimpleLineVertice.results,\n    totalDistance = _getSimpleLineVertice.totalDistance;\n  results.map(function (point) {\n    pos.push(point[0], point[1], point[2], point[3], 0, totalDistance);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    normals: [],\n    size: 6,\n    count: results.length\n  };\n}\nexport function TileSimpleLineTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      size: 4,\n      count: 0\n    };\n  }\n  var _getTileSimpleLineVer = getTileSimpleLineVertices(coordinates),\n    results = _getTileSimpleLineVer.results;\n  results.map(function (point) {\n    pos.push(point[0], point[1], point[2], point[3]);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    size: 4,\n    count: results.length\n  };\n}\nfunction lineSegmentDistance(b1, a1) {\n  var dx = a1[0] - b1[0];\n  var dy = a1[1] - b1[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction pushDis(point, n) {\n  if (point.length < 3) {\n    point.push(0);\n  }\n  if (n !== undefined) {\n    point.push(n);\n  }\n  return point;\n}\nfunction getSimpleLineVertices(coordinates, originCoordinates) {\n  var points = coordinates;\n  //除了amap2.0以外 coordinates就是经纬度数据\n  var originPoints = originCoordinates || coordinates;\n  if (Array.isArray(points) && Array.isArray(points[0]) && Array.isArray(points[0][0])) {\n    // @ts-ignore\n    points = originCoordinates.flat();\n    // @ts-ignore\n    originPoints = originCoordinates.flat();\n  }\n  //修改计算距离的方式,与普通线的计算方式保持一致 edit by huyang 20231214\n  var distance = 0;\n  if (points.length < 2) {\n    return {\n      results: points,\n      totalDistance: 0\n    };\n  } else {\n    var results = [];\n    var point = pushDis(points[0], distance);\n    results.push(point);\n    for (var i = 1; i < points.length - 1; i++) {\n      var subDistance = lineSegmentDistance(aProjectFlat(originPoints[i - 1]), aProjectFlat(originPoints[i]));\n      distance += subDistance;\n      var mulPoint = pushDis(points[i], distance);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    var pointDistance = lineSegmentDistance(aProjectFlat(originPoints[originPoints.length - 2]), aProjectFlat(originPoints[originPoints.length - 1]));\n    distance += pointDistance;\n    results.push(pushDis(points[points.length - 1], distance));\n    return {\n      results: results,\n      totalDistance: distance\n    };\n  }\n}\nfunction getTileSimpleLineVertices(points) {\n  if (points.length < 2) {\n    return {\n      results: points\n    };\n  } else {\n    var results = [];\n    var point = pushDis(points[0]);\n    results.push(point);\n    for (var i = 1; i < points.length - 1; i++) {\n      var mulPoint = pushDis(points[i]);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    results.push(pushDis(points[points.length - 1]));\n    return {\n      results: results\n    };\n  }\n}\nexport function polygonTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var flattengeo = earcut.flatten(coordinates);\n  var vertices = flattengeo.vertices,\n    dimensions = flattengeo.dimensions,\n    holes = flattengeo.holes;\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices: vertices,\n    size: dimensions\n  };\n}\n\n// 构建几何图形（带有中心点和大小）\nexport function polygonTriangulationWithCenter(feature) {\n  var coordinates = feature.coordinates;\n  var flattengeo = earcut.flatten(coordinates);\n  var vertices = flattengeo.vertices,\n    dimensions = flattengeo.dimensions,\n    holes = flattengeo.holes;\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices: getVerticesWithCenter(vertices),\n    size: dimensions + 4\n  };\n}\nfunction getVerticesWithCenter(vertices) {\n  var verticesWithCenter = [];\n  var _calculatePointsCente = calculatePointsCenterAndRadius(vertices),\n    center = _calculatePointsCente.center,\n    radius = _calculatePointsCente.radius;\n  for (var i = 0; i < vertices.length; i += 2) {\n    var lng = vertices[i];\n    var lat = vertices[i + 1];\n    verticesWithCenter.push.apply(verticesWithCenter, [lng, lat, 0].concat(_toConsumableArray(center), [radius]));\n  }\n  return verticesWithCenter;\n}\nexport function PolygonExtrudeTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var _extrude_PolygonNorma = extrude_PolygonNormal(coordinates, true),\n    positions = _extrude_PolygonNorma.positions,\n    index = _extrude_PolygonNorma.index,\n    normals = _extrude_PolygonNorma.normals;\n  return {\n    vertices: positions,\n    // [ x, y, z, uv.x,uv.y ]\n    indices: index,\n    normals: normals,\n    size: 5\n  };\n}\nexport function HeatmapGridTriangulation(feature) {\n  var shape = feature.shape;\n  var _getHeatmapGeometry = getHeatmapGeometry(shape),\n    positions = _getHeatmapGeometry.positions,\n    index = _getHeatmapGeometry.index;\n  return {\n    vertices: positions,\n    // [ x, y, z ] 多边形顶点\n    indices: index,\n    size: 3\n  };\n}\n\n/**\n * 图片图层顶点构造\n * @param feature 数据\n */\nexport function RasterImageTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  // [ x, y, z. uv.x, uv.y]\n  var positions = [].concat(_toConsumableArray(coordinates[0]), [0, 0, 1, coordinates[1][0], coordinates[0][1], 0, 1, 1], _toConsumableArray(coordinates[1]), [0, 1, 0], _toConsumableArray(coordinates[0]), [0, 0, 1], _toConsumableArray(coordinates[1]), [0, 1, 0, coordinates[0][0], coordinates[1][1], 0, 0, 0]);\n  var indexs = [0, 1, 2, 3, 4, 5];\n  return {\n    vertices: positions,\n    indices: indexs,\n    size: 5\n  };\n}\n\n/**\n *  计算3D弧线顶点\n * @param feature 映射数据\n * @param segNum 弧线线段数\n */\nexport function LineArcTriangulation(feature, styleOption) {\n  // @ts-ignore\n  var _styleOption$segmentN = styleOption.segmentNumber,\n    segmentNumber = _styleOption$segmentN === void 0 ? 30 : _styleOption$segmentN;\n  var coordinates = feature.coordinates;\n  var positions = [];\n  var indexArray = [];\n  var _loop = function _loop(i) {\n    // 上线两个顶点\n    // [ x, y, z, sx,sy, tx,ty]\n    positions.push(i, 1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1], i, -1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1]);\n    if (i !== segmentNumber - 1) {\n      indexArray.push.apply(indexArray, _toConsumableArray([0, 1, 2, 1, 3, 2].map(function (v) {\n        return i * 2 + v;\n      })));\n    }\n  };\n  for (var i = 0; i < segmentNumber; i++) {\n    _loop(i);\n  }\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 7\n  };\n}\n\n/**\n * 构建热力图密度图的顶点\n * @param feature\n * @returns\n */\nexport function HeatmapTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  if (coordinates.length === 2) {\n    coordinates.push(0);\n  }\n  var dir = addDir(-1, 1);\n  var dir1 = addDir(1, 1);\n  var dir2 = addDir(-1, -1);\n  var dir3 = addDir(1, -1);\n  // [x,y,z, dirx ,diry, weight]\n  var positions = [].concat(_toConsumableArray(coordinates), _toConsumableArray(dir), _toConsumableArray(coordinates), _toConsumableArray(dir2), _toConsumableArray(coordinates), _toConsumableArray(dir3), _toConsumableArray(coordinates), _toConsumableArray(dir1));\n  var indexArray = [0, 1, 2, 3, 0, 2];\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 5\n  };\n}\n\n/**\n * 点图层3d geomerty\n * @param shape 3D形状\n */\nfunction getGeometry(shape) {\n  var needFlat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (GeometryCache && GeometryCache[shape]) {\n    return GeometryCache[shape];\n  }\n  var path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.cylinder();\n  var geometry = extrude_PolygonNormal([path], needFlat);\n  GeometryCache[shape] = geometry;\n  return geometry;\n}\nexport function computeVertexNormals(positions, indexArray) {\n  var dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  var needFlat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var normals = new Float32Array(positions.length / dim * 3);\n  var vA;\n  var vB;\n  var vC;\n  var cb = vec3.create();\n  var ab = vec3.create();\n  var normal = vec3.create();\n  for (var i = 0, li = indexArray.length; i < li; i += 3) {\n    vA = indexArray[i + 0] * 3;\n    vB = indexArray[i + 1] * 3;\n    vC = indexArray[i + 2] * 3;\n    var p1 = [positions[vA], positions[vA + 1]];\n    var p2 = [positions[vB], positions[vB + 1]];\n    var p3 = [positions[vC], positions[vC + 1]];\n    if (needFlat) {\n      p1 = lngLatToMeters(p1);\n      p2 = lngLatToMeters(p2);\n      p3 = lngLatToMeters(p3);\n    }\n    var _p = p1,\n      _p2 = _slicedToArray(_p, 2),\n      ax = _p2[0],\n      ay = _p2[1];\n    var pA = vec3.fromValues(ax, ay, positions[vA + 2]);\n    var _p3 = p2,\n      _p4 = _slicedToArray(_p3, 2),\n      bx = _p4[0],\n      by = _p4[1];\n    var pB = vec3.fromValues(bx, by, positions[vB + 2]);\n    var _p5 = p3,\n      _p6 = _slicedToArray(_p5, 2),\n      cx = _p6[0],\n      cy = _p6[1];\n    var pC = vec3.fromValues(cx, cy, positions[vC + 2]);\n    vec3.sub(cb, pC, pB);\n    vec3.sub(ab, pA, pB);\n    vec3.cross(normal, cb, ab);\n    normals[vA] += cb[0];\n    normals[vA + 1] += cb[1];\n    normals[vA + 2] += cb[2];\n    normals[vB] += cb[0];\n    normals[vB + 1] += cb[1];\n    normals[vB + 2] += cb[2];\n    normals[vC] += cb[0];\n    normals[vC + 1] += cb[1];\n    normals[vC + 2] += cb[2];\n  }\n  normalizeNormals(normals);\n  return normals;\n}\nfunction normalizeNormals(normals) {\n  for (var i = 0, li = normals.length; i < li; i += 3) {\n    var normal = vec3.fromValues(normals[i], normals[i + 1], normals[i + 2]);\n    var newNormal = vec3.create();\n    vec3.normalize(newNormal, normal);\n    normals.set(newNormal, i);\n  }\n}\nexport function checkIsClosed(points) {\n  var p1 = points[0][0];\n  var p2 = points[0][points[0].length - 1];\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\nfunction getHeatmapGeometry(shape) {\n  var shape3d = ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'];\n  var path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.circle();\n  var geometry = shape3d.indexOf(shape) === -1 ? fillPolygon([path]) : extrudePolygon([path]);\n  // const geometry = fillPolygon([path]);\n  return geometry;\n}\n// 热力图计算范围\nfunction addDir(dirX, dirY) {\n  var x = (dirX + 1) / 2;\n  var y = (dirY + 1) / 2;\n  return [x, y];\n}\n\n/**\n * 构建地球三角网格\n * @returns\n */\nexport function earthTriangulation() {\n  var earthmesh = primitiveSphere(EARTH_RADIUS, {\n    segments: EARTH_SEGMENTS\n  });\n  var positionsArr = earthmesh.positionsArr,\n    indicesArr = earthmesh.indicesArr,\n    normalArr = earthmesh.normalArr;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}\nexport function earthOuterTriangulation() {\n  var earthmesh = primitiveSphere(EARTH_RADIUS + EARTH_RADIUS_OUTER, {\n    segments: EARTH_SEGMENTS\n  });\n  var positionsArr = earthmesh.positionsArr,\n    indicesArr = earthmesh.indicesArr,\n    normalArr = earthmesh.normalArr;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}","map":{"version":3,"names":["_slicedToArray","_toConsumableArray","calculateCentroid","calculatePointsCenterAndRadius","lngLatToMeters","aProjectFlat","earcut","vec3","EARTH_RADIUS","EARTH_RADIUS_OUTER","EARTH_SEGMENTS","lglt2xyz","primitiveSphere","ExtrudePolyline","extrudePolygon","extrude_PolygonNormal","fillPolygon","geometryShape","GeometryCache","PointFillTriangulation","feature","coordinates","vertices","concat","indices","size","length","GlobelPointFillTriangulation","xyz","PointExtrudeTriangulation","shape","_getGeometry","getGeometry","positions","index","normals","PointImageTriangulation","LineTriangulation","originCoordinates","version","line","dash","join","path1","Array","isArray","path2","i","item1","item2","extrude_gaode2","path","forEach","item","extrude","linebuffer","complex","indexes","FlowLineFillTriangulation","coord","flat","tin","tout","SimpleLineTriangulation","pos","count","_getSimpleLineVertice","getSimpleLineVertices","results","totalDistance","map","point","push","TileSimpleLineTriangulation","_getTileSimpleLineVer","getTileSimpleLineVertices","lineSegmentDistance","b1","a1","dx","dy","Math","sqrt","pushDis","n","undefined","points","originPoints","distance","subDistance","mulPoint","pointDistance","polygonTriangulation","flattengeo","flatten","dimensions","holes","polygonTriangulationWithCenter","getVerticesWithCenter","verticesWithCenter","_calculatePointsCente","center","radius","lng","lat","apply","PolygonExtrudeTriangulation","_extrude_PolygonNorma","HeatmapGridTriangulation","_getHeatmapGeometry","getHeatmapGeometry","RasterImageTriangulation","indexs","LineArcTriangulation","styleOption","_styleOption$segmentN","segmentNumber","indexArray","_loop","v","HeatmapTriangulation","dir","addDir","dir1","dir2","dir3","needFlat","arguments","cylinder","geometry","computeVertexNormals","dim","Float32Array","vA","vB","vC","cb","create","ab","normal","li","p1","p2","p3","_p","_p2","ax","ay","pA","fromValues","_p3","_p4","bx","by","pB","_p5","_p6","cx","cy","pC","sub","cross","normalizeNormals","newNormal","normalize","set","checkIsClosed","shape3d","circle","indexOf","dirX","dirY","x","y","earthTriangulation","earthmesh","segments","positionsArr","indicesArr","normalArr","earthOuterTriangulation"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/l7-layers/es/core/triangulation.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { calculateCentroid, calculatePointsCenterAndRadius, lngLatToMeters, aProjectFlat } from '@antv/l7-utils';\nimport earcut from 'earcut';\n// @ts-ignore\nimport { vec3 } from 'gl-matrix';\nimport { EARTH_RADIUS, EARTH_RADIUS_OUTER, EARTH_SEGMENTS, lglt2xyz, primitiveSphere } from \"../earth/utils\";\nimport ExtrudePolyline from \"../utils/extrude_polyline\";\nimport extrudePolygon, { extrude_PolygonNormal, fillPolygon } from \"./shape/extrude\";\nimport { geometryShape } from \"./shape/Path\";\nvar GeometryCache = {};\n\n/**\n * 计算2D 填充点图顶点\n * @param feature 映射feature\n */\n\nexport function PointFillTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: [].concat(_toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates), _toConsumableArray(coordinates)),\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length\n  };\n}\n/**\n * 计算2D 填充点图顶点 (地球模式)\n * @param feature 映射feature\n */\nexport function GlobelPointFillTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  var xyz = lglt2xyz(coordinates);\n  return {\n    vertices: [].concat(_toConsumableArray(xyz), _toConsumableArray(xyz), _toConsumableArray(xyz), _toConsumableArray(xyz)),\n    indices: [0, 1, 2, 2, 3, 0],\n    size: xyz.length\n  };\n}\n\n/**\n * 计算3D 拉伸点图\n * @param feature 映射feature\n */\nexport function PointExtrudeTriangulation(feature) {\n  var shape = feature.shape;\n  var _getGeometry = getGeometry(shape, false),\n    positions = _getGeometry.positions,\n    index = _getGeometry.index,\n    normals = _getGeometry.normals;\n  return {\n    vertices: positions,\n    indices: index,\n    normals: normals,\n    size: 5\n  };\n}\n\n/**\n * 计算图片标注\n * @param feature 映射feature\n */\nexport function PointImageTriangulation(feature) {\n  var coordinates = calculateCentroid(feature.coordinates);\n  return {\n    vertices: _toConsumableArray(coordinates),\n    indices: [0],\n    size: coordinates.length\n  };\n}\n\n/**\n * 线三角化\n * @param feature 映射feature\n */\nexport function LineTriangulation(feature) {\n  var coordinates = feature.coordinates,\n    originCoordinates = feature.originCoordinates,\n    version = feature.version;\n  // let path = coordinates as number[][][] | number[][];\n  // if (!Array.isArray(path[0][0])) {\n  //   path = [coordinates] as number[][][];\n  // }\n\n  var line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel'\n  });\n  if (version === 'GAODE2.x') {\n    // 处理高德2.0几何体构建\n    var path1 = coordinates; // 计算位置\n    if (!Array.isArray(path1[0][0])) {\n      path1 = [coordinates];\n    }\n    var path2 = originCoordinates; // 计算法线\n    if (!Array.isArray(path2[0][0])) {\n      path2 = [originCoordinates];\n    }\n    for (var i = 0; i < path1.length; i++) {\n      // 高德2.0在计算线时，需要使用经纬度计算发现，使用 customCoords.lnglatToCoords 计算的数据来计算顶点的位置\n      var item1 = path1[i];\n      var item2 = path2[i];\n      line.extrude_gaode2(item1, item2);\n    }\n  } else {\n    // 处理非高德2.0的几何体构建\n    var path = coordinates;\n    if (path[0] && !Array.isArray(path[0][0])) {\n      path = [coordinates];\n    }\n    path.forEach(function (item) {\n      line.extrude(item);\n    });\n  }\n  var linebuffer = line.complex;\n  return {\n    vertices: linebuffer.positions,\n    // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    indexes: linebuffer.indexes,\n    size: 6\n  };\n}\nexport function FlowLineFillTriangulation(feature) {\n  // @ts-ignore\n  var coord = feature.coordinates.flat();\n  var tin = 1;\n  var tout = 1.0;\n  return {\n    vertices: [1, 0, 0].concat(_toConsumableArray(coord), [\n    // 0\n    1, 2, -3], _toConsumableArray(coord), [\n    // 1\n    1, 1, -3], _toConsumableArray(coord), [\n    // 2\n    0, 1, 0], _toConsumableArray(coord), [\n    // 3\n    0, 0, 0], _toConsumableArray(coord), [\n    // 4\n    1, 0, 0], _toConsumableArray(coord), [\n    // 0\n    1, 2, -3], _toConsumableArray(coord), [\n    // 1\n    1, 1, -3], _toConsumableArray(coord), [\n    // 2\n    0, 1, 0], _toConsumableArray(coord), [\n    // 3\n    0, 0, 0], _toConsumableArray(coord)),\n    normals: [-tin, 2 * tout, 1,\n    // 0\n    2 * tout, -tout, 1,\n    // 1\n    tout, -tout, 1,\n    // 2\n    tout, -tout, 1,\n    // 3\n    -tin, -tout, 1,\n    // 4\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    indices: [0, 1, 2, 0, 2, 3, 0, 3, 4, 5, 6, 7, 5, 7, 8, 5, 8, 9],\n    size: 7\n  };\n}\nexport function SimpleLineTriangulation(feature) {\n  var coordinates = feature.coordinates,\n    originCoordinates = feature.originCoordinates;\n  var pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      normals: [],\n      size: 6,\n      count: 0\n    };\n  }\n  var _getSimpleLineVertice = getSimpleLineVertices(coordinates, originCoordinates),\n    results = _getSimpleLineVertice.results,\n    totalDistance = _getSimpleLineVertice.totalDistance;\n  results.map(function (point) {\n    pos.push(point[0], point[1], point[2], point[3], 0, totalDistance);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    normals: [],\n    size: 6,\n    count: results.length\n  };\n}\nexport function TileSimpleLineTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var pos = [];\n  if (!Array.isArray(coordinates[0])) {\n    return {\n      vertices: [],\n      indices: [],\n      size: 4,\n      count: 0\n    };\n  }\n  var _getTileSimpleLineVer = getTileSimpleLineVertices(coordinates),\n    results = _getTileSimpleLineVer.results;\n  results.map(function (point) {\n    pos.push(point[0], point[1], point[2], point[3]);\n  });\n  return {\n    vertices: pos,\n    indices: [],\n    size: 4,\n    count: results.length\n  };\n}\nfunction lineSegmentDistance(b1, a1) {\n  var dx = a1[0] - b1[0];\n  var dy = a1[1] - b1[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\nfunction pushDis(point, n) {\n  if (point.length < 3) {\n    point.push(0);\n  }\n  if (n !== undefined) {\n    point.push(n);\n  }\n  return point;\n}\nfunction getSimpleLineVertices(coordinates, originCoordinates) {\n  var points = coordinates;\n  //除了amap2.0以外 coordinates就是经纬度数据\n  var originPoints = originCoordinates || coordinates;\n  if (Array.isArray(points) && Array.isArray(points[0]) && Array.isArray(points[0][0])) {\n    // @ts-ignore\n    points = originCoordinates.flat();\n    // @ts-ignore\n    originPoints = originCoordinates.flat();\n  }\n  //修改计算距离的方式,与普通线的计算方式保持一致 edit by huyang 20231214\n  var distance = 0;\n  if (points.length < 2) {\n    return {\n      results: points,\n      totalDistance: 0\n    };\n  } else {\n    var results = [];\n    var point = pushDis(points[0], distance);\n    results.push(point);\n    for (var i = 1; i < points.length - 1; i++) {\n      var subDistance = lineSegmentDistance(aProjectFlat(originPoints[i - 1]), aProjectFlat(originPoints[i]));\n      distance += subDistance;\n      var mulPoint = pushDis(points[i], distance);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    var pointDistance = lineSegmentDistance(aProjectFlat(originPoints[originPoints.length - 2]), aProjectFlat(originPoints[originPoints.length - 1]));\n    distance += pointDistance;\n    results.push(pushDis(points[points.length - 1], distance));\n    return {\n      results: results,\n      totalDistance: distance\n    };\n  }\n}\nfunction getTileSimpleLineVertices(points) {\n  if (points.length < 2) {\n    return {\n      results: points\n    };\n  } else {\n    var results = [];\n    var point = pushDis(points[0]);\n    results.push(point);\n    for (var i = 1; i < points.length - 1; i++) {\n      var mulPoint = pushDis(points[i]);\n      results.push(mulPoint);\n      results.push(mulPoint);\n    }\n    results.push(pushDis(points[points.length - 1]));\n    return {\n      results: results\n    };\n  }\n}\nexport function polygonTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var flattengeo = earcut.flatten(coordinates);\n  var vertices = flattengeo.vertices,\n    dimensions = flattengeo.dimensions,\n    holes = flattengeo.holes;\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices: vertices,\n    size: dimensions\n  };\n}\n\n// 构建几何图形（带有中心点和大小）\nexport function polygonTriangulationWithCenter(feature) {\n  var coordinates = feature.coordinates;\n  var flattengeo = earcut.flatten(coordinates);\n  var vertices = flattengeo.vertices,\n    dimensions = flattengeo.dimensions,\n    holes = flattengeo.holes;\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices: getVerticesWithCenter(vertices),\n    size: dimensions + 4\n  };\n}\nfunction getVerticesWithCenter(vertices) {\n  var verticesWithCenter = [];\n  var _calculatePointsCente = calculatePointsCenterAndRadius(vertices),\n    center = _calculatePointsCente.center,\n    radius = _calculatePointsCente.radius;\n  for (var i = 0; i < vertices.length; i += 2) {\n    var lng = vertices[i];\n    var lat = vertices[i + 1];\n    verticesWithCenter.push.apply(verticesWithCenter, [lng, lat, 0].concat(_toConsumableArray(center), [radius]));\n  }\n  return verticesWithCenter;\n}\nexport function PolygonExtrudeTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  var _extrude_PolygonNorma = extrude_PolygonNormal(coordinates, true),\n    positions = _extrude_PolygonNorma.positions,\n    index = _extrude_PolygonNorma.index,\n    normals = _extrude_PolygonNorma.normals;\n  return {\n    vertices: positions,\n    // [ x, y, z, uv.x,uv.y ]\n    indices: index,\n    normals: normals,\n    size: 5\n  };\n}\nexport function HeatmapGridTriangulation(feature) {\n  var shape = feature.shape;\n  var _getHeatmapGeometry = getHeatmapGeometry(shape),\n    positions = _getHeatmapGeometry.positions,\n    index = _getHeatmapGeometry.index;\n  return {\n    vertices: positions,\n    // [ x, y, z ] 多边形顶点\n    indices: index,\n    size: 3\n  };\n}\n\n/**\n * 图片图层顶点构造\n * @param feature 数据\n */\nexport function RasterImageTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  // [ x, y, z. uv.x, uv.y]\n  var positions = [].concat(_toConsumableArray(coordinates[0]), [0, 0, 1, coordinates[1][0], coordinates[0][1], 0, 1, 1], _toConsumableArray(coordinates[1]), [0, 1, 0], _toConsumableArray(coordinates[0]), [0, 0, 1], _toConsumableArray(coordinates[1]), [0, 1, 0, coordinates[0][0], coordinates[1][1], 0, 0, 0]);\n  var indexs = [0, 1, 2, 3, 4, 5];\n  return {\n    vertices: positions,\n    indices: indexs,\n    size: 5\n  };\n}\n\n/**\n *  计算3D弧线顶点\n * @param feature 映射数据\n * @param segNum 弧线线段数\n */\nexport function LineArcTriangulation(feature, styleOption) {\n  // @ts-ignore\n  var _styleOption$segmentN = styleOption.segmentNumber,\n    segmentNumber = _styleOption$segmentN === void 0 ? 30 : _styleOption$segmentN;\n  var coordinates = feature.coordinates;\n  var positions = [];\n  var indexArray = [];\n  var _loop = function _loop(i) {\n    // 上线两个顶点\n    // [ x, y, z, sx,sy, tx,ty]\n    positions.push(i, 1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1], i, -1, i, coordinates[0][0], coordinates[0][1], coordinates[1][0], coordinates[1][1]);\n    if (i !== segmentNumber - 1) {\n      indexArray.push.apply(indexArray, _toConsumableArray([0, 1, 2, 1, 3, 2].map(function (v) {\n        return i * 2 + v;\n      })));\n    }\n  };\n  for (var i = 0; i < segmentNumber; i++) {\n    _loop(i);\n  }\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 7\n  };\n}\n\n/**\n * 构建热力图密度图的顶点\n * @param feature\n * @returns\n */\nexport function HeatmapTriangulation(feature) {\n  var coordinates = feature.coordinates;\n  if (coordinates.length === 2) {\n    coordinates.push(0);\n  }\n  var dir = addDir(-1, 1);\n  var dir1 = addDir(1, 1);\n  var dir2 = addDir(-1, -1);\n  var dir3 = addDir(1, -1);\n  // [x,y,z, dirx ,diry, weight]\n  var positions = [].concat(_toConsumableArray(coordinates), _toConsumableArray(dir), _toConsumableArray(coordinates), _toConsumableArray(dir2), _toConsumableArray(coordinates), _toConsumableArray(dir3), _toConsumableArray(coordinates), _toConsumableArray(dir1));\n  var indexArray = [0, 1, 2, 3, 0, 2];\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 5\n  };\n}\n\n/**\n * 点图层3d geomerty\n * @param shape 3D形状\n */\nfunction getGeometry(shape) {\n  var needFlat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (GeometryCache && GeometryCache[shape]) {\n    return GeometryCache[shape];\n  }\n  var path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.cylinder();\n  var geometry = extrude_PolygonNormal([path], needFlat);\n  GeometryCache[shape] = geometry;\n  return geometry;\n}\nexport function computeVertexNormals(positions, indexArray) {\n  var dim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  var needFlat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var normals = new Float32Array(positions.length / dim * 3);\n  var vA;\n  var vB;\n  var vC;\n  var cb = vec3.create();\n  var ab = vec3.create();\n  var normal = vec3.create();\n  for (var i = 0, li = indexArray.length; i < li; i += 3) {\n    vA = indexArray[i + 0] * 3;\n    vB = indexArray[i + 1] * 3;\n    vC = indexArray[i + 2] * 3;\n    var p1 = [positions[vA], positions[vA + 1]];\n    var p2 = [positions[vB], positions[vB + 1]];\n    var p3 = [positions[vC], positions[vC + 1]];\n    if (needFlat) {\n      p1 = lngLatToMeters(p1);\n      p2 = lngLatToMeters(p2);\n      p3 = lngLatToMeters(p3);\n    }\n    var _p = p1,\n      _p2 = _slicedToArray(_p, 2),\n      ax = _p2[0],\n      ay = _p2[1];\n    var pA = vec3.fromValues(ax, ay, positions[vA + 2]);\n    var _p3 = p2,\n      _p4 = _slicedToArray(_p3, 2),\n      bx = _p4[0],\n      by = _p4[1];\n    var pB = vec3.fromValues(bx, by, positions[vB + 2]);\n    var _p5 = p3,\n      _p6 = _slicedToArray(_p5, 2),\n      cx = _p6[0],\n      cy = _p6[1];\n    var pC = vec3.fromValues(cx, cy, positions[vC + 2]);\n    vec3.sub(cb, pC, pB);\n    vec3.sub(ab, pA, pB);\n    vec3.cross(normal, cb, ab);\n    normals[vA] += cb[0];\n    normals[vA + 1] += cb[1];\n    normals[vA + 2] += cb[2];\n    normals[vB] += cb[0];\n    normals[vB + 1] += cb[1];\n    normals[vB + 2] += cb[2];\n    normals[vC] += cb[0];\n    normals[vC + 1] += cb[1];\n    normals[vC + 2] += cb[2];\n  }\n  normalizeNormals(normals);\n  return normals;\n}\nfunction normalizeNormals(normals) {\n  for (var i = 0, li = normals.length; i < li; i += 3) {\n    var normal = vec3.fromValues(normals[i], normals[i + 1], normals[i + 2]);\n    var newNormal = vec3.create();\n    vec3.normalize(newNormal, normal);\n    normals.set(newNormal, i);\n  }\n}\nexport function checkIsClosed(points) {\n  var p1 = points[0][0];\n  var p2 = points[0][points[0].length - 1];\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\nfunction getHeatmapGeometry(shape) {\n  var shape3d = ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'];\n  var path = geometryShape[shape] ? geometryShape[shape]() : geometryShape.circle();\n  var geometry = shape3d.indexOf(shape) === -1 ? fillPolygon([path]) : extrudePolygon([path]);\n  // const geometry = fillPolygon([path]);\n  return geometry;\n}\n// 热力图计算范围\nfunction addDir(dirX, dirY) {\n  var x = (dirX + 1) / 2;\n  var y = (dirY + 1) / 2;\n  return [x, y];\n}\n\n/**\n * 构建地球三角网格\n * @returns\n */\nexport function earthTriangulation() {\n  var earthmesh = primitiveSphere(EARTH_RADIUS, {\n    segments: EARTH_SEGMENTS\n  });\n  var positionsArr = earthmesh.positionsArr,\n    indicesArr = earthmesh.indicesArr,\n    normalArr = earthmesh.normalArr;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}\nexport function earthOuterTriangulation() {\n  var earthmesh = primitiveSphere(EARTH_RADIUS + EARTH_RADIUS_OUTER, {\n    segments: EARTH_SEGMENTS\n  });\n  var positionsArr = earthmesh.positionsArr,\n    indicesArr = earthmesh.indicesArr,\n    normalArr = earthmesh.normalArr;\n  return {\n    vertices: positionsArr,\n    indices: indicesArr,\n    size: 5,\n    normals: normalArr\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}