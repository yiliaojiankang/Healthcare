{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport PriorityQueue from './PriorityQueue';\nvar DEFAULT_WEIGHT_FUNC = function DEFAULT_WEIGHT_FUNC() {\n  return 1;\n};\n/**\n * @description Dijkstra's algorithm for single-source shortest paths.\n * @description https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n * @description.zh-CN Dijkstra 算法用于单源最短路径。\n */\n\nvar dijkstra = function dijkstra(graph, source, weightFn, edgeFn) {\n  return runDijkstra(graph, source, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) {\n    return graph.outEdges(v);\n  });\n};\n/**\n * @description Dijkstra's algorithm for single-source shortest paths.\n * @description https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n * @description.zh-CN Dijkstra 算法用于单源最短路径。\n */\n\nvar runDijkstra = function runDijkstra(graph, source, weightFn, edgeFn) {\n  var results = new Map();\n  var pq = new PriorityQueue();\n  var v;\n  var vEntry;\n  var updateNeighbors = function updateNeighbors(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results.get(w);\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n    if (weight < 0) {\n      throw new Error('dijkstra does not allow negative edge weights. ' + 'Bad edge: ' + edge + ' Weight: ' + weight);\n    } // If there is already a shorter path to w, ignore this edge.\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n  graph.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results.set(v, {\n      distance: distance\n    });\n    pq.add(v, distance);\n  });\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results.get(v);\n    if (vEntry && vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n    edgeFn(v).forEach(updateNeighbors);\n  }\n  var obj = {};\n  Array.from(results.entries()).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      node = _ref2[0],\n      e = _ref2[1];\n    obj[String(node)] = e;\n    return obj;\n  });\n  return obj;\n};\nexport default dijkstra;","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","PriorityQueue","DEFAULT_WEIGHT_FUNC","dijkstra","graph","source","weightFn","edgeFn","runDijkstra","v","outEdges","results","Map","pq","vEntry","updateNeighbors","edge","w","wEntry","get","weight","distance","Error","predecessor","decrease","nodes","forEach","Number","POSITIVE_INFINITY","set","add","size","removeMin","obj","entries","_ref","_ref2","node","e","String"],"sources":["D:/桌面文件/C4大赛/作品源代码/vue/node_modules/@antv/graphlib/es/algorithm/dijkstra.js"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport PriorityQueue from './PriorityQueue';\n\nvar DEFAULT_WEIGHT_FUNC = function DEFAULT_WEIGHT_FUNC() {\n  return 1;\n};\n/**\n * @description Dijkstra's algorithm for single-source shortest paths.\n * @description https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n * @description.zh-CN Dijkstra 算法用于单源最短路径。\n */\n\n\nvar dijkstra = function dijkstra(graph, source, weightFn, edgeFn) {\n  return runDijkstra(graph, source, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) {\n    return graph.outEdges(v);\n  });\n};\n/**\n * @description Dijkstra's algorithm for single-source shortest paths.\n * @description https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n * @description.zh-CN Dijkstra 算法用于单源最短路径。\n */\n\n\nvar runDijkstra = function runDijkstra(graph, source, weightFn, edgeFn) {\n  var results = new Map();\n  var pq = new PriorityQueue();\n  var v;\n  var vEntry;\n\n  var updateNeighbors = function updateNeighbors(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results.get(w);\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error('dijkstra does not allow negative edge weights. ' + 'Bad edge: ' + edge + ' Weight: ' + weight);\n    } // If there is already a shorter path to w, ignore this edge.\n\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  graph.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results.set(v, {\n      distance: distance\n    });\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results.get(v);\n\n    if (vEntry && vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  var obj = {};\n  Array.from(results.entries()).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        e = _ref2[1];\n\n    obj[String(node)] = e;\n    return obj;\n  });\n  return obj;\n};\n\nexport default dijkstra;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}