"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Swipe = void 0;
var tslib_1 = require("tslib");
var clock_1 = require("../utils/clock");
var gesture_1 = require("./gesture");
var SWIPE_TIME_GAP = 100;
var Swipe = /** @class */ (function (_super) {
    tslib_1.__extends(Swipe, _super);
    function Swipe() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENT = 'swipe';
        // 最后一次 move 的事件，用于区分 swipe 和 pan
        _this.latestMoveTime = 0;
        // 最后交互的时间，用于计算速度
        _this.ms = 0;
        // 最后的 move 速度，用于touchend 之后做惯性
        _this.speedX = 0;
        _this.speedY = 0;
        // 最后 move 的 x，y 位置
        _this.preX = 0;
        _this.preY = 0;
        return _this;
    }
    Swipe.prototype.onTouchCancel = function (ev) { };
    Swipe.prototype.onTouchEnd = function (ev) {
        var speedX = this.speedX;
        var speedY = this.speedY;
        if (clock_1.clock.now() - this.latestMoveTime < SWIPE_TIME_GAP) {
            var x = ev.x, y = ev.y;
            // 抛出事件
            this.emit({ x: x, y: y, speedX: speedX, speedY: speedY, event: ev });
        }
    };
    Swipe.prototype.onTouchMove = function (ev) {
        var x = ev.x, y = ev.y;
        var ms = clock_1.clock.now();
        // 1. 计算 wheel 偏移
        var deltaX = x - this.preX;
        var deltaY = y - this.preY;
        var deltaTime = ms - this.ms;
        // 2. 计算速度（简版吧）
        this.speedX = deltaX / deltaTime;
        this.speedY = deltaY / deltaTime;
        // 记录最后一次移动事件
        this.latestMoveTime = ms;
    };
    Swipe.prototype.onTouchStart = function (ev) {
        var x = ev.x, y = ev.y;
        // 初始化
        this.speedX = this.speedY = 0;
        this.preX = x;
        this.preY = y;
        this.ms = clock_1.clock.now();
    };
    return Swipe;
}(gesture_1.Gesture));
exports.Swipe = Swipe;
//# sourceMappingURL=swipe.js.map