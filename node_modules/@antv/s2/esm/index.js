var Shape = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get Base () { return ShapeBase$1; },
  get Circle () { return Circle$1; },
  get Ellipse () { return Ellipse$1; },
  get Image () { return ImageShape$1; },
  get Line () { return Line$1; },
  get Marker () { return Marker$1; },
  get Path () { return Path$1; },
  get Polygon () { return Polygon$1; },
  get Polyline () { return PolyLine$1; },
  get Rect () { return Rect$1; },
  get Text () { return Text$1; }
});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  };
  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray$1(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var isArrayLike$1 = function (value) {
    /**
     * isArrayLike([1, 2, 3]) => true
     * isArrayLike(document.body.children) => true
     * isArrayLike('abc') => true
     * isArrayLike(Function) => false
     */
    return value !== null && typeof value !== 'function' && isFinite(value.length);
};

var toString$2 = {}.toString;
var isType = function (value, type) { return toString$2.call(value) === '[object ' + type + ']'; };

/**
 * 是否为函数
 * @param  {*} fn 对象
 * @return {Boolean}  是否函数
 */
var isFunction$1 = (function (value) {
    return isType(value, 'Function');
});

// isFinite,
var isNil$1 = function (value) {
    /**
     * isNil(null) => true
     * isNil() => true
     */
    return value === null || value === undefined;
};

var isArray$2 = (function (value) {
    return Array.isArray ?
        Array.isArray(value) :
        isType(value, 'Array');
});

var isObject$1 = (function (value) {
    /**
     * isObject({}) => true
     * isObject([1, 2, 3]) => true
     * isObject(Function) => true
     * isObject(null) => false
     */
    var type = typeof value;
    return value !== null && type === 'object' || type === 'function';
});

function each(elements, func) {
    if (!elements) {
        return;
    }
    var rst;
    if (isArray$2(elements)) {
        for (var i = 0, len = elements.length; i < len; i++) {
            rst = func(elements[i], i);
            if (rst === false) {
                break;
            }
        }
    }
    else if (isObject$1(elements)) {
        for (var k in elements) {
            if (elements.hasOwnProperty(k)) {
                rst = func(elements[k], k);
                if (rst === false) {
                    break;
                }
            }
        }
    }
}

var isObjectLike$1 = function (value) {
    /**
     * isObjectLike({}) => true
     * isObjectLike([1, 2, 3]) => true
     * isObjectLike(Function) => false
     * isObjectLike(null) => false
     */
    return typeof value === 'object' && value !== null;
};

/**
 * @param {Array} arr The array to iterate over.
 * @return {*} Returns the maximum value.
 * @example
 *
 * max([1, 2]);
 * // => 2
 *
 * max([]);
 * // => undefined
 *
 * const data = new Array(1250010).fill(1).map((d,idx) => idx);
 *
 * max(data);
 * // => 1250010
 * // Math.max(...data) will encounter "Maximum call stack size exceeded" error
 */
var max$2 = (function (arr) {
    if (!isArray$2(arr)) {
        return undefined;
    }
    return arr.reduce(function (prev, curr) {
        return Math.max(prev, curr);
    }, arr[0]);
});

/**
 * @param {Array} arr The array to iterate over.
 * @return {*} Returns the minimum value.
 * @example
 *
 * min([1, 2]);
 * // => 1
 *
 * min([]);
 * // => undefined
 *
 * const data = new Array(1250010).fill(1).map((d,idx) => idx);
 *
 * min(data);
 * // => 1250010
 * // Math.min(...data) will encounter "Maximum call stack size exceeded" error
 */
var min$2 = (function (arr) {
    if (!isArray$2(arr)) {
        return undefined;
    }
    return arr.reduce(function (prev, curr) {
        return Math.min(prev, curr);
    }, arr[0]);
});

var isString$1 = (function (str) {
    return isType(str, 'String');
});

/**
 * 判断是否数字
 * @return {Boolean} 是否数字
 */
var isNumber$1 = function (value) {
    return isType(value, 'Number');
};

var PRECISION$1 = 0.00001; // numbers less than this is considered as 0
function isNumberEqual$1(a, b, precision) {
    if (precision === void 0) { precision = PRECISION$1; }
    return Math.abs((a - b)) < precision;
}

var mod$1 = function (n, m) {
    return ((n % m) + m) % m;
};

var RADIAN = Math.PI / 180;
var toRadian = function (degree) {
    return RADIAN * degree;
};

// @ts-ignore
var values$1 = Object.values ? function (obj) { return Object.values(obj); } : function (obj) {
    var result = [];
    each(obj, function (value, key) {
        if (!(isFunction$1(obj) && key === 'prototype')) {
            result.push(value);
        }
    });
    return result;
};

var toString$1 = (function (value) {
    if (isNil$1(value))
        return '';
    return value.toString();
});

var upperFirst$2 = function (value) {
    var str = toString$1(value);
    return str.charAt(0).toUpperCase() + str.substring(1);
};

function requestAnimationFrame$1(fn) {
    var method = window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        // @ts-ignore
        window.mozRequestAnimationFrame ||
        // @ts-ignore
        window.msRequestAnimationFrame ||
        function (f) {
            return setTimeout(f, 16);
        };
    return method(fn);
}

function cancelAnimationFrame$1(handler) {
    var method = window.cancelAnimationFrame ||
        window.webkitCancelAnimationFrame ||
        // @ts-ignore
        window.mozCancelAnimationFrame ||
        // @ts-ignore
        window.msCancelAnimationFrame ||
        clearTimeout;
    method(handler);
}

// FIXME: Mutable param should be forbidden in static lang.
function _mix(dist, obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key) && key !== 'constructor' && obj[key] !== undefined) {
            dist[key] = obj[key];
        }
    }
}
function mix(dist, src1, src2, src3) {
    if (src1)
        _mix(dist, src1);
    if (src2)
        _mix(dist, src2);
    if (src3)
        _mix(dist, src3);
    return dist;
}

/**
 * _.memoize(calColor);
 * _.memoize(calColor, (...args) => args[0]);
 * @param f
 * @param resolver
 */
var memoize$1 = (function (f, resolver) {
    if (!isFunction$1(f)) {
        throw new TypeError('Expected a function');
    }
    var memoized = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key
        var key = resolver ? resolver.apply(this, args) : args[0];
        var cache = memoized.cache;
        if (cache.has(key)) {
            return cache.get(key);
        }
        var result = f.apply(this, args);
        // 缓存起来
        cache.set(key, result);
        return result;
    };
    memoized.cache = new Map();
    return memoized;
});

var isEqual$2 = function (value, other) {
    if (value === other) {
        return true;
    }
    if (!value || !other) {
        return false;
    }
    if (isString$1(value) || isString$1(other)) {
        return false;
    }
    if (isArrayLike$1(value) || isArrayLike$1(other)) {
        if (value.length !== other.length) {
            return false;
        }
        var rst = true;
        for (var i = 0; i < value.length; i++) {
            rst = isEqual$2(value[i], other[i]);
            if (!rst) {
                break;
            }
        }
        return rst;
    }
    if (isObjectLike$1(value) || isObjectLike$1(other)) {
        var valueKeys = Object.keys(value);
        var otherKeys = Object.keys(other);
        if (valueKeys.length !== otherKeys.length) {
            return false;
        }
        var rst = true;
        for (var i = 0; i < valueKeys.length; i++) {
            rst = isEqual$2(value[valueKeys[i]], other[valueKeys[i]]);
            if (!rst) {
                break;
            }
        }
        return rst;
    }
    return false;
};

var map$1 = {};
var uniqueId$1 = (function (prefix) {
    prefix = prefix || 'g';
    if (!map$1[prefix]) {
        map$1[prefix] = 1;
    }
    else {
        map$1[prefix] += 1;
    }
    return prefix + map$1[prefix];
});

var noop$1 = (function () { });

var ctx;
/**
 * 计算文本的宽度
 */
memoize$1(function (text, font) {
    if (font === void 0) { font = {}; }
    var fontSize = font.fontSize, fontFamily = font.fontFamily, fontWeight = font.fontWeight, fontStyle = font.fontStyle, fontVariant = font.fontVariant;
    if (!ctx) {
        ctx = document.createElement('canvas').getContext('2d');
    }
    ctx.font = [fontStyle, fontVariant, fontWeight, fontSize + "px", fontFamily].join(' ');
    return ctx.measureText(isString$1(text) ? text : '').width;
}, function (text, font) {
    if (font === void 0) { font = {}; }
    return __spreadArrays([text], values$1(font)).join('');
});

var SPACES$1 = '\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029';
var PATH_COMMAND$1 = new RegExp("([a-z])[" + SPACES$1 + ",]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[" + SPACES$1 + "]*,?[" + SPACES$1 + "]*)+)", 'ig');
var PATH_VALUES$1 = new RegExp("(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[" + SPACES$1 + "]*,?[" + SPACES$1 + "]*", 'ig');
// Parse given path string into an array of arrays of path segments
var parsePathString$1 = function (pathString) {
    if (!pathString) {
        return null;
    }
    if (isArray$2(pathString)) {
        return pathString;
    }
    var paramCounts = {
        a: 7,
        c: 6,
        o: 2,
        h: 1,
        l: 2,
        m: 2,
        r: 4,
        q: 4,
        s: 4,
        t: 2,
        v: 1,
        u: 3,
        z: 0,
    };
    var data = [];
    String(pathString).replace(PATH_COMMAND$1, function (a, b, c) {
        var params = [];
        var name = b.toLowerCase();
        c.replace(PATH_VALUES$1, function (a, b) {
            b && params.push(+b);
        });
        if (name === 'm' && params.length > 2) {
            data.push([b].concat(params.splice(0, 2)));
            name = 'l';
            b = b === 'm' ? 'l' : 'L';
        }
        if (name === 'o' && params.length === 1) {
            data.push([b, params[0]]);
        }
        if (name === 'r') {
            data.push([b].concat(params));
        }
        else {
            while (params.length >= paramCounts[name]) {
                data.push([b].concat(params.splice(0, paramCounts[name])));
                if (!paramCounts[name]) {
                    break;
                }
            }
        }
        return pathString;
    });
    return data;
};
// http://schepers.cc/getting-to-the-point
var catmullRomToBezier = function (crp, z) {
    var d = [];
    // @ts-ignore
    for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
        var p = [
            {
                x: +crp[i - 2],
                y: +crp[i - 1],
            },
            {
                x: +crp[i],
                y: +crp[i + 1],
            },
            {
                x: +crp[i + 2],
                y: +crp[i + 3],
            },
            {
                x: +crp[i + 4],
                y: +crp[i + 5],
            },
        ];
        if (z) {
            if (!i) {
                p[0] = {
                    x: +crp[iLen - 2],
                    y: +crp[iLen - 1],
                };
            }
            else if (iLen - 4 === i) {
                p[3] = {
                    x: +crp[0],
                    y: +crp[1],
                };
            }
            else if (iLen - 2 === i) {
                p[2] = {
                    x: +crp[0],
                    y: +crp[1],
                };
                p[3] = {
                    x: +crp[2],
                    y: +crp[3],
                };
            }
        }
        else {
            if (iLen - 4 === i) {
                p[3] = p[2];
            }
            else if (!i) {
                p[0] = {
                    x: +crp[i],
                    y: +crp[i + 1],
                };
            }
        }
        d.push([
            'C',
            (-p[0].x + 6 * p[1].x + p[2].x) / 6,
            (-p[0].y + 6 * p[1].y + p[2].y) / 6,
            (p[1].x + 6 * p[2].x - p[3].x) / 6,
            (p[1].y + 6 * p[2].y - p[3].y) / 6,
            p[2].x,
            p[2].y,
        ]);
    }
    return d;
};
var ellipsePath = function (x, y, rx, ry, a) {
    var res = [];
    if (a === null && ry === null) {
        ry = rx;
    }
    x = +x;
    y = +y;
    rx = +rx;
    ry = +ry;
    if (a !== null) {
        var rad = Math.PI / 180;
        var x1 = x + rx * Math.cos(-ry * rad);
        var x2 = x + rx * Math.cos(-a * rad);
        var y1 = y + rx * Math.sin(-ry * rad);
        var y2 = y + rx * Math.sin(-a * rad);
        res = [
            ['M', x1, y1],
            ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2],
        ];
    }
    else {
        res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
    }
    return res;
};
var pathToAbsolute$1 = function (pathArray) {
    pathArray = parsePathString$1(pathArray);
    if (!pathArray || !pathArray.length) {
        return [['M', 0, 0]];
    }
    var res = [];
    var x = 0;
    var y = 0;
    var mx = 0;
    var my = 0;
    var start = 0;
    var pa0;
    var dots;
    if (pathArray[0][0] === 'M') {
        x = +pathArray[0][1];
        y = +pathArray[0][2];
        mx = x;
        my = y;
        start++;
        res[0] = ['M', x, y];
    }
    var crz = pathArray.length === 3 &&
        pathArray[0][0] === 'M' &&
        pathArray[1][0].toUpperCase() === 'R' &&
        pathArray[2][0].toUpperCase() === 'Z';
    for (var r = void 0, pa = void 0, i = start, ii = pathArray.length; i < ii; i++) {
        res.push((r = []));
        pa = pathArray[i];
        pa0 = pa[0];
        if (pa0 !== pa0.toUpperCase()) {
            r[0] = pa0.toUpperCase();
            switch (r[0]) {
                case 'A':
                    r[1] = pa[1];
                    r[2] = pa[2];
                    r[3] = pa[3];
                    r[4] = pa[4];
                    r[5] = pa[5];
                    r[6] = +pa[6] + x;
                    r[7] = +pa[7] + y;
                    break;
                case 'V':
                    r[1] = +pa[1] + y;
                    break;
                case 'H':
                    r[1] = +pa[1] + x;
                    break;
                case 'R':
                    dots = [x, y].concat(pa.slice(1));
                    for (var j = 2, jj = dots.length; j < jj; j++) {
                        dots[j] = +dots[j] + x;
                        dots[++j] = +dots[j] + y;
                    }
                    res.pop();
                    res = res.concat(catmullRomToBezier(dots, crz));
                    break;
                case 'O':
                    res.pop();
                    dots = ellipsePath(x, y, pa[1], pa[2]);
                    dots.push(dots[0]);
                    res = res.concat(dots);
                    break;
                case 'U':
                    res.pop();
                    res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
                    r = ['U'].concat(res[res.length - 1].slice(-2));
                    break;
                case 'M':
                    mx = +pa[1] + x;
                    my = +pa[2] + y;
                    break; // for lint
                default:
                    for (var j = 1, jj = pa.length; j < jj; j++) {
                        r[j] = +pa[j] + (j % 2 ? x : y);
                    }
            }
        }
        else if (pa0 === 'R') {
            dots = [x, y].concat(pa.slice(1));
            res.pop();
            res = res.concat(catmullRomToBezier(dots, crz));
            r = ['R'].concat(pa.slice(-2));
        }
        else if (pa0 === 'O') {
            res.pop();
            dots = ellipsePath(x, y, pa[1], pa[2]);
            dots.push(dots[0]);
            res = res.concat(dots);
        }
        else if (pa0 === 'U') {
            res.pop();
            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
            r = ['U'].concat(res[res.length - 1].slice(-2));
        }
        else {
            for (var k = 0, kk = pa.length; k < kk; k++) {
                r[k] = pa[k];
            }
        }
        pa0 = pa0.toUpperCase();
        if (pa0 !== 'O') {
            switch (r[0]) {
                case 'Z':
                    x = +mx;
                    y = +my;
                    break;
                case 'H':
                    x = r[1];
                    break;
                case 'V':
                    y = r[1];
                    break;
                case 'M':
                    mx = r[r.length - 2];
                    my = r[r.length - 1];
                    break; // for lint
                default:
                    x = r[r.length - 2];
                    y = r[r.length - 1];
            }
        }
    }
    return res;
};
var l2c = function (x1, y1, x2, y2) {
    return [x1, y1, x2, y2, x2, y2];
};
var q2c = function (x1, y1, ax, ay, x2, y2) {
    var _13 = 1 / 3;
    var _23 = 2 / 3;
    return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
};
var a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
    // for more information of where this math came from visit:
    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
    if (rx === ry) {
        rx += 1;
    }
    var _120 = (Math.PI * 120) / 180;
    var rad = (Math.PI / 180) * (+angle || 0);
    var res = [];
    var xy;
    var f1;
    var f2;
    var cx;
    var cy;
    var rotate = function (x, y, rad) {
        var X = x * Math.cos(rad) - y * Math.sin(rad);
        var Y = x * Math.sin(rad) + y * Math.cos(rad);
        return {
            x: X,
            y: Y,
        };
    };
    if (!recursive) {
        xy = rotate(x1, y1, -rad);
        x1 = xy.x;
        y1 = xy.y;
        xy = rotate(x2, y2, -rad);
        x2 = xy.x;
        y2 = xy.y;
        if (x1 === x2 && y1 === y2) {
            // 若弧的起始点和终点重叠则错开一点
            x2 += 1;
            y2 += 1;
        }
        // const cos = Math.cos(Math.PI / 180 * angle);
        // const sin = Math.sin(Math.PI / 180 * angle);
        var x = (x1 - x2) / 2;
        var y = (y1 - y2) / 2;
        var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
        if (h > 1) {
            h = Math.sqrt(h);
            rx = h * rx;
            ry = h * ry;
        }
        var rx2 = rx * rx;
        var ry2 = ry * ry;
        var k = (large_arc_flag === sweep_flag ? -1 : 1) *
            Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
        cx = (k * rx * y) / ry + (x1 + x2) / 2;
        cy = (k * -ry * x) / rx + (y1 + y2) / 2;
        // @ts-ignore
        f1 = Math.asin(((y1 - cy) / ry).toFixed(9));
        // @ts-ignore
        f2 = Math.asin(((y2 - cy) / ry).toFixed(9));
        f1 = x1 < cx ? Math.PI - f1 : f1;
        f2 = x2 < cx ? Math.PI - f2 : f2;
        f1 < 0 && (f1 = Math.PI * 2 + f1);
        f2 < 0 && (f2 = Math.PI * 2 + f2);
        if (sweep_flag && f1 > f2) {
            f1 = f1 - Math.PI * 2;
        }
        if (!sweep_flag && f2 > f1) {
            f2 = f2 - Math.PI * 2;
        }
    }
    else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
    }
    var df = f2 - f1;
    if (Math.abs(df) > _120) {
        var f2old = f2;
        var x2old = x2;
        var y2old = y2;
        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * Math.cos(f2);
        y2 = cy + ry * Math.sin(f2);
        res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
    }
    df = f2 - f1;
    var c1 = Math.cos(f1);
    var s1 = Math.sin(f1);
    var c2 = Math.cos(f2);
    var s2 = Math.sin(f2);
    var t = Math.tan(df / 4);
    var hx = (4 / 3) * rx * t;
    var hy = (4 / 3) * ry * t;
    var m1 = [x1, y1];
    var m2 = [x1 + hx * s1, y1 - hy * c1];
    var m3 = [x2 + hx * s2, y2 - hy * c2];
    var m4 = [x2, y2];
    m2[0] = 2 * m1[0] - m2[0];
    m2[1] = 2 * m1[1] - m2[1];
    if (recursive) {
        return [m2, m3, m4].concat(res);
    }
    res = [m2, m3, m4].concat(res).join().split(',');
    var newres = [];
    for (var i = 0, ii = res.length; i < ii; i++) {
        newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
    }
    return newres;
};
var pathToCurve = function (path, path2) {
    var p = pathToAbsolute$1(path);
    var p2 = path2 && pathToAbsolute$1(path2);
    var attrs = {
        x: 0,
        y: 0,
        bx: 0,
        by: 0,
        X: 0,
        Y: 0,
        qx: null,
        qy: null,
    };
    var attrs2 = {
        x: 0,
        y: 0,
        bx: 0,
        by: 0,
        X: 0,
        Y: 0,
        qx: null,
        qy: null,
    };
    var pcoms1 = []; // path commands of original path p
    var pcoms2 = []; // path commands of original path p2
    var pfirst = ''; // temporary holder for original path command
    var pcom = ''; // holder for previous path command of original path
    var ii;
    var processPath = function (path, d, pcom) {
        var nx;
        var ny;
        if (!path) {
            return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
        }
        !(path[0] in
            {
                T: 1,
                Q: 1,
            }) && (d.qx = d.qy = null);
        switch (path[0]) {
            case 'M':
                d.X = path[1];
                d.Y = path[2];
                break;
            case 'A':
                path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
                break;
            case 'S':
                if (pcom === 'C' || pcom === 'S') {
                    // In "S" case we have to take into account, if the previous command is C/S.
                    nx = d.x * 2 - d.bx; // And reflect the previous
                    ny = d.y * 2 - d.by; // command's control point relative to the current point.
                }
                else {
                    // or some else or nothing
                    nx = d.x;
                    ny = d.y;
                }
                path = ['C', nx, ny].concat(path.slice(1));
                break;
            case 'T':
                if (pcom === 'Q' || pcom === 'T') {
                    // In "T" case we have to take into account, if the previous command is Q/T.
                    d.qx = d.x * 2 - d.qx; // And make a reflection similar
                    d.qy = d.y * 2 - d.qy; // to case "S".
                }
                else {
                    // or something else or nothing
                    d.qx = d.x;
                    d.qy = d.y;
                }
                path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
                break;
            case 'Q':
                d.qx = path[1];
                d.qy = path[2];
                path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
                break;
            case 'L':
                path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));
                break;
            case 'H':
                path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));
                break;
            case 'V':
                path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));
                break;
            case 'Z':
                path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));
                break;
        }
        return path;
    };
    var fixArc = function (pp, i) {
        if (pp[i].length > 7) {
            pp[i].shift();
            var pi = pp[i];
            while (pi.length) {
                pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved
                p2 && (pcoms2[i] = 'A'); // the same as above
                pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
            }
            pp.splice(i, 1);
            ii = Math.max(p.length, (p2 && p2.length) || 0);
        }
    };
    var fixM = function (path1, path2, a1, a2, i) {
        if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {
            path2.splice(i, 0, ['M', a2.x, a2.y]);
            a1.bx = 0;
            a1.by = 0;
            a1.x = path1[i][1];
            a1.y = path1[i][2];
            ii = Math.max(p.length, (p2 && p2.length) || 0);
        }
    };
    ii = Math.max(p.length, (p2 && p2.length) || 0);
    for (var i = 0; i < ii; i++) {
        p[i] && (pfirst = p[i][0]); // save current path command
        if (pfirst !== 'C') {
            // C is not saved yet, because it may be result of conversion
            pcoms1[i] = pfirst; // Save current path command
            i && (pcom = pcoms1[i - 1]); // Get previous path command pcom
        }
        p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath
        if (pcoms1[i] !== 'A' && pfirst === 'C')
            pcoms1[i] = 'C'; // A is the only command
        // which may produce multiple C:s
        // so we have to make sure that C is also C in original path
        fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1
        if (p2) {
            // the same procedures is done to p2
            p2[i] && (pfirst = p2[i][0]);
            if (pfirst !== 'C') {
                pcoms2[i] = pfirst;
                i && (pcom = pcoms2[i - 1]);
            }
            p2[i] = processPath(p2[i], attrs2, pcom);
            if (pcoms2[i] !== 'A' && pfirst === 'C') {
                pcoms2[i] = 'C';
            }
            fixArc(p2, i);
        }
        fixM(p, p2, attrs, attrs2, i);
        fixM(p2, p, attrs2, attrs, i);
        var seg = p[i];
        var seg2 = p2 && p2[i];
        var seglen = seg.length;
        var seg2len = p2 && seg2.length;
        attrs.x = seg[seglen - 2];
        attrs.y = seg[seglen - 1];
        attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
        attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
        attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
        attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
        attrs2.x = p2 && seg2[seg2len - 2];
        attrs2.y = p2 && seg2[seg2len - 1];
    }
    return p2 ? [p, p2] : p;
};
var p2s = /,?([a-z]),?/gi;
var parsePathArray = function (path) {
    return path.join(',').replace(p2s, '$1');
};
var base3 = function (t, p1, p2, p3, p4) {
    var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
    var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
    return t * t2 - 3 * p1 + 3 * p2;
};
var bezlen = function (x1, y1, x2, y2, x3, y3, x4, y4, z) {
    if (z === null) {
        z = 1;
    }
    z = z > 1 ? 1 : z < 0 ? 0 : z;
    var z2 = z / 2;
    var n = 12;
    var Tvalues = [
        -0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816,
    ];
    var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
    var sum = 0;
    for (var i = 0; i < n; i++) {
        var ct = z2 * Tvalues[i] + z2;
        var xbase = base3(ct, x1, x2, x3, x4);
        var ybase = base3(ct, y1, y2, y3, y4);
        var comb = xbase * xbase + ybase * ybase;
        sum += Cvalues[i] * Math.sqrt(comb);
    }
    return z2 * sum;
};
var curveDim = function (x0, y0, x1, y1, x2, y2, x3, y3) {
    var tvalues = [];
    var bounds = [[], []];
    var a;
    var b;
    var c;
    var t;
    for (var i = 0; i < 2; ++i) {
        if (i === 0) {
            b = 6 * x0 - 12 * x1 + 6 * x2;
            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
            c = 3 * x1 - 3 * x0;
        }
        else {
            b = 6 * y0 - 12 * y1 + 6 * y2;
            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
            c = 3 * y1 - 3 * y0;
        }
        if (Math.abs(a) < 1e-12) {
            if (Math.abs(b) < 1e-12) {
                continue;
            }
            t = -c / b;
            if (t > 0 && t < 1) {
                tvalues.push(t);
            }
            continue;
        }
        var b2ac = b * b - 4 * c * a;
        var sqrtb2ac = Math.sqrt(b2ac);
        if (b2ac < 0) {
            continue;
        }
        var t1 = (-b + sqrtb2ac) / (2 * a);
        if (t1 > 0 && t1 < 1) {
            tvalues.push(t1);
        }
        var t2 = (-b - sqrtb2ac) / (2 * a);
        if (t2 > 0 && t2 < 1) {
            tvalues.push(t2);
        }
    }
    var j = tvalues.length;
    var jlen = j;
    var mt;
    while (j--) {
        t = tvalues[j];
        mt = 1 - t;
        bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
        bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
    }
    bounds[0][jlen] = x0;
    bounds[1][jlen] = y0;
    bounds[0][jlen + 1] = x3;
    bounds[1][jlen + 1] = y3;
    bounds[0].length = bounds[1].length = jlen + 2;
    return {
        min: {
            x: Math.min.apply(0, bounds[0]),
            y: Math.min.apply(0, bounds[1]),
        },
        max: {
            x: Math.max.apply(0, bounds[0]),
            y: Math.max.apply(0, bounds[1]),
        },
    };
};
var intersect = function (x1, y1, x2, y2, x3, y3, x4, y4) {
    if (Math.max(x1, x2) < Math.min(x3, x4) ||
        Math.min(x1, x2) > Math.max(x3, x4) ||
        Math.max(y1, y2) < Math.min(y3, y4) ||
        Math.min(y1, y2) > Math.max(y3, y4)) {
        return;
    }
    var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);
    var ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);
    var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
    if (!denominator) {
        return;
    }
    var px = nx / denominator;
    var py = ny / denominator;
    var px2 = +px.toFixed(2);
    var py2 = +py.toFixed(2);
    if (px2 < +Math.min(x1, x2).toFixed(2) ||
        px2 > +Math.max(x1, x2).toFixed(2) ||
        px2 < +Math.min(x3, x4).toFixed(2) ||
        px2 > +Math.max(x3, x4).toFixed(2) ||
        py2 < +Math.min(y1, y2).toFixed(2) ||
        py2 > +Math.max(y1, y2).toFixed(2) ||
        py2 < +Math.min(y3, y4).toFixed(2) ||
        py2 > +Math.max(y3, y4).toFixed(2)) {
        return;
    }
    return {
        x: px,
        y: py,
    };
};
var isPointInsideBBox = function (bbox, x, y) {
    return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;
};
var rectPath = function (x, y, w, h, r) {
    if (r) {
        return [
            ['M', +x + +r, y],
            ['l', w - r * 2, 0],
            ['a', r, r, 0, 0, 1, r, r],
            ['l', 0, h - r * 2],
            ['a', r, r, 0, 0, 1, -r, r],
            ['l', r * 2 - w, 0],
            ['a', r, r, 0, 0, 1, -r, -r],
            ['l', 0, r * 2 - h],
            ['a', r, r, 0, 0, 1, r, -r],
            ['z'],
        ];
    }
    var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];
    // @ts-ignore
    res.parsePathArray = parsePathArray;
    return res;
};
var box = function (x, y, width, height) {
    if (x === null) {
        x = y = width = height = 0;
    }
    if (y === null) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
    }
    return {
        x: x,
        y: y,
        width: width,
        w: width,
        height: height,
        h: height,
        x2: x + width,
        y2: y + height,
        cx: x + width / 2,
        cy: y + height / 2,
        r1: Math.min(width, height) / 2,
        r2: Math.max(width, height) / 2,
        r0: Math.sqrt(width * width + height * height) / 2,
        path: rectPath(x, y, width, height),
        vb: [x, y, width, height].join(' '),
    };
};
var isBBoxIntersect = function (bbox1, bbox2) {
    bbox1 = box(bbox1);
    bbox2 = box(bbox2);
    return (isPointInsideBBox(bbox2, bbox1.x, bbox1.y) ||
        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) ||
        isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) ||
        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) ||
        isPointInsideBBox(bbox1, bbox2.x, bbox2.y) ||
        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) ||
        isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) ||
        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) ||
        (((bbox1.x < bbox2.x2 && bbox1.x > bbox2.x) || (bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)) &&
            ((bbox1.y < bbox2.y2 && bbox1.y > bbox2.y) || (bbox2.y < bbox1.y2 && bbox2.y > bbox1.y))));
};
var bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
    if (!isArray$2(p1x)) {
        p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];
    }
    var bbox = curveDim.apply(null, p1x);
    return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);
};
var findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
    var t1 = 1 - t;
    var t13 = Math.pow(t1, 3);
    var t12 = Math.pow(t1, 2);
    var t2 = t * t;
    var t3 = t2 * t;
    var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;
    var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
    var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);
    var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);
    var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);
    var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);
    var ax = t1 * p1x + t * c1x;
    var ay = t1 * p1y + t * c1y;
    var cx = t1 * c2x + t * p2x;
    var cy = t1 * c2y + t * p2y;
    var alpha = 90 - (Math.atan2(mx - nx, my - ny) * 180) / Math.PI;
    // (mx > nx || my < ny) && (alpha += 180);
    return {
        x: x,
        y: y,
        m: {
            x: mx,
            y: my,
        },
        n: {
            x: nx,
            y: ny,
        },
        start: {
            x: ax,
            y: ay,
        },
        end: {
            x: cx,
            y: cy,
        },
        alpha: alpha,
    };
};
var interHelper = function (bez1, bez2, justCount) {
    var bbox1 = bezierBBox(bez1);
    var bbox2 = bezierBBox(bez2);
    if (!isBBoxIntersect(bbox1, bbox2)) {
        return justCount ? 0 : [];
    }
    var l1 = bezlen.apply(0, bez1);
    var l2 = bezlen.apply(0, bez2);
    var n1 = ~~(l1 / 8);
    var n2 = ~~(l2 / 8);
    var dots1 = [];
    var dots2 = [];
    var xy = {};
    var res = justCount ? 0 : [];
    for (var i = 0; i < n1 + 1; i++) {
        var d = findDotsAtSegment.apply(0, bez1.concat(i / n1));
        dots1.push({
            x: d.x,
            y: d.y,
            t: i / n1,
        });
    }
    for (var i = 0; i < n2 + 1; i++) {
        var d = findDotsAtSegment.apply(0, bez2.concat(i / n2));
        dots2.push({
            x: d.x,
            y: d.y,
            t: i / n2,
        });
    }
    for (var i = 0; i < n1; i++) {
        for (var j = 0; j < n2; j++) {
            var di = dots1[i];
            var di1 = dots1[i + 1];
            var dj = dots2[j];
            var dj1 = dots2[j + 1];
            var ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';
            var cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';
            var is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);
            if (is) {
                if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {
                    continue;
                }
                xy[is.x.toFixed(4)] = is.y.toFixed(4);
                var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);
                var t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
                if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
                    if (justCount) {
                        // @ts-ignore
                        res += 1;
                    }
                    else {
                        // @ts-ignore
                        res.push({
                            x: is.x,
                            y: is.y,
                            t1: t1,
                            t2: t2,
                        });
                    }
                }
            }
        }
    }
    return res;
};
var interPathHelper = function (path1, path2, justCount) {
    path1 = pathToCurve(path1);
    path2 = pathToCurve(path2);
    var x1;
    var y1;
    var x2;
    var y2;
    var x1m;
    var y1m;
    var x2m;
    var y2m;
    var bez1;
    var bez2;
    var res = justCount ? 0 : [];
    for (var i = 0, ii = path1.length; i < ii; i++) {
        var pi = path1[i];
        if (pi[0] === 'M') {
            x1 = x1m = pi[1];
            y1 = y1m = pi[2];
        }
        else {
            if (pi[0] === 'C') {
                bez1 = [x1, y1].concat(pi.slice(1));
                x1 = bez1[6];
                y1 = bez1[7];
            }
            else {
                bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
                x1 = x1m;
                y1 = y1m;
            }
            for (var j = 0, jj = path2.length; j < jj; j++) {
                var pj = path2[j];
                if (pj[0] === 'M') {
                    x2 = x2m = pj[1];
                    y2 = y2m = pj[2];
                }
                else {
                    if (pj[0] === 'C') {
                        bez2 = [x2, y2].concat(pj.slice(1));
                        x2 = bez2[6];
                        y2 = bez2[7];
                    }
                    else {
                        bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
                        x2 = x2m;
                        y2 = y2m;
                    }
                    var intr = interHelper(bez1, bez2, justCount);
                    if (justCount) {
                        // @ts-ignore
                        res += intr;
                    }
                    else {
                        // @ts-ignore
                        for (var k = 0, kk = intr.length; k < kk; k++) {
                            intr[k].segment1 = i;
                            intr[k].segment2 = j;
                            intr[k].bez1 = bez1;
                            intr[k].bez2 = bez2;
                        }
                        // @ts-ignore
                        res = res.concat(intr);
                    }
                }
            }
        }
    }
    return res;
};
var intersection$2 = function (path1, path2) {
    return interPathHelper(path1, path2);
};
function decasteljau(points, t) {
    var left = [];
    var right = [];
    function recurse(points, t) {
        if (points.length === 1) {
            left.push(points[0]);
            right.push(points[0]);
        }
        else {
            var middlePoints = [];
            for (var i = 0; i < points.length - 1; i++) {
                if (i === 0) {
                    left.push(points[0]);
                }
                if (i === points.length - 2) {
                    right.push(points[i + 1]);
                }
                middlePoints[i] = [
                    (1 - t) * points[i][0] + t * points[i + 1][0],
                    (1 - t) * points[i][1] + t * points[i + 1][1],
                ];
            }
            recurse(middlePoints, t);
        }
    }
    if (points.length) {
        recurse(points, t);
    }
    return { left: left, right: right.reverse() };
}
function splitCurve(start, end, count) {
    var points = [[start[1], start[2]]];
    count = count || 2;
    var segments = [];
    if (end[0] === 'A') {
        points.push(end[6]);
        points.push(end[7]);
    }
    else if (end[0] === 'C') {
        points.push([end[1], end[2]]);
        points.push([end[3], end[4]]);
        points.push([end[5], end[6]]);
    }
    else if (end[0] === 'S' || end[0] === 'Q') {
        points.push([end[1], end[2]]);
        points.push([end[3], end[4]]);
    }
    else {
        points.push([end[1], end[2]]);
    }
    var leftSegments = points;
    var t = 1 / count;
    for (var i = 0; i < count - 1; i++) {
        var rt = t / (1 - t * i);
        var split = decasteljau(leftSegments, rt);
        segments.push(split.left);
        leftSegments = split.right;
    }
    segments.push(leftSegments);
    var result = segments.map(function (segment) {
        var cmd = [];
        if (segment.length === 4) {
            cmd.push('C');
            cmd = cmd.concat(segment[2]);
        }
        if (segment.length >= 3) {
            if (segment.length === 3) {
                cmd.push('Q');
            }
            cmd = cmd.concat(segment[1]);
        }
        if (segment.length === 2) {
            cmd.push('L');
        }
        cmd = cmd.concat(segment[segment.length - 1]);
        return cmd;
    });
    return result;
}
var splitSegment = function (start, end, count) {
    if (count === 1) {
        return [[].concat(start)];
    }
    var segments = [];
    if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {
        segments = segments.concat(splitCurve(start, end, count));
    }
    else {
        var temp = [].concat(start);
        if (temp[0] === 'M') {
            temp[0] = 'L';
        }
        for (var i = 0; i <= count - 1; i++) {
            segments.push(temp);
        }
    }
    return segments;
};
var fillPath = function (source, target) {
    if (source.length === 1) {
        return source;
    }
    var sourceLen = source.length - 1;
    var targetLen = target.length - 1;
    var ratio = sourceLen / targetLen;
    var segmentsToFill = [];
    if (source.length === 1 && source[0][0] === 'M') {
        for (var i = 0; i < targetLen - sourceLen; i++) {
            source.push(source[0]);
        }
        return source;
    }
    for (var i = 0; i < targetLen; i++) {
        var index = Math.floor(ratio * i);
        segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;
    }
    var filled = segmentsToFill.reduce(function (filled, count, i) {
        if (i === sourceLen) {
            return filled.concat(source[sourceLen]);
        }
        return filled.concat(splitSegment(source[i], source[i + 1], count));
    }, []);
    filled.unshift(source[0]);
    if (target[targetLen] === 'Z' || target[targetLen] === 'z') {
        filled.push('Z');
    }
    return filled;
};
var isEqual$1 = function (obj1, obj2) {
    if (obj1.length !== obj2.length) {
        return false;
    }
    var result = true;
    each(obj1, function (item, i) {
        if (item !== obj2[i]) {
            result = false;
            return false;
        }
    });
    return result;
};
function getMinDiff(del, add, modify) {
    var type = null;
    var min = modify;
    if (add < min) {
        min = add;
        type = 'add';
    }
    if (del < min) {
        min = del;
        type = 'del';
    }
    return {
        type: type,
        min: min,
    };
}
/*
 * https://en.wikipedia.org/wiki/Levenshtein_distance
 * 计算两条path的编辑距离
 */
var levenshteinDistance = function (source, target) {
    var sourceLen = source.length;
    var targetLen = target.length;
    var sourceSegment;
    var targetSegment;
    var temp = 0;
    if (sourceLen === 0 || targetLen === 0) {
        return null;
    }
    var dist = [];
    for (var i = 0; i <= sourceLen; i++) {
        dist[i] = [];
        dist[i][0] = { min: i };
    }
    for (var j = 0; j <= targetLen; j++) {
        dist[0][j] = { min: j };
    }
    for (var i = 1; i <= sourceLen; i++) {
        sourceSegment = source[i - 1];
        for (var j = 1; j <= targetLen; j++) {
            targetSegment = target[j - 1];
            if (isEqual$1(sourceSegment, targetSegment)) {
                temp = 0;
            }
            else {
                temp = 1;
            }
            var del = dist[i - 1][j].min + 1;
            var add = dist[i][j - 1].min + 1;
            var modify = dist[i - 1][j - 1].min + temp;
            dist[i][j] = getMinDiff(del, add, modify);
        }
    }
    return dist;
};
var fillPathByDiff = function (source, target) {
    var diffMatrix = levenshteinDistance(source, target);
    var sourceLen = source.length;
    var targetLen = target.length;
    var changes = [];
    var index = 1;
    var minPos = 1;
    // 如果source和target不是完全不相等
    if (diffMatrix[sourceLen][targetLen].min !== sourceLen) {
        // 获取从source到target所需改动
        for (var i = 1; i <= sourceLen; i++) {
            var min = diffMatrix[i][i].min;
            minPos = i;
            for (var j = index; j <= targetLen; j++) {
                if (diffMatrix[i][j].min < min) {
                    min = diffMatrix[i][j].min;
                    minPos = j;
                }
            }
            index = minPos;
            if (diffMatrix[i][index].type) {
                changes.push({ index: i - 1, type: diffMatrix[i][index].type });
            }
        }
        // 对source进行增删path
        for (var i = changes.length - 1; i >= 0; i--) {
            index = changes[i].index;
            if (changes[i].type === 'add') {
                source.splice(index, 0, [].concat(source[index]));
            }
            else {
                source.splice(index, 1);
            }
        }
    }
    // source尾部补齐
    sourceLen = source.length;
    var diff = targetLen - sourceLen;
    if (sourceLen < targetLen) {
        for (var i = 0; i < diff; i++) {
            if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {
                source.splice(sourceLen - 2, 0, source[sourceLen - 2]);
            }
            else {
                source.push(source[sourceLen - 1]);
            }
            sourceLen += 1;
        }
    }
    return source;
};
// 将两个点均分成count个点
function _splitPoints(points, former, count) {
    var result = [].concat(points);
    var index;
    var t = 1 / (count + 1);
    var formerEnd = _getSegmentPoints(former)[0];
    for (var i = 1; i <= count; i++) {
        t *= i;
        index = Math.floor(points.length * t);
        if (index === 0) {
            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);
        }
        else {
            result.splice(index, 0, [
                formerEnd[0] * t + points[index][0] * (1 - t),
                formerEnd[1] * t + points[index][1] * (1 - t),
            ]);
        }
    }
    return result;
}
/*
 * 抽取pathSegment中的关键点
 * M,L,A,Q,H,V一个端点
 * Q, S抽取一个端点，一个控制点
 * C抽取一个端点，两个控制点
 */
function _getSegmentPoints(segment) {
    var points = [];
    switch (segment[0]) {
        case 'M':
            points.push([segment[1], segment[2]]);
            break;
        case 'L':
            points.push([segment[1], segment[2]]);
            break;
        case 'A':
            points.push([segment[6], segment[7]]);
            break;
        case 'Q':
            points.push([segment[3], segment[4]]);
            points.push([segment[1], segment[2]]);
            break;
        case 'T':
            points.push([segment[1], segment[2]]);
            break;
        case 'C':
            points.push([segment[5], segment[6]]);
            points.push([segment[1], segment[2]]);
            points.push([segment[3], segment[4]]);
            break;
        case 'S':
            points.push([segment[3], segment[4]]);
            points.push([segment[1], segment[2]]);
            break;
        case 'H':
            points.push([segment[1], segment[1]]);
            break;
        case 'V':
            points.push([segment[1], segment[1]]);
            break;
    }
    return points;
}
var formatPath = function (fromPath, toPath) {
    if (fromPath.length <= 1) {
        return fromPath;
    }
    var points;
    for (var i = 0; i < toPath.length; i++) {
        if (fromPath[i][0] !== toPath[i][0]) {
            // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造
            points = _getSegmentPoints(fromPath[i]);
            switch (toPath[i][0]) {
                case 'M':
                    fromPath[i] = ['M'].concat(points[0]);
                    break;
                case 'L':
                    fromPath[i] = ['L'].concat(points[0]);
                    break;
                case 'A':
                    fromPath[i] = [].concat(toPath[i]);
                    fromPath[i][6] = points[0][0];
                    fromPath[i][7] = points[0][1];
                    break;
                case 'Q':
                    if (points.length < 2) {
                        if (i > 0) {
                            points = _splitPoints(points, fromPath[i - 1], 1);
                        }
                        else {
                            fromPath[i] = toPath[i];
                            break;
                        }
                    }
                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {
                        return arr.concat(i);
                    }, []));
                    break;
                case 'T':
                    fromPath[i] = ['T'].concat(points[0]);
                    break;
                case 'C':
                    if (points.length < 3) {
                        if (i > 0) {
                            points = _splitPoints(points, fromPath[i - 1], 2);
                        }
                        else {
                            fromPath[i] = toPath[i];
                            break;
                        }
                    }
                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {
                        return arr.concat(i);
                    }, []));
                    break;
                case 'S':
                    if (points.length < 2) {
                        if (i > 0) {
                            points = _splitPoints(points, fromPath[i - 1], 1);
                        }
                        else {
                            fromPath[i] = toPath[i];
                            break;
                        }
                    }
                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {
                        return arr.concat(i);
                    }, []));
                    break;
                default:
                    fromPath[i] = toPath[i];
            }
        }
    }
    return fromPath;
};

var PathUtil$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  catmullRomToBezier: catmullRomToBezier,
  fillPath: fillPath,
  fillPathByDiff: fillPathByDiff,
  formatPath: formatPath,
  intersection: intersection$2,
  parsePathArray: parsePathArray,
  parsePathString: parsePathString$1,
  pathToAbsolute: pathToAbsolute$1,
  pathToCurve: pathToCurve,
  rectPath: rectPath
});

var GraphEvent = /** @class */ (function () {
    function GraphEvent(type, event) {
        /**
         * 是否允许冒泡
         * @type {boolean}
         */
        this.bubbles = true;
        /**
         * 触发对象
         * @type {object}
         */
        this.target = null;
        /**
         * 监听对象
         * @type {object}
         */
        this.currentTarget = null;
        /**
         * 委托对象
         * @type {object}
         */
        this.delegateTarget = null;
        /**
         * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')
         * @type {object}
         */
        this.delegateObject = null;
        /**
         * 是否阻止了原生事件
         * @type {boolean}
         */
        this.defaultPrevented = false;
        /**
         * 是否阻止传播（向上冒泡）
         * @type {boolean}
         */
        this.propagationStopped = false;
        /**
         * 触发事件的图形
         * @type {IShape}
         */
        this.shape = null;
        /**
         * 开始触发事件的图形
         * @type {IShape}
         */
        this.fromShape = null;
        /**
         * 事件结束时的触发图形
         * @type {IShape}
         */
        this.toShape = null;
        // 触发事件的路径
        this.propagationPath = [];
        this.type = type;
        this.name = type;
        this.originalEvent = event;
        this.timeStamp = event.timeStamp;
    }
    /**
     * 阻止浏览器默认的行为
     */
    GraphEvent.prototype.preventDefault = function () {
        this.defaultPrevented = true;
        if (this.originalEvent.preventDefault) {
            this.originalEvent.preventDefault();
        }
    };
    /**
     * 阻止冒泡
     */
    GraphEvent.prototype.stopPropagation = function () {
        this.propagationStopped = true;
    };
    GraphEvent.prototype.toString = function () {
        var type = this.type;
        return "[Event (type=" + type + ")]";
    };
    GraphEvent.prototype.save = function () { };
    GraphEvent.prototype.restore = function () { };
    return GraphEvent;
}());

var WILDCARD$1 = '*';
/* event-emitter */
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this._events = {};
    }
    /**
     * 监听一个事件
     * @param evt
     * @param callback
     * @param once
     */
    EventEmitter.prototype.on = function (evt, callback, once) {
        if (!this._events[evt]) {
            this._events[evt] = [];
        }
        this._events[evt].push({
            callback: callback,
            once: !!once,
        });
        return this;
    };
    /**
     * 监听一个事件一次
     * @param evt
     * @param callback
     */
    EventEmitter.prototype.once = function (evt, callback) {
        return this.on(evt, callback, true);
    };
    /**
     * 触发一个事件
     * @param evt
     * @param args
     */
    EventEmitter.prototype.emit = function (evt) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var events = this._events[evt] || [];
        var wildcardEvents = this._events[WILDCARD$1] || [];
        // 实际的处理 emit 方法
        var doEmit = function (es) {
            var length = es.length;
            for (var i = 0; i < length; i++) {
                if (!es[i]) {
                    continue;
                }
                var _a = es[i], callback = _a.callback, once = _a.once;
                if (once) {
                    es.splice(i, 1);
                    if (es.length === 0) {
                        delete _this._events[evt];
                    }
                    length--;
                    i--;
                }
                callback.apply(_this, args);
            }
        };
        doEmit(events);
        doEmit(wildcardEvents);
    };
    /**
     * 取消监听一个事件，或者一个channel
     * @param evt
     * @param callback
     */
    EventEmitter.prototype.off = function (evt, callback) {
        if (!evt) {
            // evt 为空全部清除
            this._events = {};
        }
        else {
            if (!callback) {
                // evt 存在，callback 为空，清除事件所有方法
                delete this._events[evt];
            }
            else {
                // evt 存在，callback 存在，清除匹配的
                var events = this._events[evt] || [];
                var length_1 = events.length;
                for (var i = 0; i < length_1; i++) {
                    if (events[i].callback === callback) {
                        events.splice(i, 1);
                        length_1--;
                        i--;
                    }
                }
                if (events.length === 0) {
                    delete this._events[evt];
                }
            }
        }
        return this;
    };
    /* 当前所有的事件 */
    EventEmitter.prototype.getEvents = function () {
        return this._events;
    };
    return EventEmitter;
}());

function removeFromArray(arr, obj) {
    var index = arr.indexOf(obj);
    if (index !== -1) {
        arr.splice(index, 1);
    }
}
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
// 是否元素的父容器
function isParent(container, shape) {
    // 所有 shape 都是 canvas 的子元素
    if (container.isCanvas()) {
        return true;
    }
    var parent = shape.getParent();
    var isParent = false;
    while (parent) {
        if (parent === container) {
            isParent = true;
            break;
        }
        parent = parent.getParent();
    }
    return isParent;
}
function isAllowCapture(element) {
    // @ts-ignore
    return element.cfg.visible && element.cfg.capture;
}

var Base = /** @class */ (function (_super) {
    __extends(Base, _super);
    function Base(cfg) {
        var _this = _super.call(this) || this;
        /**
         * 是否被销毁
         * @type {boolean}
         */
        _this.destroyed = false;
        var defaultCfg = _this.getDefaultCfg();
        _this.cfg = mix(defaultCfg, cfg);
        return _this;
    }
    /**
     * @protected
     * 默认的配置项
     * @returns {object} 默认的配置项
     */
    Base.prototype.getDefaultCfg = function () {
        return {};
    };
    // 实现接口的方法
    Base.prototype.get = function (name) {
        return this.cfg[name];
    };
    // 实现接口的方法
    Base.prototype.set = function (name, value) {
        this.cfg[name] = value;
    };
    // 实现接口的方法
    Base.prototype.destroy = function () {
        this.cfg = {
            destroyed: true,
        };
        this.off();
        this.destroyed = true;
    };
    return Base;
}(EventEmitter));

var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var BrowserInfo = /** @class */ (function () {
    function BrowserInfo(name, version, os) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.type = 'browser';
    }
    return BrowserInfo;
}());
var NodeInfo = /** @class */ (function () {
    function NodeInfo(version) {
        this.version = version;
        this.type = 'node';
        this.name = 'node';
        this.os = process.platform;
    }
    return NodeInfo;
}());
var SearchBotDeviceInfo = /** @class */ (function () {
    function SearchBotDeviceInfo(name, version, os, bot) {
        this.name = name;
        this.version = version;
        this.os = os;
        this.bot = bot;
        this.type = 'bot-device';
    }
    return SearchBotDeviceInfo;
}());
var BotInfo = /** @class */ (function () {
    function BotInfo() {
        this.type = 'bot';
        this.bot = true; // NOTE: deprecated test name instead
        this.name = 'bot';
        this.version = null;
        this.os = null;
    }
    return BotInfo;
}());
var ReactNativeInfo = /** @class */ (function () {
    function ReactNativeInfo() {
        this.type = 'react-native';
        this.name = 'react-native';
        this.version = null;
        this.os = null;
    }
    return ReactNativeInfo;
}());
// tslint:disable-next-line:max-line-length
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
    ['aol', /AOLShield\/([0-9\._]+)/],
    ['edge', /Edge\/([0-9\._]+)/],
    ['edge-ios', /EdgiOS\/([0-9\._]+)/],
    ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
    ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
    ['samsung', /SamsungBrowser\/([0-9\.]+)/],
    ['silk', /\bSilk\/([0-9._-]+)\b/],
    ['miui', /MiuiBrowser\/([0-9\.]+)$/],
    ['beaker', /BeakerBrowser\/([0-9\.]+)/],
    ['edge-chromium', /EdgA?\/([0-9\.]+)/],
    [
        'chromium-webview',
        /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
    ],
    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
    ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
    ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
    ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
    ['fxios', /FxiOS\/([0-9\.]+)/],
    ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
    ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
    ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
    ['pie', /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
    ['pie', /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
    ['netfront', /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
    ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
    ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
    ['ie', /MSIE\s(7\.0)/],
    ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
    ['android', /Android\s([0-9\.]+)/],
    ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
    ['safari', /Version\/([0-9\._]+).*Safari/],
    ['facebook', /FB[AS]V\/([0-9\.]+)/],
    ['instagram', /Instagram\s([0-9\.]+)/],
    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
    ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
    ['curl', /^curl\/([0-9\.]+)$/],
    ['searchbot', SEARCHBOX_UA_REGEX],
];
var operatingSystemRules = [
    ['iOS', /iP(hone|od|ad)/],
    ['Android OS', /Android/],
    ['BlackBerry OS', /BlackBerry|BB10/],
    ['Windows Mobile', /IEMobile/],
    ['Amazon OS', /Kindle/],
    ['Windows 3.11', /Win16/],
    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
    ['Windows 98', /(Windows 98)|(Win98)/],
    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
    ['Windows Server 2003', /(Windows NT 5.2)/],
    ['Windows Vista', /(Windows NT 6.0)/],
    ['Windows 7', /(Windows NT 6.1)/],
    ['Windows 8', /(Windows NT 6.2)/],
    ['Windows 8.1', /(Windows NT 6.3)/],
    ['Windows 10', /(Windows NT 10.0)/],
    ['Windows ME', /Windows ME/],
    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
    ['Open BSD', /OpenBSD/],
    ['Sun OS', /SunOS/],
    ['Chrome OS', /CrOS/],
    ['Linux', /(Linux)|(X11)/],
    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
    ['QNX', /QNX/],
    ['BeOS', /BeOS/],
    ['OS/2', /OS\/2/],
];
function detect(userAgent) {
    if (!!userAgent) {
        return parseUserAgent(userAgent);
    }
    if (typeof document === 'undefined' &&
        typeof navigator !== 'undefined' &&
        navigator.product === 'ReactNative') {
        return new ReactNativeInfo();
    }
    if (typeof navigator !== 'undefined') {
        return parseUserAgent(navigator.userAgent);
    }
    return getNodeVersion();
}
function matchUserAgent(ua) {
    // opted for using reduce here rather than Array#first with a regex.test call
    // this is primarily because using the reduce we only perform the regex
    // execution once rather than once for the test and for the exec again below
    // probably something that needs to be benchmarked though
    return (ua !== '' &&
        userAgentRules.reduce(function (matched, _a) {
            var browser = _a[0], regex = _a[1];
            if (matched) {
                return matched;
            }
            var uaMatch = regex.exec(ua);
            return !!uaMatch && [browser, uaMatch];
        }, false));
}
function parseUserAgent(ua) {
    var matchedRule = matchUserAgent(ua);
    if (!matchedRule) {
        return null;
    }
    var name = matchedRule[0], match = matchedRule[1];
    if (name === 'searchbot') {
        return new BotInfo();
    }
    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)
    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);
    if (versionParts) {
        if (versionParts.length < REQUIRED_VERSION_PARTS) {
            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
        }
    }
    else {
        versionParts = [];
    }
    var version = versionParts.join('.');
    var os = detectOS(ua);
    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
    if (searchBotMatch && searchBotMatch[1]) {
        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
    }
    return new BrowserInfo(name, version, os);
}
function detectOS(ua) {
    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
        var match = regex.exec(ua);
        if (match) {
            return os;
        }
    }
    return null;
}
function getNodeVersion() {
    var isNode = typeof process !== 'undefined' && process.version;
    return isNode ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
    var output = [];
    for (var ii = 0; ii < count; ii++) {
        output.push('0');
    }
    return output;
}

/**
 * Common utilities
 * @module glMatrix
 */
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply$2(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create$2() {
  var out = new ARRAY_TYPE(3);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$2();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
})();

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create$1() {
  var out = new ARRAY_TYPE(2);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */

function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create$1();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
})();

/**
 * @description 扩展方法，提供 gl-matrix 为提供的方法
 * */
function leftTranslate(out, a, v) {
    var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    fromTranslation(transMat, v);
    return multiply$2(out, transMat, a);
}
function leftRotate(out, a, rad) {
    var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    fromRotation(rotateMat, rad);
    return multiply$2(out, rotateMat, a);
}
function leftScale(out, a, v) {
    var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    fromScaling(scaleMat, v);
    return multiply$2(out, scaleMat, a);
}
function leftMultiply(out, a, a1) {
    return multiply$2(out, a1, a);
}
/**
 * 根据 actions 来做 transform
 * @param m
 * @param actions
 */
function transform$3(m, actions) {
    var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];
    for (var i = 0, len = actions.length; i < len; i++) {
        var action = actions[i];
        switch (action[0]) {
            case 't':
                leftTranslate(matrix, matrix, [action[1], action[2]]);
                break;
            case 's':
                leftScale(matrix, matrix, [action[1], action[2]]);
                break;
            case 'r':
                leftRotate(matrix, matrix, action[1]);
                break;
            case 'm':
                leftMultiply(matrix, matrix, action[1]);
                break;
        }
    }
    return matrix;
}

/**
 * @fileoverview 矩阵运算，本来是要引入 gl-matrix, 但是考虑到 g-mobile 对大小有限制，同时 g-webgl 使用的 matrix 不一致
 * 所以，这里仅实现 2D 几个运算，上层自己引入 gl-matrix
 * @author dxq613@gmail.com
 */
/**
 * 3阶矩阵相乘
 * @param {number[]} a 矩阵1
 * @param {number[]} b 矩阵2
 */
function multiplyMatrix(a, b) {
    var out = [];
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a10 = a[3];
    var a11 = a[4];
    var a12 = a[5];
    var a20 = a[6];
    var a21 = a[7];
    var a22 = a[8];
    var b00 = b[0];
    var b01 = b[1];
    var b02 = b[2];
    var b10 = b[3];
    var b11 = b[4];
    var b12 = b[5];
    var b20 = b[6];
    var b21 = b[7];
    var b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
}
/**
 * 3阶矩阵同2阶向量相乘
 * @param {number[]} m 矩阵
 * @param {number[]} v 二阶向量
 */
function multiplyVec2(m, v) {
    var out = [];
    var x = v[0];
    var y = v[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
}
/**
 * 矩阵的逆
 * @param {number[]} a 矩阵
 */
function invert$2(a) {
    var out = [];
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a10 = a[3];
    var a11 = a[4];
    var a12 = a[5];
    var a20 = a[6];
    var a21 = a[7];
    var a22 = a[8];
    var b01 = a22 * a11 - a12 * a21;
    var b11 = -a22 * a10 + a12 * a20;
    var b21 = a21 * a10 - a11 * a20;
    // Calculate the determinant
    var det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
        return null;
    }
    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
}

var transform$2 = transform$3;
var MATRIX = 'matrix';
var CLONE_CFGS = ['zIndex', 'capture', 'visible', 'type'];
// 可以在 toAttrs 中设置，但不属于绘图属性的字段
var RESERVED_PORPS = ['repeat'];
var DELEGATION_SPLIT = ':';
var WILDCARD = '*';
// 需要考虑数组嵌套数组的场景
// 数组嵌套对象的场景不考虑
function _cloneArrayAttr(arr) {
    var result = [];
    for (var i = 0; i < arr.length; i++) {
        if (isArray$2(arr[i])) {
            result.push([].concat(arr[i]));
        }
        else {
            result.push(arr[i]);
        }
    }
    return result;
}
function getFormatFromAttrs(toAttrs, shape) {
    var fromAttrs = {};
    var attrs = shape.attrs;
    for (var k in toAttrs) {
        fromAttrs[k] = attrs[k];
    }
    return fromAttrs;
}
function getFormatToAttrs(props, shape) {
    var toAttrs = {};
    var attrs = shape.attr();
    each(props, function (v, k) {
        if (RESERVED_PORPS.indexOf(k) === -1 && !isEqual$2(attrs[k], v)) {
            toAttrs[k] = v;
        }
    });
    return toAttrs;
}
function checkExistedAttrs(animations, animation) {
    if (animation.onFrame) {
        return animations;
    }
    var startTime = animation.startTime, delay = animation.delay, duration = animation.duration;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    each(animations, function (item) {
        // 后一个动画开始执行的时间 < 前一个动画的结束时间 && 后一个动画的执行时间 > 前一个动画的延迟
        if (startTime + delay < item.startTime + item.delay + item.duration && duration > item.delay) {
            each(animation.toAttrs, function (v, k) {
                if (hasOwnProperty.call(item.toAttrs, k)) {
                    delete item.toAttrs[k];
                    delete item.fromAttrs[k];
                }
            });
        }
    });
    return animations;
}
var Element$1 = /** @class */ (function (_super) {
    __extends(Element, _super);
    function Element(cfg) {
        var _this = _super.call(this, cfg) || this;
        /**
         * @protected
         * 图形属性
         * @type {ShapeAttrs}
         */
        _this.attrs = {};
        var attrs = _this.getDefaultAttrs();
        mix(attrs, cfg.attrs);
        _this.attrs = attrs;
        _this.initAttrs(attrs);
        _this.initAnimate(); // 初始化动画
        return _this;
    }
    // override
    Element.prototype.getDefaultCfg = function () {
        return {
            visible: true,
            capture: true,
            zIndex: 0,
        };
    };
    /**
     * @protected
     * 获取默认的属相
     */
    Element.prototype.getDefaultAttrs = function () {
        return {
            matrix: this.getDefaultMatrix(),
            opacity: 1,
        };
    };
    /**
     * @protected
     * 一些方法调用会引起画布变化
     * @param {ChangeType} changeType 改变的类型
     */
    Element.prototype.onCanvasChange = function (changeType) { };
    /**
     * @protected
     * 初始化属性，有些属性需要加工
     * @param {object} attrs 属性值
     */
    Element.prototype.initAttrs = function (attrs) { };
    /**
     * @protected
     * 初始化动画
     */
    Element.prototype.initAnimate = function () {
        this.set('animable', true);
        this.set('animating', false);
    };
    Element.prototype.isGroup = function () {
        return false;
    };
    Element.prototype.getParent = function () {
        return this.get('parent');
    };
    Element.prototype.getCanvas = function () {
        return this.get('canvas');
    };
    Element.prototype.attr = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var name = args[0], value = args[1];
        if (!name)
            return this.attrs;
        if (isObject$1(name)) {
            for (var k in name) {
                this.setAttr(k, name[k]);
            }
            this.afterAttrsChange(name);
            return this;
        }
        if (args.length === 2) {
            this.setAttr(name, value);
            this.afterAttrsChange((_a = {},
                _a[name] = value,
                _a));
            return this;
        }
        return this.attrs[name];
    };
    // 是否被裁剪，被裁剪则不显示，不参与拾取
    Element.prototype.isClipped = function (refX, refY) {
        var clip = this.getClip();
        return clip && !clip.isHit(refX, refY);
    };
    /**
     * 内部设置属性值的接口
     * @param {string} name 属性名
     * @param {any} value 属性值
     */
    Element.prototype.setAttr = function (name, value) {
        var originValue = this.attrs[name];
        if (originValue !== value) {
            this.attrs[name] = value;
            this.onAttrChange(name, value, originValue);
        }
    };
    /**
     * @protected
     * 属性值发生改变
     * @param {string} name 属性名
     * @param {any} value 属性值
     * @param {any} originValue 属性值
     */
    Element.prototype.onAttrChange = function (name, value, originValue) {
        if (name === 'matrix') {
            this.set('totalMatrix', null);
        }
    };
    /**
     * 属性更改后需要做的事情
     * @protected
     */
    Element.prototype.afterAttrsChange = function (targetAttrs) {
        if (this.cfg.isClipShape) {
            var applyTo = this.cfg.applyTo;
            if (applyTo) {
                applyTo.onCanvasChange('clip');
            }
        }
        else {
            this.onCanvasChange('attr');
        }
    };
    Element.prototype.show = function () {
        // 不是高频操作直接使用 set
        this.set('visible', true);
        this.onCanvasChange('show');
        return this;
    };
    Element.prototype.hide = function () {
        // 不是高频操作直接使用 set
        this.set('visible', false);
        this.onCanvasChange('hide');
        return this;
    };
    Element.prototype.setZIndex = function (zIndex) {
        this.set('zIndex', zIndex);
        var parent = this.getParent();
        if (parent) {
            // 改变 zIndex 不应该立即触发渲染 (调用 onCanvasChange('zIndex'))，需要经过 sort 再触发
            parent.sort();
        }
        return this;
    };
    Element.prototype.toFront = function () {
        var parent = this.getParent();
        if (!parent) {
            return;
        }
        var children = parent.getChildren();
        this.get('el');
        var index = children.indexOf(this);
        children.splice(index, 1);
        children.push(this);
        this.onCanvasChange('zIndex');
    };
    Element.prototype.toBack = function () {
        var parent = this.getParent();
        if (!parent) {
            return;
        }
        var children = parent.getChildren();
        this.get('el');
        var index = children.indexOf(this);
        children.splice(index, 1);
        children.unshift(this);
        this.onCanvasChange('zIndex');
    };
    Element.prototype.remove = function (destroy) {
        if (destroy === void 0) { destroy = true; }
        var parent = this.getParent();
        if (parent) {
            removeFromArray(parent.getChildren(), this);
            if (!parent.get('clearing')) {
                // 如果父元素正在清理，当前元素不触发 remove
                this.onCanvasChange('remove');
            }
        }
        else {
            this.onCanvasChange('remove');
        }
        if (destroy) {
            this.destroy();
        }
    };
    Element.prototype.resetMatrix = function () {
        this.attr(MATRIX, this.getDefaultMatrix());
        this.onCanvasChange('matrix');
    };
    Element.prototype.getMatrix = function () {
        return this.attr(MATRIX);
    };
    Element.prototype.setMatrix = function (m) {
        this.attr(MATRIX, m);
        this.onCanvasChange('matrix');
    };
    // 获取总的 matrix
    Element.prototype.getTotalMatrix = function () {
        var totalMatrix = this.cfg.totalMatrix;
        if (!totalMatrix) {
            var currentMatrix = this.attr('matrix');
            var parentMatrix = this.cfg.parentMatrix;
            if (parentMatrix && currentMatrix) {
                totalMatrix = multiplyMatrix(parentMatrix, currentMatrix);
            }
            else {
                totalMatrix = currentMatrix || parentMatrix;
            }
            this.set('totalMatrix', totalMatrix);
        }
        return totalMatrix;
    };
    // 上层分组设置 matrix
    Element.prototype.applyMatrix = function (matrix) {
        var currentMatrix = this.attr('matrix');
        var totalMatrix = null;
        if (matrix && currentMatrix) {
            totalMatrix = multiplyMatrix(matrix, currentMatrix);
        }
        else {
            totalMatrix = currentMatrix || matrix;
        }
        this.set('totalMatrix', totalMatrix);
        this.set('parentMatrix', matrix);
    };
    /**
     * @protected
     * 获取默认的矩阵
     * @returns {number[]|null} 默认的矩阵
     */
    Element.prototype.getDefaultMatrix = function () {
        return null;
    };
    // 将向量应用设置的矩阵
    Element.prototype.applyToMatrix = function (v) {
        var matrix = this.attr('matrix');
        if (matrix) {
            return multiplyVec2(matrix, v);
        }
        return v;
    };
    // 根据设置的矩阵，将向量转换相对于图形/分组的位置
    Element.prototype.invertFromMatrix = function (v) {
        var matrix = this.attr('matrix');
        if (matrix) {
            var invertMatrix = invert$2(matrix);
            if (invertMatrix) {
                return multiplyVec2(invertMatrix, v);
            }
        }
        return v;
    };
    // 设置 clip
    Element.prototype.setClip = function (clipCfg) {
        var canvas = this.getCanvas();
        // 应该只设置当前元素的 clip，不应该去修改 clip 本身，方便 clip 被复用
        // TODO: setClip 的传参既 shape 配置，也支持 shape 对象
        // const preShape = this.get('clipShape');
        // if (preShape) {
        //   // 将之前的 clipShape 销毁
        //   preShape.destroy();
        // }
        var clipShape = null;
        // 如果配置项为 null，则不移除 clipShape
        if (clipCfg) {
            var ShapeBase = this.getShapeBase();
            var shapeType = upperFirst$2(clipCfg.type);
            var Cons = ShapeBase[shapeType];
            if (Cons) {
                clipShape = new Cons({
                    type: clipCfg.type,
                    isClipShape: true,
                    applyTo: this,
                    attrs: clipCfg.attrs,
                    canvas: canvas,
                });
            }
        }
        this.set('clipShape', clipShape);
        this.onCanvasChange('clip');
        return clipShape;
    };
    Element.prototype.getClip = function () {
        // 高频率调用的地方直接使用 this.cfg.xxx
        var clipShape = this.cfg.clipShape;
        // 未设置时返回 Null，保证一致性
        if (!clipShape) {
            return null;
        }
        return clipShape;
    };
    Element.prototype.clone = function () {
        var _this = this;
        var originAttrs = this.attrs;
        var attrs = {};
        each(originAttrs, function (i, k) {
            if (isArray$2(originAttrs[k])) {
                attrs[k] = _cloneArrayAttr(originAttrs[k]);
            }
            else {
                attrs[k] = originAttrs[k];
            }
        });
        var cons = this.constructor;
        // @ts-ignore
        var clone = new cons({ attrs: attrs });
        each(CLONE_CFGS, function (cfgName) {
            clone.set(cfgName, _this.get(cfgName));
        });
        return clone;
    };
    Element.prototype.destroy = function () {
        var destroyed = this.destroyed;
        if (destroyed) {
            return;
        }
        this.attrs = {};
        _super.prototype.destroy.call(this);
        // this.onCanvasChange('destroy');
    };
    /**
     * 是否处于动画暂停状态
     * @return {boolean} 是否处于动画暂停状态
     */
    Element.prototype.isAnimatePaused = function () {
        return this.get('_pause').isPaused;
    };
    /**
     * 执行动画，支持多种函数签名
     * 1. animate(toAttrs: ElementAttrs, duration: number, easing?: string, callback?: () => void, delay?: number)
     * 2. animate(onFrame: OnFrame, duration: number, easing?: string, callback?: () => void, delay?: number)
     * 3. animate(toAttrs: ElementAttrs, cfg: AnimateCfg)
     * 4. animate(onFrame: OnFrame, cfg: AnimateCfg)
     * 各个参数的含义为:
     *   toAttrs  动画最终状态
     *   onFrame  自定义帧动画函数
     *   duration 动画执行时间
     *   easing   动画缓动效果
     *   callback 动画执行后的回调
     *   delay    动画延迟时间
     */
    Element.prototype.animate = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this.get('timeline') && !this.get('canvas')) {
            return;
        }
        this.set('animating', true);
        var timeline = this.get('timeline');
        if (!timeline) {
            timeline = this.get('canvas').get('timeline');
            this.set('timeline', timeline);
        }
        var animations = this.get('animations') || [];
        // 初始化 tick
        if (!timeline.timer) {
            timeline.initTimer();
        }
        var toAttrs = args[0], duration = args[1], _a = args[2], easing = _a === void 0 ? 'easeLinear' : _a, _b = args[3], callback = _b === void 0 ? noop$1 : _b, _c = args[4], delay = _c === void 0 ? 0 : _c;
        var onFrame;
        var repeat;
        var pauseCallback;
        var resumeCallback;
        var animateCfg;
        // 第二个参数，既可以是动画最终状态 toAttrs，也可以是自定义帧动画函数 onFrame
        if (isFunction$1(toAttrs)) {
            onFrame = toAttrs;
            toAttrs = {};
        }
        else if (isObject$1(toAttrs) && toAttrs.onFrame) {
            // 兼容 3.0 中的写法，onFrame 和 repeat 可在 toAttrs 中设置
            onFrame = toAttrs.onFrame;
            repeat = toAttrs.repeat;
        }
        // 第二个参数，既可以是执行时间 duration，也可以是动画参数 animateCfg
        if (isObject$1(duration)) {
            animateCfg = duration;
            duration = animateCfg.duration;
            easing = animateCfg.easing || 'easeLinear';
            delay = animateCfg.delay || 0;
            // animateCfg 中的设置优先级更高
            repeat = animateCfg.repeat || repeat || false;
            callback = animateCfg.callback || noop$1;
            pauseCallback = animateCfg.pauseCallback || noop$1;
            resumeCallback = animateCfg.resumeCallback || noop$1;
        }
        else {
            // 第四个参数，既可以是回调函数 callback，也可以是延迟时间 delay
            if (isNumber$1(callback)) {
                delay = callback;
                callback = null;
            }
            // 第三个参数，既可以是缓动参数 easing，也可以是回调函数 callback
            if (isFunction$1(easing)) {
                callback = easing;
                easing = 'easeLinear';
            }
            else {
                easing = easing || 'easeLinear';
            }
        }
        var formatToAttrs = getFormatToAttrs(toAttrs, this);
        var animation = {
            fromAttrs: getFormatFromAttrs(formatToAttrs, this),
            toAttrs: formatToAttrs,
            duration: duration,
            easing: easing,
            repeat: repeat,
            callback: callback,
            pauseCallback: pauseCallback,
            resumeCallback: resumeCallback,
            delay: delay,
            startTime: timeline.getTime(),
            id: uniqueId$1(),
            onFrame: onFrame,
            pathFormatted: false,
        };
        // 如果动画元素队列中已经有这个图形了
        if (animations.length > 0) {
            // 先检查是否需要合并属性。若有相同的动画，将该属性从前一个动画中删除,直接用后一个动画中
            animations = checkExistedAttrs(animations, animation);
        }
        else {
            // 否则将图形添加到动画元素队列
            timeline.addAnimator(this);
        }
        animations.push(animation);
        this.set('animations', animations);
        this.set('_pause', { isPaused: false });
    };
    /**
     * 停止动画
     * @param {boolean} toEnd 是否到动画的最终状态
     */
    Element.prototype.stopAnimate = function (toEnd) {
        var _this = this;
        if (toEnd === void 0) { toEnd = true; }
        var animations = this.get('animations');
        each(animations, function (animation) {
            // 将动画执行到最后一帧
            if (toEnd) {
                if (animation.onFrame) {
                    _this.attr(animation.onFrame(1));
                }
                else {
                    _this.attr(animation.toAttrs);
                }
            }
            if (animation.callback) {
                // 动画停止时的回调
                animation.callback();
            }
        });
        this.set('animating', false);
        this.set('animations', []);
    };
    /**
     * 暂停动画
     */
    Element.prototype.pauseAnimate = function () {
        var timeline = this.get('timeline');
        var animations = this.get('animations');
        var pauseTime = timeline.getTime();
        each(animations, function (animation) {
            animation._paused = true;
            animation._pauseTime = pauseTime;
            if (animation.pauseCallback) {
                // 动画暂停时的回调
                animation.pauseCallback();
            }
        });
        // 记录下是在什么时候暂停的
        this.set('_pause', {
            isPaused: true,
            pauseTime: pauseTime,
        });
        return this;
    };
    /**
     * 恢复动画
     */
    Element.prototype.resumeAnimate = function () {
        var timeline = this.get('timeline');
        var current = timeline.getTime();
        var animations = this.get('animations');
        var pauseTime = this.get('_pause').pauseTime;
        // 之后更新属性需要计算动画已经执行的时长，如果暂停了，就把初始时间调后
        each(animations, function (animation) {
            animation.startTime = animation.startTime + (current - pauseTime);
            animation._paused = false;
            animation._pauseTime = null;
            if (animation.resumeCallback) {
                animation.resumeCallback();
            }
        });
        this.set('_pause', {
            isPaused: false,
        });
        this.set('animations', animations);
        return this;
    };
    /**
     * 触发委托事件
     * @param  {string}     type 事件类型
     * @param  {GraphEvent} eventObj 事件对象
     */
    Element.prototype.emitDelegation = function (type, eventObj) {
        var _this = this;
        var paths = eventObj.propagationPath;
        this.getEvents();
        var relativeShape;
        if (type === 'mouseenter') {
            relativeShape = eventObj.fromShape;
        }
        else if (type === 'mouseleave') {
            relativeShape = eventObj.toShape;
        }
        var _loop_1 = function (i) {
            var element = paths[i];
            // 暂定跟 name 绑定
            var name_1 = element.get('name');
            if (name_1) {
                // 第一个 mouseenter 和 mouseleave 的停止即可，因为后面的都是前面的 Parent
                if (
                // 只有 element 是 Group 或者 Canvas 的时候，才需要判断 isParent
                (element.isGroup() || (element.isCanvas && element.isCanvas())) &&
                    relativeShape &&
                    isParent(element, relativeShape)) {
                    return "break";
                }
                if (isArray$2(name_1)) {
                    each(name_1, function (subName) {
                        _this.emitDelegateEvent(element, subName, eventObj);
                    });
                }
                else {
                    this_1.emitDelegateEvent(element, name_1, eventObj);
                }
            }
        };
        var this_1 = this;
        // 至少有一个对象，且第一个对象为 shape
        for (var i = 0; i < paths.length; i++) {
            var state_1 = _loop_1(i);
            if (state_1 === "break")
                break;
        }
    };
    Element.prototype.emitDelegateEvent = function (element, name, eventObj) {
        var events = this.getEvents();
        // 事件委托的形式 name:type
        var eventName = name + DELEGATION_SPLIT + eventObj.type;
        if (events[eventName] || events[WILDCARD]) {
            // 对于通配符 *，事件名称 = 委托事件名称
            eventObj.name = eventName;
            eventObj.currentTarget = element;
            eventObj.delegateTarget = this;
            // 将委托事件的监听对象 delegateObject 挂载到事件对象上
            eventObj.delegateObject = element.get('delegateObject');
            this.emit(eventName, eventObj);
        }
    };
    /**
     * 移动元素
     * @param {number} translateX 水平移动距离
     * @param {number} translateY 垂直移动距离
     * @return {IElement} 元素
     */
    Element.prototype.translate = function (translateX, translateY) {
        if (translateX === void 0) { translateX = 0; }
        if (translateY === void 0) { translateY = 0; }
        var matrix = this.getMatrix();
        var newMatrix = transform$2(matrix, [['t', translateX, translateY]]);
        this.setMatrix(newMatrix);
        return this;
    };
    /**
     * 移动元素到目标位置
     * @param {number} targetX 目标位置的水平坐标
     * @param {number} targetX 目标位置的垂直坐标
     * @return {IElement} 元素
     */
    Element.prototype.move = function (targetX, targetY) {
        var x = this.attr('x') || 0;
        var y = this.attr('y') || 0;
        this.translate(targetX - x, targetY - y);
        return this;
    };
    /**
     * 移动元素到目标位置，等价于 move 方法。由于 moveTo 的语义性更强，因此在文档中推荐使用 moveTo 方法
     * @param {number} targetX 目标位置的 x 轴坐标
     * @param {number} targetY 目标位置的 y 轴坐标
     * @return {IElement} 元素
     */
    Element.prototype.moveTo = function (targetX, targetY) {
        return this.move(targetX, targetY);
    };
    /**
     * 缩放元素
     * @param {number} ratioX 水平缩放比例
     * @param {number} ratioY 垂直缩放比例
     * @return {IElement} 元素
     */
    Element.prototype.scale = function (ratioX, ratioY) {
        var matrix = this.getMatrix();
        var newMatrix = transform$2(matrix, [['s', ratioX, ratioY || ratioX]]);
        this.setMatrix(newMatrix);
        return this;
    };
    /**
     * 以画布左上角 (0, 0) 为中心旋转元素
     * @param {number} radian 旋转角度(弧度值)
     * @return {IElement} 元素
     */
    Element.prototype.rotate = function (radian) {
        var matrix = this.getMatrix();
        var newMatrix = transform$2(matrix, [['r', radian]]);
        this.setMatrix(newMatrix);
        return this;
    };
    /**
     * 以起始点为中心旋转元素
     * @param {number} radian 旋转角度(弧度值)
     * @return {IElement} 元素
     */
    Element.prototype.rotateAtStart = function (rotate) {
        var _a = this.attr(), x = _a.x, y = _a.y;
        var matrix = this.getMatrix();
        var newMatrix = transform$2(matrix, [
            ['t', -x, -y],
            ['r', rotate],
            ['t', x, y],
        ]);
        this.setMatrix(newMatrix);
        return this;
    };
    /**
     * 以任意点 (x, y) 为中心旋转元素
     * @param {number} radian 旋转角度(弧度值)
     * @return {IElement} 元素
     */
    Element.prototype.rotateAtPoint = function (x, y, rotate) {
        var matrix = this.getMatrix();
        var newMatrix = transform$2(matrix, [
            ['t', -x, -y],
            ['r', rotate],
            ['t', x, y],
        ]);
        this.setMatrix(newMatrix);
        return this;
    };
    return Element;
}(Base));

var SHAPE_MAP = {};
var INDEX = '_INDEX';
/**
 * 设置 canvas
 * @param {IElement} element 元素
 * @param {ICanvas}  canvas  画布
 */
function setCanvas(element, canvas) {
    element.set('canvas', canvas);
    if (element.isGroup()) {
        var children = element.get('children');
        if (children.length) {
            children.forEach(function (child) {
                setCanvas(child, canvas);
            });
        }
    }
}
/**
 * 设置 timeline
 * @param {IElement} element  元素
 * @param {Timeline} timeline 时间轴
 */
function setTimeline(element, timeline) {
    element.set('timeline', timeline);
    if (element.isGroup()) {
        var children = element.get('children');
        if (children.length) {
            children.forEach(function (child) {
                setTimeline(child, timeline);
            });
        }
    }
}
function removeChild(container, element, destroy) {
    if (destroy === void 0) { destroy = true; }
    // 不再调用 element.remove() 方法，会出现循环调用
    if (destroy) {
        element.destroy();
    }
    else {
        element.set('parent', null);
        element.set('canvas', null);
    }
    removeFromArray(container.getChildren(), element);
}
function getComparer(compare) {
    return function (left, right) {
        var result = compare(left, right);
        return result === 0 ? left[INDEX] - right[INDEX] : result;
    };
}
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Container.prototype.isCanvas = function () {
        return false;
    };
    // 根据子节点确定 BBox
    Container.prototype.getBBox = function () {
        // 所有的值可能在画布的可视区外
        var minX = Infinity;
        var maxX = -Infinity;
        var minY = Infinity;
        var maxY = -Infinity;
        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并
        var children = this.getChildren().filter(function (child) {
            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));
        });
        if (children.length > 0) {
            each(children, function (child) {
                var _a = child.getBBox(), childMinX = _a.minX, childMaxX = _a.maxX, childMinY = _a.minY, childMaxY = _a.maxY;
                if (childMinX < minX) {
                    minX = childMinX;
                }
                if (childMaxX > maxX) {
                    maxX = childMaxX;
                }
                if (childMinY < minY) {
                    minY = childMinY;
                }
                if (childMaxY > maxY) {
                    maxY = childMaxY;
                }
            });
        }
        else {
            minX = 0;
            maxX = 0;
            minY = 0;
            maxY = 0;
        }
        var box = {
            x: minX,
            y: minY,
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            width: maxX - minX,
            height: maxY - minY,
        };
        return box;
    };
    // 获取画布的包围盒
    Container.prototype.getCanvasBBox = function () {
        var minX = Infinity;
        var maxX = -Infinity;
        var minY = Infinity;
        var maxY = -Infinity;
        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并
        var children = this.getChildren().filter(function (child) {
            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));
        });
        if (children.length > 0) {
            each(children, function (child) {
                var _a = child.getCanvasBBox(), childMinX = _a.minX, childMaxX = _a.maxX, childMinY = _a.minY, childMaxY = _a.maxY;
                if (childMinX < minX) {
                    minX = childMinX;
                }
                if (childMaxX > maxX) {
                    maxX = childMaxX;
                }
                if (childMinY < minY) {
                    minY = childMinY;
                }
                if (childMaxY > maxY) {
                    maxY = childMaxY;
                }
            });
        }
        else {
            minX = 0;
            maxX = 0;
            minY = 0;
            maxY = 0;
        }
        var box = {
            x: minX,
            y: minY,
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            width: maxX - minX,
            height: maxY - minY,
        };
        return box;
    };
    Container.prototype.getDefaultCfg = function () {
        var cfg = _super.prototype.getDefaultCfg.call(this);
        cfg['children'] = [];
        return cfg;
    };
    Container.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        if (name === 'matrix') {
            var totalMatrix = this.getTotalMatrix();
            this._applyChildrenMarix(totalMatrix);
        }
    };
    // 不但应用到自己身上还要应用于子元素
    Container.prototype.applyMatrix = function (matrix) {
        var preTotalMatrix = this.getTotalMatrix();
        _super.prototype.applyMatrix.call(this, matrix);
        var totalMatrix = this.getTotalMatrix();
        // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时
        // 不继续向下传递矩阵
        if (totalMatrix === preTotalMatrix) {
            return;
        }
        this._applyChildrenMarix(totalMatrix);
    };
    // 在子元素上设置矩阵
    Container.prototype._applyChildrenMarix = function (totalMatrix) {
        var children = this.getChildren();
        each(children, function (child) {
            child.applyMatrix(totalMatrix);
        });
    };
    // 兼容老版本的接口
    Container.prototype.addShape = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var type = args[0];
        var cfg = args[1];
        if (isObject$1(type)) {
            cfg = type;
        }
        else {
            cfg['type'] = type;
        }
        var shapeType = SHAPE_MAP[cfg.type];
        if (!shapeType) {
            shapeType = upperFirst$2(cfg.type);
            SHAPE_MAP[cfg.type] = shapeType;
        }
        var ShapeBase = this.getShapeBase();
        var shape = new ShapeBase[shapeType](cfg);
        this.add(shape);
        return shape;
    };
    Container.prototype.addGroup = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var groupClass = args[0], cfg = args[1];
        var group;
        if (isFunction$1(groupClass)) {
            if (cfg) {
                group = new groupClass(cfg);
            }
            else {
                group = new groupClass({
                    // canvas,
                    parent: this,
                });
            }
        }
        else {
            var tmpCfg = groupClass || {};
            var TmpGroupClass = this.getGroupBase();
            group = new TmpGroupClass(tmpCfg);
        }
        this.add(group);
        return group;
    };
    Container.prototype.getCanvas = function () {
        var canvas;
        if (this.isCanvas()) {
            canvas = this;
        }
        else {
            canvas = this.get('canvas');
        }
        return canvas;
    };
    Container.prototype.getShape = function (x, y, ev) {
        // 如果不支持拾取，则直接返回
        if (!isAllowCapture(this)) {
            return null;
        }
        var children = this.getChildren();
        var shape;
        // 如果容器是 group
        if (!this.isCanvas()) {
            var v = [x, y, 1];
            // 将 x, y 转换成对应于 group 的局部坐标
            v = this.invertFromMatrix(v);
            if (!this.isClipped(v[0], v[1])) {
                shape = this._findShape(children, v[0], v[1], ev);
            }
        }
        else {
            shape = this._findShape(children, x, y, ev);
        }
        return shape;
    };
    Container.prototype._findShape = function (children, x, y, ev) {
        var shape = null;
        for (var i = children.length - 1; i >= 0; i--) {
            var child = children[i];
            if (isAllowCapture(child)) {
                if (child.isGroup()) {
                    shape = child.getShape(x, y, ev);
                }
                else if (child.isHit(x, y)) {
                    shape = child;
                }
            }
            if (shape) {
                break;
            }
        }
        return shape;
    };
    Container.prototype.add = function (element) {
        var canvas = this.getCanvas();
        var children = this.getChildren();
        var timeline = this.get('timeline');
        var preParent = element.getParent();
        if (preParent) {
            removeChild(preParent, element, false);
        }
        element.set('parent', this);
        if (canvas) {
            setCanvas(element, canvas);
        }
        if (timeline) {
            setTimeline(element, timeline);
        }
        children.push(element);
        element.onCanvasChange('add');
        this._applyElementMatrix(element);
    };
    // 将当前容器的矩阵应用到子元素
    Container.prototype._applyElementMatrix = function (element) {
        var totalMatrix = this.getTotalMatrix();
        // 添加图形或者分组时，需要把当前图元的矩阵设置进去
        if (totalMatrix) {
            element.applyMatrix(totalMatrix);
        }
    };
    Container.prototype.getChildren = function () {
        return this.get('children');
    };
    Container.prototype.sort = function () {
        var children = this.getChildren();
        // 稳定排序
        each(children, function (child, index) {
            child[INDEX] = index;
            return child;
        });
        children.sort(getComparer(function (obj1, obj2) {
            return obj1.get('zIndex') - obj2.get('zIndex');
        }));
        this.onCanvasChange('sort');
    };
    Container.prototype.clear = function () {
        this.set('clearing', true);
        if (this.destroyed) {
            return;
        }
        var children = this.getChildren();
        for (var i = children.length - 1; i >= 0; i--) {
            children[i].destroy(); // 销毁子元素
        }
        this.set('children', []);
        this.onCanvasChange('clear');
        this.set('clearing', false);
    };
    Container.prototype.destroy = function () {
        if (this.get('destroyed')) {
            return;
        }
        this.clear();
        _super.prototype.destroy.call(this);
    };
    /**
     * 获取第一个子元素
     * @return {IElement} 第一个元素
     */
    Container.prototype.getFirst = function () {
        return this.getChildByIndex(0);
    };
    /**
     * 获取最后一个子元素
     * @return {IElement} 元素
     */
    Container.prototype.getLast = function () {
        var children = this.getChildren();
        return this.getChildByIndex(children.length - 1);
    };
    /**
     * 根据索引获取子元素
     * @return {IElement} 第一个元素
     */
    Container.prototype.getChildByIndex = function (index) {
        var children = this.getChildren();
        return children[index];
    };
    /**
     * 子元素的数量
     * @return {number} 子元素数量
     */
    Container.prototype.getCount = function () {
        var children = this.getChildren();
        return children.length;
    };
    /**
     * 是否包含对应元素
     * @param {IElement} element 元素
     * @return {boolean}
     */
    Container.prototype.contain = function (element) {
        var children = this.getChildren();
        return children.indexOf(element) > -1;
    };
    /**
     * 移除对应子元素
     * @param {IElement} element 子元素
     * @param {boolean} destroy 是否销毁子元素，默认为 true
     */
    Container.prototype.removeChild = function (element, destroy) {
        if (destroy === void 0) { destroy = true; }
        if (this.contain(element)) {
            element.remove(destroy);
        }
    };
    /**
     * 查找所有匹配的元素
     * @param  {ElementFilterFn}   fn  匹配函数
     * @return {IElement[]} 元素数组
     */
    Container.prototype.findAll = function (fn) {
        var rst = [];
        var children = this.getChildren();
        each(children, function (element) {
            if (fn(element)) {
                rst.push(element);
            }
            if (element.isGroup()) {
                rst = rst.concat(element.findAll(fn));
            }
        });
        return rst;
    };
    /**
     * 查找元素，找到第一个返回
     * @param  {ElementFilterFn} fn    匹配函数
     * @return {IElement|null} 元素，可以为空
     */
    Container.prototype.find = function (fn) {
        var rst = null;
        var children = this.getChildren();
        each(children, function (element) {
            if (fn(element)) {
                rst = element;
            }
            else if (element.isGroup()) {
                rst = element.find(fn);
            }
            if (rst) {
                return false;
            }
        });
        return rst;
    };
    /**
     * 根据 ID 查找元素
     * @param {string} id 元素 id
     * @return {IElement|null} 元素
     */
    Container.prototype.findById = function (id) {
        return this.find(function (element) {
            return element.get('id') === id;
        });
    };
    /**
     * 该方法即将废弃，不建议使用
     * 根据 className 查找元素
     * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除
     * @param {string} className 元素 className
     * @return {IElement | null} 元素
     */
    Container.prototype.findByClassName = function (className) {
        return this.find(function (element) {
            return element.get('className') === className;
        });
    };
    /**
     * 根据 name 查找元素列表
     * @param {string}      name 元素名称
     * @return {IElement[]} 元素
     */
    Container.prototype.findAllByName = function (name) {
        return this.findAll(function (element) {
            return element.get('name') === name;
        });
    };
    return Container;
}(Element$1));

var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock$1 = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now$2() {
  return clockNow || (setFrame(clearNow), clockNow = clock$1.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now$2() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now$2(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock$1.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock$1.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock$1.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock$1.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function define$1(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend$2(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color$1() {}

var darker$1 = 0.7;
var brighter$1 = 1 / darker$1;

var reI$1 = "\\s*([+-]?\\d+)\\s*",
    reN$1 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP$1 = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex$1 = /^#([0-9a-f]{3,8})$/,
    reRgbInteger$1 = new RegExp(`^rgb\\(${reI$1},${reI$1},${reI$1}\\)$`),
    reRgbPercent$1 = new RegExp(`^rgb\\(${reP$1},${reP$1},${reP$1}\\)$`),
    reRgbaInteger$1 = new RegExp(`^rgba\\(${reI$1},${reI$1},${reI$1},${reN$1}\\)$`),
    reRgbaPercent$1 = new RegExp(`^rgba\\(${reP$1},${reP$1},${reP$1},${reN$1}\\)$`),
    reHslPercent$1 = new RegExp(`^hsl\\(${reN$1},${reP$1},${reP$1}\\)$`),
    reHslaPercent$1 = new RegExp(`^hsla\\(${reN$1},${reP$1},${reP$1},${reN$1}\\)$`);

var named$1 = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define$1(Color$1, color$1, {
  copy(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex$1, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex$1,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl$1,
  formatRgb: color_formatRgb$1,
  toString: color_formatRgb$1
});

function color_formatHex$1() {
  return this.rgb().formatHex();
}

function color_formatHex8() {
  return this.rgb().formatHex8();
}

function color_formatHsl$1() {
  return hslConvert$1(this).formatHsl();
}

function color_formatRgb$1() {
  return this.rgb().formatRgb();
}

function color$1(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex$1.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn$1(m) // #ff0000
      : l === 3 ? new Rgb$1((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba$1(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba$1((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger$1.exec(format)) ? new Rgb$1(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent$1.exec(format)) ? new Rgb$1(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger$1.exec(format)) ? rgba$1(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent$1.exec(format)) ? rgba$1(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent$1.exec(format)) ? hsla$1(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent$1.exec(format)) ? hsla$1(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named$1.hasOwnProperty(format) ? rgbn$1(named$1[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb$1(NaN, NaN, NaN, 0)
      : null;
}

function rgbn$1(n) {
  return new Rgb$1(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba$1(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb$1(r, g, b, a);
}

function rgbConvert$1(o) {
  if (!(o instanceof Color$1)) o = color$1(o);
  if (!o) return new Rgb$1;
  o = o.rgb();
  return new Rgb$1(o.r, o.g, o.b, o.opacity);
}

function rgb$3(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert$1(r) : new Rgb$1(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb$1(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define$1(Rgb$1, rgb$3, extend$2(Color$1, {
  brighter(k) {
    k = k == null ? brighter$1 : Math.pow(brighter$1, k);
    return new Rgb$1(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker$1 : Math.pow(darker$1, k);
    return new Rgb$1(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb$1(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex$1, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex$1,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb$1,
  toString: rgb_formatRgb$1
}));

function rgb_formatHex$1() {
  return `#${hex$1(this.r)}${hex$1(this.g)}${hex$1(this.b)}`;
}

function rgb_formatHex8() {
  return `#${hex$1(this.r)}${hex$1(this.g)}${hex$1(this.b)}${hex$1((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}

function rgb_formatRgb$1() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}

function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}

function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}

function hex$1(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla$1(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl$1(h, s, l, a);
}

function hslConvert$1(o) {
  if (o instanceof Hsl$1) return new Hsl$1(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color$1)) o = color$1(o);
  if (!o) return new Hsl$1;
  if (o instanceof Hsl$1) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl$1(h, s, l, o.opacity);
}

function hsl$1(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert$1(h) : new Hsl$1(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl$1(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define$1(Hsl$1, hsl$1, extend$2(Color$1, {
  brighter(k) {
    k = k == null ? brighter$1 : Math.pow(brighter$1, k);
    return new Hsl$1(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker$1 : Math.pow(darker$1, k);
    return new Hsl$1(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb$1(
      hsl2rgb$1(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb$1(h, m1, m2),
      hsl2rgb$1(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl$1(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));

function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}

function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb$1(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var constant$2 = x => () => x;

function linear$2(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential$1(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function gamma$1(y) {
  return (y = +y) === 1 ? nogamma$1 : function(a, b) {
    return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);
  };
}

function nogamma$1(a, b) {
  var d = b - a;
  return d ? linear$2(a, d) : constant$2(isNaN(a) ? b : a);
}

var rgb$2 = (function rgbGamma(y) {
  var color = gamma$1(y);

  function rgb(start, end) {
    var r = color((start = rgb$3(start)).r, (end = rgb$3(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma$1(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1);

function numberArray$1(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray$1(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function interpolateArray$1(a, b) {
  return (isNumberArray$1(b) ? numberArray$1 : genericArray$1)(a, b);
}

function genericArray$1(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date$2(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function number$2(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object$2(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolate(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA$1 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB$1 = new RegExp(reA$1.source, "g");

function zero$1(b) {
  return function() {
    return b;
  };
}

function one$1(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string$2(a, b) {
  var bi = reA$1.lastIndex = reB$1.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA$1.exec(a))
      && (bm = reB$1.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: number$2(am, bm)});
    }
    bi = reB$1.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one$1(q[0].x)
      : zero$1(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function interpolate(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant$2(b)
      : (t === "number" ? number$2
      : t === "string" ? ((c = color$1(b)) ? (b = c, rgb$2) : string$2)
      : b instanceof color$1 ? rgb$2
      : b instanceof Date ? date$2
      : isNumberArray$1(b) ? numberArray$1
      : Array.isArray(b) ? genericArray$1
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$2
      : number$2)(a, b);
}

function linear$1(t) {
  return +t;
}

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);

var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return (+t === 1) ? 1 : 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}

// tpmt is two power minus ten times t scaled to [0,1]
function tpmt(x) {
  return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
}

function expIn(t) {
  return tpmt(1 - +t);
}

function expOut(t) {
  return 1 - tpmt(t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
}

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return (t = +t) * t * (s * (t - 1) + t);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((t + 1) * s + t) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);

var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * tpmt(-(--t)) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * tpmt(-t) * Math.sin((s - t) / p)
        : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);

var d3Ease = /*#__PURE__*/Object.freeze({
  __proto__: null,
  easeLinear: linear$1,
  easeQuad: quadInOut,
  easeQuadIn: quadIn,
  easeQuadOut: quadOut,
  easeQuadInOut: quadInOut,
  easeCubic: cubicInOut,
  easeCubicIn: cubicIn,
  easeCubicOut: cubicOut,
  easeCubicInOut: cubicInOut,
  easePoly: polyInOut,
  easePolyIn: polyIn,
  easePolyOut: polyOut,
  easePolyInOut: polyInOut,
  easeSin: sinInOut,
  easeSinIn: sinIn,
  easeSinOut: sinOut,
  easeSinInOut: sinInOut,
  easeExp: expInOut,
  easeExpIn: expIn,
  easeExpOut: expOut,
  easeExpInOut: expInOut,
  easeCircle: circleInOut,
  easeCircleIn: circleIn,
  easeCircleOut: circleOut,
  easeCircleInOut: circleInOut,
  easeBounce: bounceOut,
  easeBounceIn: bounceIn,
  easeBounceOut: bounceOut,
  easeBounceInOut: bounceInOut,
  easeBack: backInOut,
  easeBackIn: backIn,
  easeBackOut: backOut,
  easeBackInOut: backInOut,
  easeElastic: elasticOut,
  easeElasticIn: elasticIn,
  easeElasticOut: elasticOut,
  easeElasticInOut: elasticInOut
});

var EASING_MAP = {};
/**
 * 根据名称获取对应的动画缓动函数
 * @param type 动画缓动函数名称
 */
function getEasing(type) {
    // 默认从 d3-ease 中获取
    return EASING_MAP[type.toLowerCase()] || d3Ease[type];
}

var isColorProp = function (prop) { return ['fill', 'stroke', 'fillStyle', 'strokeStyle'].includes(prop); };
var isGradientColor = function (val) { return /^[r,R,L,l]{1}[\s]*\(/.test(val); };

var IDENTITY_MATRIX = [1, 0, 0, 0, 1, 0, 0, 0, 1];
/**
 * 使用 ratio 进行插值计算来更新属性
 * @param {IElement}  shape    元素
 * @param {Animation} animation 动画
 * @param {number}    ratio    比例
 * @return {boolean}  动画是否执行完成
 */
function _update(shape, animation, ratio) {
    var cProps = {}; // 此刻属性
    var fromAttrs = animation.fromAttrs, toAttrs = animation.toAttrs;
    if (shape.destroyed) {
        return;
    }
    var interf; //  差值函数
    for (var k in toAttrs) {
        if (!isEqual$2(fromAttrs[k], toAttrs[k])) {
            if (k === 'path') {
                var toPath = toAttrs[k];
                var fromPath = fromAttrs[k];
                if (toPath.length > fromPath.length) {
                    toPath = parsePathString$1(toAttrs[k]); // 终点状态
                    fromPath = parsePathString$1(fromAttrs[k]); // 起始状态
                    fromPath = fillPathByDiff(fromPath, toPath);
                    fromPath = formatPath(fromPath, toPath);
                    animation.fromAttrs.path = fromPath;
                    animation.toAttrs.path = toPath;
                }
                else if (!animation.pathFormatted) {
                    toPath = parsePathString$1(toAttrs[k]);
                    fromPath = parsePathString$1(fromAttrs[k]);
                    fromPath = formatPath(fromPath, toPath);
                    animation.fromAttrs.path = fromPath;
                    animation.toAttrs.path = toPath;
                    animation.pathFormatted = true;
                }
                cProps[k] = [];
                for (var i = 0; i < toPath.length; i++) {
                    var toPathPoint = toPath[i];
                    var fromPathPoint = fromPath[i];
                    var cPathPoint = [];
                    for (var j = 0; j < toPathPoint.length; j++) {
                        if (isNumber$1(toPathPoint[j]) && fromPathPoint && isNumber$1(fromPathPoint[j])) {
                            interf = interpolate(fromPathPoint[j], toPathPoint[j]);
                            cPathPoint.push(interf(ratio));
                        }
                        else {
                            cPathPoint.push(toPathPoint[j]);
                        }
                    }
                    cProps[k].push(cPathPoint);
                }
            }
            else if (k === 'matrix') {
                /*
                 对矩阵进行插值时，需要保证矩阵不为空，为空则使用单位矩阵
                 TODO: 二维和三维场景下单位矩阵不同，之后 WebGL 版需要做进一步处理
                 */
                var matrixFn = interpolateArray$1(fromAttrs[k] || IDENTITY_MATRIX, toAttrs[k] || IDENTITY_MATRIX);
                var currentMatrix = matrixFn(ratio);
                cProps[k] = currentMatrix;
            }
            else if (isColorProp(k) && isGradientColor(toAttrs[k])) {
                cProps[k] = toAttrs[k];
            }
            else if (!isFunction$1(toAttrs[k])) {
                // 非函数类型的值才能做插值
                interf = interpolate(fromAttrs[k], toAttrs[k]);
                cProps[k] = interf(ratio);
            }
        }
    }
    shape.attr(cProps);
}
/**
 * 根据自定义帧动画函数 onFrame 来更新属性
 * @param {IElement}  shape    元素
 * @param {Animation} animation 动画
 * @param {number}    elapsed  动画执行时间(毫秒)
 * @return {boolean}  动画是否执行完成
 */
function update$1(shape, animation, elapsed) {
    var startTime = animation.startTime, delay = animation.delay;
    // 如果还没有开始执行或暂停，先不更新
    if (elapsed < startTime + delay || animation._paused) {
        return false;
    }
    var ratio;
    var duration = animation.duration;
    var easing = animation.easing;
    var easeFn = getEasing(easing);
    // 已执行时间
    elapsed = elapsed - startTime - animation.delay;
    if (animation.repeat) {
        // 如果动画重复执行，则 elapsed > duration，计算 ratio 时需取模
        ratio = (elapsed % duration) / duration;
        ratio = easeFn(ratio);
    }
    else {
        ratio = elapsed / duration;
        if (ratio < 1) {
            // 动画未执行完
            ratio = easeFn(ratio);
        }
        else {
            // 动画已执行完
            if (animation.onFrame) {
                shape.attr(animation.onFrame(1));
            }
            else {
                shape.attr(animation.toAttrs);
            }
            return true;
        }
    }
    if (animation.onFrame) {
        var attrs = animation.onFrame(ratio);
        shape.attr(attrs);
    }
    else {
        _update(shape, animation, ratio);
    }
    return false;
}
var Timeline = /** @class */ (function () {
    /**
     * 时间轴构造函数，依赖于画布
     * @param {}
     */
    function Timeline(canvas) {
        /**
         * 执行动画的元素列表
         * @type {IElement[]}
         */
        this.animators = [];
        /**
         * 当前时间
         * @type {number}
         */
        this.current = 0;
        /**
         * 定时器
         * @type {d3Timer.Timer}
         */
        this.timer = null;
        this.canvas = canvas;
    }
    /**
     * 初始化定时器
     */
    Timeline.prototype.initTimer = function () {
        var _this = this;
        var isFinished = false;
        var shape;
        var animations;
        var animation;
        this.timer = timer(function (elapsed) {
            _this.current = elapsed;
            if (_this.animators.length > 0) {
                for (var i = _this.animators.length - 1; i >= 0; i--) {
                    shape = _this.animators[i];
                    if (shape.destroyed) {
                        // 如果已经被销毁，直接移出队列
                        _this.removeAnimator(i);
                        continue;
                    }
                    if (!shape.isAnimatePaused()) {
                        animations = shape.get('animations');
                        for (var j = animations.length - 1; j >= 0; j--) {
                            animation = animations[j];
                            isFinished = update$1(shape, animation, elapsed);
                            if (isFinished) {
                                animations.splice(j, 1);
                                isFinished = false;
                                if (animation.callback) {
                                    animation.callback();
                                }
                            }
                        }
                    }
                    if (animations.length === 0) {
                        _this.removeAnimator(i);
                    }
                }
                var autoDraw = _this.canvas.get('autoDraw');
                // 非自动渲染模式下，手动调用 canvas.draw() 重新渲染
                if (!autoDraw) {
                    _this.canvas.draw();
                }
            }
        });
    };
    /**
     * 增加动画元素
     */
    Timeline.prototype.addAnimator = function (shape) {
        this.animators.push(shape);
    };
    /**
     * 移除动画元素
     */
    Timeline.prototype.removeAnimator = function (index) {
        this.animators.splice(index, 1);
    };
    /**
     * 是否有动画在执行
     */
    Timeline.prototype.isAnimating = function () {
        return !!this.animators.length;
    };
    /**
     * 停止定时器
     */
    Timeline.prototype.stop = function () {
        if (this.timer) {
            this.timer.stop();
        }
    };
    /**
     * 停止时间轴上所有元素的动画，并置空动画元素列表
     * @param {boolean} toEnd 是否到动画的最终状态，用来透传给动画元素的 stopAnimate 方法
     */
    Timeline.prototype.stopAllAnimations = function (toEnd) {
        if (toEnd === void 0) { toEnd = true; }
        this.animators.forEach(function (animator) {
            animator.stopAnimate(toEnd);
        });
        this.animators = [];
        this.canvas.draw();
    };
    /**
     * 获取当前时间
     */
    Timeline.prototype.getTime = function () {
        return this.current;
    };
    return Timeline;
}());

/**
 * @fileoverview 事件处理器
 * @author dxq613@gmail.com
 */
var CLICK_OFFSET = 40;
var LEFT_BTN_CODE = 0;
var EVENTS = [
    'mousedown',
    'mouseup',
    'dblclick',
    'mouseout',
    'mouseover',
    'mousemove',
    'mouseleave',
    'mouseenter',
    'touchstart',
    'touchmove',
    'touchend',
    'dragenter',
    'dragover',
    'dragleave',
    'drop',
    'contextmenu',
    'mousewheel',
];
// 触发目标事件，目标只能是 shape 或 canvas
function emitTargetEvent(target, type, eventObj) {
    eventObj.name = type;
    eventObj.target = target;
    eventObj.currentTarget = target;
    eventObj.delegateTarget = target;
    target.emit(type, eventObj);
}
// 事件冒泡, enter 和 leave 需要对 fromShape 和 toShape 进行判同
function bubbleEvent(container, type, eventObj) {
    if (eventObj.bubbles) {
        var relativeShape = void 0;
        var isOverEvent = false;
        if (type === 'mouseenter') {
            relativeShape = eventObj.fromShape;
            isOverEvent = true;
        }
        else if (type === 'mouseleave') {
            isOverEvent = true;
            relativeShape = eventObj.toShape;
        }
        // canvas 上的 mouseenter， mouseleave 事件，仅当进入或者移出 canvas 时触发
        if (container.isCanvas() && isOverEvent) {
            return;
        }
        // 如果相关图形同当前图形在同一个容器内，不触发事件
        if (relativeShape && isParent(container, relativeShape)) {
            // 阻止继续向上冒泡
            eventObj.bubbles = false;
            return;
        }
        // 事件名称可能在委托过程中被修改，因此事件冒泡时需要重新设置事件名称
        eventObj.name = type;
        eventObj.currentTarget = container;
        eventObj.delegateTarget = container;
        container.emit(type, eventObj);
    }
}
var EventController$1 = /** @class */ (function () {
    function EventController(cfg) {
        var _this = this;
        // 正在被拖拽的图形
        this.draggingShape = null;
        this.dragging = false;
        // 当前鼠标/touch所在位置的图形
        this.currentShape = null;
        this.mousedownShape = null;
        this.mousedownPoint = null;
        // 统一处理所有的回调
        this._eventCallback = function (ev) {
            var type = ev.type;
            _this._triggerEvent(type, ev);
        };
        // 在 document 处理拖拽到画布外的事件，处理从图形上移除画布未被捕捉的问题
        this._onDocumentMove = function (ev) {
            var canvas = _this.canvas;
            var el = canvas.get('el');
            if (el !== ev.target) {
                // 不在 canvas 上移动
                if (_this.dragging || _this.currentShape) {
                    var pointInfo = _this._getPointInfo(ev);
                    // 还在拖拽过程中
                    if (_this.dragging) {
                        _this._emitEvent('drag', ev, pointInfo, _this.draggingShape);
                    }
                    // 说明从某个图形直接移动到了画布外面，
                    // 修复了 mouseleave 的 bug 后不再出现这种情况
                    // if (this.currentShape) {
                    //   this._emitEvent('mouseleave', ev, pointInfo, this.currentShape, this.currentShape, null);
                    //   this.currentShape = null;
                    // }
                }
            }
        };
        // 在 document 上处理拖拽到外面，释放鼠标时触发 dragend
        this._onDocumentMouseUp = function (ev) {
            var canvas = _this.canvas;
            var el = canvas.get('el');
            if (el !== ev.target) {
                // 不在 canvas 上移动
                if (_this.dragging) {
                    var pointInfo = _this._getPointInfo(ev);
                    if (_this.draggingShape) {
                        // 如果存在拖拽的图形，则也触发 drop 事件
                        _this._emitEvent('drop', ev, pointInfo, null);
                    }
                    _this._emitEvent('dragend', ev, pointInfo, _this.draggingShape);
                    _this._afterDrag(_this.draggingShape, pointInfo, ev);
                }
            }
        };
        this.canvas = cfg.canvas;
    }
    EventController.prototype.init = function () {
        this._bindEvents();
    };
    // 注册事件
    EventController.prototype._bindEvents = function () {
        var _this = this;
        var el = this.canvas.get('el');
        each(EVENTS, function (eventName) {
            el.addEventListener(eventName, _this._eventCallback);
        });
        if (document) {
            // 处理移动到外面没有触发 shape mouse leave 的事件
            // 处理拖拽到外部的问题
            document.addEventListener('mousemove', this._onDocumentMove);
            // 处理拖拽过程中在外部释放鼠标的问题
            document.addEventListener('mouseup', this._onDocumentMouseUp);
        }
    };
    // 清理事件
    EventController.prototype._clearEvents = function () {
        var _this = this;
        var el = this.canvas.get('el');
        each(EVENTS, function (eventName) {
            el.removeEventListener(eventName, _this._eventCallback);
        });
        if (document) {
            document.removeEventListener('mousemove', this._onDocumentMove);
            document.removeEventListener('mouseup', this._onDocumentMouseUp);
        }
    };
    EventController.prototype._getEventObj = function (type, event, point, target, fromShape, toShape) {
        var eventObj = new GraphEvent(type, event);
        eventObj.fromShape = fromShape;
        eventObj.toShape = toShape;
        eventObj.x = point.x;
        eventObj.y = point.y;
        eventObj.clientX = point.clientX;
        eventObj.clientY = point.clientY;
        eventObj.propagationPath.push(target);
        // 事件的x,y应该是基于画布左上角的，与canvas的matrix无关
        return eventObj;
    };
    // 根据点获取图形，提取成独立方法，便于后续优化
    EventController.prototype._getShape = function (point, ev) {
        return this.canvas.getShape(point.x, point.y, ev);
    };
    // 获取事件的当前点的信息
    EventController.prototype._getPointInfo = function (ev) {
        var canvas = this.canvas;
        var clientPoint = canvas.getClientByEvent(ev);
        var point = canvas.getPointByEvent(ev);
        return {
            x: point.x,
            y: point.y,
            clientX: clientPoint.x,
            clientY: clientPoint.y,
        };
    };
    // 触发事件
    EventController.prototype._triggerEvent = function (type, ev) {
        var pointInfo = this._getPointInfo(ev);
        // 每次都获取图形有一定成本，后期可以考虑进行缓存策略
        var shape = this._getShape(pointInfo, ev);
        var method = this["_on" + type];
        var leaveCanvas = false;
        if (method) {
            method.call(this, pointInfo, shape, ev);
        }
        else {
            var preShape = this.currentShape;
            // 如果进入、移出画布时存在图形，则要分别触发事件
            if (type === 'mouseenter' || type === 'dragenter' || type === 'mouseover') {
                this._emitEvent(type, ev, pointInfo, null, null, shape); // 先进入画布
                if (shape) {
                    this._emitEvent(type, ev, pointInfo, shape, null, shape); // 再触发图形的事件
                }
                if (type === 'mouseenter' && this.draggingShape) {
                    // 如果正在拖拽图形, 则触发 dragleave
                    this._emitEvent('dragenter', ev, pointInfo, null);
                }
            }
            else if (type === 'mouseleave' || type === 'dragleave' || type === 'mouseout') {
                leaveCanvas = true;
                if (preShape) {
                    this._emitEvent(type, ev, pointInfo, preShape, preShape, null); // 先触发图形的事件
                }
                this._emitEvent(type, ev, pointInfo, null, preShape, null); // 再触发离开画布事件
                if (type === 'mouseleave' && this.draggingShape) {
                    this._emitEvent('dragleave', ev, pointInfo, null);
                }
            }
            else {
                this._emitEvent(type, ev, pointInfo, shape, null, null); // 一般事件中不需要考虑 from, to
            }
        }
        if (!leaveCanvas) {
            this.currentShape = shape;
        }
        // 当鼠标从画布移动到 shape 或者从 preShape 移动到 shape 时，应用 shape 上的鼠标样式
        if (shape && !shape.get('destroyed')) {
            var canvas = this.canvas;
            var el = canvas.get('el');
            el.style.cursor = shape.attr('cursor') || canvas.get('cursor');
        }
    };
    // 记录下点击的位置、图形，便于拖拽事件、click 事件的判定
    EventController.prototype._onmousedown = function (pointInfo, shape, event) {
        // 只有鼠标左键的 mousedown 事件才会设置 mousedownShape 等属性，避免鼠标右键的 mousedown 事件引起其他事件发生
        if (event.button === LEFT_BTN_CODE) {
            this.mousedownShape = shape;
            this.mousedownPoint = pointInfo;
            this.mousedownTimeStamp = event.timeStamp;
        }
        this._emitEvent('mousedown', event, pointInfo, shape, null, null); // mousedown 不考虑fromShape, toShape
    };
    // mouseleave 和 mouseenter 都是成对存在的
    // mouseenter 和 mouseover 同时触发
    EventController.prototype._emitMouseoverEvents = function (event, pointInfo, fromShape, toShape) {
        var el = this.canvas.get('el');
        if (fromShape !== toShape) {
            if (fromShape) {
                this._emitEvent('mouseout', event, pointInfo, fromShape, fromShape, toShape);
                this._emitEvent('mouseleave', event, pointInfo, fromShape, fromShape, toShape);
                // 当鼠标从 fromShape 移动到画布上时，重置鼠标样式
                if (!toShape || toShape.get('destroyed')) {
                    el.style.cursor = this.canvas.get('cursor');
                }
            }
            if (toShape) {
                this._emitEvent('mouseover', event, pointInfo, toShape, fromShape, toShape);
                this._emitEvent('mouseenter', event, pointInfo, toShape, fromShape, toShape);
            }
        }
    };
    // dragover 不等同于 mouseover，而等同于 mousemove
    EventController.prototype._emitDragoverEvents = function (event, pointInfo, fromShape, toShape, isCanvasEmit) {
        if (toShape) {
            if (toShape !== fromShape) {
                if (fromShape) {
                    this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);
                }
                this._emitEvent('dragenter', event, pointInfo, toShape, fromShape, toShape);
            }
            if (!isCanvasEmit) {
                this._emitEvent('dragover', event, pointInfo, toShape);
            }
        }
        else if (fromShape) {
            // TODO: 此处判断有问题，当 drag 图形时，也会触发一次 dragleave 事件，因为此时 toShape 为 null，这不是所期望的
            // 经过空白区域
            this._emitEvent('dragleave', event, pointInfo, fromShape, fromShape, toShape);
        }
        if (isCanvasEmit) {
            this._emitEvent('dragover', event, pointInfo, toShape);
        }
    };
    // drag 完成后，需要做一些清理工作
    EventController.prototype._afterDrag = function (draggingShape, pointInfo, event) {
        if (draggingShape) {
            draggingShape.set('capture', true); // 恢复可以拾取
            this.draggingShape = null;
        }
        this.dragging = false;
        // drag 完成后，有可能 draggingShape 已经移动到了当前位置，所以不能直接取当前图形
        var shape = this._getShape(pointInfo, event);
        // 拖拽完成后，进行 enter，leave 的判定
        if (shape !== draggingShape) {
            this._emitMouseoverEvents(event, pointInfo, draggingShape, shape);
        }
        this.currentShape = shape; // 更新当前 shape，如果不处理当前图形的 mouseleave 事件可能会出问题
    };
    // 按键抬起时，会终止拖拽、触发点击
    EventController.prototype._onmouseup = function (pointInfo, shape, event) {
        // eevent.button === 0 表示鼠标左键事件，此处加上判断主要是为了避免右键鼠标会触发 mouseup 和 click 事件
        // ref: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
        if (event.button === LEFT_BTN_CODE) {
            var draggingShape = this.draggingShape;
            if (this.dragging) {
                // 存在可以拖拽的图形，同时拖拽到其他图形上时触发 drag 事件
                if (draggingShape) {
                    this._emitEvent('drop', event, pointInfo, shape);
                }
                this._emitEvent('dragend', event, pointInfo, draggingShape);
                this._afterDrag(draggingShape, pointInfo, event);
            }
            else {
                this._emitEvent('mouseup', event, pointInfo, shape); // 先触发 mouseup 再触发 click
                if (shape === this.mousedownShape) {
                    this._emitEvent('click', event, pointInfo, shape);
                }
                this.mousedownShape = null;
                this.mousedownPoint = null;
            }
        }
    };
    // 当触发浏览器的 dragover 事件时，不会再触发 mousemove ，所以这时候的 dragenter, dragleave 事件需要重新处理
    EventController.prototype._ondragover = function (pointInfo, shape, event) {
        event.preventDefault(); // 如果不对 dragover 进行 preventDefault，则不会在 canvas 上触发 drop 事件
        var preShape = this.currentShape;
        this._emitDragoverEvents(event, pointInfo, preShape, shape, true);
    };
    // 大量的图形事件，都通过 mousemove 模拟
    EventController.prototype._onmousemove = function (pointInfo, shape, event) {
        var canvas = this.canvas;
        var preShape = this.currentShape;
        var draggingShape = this.draggingShape;
        // 正在拖拽时
        if (this.dragging) {
            // 正在拖拽中
            if (draggingShape) {
                // 如果拖拽了 shape 会触发 dragenter, dragleave, dragover 和 drag 事件
                this._emitDragoverEvents(event, pointInfo, preShape, shape, false);
            }
            // 如果存在 draggingShape 则会在 draggingShape 上触发 drag 事件，冒泡到 canvas 上
            // 否则在 canvas 上触发 drag 事件
            this._emitEvent('drag', event, pointInfo, draggingShape);
        }
        else {
            var mousedownPoint = this.mousedownPoint;
            if (mousedownPoint) {
                // 当鼠标点击下去，同时移动时，进行 drag 判定
                var mousedownShape = this.mousedownShape;
                var now = event.timeStamp;
                var timeWindow = now - this.mousedownTimeStamp;
                var dx = mousedownPoint.clientX - pointInfo.clientX;
                var dy = mousedownPoint.clientY - pointInfo.clientY;
                var dist = dx * dx + dy * dy;
                if (timeWindow > 120 || dist > CLICK_OFFSET) {
                    if (mousedownShape && mousedownShape.get('draggable')) {
                        // 设置了 draggable 的 shape 才能触发 drag 相关的事件
                        draggingShape = this.mousedownShape; // 拖动鼠标点下时的 shape
                        draggingShape.set('capture', false); // 禁止继续拾取，否则无法进行 dragover,dragenter,dragleave,drop的判定
                        this.draggingShape = draggingShape;
                        this.dragging = true;
                        this._emitEvent('dragstart', event, pointInfo, draggingShape);
                        // 清理按下鼠标时缓存的值
                        this.mousedownShape = null;
                        this.mousedownPoint = null;
                    }
                    else if (!mousedownShape && canvas.get('draggable')) {
                        // 设置了 draggable 的 canvas 才能触发 drag 相关的事件
                        this.dragging = true;
                        this._emitEvent('dragstart', event, pointInfo, null);
                        // 清理按下鼠标时缓存的值
                        this.mousedownShape = null;
                        this.mousedownPoint = null;
                    }
                    else {
                        this._emitMouseoverEvents(event, pointInfo, preShape, shape);
                        this._emitEvent('mousemove', event, pointInfo, shape);
                    }
                }
                else {
                    this._emitMouseoverEvents(event, pointInfo, preShape, shape);
                    this._emitEvent('mousemove', event, pointInfo, shape);
                }
            }
            else {
                // 没有按键按下时，则直接触发 mouse over 相关的各种事件
                this._emitMouseoverEvents(event, pointInfo, preShape, shape);
                // 始终触发移动
                this._emitEvent('mousemove', event, pointInfo, shape);
            }
        }
    };
    // 触发事件
    EventController.prototype._emitEvent = function (type, event, pointInfo, shape, fromShape, toShape) {
        var eventObj = this._getEventObj(type, event, pointInfo, shape, fromShape, toShape);
        // 存在 shape 触发，则进行冒泡处理
        if (shape) {
            eventObj.shape = shape;
            // 触发 shape 上的事件
            emitTargetEvent(shape, type, eventObj);
            var parent_1 = shape.getParent();
            // 执行冒泡
            while (parent_1) {
                // 委托事件要先触发
                parent_1.emitDelegation(type, eventObj);
                // 事件冒泡停止，不能妨碍委托事件
                if (!eventObj.propagationStopped) {
                    bubbleEvent(parent_1, type, eventObj);
                }
                eventObj.propagationPath.push(parent_1);
                parent_1 = parent_1.getParent();
            }
        }
        else {
            // 如果没有 shape 直接在 canvas 上触发
            var canvas = this.canvas;
            // 直接触发 canvas 上的事件
            emitTargetEvent(canvas, type, eventObj);
        }
    };
    EventController.prototype.destroy = function () {
        // 清理事件
        this._clearEvents();
        // 清理缓存的对象
        this.canvas = null;
        this.currentShape = null;
        this.draggingShape = null;
        this.mousedownPoint = null;
        this.mousedownShape = null;
        this.mousedownTimeStamp = null;
    };
    return EventController;
}());

var PX_SUFFIX = 'px';
var browser = detect();
var isFirefox = browser && browser.name === 'firefox';
var Canvas$1 = /** @class */ (function (_super) {
    __extends(Canvas, _super);
    function Canvas(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.initContainer();
        _this.initDom();
        _this.initEvents();
        _this.initTimeline();
        return _this;
    }
    Canvas.prototype.getDefaultCfg = function () {
        var cfg = _super.prototype.getDefaultCfg.call(this);
        // set default cursor style for canvas
        cfg['cursor'] = 'default';
        // CSS transform 目前尚未经过长时间验证，为了避免影响上层业务，默认关闭，上层按需开启
        cfg['supportCSSTransform'] = false;
        return cfg;
    };
    /**
     * @protected
     * 初始化容器
     */
    Canvas.prototype.initContainer = function () {
        var container = this.get('container');
        if (isString$1(container)) {
            container = document.getElementById(container);
            this.set('container', container);
        }
    };
    /**
     * @protected
     * 初始化 DOM
     */
    Canvas.prototype.initDom = function () {
        var el = this.createDom();
        this.set('el', el);
        // 附加到容器
        var container = this.get('container');
        container.appendChild(el);
        // 设置初始宽度
        this.setDOMSize(this.get('width'), this.get('height'));
    };
    /**
     * @protected
     * 初始化绑定的事件
     */
    Canvas.prototype.initEvents = function () {
        var eventController = new EventController$1({
            canvas: this,
        });
        eventController.init();
        this.set('eventController', eventController);
    };
    /**
     * @protected
     * 初始化时间轴
     */
    Canvas.prototype.initTimeline = function () {
        var timeline = new Timeline(this);
        this.set('timeline', timeline);
    };
    /**
     * @protected
     * 修改画布对应的 DOM 的大小
     * @param {number} width  宽度
     * @param {number} height 高度
     */
    Canvas.prototype.setDOMSize = function (width, height) {
        var el = this.get('el');
        if (isBrowser) {
            el.style.width = width + PX_SUFFIX;
            el.style.height = height + PX_SUFFIX;
        }
    };
    // 实现接口
    Canvas.prototype.changeSize = function (width, height) {
        this.setDOMSize(width, height);
        this.set('width', width);
        this.set('height', height);
        this.onCanvasChange('changeSize');
    };
    /**
     * 获取当前的渲染引擎
     * @return {Renderer} 返回当前的渲染引擎
     */
    Canvas.prototype.getRenderer = function () {
        return this.get('renderer');
    };
    /**
     * 获取画布的 cursor 样式
     * @return {Cursor}
     */
    Canvas.prototype.getCursor = function () {
        return this.get('cursor');
    };
    /**
     * 设置画布的 cursor 样式
     * @param {Cursor} cursor  cursor 样式
     */
    Canvas.prototype.setCursor = function (cursor) {
        this.set('cursor', cursor);
        var el = this.get('el');
        if (isBrowser && el) {
            // 直接设置样式，不等待鼠标移动时再设置
            el.style.cursor = cursor;
        }
    };
    // 实现接口
    Canvas.prototype.getPointByEvent = function (ev) {
        var supportCSSTransform = this.get('supportCSSTransform');
        if (supportCSSTransform) {
            // For Firefox <= 38
            if (isFirefox && !isNil$1(ev.layerX) && ev.layerX !== ev.offsetX) {
                return {
                    x: ev.layerX,
                    y: ev.layerY,
                };
            }
            if (!isNil$1(ev.offsetX)) {
                // For IE6+, Firefox >= 39, Chrome, Safari, Opera
                return {
                    x: ev.offsetX,
                    y: ev.offsetY,
                };
            }
        }
        // should calculate by self for other cases, like Safari in ios
        // TODO: support CSS transform
        var _a = this.getClientByEvent(ev), clientX = _a.x, clientY = _a.y;
        return this.getPointByClient(clientX, clientY);
    };
    // 获取 touch 事件的 clientX 和 clientY 需要单独处理
    Canvas.prototype.getClientByEvent = function (ev) {
        var clientInfo = ev;
        if (ev.touches) {
            if (ev.type === 'touchend') {
                clientInfo = ev.changedTouches[0];
            }
            else {
                clientInfo = ev.touches[0];
            }
        }
        return {
            x: clientInfo.clientX,
            y: clientInfo.clientY,
        };
    };
    // 实现接口
    Canvas.prototype.getPointByClient = function (clientX, clientY) {
        var el = this.get('el');
        var bbox = el.getBoundingClientRect();
        return {
            x: clientX - bbox.left,
            y: clientY - bbox.top,
        };
    };
    // 实现接口
    Canvas.prototype.getClientByPoint = function (x, y) {
        var el = this.get('el');
        var bbox = el.getBoundingClientRect();
        return {
            x: x + bbox.left,
            y: y + bbox.top,
        };
    };
    // 实现接口
    Canvas.prototype.draw = function () { };
    /**
     * @protected
     * 销毁 DOM 容器
     */
    Canvas.prototype.removeDom = function () {
        var el = this.get('el');
        el.parentNode.removeChild(el);
    };
    /**
     * @protected
     * 清理所有的事件
     */
    Canvas.prototype.clearEvents = function () {
        var eventController = this.get('eventController');
        eventController.destroy();
    };
    Canvas.prototype.isCanvas = function () {
        return true;
    };
    Canvas.prototype.getParent = function () {
        return null;
    };
    Canvas.prototype.destroy = function () {
        var timeline = this.get('timeline');
        if (this.get('destroyed')) {
            return;
        }
        this.clear();
        // 同初始化时相反顺序调用
        if (timeline) {
            // 画布销毁时自动停止动画
            timeline.stop();
        }
        this.clearEvents();
        this.removeDom();
        _super.prototype.destroy.call(this);
    };
    return Canvas;
}(Container));

var AbstractGroup = /** @class */ (function (_super) {
    __extends(AbstractGroup, _super);
    function AbstractGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractGroup.prototype.isGroup = function () {
        return true;
    };
    AbstractGroup.prototype.isEntityGroup = function () {
        return false;
    };
    AbstractGroup.prototype.clone = function () {
        var clone = _super.prototype.clone.call(this);
        // 获取构造函数
        var children = this.getChildren();
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            clone.add(child.clone());
        }
        return clone;
    };
    return AbstractGroup;
}(Container));

var AbstractShape = /** @class */ (function (_super) {
    __extends(AbstractShape, _super);
    function AbstractShape(cfg) {
        return _super.call(this, cfg) || this;
    }
    // 是否在包围盒内
    AbstractShape.prototype._isInBBox = function (refX, refY) {
        var bbox = this.getBBox();
        return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;
    };
    /**
     * 属性更改后需要做的事情
     * @protected
     * @param {ShapeAttrs} targetAttrs 渲染的图像属性
     */
    AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {
        _super.prototype.afterAttrsChange.call(this, targetAttrs);
        this.clearCacheBBox();
    };
    // 计算包围盒时，需要缓存，这是一个高频的操作
    AbstractShape.prototype.getBBox = function () {
        var bbox = this.cfg.bbox;
        if (!bbox) {
            bbox = this.calculateBBox();
            this.set('bbox', bbox);
        }
        return bbox;
    };
    // 计算相对于画布的包围盒
    AbstractShape.prototype.getCanvasBBox = function () {
        var canvasBBox = this.cfg.canvasBBox;
        if (!canvasBBox) {
            canvasBBox = this.calculateCanvasBBox();
            this.set('canvasBBox', canvasBBox);
        }
        return canvasBBox;
    };
    AbstractShape.prototype.applyMatrix = function (matrix) {
        _super.prototype.applyMatrix.call(this, matrix);
        // 清理掉缓存的包围盒
        this.set('canvasBBox', null);
    };
    /**
     * 计算相对于画布的包围盒，默认等同于 bbox
     * @return {BBox} 包围盒
     */
    AbstractShape.prototype.calculateCanvasBBox = function () {
        var bbox = this.getBBox();
        var totalMatrix = this.getTotalMatrix();
        var minX = bbox.minX, minY = bbox.minY, maxX = bbox.maxX, maxY = bbox.maxY;
        if (totalMatrix) {
            var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);
            var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);
            var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);
            var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);
            minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);
            maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);
            minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);
            maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);
        }
        var attrs = this.attrs;
        // 如果存在 shadow 则计算 shadow
        if (attrs.shadowColor) {
            var _a = attrs.shadowBlur, shadowBlur = _a === void 0 ? 0 : _a, _b = attrs.shadowOffsetX, shadowOffsetX = _b === void 0 ? 0 : _b, _c = attrs.shadowOffsetY, shadowOffsetY = _c === void 0 ? 0 : _c;
            var shadowLeft = minX - shadowBlur + shadowOffsetX;
            var shadowRight = maxX + shadowBlur + shadowOffsetX;
            var shadowTop = minY - shadowBlur + shadowOffsetY;
            var shadowBottom = maxY + shadowBlur + shadowOffsetY;
            minX = Math.min(minX, shadowLeft);
            maxX = Math.max(maxX, shadowRight);
            minY = Math.min(minY, shadowTop);
            maxY = Math.max(maxY, shadowBottom);
        }
        return {
            x: minX,
            y: minY,
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY,
            width: maxX - minX,
            height: maxY - minY,
        };
    };
    /**
     * @protected
     * 清理缓存的 bbox
     */
    AbstractShape.prototype.clearCacheBBox = function () {
        this.set('bbox', null);
        this.set('canvasBBox', null);
    };
    // 实现接口
    AbstractShape.prototype.isClipShape = function () {
        return this.get('isClipShape');
    };
    /**
     * @protected
     * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域
     * @param  {number}  refX 相对于图形的坐标 x
     * @param  {number}  refY 相对于图形的坐标 Y
     * @return {boolean} 点是否在图形内部
     */
    AbstractShape.prototype.isInShape = function (refX, refY) {
        return false;
    };
    /**
     * 是否仅仅使用 BBox 检测就可以判定拾取到图形
     * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取
     * @return {Boolean} 仅仅使用 BBox 进行拾取
     */
    AbstractShape.prototype.isOnlyHitBox = function () {
        return false;
    };
    // 不同的 Shape 各自实现
    AbstractShape.prototype.isHit = function (x, y) {
        var startArrowShape = this.get('startArrowShape');
        var endArrowShape = this.get('endArrowShape');
        var vec = [x, y, 1];
        vec = this.invertFromMatrix(vec);
        var refX = vec[0], refY = vec[1];
        var inBBox = this._isInBBox(refX, refY);
        // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本
        if (this.isOnlyHitBox()) {
            return inBBox;
        }
        // 被裁减掉的和不在包围盒内的不进行计算
        if (inBBox && !this.isClipped(refX, refY)) {
            // 对图形进行拾取判断
            if (this.isInShape(refX, refY)) {
                return true;
            }
            // 对起始箭头进行拾取判断
            if (startArrowShape && startArrowShape.isHit(refX, refY)) {
                return true;
            }
            // 对结束箭头进行拾取判断
            if (endArrowShape && endArrowShape.isHit(refX, refY)) {
                return true;
            }
        }
        return false;
    };
    return AbstractShape;
}(Element$1));

var cache = new Map();
/**
 * 注册计算包围盒的算法
 * @param type 方法名
 * @param method 方法
 */
function register(type, method) {
    cache.set(type, method);
}
/**
 * 获取计算包围盒的算法
 * @param type 方法名
 */
function getMethod(type) {
    return cache.get(type);
}

function rect (shape) {
    var attrs = shape.attr();
    var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height;
    return {
        x: x,
        y: y,
        width: width,
        height: height,
    };
}

function circle (shape) {
    var _a = shape.attr(), x = _a.x, y = _a.y, r = _a.r;
    return {
        x: x - r,
        y: y - r,
        width: r * 2,
        height: r * 2,
    };
}

/**
 * 两点之间的距离
 * @param {number} x1 起始点 x
 * @param {number} y1 起始点 y
 * @param {number} x2 结束点 x
 * @param {number} y2 结束点 y
 * @return {number} 距离
 */
function distance$1(x1, y1, x2, y2) {
    var dx = x1 - x2;
    var dy = y1 - y2;
    return Math.sqrt(dx * dx + dy * dy);
}
function isNumberEqual(v1, v2) {
    return Math.abs(v1 - v2) < 0.001;
}
function getBBoxByArray(xArr, yArr) {
    var minX = min$2(xArr);
    var minY = min$2(yArr);
    var maxX = max$2(xArr);
    var maxY = max$2(yArr);
    return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY,
    };
}
function piMod(angle) {
    return (angle + Math.PI * 2) % (Math.PI * 2);
}

var LineUtil = {
    /**
     * 计算线段的包围盒
     * @param {number} x1 起始点 x
     * @param {number} y1 起始点 y
     * @param {number} x2 结束点 x
     * @param {number} y2 结束点 y
     * @return {object} 包围盒对象
     */
    box: function (x1, y1, x2, y2) {
        return getBBoxByArray([x1, x2], [y1, y2]);
    },
    /**
     * 线段的长度
     * @param {number} x1 起始点 x
     * @param {number} y1 起始点 y
     * @param {number} x2 结束点 x
     * @param {number} y2 结束点 y
     * @return {number} 距离
     */
    length: function (x1, y1, x2, y2) {
        return distance$1(x1, y1, x2, y2);
    },
    /**
     * 根据比例获取点
     * @param {number} x1 起始点 x
     * @param {number} y1 起始点 y
     * @param {number} x2 结束点 x
     * @param {number} y2 结束点 y
     * @param {number} t 指定比例
     * @return {object} 包含 x, y 的点
     */
    pointAt: function (x1, y1, x2, y2, t) {
        return {
            x: (1 - t) * x1 + t * x2,
            y: (1 - t) * y1 + t * y2,
        };
    },
    /**
     * 点到线段的距离
     * @param {number} x1 起始点 x
     * @param {number} y1 起始点 y
     * @param {number} x2 结束点 x
     * @param {number} y2 结束点 y
     * @param {number} x  测试点 x
     * @param {number} y  测试点 y
     * @return {number} 距离
     */
    pointDistance: function (x1, y1, x2, y2, x, y) {
        // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a
        // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)
        var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);
        if (cross < 0) {
            return distance$1(x1, y1, x, y);
        }
        var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
        if (cross > lengthSquare) {
            return distance$1(x2, y2, x, y);
        }
        return this.pointToLine(x1, y1, x2, y2, x, y);
    },
    /**
     * 点到直线的距离，而不是点到线段的距离
     * @param {number} x1 起始点 x
     * @param {number} y1 起始点 y
     * @param {number} x2 结束点 x
     * @param {number} y2 结束点 y
     * @param {number} x  测试点 x
     * @param {number} y  测试点 y
     * @return {number} 距离
     */
    pointToLine: function (x1, y1, x2, y2, x, y) {
        var d = [x2 - x1, y2 - y1];
        // 如果端点相等，则判定点到点的距离
        if (exactEquals(d, [0, 0])) {
            return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));
        }
        var u = [-d[1], d[0]];
        normalize(u, u);
        var a = [x - x1, y - y1];
        return Math.abs(dot(a, u));
    },
    /**
     * 线段的角度
     * @param {number} x1 起始点 x
     * @param {number} y1 起始点 y
     * @param {number} x2 结束点 x
     * @param {number} y2 结束点 y
     * @return {number} 导数
     */
    tangentAngle: function (x1, y1, x2, y2) {
        return Math.atan2(y2 - y1, x2 - x1);
    },
};

var EPSILON = 0.0001;
/**
 * 使用牛顿切割法求最近的点
 * @param {number[]} xArr      点的 x 数组
 * @param {number[]} yArr      点的 y 数组
 * @param {number}   x         指定的点 x
 * @param {number}   y         指定的点 y
 * @param {Function} tCallback 差值函数
 */
function nearestPoint(xArr, yArr, x, y, tCallback, length) {
    var t;
    var d = Infinity;
    var v0 = [x, y];
    var segNum = 20;
    if (length && length > 200) {
        segNum = length / 10;
    }
    var increaseRate = 1 / segNum;
    var interval = increaseRate / 10;
    for (var i = 0; i <= segNum; i++) {
        var _t = i * increaseRate;
        var v1 = [tCallback.apply(null, xArr.concat([_t])), tCallback.apply(null, yArr.concat([_t]))];
        var d1 = distance$1(v0[0], v0[1], v1[0], v1[1]);
        if (d1 < d) {
            t = _t;
            d = d1;
        }
    }
    // 提前终止
    if (t === 0) {
        return {
            x: xArr[0],
            y: yArr[0],
        };
    }
    if (t === 1) {
        var count = xArr.length;
        return {
            x: xArr[count - 1],
            y: yArr[count - 1],
        };
    }
    d = Infinity;
    for (var i = 0; i < 32; i++) {
        if (interval < EPSILON) {
            break;
        }
        var prev = t - interval;
        var next = t + interval;
        var v1 = [tCallback.apply(null, xArr.concat([prev])), tCallback.apply(null, yArr.concat([prev]))];
        var d1 = distance$1(v0[0], v0[1], v1[0], v1[1]);
        if (prev >= 0 && d1 < d) {
            t = prev;
            d = d1;
        }
        else {
            var v2 = [tCallback.apply(null, xArr.concat([next])), tCallback.apply(null, yArr.concat([next]))];
            var d2 = distance$1(v0[0], v0[1], v2[0], v2[1]);
            if (next <= 1 && d2 < d) {
                t = next;
                d = d2;
            }
            else {
                interval *= 0.5;
            }
        }
    }
    return {
        x: tCallback.apply(null, xArr.concat([t])),
        y: tCallback.apply(null, yArr.concat([t])),
    };
}
// 近似求解 https://community.khronos.org/t/3d-cubic-bezier-segment-length/62363/2
function snapLength(xArr, yArr) {
    var totalLength = 0;
    var count = xArr.length;
    for (var i = 0; i < count; i++) {
        var x = xArr[i];
        var y = yArr[i];
        var nextX = xArr[(i + 1) % count];
        var nextY = yArr[(i + 1) % count];
        totalLength += distance$1(x, y, nextX, nextY);
    }
    return totalLength / 2;
}

// 差值公式
function quadraticAt(p0, p1, p2, t) {
    var onet = 1 - t;
    return onet * onet * p0 + 2 * t * onet * p1 + t * t * p2;
}
// 求极值
function extrema$1(p0, p1, p2) {
    var a = p0 + p2 - 2 * p1;
    if (isNumberEqual(a, 0)) {
        return [0.5];
    }
    var rst = (p0 - p1) / a;
    if (rst <= 1 && rst >= 0) {
        return [rst];
    }
    return [];
}
function derivativeAt$1(p0, p1, p2, t) {
    return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);
}
// 分割贝塞尔曲线
function divideQuadratic(x1, y1, x2, y2, x3, y3, t) {
    // 划分点
    var xt = quadraticAt(x1, x2, x3, t);
    var yt = quadraticAt(y1, y2, y3, t);
    // 分割的第一条曲线的控制点
    var controlPoint1 = LineUtil.pointAt(x1, y1, x2, y2, t);
    // 分割的第二条曲线的控制点
    var controlPoint2 = LineUtil.pointAt(x2, y2, x3, y3, t);
    return [
        [x1, y1, controlPoint1.x, controlPoint1.y, xt, yt],
        [xt, yt, controlPoint2.x, controlPoint2.y, x3, y3],
    ];
}
// 使用迭代法取贝塞尔曲线的长度
function quadraticLength(x1, y1, x2, y2, x3, y3, iterationCount) {
    if (iterationCount === 0) {
        return (distance$1(x1, y1, x2, y2) + distance$1(x2, y2, x3, y3) + distance$1(x1, y1, x3, y3)) / 2;
    }
    var quadratics = divideQuadratic(x1, y1, x2, y2, x3, y3, 0.5);
    var left = quadratics[0];
    var right = quadratics[1];
    left.push(iterationCount - 1);
    right.push(iterationCount - 1);
    return quadraticLength.apply(null, left) + quadraticLength.apply(null, right);
}
var QuadUtil = {
    box: function (x1, y1, x2, y2, x3, y3) {
        var xExtrema = extrema$1(x1, x2, x3)[0];
        var yExtrema = extrema$1(y1, y2, y3)[0];
        // 控制点不加入 box 的计算
        var xArr = [x1, x3];
        var yArr = [y1, y3];
        if (xExtrema !== undefined) {
            xArr.push(quadraticAt(x1, x2, x3, xExtrema));
        }
        if (yExtrema !== undefined) {
            yArr.push(quadraticAt(y1, y2, y3, yExtrema));
        }
        return getBBoxByArray(xArr, yArr);
    },
    length: function (x1, y1, x2, y2, x3, y3) {
        return quadraticLength(x1, y1, x2, y2, x3, y3, 3);
    },
    nearestPoint: function (x1, y1, x2, y2, x3, y3, x0, y0) {
        return nearestPoint([x1, x2, x3], [y1, y2, y3], x0, y0, quadraticAt);
    },
    pointDistance: function (x1, y1, x2, y2, x3, y3, x0, y0) {
        var point = this.nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0);
        return distance$1(point.x, point.y, x0, y0);
    },
    interpolationAt: quadraticAt,
    pointAt: function (x1, y1, x2, y2, x3, y3, t) {
        return {
            x: quadraticAt(x1, x2, x3, t),
            y: quadraticAt(y1, y2, y3, t),
        };
    },
    divide: function (x1, y1, x2, y2, x3, y3, t) {
        return divideQuadratic(x1, y1, x2, y2, x3, y3, t);
    },
    tangentAngle: function (x1, y1, x2, y2, x3, y3, t) {
        var dx = derivativeAt$1(x1, x2, x3, t);
        var dy = derivativeAt$1(y1, y2, y3, t);
        var angle = Math.atan2(dy, dx);
        return piMod(angle);
    },
};

function cubicAt(p0, p1, p2, p3, t) {
    var onet = 1 - t; // t * t * t 的性能大概是 Math.pow(t, 3) 的三倍
    return onet * onet * onet * p0 + 3 * p1 * t * onet * onet + 3 * p2 * t * t * onet + p3 * t * t * t;
}
function derivativeAt(p0, p1, p2, p3, t) {
    var onet = 1 - t;
    return 3 * (onet * onet * (p1 - p0) + 2 * onet * t * (p2 - p1) + t * t * (p3 - p2));
}
function extrema(p0, p1, p2, p3) {
    var a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;
    var b = 6 * p0 - 12 * p1 + 6 * p2;
    var c = 3 * p1 - 3 * p0;
    var extremas = [];
    var t1;
    var t2;
    var discSqrt;
    if (isNumberEqual(a, 0)) {
        if (!isNumberEqual(b, 0)) {
            t1 = -c / b;
            if (t1 >= 0 && t1 <= 1) {
                extremas.push(t1);
            }
        }
    }
    else {
        var disc = b * b - 4 * a * c;
        if (isNumberEqual(disc, 0)) {
            extremas.push(-b / (2 * a));
        }
        else if (disc > 0) {
            discSqrt = Math.sqrt(disc);
            t1 = (-b + discSqrt) / (2 * a);
            t2 = (-b - discSqrt) / (2 * a);
            if (t1 >= 0 && t1 <= 1) {
                extremas.push(t1);
            }
            if (t2 >= 0 && t2 <= 1) {
                extremas.push(t2);
            }
        }
    }
    return extremas;
}
// 分割贝塞尔曲线
function divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, t) {
    // 划分点
    var xt = cubicAt(x1, x2, x3, x4, t);
    var yt = cubicAt(y1, y2, y3, y4, t);
    // 计算两点之间的差值点
    var c1 = LineUtil.pointAt(x1, y1, x2, y2, t);
    var c2 = LineUtil.pointAt(x2, y2, x3, y3, t);
    var c3 = LineUtil.pointAt(x3, y3, x4, y4, t);
    var c12 = LineUtil.pointAt(c1.x, c1.y, c2.x, c2.y, t);
    var c23 = LineUtil.pointAt(c2.x, c2.y, c3.x, c3.y, t);
    return [
        [x1, y1, c1.x, c1.y, c12.x, c12.y, xt, yt],
        [xt, yt, c23.x, c23.y, c3.x, c3.y, x4, y4],
    ];
}
// 使用迭代法取贝塞尔曲线的长度，二阶和三阶分开写，更清晰和便于调试
function cubicLength(x1, y1, x2, y2, x3, y3, x4, y4, iterationCount) {
    if (iterationCount === 0) {
        return snapLength([x1, x2, x3, x4], [y1, y2, y3, y4]);
    }
    var cubics = divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, 0.5);
    var left = cubics[0];
    var right = cubics[1];
    left.push(iterationCount - 1);
    right.push(iterationCount - 1);
    return cubicLength.apply(null, left) + cubicLength.apply(null, right);
}
var CubicUtil = {
    extrema: extrema,
    box: function (x1, y1, x2, y2, x3, y3, x4, y4) {
        var xArr = [x1, x4];
        var yArr = [y1, y4];
        var xExtrema = extrema(x1, x2, x3, x4);
        var yExtrema = extrema(y1, y2, y3, y4);
        for (var i = 0; i < xExtrema.length; i++) {
            xArr.push(cubicAt(x1, x2, x3, x4, xExtrema[i]));
        }
        for (var i = 0; i < yExtrema.length; i++) {
            yArr.push(cubicAt(y1, y2, y3, y4, yExtrema[i]));
        }
        return getBBoxByArray(xArr, yArr);
    },
    length: function (x1, y1, x2, y2, x3, y3, x4, y4) {
        // 迭代三次，划分成 8 段求长度
        return cubicLength(x1, y1, x2, y2, x3, y3, x4, y4, 3);
    },
    nearestPoint: function (x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length) {
        return nearestPoint([x1, x2, x3, x4], [y1, y2, y3, y4], x0, y0, cubicAt, length);
    },
    pointDistance: function (x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length) {
        var point = this.nearestPoint(x1, y1, x2, y2, x3, y3, x4, y4, x0, y0, length);
        return distance$1(point.x, point.y, x0, y0);
    },
    interpolationAt: cubicAt,
    pointAt: function (x1, y1, x2, y2, x3, y3, x4, y4, t) {
        return {
            x: cubicAt(x1, x2, x3, x4, t),
            y: cubicAt(y1, y2, y3, y4, t),
        };
    },
    divide: function (x1, y1, x2, y2, x3, y3, x4, y4, t) {
        return divideCubic(x1, y1, x2, y2, x3, y3, x4, y4, t);
    },
    tangentAngle: function (x1, y1, x2, y2, x3, y3, x4, y4, t) {
        var dx = derivativeAt(x1, x2, x3, x4, t);
        var dy = derivativeAt(y1, y2, y3, y4, t);
        return piMod(Math.atan2(dy, dx));
    },
};

/**
 * @fileoverview 椭圆的一些计算，
 *  - 周长计算参考：https://www.mathsisfun.com/geometry/ellipse-perimeter.html
 *  - 距离计算参考：https://wet-robots.ghost.io/simple-method-for-distance-to-ellipse/
 * @author dxq613@gmail.com
 */
function copysign(v1, v2) {
    var absv = Math.abs(v1);
    return v2 > 0 ? absv : absv * -1;
}
var ellipse$1 = {
    /**
     * 包围盒计算
     * @param {number} x  椭圆中心 x
     * @param {number} y  椭圆中心 y
     * @param {number} rx 椭圆 x 方向半径
     * @param {number} ry 椭圆 y 方向半径
     * @return {object} 包围盒
     */
    box: function (x, y, rx, ry) {
        return {
            x: x - rx,
            y: y - ry,
            width: rx * 2,
            height: ry * 2,
        };
    },
    /**
     * 计算周长，使用近似法
     * @param {number} x  椭圆中心 x
     * @param {number} y  椭圆中心 y
     * @param {number} rx 椭圆 x 方向半径
     * @param {number} ry 椭圆 y 方向半径
     * @return {number} 椭圆周长
     */
    length: function (x, y, rx, ry) {
        return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (rx + 3 * ry)));
    },
    /**
     * 距离椭圆最近的点
     * @param {number} x  椭圆中心 x
     * @param {number} y  椭圆中心 y
     * @param {number} rx 椭圆 x 方向半径
     * @param {number} ry 椭圆 y 方向半径
     * @param {number} x0  指定的点 x
     * @param {number} y0  指定的点 y
     * @return {object} 椭圆上距离指定点最近的点
     */
    nearestPoint: function (x, y, rx, ry, x0, y0) {
        var a = rx;
        var b = ry;
        // 假如椭圆半径为0则返回圆心
        if (a === 0 || b === 0) {
            return {
                x: x,
                y: y,
            };
        }
        // 转换成 0， 0 为中心的椭圆计算
        var relativeX = x0 - x;
        var relativeY = y0 - y;
        var px = Math.abs(relativeX);
        var py = Math.abs(relativeY);
        var squareA = a * a;
        var squareB = b * b;
        // const angle0 = Math.atan2(relativeY, relativeX);
        var t = Math.PI / 4;
        var nearestX; // 椭圆上的任一点
        var nearestY;
        // 迭代 4 次
        for (var i = 0; i < 4; i++) {
            nearestX = a * Math.cos(t);
            nearestY = b * Math.sin(t);
            var ex = ((squareA - squareB) * Math.pow(Math.cos(t), 3)) / a;
            var ey = ((squareB - squareA) * Math.pow(Math.sin(t), 3)) / b;
            var rx1 = nearestX - ex;
            var ry1 = nearestY - ey;
            var qx = px - ex;
            var qy = py - ey;
            var r = Math.hypot(ry1, rx1);
            var q = Math.hypot(qy, qx);
            var delta_c = r * Math.asin((rx1 * qy - ry1 * qx) / (r * q));
            var delta_t = delta_c / Math.sqrt(squareA + squareB - nearestX * nearestX - nearestY * nearestY);
            t += delta_t;
            t = Math.min(Math.PI / 2, Math.max(0, t));
        }
        return {
            x: x + copysign(nearestX, relativeX),
            y: y + copysign(nearestY, relativeY),
        };
    },
    /**
     * 点到椭圆最近的距离
     * @param {number} x  椭圆中心 x
     * @param {number} y  椭圆中心 y
     * @param {number} rx 椭圆 x 方向半径
     * @param {number} ry 椭圆 y 方向半径
     * @param {number} x0  指定的点 x
     * @param {number} y0  指定的点 y
     * @return {number} 点到椭圆的距离
     */
    pointDistance: function (x, y, rx, ry, x0, y0) {
        var nearestPoint = this.nearestPoint(x, y, rx, ry, x0, y0);
        return distance$1(nearestPoint.x, nearestPoint.y, x0, y0);
    },
    /**
     * 根据比例获取点
     * @param {number} x 椭圆中心 x
     * @param {number} y 椭圆中心 y
     * @param {number} rx 椭圆 x 方向半径
     * @param {number} ry 椭圆 y 方向半径
     * @param {number} t 指定比例，x轴方向为 0
     * @return {object} 点
     */
    pointAt: function (x, y, rx, ry, t) {
        var angle = 2 * Math.PI * t; // 按照角度进行计算，而不按照周长计算
        return {
            x: x + rx * Math.cos(angle),
            y: y + ry * Math.sin(angle),
        };
    },
    /**
     * 根据比例计算切线角度
     * @param {number} x 椭圆中心 x
     * @param {number} y 椭圆中心 y
     * @param {number} rx 椭圆 x 方向半径
     * @param {number} ry 椭圆 y 方向半径
     * @param {number} t 指定比例 0 - 1 之间，x轴方向为 0。在 0-1 范围之外是循环还是返回 null，还需要调整
     * @return {number} 角度，在 0 - 2PI 之间
     */
    tangentAngle: function (x, y, rx, ry, t) {
        var angle = 2 * Math.PI * t; // 按照角度进行计算，而不按照周长计算
        // 直接使用 x,y 的导数计算， x' = -rx * sin(t); y' = ry * cos(t);
        var tangentAngle = Math.atan2(ry * Math.cos(angle), -rx * Math.sin(angle));
        // 也可以使用指定点的切线方程计算，成本有些高
        // const point = this.pointAt(0, 0, rx, ry, t); // 椭圆的切线同椭圆的中心不相关
        // let tangentAngle = -1 * Math.atan((ry * ry * point.x) / (rx * rx * point.y));
        // if (angle >= 0 && angle <= Math.PI) {
        //   tangentAngle += Math.PI;
        // }
        return piMod(tangentAngle);
    },
};

// 偏导数 x
function derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {
    return -1 * rx * Math.cos(xRotation) * Math.sin(angle) - ry * Math.sin(xRotation) * Math.cos(angle);
}
// 偏导数 y
function derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle) {
    return -1 * rx * Math.sin(xRotation) * Math.sin(angle) + ry * Math.cos(xRotation) * Math.cos(angle);
}
// x 的极值
function xExtrema(rx, ry, xRotation) {
    return Math.atan((-ry / rx) * Math.tan(xRotation));
}
// y 的极值
function yExtrema(rx, ry, xRotation) {
    return Math.atan(ry / (rx * Math.tan(xRotation)));
}
// 根据角度求 x 坐标
function xAt(cx, cy, rx, ry, xRotation, angle) {
    return rx * Math.cos(xRotation) * Math.cos(angle) - ry * Math.sin(xRotation) * Math.sin(angle) + cx;
}
// 根据角度求 y 坐标
function yAt(cx, cy, rx, ry, xRotation, angle) {
    return rx * Math.sin(xRotation) * Math.cos(angle) + ry * Math.cos(xRotation) * Math.sin(angle) + cy;
}
// 获取点在椭圆上的角度
function getAngle(rx, ry, x0, y0) {
    var angle = Math.atan2(y0 * rx, x0 * ry);
    // 转换到 0 - 2PI 内
    return (angle + Math.PI * 2) % (Math.PI * 2);
}
// 根据角度获取，x,y
function getPoint(rx, ry, angle) {
    return {
        x: rx * Math.cos(angle),
        y: ry * Math.sin(angle),
    };
}
// 旋转
function rotate(x, y, angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    return [x * cos - y * sin, x * sin + y * cos];
}
var EllipseArcUtil = {
    /**
     * 计算包围盒
     * @param {number} cx         圆心 x
     * @param {number} cy         圆心 y
     * @param {number} rx         x 轴方向的半径
     * @param {number} ry         y 轴方向的半径
     * @param {number} xRotation  旋转角度
     * @param {number} startAngle 起始角度
     * @param {number} endAngle   结束角度
     * @return {object} 包围盒对象
     */
    box: function (cx, cy, rx, ry, xRotation, startAngle, endAngle) {
        var xDim = xExtrema(rx, ry, xRotation);
        var minX = Infinity;
        var maxX = -Infinity;
        var xs = [startAngle, endAngle];
        for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
            var xAngle = xDim + i;
            if (startAngle < endAngle) {
                if (startAngle < xAngle && xAngle < endAngle) {
                    xs.push(xAngle);
                }
            }
            else {
                if (endAngle < xAngle && xAngle < startAngle) {
                    xs.push(xAngle);
                }
            }
        }
        for (var i = 0; i < xs.length; i++) {
            var x = xAt(cx, cy, rx, ry, xRotation, xs[i]);
            if (x < minX) {
                minX = x;
            }
            if (x > maxX) {
                maxX = x;
            }
        }
        var yDim = yExtrema(rx, ry, xRotation);
        var minY = Infinity;
        var maxY = -Infinity;
        var ys = [startAngle, endAngle];
        for (var i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
            var yAngle = yDim + i;
            if (startAngle < endAngle) {
                if (startAngle < yAngle && yAngle < endAngle) {
                    ys.push(yAngle);
                }
            }
            else {
                if (endAngle < yAngle && yAngle < startAngle) {
                    ys.push(yAngle);
                }
            }
        }
        for (var i = 0; i < ys.length; i++) {
            var y = yAt(cx, cy, rx, ry, xRotation, ys[i]);
            if (y < minY) {
                minY = y;
            }
            if (y > maxY) {
                maxY = y;
            }
        }
        return {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY,
        };
    },
    /**
     * 获取圆弧的长度，计算圆弧长度时不考虑旋转角度，
     * 仅跟 rx, ry, startAngle, endAngle 相关
     * @param {number} cx         圆心 x
     * @param {number} cy         圆心 y
     * @param {number} rx         x 轴方向的半径
     * @param {number} ry         y 轴方向的半径
     * @param {number} xRotation  旋转角度
     * @param {number} startAngle 起始角度
     * @param {number} endAngle   结束角度
     */
    length: function (cx, cy, rx, ry, xRotation, startAngle, endAngle) { },
    /**
     * 获取指定点到圆弧的最近距离的点
     * @param {number} cx         圆心 x
     * @param {number} cy         圆心 y
     * @param {number} rx         x 轴方向的半径
     * @param {number} ry         y 轴方向的半径
     * @param {number} xRotation  旋转角度
     * @param {number} startAngle 起始角度
     * @param {number} endAngle   结束角度
     * @param {number} x0         指定点的 x
     * @param {number} y0         指定点的 y
     * @return {object} 到指定点最近距离的点
     */
    nearestPoint: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {
        // 将最近距离问题转换成到椭圆中心 0,0 没有旋转的椭圆问题
        var relativeVector = rotate(x0 - cx, y0 - cy, -xRotation);
        var x1 = relativeVector[0], y1 = relativeVector[1];
        // 计算点到椭圆的最近的点
        var relativePoint = ellipse$1.nearestPoint(0, 0, rx, ry, x1, y1);
        // 获取点在椭圆上的角度
        var angle = getAngle(rx, ry, relativePoint.x, relativePoint.y);
        // 点没有在圆弧上
        if (angle < startAngle) {
            // 小于起始圆弧
            relativePoint = getPoint(rx, ry, startAngle);
        }
        else if (angle > endAngle) {
            // 大于结束圆弧
            relativePoint = getPoint(rx, ry, endAngle);
        }
        // 旋转到 xRotation 的角度
        var vector = rotate(relativePoint.x, relativePoint.y, xRotation);
        return {
            x: vector[0] + cx,
            y: vector[1] + cy,
        };
    },
    pointDistance: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, x0, y0) {
        var nearestPoint = this.nearestPoint(cx, cy, rx, ry, x0, y0);
        return distance$1(nearestPoint.x, nearestPoint.y, x0, y0);
    },
    pointAt: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {
        var angle = (endAngle - startAngle) * t + startAngle;
        return {
            x: xAt(cx, cy, rx, ry, xRotation, angle),
            y: yAt(cx, cy, rx, ry, xRotation, angle),
        };
    },
    tangentAngle: function (cx, cy, rx, ry, xRotation, startAngle, endAngle, t) {
        var angle = (endAngle - startAngle) * t + startAngle;
        var dx = derivativeXAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);
        var dy = derivativeYAt(cx, cy, rx, ry, xRotation, startAngle, endAngle, angle);
        return piMod(Math.atan2(dy, dx));
    },
};

function analyzePoints(points) {
    // 计算每段的长度和总的长度
    var totalLength = 0;
    var segments = [];
    for (var i = 0; i < points.length - 1; i++) {
        var from = points[i];
        var to = points[i + 1];
        var length_1 = distance$1(from[0], from[1], to[0], to[1]);
        var seg = {
            from: from,
            to: to,
            length: length_1,
        };
        segments.push(seg);
        totalLength += length_1;
    }
    return { segments: segments, totalLength: totalLength };
}
function lengthOfSegment(points) {
    if (points.length < 2) {
        return 0;
    }
    var totalLength = 0;
    for (var i = 0; i < points.length - 1; i++) {
        var from = points[i];
        var to = points[i + 1];
        totalLength += distance$1(from[0], from[1], to[0], to[1]);
    }
    return totalLength;
}
/**
 * 按照比例在数据片段中获取点
 * @param {array} points 点的集合
 * @param {number} t 百分比 0-1
 * @return {object} 点的坐标
 */
function pointAtSegments(points, t) {
    // 边界判断
    if (t > 1 || t < 0 || points.length < 2) {
        return null;
    }
    var _a = analyzePoints(points), segments = _a.segments, totalLength = _a.totalLength;
    // 多个点有可能重合
    if (totalLength === 0) {
        return {
            x: points[0][0],
            y: points[0][1],
        };
    }
    // 计算比例
    var startRatio = 0;
    var point = null;
    for (var i = 0; i < segments.length; i++) {
        var seg = segments[i];
        var from = seg.from, to = seg.to;
        var currentRatio = seg.length / totalLength;
        if (t >= startRatio && t <= startRatio + currentRatio) {
            var localRatio = (t - startRatio) / currentRatio;
            point = LineUtil.pointAt(from[0], from[1], to[0], to[1], localRatio);
            break;
        }
        startRatio += currentRatio;
    }
    return point;
}
/**
 * 按照比例在数据片段中获取切线的角度
 * @param {array} points 点的集合
 * @param {number} t 百分比 0-1
 */
function angleAtSegments(points, t) {
    // 边界判断
    if (t > 1 || t < 0 || points.length < 2) {
        return 0;
    }
    var _a = analyzePoints(points), segments = _a.segments, totalLength = _a.totalLength;
    // 计算比例
    var startRatio = 0;
    var angle = 0;
    for (var i = 0; i < segments.length; i++) {
        var seg = segments[i];
        var from = seg.from, to = seg.to;
        var currentRatio = seg.length / totalLength;
        if (t >= startRatio && t <= startRatio + currentRatio) {
            angle = Math.atan2(to[1] - from[1], to[0] - from[0]);
            break;
        }
        startRatio += currentRatio;
    }
    return angle;
}
function distanceAtSegment(points, x, y) {
    var minDistance = Infinity;
    for (var i = 0; i < points.length - 1; i++) {
        var point = points[i];
        var nextPoint = points[i + 1];
        var distance_1 = LineUtil.pointDistance(point[0], point[1], nextPoint[0], nextPoint[1], x, y);
        if (distance_1 < minDistance) {
            minDistance = distance_1;
        }
    }
    return minDistance;
}

var PolylineUtil = {
    /**
     * 计算多折线的包围盒
     * @param {array} points 点的集合 [x,y] 的形式
     * @return {object} 包围盒
     */
    box: function (points) {
        var xArr = [];
        var yArr = [];
        for (var i = 0; i < points.length; i++) {
            var point = points[i];
            xArr.push(point[0]);
            yArr.push(point[1]);
        }
        return getBBoxByArray(xArr, yArr);
    },
    /**
     * 计算多折线的长度
     * @param {array} points 点的集合 [x,y] 的形式
     * @return {object} 多条边的长度
     */
    length: function (points) {
        return lengthOfSegment(points);
    },
    /**
     * 根据比例获取多折线的点
     * @param {array} points 点的集合 [x,y] 的形式
     * @param {number} t 在多折线的长度上的比例
     * @return {object} 根据比例值计算出来的点
     */
    pointAt: function (points, t) {
        return pointAtSegments(points, t);
    },
    /**
     * 指定点到多折线的距离
     * @param {array} points 点的集合 [x,y] 的形式
     * @param {number} x 指定点的 x
     * @param {number} y 指定点的 y
     * @return {number} 点到多折线的距离
     */
    pointDistance: function (points, x, y) {
        return distanceAtSegment(points, x, y);
    },
    /**
     * 根据比例获取多折线的切线角度
     * @param {array} points 点的集合 [x,y] 的形式
     * @param {number} t 在多折线的长度上的比例
     * @return {object} 根据比例值计算出来的角度
     */
    tangentAngle: function (points, t) {
        return angleAtSegments(points, t);
    },
};

// 合并包围盒
function mergeBBox(bbox1, bbox2) {
    if (!bbox1 || !bbox2) {
        return bbox1 || bbox2;
    }
    return {
        minX: Math.min(bbox1.minX, bbox2.minX),
        minY: Math.min(bbox1.minY, bbox2.minY),
        maxX: Math.max(bbox1.maxX, bbox2.maxX),
        maxY: Math.max(bbox1.maxY, bbox2.maxY),
    };
}
// 合并箭头的包围盒
function mergeArrowBBox(shape, bbox) {
    var startArrowShape = shape.get('startArrowShape');
    var endArrowShape = shape.get('endArrowShape');
    var startArrowBBox = null;
    var endArrowBBox = null;
    if (startArrowShape) {
        startArrowBBox = startArrowShape.getCanvasBBox();
        bbox = mergeBBox(bbox, startArrowBBox);
    }
    if (endArrowShape) {
        endArrowBBox = endArrowShape.getCanvasBBox();
        bbox = mergeBBox(bbox, endArrowBBox);
    }
    return bbox;
}

function polyline (shape) {
    var attrs = shape.attr();
    var points = attrs.points;
    var xArr = [];
    var yArr = [];
    for (var i = 0; i < points.length; i++) {
        var point = points[i];
        xArr.push(point[0]);
        yArr.push(point[1]);
    }
    var _a = getBBoxByArray(xArr, yArr), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    var bbox = {
        minX: x,
        minY: y,
        maxX: x + width,
        maxY: y + height,
    };
    bbox = mergeArrowBBox(shape, bbox);
    return {
        x: bbox.minX,
        y: bbox.minY,
        width: bbox.maxX - bbox.minX,
        height: bbox.maxY - bbox.minY,
    };
}

function polygon (shape) {
    var attrs = shape.attr();
    var points = attrs.points;
    var xArr = [];
    var yArr = [];
    for (var i = 0; i < points.length; i++) {
        var point = points[i];
        xArr.push(point[0]);
        yArr.push(point[1]);
    }
    return getBBoxByArray(xArr, yArr);
}

// 全局设置一个唯一离屏的 ctx，用于计算 isPointInPath
var offScreenCtx = null;
function getOffScreenContext() {
    if (!offScreenCtx) {
        var canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        offScreenCtx = canvas.getContext('2d');
    }
    return offScreenCtx;
}

/**
 * 获取文本的高度
 * @param text 文本
 * @param fontSize 字体大小
 * @param lineHeight 行高，可以为空
 */
function getTextHeight(text, fontSize, lineHeight) {
    var lineCount = 1;
    if (isString$1(text)) {
        lineCount = text.split('\n').length;
    }
    if (lineCount > 1) {
        var spaceingY = getLineSpaceing(fontSize, lineHeight);
        return fontSize * lineCount + spaceingY * (lineCount - 1);
    }
    return fontSize;
}
/**
 * 获取行间距如果文本多行，需要获取文本间距
 * @param fontSize 字体大小
 * @param lineHeight 行高
 */
function getLineSpaceing(fontSize, lineHeight) {
    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;
}
/**
 * 字体宽度
 * @param text 文本
 * @param font 字体
 */
function getTextWidth(text, font) {
    var context = getOffScreenContext(); // 获取离屏的 ctx 进行计算
    var width = 0;
    // null 或者 undefined 时，宽度为 0
    if (isNil$1(text) || text === '') {
        return width;
    }
    context.save();
    context.font = font;
    if (isString$1(text) && text.includes('\n')) {
        var textArr = text.split('\n');
        each(textArr, function (subText) {
            var measureWidth = context.measureText(subText).width;
            if (width < measureWidth) {
                width = measureWidth;
            }
        });
    }
    else {
        width = context.measureText(text).width;
    }
    context.restore();
    return width;
}
function assembleFont(attrs) {
    var fontSize = attrs.fontSize, fontFamily = attrs.fontFamily, fontWeight = attrs.fontWeight, fontStyle = attrs.fontStyle, fontVariant = attrs.fontVariant;
    return [fontStyle, fontVariant, fontWeight, fontSize + "px", fontFamily].join(' ').trim();
}

function text (shape) {
    var attrs = shape.attr();
    var x = attrs.x, y = attrs.y, text = attrs.text, fontSize = attrs.fontSize, lineHeight = attrs.lineHeight;
    var font = attrs.font;
    if (!font) {
        // 如果未组装 font
        font = assembleFont(attrs);
    }
    var width = getTextWidth(text, font);
    var bbox;
    if (!width) {
        // 如果width不存在，四点共其实点
        bbox = {
            x: x,
            y: y,
            width: 0,
            height: 0,
        };
    }
    else {
        var textAlign = attrs.textAlign, textBaseline = attrs.textBaseline;
        var height = getTextHeight(text, fontSize, lineHeight); // attrs.height
        // 默认左右对齐：left, 默认上下对齐 bottom
        var point = {
            x: x,
            y: y - height,
        };
        if (textAlign) {
            if (textAlign === 'end' || textAlign === 'right') {
                point.x -= width;
            }
            else if (textAlign === 'center') {
                point.x -= width / 2;
            }
        }
        if (textBaseline) {
            if (textBaseline === 'top') {
                point.y += height;
            }
            else if (textBaseline === 'middle') {
                point.y += height / 2;
            }
        }
        bbox = {
            x: point.x,
            y: point.y,
            width: width,
            height: height,
        };
    }
    return bbox;
}

var regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;
var regexDot = /[^\s\,]+/ig;
function parsePath(p) {
    var path = p || [];
    if (isArray$2(path)) {
        return path;
    }
    if (isString$1(path)) {
        path = path.match(regexTags);
        each(path, function (item, index) {
            // @ts-ignore
            item = item.match(regexDot);
            if (item[0].length > 1) {
                var tag = item[0].charAt(0);
                // @ts-ignore
                item.splice(1, 0, item[0].substr(1));
                // @ts-ignore
                item[0] = tag;
            }
            // @ts-ignore
            each(item, function (sub, i) {
                if (!isNaN(sub)) {
                    // @ts-ignore
                    item[i] = +sub;
                }
            });
            // @ts-ignore
            path[index] = item;
        });
        return path;
    }
}

var SPACES = '\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029';
var PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');
var PATH_VALUES = new RegExp('(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig');
// Parses given path string into an array of arrays of path segments
function parsePathString(pathString) {
    if (!pathString) {
        return null;
    }
    if (isArray$2(pathString)) {
        return pathString;
    }
    var paramCounts = {
        a: 7,
        c: 6,
        o: 2,
        h: 1,
        l: 2,
        m: 2,
        r: 4,
        q: 4,
        s: 4,
        t: 2,
        v: 1,
        u: 3,
        z: 0,
    };
    var data = [];
    String(pathString).replace(PATH_COMMAND, function (a, b, c) {
        var params = [];
        var name = b.toLowerCase();
        c.replace(PATH_VALUES, function (a, b) {
            b && params.push(+b);
        });
        if (name === 'm' && params.length > 2) {
            data.push([b].concat(params.splice(0, 2)));
            name = 'l';
            b = b === 'm' ? 'l' : 'L';
        }
        if (name === 'o' && params.length === 1) {
            data.push([b, params[0]]);
        }
        if (name === 'r') {
            data.push([b].concat(params));
        }
        else {
            while (params.length >= paramCounts[name]) {
                data.push([b].concat(params.splice(0, paramCounts[name])));
                if (!paramCounts[name]) {
                    break;
                }
            }
        }
        return '';
    });
    return data;
}

var REGEX_MD = /[a-z]/;
function toSymmetry$1(p, c) {
    return [
        c[0] + (c[0] - p[0]),
        c[1] + (c[1] - p[1]),
    ];
}
function pathToAbsolute(pathString) {
    var pathArray = parsePathString(pathString);
    if (!pathArray || !pathArray.length) {
        return [
            ['M', 0, 0],
        ];
    }
    var needProcess = false; // 如果存在小写的命令或者 V,H,T,S 则需要处理
    for (var i = 0; i < pathArray.length; i++) {
        var cmd = pathArray[i][0];
        // 如果存在相对位置的命令，则中断返回
        if (REGEX_MD.test(cmd) || ['V', 'H', 'T', 'S'].indexOf(cmd) >= 0) {
            needProcess = true;
            break;
        }
    }
    // 如果不存在相对命令，则直接返回
    // 如果在业务上都写绝对路径，这种方式最快，仅做了一次检测
    if (!needProcess) {
        return pathArray;
    }
    var res = [];
    var x = 0;
    var y = 0;
    var mx = 0;
    var my = 0;
    var start = 0;
    var first = pathArray[0];
    if (first[0] === 'M' || first[0] === 'm') {
        x = +first[1];
        y = +first[2];
        mx = x;
        my = y;
        start++;
        res[0] = ['M', x, y];
    }
    for (var i = start, ii = pathArray.length; i < ii; i++) {
        var pa = pathArray[i];
        var preParams = res[i - 1]; // 取前一个已经处理后的节点，否则会出现问题
        var r = [];
        var cmd = pa[0];
        var upCmd = cmd.toUpperCase();
        if (cmd !== upCmd) {
            r[0] = upCmd;
            switch (upCmd) {
                case 'A':
                    r[1] = pa[1];
                    r[2] = pa[2];
                    r[3] = pa[3];
                    r[4] = pa[4];
                    r[5] = pa[5];
                    r[6] = +pa[6] + x;
                    r[7] = +pa[7] + y;
                    break;
                case 'V':
                    r[1] = +pa[1] + y;
                    break;
                case 'H':
                    r[1] = +pa[1] + x;
                    break;
                case 'M':
                    mx = +pa[1] + x;
                    my = +pa[2] + y;
                    r[1] = mx;
                    r[2] = my;
                    break; // for lint
                default:
                    for (var j = 1, jj = pa.length; j < jj; j++) {
                        r[j] = +pa[j] + ((j % 2) ? x : y);
                    }
            }
        }
        else { // 如果本来已经大写，则不处理
            r = pathArray[i];
        }
        // 需要在外面统一做，同时处理 V,H,S,T 等特殊指令
        switch (upCmd) {
            case 'Z':
                x = +mx;
                y = +my;
                break;
            case 'H':
                x = r[1];
                r = ['L', x, y];
                break;
            case 'V':
                y = r[1];
                r = ['L', x, y];
                break;
            case 'T':
                x = r[1];
                y = r[2];
                // 以 x, y 为中心的，上一个控制点的对称点
                // 需要假设上一个节点的命令为 Q
                var symetricT = toSymmetry$1([preParams[1], preParams[2]], [preParams[3], preParams[4]]);
                r = ['Q', symetricT[0], symetricT[1], x, y];
                break;
            case 'S':
                x = r[r.length - 2];
                y = r[r.length - 1];
                // 以 x,y 为中心，取上一个控制点，
                // 需要假设上一个线段为 C 或者 S
                var length_1 = preParams.length;
                var symetricS = toSymmetry$1([preParams[length_1 - 4], preParams[length_1 - 3]], [preParams[length_1 - 2], preParams[length_1 - 1]]);
                r = ['C', symetricS[0], symetricS[1], r[1], r[2], x, y];
                break;
            case 'M':
                mx = r[r.length - 2];
                my = r[r.length - 1];
                break; // for lint
            default:
                x = r[r.length - 2];
                y = r[r.length - 1];
        }
        res.push(r);
    }
    return res;
}

// 向量长度
function vMag$1(v) {
    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
}
// u.v/|u||v|，计算夹角的余弦值
function vRatio$1(u, v) {
    // 当存在一个向量的长度为 0 时，夹角也为 0，即夹角的余弦值为 1
    return vMag$1(u) * vMag$1(v) ? (u[0] * v[0] + u[1] * v[1]) / (vMag$1(u) * vMag$1(v)) : 1;
}
// 向量角度
function vAngle$1(u, v) {
    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio$1(u, v));
}
/**
 * 判断两个点是否重合，点坐标的格式为 [x, y]
 * @param {Array} point1 第一个点
 * @param {Array} point2 第二个点
 */
function isSamePoint$1(point1, point2) {
    return point1[0] === point2[0] && point1[1] === point2[1];
}
// A 0:rx 1:ry 2:x-axis-rotation 3:large-arc-flag 4:sweep-flag 5: x 6: y
function getArcParams$1(startPoint, params) {
    var rx = params[1];
    var ry = params[2];
    var xRotation = mod$1(toRadian(params[3]), Math.PI * 2);
    var arcFlag = params[4];
    var sweepFlag = params[5];
    // 弧形起点坐标
    var x1 = startPoint[0];
    var y1 = startPoint[1];
    // 弧形终点坐标
    var x2 = params[6];
    var y2 = params[7];
    var xp = (Math.cos(xRotation) * (x1 - x2)) / 2.0 + (Math.sin(xRotation) * (y1 - y2)) / 2.0;
    var yp = (-1 * Math.sin(xRotation) * (x1 - x2)) / 2.0 + (Math.cos(xRotation) * (y1 - y2)) / 2.0;
    var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
    if (lambda > 1) {
        rx *= Math.sqrt(lambda);
        ry *= Math.sqrt(lambda);
    }
    var diff = rx * rx * (yp * yp) + ry * ry * (xp * xp);
    var f = diff ? Math.sqrt((rx * rx * (ry * ry) - diff) / diff) : 1;
    if (arcFlag === sweepFlag) {
        f *= -1;
    }
    if (isNaN(f)) {
        f = 0;
    }
    // 旋转前的起点坐标，且当长半轴和短半轴的长度为 0 时，坐标按 (0, 0) 处理
    var cxp = ry ? (f * rx * yp) / ry : 0;
    var cyp = rx ? (f * -ry * xp) / rx : 0;
    // 椭圆圆心坐标
    var cx = (x1 + x2) / 2.0 + Math.cos(xRotation) * cxp - Math.sin(xRotation) * cyp;
    var cy = (y1 + y2) / 2.0 + Math.sin(xRotation) * cxp + Math.cos(xRotation) * cyp;
    // 起始点的单位向量
    var u = [(xp - cxp) / rx, (yp - cyp) / ry];
    // 终止点的单位向量
    var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
    // 计算起始点和圆心的连线，与 x 轴正方向的夹角
    var theta = vAngle$1([1, 0], u);
    // 计算圆弧起始点和终止点与椭圆圆心连线的夹角
    var dTheta = vAngle$1(u, v);
    if (vRatio$1(u, v) <= -1) {
        dTheta = Math.PI;
    }
    if (vRatio$1(u, v) >= 1) {
        dTheta = 0;
    }
    if (sweepFlag === 0 && dTheta > 0) {
        dTheta = dTheta - 2 * Math.PI;
    }
    if (sweepFlag === 1 && dTheta < 0) {
        dTheta = dTheta + 2 * Math.PI;
    }
    return {
        cx: cx,
        cy: cy,
        // 弧形的起点和终点相同时，长轴和短轴的长度按 0 处理
        rx: isSamePoint$1(startPoint, [x2, y2]) ? 0 : rx,
        ry: isSamePoint$1(startPoint, [x2, y2]) ? 0 : ry,
        startAngle: theta,
        endAngle: theta + dTheta,
        xRotation: xRotation,
        arcFlag: arcFlag,
        sweepFlag: sweepFlag,
    };
}

// 点对称
function toSymmetry(point, center) {
    return [center[0] + (center[0] - point[0]), center[1] + (center[1] - point[1])];
}
function getSegments(path) {
    path = parsePath(path);
    var segments = [];
    var currentPoint = null; // 当前图形
    var nextParams = null; // 下一节点的 path 参数
    var startMovePoint = null; // 开始 M 的点，可能会有多个
    var lastStartMovePointIndex = 0; // 最近一个开始点 M 的索引
    var count = path.length;
    for (var i = 0; i < count; i++) {
        var params = path[i];
        nextParams = path[i + 1];
        var command = params[0];
        // 数学定义上的参数，便于后面的计算
        var segment = {
            command: command,
            prePoint: currentPoint,
            params: params,
            startTangent: null,
            endTangent: null,
        };
        switch (command) {
            case 'M':
                startMovePoint = [params[1], params[2]];
                lastStartMovePointIndex = i;
                break;
            case 'A':
                var arcParams = getArcParams$1(currentPoint, params);
                segment['arcParams'] = arcParams;
                break;
        }
        if (command === 'Z') {
            // 有了 Z 后，当前节点从开始 M 的点开始
            currentPoint = startMovePoint;
            // 如果当前点的命令为 Z，相当于当前点为最近一个 M 点，则下一个点直接指向最近一个 M 点的下一个点
            nextParams = path[lastStartMovePointIndex + 1];
        }
        else {
            var len = params.length;
            currentPoint = [params[len - 2], params[len - 1]];
        }
        if (nextParams && nextParams[0] === 'Z') {
            // 如果下一个点的命令为 Z，则下一个点直接指向最近一个 M 点
            nextParams = path[lastStartMovePointIndex];
            if (segments[lastStartMovePointIndex]) {
                // 如果下一个点的命令为 Z，则最近一个 M 点的前一个点为当前点
                segments[lastStartMovePointIndex].prePoint = currentPoint;
            }
        }
        segment['currentPoint'] = currentPoint;
        // 如果当前点与最近一个 M 点相同，则最近一个 M 点的前一个点为当前点的前一个点
        if (segments[lastStartMovePointIndex] &&
            isSamePoint$1(currentPoint, segments[lastStartMovePointIndex].currentPoint)) {
            segments[lastStartMovePointIndex].prePoint = segment.prePoint;
        }
        var nextPoint = nextParams ? [nextParams[nextParams.length - 2], nextParams[nextParams.length - 1]] : null;
        segment['nextPoint'] = nextPoint;
        // Add startTangent and endTangent
        var prePoint = segment.prePoint;
        if (['L', 'H', 'V'].includes(command)) {
            segment.startTangent = [prePoint[0] - currentPoint[0], prePoint[1] - currentPoint[1]];
            segment.endTangent = [currentPoint[0] - prePoint[0], currentPoint[1] - prePoint[1]];
        }
        else if (command === 'Q') {
            // 二次贝塞尔曲线只有一个控制点
            var cp = [params[1], params[2]];
            // 二次贝塞尔曲线的终点为 currentPoint
            segment.startTangent = [prePoint[0] - cp[0], prePoint[1] - cp[1]];
            segment.endTangent = [currentPoint[0] - cp[0], currentPoint[1] - cp[1]];
        }
        else if (command === 'T') {
            var preSegment = segments[i - 1];
            var cp = toSymmetry(preSegment.currentPoint, prePoint);
            if (preSegment.command === 'Q') {
                segment.command = 'Q';
                segment.startTangent = [prePoint[0] - cp[0], prePoint[1] - cp[1]];
                segment.endTangent = [currentPoint[0] - cp[0], currentPoint[1] - cp[1]];
            }
            else {
                segment.command = 'TL';
                segment.startTangent = [prePoint[0] - currentPoint[0], prePoint[1] - currentPoint[1]];
                segment.endTangent = [currentPoint[0] - prePoint[0], currentPoint[1] - prePoint[1]];
            }
        }
        else if (command === 'C') {
            // 三次贝塞尔曲线有两个控制点
            var cp1 = [params[1], params[2]];
            var cp2 = [params[3], params[4]];
            segment.startTangent = [prePoint[0] - cp1[0], prePoint[1] - cp1[1]];
            segment.endTangent = [currentPoint[0] - cp2[0], currentPoint[1] - cp2[1]];
            // horizontal line, eg. ['C', 100, 100, 100, 100, 200, 200]
            if (segment.startTangent[0] === 0 && segment.startTangent[1] === 0) {
                segment.startTangent = [cp1[0] - cp2[0], cp1[1] - cp2[1]];
            }
            if (segment.endTangent[0] === 0 && segment.endTangent[1] === 0) {
                segment.endTangent = [cp2[0] - cp1[0], cp2[1] - cp1[1]];
            }
        }
        else if (command === 'S') {
            var preSegment = segments[i - 1];
            var cp1 = toSymmetry(preSegment.currentPoint, prePoint);
            var cp2 = [params[1], params[2]];
            if (preSegment.command === 'C') {
                segment.command = 'C'; // 将 S 命令变换为 C 命令
                segment.startTangent = [prePoint[0] - cp1[0], prePoint[1] - cp1[1]];
                segment.endTangent = [currentPoint[0] - cp2[0], currentPoint[1] - cp2[1]];
            }
            else {
                segment.command = 'SQ'; // 将 S 命令变换为 SQ 命令
                segment.startTangent = [prePoint[0] - cp2[0], prePoint[1] - cp2[1]];
                segment.endTangent = [currentPoint[0] - cp2[0], currentPoint[1] - cp2[1]];
            }
        }
        else if (command === 'A') {
            var d = 0.001;
            var _a = segment['arcParams'] || {}, _b = _a.cx, cx = _b === void 0 ? 0 : _b, _c = _a.cy, cy = _c === void 0 ? 0 : _c, _d = _a.rx, rx = _d === void 0 ? 0 : _d, _e = _a.ry, ry = _e === void 0 ? 0 : _e, _f = _a.sweepFlag, sweepFlag = _f === void 0 ? 0 : _f, _g = _a.startAngle, startAngle = _g === void 0 ? 0 : _g, _h = _a.endAngle, endAngle = _h === void 0 ? 0 : _h;
            if (sweepFlag === 0) {
                d *= -1;
            }
            var dx1 = rx * Math.cos(startAngle - d) + cx;
            var dy1 = ry * Math.sin(startAngle - d) + cy;
            segment.startTangent = [dx1 - startMovePoint[0], dy1 - startMovePoint[1]];
            var dx2 = rx * Math.cos(startAngle + endAngle + d) + cx;
            var dy2 = ry * Math.sin(startAngle + endAngle - d) + cy;
            segment.endTangent = [prePoint[0] - dx2, prePoint[1] - dy2];
        }
        segments.push(segment);
    }
    return segments;
}

function getPathBox(segments, lineWidth) {
    var xArr = [];
    var yArr = [];
    var segmentsWithAngle = [];
    for (var i = 0; i < segments.length; i++) {
        var segment = segments[i];
        var currentPoint = segment.currentPoint, params = segment.params, prePoint = segment.prePoint;
        var box = void 0;
        switch (segment.command) {
            case 'Q':
                box = QuadUtil.box(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4]);
                break;
            case 'C':
                box = CubicUtil.box(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4], params[5], params[6]);
                break;
            case 'A':
                var arcParams = segment.arcParams;
                box = EllipseArcUtil.box(arcParams.cx, arcParams.cy, arcParams.rx, arcParams.ry, arcParams.xRotation, arcParams.startAngle, arcParams.endAngle);
                break;
            default:
                xArr.push(currentPoint[0]);
                yArr.push(currentPoint[1]);
                break;
        }
        if (box) {
            segment.box = box;
            xArr.push(box.x, box.x + box.width);
            yArr.push(box.y, box.y + box.height);
        }
        if (lineWidth && (segment.command === 'L' || segment.command === 'M') && segment.prePoint && segment.nextPoint) {
            segmentsWithAngle.push(segment);
        }
    }
    // bbox calculation should ignore NaN for path attribute
    // ref: https://github.com/antvis/g/issues/210
    // ref: https://github.com/antvis/G2/issues/3109
    xArr = xArr.filter(function (item) { return !Number.isNaN(item) && item !== Infinity && item !== -Infinity; });
    yArr = yArr.filter(function (item) { return !Number.isNaN(item) && item !== Infinity && item !== -Infinity; });
    var minX = min$2(xArr);
    var minY = min$2(yArr);
    var maxX = max$2(xArr);
    var maxY = max$2(yArr);
    if (segmentsWithAngle.length === 0) {
        return {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY,
        };
    }
    for (var i = 0; i < segmentsWithAngle.length; i++) {
        var segment = segmentsWithAngle[i];
        var currentPoint = segment.currentPoint;
        var extra = void 0;
        if (currentPoint[0] === minX) {
            extra = getExtraFromSegmentWithAngle(segment, lineWidth);
            minX = minX - extra.xExtra;
        }
        else if (currentPoint[0] === maxX) {
            extra = getExtraFromSegmentWithAngle(segment, lineWidth);
            maxX = maxX + extra.xExtra;
        }
        if (currentPoint[1] === minY) {
            extra = getExtraFromSegmentWithAngle(segment, lineWidth);
            minY = minY - extra.yExtra;
        }
        else if (currentPoint[1] === maxY) {
            extra = getExtraFromSegmentWithAngle(segment, lineWidth);
            maxY = maxY + extra.yExtra;
        }
    }
    return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY,
    };
}
function getExtraFromSegmentWithAngle(segment, lineWidth) {
    var prePoint = segment.prePoint, currentPoint = segment.currentPoint, nextPoint = segment.nextPoint;
    var currentAndPre = Math.pow(currentPoint[0] - prePoint[0], 2) + Math.pow(currentPoint[1] - prePoint[1], 2);
    var currentAndNext = Math.pow(currentPoint[0] - nextPoint[0], 2) + Math.pow(currentPoint[1] - nextPoint[1], 2);
    var preAndNext = Math.pow(prePoint[0] - nextPoint[0], 2) + Math.pow(prePoint[1] - nextPoint[1], 2);
    // 以 currentPoint 为顶点的夹角
    var currentAngle = Math.acos((currentAndPre + currentAndNext - preAndNext) / (2 * Math.sqrt(currentAndPre) * Math.sqrt(currentAndNext)));
    // 夹角为空、 0 或 PI 时，不需要计算夹角处的额外宽度
    // 注意: 由于计算精度问题，夹角为 0 的情况计算出来的角度可能是一个很小的值，还需要判断其与 0 是否近似相等
    if (!currentAngle || Math.sin(currentAngle) === 0 || isNumberEqual$1(currentAngle, 0)) {
        return {
            xExtra: 0,
            yExtra: 0,
        };
    }
    var xAngle = Math.abs(Math.atan2(nextPoint[1] - currentPoint[1], nextPoint[0] - currentPoint[0]));
    var yAngle = Math.abs(Math.atan2(nextPoint[0] - currentPoint[0], nextPoint[1] - currentPoint[1]));
    // 将夹角转为锐角
    xAngle = xAngle > Math.PI / 2 ? Math.PI - xAngle : xAngle;
    yAngle = yAngle > Math.PI / 2 ? Math.PI - yAngle : yAngle;
    // 这里不考虑在水平和垂直方向的投影，直接使用最大差值
    // 由于上层统一加减了二分之一线宽，这里需要进行弥补
    var extra = {
        // 水平方向投影
        xExtra: Math.cos(currentAngle / 2 - xAngle) * ((lineWidth / 2) * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0,
        // 垂直方向投影
        yExtra: Math.cos(yAngle - currentAngle / 2) * ((lineWidth / 2) * (1 / Math.sin(currentAngle / 2))) - lineWidth / 2 || 0,
    };
    return extra;
}
function path (shape) {
    var attrs = shape.attr();
    var path = attrs.path, stroke = attrs.stroke;
    var lineWidth = stroke ? attrs.lineWidth : 0; // 只有有 stroke 时，lineWidth 才生效
    var segments = shape.get('segments') || getSegments(path);
    var _a = getPathBox(segments, lineWidth), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    var bbox = {
        minX: x,
        minY: y,
        maxX: x + width,
        maxY: y + height,
    };
    bbox = mergeArrowBBox(shape, bbox);
    return {
        x: bbox.minX,
        y: bbox.minY,
        width: bbox.maxX - bbox.minX,
        height: bbox.maxY - bbox.minY,
    };
}

function line (shape) {
    var attrs = shape.attr();
    var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2;
    var minX = Math.min(x1, x2);
    var maxX = Math.max(x1, x2);
    var minY = Math.min(y1, y2);
    var maxY = Math.max(y1, y2);
    var bbox = {
        minX: minX,
        maxX: maxX,
        minY: minY,
        maxY: maxY,
    };
    bbox = mergeArrowBBox(shape, bbox);
    return {
        x: bbox.minX,
        y: bbox.minY,
        width: bbox.maxX - bbox.minX,
        height: bbox.maxY - bbox.minY,
    };
}

function ellipse (shape) {
    var attrs = shape.attr();
    var x = attrs.x, y = attrs.y, rx = attrs.rx, ry = attrs.ry;
    return {
        x: x - rx,
        y: y - ry,
        width: rx * 2,
        height: ry * 2,
    };
}

register('rect', rect);
register('image', rect); // image 使用 rect 的包围盒计算
register('circle', circle);
register('marker', circle); // marker 使用 circle 的计算方案
register('polyline', polyline);
register('polygon', polygon);
register('text', text);
register('path', path);
register('line', line);
register('ellipse', ellipse);

function getPixelRatio() {
    return window ? window.devicePixelRatio : 1;
}
/**
 * 两点之间的距离
 * @param {number} x1 起始点 x
 * @param {number} y1 起始点 y
 * @param {number} x2 结束点 x
 * @param {number} y2 结束点 y
 */
function distance(x1, y1, x2, y2) {
    var dx = x1 - x2;
    var dy = y1 - y2;
    return Math.sqrt(dx * dx + dy * dy);
}
/**
 * 是否在包围盒内
 * @param {number} minX   包围盒开始的点 x
 * @param {number} minY   包围盒开始的点 y
 * @param {number} width  宽度
 * @param {number} height 高度
 * @param {[type]} x      检测点的 x
 * @param {[type]} y      监测点的 y
 */
function inBox(minX, minY, width, height, x, y) {
    return x >= minX && x <= minX + width && y >= minY && y <= minY + height;
}
function intersectRect(box1, box2) {
    return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);
}
// 合并两个区域
function mergeRegion(region1, region2) {
    if (!region1 || !region2) {
        return region1 || region2;
    }
    return {
        minX: Math.min(region1.minX, region2.minX),
        minY: Math.min(region1.minY, region2.minY),
        maxX: Math.max(region1.maxX, region2.maxX),
        maxY: Math.max(region1.maxY, region2.maxY),
    };
}
/**
 * 判断两个点是否重合，点坐标的格式为 [x, y]
 * @param {Array} point1 第一个点
 * @param {Array} point2 第二个点
 */
function isSamePoint(point1, point2) {
    return point1[0] === point2[0] && point1[1] === point2[1];
}

var regexLG = /^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i;
var regexRG = /^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i;
var regexPR = /^p\s*\(\s*([axyn])\s*\)\s*(.*)/i;
var regexColorStop = /[\d.]+:(#[^\s]+|[^\)]+\))/gi;
function addStop(steps, gradient) {
    var arr = steps.match(regexColorStop);
    each(arr, function (item) {
        var itemArr = item.split(':');
        gradient.addColorStop(itemArr[0], itemArr[1]);
    });
}
/**
 * 将边和填充设置的颜色转换成线性渐变对象
 * @param {CanvasRenderingContext2D} context canvas 上下文
 * @param {IElement}                 element  图形元素
 * @param {string}                   gradientStr   颜色
 * @returns {any} 渐变对象
 */
function parseLineGradient(context, element, gradientStr) {
    var arr = regexLG.exec(gradientStr);
    var angle = (parseFloat(arr[1]) % 360) * (Math.PI / 180);
    var steps = arr[2];
    var box = element.getBBox();
    var start;
    var end;
    if (angle >= 0 && angle < (1 / 2) * Math.PI) {
        start = {
            x: box.minX,
            y: box.minY,
        };
        end = {
            x: box.maxX,
            y: box.maxY,
        };
    }
    else if ((1 / 2) * Math.PI <= angle && angle < Math.PI) {
        start = {
            x: box.maxX,
            y: box.minY,
        };
        end = {
            x: box.minX,
            y: box.maxY,
        };
    }
    else if (Math.PI <= angle && angle < (3 / 2) * Math.PI) {
        start = {
            x: box.maxX,
            y: box.maxY,
        };
        end = {
            x: box.minX,
            y: box.minY,
        };
    }
    else {
        start = {
            x: box.minX,
            y: box.maxY,
        };
        end = {
            x: box.maxX,
            y: box.minY,
        };
    }
    var tanTheta = Math.tan(angle);
    var tanTheta2 = tanTheta * tanTheta;
    var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;
    var y = (tanTheta * (end.x - start.x + tanTheta * (end.y - start.y))) / (tanTheta2 + 1) + start.y;
    var gradient = context.createLinearGradient(start.x, start.y, x, y);
    addStop(steps, gradient);
    return gradient;
}
/**
 * 将边和填充设置的颜色转换成圆形渐变对象
 * @param {CanvasRenderingContext2D} context canvas 上下文
 * @param {IElement}                 element  图形元素
 * @param {string}                   gradientStr   颜色
 * @returns {any} 渐变对象
 */
function parseRadialGradient(context, element, gradientStr) {
    var arr = regexRG.exec(gradientStr);
    var fx = parseFloat(arr[1]);
    var fy = parseFloat(arr[2]);
    var fr = parseFloat(arr[3]);
    var steps = arr[4];
    // 环半径为0时，默认无渐变，取渐变序列的最后一个颜色
    if (fr === 0) {
        var colors = steps.match(regexColorStop);
        return colors[colors.length - 1].split(':')[1];
    }
    var box = element.getBBox();
    var width = box.maxX - box.minX;
    var height = box.maxY - box.minY;
    var r = Math.sqrt(width * width + height * height) / 2;
    var gradient = context.createRadialGradient(box.minX + width * fx, box.minY + height * fy, 0, box.minX + width / 2, box.minY + height / 2, fr * r);
    addStop(steps, gradient);
    return gradient;
}
/**
 * 边和填充设置的颜色转换成 pattern
 * @param {CanvasRenderingContext2D} context canvas 上下文
 * @param {IElement}                 element  图形元素
 * @param {string}                   patternStr   生成 pattern 的字符串
 */
function parsePattern(context, element, patternStr) {
    // 在转换过程中进行了缓存
    if (element.get('patternSource') && element.get('patternSource') === patternStr) {
        return element.get('pattern');
    }
    var pattern;
    var img;
    var arr = regexPR.exec(patternStr);
    var repeat = arr[1];
    var source = arr[2];
    // Function to be called when pattern loads
    function onload() {
        // Create pattern
        pattern = context.createPattern(img, repeat);
        element.set('pattern', pattern); // be a cache
        element.set('patternSource', patternStr);
    }
    switch (repeat) {
        case 'a':
            repeat = 'repeat';
            break;
        case 'x':
            repeat = 'repeat-x';
            break;
        case 'y':
            repeat = 'repeat-y';
            break;
        case 'n':
            repeat = 'no-repeat';
            break;
        default:
            repeat = 'no-repeat';
    }
    img = new Image();
    // If source URL is not a data URL
    if (!source.match(/^data:/i)) {
        // Set crossOrigin for this image
        img.crossOrigin = 'Anonymous';
    }
    img.src = source;
    if (img.complete) {
        onload();
    }
    else {
        img.onload = onload;
        // Fix onload() bug in IE9
        img.src = img.src;
    }
    return pattern;
}
function parseStyle(context, element, color) {
    var bbox = element.getBBox();
    if (isNaN(bbox.x) || isNaN(bbox.y) || isNaN(bbox.width) || isNaN(bbox.height)) {
        return color;
    }
    if (isString$1(color)) {
        if (color[1] === '(' || color[2] === '(') {
            if (color[0] === 'l') {
                // regexLG.test(color)
                return parseLineGradient(context, element, color);
            }
            if (color[0] === 'r') {
                // regexRG.test(color)
                return parseRadialGradient(context, element, color);
            }
            if (color[0] === 'p') {
                // regexPR.test(color)
                return parsePattern(context, element, color);
            }
        }
        return color;
    }
    if (color instanceof CanvasPattern) {
        return color;
    }
}
function parseRadius(radius) {
    var r1 = 0;
    var r2 = 0;
    var r3 = 0;
    var r4 = 0;
    if (isArray$2(radius)) {
        if (radius.length === 1) {
            r1 = r2 = r3 = r4 = radius[0];
        }
        else if (radius.length === 2) {
            r1 = r3 = radius[0];
            r2 = r4 = radius[1];
        }
        else if (radius.length === 3) {
            r1 = radius[0];
            r2 = r4 = radius[1];
            r3 = radius[2];
        }
        else {
            r1 = radius[0];
            r2 = radius[1];
            r3 = radius[2];
            r4 = radius[3];
        }
    }
    else {
        r1 = r2 = r3 = r4 = radius;
    }
    return [r1, r2, r3, r4];
}

// 向量长度
function vMag(v) {
    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
}
// u.v/|u||v|，计算夹角的余弦值
function vRatio(u, v) {
    // 当存在一个向量的长度为 0 时，夹角也为 0，即夹角的余弦值为 1
    return vMag(u) * vMag(v) ? (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v)) : 1;
}
// 向量角度
function vAngle(u, v) {
    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
}
// A 0:rx 1:ry 2:x-axis-rotation 3:large-arc-flag 4:sweep-flag 5: x 6: y
function getArcParams(startPoint, params) {
    var rx = params[1];
    var ry = params[2];
    var xRotation = mod$1(toRadian(params[3]), Math.PI * 2);
    var arcFlag = params[4];
    var sweepFlag = params[5];
    // 弧形起点坐标
    var x1 = startPoint[0];
    var y1 = startPoint[1];
    // 弧形终点坐标
    var x2 = params[6];
    var y2 = params[7];
    var xp = (Math.cos(xRotation) * (x1 - x2)) / 2.0 + (Math.sin(xRotation) * (y1 - y2)) / 2.0;
    var yp = (-1 * Math.sin(xRotation) * (x1 - x2)) / 2.0 + (Math.cos(xRotation) * (y1 - y2)) / 2.0;
    var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
    if (lambda > 1) {
        rx *= Math.sqrt(lambda);
        ry *= Math.sqrt(lambda);
    }
    var diff = rx * rx * (yp * yp) + ry * ry * (xp * xp);
    var f = diff ? Math.sqrt((rx * rx * (ry * ry) - diff) / diff) : 1;
    if (arcFlag === sweepFlag) {
        f *= -1;
    }
    if (isNaN(f)) {
        f = 0;
    }
    // 旋转前的起点坐标，且当长半轴和短半轴的长度为 0 时，坐标按 (0, 0) 处理
    var cxp = ry ? (f * rx * yp) / ry : 0;
    var cyp = rx ? (f * -ry * xp) / rx : 0;
    // 椭圆圆心坐标
    var cx = (x1 + x2) / 2.0 + Math.cos(xRotation) * cxp - Math.sin(xRotation) * cyp;
    var cy = (y1 + y2) / 2.0 + Math.sin(xRotation) * cxp + Math.cos(xRotation) * cyp;
    // 起始点的单位向量
    var u = [(xp - cxp) / rx, (yp - cyp) / ry];
    // 终止点的单位向量
    var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
    // 计算起始点和圆心的连线，与 x 轴正方向的夹角
    var theta = vAngle([1, 0], u);
    // 计算圆弧起始点和终止点与椭圆圆心连线的夹角
    var dTheta = vAngle(u, v);
    if (vRatio(u, v) <= -1) {
        dTheta = Math.PI;
    }
    if (vRatio(u, v) >= 1) {
        dTheta = 0;
    }
    if (sweepFlag === 0 && dTheta > 0) {
        dTheta = dTheta - 2 * Math.PI;
    }
    if (sweepFlag === 1 && dTheta < 0) {
        dTheta = dTheta + 2 * Math.PI;
    }
    return {
        cx: cx,
        cy: cy,
        // 弧形的起点和终点相同时，长轴和短轴的长度按 0 处理
        rx: isSamePoint(startPoint, [x2, y2]) ? 0 : rx,
        ry: isSamePoint(startPoint, [x2, y2]) ? 0 : ry,
        startAngle: theta,
        endAngle: theta + dTheta,
        xRotation: xRotation,
        arcFlag: arcFlag,
        sweepFlag: sweepFlag,
    };
}

var sin$1 = Math.sin, cos$1 = Math.cos, atan2$1 = Math.atan2, PI$1 = Math.PI;
function _addDefaultArrow(shape, attrs, x1, y1, x2, y2, isStart) {
    var stroke = attrs.stroke, lineWidth = attrs.lineWidth;
    var x = x1 - x2;
    var y = y1 - y2;
    var rad = atan2$1(y, x);
    var arrowShape = new Path$1({
        type: 'path',
        canvas: shape.get('canvas'),
        isArrowShape: true,
        attrs: {
            // 默认箭头的边长为 10，夹角为 60 度
            path: "M" + 10 * cos$1(PI$1 / 6) + "," + 10 * sin$1(PI$1 / 6) + " L0,0 L" + 10 * cos$1(PI$1 / 6) + ",-" + 10 * sin$1(PI$1 / 6),
            // 使用 shape stroke 值
            stroke: stroke,
            lineWidth: lineWidth,
        },
    });
    arrowShape.translate(x2, y2);
    arrowShape.rotateAtPoint(x2, y2, rad);
    shape.set(isStart ? 'startArrowShape' : 'endArrowShape', arrowShape);
}
/**
 * 箭头 path 的设置要求
 * 1. 箭头顶点坐标需要为 (0, 0)
 * 2. 箭头夹角的中心分割线需要与 X 轴正方向对齐
 */
function _addCustomizedArrow(shape, attrs, x1, y1, x2, y2, isStart) {
    var startArrow = attrs.startArrow, endArrow = attrs.endArrow, stroke = attrs.stroke, lineWidth = attrs.lineWidth;
    var arrowAttrs = isStart ? startArrow : endArrow;
    var d = arrowAttrs.d, arrowFill = arrowAttrs.fill, arrowStroke = arrowAttrs.stroke, arrowLineWidth = arrowAttrs.lineWidth, restAttrs = __rest(arrowAttrs, ["d", "fill", "stroke", "lineWidth"]);
    var x = x1 - x2;
    var y = y1 - y2;
    var rad = atan2$1(y, x);
    if (d) {
        x2 = x2 - cos$1(rad) * d;
        y2 = y2 - sin$1(rad) * d;
    }
    var arrowShape = new Path$1({
        type: 'path',
        canvas: shape.get('canvas'),
        isArrowShape: true,
        attrs: __assign(__assign({}, restAttrs), { 
            // 支持单独设置箭头的 stroke 和 lineWidth，若为空则使用 shape 的值
            stroke: arrowStroke || stroke, lineWidth: arrowLineWidth || lineWidth, 
            // 箭头是否填充需要手动设置，不会继承自 shape 的值
            fill: arrowFill }),
    });
    arrowShape.translate(x2, y2);
    arrowShape.rotateAtPoint(x2, y2, rad);
    shape.set(isStart ? 'startArrowShape' : 'endArrowShape', arrowShape);
}
/**
 * 如果自定义箭头并且有 d 需要做偏移，如果直接画，线条会超出箭头尖端，因此需要根据箭头偏移 d, 返回线需要缩短的距离
 * |----------------
 * |<|--------------
 * |
 * @param {number} x1 起始点 x
 * @param {number} y1 起始点 y
 * @param {number} x2 箭头作用点 x
 * @param {number} y2 箭头作用点 y
 * @param {number} d  箭头沿线条方向的偏移距离
 * @return {{dx: number, dy: number}} 返回线条偏移距离
 */
function getShortenOffset(x1, y1, x2, y2, d) {
    var rad = atan2$1(y2 - y1, x2 - x1);
    return {
        dx: cos$1(rad) * d,
        dy: sin$1(rad) * d,
    };
}
/**
 * 绘制起始箭头
 * @param {IShape} shape 图形
 * @param {ShapeAttrs} attrs shape 的绘图属性
 * @param {number} x1 起始点 x
 * @param {number} y1 起始点 y
 * @param {number} x2 箭头作用点 x
 * @param {number} y2 箭头作用点 y
 */
function addStartArrow(shape, attrs, x1, y1, x2, y2) {
    if (typeof attrs.startArrow === 'object') {
        _addCustomizedArrow(shape, attrs, x1, y1, x2, y2, true);
    }
    else if (attrs.startArrow) {
        _addDefaultArrow(shape, attrs, x1, y1, x2, y2, true);
    }
    else {
        shape.set('startArrowShape', null);
    }
}
/**
 * 绘制结束箭头
 * @param {IShape} shape 图形
 * @param {ShapeAttrs} attrs shape 的绘图属性
 * @param {number} x1 起始点 x
 * @param {number} y1 起始点 y
 * @param {number} x2 箭头作用点 x
 * @param {number} y2 箭头作用点 y
 */
function addEndArrow(shape, attrs, x1, y1, x2, y2) {
    if (typeof attrs.endArrow === 'object') {
        _addCustomizedArrow(shape, attrs, x1, y1, x2, y2, false);
    }
    else if (attrs.endArrow) {
        _addDefaultArrow(shape, attrs, x1, y1, x2, y2, false);
    }
    else {
        shape.set('startArrowShape', null);
    }
}

var SHAPE_ATTRS_MAP$1 = {
    fill: 'fillStyle',
    stroke: 'strokeStyle',
    opacity: 'globalAlpha',
};
function applyAttrsToContext(context, element) {
    var attrs = element.attr();
    for (var k in attrs) {
        var v = attrs[k];
        // 转换一下不与 canvas 兼容的属性名
        var name_1 = SHAPE_ATTRS_MAP$1[k] ? SHAPE_ATTRS_MAP$1[k] : k;
        if (name_1 === 'matrix' && v) {
            // 设置矩阵
            context.transform(v[0], v[1], v[3], v[4], v[6], v[7]);
        }
        else if (name_1 === 'lineDash' && context.setLineDash) {
            // 设置虚线，只支持数组形式，非数组形式不做任何操作
            isArray$2(v) && context.setLineDash(v);
        }
        else {
            if (name_1 === 'strokeStyle' || name_1 === 'fillStyle') {
                // 如果存在渐变、pattern 这个开销有些大
                // 可以考虑缓存机制，通过 hasUpdate 来避免一些运算
                v = parseStyle(context, element, v);
            }
            else if (name_1 === 'globalAlpha') {
                // opacity 效果可以叠加，子元素的 opacity 需要与父元素 opacity 相乘
                v = v * context.globalAlpha;
            }
            context[name_1] = v;
        }
    }
}
function drawChildren(context, children, region) {
    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        if (child.cfg.visible) {
            child.draw(context, region);
        }
        else {
            child.skipDraw();
        }
    }
}
// 这个地方的逻辑比较复杂，简单画了一张图：https://www.yuque.com/antv/ou292n/pcgt5g#OW1QE
function checkRefresh(canvas, children, region) {
    var refreshElements = canvas.get('refreshElements');
    // 先遍历需要刷新的元素，将这些元素的父元素也设置 refresh
    each(refreshElements, function (el) {
        if (el !== canvas) {
            var parent_1 = el.cfg.parent;
            while (parent_1 && parent_1 !== canvas && !parent_1.cfg.refresh) {
                parent_1.cfg.refresh = true;
                parent_1 = parent_1.cfg.parent;
            }
        }
    });
    if (refreshElements[0] === canvas) {
        setChildrenRefresh(children);
    }
    else {
        // 检查所有子元素是否可以刷新
        checkChildrenRefresh(children, region);
    }
}
// 检查所有的子元素是否应该更新
function checkChildrenRefresh(children, region) {
    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        if (child.cfg.visible) {
            // 先判断 hasChanged，因为它的优先级判断应该高于 refresh
            if (child.cfg.hasChanged) {
                // 如果节点发生了 change，则需要级联设置子元素的 refresh
                child.cfg.refresh = true;
                if (child.isGroup()) {
                    setChildrenRefresh(child.cfg.children);
                }
            }
            else if (child.cfg.refresh) {
                // 如果当前图形/分组 refresh = true，说明其子节点存在 changed
                if (child.isGroup()) {
                    checkChildrenRefresh(child.cfg.children, region);
                }
            }
            else {
                // 这个分支说明此次局部刷新，所有的节点和父元素没有发生变化，仅需要检查包围盒（缓存）是否相交即可
                var refresh = checkElementRefresh(child, region);
                child.cfg.refresh = refresh;
                if (refresh && child.isGroup()) {
                    // 如果需要刷新，说明子元素也需要刷新，继续进行判定
                    checkChildrenRefresh(child.cfg.children, region);
                }
            }
        }
    }
}
// 由于对改变的图形放入 refreshElements 时做了优化，判定父元素 changed 时不加入
// 那么有可能会出现 elements 都为空，所以最终 group
function clearChanged(elements) {
    for (var i = 0; i < elements.length; i++) {
        var el = elements[i];
        el.cfg.hasChanged = false;
        // 级联清理
        if (el.isGroup() && !el.destroyed) {
            clearChanged(el.cfg.children);
        }
    }
}
// 当某个父元素发生改变时，调用这个方法级联设置 refresh
function setChildrenRefresh(children, region) {
    for (var i = 0; i < children.length; i++) {
        var child = children[i];
        if (!child.cfg.visible) {
            continue;
        }
        // let refresh = true;
        // 获取缓存的 bbox，如果这个 bbox 还存在则说明父元素不是矩阵发生了改变
        // const bbox = child.cfg.canvasBBox;
        // if (bbox) {
        //   // 如果这时候
        //   refresh = intersectRect(bbox, region);
        // }
        child.cfg.refresh = true;
        // 如果需要刷新当前节点，所有的子元素设置 refresh
        if (child.isGroup()) {
            setChildrenRefresh(child.get('children'));
        }
    }
}
function checkElementRefresh(shape, region) {
    var bbox = shape.cfg.cacheCanvasBBox;
    var isAllow = shape.cfg.isInView && bbox && intersectRect(bbox, region);
    return isAllow;
}
// 绘制 path
function drawPath(shape, context, attrs, arcParamsCache) {
    var path = attrs.path, startArrow = attrs.startArrow, endArrow = attrs.endArrow;
    if (!path) {
        return;
    }
    var currentPoint = [0, 0]; // 当前图形
    var startMovePoint = [0, 0]; // 开始 M 的点，可能会有多个
    var distance = {
        dx: 0,
        dy: 0,
    };
    context.beginPath();
    for (var i = 0; i < path.length; i++) {
        var params = path[i];
        var command = params[0];
        if (i === 0 && startArrow && startArrow.d) {
            var tangent = shape.getStartTangent();
            distance = getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], startArrow.d);
        }
        else if (i === path.length - 2 && path[i + 1][0] === 'Z' && endArrow && endArrow.d) {
            // 为了防止结尾为 Z 的 segment 缩短不起效，需要取最后两个 segment 特殊处理
            var lastPath = path[i + 1];
            if (lastPath[0] === 'Z') {
                var tangent = shape.getEndTangent();
                distance = getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], endArrow.d);
            }
        }
        else if (i === path.length - 1 && endArrow && endArrow.d) {
            if (path[0] !== 'Z') {
                var tangent = shape.getEndTangent();
                distance = getShortenOffset(tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1], endArrow.d);
            }
        }
        var dx = distance.dx, dy = distance.dy;
        // V,H,S,T 都在前面被转换成标准形式
        switch (command) {
            case 'M':
                context.moveTo(params[1] - dx, params[2] - dy);
                startMovePoint = [params[1], params[2]];
                break;
            case 'L':
                context.lineTo(params[1] - dx, params[2] - dy);
                break;
            case 'Q':
                context.quadraticCurveTo(params[1], params[2], params[3] - dx, params[4] - dy);
                break;
            case 'C':
                context.bezierCurveTo(params[1], params[2], params[3], params[4], params[5] - dx, params[6] - dy);
                break;
            case 'A': {
                var arcParams = void 0;
                // 为了加速绘制，可以提供参数的缓存，各个图形自己缓存
                if (arcParamsCache) {
                    arcParams = arcParamsCache[i];
                    if (!arcParams) {
                        arcParams = getArcParams(currentPoint, params);
                        arcParamsCache[i] = arcParams;
                    }
                }
                else {
                    arcParams = getArcParams(currentPoint, params);
                }
                var cx = arcParams.cx, cy = arcParams.cy, rx = arcParams.rx, ry = arcParams.ry, startAngle = arcParams.startAngle, endAngle = arcParams.endAngle, xRotation = arcParams.xRotation, sweepFlag = arcParams.sweepFlag;
                // 直接使用椭圆的 api
                if (context.ellipse) {
                    context.ellipse(cx, cy, rx, ry, xRotation, startAngle, endAngle, 1 - sweepFlag);
                }
                else {
                    var r = rx > ry ? rx : ry;
                    var scaleX = rx > ry ? 1 : rx / ry;
                    var scaleY = rx > ry ? ry / rx : 1;
                    context.translate(cx, cy);
                    context.rotate(xRotation);
                    context.scale(scaleX, scaleY);
                    context.arc(0, 0, r, startAngle, endAngle, 1 - sweepFlag);
                    context.scale(1 / scaleX, 1 / scaleY);
                    context.rotate(-xRotation);
                    context.translate(-cx, -cy);
                }
                break;
            }
            case 'Z':
                context.closePath();
                break;
        }
        // 有了 Z 后，当前节点从开始 M 的点开始
        if (command === 'Z') {
            currentPoint = startMovePoint;
        }
        else {
            var len = params.length;
            currentPoint = [params[len - 2], params[len - 1]];
        }
    }
}
// 刷新图形元素(Shape 或者 Group)
function refreshElement(element, changeType) {
    var canvas = element.get('canvas');
    // 只有存在于 canvas 上时生效
    if (canvas) {
        if (changeType === 'remove') {
            // 一旦 remove，则无法在 element 上拿到包围盒
            // destroy 后所有属性都拿不到，所以需要暂存一下
            // 这是一段 hack 的代码
            element._cacheCanvasBBox = element.get('cacheCanvasBBox');
        }
        // 防止反复刷新
        if (!element.get('hasChanged')) {
            // 但是始终要标记为 hasChanged，便于后面进行局部渲染
            element.set('hasChanged', true);
            // 本来只有局部渲染模式下，才需要记录更新的元素队列
            // if (canvas.get('localRefresh')) {
            //   canvas.refreshElement(element, changeType, canvas);
            // }
            // 但对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也需要记录更新的元素队列
            // 如果当前元素的父元素发生了改变，可以不放入队列，这句话大概能够提升 15% 的初次渲染性能
            if (!(element.cfg.parent && element.cfg.parent.get('hasChanged'))) {
                canvas.refreshElement(element, changeType, canvas);
                if (canvas.get('autoDraw')) {
                    canvas.draw();
                }
            }
        }
    }
}
function getRefreshRegion(element) {
    var region;
    if (!element.destroyed) {
        var cacheBox = element.get('cacheCanvasBBox');
        var validCache = cacheBox && !!(cacheBox.width && cacheBox.height);
        var bbox = element.getCanvasBBox();
        var validBBox = bbox && !!(bbox.width && bbox.height);
        // 是否是有效 bbox 判定，一些 NaN 或者 宽高为 0 的情况过滤掉
        if (validCache && validBBox) {
            region = mergeRegion(cacheBox, bbox);
        }
        else if (validCache) {
            region = cacheBox;
        }
        else if (validBBox) {
            region = bbox;
        }
    }
    else {
        // 因为元素已经销毁所以无法获取到缓存的包围盒
        region = element['_cacheCanvasBBox'];
    }
    return region;
}
function getMergedRegion(elements) {
    if (!elements.length) {
        return null;
    }
    var minXArr = [];
    var minYArr = [];
    var maxXArr = [];
    var maxYArr = [];
    each(elements, function (el) {
        var region = getRefreshRegion(el);
        if (region) {
            minXArr.push(region.minX);
            minYArr.push(region.minY);
            maxXArr.push(region.maxX);
            maxYArr.push(region.maxY);
        }
    });
    return {
        minX: min$2(minXArr),
        minY: min$2(minYArr),
        maxX: max$2(maxXArr),
        maxY: max$2(maxYArr),
    };
}
function mergeView(region, viewRegion) {
    if (!region || !viewRegion) {
        return null;
    }
    // 不相交，则直接返回 null
    if (!intersectRect(region, viewRegion)) {
        return null;
    }
    return {
        minX: Math.max(region.minX, viewRegion.minX),
        minY: Math.max(region.minY, viewRegion.minY),
        maxX: Math.min(region.maxX, viewRegion.maxX),
        maxY: Math.min(region.maxY, viewRegion.maxY),
    };
}

var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 一些方法调用会引起画布变化
     * @param {ChangeType} changeType 改变的类型
     */
    Group.prototype.onCanvasChange = function (changeType) {
        refreshElement(this, changeType);
    };
    Group.prototype.getShapeBase = function () {
        return Shape;
    };
    Group.prototype.getGroupBase = function () {
        return Group;
    };
    // 同 shape 中的方法重复了
    Group.prototype._applyClip = function (context, clip) {
        if (clip) {
            context.save();
            // 将 clip 的属性挂载到 context 上
            applyAttrsToContext(context, clip);
            // 绘制 clip 路径
            clip.createPath(context);
            context.restore();
            // 裁剪
            context.clip();
            clip._afterDraw();
        }
    };
    // 这个方法以前直接使用的 getCanvasBBox，由于 group 上没有缓存，所以每次重新计算，导致性能开销比较大
    // 大概能够节省全局渲染 15-20% 的性能，如果不在这里加缓存优化后 10W 个节点无法达到 5-6 ms，大概能够 30-40ms
    Group.prototype.cacheCanvasBBox = function () {
        var children = this.cfg.children;
        var xArr = [];
        var yArr = [];
        each(children, function (child) {
            var bbox = child.cfg.cacheCanvasBBox;
            // isInview 的判定是一旦图形或者分组渲染就要计算是否在视图内，
            // 这个判定 10W 个图形下差不多能够节省 5-6 ms 的开销
            if (bbox && child.cfg.isInView) {
                xArr.push(bbox.minX, bbox.maxX);
                yArr.push(bbox.minY, bbox.maxY);
            }
        });
        var bbox = null;
        if (xArr.length) {
            var minX = min$2(xArr);
            var maxX = max$2(xArr);
            var minY = min$2(yArr);
            var maxY = max$2(yArr);
            bbox = {
                minX: minX,
                minY: minY,
                x: minX,
                y: minY,
                maxX: maxX,
                maxY: maxY,
                width: maxX - minX,
                height: maxY - minY,
            };
            var canvas = this.cfg.canvas;
            if (canvas) {
                var viewRange = canvas.getViewRange();
                // 如果这个地方判定 isInView == false 设置 bbox 为 false 的话，拾取的性能会更高
                // 但是目前 10W 图形的拾取在 2-5ms 内，这个优化意义不大，可以后期观察再看
                this.set('isInView', intersectRect(bbox, viewRange));
            }
        }
        else {
            this.set('isInView', false);
        }
        this.set('cacheCanvasBBox', bbox);
    };
    Group.prototype.draw = function (context, region) {
        var children = this.cfg.children;
        var allowDraw = region ? this.cfg.refresh : true; // 局部刷新需要判定
        // 这个地方需要判定，在 G6 的场景每个 group 都有 transform 的场景下性能会开销非常大
        // 通过 refresh 的判定，可以不刷新没有发生过变化的分组，不在视窗内的分组等等
        // 如果想进一步提升局部渲染性能，可以进一步优化 refresh 的判定，依然有潜力
        if (children.length && allowDraw) {
            context.save();
            // group 上的矩阵和属性也会应用到上下文上
            // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响
            applyAttrsToContext(context, this);
            this._applyClip(context, this.getClip());
            drawChildren(context, children, region);
            context.restore();
            this.cacheCanvasBBox();
        }
        // 这里的成本比较大，如果不绘制则不再
        // this.set('cacheCanvasBBox', this.getCanvasBBox());
        this.cfg.refresh = null;
        // 绘制后，消除更新标记
        this.set('hasChanged', false);
    };
    // 绘制时被跳过，一般发生在分组隐藏时
    Group.prototype.skipDraw = function () {
        this.set('cacheCanvasBBox', null);
        this.set('hasChanged', false);
    };
    return Group;
}(AbstractGroup));

var ShapeBase = /** @class */ (function (_super) {
    __extends(ShapeBase, _super);
    function ShapeBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShapeBase.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        // 设置默认值
        return __assign(__assign({}, attrs), { lineWidth: 1, lineAppendWidth: 0, strokeOpacity: 1, fillOpacity: 1 });
    };
    ShapeBase.prototype.getShapeBase = function () {
        return Shape;
    };
    ShapeBase.prototype.getGroupBase = function () {
        return Group;
    };
    /**
     * 一些方法调用会引起画布变化
     * @param {ChangeType} changeType 改变的类型
     */
    ShapeBase.prototype.onCanvasChange = function (changeType) {
        refreshElement(this, changeType);
    };
    ShapeBase.prototype.calculateBBox = function () {
        var type = this.get('type');
        var lineWidth = this.getHitLineWidth();
        // const attrs = this.attr();
        var bboxMethod = getMethod(type);
        var box = bboxMethod(this);
        var halfLineWidth = lineWidth / 2;
        var minX = box.x - halfLineWidth;
        var minY = box.y - halfLineWidth;
        var maxX = box.x + box.width + halfLineWidth;
        var maxY = box.y + box.height + halfLineWidth;
        return {
            x: minX,
            minX: minX,
            y: minY,
            minY: minY,
            width: box.width + lineWidth,
            height: box.height + lineWidth,
            maxX: maxX,
            maxY: maxY,
        };
    };
    ShapeBase.prototype.isFill = function () {
        return !!this.attrs['fill'] || this.isClipShape();
    };
    ShapeBase.prototype.isStroke = function () {
        return !!this.attrs['stroke'];
    };
    // 同 shape 中的方法重复了
    ShapeBase.prototype._applyClip = function (context, clip) {
        if (clip) {
            context.save();
            // 将 clip 的属性挂载到 context 上
            applyAttrsToContext(context, clip);
            // 绘制 clip 路径
            clip.createPath(context);
            context.restore();
            // 裁剪
            context.clip();
            clip._afterDraw();
        }
    };
    // 绘制图形时需要考虑 region 限制
    ShapeBase.prototype.draw = function (context, region) {
        var clip = this.cfg.clipShape;
        // 如果指定了 region，同时不允许刷新时，直接返回
        if (region) {
            if (this.cfg.refresh === false) {
                // this._afterDraw();
                this.set('hasChanged', false);
                return;
            }
            // 是否相交需要考虑 clip 的包围盒
            var bbox = this.getCanvasBBox();
            if (!intersectRect(region, bbox)) {
                // 图形的包围盒与重绘区域不相交时，也需要清除标记
                this.set('hasChanged', false);
                // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定
                // 1. 之前图形在视窗内，但是现在不再视窗内
                // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素
                if (this.cfg.isInView) {
                    this._afterDraw();
                }
                return;
            }
        }
        context.save();
        // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响
        applyAttrsToContext(context, this);
        this._applyClip(context, clip);
        this.drawPath(context);
        context.restore();
        this._afterDraw();
    };
    ShapeBase.prototype.getCanvasViewBox = function () {
        var canvas = this.cfg.canvas;
        if (canvas) {
            // @ts-ignore
            return canvas.getViewRange();
        }
        return null;
    };
    ShapeBase.prototype.cacheCanvasBBox = function () {
        var canvasBBox = this.getCanvasViewBox();
        // 绘制的时候缓存包围盒
        if (canvasBBox) {
            var bbox = this.getCanvasBBox();
            var isInView = intersectRect(bbox, canvasBBox);
            this.set('isInView', isInView);
            // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，
            // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒
            // 父元素 cacheCanvasBBox 计算的时候也不计算
            if (isInView) {
                this.set('cacheCanvasBBox', bbox);
            }
            else {
                this.set('cacheCanvasBBox', null);
            }
        }
    };
    ShapeBase.prototype._afterDraw = function () {
        this.cacheCanvasBBox();
        // 绘制后消除标记
        this.set('hasChanged', false);
        this.set('refresh', null);
    };
    ShapeBase.prototype.skipDraw = function () {
        this.set('cacheCanvasBBox', null);
        this.set('isInView', null);
        this.set('hasChanged', false);
    };
    /**
     * 绘制图形的路径
     * @param {CanvasRenderingContext2D} context 上下文
     */
    ShapeBase.prototype.drawPath = function (context) {
        this.createPath(context);
        this.strokeAndFill(context);
        this.afterDrawPath(context);
    };
    /**
     * @protected
     * 填充图形
     * @param {CanvasRenderingContext2D} context context 上下文
     */
    ShapeBase.prototype.fill = function (context) {
        context.fill();
    };
    /**
     * @protected
     * 绘制图形边框
     * @param {CanvasRenderingContext2D} context context 上下文
     */
    ShapeBase.prototype.stroke = function (context) {
        context.stroke();
    };
    // 绘制或者填充
    ShapeBase.prototype.strokeAndFill = function (context) {
        var _a = this.attrs, lineWidth = _a.lineWidth, opacity = _a.opacity, strokeOpacity = _a.strokeOpacity, fillOpacity = _a.fillOpacity;
        if (this.isFill()) {
            if (!isNil$1(fillOpacity) && fillOpacity !== 1) {
                context.globalAlpha = fillOpacity;
                this.fill(context);
                context.globalAlpha = opacity;
            }
            else {
                this.fill(context);
            }
        }
        if (this.isStroke()) {
            if (lineWidth > 0) {
                if (!isNil$1(strokeOpacity) && strokeOpacity !== 1) {
                    context.globalAlpha = strokeOpacity;
                }
                this.stroke(context);
            }
        }
        this.afterDrawPath(context);
    };
    /**
     * @protected
     * 绘制图形的路径
     * @param {CanvasRenderingContext2D} context 上下文
     */
    ShapeBase.prototype.createPath = function (context) { };
    /**
     * 绘制完成 path 后的操作
     * @param {CanvasRenderingContext2D} context 上下文
     */
    ShapeBase.prototype.afterDrawPath = function (context) { };
    ShapeBase.prototype.isInShape = function (refX, refY) {
        // return HitUtil.isHitShape(this, refX, refY);
        var isStroke = this.isStroke();
        var isFill = this.isFill();
        var lineWidth = this.getHitLineWidth();
        return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);
    };
    // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算
    ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        return false;
    };
    /**
     * 获取线拾取的宽度
     * @returns {number} 线的拾取宽度
     */
    ShapeBase.prototype.getHitLineWidth = function () {
        if (!this.isStroke()) {
            return 0;
        }
        var attrs = this.attrs;
        return attrs['lineWidth'] + attrs['lineAppendWidth'];
    };
    return ShapeBase;
}(AbstractShape));
var ShapeBase$1 = ShapeBase;

/**
 * @fileoverview 圆
 * @author dxq613@gmail.com
 */
var Circle = /** @class */ (function (_super) {
    __extends(Circle, _super);
    function Circle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Circle.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { x: 0, y: 0, r: 0 });
    };
    Circle.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        var attrs = this.attr();
        var cx = attrs.x;
        var cy = attrs.y;
        var r = attrs.r;
        var halfLineWidth = lineWidth / 2;
        var absDistance = distance(cx, cy, x, y);
        // 直接用距离，如果同时存在边和填充时，可以减少两次计算
        if (isFill && isStroke) {
            return absDistance <= r + halfLineWidth;
        }
        if (isFill) {
            return absDistance <= r;
        }
        if (isStroke) {
            return absDistance >= r - halfLineWidth && absDistance <= r + halfLineWidth;
        }
        return false;
    };
    Circle.prototype.createPath = function (context) {
        var attrs = this.attr();
        var cx = attrs.x;
        var cy = attrs.y;
        var r = attrs.r;
        context.beginPath();
        context.arc(cx, cy, r, 0, Math.PI * 2, false);
        context.closePath();
    };
    return Circle;
}(ShapeBase$1));
var Circle$1 = Circle;

/**
 * @fileoverview 椭圆
 * @author dxq613@gmail.com
 */
// 根据椭圆公式计算 x*x/rx*rx + y*y/ry*ry;
function ellipseDistance(squareX, squareY, rx, ry) {
    return squareX / (rx * rx) + squareY / (ry * ry);
}
var Ellipse = /** @class */ (function (_super) {
    __extends(Ellipse, _super);
    function Ellipse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ellipse.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { x: 0, y: 0, rx: 0, ry: 0 });
    };
    Ellipse.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        var attrs = this.attr();
        var halfLineWith = lineWidth / 2;
        var cx = attrs.x;
        var cy = attrs.y;
        var rx = attrs.rx, ry = attrs.ry;
        var squareX = (x - cx) * (x - cx);
        var squareY = (y - cy) * (y - cy);
        // 使用椭圆的公式： x*x/rx*rx + y*y/ry*ry = 1;
        if (isFill && isStroke) {
            return ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1;
        }
        if (isFill) {
            return ellipseDistance(squareX, squareY, rx, ry) <= 1;
        }
        if (isStroke) {
            return (ellipseDistance(squareX, squareY, rx - halfLineWith, ry - halfLineWith) >= 1 &&
                ellipseDistance(squareX, squareY, rx + halfLineWith, ry + halfLineWith) <= 1);
        }
        return false;
    };
    Ellipse.prototype.createPath = function (context) {
        var attrs = this.attr();
        var cx = attrs.x;
        var cy = attrs.y;
        var rx = attrs.rx;
        var ry = attrs.ry;
        context.beginPath();
        // 兼容逻辑
        if (context.ellipse) {
            context.ellipse(cx, cy, rx, ry, 0, 0, Math.PI * 2, false);
        }
        else {
            // 如果不支持，则使用圆来绘制，进行变形
            var r = rx > ry ? rx : ry;
            var scaleX = rx > ry ? 1 : rx / ry;
            var scaleY = rx > ry ? ry / rx : 1;
            context.save();
            context.translate(cx, cy);
            context.scale(scaleX, scaleY);
            context.arc(0, 0, r, 0, Math.PI * 2);
            context.restore();
            context.closePath();
        }
    };
    return Ellipse;
}(ShapeBase$1));
var Ellipse$1 = Ellipse;

/**
 * @fileoverview 图片
 * @author dxq613@gmail.com
 */
function isCanvas(dom) {
    return dom instanceof HTMLElement && isString$1(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';
}
var ImageShape = /** @class */ (function (_super) {
    __extends(ImageShape, _super);
    function ImageShape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageShape.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { x: 0, y: 0, width: 0, height: 0 });
    };
    ImageShape.prototype.initAttrs = function (attrs) {
        this._setImage(attrs.img);
    };
    // image 不计算 stroke
    ImageShape.prototype.isStroke = function () {
        return false;
    };
    // 仅仅使用包围盒检测来进行拾取
    // 所以不需要复写 isInStrokeOrPath 的方法
    ImageShape.prototype.isOnlyHitBox = function () {
        return true;
    };
    ImageShape.prototype._afterLoading = function () {
        if (this.get('toDraw') === true) {
            var canvas = this.get('canvas');
            if (canvas) {
                // 这段应该改成局部渲染
                canvas.draw();
            }
            else {
                // 这种方式如果发生遮挡会出现问题
                this.createPath(this.get('context'));
            }
        }
    };
    ImageShape.prototype._setImage = function (img) {
        var _this = this;
        var attrs = this.attrs;
        if (isString$1(img)) {
            var image_1 = new Image();
            image_1.onload = function () {
                // 图片未加载完，则已经被销毁
                if (_this.destroyed) {
                    return false;
                }
                // 缓存原始地址，可以做对比，防止重复加载图片
                // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂
                // this.set('imgSrc', img);
                // 这里会循环调用 _setImage 方法，但不会再走这个分支
                _this.attr('img', image_1);
                _this.set('loading', false);
                _this._afterLoading();
                var callback = _this.get('callback');
                if (callback) {
                    callback.call(_this);
                }
            };
            // 设置跨域
            image_1.crossOrigin = 'Anonymous';
            image_1.src = img;
            // loading 过程中不绘制
            this.set('loading', true);
        }
        else if (img instanceof Image) {
            // 如果是一个 image 对象，则设置宽高
            if (!attrs.width) {
                attrs.width = img.width;
            }
            if (!attrs.height) {
                attrs.height = img.height;
            }
        }
        else if (isCanvas(img)) {
            // 如果设置了 canvas 对象
            if (!attrs.width) {
                attrs.width = Number(img.getAttribute('width'));
            }
            if (!attrs.height) {
                attrs.height, Number(img.getAttribute('height'));
            }
        }
    };
    ImageShape.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        // 如果加载的已经是当前图片，则不再处理
        if (name === 'img') {
            // 可以加缓冲，&& this.get('imgSrc') !== value
            this._setImage(value);
        }
    };
    ImageShape.prototype.createPath = function (context) {
        // 正在加载则不绘制
        if (this.get('loading')) {
            this.set('toDraw', true); // 加载完成后绘制
            this.set('context', context);
            return;
        }
        var attrs = this.attr();
        var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height, sx = attrs.sx, sy = attrs.sy, swidth = attrs.swidth, sheight = attrs.sheight;
        var img = attrs.img;
        if (img instanceof Image || isCanvas(img)) {
            if (!isNil$1(sx) && !isNil$1(sy) && !isNil$1(swidth) && !isNil$1(sheight)) {
                context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);
            }
            else {
                context.drawImage(img, x, y, width, height);
            }
        }
    };
    return ImageShape;
}(ShapeBase$1));
var ImageShape$1 = ImageShape;

function inLine(x1, y1, x2, y2, lineWidth, x, y) {
    var minX = Math.min(x1, x2);
    var maxX = Math.max(x1, x2);
    var minY = Math.min(y1, y2);
    var maxY = Math.max(y1, y2);
    var halfWidth = lineWidth / 2;
    // 因为目前的方案是计算点到直线的距离，而有可能会在延长线上，所以要先判断是否在包围盒内
    // 这种方案会在水平或者竖直的情况下载线的延长线上有半 lineWidth 的误差
    if (!(x >= minX - halfWidth && x <= maxX + halfWidth && y >= minY - halfWidth && y <= maxY + halfWidth)) {
        return false;
    }
    // 因为已经计算了包围盒，所以仅需要计算到直线的距离即可，可以显著提升性能
    return LineUtil.pointToLine(x1, y1, x2, y2, x, y) <= lineWidth / 2;
}

var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    function Line() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Line.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { x1: 0, y1: 0, x2: 0, y2: 0, startArrow: false, endArrow: false });
    };
    Line.prototype.initAttrs = function (attrs) {
        this.setArrow();
    };
    // 更新属性时，检测是否更改了箭头
    Line.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        // 由于箭头的绘制依赖于 line 的诸多 attrs，因此这里不再对每个 attr 进行判断，attr 每次变化都会影响箭头的更新
        this.setArrow();
    };
    Line.prototype.setArrow = function () {
        var attrs = this.attr();
        var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2, startArrow = attrs.startArrow, endArrow = attrs.endArrow;
        if (startArrow) {
            addStartArrow(this, attrs, x2, y2, x1, y1);
        }
        if (endArrow) {
            addEndArrow(this, attrs, x1, y1, x2, y2);
        }
    };
    Line.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        if (!isStroke || !lineWidth) {
            return false;
        }
        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
        return inLine(x1, y1, x2, y2, lineWidth, x, y);
    };
    Line.prototype.createPath = function (context) {
        var attrs = this.attr();
        var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2, startArrow = attrs.startArrow, endArrow = attrs.endArrow;
        var startArrowDistance = {
            dx: 0,
            dy: 0,
        };
        var endArrowDistance = {
            dx: 0,
            dy: 0,
        };
        if (startArrow && startArrow.d) {
            startArrowDistance = getShortenOffset(x1, y1, x2, y2, attrs.startArrow.d);
        }
        if (endArrow && endArrow.d) {
            endArrowDistance = getShortenOffset(x1, y1, x2, y2, attrs.endArrow.d);
        }
        context.beginPath();
        // 如果自定义箭头，线条相应缩进
        context.moveTo(x1 + startArrowDistance.dx, y1 + startArrowDistance.dy);
        context.lineTo(x2 - endArrowDistance.dx, y2 - endArrowDistance.dy);
    };
    Line.prototype.afterDrawPath = function (context) {
        var startArrowShape = this.get('startArrowShape');
        var endArrowShape = this.get('endArrowShape');
        if (startArrowShape) {
            startArrowShape.draw(context);
        }
        if (endArrowShape) {
            endArrowShape.draw(context);
        }
    };
    /**
     * Get length of line
     * @return {number} length
     */
    Line.prototype.getTotalLength = function () {
        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
        return LineUtil.length(x1, y1, x2, y2);
    };
    /**
     * Get point according to ratio
     * @param {number} ratio
     * @return {Point} point
     */
    Line.prototype.getPoint = function (ratio) {
        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;
        return LineUtil.pointAt(x1, y1, x2, y2, ratio);
    };
    return Line;
}(ShapeBase$1));
var Line$1 = Line;

/**
 * @fileoverview Marker
 * @author dxq613@gmail.com
 */
var Symbols = {
    // 圆
    circle: function (x, y, r) {
        return [
            ['M', x - r, y],
            ['A', r, r, 0, 1, 0, x + r, y],
            ['A', r, r, 0, 1, 0, x - r, y],
        ];
    },
    // 正方形
    square: function (x, y, r) {
        return [['M', x - r, y - r], ['L', x + r, y - r], ['L', x + r, y + r], ['L', x - r, y + r], ['Z']];
    },
    // 菱形
    diamond: function (x, y, r) {
        return [['M', x - r, y], ['L', x, y - r], ['L', x + r, y], ['L', x, y + r], ['Z']];
    },
    // 三角形
    triangle: function (x, y, r) {
        var diffY = r * Math.sin((1 / 3) * Math.PI);
        return [['M', x - r, y + diffY], ['L', x, y - diffY], ['L', x + r, y + diffY], ['Z']];
    },
    // 倒三角形
    'triangle-down': function (x, y, r) {
        var diffY = r * Math.sin((1 / 3) * Math.PI);
        return [['M', x - r, y - diffY], ['L', x + r, y - diffY], ['L', x, y + diffY], ['Z']];
    },
};
var Marker = /** @class */ (function (_super) {
    __extends(Marker, _super);
    function Marker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Marker.prototype.initAttrs = function (attrs) {
        this._resetParamsCache();
    };
    // 重置绘制 path 存储的缓存
    Marker.prototype._resetParamsCache = function () {
        // 为了加速 path 的绘制、拾取和计算，这个地方可以缓存很多东西
        // 这些缓存都是第一次需要时计算和存储，虽然增加了复杂度，但是频繁调用的方法，性能有很大提升
        this.set('paramsCache', {}); // 清理缓存
    };
    // 更新属性时，检测是否更改了 path
    Marker.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        if (['symbol', 'x', 'y', 'r', 'radius'].indexOf(name) !== -1) {
            // path 相关属性更改时，清理缓存
            this._resetParamsCache();
        }
    };
    // 仅仅使用包围盒检测来进行拾取
    // 所以不需要复写 isInStrokeOrPath 的方法
    Marker.prototype.isOnlyHitBox = function () {
        return true;
    };
    Marker.prototype._getR = function (attrs) {
        // 兼容 r 和 radius 两种写法，推荐使用 r
        return isNil$1(attrs.r) ? attrs.radius : attrs.r;
    };
    Marker.prototype._getPath = function () {
        var attrs = this.attr();
        var x = attrs.x, y = attrs.y;
        var symbol = attrs.symbol || 'circle';
        var r = this._getR(attrs);
        var method;
        var path;
        if (isFunction$1(symbol)) {
            method = symbol;
            path = method(x, y, r);
            // 将 path 转成绝对路径
            path = pathToAbsolute(path);
        }
        else {
            // 内置 symbol 的 path 都是绝对路径，直接绘制即可，不需要对 path 进行特殊处理
            method = Marker.Symbols[symbol];
            if (!method) {
                console.warn(symbol + " marker is not supported.");
                return null;
            }
            path = method(x, y, r);
        }
        return path;
    };
    Marker.prototype.createPath = function (context) {
        var path = this._getPath();
        var paramsCache = this.get('paramsCache');
        drawPath(this, context, { path: path }, paramsCache);
    };
    Marker.Symbols = Symbols;
    return Marker;
}(ShapeBase$1));
var Marker$1 = Marker;

function isPointInPath(shape, x, y) {
    var ctx = getOffScreenContext();
    shape.createPath(ctx);
    return ctx.isPointInPath(x, y);
}

/**
 * @fileoverview 判断点是否在多边形内
 * @author dxq613@gmail.com
 */
// 多边形的射线检测，参考：https://blog.csdn.net/WilliamSun0122/article/details/77994526
var tolerance = 1e-6;
// 三态函数，判断两个double在eps精度下的大小关系
function dcmp(x) {
    if (Math.abs(x) < tolerance) {
        return 0;
    }
    return x < 0 ? -1 : 1;
}
// 判断点Q是否在p1和p2的线段上
function onSegment(p1, p2, q) {
    if ((q[0] - p1[0]) * (p2[1] - p1[1]) === (p2[0] - p1[0]) * (q[1] - p1[1]) &&
        Math.min(p1[0], p2[0]) <= q[0] &&
        q[0] <= Math.max(p1[0], p2[0]) &&
        Math.min(p1[1], p2[1]) <= q[1] &&
        q[1] <= Math.max(p1[1], p2[1])) {
        return true;
    }
    return false;
}
// 判断点P在多边形内-射线法
function isInPolygon(points, x, y) {
    var isHit = false;
    var n = points.length;
    if (n <= 2) {
        // svg 中点小于 3 个时，不显示，也无法被拾取
        return false;
    }
    for (var i = 0; i < n; i++) {
        var p1 = points[i];
        var p2 = points[(i + 1) % n];
        if (onSegment(p1, p2, [x, y])) {
            // 点在多边形一条边上
            return true;
        }
        // 前一个判断min(p1[1],p2[1])<P.y<=max(p1[1],p2[1])
        // 后一个判断被测点 在 射线与边交点 的左边
        if (dcmp(p1[1] - y) > 0 !== dcmp(p2[1] - y) > 0 &&
            dcmp(x - ((y - p1[1]) * (p1[0] - p2[0])) / (p1[1] - p2[1]) - p1[0]) < 0) {
            isHit = !isHit;
        }
    }
    return isHit;
}

function arc(cx, cy, r, startAngle, endAngle, lineWidth, x, y) {
    var angle = (Math.atan2(y - cy, x - cx) + Math.PI * 2) % (Math.PI * 2); // 转换到 0 - 2 * Math.PI 之间
    if (angle < startAngle || angle > endAngle) {
        return false;
    }
    var point = {
        x: cx + r * Math.cos(angle),
        y: cy + r * Math.sin(angle),
    };
    return distance(point.x, point.y, x, y) <= lineWidth / 2;
}

var transform$1 = transform$3;
function hasArc(path) {
    var hasArc = false;
    var count = path.length;
    for (var i = 0; i < count; i++) {
        var params = path[i];
        var cmd = params[0];
        if (cmd === 'C' || cmd === 'A' || cmd === 'Q') {
            hasArc = true;
            break;
        }
    }
    return hasArc;
}
function isPointInStroke(segments, lineWidth, x, y, length) {
    var isHit = false;
    var halfWidth = lineWidth / 2;
    for (var i = 0; i < segments.length; i++) {
        var segment = segments[i];
        var currentPoint = segment.currentPoint, params = segment.params, prePoint = segment.prePoint, box = segment.box;
        // 如果在前面已经生成过包围盒，直接按照包围盒计算
        if (box && !inBox(box.x - halfWidth, box.y - halfWidth, box.width + lineWidth, box.height + lineWidth, x, y)) {
            continue;
        }
        switch (segment.command) {
            // L 和 Z 都是直线， M 不进行拾取
            case 'L':
            case 'Z':
                isHit = inLine(prePoint[0], prePoint[1], currentPoint[0], currentPoint[1], lineWidth, x, y);
                break;
            case 'Q':
                var qDistance = QuadUtil.pointDistance(prePoint[0], prePoint[1], params[1], params[2], params[3], params[4], x, y);
                isHit = qDistance <= lineWidth / 2;
                break;
            case 'C':
                var cDistance = CubicUtil.pointDistance(prePoint[0], // 上一段结束位置, 即 C 的起始点
                prePoint[1], params[1], // 'C' 的参数，1、2 为第一个控制点，3、4 为第二个控制点，5、6 为结束点
                params[2], params[3], params[4], params[5], params[6], x, y, length);
                isHit = cDistance <= lineWidth / 2;
                break;
            case 'A':
                // 计算点到椭圆圆弧的距离，暂时使用近似算法，后面可以改成切割法求最近距离
                var arcParams = segment.arcParams;
                var cx = arcParams.cx, cy = arcParams.cy, rx = arcParams.rx, ry = arcParams.ry, startAngle = arcParams.startAngle, endAngle = arcParams.endAngle, xRotation = arcParams.xRotation;
                var p = [x, y, 1];
                var r = rx > ry ? rx : ry;
                var scaleX = rx > ry ? 1 : rx / ry;
                var scaleY = rx > ry ? ry / rx : 1;
                var m = transform$1(null, [
                    ['t', -cx, -cy],
                    ['r', -xRotation],
                    ['s', 1 / scaleX, 1 / scaleY],
                ]);
                transformMat3(p, p, m);
                isHit = arc(0, 0, r, startAngle, endAngle, lineWidth, p[0], p[1]);
                break;
        }
        if (isHit) {
            break;
        }
    }
    return isHit;
}
/**
 * 提取出内部的闭合多边形和非闭合的多边形，假设 path 不存在圆弧
 * @param {Array} path 路径
 * @returns {Array} 点的集合
 */
function extractPolygons(path) {
    var count = path.length;
    var polygons = [];
    var polylines = [];
    var points = []; // 防止第一个命令不是 'M'
    for (var i = 0; i < count; i++) {
        var params = path[i];
        var cmd = params[0];
        if (cmd === 'M') {
            // 遇到 'M' 判定是否是新数组，新数组中没有点
            if (points.length) {
                // 如果存在点，则说明没有遇到 'Z'，开始了一个新的多边形
                polylines.push(points);
                points = []; // 创建新的点
            }
            points.push([params[1], params[2]]);
        }
        else if (cmd === 'Z') {
            if (points.length) {
                // 存在点
                polygons.push(points);
                points = []; // 开始新的点集合
            }
            // 如果不存在点，同时 'Z'，则说明是错误，不处理
        }
        else {
            points.push([params[1], params[2]]);
        }
    }
    // 说明 points 未放入 polygons 或者 polyline
    // 仅当只有一个 M，没有 Z 时会发生这种情况
    if (points.length > 0) {
        polylines.push(points);
    }
    return {
        polygons: polygons,
        polylines: polylines,
    };
}
var PathUtil = __assign({ hasArc: hasArc,
    extractPolygons: extractPolygons,
    isPointInStroke: isPointInStroke }, PathUtil$1);

// 是否在多个多边形内部
function isInPolygons(polygons, x, y) {
    var isHit = false;
    for (var i = 0; i < polygons.length; i++) {
        var points = polygons[i];
        isHit = isInPolygon(points, x, y);
        if (isHit) {
            break;
        }
    }
    return isHit;
}
var Path = /** @class */ (function (_super) {
    __extends(Path, _super);
    function Path() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Path.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { startArrow: false, endArrow: false });
    };
    Path.prototype.initAttrs = function (attrs) {
        this._setPathArr(attrs.path);
        this.setArrow();
    };
    // 更新属性时，检测是否更改了 path
    Path.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        if (name === 'path') {
            this._setPathArr(value);
        }
        // 由于箭头的绘制依赖于 line 的诸多 attrs，因此这里不再对每个 attr 进行判断，attr 每次变化都会影响箭头的更新
        this.setArrow();
    };
    // 将 path 转换成绝对路径
    Path.prototype._setPathArr = function (path) {
        // 转换 path 的格式
        this.attrs.path = pathToAbsolute(path);
        var hasArc = PathUtil.hasArc(path);
        // 为了加速 path 的绘制、拾取和计算，这个地方可以缓存很多东西
        // 这些缓存都是第一次需要时计算和存储，虽然增加了复杂度，但是频繁调用的方法，性能有很大提升
        this.set('hasArc', hasArc);
        this.set('paramsCache', {}); // 清理缓存
        this.set('segments', null); // 延迟生成 path，在动画场景下可能不会有拾取
        this.set('curve', null);
        this.set('tCache', null);
        this.set('totalLength', null);
    };
    Path.prototype.getSegments = function () {
        var segments = this.get('segements');
        if (!segments) {
            segments = getSegments(this.attr('path'));
            this.set('segments', segments);
        }
        return segments;
    };
    Path.prototype.setArrow = function () {
        var attrs = this.attr();
        var startArrow = attrs.startArrow, endArrow = attrs.endArrow;
        if (startArrow) {
            var tangent = this.getStartTangent();
            addStartArrow(this, attrs, tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1]);
        }
        if (endArrow) {
            var tangent = this.getEndTangent();
            addEndArrow(this, attrs, tangent[0][0], tangent[0][1], tangent[1][0], tangent[1][1]);
        }
    };
    Path.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        var segments = this.getSegments();
        var hasArc = this.get('hasArc');
        var isHit = false;
        if (isStroke) {
            var length_1 = this.getTotalLength();
            isHit = PathUtil.isPointInStroke(segments, lineWidth, x, y, length_1);
        }
        if (!isHit && isFill) {
            if (hasArc) {
                // 存在曲线时，暂时使用 canvas 的 api 计算，后续可以进行多边形切割
                isHit = isPointInPath(this, x, y);
            }
            else {
                var path = this.attr('path');
                var extractResutl = PathUtil.extractPolygons(path);
                // 提取出来的多边形包含闭合的和非闭合的，在这里统一按照多边形处理
                isHit = isInPolygons(extractResutl.polygons, x, y) || isInPolygons(extractResutl.polylines, x, y);
            }
        }
        return isHit;
    };
    Path.prototype.createPath = function (context) {
        var attrs = this.attr();
        var paramsCache = this.get('paramsCache'); // 由于计算圆弧的参数成本很大，所以要缓存
        drawPath(this, context, attrs, paramsCache);
    };
    Path.prototype.afterDrawPath = function (context) {
        var startArrowShape = this.get('startArrowShape');
        var endArrowShape = this.get('endArrowShape');
        if (startArrowShape) {
            startArrowShape.draw(context);
        }
        if (endArrowShape) {
            endArrowShape.draw(context);
        }
    };
    /**
     * Get total length of path
     * @return {number} length
     */
    Path.prototype.getTotalLength = function () {
        var totalLength = this.get('totalLength');
        if (!isNil$1(totalLength)) {
            return totalLength;
        }
        this._calculateCurve();
        this._setTcache();
        return this.get('totalLength');
    };
    /**
     * Get point according to ratio
     * @param {number} ratio
     * @return {Point} point
     */
    Path.prototype.getPoint = function (ratio) {
        var tCache = this.get('tCache');
        if (!tCache) {
            this._calculateCurve();
            this._setTcache();
            tCache = this.get('tCache');
        }
        var subt;
        var index;
        var curve = this.get('curve');
        if (!tCache || tCache.length === 0) {
            if (curve) {
                return {
                    x: curve[0][1],
                    y: curve[0][2],
                };
            }
            return null;
        }
        each(tCache, function (v, i) {
            if (ratio >= v[0] && ratio <= v[1]) {
                subt = (ratio - v[0]) / (v[1] - v[0]);
                index = i;
            }
        });
        var seg = curve[index];
        if (isNil$1(seg) || isNil$1(index)) {
            return null;
        }
        var l = seg.length;
        var nextSeg = curve[index + 1];
        return CubicUtil.pointAt(seg[l - 2], seg[l - 1], nextSeg[1], nextSeg[2], nextSeg[3], nextSeg[4], nextSeg[5], nextSeg[6], subt);
    };
    Path.prototype._calculateCurve = function () {
        var path = this.attr().path;
        this.set('curve', PathUtil.pathToCurve(path));
    };
    Path.prototype._setTcache = function () {
        var totalLength = 0;
        var tempLength = 0;
        // 每段 curve 对应起止点的长度比例列表，形如: [[0, 0.25], [0.25, 0.6]. [0.6, 0.9], [0.9, 1]]
        var tCache = [];
        var segmentT;
        var segmentL;
        var segmentN;
        var l;
        var curve = this.get('curve');
        if (!curve) {
            return;
        }
        each(curve, function (segment, i) {
            segmentN = curve[i + 1];
            l = segment.length;
            if (segmentN) {
                totalLength +=
                    CubicUtil.length(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]) || 0;
            }
        });
        this.set('totalLength', totalLength);
        if (totalLength === 0) {
            this.set('tCache', []);
            return;
        }
        each(curve, function (segment, i) {
            segmentN = curve[i + 1];
            l = segment.length;
            if (segmentN) {
                segmentT = [];
                segmentT[0] = tempLength / totalLength;
                segmentL = CubicUtil.length(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
                // 当 path 不连续时，segmentL 可能为空，为空时需要作为 0 处理
                tempLength += segmentL || 0;
                segmentT[1] = tempLength / totalLength;
                tCache.push(segmentT);
            }
        });
        this.set('tCache', tCache);
    };
    /**
     * Get start tangent vector
     * @return {Array}
     */
    Path.prototype.getStartTangent = function () {
        var segments = this.getSegments();
        var result;
        if (segments.length > 1) {
            var startPoint = segments[0].currentPoint;
            var endPoint = segments[1].currentPoint;
            var tangent = segments[1].startTangent;
            result = [];
            if (tangent) {
                result.push([startPoint[0] - tangent[0], startPoint[1] - tangent[1]]);
                result.push([startPoint[0], startPoint[1]]);
            }
            else {
                result.push([endPoint[0], endPoint[1]]);
                result.push([startPoint[0], startPoint[1]]);
            }
        }
        return result;
    };
    /**
     * Get end tangent vector
     * @return {Array}
     */
    Path.prototype.getEndTangent = function () {
        var segments = this.getSegments();
        var length = segments.length;
        var result;
        if (length > 1) {
            var startPoint = segments[length - 2].currentPoint;
            var endPoint = segments[length - 1].currentPoint;
            var tangent = segments[length - 1].endTangent;
            result = [];
            if (tangent) {
                result.push([endPoint[0] - tangent[0], endPoint[1] - tangent[1]]);
                result.push([endPoint[0], endPoint[1]]);
            }
            else {
                result.push([startPoint[0], startPoint[1]]);
                result.push([endPoint[0], endPoint[1]]);
            }
        }
        return result;
    };
    return Path;
}(ShapeBase$1));
var Path$1 = Path;

function inPolyline(points, lineWidth, x, y, isClose) {
    var count = points.length;
    if (count < 2) {
        return false;
    }
    for (var i = 0; i < count - 1; i++) {
        var x1 = points[i][0];
        var y1 = points[i][1];
        var x2 = points[i + 1][0];
        var y2 = points[i + 1][1];
        if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {
            return true;
        }
    }
    // 如果封闭，则计算起始点和结束点的边
    if (isClose) {
        var first = points[0];
        var last = points[count - 1];
        if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {
            return true;
        }
    }
    return false;
}

/**
 * @fileoverview 多边形
 * @author dxq613@gmail.com
 */
var Polygon = /** @class */ (function (_super) {
    __extends(Polygon, _super);
    function Polygon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Polygon.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        var points = this.attr().points;
        var isHit = false;
        if (isStroke) {
            isHit = inPolyline(points, lineWidth, x, y, true);
        }
        if (!isHit && isFill) {
            isHit = isInPolygon(points, x, y); // isPointInPath(shape, x, y);
        }
        return isHit;
    };
    Polygon.prototype.createPath = function (context) {
        var attrs = this.attr();
        var points = attrs.points;
        if (points.length < 2) {
            return;
        }
        context.beginPath();
        for (var i = 0; i < points.length; i++) {
            var point = points[i];
            if (i === 0) {
                context.moveTo(point[0], point[1]);
            }
            else {
                context.lineTo(point[0], point[1]);
            }
        }
        context.closePath();
    };
    return Polygon;
}(ShapeBase$1));
var Polygon$1 = Polygon;

var PolyLine = /** @class */ (function (_super) {
    __extends(PolyLine, _super);
    function PolyLine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PolyLine.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { startArrow: false, endArrow: false });
    };
    PolyLine.prototype.initAttrs = function (attrs) {
        this.setArrow();
    };
    // 更新属性时，检测是否更改了 points
    PolyLine.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        this.setArrow();
        if (['points'].indexOf(name) !== -1) {
            this._resetCache();
        }
    };
    PolyLine.prototype._resetCache = function () {
        this.set('totalLength', null);
        this.set('tCache', null);
    };
    PolyLine.prototype.setArrow = function () {
        var attrs = this.attr();
        var _a = this.attrs, points = _a.points, startArrow = _a.startArrow, endArrow = _a.endArrow;
        var length = points.length;
        var x1 = points[0][0];
        var y1 = points[0][1];
        var x2 = points[length - 1][0];
        var y2 = points[length - 1][1];
        if (startArrow) {
            addStartArrow(this, attrs, points[1][0], points[1][1], x1, y1);
        }
        if (endArrow) {
            addEndArrow(this, attrs, points[length - 2][0], points[length - 2][1], x2, y2);
        }
    };
    // 不允许 fill
    PolyLine.prototype.isFill = function () {
        return false;
    };
    PolyLine.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        // 没有设置 stroke 不能被拾取, 没有线宽不能被拾取
        if (!isStroke || !lineWidth) {
            return false;
        }
        var points = this.attr().points;
        return inPolyline(points, lineWidth, x, y, false);
    };
    // 始终填充
    PolyLine.prototype.isStroke = function () {
        return true;
    };
    PolyLine.prototype.createPath = function (context) {
        var _a = this.attr(), points = _a.points, startArrow = _a.startArrow, endArrow = _a.endArrow;
        var length = points.length;
        if (points.length < 2) {
            return;
        }
        var x1 = points[0][0];
        var y1 = points[0][1];
        var x2 = points[length - 1][0];
        var y2 = points[length - 1][1];
        // 如果定义了箭头，并且是自定义箭头，线条相应缩进
        if (startArrow && startArrow.d) {
            var distance = getShortenOffset(x1, y1, points[1][0], points[1][1], startArrow.d);
            x1 += distance.dx;
            y1 += distance.dy;
        }
        if (endArrow && endArrow.d) {
            var distance = getShortenOffset(points[length - 2][0], points[length - 2][1], x2, y2, endArrow.d);
            x2 -= distance.dx;
            y2 -= distance.dy;
        }
        context.beginPath();
        context.moveTo(x1, y1);
        for (var i = 0; i < length - 1; i++) {
            var point = points[i];
            context.lineTo(point[0], point[1]);
        }
        context.lineTo(x2, y2);
    };
    PolyLine.prototype.afterDrawPath = function (context) {
        var startArrowShape = this.get('startArrowShape');
        var endArrowShape = this.get('endArrowShape');
        if (startArrowShape) {
            startArrowShape.draw(context);
        }
        if (endArrowShape) {
            endArrowShape.draw(context);
        }
    };
    /**
     * Get length of polyline
     * @return {number} length
     */
    PolyLine.prototype.getTotalLength = function () {
        var points = this.attr().points;
        // get totalLength from cache
        var totalLength = this.get('totalLength');
        if (!isNil$1(totalLength)) {
            return totalLength;
        }
        this.set('totalLength', PolylineUtil.length(points));
        return this.get('totalLength');
    };
    /**
     * Get point according to ratio
     * @param {number} ratio
     * @return {Point} point
     */
    PolyLine.prototype.getPoint = function (ratio) {
        var points = this.attr().points;
        // get tCache from cache
        var tCache = this.get('tCache');
        if (!tCache) {
            this._setTcache();
            tCache = this.get('tCache');
        }
        var subt;
        var index;
        each(tCache, function (v, i) {
            if (ratio >= v[0] && ratio <= v[1]) {
                subt = (ratio - v[0]) / (v[1] - v[0]);
                index = i;
            }
        });
        return LineUtil.pointAt(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt);
    };
    PolyLine.prototype._setTcache = function () {
        var points = this.attr().points;
        if (!points || points.length === 0) {
            return;
        }
        var totalLength = this.getTotalLength();
        if (totalLength <= 0) {
            return;
        }
        var tempLength = 0;
        var tCache = [];
        var segmentT;
        var segmentL;
        each(points, function (p, i) {
            if (points[i + 1]) {
                segmentT = [];
                segmentT[0] = tempLength / totalLength;
                segmentL = LineUtil.length(p[0], p[1], points[i + 1][0], points[i + 1][1]);
                tempLength += segmentL;
                segmentT[1] = tempLength / totalLength;
                tCache.push(segmentT);
            }
        });
        this.set('tCache', tCache);
    };
    /**
     * Get start tangent vector
     * @return {Array}
     */
    PolyLine.prototype.getStartTangent = function () {
        var points = this.attr().points;
        var result = [];
        result.push([points[1][0], points[1][1]]);
        result.push([points[0][0], points[0][1]]);
        return result;
    };
    /**
     * Get end tangent vector
     * @return {Array}
     */
    PolyLine.prototype.getEndTangent = function () {
        var points = this.attr().points;
        var l = points.length - 1;
        var result = [];
        result.push([points[l - 1][0], points[l - 1][1]]);
        result.push([points[l][0], points[l][1]]);
        return result;
    };
    return PolyLine;
}(ShapeBase$1));
var PolyLine$1 = PolyLine;

function inRect(minX, minY, width, height, lineWidth, x, y) {
    var halfWidth = lineWidth / 2;
    // 将四个边看做矩形来检测，比边的检测算法要快
    return (inBox(minX - halfWidth, minY - halfWidth, width, lineWidth, x, y) || // 上边
        inBox(minX + width - halfWidth, minY - halfWidth, lineWidth, height, x, y) || // 右边
        inBox(minX + halfWidth, minY + height - halfWidth, width, lineWidth, x, y) || // 下边
        inBox(minX - halfWidth, minY + halfWidth, lineWidth, height, x, y)); // 左边
}

function rectWithRadius(minX, minY, width, height, radius, lineWidth, x, y) {
    return (inLine(minX + radius, minY, minX + width - radius, minY, lineWidth, x, y) ||
        inLine(minX + width, minY + radius, minX + width, minY + height - radius, lineWidth, x, y) ||
        inLine(minX + width - radius, minY + height, minX + radius, minY + height, lineWidth, x, y) ||
        inLine(minX, minY + height - radius, minX, minY + radius, lineWidth, x, y) ||
        arc(minX + width - radius, minY + radius, radius, 1.5 * Math.PI, 2 * Math.PI, lineWidth, x, y) ||
        arc(minX + width - radius, minY + height - radius, radius, 0, 0.5 * Math.PI, lineWidth, x, y) ||
        arc(minX + radius, minY + height - radius, radius, 0.5 * Math.PI, Math.PI, lineWidth, x, y) ||
        arc(minX + radius, minY + radius, radius, Math.PI, 1.5 * Math.PI, lineWidth, x, y));
}

/**
 * @fileoverview 矩形
 * @author dxq613@gmail.com
 */
var Rect = /** @class */ (function (_super) {
    __extends(Rect, _super);
    function Rect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rect.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { x: 0, y: 0, width: 0, height: 0, radius: 0 });
    };
    Rect.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {
        var attrs = this.attr();
        var minX = attrs.x;
        var minY = attrs.y;
        var width = attrs.width;
        var height = attrs.height;
        var radius = attrs.radius;
        // 无圆角时的策略
        if (!radius) {
            var halfWidth = lineWidth / 2;
            // 同时填充和带有边框
            if (isFill && isStroke) {
                return inBox(minX - halfWidth, minY - halfWidth, width + halfWidth, height + halfWidth, x, y);
            }
            // 仅填充
            if (isFill) {
                return inBox(minX, minY, width, height, x, y);
            }
            if (isStroke) {
                return inRect(minX, minY, width, height, lineWidth, x, y);
            }
        }
        else {
            var isHit = false;
            if (isStroke) {
                isHit = rectWithRadius(minX, minY, width, height, radius, lineWidth, x, y);
            }
            // 仅填充时带有圆角的矩形直接通过图形拾取
            // 以后可以改成纯数学的近似拾取，将圆弧切割成多边形
            if (!isHit && isFill) {
                isHit = isPointInPath(this, x, y);
            }
            return isHit;
        }
    };
    Rect.prototype.createPath = function (context) {
        var attrs = this.attr();
        var x = attrs.x;
        var y = attrs.y;
        var width = attrs.width;
        var height = attrs.height;
        var radius = attrs.radius;
        context.beginPath();
        if (radius === 0) {
            // 改成原生的rect方法
            context.rect(x, y, width, height);
        }
        else {
            var _a = parseRadius(radius), r1 = _a[0], r2 = _a[1], r3 = _a[2], r4 = _a[3];
            context.moveTo(x + r1, y);
            context.lineTo(x + width - r2, y);
            r2 !== 0 && context.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
            context.lineTo(x + width, y + height - r3);
            r3 !== 0 && context.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
            context.lineTo(x + r4, y + height);
            r4 !== 0 && context.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
            context.lineTo(x, y + r1);
            r1 !== 0 && context.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
            context.closePath();
        }
    };
    return Rect;
}(ShapeBase$1));
var Rect$1 = Rect;

/**
 * @fileoverview 文本
 * @author dxq613@gmail.com
 */
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // 默认文本属性
    Text.prototype.getDefaultAttrs = function () {
        var attrs = _super.prototype.getDefaultAttrs.call(this);
        return __assign(__assign({}, attrs), { x: 0, y: 0, text: null, fontSize: 12, fontFamily: 'sans-serif', fontStyle: 'normal', fontWeight: 'normal', fontVariant: 'normal', textAlign: 'start', textBaseline: 'bottom' });
    };
    // 仅仅使用包围盒检测来进行拾取
    Text.prototype.isOnlyHitBox = function () {
        return true;
    };
    // 初始化时组合 font，同时判断 text 是否换行
    Text.prototype.initAttrs = function (attrs) {
        this._assembleFont();
        if (attrs.text) {
            this._setText(attrs.text);
        }
    };
    // 组装字体
    Text.prototype._assembleFont = function () {
        var attrs = this.attrs;
        attrs.font = assembleFont(attrs);
    };
    // 如果文本换行，则缓存数组
    Text.prototype._setText = function (text) {
        var textArr = null;
        if (isString$1(text) && text.indexOf('\n') !== -1) {
            textArr = text.split('\n');
        }
        this.set('textArr', textArr);
    };
    // 更新属性时，检测是否更改了 font、text
    Text.prototype.onAttrChange = function (name, value, originValue) {
        _super.prototype.onAttrChange.call(this, name, value, originValue);
        if (name.startsWith('font')) {
            this._assembleFont();
        }
        if (name === 'text') {
            this._setText(value);
        }
    };
    // 这个方法在 text 时没有可以做的事情，如果要支持文字背景时可以考虑
    // createPath(context) {
    // }
    // 如果文本多行，需要获取文本间距
    Text.prototype._getSpaceingY = function () {
        var attrs = this.attrs;
        var lineHeight = attrs.lineHeight;
        var fontSize = attrs.fontSize * 1;
        return lineHeight ? lineHeight - fontSize : fontSize * 0.14;
    };
    // 绘制文本，考虑多行的场景
    Text.prototype._drawTextArr = function (context, textArr, isFill) {
        var attrs = this.attrs;
        var textBaseline = attrs.textBaseline;
        var x = attrs.x;
        var y = attrs.y;
        var fontSize = attrs.fontSize * 1;
        var spaceingY = this._getSpaceingY();
        var height = getTextHeight(attrs.text, attrs.fontSize, attrs.lineHeight);
        var subY;
        each(textArr, function (subText, index) {
            subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
            if (textBaseline === 'middle')
                subY += height - fontSize - (height - fontSize) / 2;
            if (textBaseline === 'top')
                subY += height - fontSize;
            if (!isNil$1(subText)) {
                if (isFill) {
                    context.fillText(subText, x, subY);
                }
                else {
                    context.strokeText(subText, x, subY);
                }
            }
        });
    };
    // 绘制文本，同时考虑填充和绘制边框
    Text.prototype._drawText = function (context, isFill) {
        var attrs = this.attr();
        var x = attrs.x;
        var y = attrs.y;
        var textArr = this.get('textArr');
        if (textArr) {
            this._drawTextArr(context, textArr, isFill);
        }
        else {
            var text = attrs.text;
            if (!isNil$1(text)) {
                if (isFill) {
                    context.fillText(text, x, y);
                }
                else {
                    context.strokeText(text, x, y);
                }
            }
        }
    };
    // 复写绘制和填充的逻辑：对于文本，应该先绘制边框，再进行填充
    Text.prototype.strokeAndFill = function (context) {
        var _a = this.attrs, lineWidth = _a.lineWidth, opacity = _a.opacity, strokeOpacity = _a.strokeOpacity, fillOpacity = _a.fillOpacity;
        if (this.isStroke()) {
            if (lineWidth > 0) {
                if (!isNil$1(strokeOpacity) && strokeOpacity !== 1) {
                    context.globalAlpha = opacity;
                }
                this.stroke(context);
            }
        }
        if (this.isFill()) {
            if (!isNil$1(fillOpacity) && fillOpacity !== 1) {
                context.globalAlpha = fillOpacity;
                this.fill(context);
                context.globalAlpha = opacity;
            }
            else {
                this.fill(context);
            }
        }
        this.afterDrawPath(context);
    };
    // 复写填充逻辑
    Text.prototype.fill = function (context) {
        this._drawText(context, true);
    };
    // 复写绘制边框的逻辑
    Text.prototype.stroke = function (context) {
        this._drawText(context, false);
    };
    return Text;
}(ShapeBase$1));
var Text$1 = Text;

function invertFromMatrix(v, matrix) {
    if (matrix) {
        var invertMatrix = invert$2(matrix);
        return multiplyVec2(invertMatrix, v);
    }
    return v;
}
function getRefXY(element, x, y) {
    // @ts-ignore
    var totalMatrix = element.getTotalMatrix();
    if (totalMatrix) {
        var _a = invertFromMatrix([x, y, 1], totalMatrix), refX = _a[0], refY = _a[1];
        return [refX, refY];
    }
    return [x, y];
}
// 拾取前的检测，只有通过检测才能继续拾取
function preTest(element, x, y) {
    // @ts-ignore
    if (element.isCanvas && element.isCanvas()) {
        return true;
    }
    // 不允许被拾取，则返回 null
    // @ts-ignore
    if (!isAllowCapture(element) || element.cfg.isInView === false) {
        return false;
    }
    if (element.cfg.clipShape) {
        // 如果存在 clip
        var _a = getRefXY(element, x, y), refX = _a[0], refY = _a[1];
        if (element.isClipped(refX, refY)) {
            return false;
        }
    }
    // @ts-ignore ，这个地方调用过于频繁
    var bbox = element.cfg.cacheCanvasBBox || element.getCanvasBBox();
    // 如果没有缓存 bbox，则说明不可见
    // 注释掉的这段可能会加速拾取，上面的语句改写成 const bbox = element.cfg.cacheCanvasBBox;
    // 这时候的拾取假设图形/分组在上一次绘制都在视窗内，但是上面已经判定了 isInView 所以意义不大
    // 现在还调用 element.getCanvasBBox(); 一个很大的原因是便于单元测试
    // if (!bbox) {
    //   return false;
    // }
    if (!(x >= bbox.minX && x <= bbox.maxX && y >= bbox.minY && y <= bbox.maxY)) {
        return false;
    }
    return true;
}
// 这个方法复写了 g-base 的 getShape
function getShape(container, x, y) {
    // 没有通过检测，则返回 null
    if (!preTest(container, x, y)) {
        return null;
    }
    var shape = null;
    var children = container.getChildren();
    var count = children.length;
    for (var i = count - 1; i >= 0; i--) {
        var child = children[i];
        if (child.isGroup()) {
            shape = getShape(child, x, y);
        }
        else if (preTest(child, x, y)) {
            var curShape = child;
            var _a = getRefXY(child, x, y), refX = _a[0], refY = _a[1];
            // @ts-ignore
            if (curShape.isInShape(refX, refY)) {
                shape = child;
            }
        }
        if (shape) {
            break;
        }
    }
    return shape;
}

var Canvas = /** @class */ (function (_super) {
    __extends(Canvas, _super);
    function Canvas() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Canvas.prototype.getDefaultCfg = function () {
        var cfg = _super.prototype.getDefaultCfg.call(this);
        // 设置渲染引擎为 canvas，只读属性
        cfg['renderer'] = 'canvas';
        // 是否自动绘制，不需要用户调用 draw 方法
        cfg['autoDraw'] = true;
        // 是否允许局部刷新图表
        cfg['localRefresh'] = true;
        cfg['refreshElements'] = [];
        // 是否在视图内自动裁剪
        cfg['clipView'] = true;
        // 是否使用快速拾取的方案，默认为 false，上层可以打开
        cfg['quickHit'] = false;
        return cfg;
    };
    /**
     * 一些方法调用会引起画布变化
     * @param {ChangeType} changeType 改变的类型
     */
    Canvas.prototype.onCanvasChange = function (changeType) {
        /**
         * 触发画布更新的三种 changeType
         * 1. attr: 修改画布的绘图属性
         * 2. sort: 画布排序，图形的层次会发生变化
         * 3. changeSize: 改变画布大小
         */
        if (changeType === 'attr' || changeType === 'sort' || changeType === 'changeSize') {
            this.set('refreshElements', [this]);
            this.draw();
        }
    };
    Canvas.prototype.getShapeBase = function () {
        return Shape;
    };
    Canvas.prototype.getGroupBase = function () {
        return Group;
    };
    /**
     * 获取屏幕像素比
     */
    Canvas.prototype.getPixelRatio = function () {
        var pixelRatio = this.get('pixelRatio') || getPixelRatio();
        // 不足 1 的取 1，超出 1 的取整
        return pixelRatio >= 1 ? Math.ceil(pixelRatio) : 1;
    };
    Canvas.prototype.getViewRange = function () {
        return {
            minX: 0,
            minY: 0,
            maxX: this.cfg.width,
            maxY: this.cfg.height,
        };
    };
    // 复写基类的方法生成标签
    Canvas.prototype.createDom = function () {
        var element = document.createElement('canvas');
        var context = element.getContext('2d');
        // 缓存 context 对象
        this.set('context', context);
        return element;
    };
    Canvas.prototype.setDOMSize = function (width, height) {
        _super.prototype.setDOMSize.call(this, width, height);
        var context = this.get('context');
        var el = this.get('el');
        var pixelRatio = this.getPixelRatio();
        el.width = pixelRatio * width;
        el.height = pixelRatio * height;
        // 设置 canvas 元素的宽度和高度，会重置缩放，因此 context.scale 需要在每次设置宽、高后调用
        if (pixelRatio > 1) {
            context.scale(pixelRatio, pixelRatio);
        }
    };
    // 复写基类方法
    Canvas.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this._clearFrame(); // 需要清理掉延迟绘制的帧
        var context = this.get('context');
        var element = this.get('el');
        context.clearRect(0, 0, element.width, element.height);
    };
    Canvas.prototype.getShape = function (x, y) {
        var shape;
        if (this.get('quickHit')) {
            shape = getShape(this, x, y);
        }
        else {
            shape = _super.prototype.getShape.call(this, x, y, null);
        }
        return shape;
    };
    // 对绘制区域边缘取整，避免浮点数问题
    Canvas.prototype._getRefreshRegion = function () {
        var elements = this.get('refreshElements');
        var viewRegion = this.getViewRange();
        var region;
        // 如果是当前画布整体发生了变化，则直接重绘整个画布
        if (elements.length && elements[0] === this) {
            region = viewRegion;
        }
        else {
            region = getMergedRegion(elements);
            if (region) {
                region.minX = Math.floor(region.minX);
                region.minY = Math.floor(region.minY);
                region.maxX = Math.ceil(region.maxX);
                region.maxY = Math.ceil(region.maxY);
                region.maxY += 1; // 在很多环境下字体的高低会不一致，附加一像素，避免残影
                var clipView = this.get('clipView');
                // 自动裁剪不在 view 内的区域
                if (clipView) {
                    region = mergeView(region, viewRegion);
                }
            }
        }
        return region;
    };
    /**
     * 刷新图形元素，这里仅仅是放入队列，下次绘制时进行绘制
     * @param {IElement} element 图形元素
     */
    Canvas.prototype.refreshElement = function (element) {
        var refreshElements = this.get('refreshElements');
        refreshElements.push(element);
        // if (this.get('autoDraw')) {
        //   this._startDraw();
        // }
    };
    // 清理还在进行的绘制
    Canvas.prototype._clearFrame = function () {
        var drawFrame = this.get('drawFrame');
        if (drawFrame) {
            // 如果全部渲染时，存在局部渲染，则抛弃掉局部渲染
            cancelAnimationFrame$1(drawFrame);
            this.set('drawFrame', null);
            this.set('refreshElements', []);
        }
    };
    // 手工调用绘制接口
    Canvas.prototype.draw = function () {
        var drawFrame = this.get('drawFrame');
        if (this.get('autoDraw') && drawFrame) {
            return;
        }
        this._startDraw();
    };
    // 绘制所有图形
    Canvas.prototype._drawAll = function () {
        var context = this.get('context');
        var element = this.get('el');
        var children = this.getChildren();
        context.clearRect(0, 0, element.width, element.height);
        applyAttrsToContext(context, this);
        drawChildren(context, children);
        // 对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也会记录更新的元素队列，因此全局渲染完后也需要置空
        this.set('refreshElements', []);
    };
    // 绘制局部
    Canvas.prototype._drawRegion = function () {
        var context = this.get('context');
        var refreshElements = this.get('refreshElements');
        var children = this.getChildren();
        var region = this._getRefreshRegion();
        // 需要注意可能没有 region 的场景
        // 一般发生在设置了 localRefresh ,在没有图形发生变化的情况下，用户调用了 draw
        if (region) {
            // 清理指定区域
            context.clearRect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);
            // 保存上下文，设置 clip
            context.save();
            context.beginPath();
            context.rect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);
            context.clip();
            applyAttrsToContext(context, this);
            // 确认更新的元素，这个优化可以提升 10 倍左右的性能，10W 个带有 group 的节点，局部渲染会从 90ms 下降到 5-6 ms
            checkRefresh(this, children, region);
            // 绘制子元素
            drawChildren(context, children, region);
            context.restore();
        }
        else if (refreshElements.length) {
            // 防止发生改变的 elements 没有 region 的场景，这会发生在多个情况下
            // 1. 空的 group
            // 2. 所有 elements 没有在绘图区域
            // 3. group 下面的 elements 隐藏掉
            // 如果不进行清理 hasChanged 的状态会不正确
            clearChanged(refreshElements);
        }
        each(refreshElements, function (element) {
            if (element.get('hasChanged')) {
                // 在视窗外的 Group 元素会加入到更新队列里，但实际却没有执行 draw() 逻辑，也就没有清除 hasChanged 标记
                // 即已经重绘完、但 hasChanged 标记没有清除的元素，需要统一清除掉。主要是 Group 存在问题，具体原因待排查
                element.set('hasChanged', false);
            }
        });
        this.set('refreshElements', []);
    };
    // 触发绘制
    Canvas.prototype._startDraw = function () {
        var _this = this;
        var drawFrame = this.get('drawFrame');
        if (!drawFrame) {
            drawFrame = requestAnimationFrame$1(function () {
                if (_this.get('localRefresh')) {
                    _this._drawRegion();
                }
                else {
                    _this._drawAll();
                }
                _this.set('drawFrame', null);
            });
            this.set('drawFrame', drawFrame);
        }
    };
    Canvas.prototype.skipDraw = function () { };
    Canvas.prototype.removeDom = function () {
        var el = this.get('el');
        // 需要清理 canvas 画布内容，否则ios下 创建的canvas垃圾未回收，导致Total canvas memory use exceeds问题
        // 相关问题列表
        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12
        // https://github.com/openlayers/openlayers/issues/9291
        el.width = 0;
        el.height = 0;
        el.parentNode.removeChild(el);
    };
    return Canvas;
}(Canvas$1));

// 值字段的 id 是固定的！
var VALUE_FIELD = '$$value$$';
var EXTRA_FIELD = '$$extra$$';
var ORIGIN_FIELD = '$$origin$$';
var EXTRA_COLUMN_FIELD = '$$extra_column$$';
var TOTAL_VALUE = '$$total$$';
var MULTI_VALUE = '$$multi$$';
var SERIES_NUMBER_FIELD = '$$series_number$$';
var EMPTY_FIELD_VALUE = '$$empty_field_value$$';
var EMPTY_EXTRA_FIELD_PLACEHOLDER = '$$empty_extra_placeholder$$';

var InteractionEvent;
(function (InteractionEvent) {
    InteractionEvent["DATA_CELL_CLICK_EVENT"] = "interaction:data-cell-click";
    InteractionEvent["MERGED_CELLS_CLICK_EVENT"] = "interaction:merged-cells-click";
    InteractionEvent["CORNER_TEXT_CLICK_EVENT"] = "interaction:corner-cell-text-click";
    InteractionEvent["ROW_COLUMN_CLICK_EVENT"] = "interaction:row-column-click";
    InteractionEvent["ROW_TEXT_CLICK_EVENT"] = "interaction:row-text-click";
    InteractionEvent["HOVER_EVENT"] = "interaction:hover";
    InteractionEvent["TREND_ICON_CLICK"] = "interaction:trend-icon-click";
})(InteractionEvent || (InteractionEvent = {}));

var OriginEventType;
(function (OriginEventType) {
    OriginEventType["MOUSE_DOWN"] = "mousedown";
    OriginEventType["MOUSE_MOVE"] = "mousemove";
    OriginEventType["MOUSE_OUT"] = "mouseout";
    OriginEventType["MOUSE_LEAVE"] = "mouseleave";
    OriginEventType["MOUSE_UP"] = "mouseup";
    OriginEventType["KEY_DOWN"] = "keydown";
    OriginEventType["KEY_UP"] = "keyup";
    OriginEventType["CLICK"] = "click";
    OriginEventType["HOVER"] = "hover";
    OriginEventType["DOUBLE_CLICK"] = "dblclick";
    OriginEventType["CONTEXT_MENU"] = "contextmenu";
})(OriginEventType || (OriginEventType = {}));

var S2Event;
(function (S2Event) {
    /** ================ Row Cell ================  */
    S2Event["ROW_CELL_HOVER"] = "row-cell:hover";
    S2Event["ROW_CELL_CLICK"] = "row-cell:click";
    S2Event["ROW_CELL_DOUBLE_CLICK"] = "row-cell:double-click";
    S2Event["ROW_CELL_CONTEXT_MENU"] = "row-cell:context-menu";
    S2Event["ROW_CELL_MOUSE_DOWN"] = "row-cell:mouse-down";
    S2Event["ROW_CELL_MOUSE_UP"] = "row-cell:mouse-up";
    S2Event["ROW_CELL_MOUSE_MOVE"] = "row-cell:mouse-move";
    S2Event["ROW_CELL_COLLAPSE_TREE_ROWS"] = "row-cell:collapsed-tree-rows";
    S2Event["ROW_CELL_SCROLL"] = "row-cell:scroll";
    S2Event["ROW_CELL_BRUSH_SELECTION"] = "row-cell:brush-selection";
    /** ================ Col Cell ================  */
    S2Event["COL_CELL_HOVER"] = "col-cell:hover";
    S2Event["COL_CELL_CLICK"] = "col-cell:click";
    S2Event["COL_CELL_DOUBLE_CLICK"] = "col-cell:double-click";
    S2Event["COL_CELL_CONTEXT_MENU"] = "col-cell:context-menu";
    S2Event["COL_CELL_MOUSE_DOWN"] = "col-cell:mouse-down";
    S2Event["COL_CELL_MOUSE_UP"] = "col-cell:mouse-up";
    S2Event["COL_CELL_MOUSE_MOVE"] = "col-cell:mouse-move";
    S2Event["COL_CELL_BRUSH_SELECTION"] = "col-cell:brush-selection";
    /** ================ Data Cell ================  */
    S2Event["DATA_CELL_HOVER"] = "data-cell:hover";
    S2Event["DATA_CELL_CLICK"] = "data-cell:click";
    S2Event["DATA_CELL_DOUBLE_CLICK"] = "data-cell:double-click";
    S2Event["DATA_CELL_CONTEXT_MENU"] = "data-cell:context-menu";
    S2Event["DATA_CELL_MOUSE_UP"] = "data-cell:mouse-up";
    S2Event["DATA_CELL_MOUSE_DOWN"] = "data-cell:mouse-down";
    S2Event["DATA_CELL_MOUSE_MOVE"] = "data-cell:mouse-move";
    S2Event["DATA_CELL_TREND_ICON_CLICK"] = "data-cell:trend-icon-click";
    S2Event["DATA_CELL_BRUSH_SELECTION"] = "data-cell:brush-selection";
    S2Event["DATA_CELL_SELECT_MOVE"] = "data-cell:select-move";
    /** ================ Corner Cell ================  */
    S2Event["CORNER_CELL_HOVER"] = "corner-cell:hover";
    S2Event["CORNER_CELL_CLICK"] = "corner-cell:click";
    S2Event["CORNER_CELL_DOUBLE_CLICK"] = "corner-cell:double-click";
    S2Event["CORNER_CELL_CONTEXT_MENU"] = "corner-cell:context-menu";
    S2Event["CORNER_CELL_MOUSE_DOWN"] = "corner-cell:mouse-down";
    S2Event["CORNER_CELL_MOUSE_UP"] = "corner-cell:mouse-up";
    S2Event["CORNER_CELL_MOUSE_MOVE"] = "corner-cell:mouse-move";
    /** ================ Merged Cells ================  */
    S2Event["MERGED_CELLS_HOVER"] = "merged-cells:hover";
    S2Event["MERGED_CELLS_CLICK"] = "merged-cells:click";
    S2Event["MERGED_CELLS_DOUBLE_CLICK"] = "merged-cells:double-click";
    S2Event["MERGED_CELLS_CONTEXT_MENU"] = "merged-cell:context-menu";
    S2Event["MERGED_CELLS_MOUSE_DOWN"] = "merged-cells:mouse-down";
    S2Event["MERGED_CELLS_MOUSE_UP"] = "merged-cells:mouse-up";
    S2Event["MERGED_CELLS_MOUSE_MOVE"] = "merged-cells:mouse-move";
    /** ================ Sort ================  */
    S2Event["RANGE_SORT"] = "sort:range-sort";
    S2Event["RANGE_SORTED"] = "sort:range-sorted";
    /** ================ Table Filter ================  */
    S2Event["RANGE_FILTER"] = "filter:range-filter";
    S2Event["RANGE_FILTERED"] = "filter:range-filtered";
    /** ================ Table Layout ================  */
    S2Event["LAYOUT_AFTER_HEADER_LAYOUT"] = "layout:after-header-layout";
    /** @deprecated 已废弃, 请使用 S2Event.GLOBAL_SCROLL 代替 */
    S2Event["LAYOUT_CELL_SCROLL"] = "layout:cell-scroll";
    S2Event["LAYOUT_PAGINATION"] = "layout:pagination";
    S2Event["LAYOUT_COLLAPSE_ROWS"] = "layout:collapsed-rows";
    S2Event["LAYOUT_AFTER_COLLAPSE_ROWS"] = "layout:after-collapsed-rows";
    S2Event["LAYOUT_AFTER_REAL_DATA_CELL_RENDER"] = "layout:after-real-data-cell-render";
    S2Event["LAYOUT_TREE_ROWS_COLLAPSE_ALL"] = "layout:toggle-collapse-all";
    S2Event["LAYOUT_COLS_EXPANDED"] = "layout:table-col-expanded";
    S2Event["LAYOUT_COLS_HIDDEN"] = "layout:table-col-hidden";
    S2Event["LAYOUT_AFTER_RENDER"] = "layout:after-render";
    S2Event["LAYOUT_BEFORE_RENDER"] = "layout:before-render";
    S2Event["LAYOUT_DESTROY"] = "layout:destroy";
    /** ================ Table Layout Resize ================  */
    S2Event["LAYOUT_RESIZE"] = "layout:resize";
    S2Event["LAYOUT_RESIZE_SERIES_WIDTH"] = "layout:resize-series-width";
    S2Event["LAYOUT_RESIZE_ROW_WIDTH"] = "layout:resize-row-width";
    S2Event["LAYOUT_RESIZE_ROW_HEIGHT"] = "layout:resize-row-height";
    S2Event["LAYOUT_RESIZE_COL_WIDTH"] = "layout:resize-column-width";
    S2Event["LAYOUT_RESIZE_COL_HEIGHT"] = "layout:resize-column-height";
    S2Event["LAYOUT_RESIZE_TREE_WIDTH"] = "layout:resize-tree-width";
    S2Event["LAYOUT_RESIZE_MOUSE_DOWN"] = "layout:resize:mouse-down";
    S2Event["LAYOUT_RESIZE_MOUSE_MOVE"] = "layout:resize:mouse-move";
    S2Event["LAYOUT_RESIZE_MOUSE_UP"] = "layout:resize-mouse-up";
    /** ================ Global ================  */
    S2Event["GLOBAL_KEYBOARD_DOWN"] = "global:keyboard-down";
    S2Event["GLOBAL_KEYBOARD_UP"] = "global:keyboard-up";
    S2Event["GLOBAL_COPIED"] = "global:copied";
    S2Event["GLOBAL_MOUSE_UP"] = "global:mouse-up";
    S2Event["GLOBAL_MOUSE_MOVE"] = "global:mouse-move";
    S2Event["GLOBAL_ACTION_ICON_CLICK"] = "global:action-icon-click";
    S2Event["GLOBAL_ACTION_ICON_HOVER"] = "global:action-icon-hover";
    S2Event["GLOBAL_ACTION_ICON_HOVER_OFF"] = "global:action-icon-hover-off";
    S2Event["GLOBAL_CONTEXT_MENU"] = "global:context-menu";
    S2Event["GLOBAL_CLICK"] = "global:click";
    S2Event["GLOBAL_DOUBLE_CLICK"] = "global:double-click";
    S2Event["GLOBAL_SELECTED"] = "global:selected";
    S2Event["GLOBAL_HOVER"] = "global:hover";
    S2Event["GLOBAL_RESET"] = "global:reset";
    S2Event["GLOBAL_LINK_FIELD_JUMP"] = "global:link-field-jump";
    S2Event["GLOBAL_SCROLL"] = "global:scroll";
})(S2Event || (S2Event = {}));

var BACK_GROUND_GROUP_CONTAINER_Z_INDEX = 0;
// foregroundGroup 上的 children 层叠顺序
var FRONT_GROUND_GROUP_CONTAINER_Z_INDEX = 3; // 约定这个 z-index 为 0 的 container 作为基准
var FRONT_GROUND_GROUP_SCROLL_Z_INDEX = 3;
var FRONT_GROUND_GROUP_FROZEN_Z_INDEX = 4;
var FRONT_GROUND_GROUP_RESIZE_AREA_Z_INDEX = 5;
var FRONT_GROUND_GROUP_BRUSH_SELECTION_Z_INDEX = 5;
// panelGroup 上的 children 层叠顺序
var PANEL_GROUP_GROUP_CONTAINER_Z_INDEX = 1;
var PANEL_GROUP_SCROLL_GROUP_Z_INDEX = 1;
var PANEL_GROUP_FROZEN_GROUP_Z_INDEX = 2;
var PANEL_GROUP_HOVER_BOX_GROUP_Z_INDEX = 1;
// group's key
var KEY_GROUP_BACK_GROUND = 'backGroundGroup';
var KEY_GROUP_FORE_GROUND = 'foreGroundGroup';
var KEY_GROUP_PANEL_GROUND = 'panelGroup';
var KEY_GROUP_PANEL_SCROLL = 'panelScrollGroup';
var KEY_GROUP_MERGED_CELLS = 'mergedCellsGroup';
var KEY_GROUP_PANEL_FROZEN_ROW = 'frozenRowGroup';
var KEY_GROUP_PANEL_FROZEN_COL = 'frozenColGroup';
var KEY_GROUP_PANEL_FROZEN_TRAILING_ROW = 'frozenTrailingRowGroup';
var KEY_GROUP_PANEL_FROZEN_TRAILING_COL = 'frozenTrailingColGroup';
var KEY_GROUP_PANEL_FROZEN_TOP = 'frozenTopGroup';
var KEY_GROUP_PANEL_FROZEN_BOTTOM = 'frozenBottomGroup';
var KEY_GROUP_ROW_RESIZE_AREA = 'rowResizeAreaGroup';
var KEY_GROUP_FROZEN_ROW_RESIZE_AREA = 'rowFrozenResizeAreaGroup';
var KEY_GROUP_FROZEN_SPLIT_LINE = 'frozenSplitLine';
var KEY_GROUP_ROW_INDEX_RESIZE_AREA = 'rowIndexResizeAreaGroup';
var KEY_GROUP_CORNER_RESIZE_AREA = 'cornerResizeAreaGroup';
var KEY_GROUP_COL_RESIZE_AREA = 'colResizeAreaGroup';
var KEY_GROUP_FROZEN_COL_RESIZE_AREA = 'colFrozenResizeAreaGroup';
var KEY_GROUP_COL_HORIZONTAL_RESIZE_AREA = 'colHorizontalResizeAreaGroup';
var KEY_GROUP_COL_SCROLL = 'colScrollGroup';
var KEY_GROUP_COL_FROZEN = 'colFrozenGroup';
var KEY_GROUP_COL_FROZEN_TRAILING = 'colFrozenTrailingGroup';
var KEY_GROUP_GRID_GROUP = 'gridGroup';
var KEY_GROUP_ROW_SCROLL = 'rowScrollGroup';
var KEY_GROUP_ROW_HEADER_FROZEN = 'rowHeaderFrozenGroup';
// key of series number node in corner header
var KEY_SERIES_NUMBER_NODE = 'series-number-node';
var HORIZONTAL_RESIZE_AREA_KEY_PRE = 'horizontal-resize-area-';
var TABLE_COL_HORIZONTAL_RESIZE_AREA_KEY = 'table-col-horizontal-resize-area';
var KEY_COL_REAL_WIDTH_INFO = 'col-real-width-info';
var ROOT_ID = 'root';
var ID_SEPARATOR = '[&]';
var EMPTY_PLACEHOLDER = '-';
var PADDING_TOP = 0;
var PADDING_RIGHT = 1;
var PADDING_DOWN = 2;
var PADDING_LEFT = 3;
var MIN_CELL_WIDTH = 28;
var MIN_CELL_HEIGHT = 16;
// data precision
var PRECISION = 16;
var ROOT_BEGINNING_REGEX = /^root\[&\]*/;
var IMAGE = 'image';
// 角头最大占整个容器的比例 (0-1)
var CORNER_MAX_WIDTH_RATIO = 0.5;
/** 布局采样数 */
var LAYOUT_SAMPLE_COUNT = 50;
/** mini 图类型 */
var MiniChartTypes;
(function (MiniChartTypes) {
    MiniChartTypes["Line"] = "line";
    MiniChartTypes["Bar"] = "bar";
    MiniChartTypes["Bullet"] = "bullet";
})(MiniChartTypes || (MiniChartTypes = {}));
// 线条 linecap 样式
var SQUARE_LINE_CAP = 'square';
// 省略号
var ELLIPSIS_SYMBOL = '...';

var S2_PREFIX_CLS = 'antv-s2';

var VALUE_RANGES_KEY = 'valueRanges';
var DEFAULT_VALUE_RANGES = {};
var DEFAULT_FONT_COLOR = '#000000';
var REVERSE_FONT_COLOR = '#FFFFFF';

var DEFAULT_DATA_CONFIG = {
    data: [],
    totalData: [],
    fields: {
        rows: [],
        columns: [],
        values: [],
        customTreeItems: [],
        valueInCols: true,
    },
    meta: [],
    sortParams: [],
    filterParams: [],
};

var _a$2;
var FrozenCellType;
(function (FrozenCellType) {
    FrozenCellType["ROW"] = "row";
    FrozenCellType["COL"] = "col";
    FrozenCellType["TRAILING_ROW"] = "trailingRow";
    FrozenCellType["TRAILING_COL"] = "trailingCol";
    FrozenCellType["SCROLL"] = "scroll";
    FrozenCellType["TOP"] = "top";
    FrozenCellType["BOTTOM"] = "bottom";
})(FrozenCellType || (FrozenCellType = {}));
var FrozenGroup$1;
(function (FrozenGroup) {
    FrozenGroup["FROZEN_COL"] = "frozenCol";
    FrozenGroup["FROZEN_ROW"] = "frozenRow";
    FrozenGroup["FROZEN_TRAILING_COL"] = "frozenTrailingCol";
    FrozenGroup["FROZEN_TRAILING_ROW"] = "frozenTrailingRow";
})(FrozenGroup$1 || (FrozenGroup$1 = {}));
var FrozenCellGroupMap = (_a$2 = {},
    _a$2[FrozenCellType.ROW] = 'frozenRowGroup',
    _a$2[FrozenCellType.COL] = 'frozenColGroup',
    _a$2[FrozenCellType.TRAILING_COL] = 'frozenTrailingColGroup',
    _a$2[FrozenCellType.TRAILING_ROW] = 'frozenTrailingRowGroup',
    _a$2[FrozenCellType.SCROLL] = 'panelScrollGroup',
    _a$2[FrozenCellType.TOP] = 'frozenTopGroup',
    _a$2[FrozenCellType.BOTTOM] = 'frozenBottomGroup',
    _a$2);

var InteractionName;
(function (InteractionName) {
    InteractionName["CORNER_CELL_CLICK"] = "cornerCellClick";
    InteractionName["DATA_CELL_CLICK"] = "dataCellClick";
    InteractionName["MERGED_CELLS_CLICK"] = "mergedCellsClick";
    InteractionName["ROW_COLUMN_CLICK"] = "rowColumnClick";
    InteractionName["ROW_TEXT_CLICK"] = "rowTextClick";
    InteractionName["HOVER"] = "hover";
    // options brushSelection 控制 BRUSH_SELECTION, ROW_BRUSH_SELECTION,COL_BRUSH_SELECTION
    InteractionName["BRUSH_SELECTION"] = "brushSelection";
    InteractionName["ROW_BRUSH_SELECTION"] = "rowBrushSelection";
    InteractionName["COL_BRUSH_SELECTION"] = "colBrushSelection";
    InteractionName["COL_ROW_RESIZE"] = "rowColResize";
    InteractionName["DATA_CELL_MULTI_SELECTION"] = "dataCellMultiSelection";
    InteractionName["RANGE_SELECTION"] = "rangeSelection";
    InteractionName["SELECTED_CELL_MOVE"] = "selectedCellMove";
})(InteractionName || (InteractionName = {}));
var InteractionStateName;
(function (InteractionStateName) {
    InteractionStateName["ALL_SELECTED"] = "allSelected";
    InteractionStateName["SELECTED"] = "selected";
    InteractionStateName["BRUSH_SELECTED"] = "brushSelected";
    InteractionStateName["UNSELECTED"] = "unselected";
    InteractionStateName["HOVER"] = "hover";
    InteractionStateName["HOVER_FOCUS"] = "hoverFocus";
    InteractionStateName["HIGHLIGHT"] = "highlight";
    InteractionStateName["SEARCH_RESULT"] = "searchResult";
    InteractionStateName["PREPARE_SELECT"] = "prepareSelect";
})(InteractionStateName || (InteractionStateName = {}));
var CellTypes;
(function (CellTypes) {
    CellTypes["DATA_CELL"] = "dataCell";
    CellTypes["HEADER_CELL"] = "headerCell";
    CellTypes["ROW_CELL"] = "rowCell";
    CellTypes["COL_CELL"] = "colCell";
    CellTypes["CORNER_CELL"] = "cornerCell";
    CellTypes["MERGED_CELL"] = "mergedCell";
})(CellTypes || (CellTypes = {}));
var HOVER_FOCUS_DURATION = 800;
// 主题配置和canvas属性的映射
var SHAPE_STYLE_MAP = {
    textOpacity: 'fillOpacity',
    backgroundOpacity: 'fillOpacity',
    backgroundColor: 'fill',
    borderOpacity: 'strokeOpacity',
    borderColor: 'stroke',
    borderWidth: 'lineWidth',
    opacity: 'opacity',
};
// 设置属性的时候实际对应改变的shape映射
var SHAPE_ATTRS_MAP = {
    textShape: ['textOpacity'],
    textShapes: ['textOpacity'],
    linkFieldShape: ['opacity'],
    interactiveBgShape: ['backgroundColor', 'backgroundOpacity'],
    interactiveBorderShape: ['borderColor', 'borderOpacity', 'borderWidth'],
};
var INTERACTION_STATE_INFO_KEY = 'interactionStateInfo';
var InteractionBrushSelectionStage;
(function (InteractionBrushSelectionStage) {
    InteractionBrushSelectionStage["CLICK"] = "click";
    InteractionBrushSelectionStage["UN_DRAGGED"] = "unDragged";
    InteractionBrushSelectionStage["DRAGGED"] = "dragged";
})(InteractionBrushSelectionStage || (InteractionBrushSelectionStage = {}));
var InteractionKeyboardKey;
(function (InteractionKeyboardKey) {
    InteractionKeyboardKey["SHIFT"] = "Shift";
    InteractionKeyboardKey["COPY"] = "c";
    InteractionKeyboardKey["ESC"] = "Escape";
    InteractionKeyboardKey["META"] = "Meta";
    InteractionKeyboardKey["CONTROL"] = "Control";
    InteractionKeyboardKey["ARROW_UP"] = "ArrowUp";
    InteractionKeyboardKey["ARROW_DOWN"] = "ArrowDown";
    InteractionKeyboardKey["ARROW_LEFT"] = "ArrowLeft";
    InteractionKeyboardKey["ARROW_RIGHT"] = "ArrowRight";
})(InteractionKeyboardKey || (InteractionKeyboardKey = {}));
var SortMethodType;
(function (SortMethodType) {
    SortMethodType["ASC"] = "ASC";
    SortMethodType["DESC"] = "DESC";
})(SortMethodType || (SortMethodType = {}));
var InterceptType;
(function (InterceptType) {
    InterceptType["HOVER"] = "hover";
    InterceptType["CLICK"] = "click";
    InterceptType["BRUSH_SELECTION"] = "brushSelection";
    InterceptType["ROW_BRUSH_SELECTION"] = "rowBrushSelection";
    InterceptType["COL_BRUSH_SELECTION"] = "colBrushSelection";
    InterceptType["MULTI_SELECTION"] = "multiSelection";
    InterceptType["RESIZE"] = "resize";
})(InterceptType || (InterceptType = {}));
var BRUSH_AUTO_SCROLL_INITIAL_CONFIG = {
    x: {
        value: 0,
        scroll: false,
    },
    y: {
        value: 0,
        scroll: false,
    },
};
var ScrollbarPositionType;
(function (ScrollbarPositionType) {
    ScrollbarPositionType["CONTENT"] = "content";
    ScrollbarPositionType["CANVAS"] = "canvas";
})(ScrollbarPositionType || (ScrollbarPositionType = {}));
var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection["SCROLL_UP"] = "scrollUp";
    ScrollDirection["SCROLL_DOWN"] = "scrollDown";
})(ScrollDirection || (ScrollDirection = {}));
var ScrollDirectionRowIndexDiff;
(function (ScrollDirectionRowIndexDiff) {
    ScrollDirectionRowIndexDiff[ScrollDirectionRowIndexDiff["SCROLL_UP"] = -1] = "SCROLL_UP";
    ScrollDirectionRowIndexDiff[ScrollDirectionRowIndexDiff["SCROLL_DOWN"] = 1] = "SCROLL_DOWN";
})(ScrollDirectionRowIndexDiff || (ScrollDirectionRowIndexDiff = {}));

var RESIZE_START_GUIDE_LINE_ID = 'RESIZE_START_GUIDE_LINE';
var RESIZE_END_GUIDE_LINE_ID = 'RESIZE_END_GUIDE_LINE';
var RESIZE_MASK_ID = 'RESIZE_MASK';
// resize时鼠标移动方向类型
var ResizeDirectionType;
(function (ResizeDirectionType) {
    ResizeDirectionType["Horizontal"] = "col";
    ResizeDirectionType["Vertical"] = "row";
})(ResizeDirectionType || (ResizeDirectionType = {}));
var ResizeAreaEffect;
(function (ResizeAreaEffect) {
    ResizeAreaEffect["Field"] = "field";
    ResizeAreaEffect["Cell"] = "cell";
    ResizeAreaEffect["Tree"] = "tree";
    ResizeAreaEffect["Series"] = "series";
})(ResizeAreaEffect || (ResizeAreaEffect = {}));
var ResizeType;
(function (ResizeType) {
    ResizeType["ALL"] = "all";
    ResizeType["CURRENT"] = "current";
})(ResizeType || (ResizeType = {}));

var MIN_DEVICE_PIXEL_RATIO = 1;
var LayoutWidthTypes;
(function (LayoutWidthTypes) {
    LayoutWidthTypes["Adaptive"] = "adaptive";
    LayoutWidthTypes["ColAdaptive"] = "colAdaptive";
    LayoutWidthTypes["Compact"] = "compact";
})(LayoutWidthTypes || (LayoutWidthTypes = {}));
var DEFAULT_TREE_ROW_WIDTH = 120;
var DEFAULT_STYLE = {
    layoutWidthType: LayoutWidthTypes.Adaptive,
    showTreeLeafNodeAlignDot: false,
    collapsedRows: {},
    collapsedCols: {},
    cellCfg: {
        width: 96,
        height: 30,
    },
    rowCfg: {
        width: null,
        widthByField: {},
        heightByField: {},
    },
    colCfg: {
        height: 30,
        widthByFieldValue: {},
        heightByField: {},
    },
    device: 'pc',
};
var DEFAULT_OPTIONS = {
    width: 600,
    height: 480,
    debug: false,
    hierarchyType: 'grid',
    conditions: {},
    totals: {},
    tooltip: {
        showTooltip: false,
        autoAdjustBoundary: 'body',
        operation: {
            hiddenColumns: false,
            trend: false,
            sort: false,
            menus: [],
        },
    },
    interaction: {
        linkFields: [],
        hiddenColumnFields: [],
        selectedCellsSpotlight: false,
        hoverHighlight: true,
        hoverFocus: { duration: HOVER_FOCUS_DURATION },
        scrollSpeedRatio: {
            horizontal: 1,
            vertical: 1,
        },
        autoResetSheetStyle: true,
        brushSelection: {
            data: true,
            row: false,
            col: false,
        },
        multiSelection: true,
        rangeSelection: true,
        scrollbarPosition: ScrollbarPositionType.CONTENT,
        resize: {
            rowCellVertical: true,
            cornerCellHorizontal: true,
            colCellHorizontal: true,
            colCellVertical: true,
            rowResizeType: ResizeType.ALL,
        },
        eventListenerOptions: false,
        selectedCellHighlight: false,
        overscrollBehavior: 'auto',
    },
    showSeriesNumber: false,
    customSVGIcons: [],
    showDefaultHeaderActionIcon: false,
    headerActionIcons: [],
    style: DEFAULT_STYLE,
    frozenRowHeader: true,
    frozenRowCount: 0,
    frozenColCount: 0,
    frozenTrailingRowCount: 0,
    frozenTrailingColCount: 0,
    hdAdapter: true,
    cornerText: '',
    cornerExtraFieldText: '',
    placeholder: EMPTY_PLACEHOLDER,
    supportCSSTransform: false,
    devicePixelRatio: window.devicePixelRatio,
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

var freeGlobal$1 = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal$1 || freeSelf || Function('return this')();

var root$1 = root;

/** Built-in value references. */
var Symbol$1 = root$1.Symbol;

var Symbol$2 = Symbol$1;

/** Used for built-in method references. */
var objectProto$s = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$o = objectProto$s.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$3 = objectProto$s.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$o.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$3.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$r = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$2 = objectProto$r.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$2.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var symbolTag$3 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag$3);
}

/** Used as references for various `Number` constants. */
var NAN$2 = 0 / 0;

/**
 * The base implementation of `_.toNumber` which doesn't ensure correct
 * conversions of binary, hexadecimal, or octal string values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 */
function baseToNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN$2;
  }
  return +value;
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray$1 = isArray;

/** Used as references for various `Number` constants. */
var INFINITY$5 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$5) ? '-0' : result;
}

/**
 * Creates a function that performs a mathematical operation on two values.
 *
 * @private
 * @param {Function} operator The function to perform the operation.
 * @param {number} [defaultValue] The value used for `undefined` arguments.
 * @returns {Function} Returns the new mathematical operation function.
 */
function createMathOperation(operator, defaultValue) {
  return function(value, other) {
    var result;
    if (value === undefined && other === undefined) {
      return defaultValue;
    }
    if (value !== undefined) {
      result = value;
    }
    if (other !== undefined) {
      if (result === undefined) {
        return other;
      }
      if (typeof value == 'string' || typeof other == 'string') {
        value = baseToString(value);
        other = baseToString(other);
      } else {
        value = baseToNumber(value);
        other = baseToNumber(other);
      }
      result = operator(value, other);
    }
    return result;
  };
}

/**
 * Adds two numbers.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {number} augend The first number in an addition.
 * @param {number} addend The second number in an addition.
 * @returns {number} Returns the total.
 * @example
 *
 * _.add(6, 4);
 * // => 10
 */
var add$1 = createMathOperation(function(augend, addend) {
  return augend + addend;
}, 0);

var add$2 = add$1;

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

/** Used to match leading whitespace. */
var reTrimStart$2 = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart$2, '')
    : string;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** Used as references for various `Number` constants. */
var NAN$1 = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN$1;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN$1 : +value);
}

/** Used as references for various `Number` constants. */
var INFINITY$4 = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY$4 || value === -INFINITY$4) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/** Error message constants. */
var FUNC_ERROR_TEXT$b = 'Expected a function';

/**
 * The opposite of `_.before`; this method creates a function that invokes
 * `func` once it's called `n` or more times.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {number} n The number of calls before `func` is invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var saves = ['profile', 'settings'];
 *
 * var done = _.after(saves.length, function() {
 *   console.log('done saving!');
 * });
 *
 * _.forEach(saves, function(type) {
 *   asyncSave({ 'type': type, 'complete': done });
 * });
 * // => Logs 'done saving!' after the two async saves have completed.
 */
function after(n, func) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$b);
  }
  n = toInteger(n);
  return function() {
    if (--n < 1) {
      return func.apply(this, arguments);
    }
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root$1['__core-js_shared__'];

var coreJsData$1 = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$q = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$n = objectProto$q.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$n).replace(reRegExpChar$1, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root$1, 'WeakMap');

var WeakMap$1 = WeakMap;

/** Used to store function metadata. */
var metaMap = WeakMap$1 && new WeakMap$1;

var metaMap$1 = metaMap;

/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var baseSetData = !metaMap$1 ? identity : function(func, data) {
  metaMap$1.set(func, data);
  return func;
};

var baseSetData$1 = baseSetData;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var baseCreate$1 = baseCreate;

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate$1(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$8 = 1;

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG$8,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = (this && this !== root$1 && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$g = Math.max;

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax$g(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$f = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax$f(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      ++result;
    }
  }
  return result;
}

/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */
function baseLodash() {
  // No operation performed.
}

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH$6 = 4294967295;

/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */
function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH$6;
  this.__views__ = [];
}

// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate$1(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */
var getData = !metaMap$1 ? noop : function(func) {
  return metaMap$1.get(func);
};

var getData$1 = getData;

/** Used to lookup unminified function names. */
var realNames = {};

var realNames$1 = realNames;

/** Used for built-in method references. */
var objectProto$p = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$m = objectProto$p.hasOwnProperty;

/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */
function getFuncName(func) {
  var result = (func.name + ''),
      array = realNames$1[result],
      length = hasOwnProperty$m.call(realNames$1, result) ? array.length : 0;

  while (length--) {
    var data = array[length],
        otherFunc = data.func;
    if (otherFunc == null || otherFunc == func) {
      return data.name;
    }
  }
  return result;
}

/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */
function LodashWrapper(value, chainAll) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__chain__ = !!chainAll;
  this.__index__ = 0;
  this.__values__ = undefined;
}

LodashWrapper.prototype = baseCreate$1(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */
function wrapperClone(wrapper) {
  if (wrapper instanceof LazyWrapper) {
    return wrapper.clone();
  }
  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
  result.__actions__ = copyArray(wrapper.__actions__);
  result.__index__  = wrapper.__index__;
  result.__values__ = wrapper.__values__;
  return result;
}

/** Used for built-in method references. */
var objectProto$o = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$l = objectProto$o.hasOwnProperty;

/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */
function lodash(value) {
  if (isObjectLike(value) && !isArray$1(value) && !(value instanceof LazyWrapper)) {
    if (value instanceof LodashWrapper) {
      return value;
    }
    if (hasOwnProperty$l.call(value, '__wrapped__')) {
      return wrapperClone(value);
    }
  }
  return new LodashWrapper(value);
}

// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;

/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */
function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData$1(other);
  return !!data && func === data[0];
}

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var setData = shortOut(baseSetData$1);

var setData$1 = setData;

/** Used to match wrap detail comments. */
var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length;
  if (!length) {
    return source;
  }
  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant$1(value) {
  return function() {
    return value;
  };
}

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var defineProperty$1 = defineProperty;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty$1 ? identity : function(func, string) {
  return defineProperty$1(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant$1(string),
    'writable': true
  });
};

var baseSetToString$1 = baseSetToString;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString$1);

var setToString$1 = setToString;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$7 = 1,
    WRAP_BIND_KEY_FLAG$6 = 2,
    WRAP_CURRY_FLAG$6 = 8,
    WRAP_CURRY_RIGHT_FLAG$3 = 16,
    WRAP_PARTIAL_FLAG$6 = 32,
    WRAP_PARTIAL_RIGHT_FLAG$3 = 64,
    WRAP_ARY_FLAG$4 = 128,
    WRAP_REARG_FLAG$3 = 256,
    WRAP_FLIP_FLAG$2 = 512;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', WRAP_ARY_FLAG$4],
  ['bind', WRAP_BIND_FLAG$7],
  ['bindKey', WRAP_BIND_KEY_FLAG$6],
  ['curry', WRAP_CURRY_FLAG$6],
  ['curryRight', WRAP_CURRY_RIGHT_FLAG$3],
  ['flip', WRAP_FLIP_FLAG$2],
  ['partial', WRAP_PARTIAL_FLAG$6],
  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG$3],
  ['rearg', WRAP_REARG_FLAG$3]
];

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
function setWrapToString(wrapper, reference, bitmask) {
  var source = (reference + '');
  return setToString$1(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$6 = 1,
    WRAP_BIND_KEY_FLAG$5 = 2,
    WRAP_CURRY_BOUND_FLAG$1 = 4,
    WRAP_CURRY_FLAG$5 = 8,
    WRAP_PARTIAL_FLAG$5 = 32,
    WRAP_PARTIAL_RIGHT_FLAG$2 = 64;

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG$5,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$5 : WRAP_PARTIAL_RIGHT_FLAG$2);
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$2 : WRAP_PARTIAL_FLAG$5);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG$1)) {
    bitmask &= ~(WRAP_BIND_FLAG$6 | WRAP_BIND_KEY_FLAG$5);
  }
  var newData = [
    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    newHoldersRight, argPos, ary, arity
  ];

  var result = wrapFunc.apply(undefined, newData);
  if (isLaziable(func)) {
    setData$1(result, newData);
  }
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$6 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$6 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$e = Math.min;

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin$e(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

/** Used as the internal argument placeholder. */
var PLACEHOLDER$1 = '__lodash_placeholder__';

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER$1) {
      array[index] = PLACEHOLDER$1;
      result[resIndex++] = index;
    }
  }
  return result;
}

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$5 = 1,
    WRAP_BIND_KEY_FLAG$4 = 2,
    WRAP_CURRY_FLAG$4 = 8,
    WRAP_CURRY_RIGHT_FLAG$2 = 16,
    WRAP_ARY_FLAG$3 = 128,
    WRAP_FLIP_FLAG$1 = 512;

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG$3,
      isBind = bitmask & WRAP_BIND_FLAG$5,
      isBindKey = bitmask & WRAP_BIND_KEY_FLAG$4,
      isCurried = bitmask & (WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2),
      isFlip = bitmask & WRAP_FLIP_FLAG$1,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root$1 && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root$1 && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$4 = 1;

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG$4,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root$1 && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$3 = 1,
    WRAP_BIND_KEY_FLAG$3 = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG$3 = 8,
    WRAP_ARY_FLAG$2 = 128,
    WRAP_REARG_FLAG$2 = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$d = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG$3 | WRAP_BIND_KEY_FLAG$3 | WRAP_ARY_FLAG$2);

  var isCombo =
    ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_CURRY_FLAG$3)) ||
    ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_REARG_FLAG$2) && (data[7].length <= source[8])) ||
    ((srcBitmask == (WRAP_ARY_FLAG$2 | WRAP_REARG_FLAG$2)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$3));

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG$3) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG$3 ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG$2) {
    data[8] = data[8] == null ? source[8] : nativeMin$d(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

/** Error message constants. */
var FUNC_ERROR_TEXT$a = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$2 = 1,
    WRAP_BIND_KEY_FLAG$2 = 2,
    WRAP_CURRY_FLAG$2 = 8,
    WRAP_CURRY_RIGHT_FLAG$1 = 16,
    WRAP_PARTIAL_FLAG$4 = 32,
    WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$e = Math.max;

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$a);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG$4 | WRAP_PARTIAL_RIGHT_FLAG$1);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax$e(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG$1) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }
  var data = isBindKey ? undefined : getData$1(func);

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  if (data) {
    mergeData(newData, data);
  }
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === undefined
    ? (isBindKey ? 0 : func.length)
    : nativeMax$e(newData[9] - length, 0);

  if (!arity && bitmask & (WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1)) {
    bitmask &= ~(WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1);
  }
  if (!bitmask || bitmask == WRAP_BIND_FLAG$2) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG$2 || bitmask == WRAP_CURRY_RIGHT_FLAG$1) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG$4 || bitmask == (WRAP_BIND_FLAG$2 | WRAP_PARTIAL_FLAG$4)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  var setter = data ? baseSetData$1 : setData$1;
  return setWrapToString(setter(result, newData), func, bitmask);
}

/** Used to compose bitmasks for function metadata. */
var WRAP_ARY_FLAG$1 = 128;

/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */
function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = (func && n == null) ? func.length : n;
  return createWrap(func, WRAP_ARY_FLAG$1, undefined, undefined, undefined, undefined, n);
}

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/** Used for built-in method references. */
var objectProto$n = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$k = objectProto$n.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$k.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$d = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax$d(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax$d(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString$1(overRest(func, start, identity), func + '');
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$5 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$5;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/** Used for built-in method references. */
var objectProto$m = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$m;

  return value === proto;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$3;
}

/** Used for built-in method references. */
var objectProto$l = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$j = objectProto$l.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$l.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$j.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments$1 = isArguments;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

/** Built-in value references. */
var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

var isBuffer$1 = isBuffer;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$4 = '[object Boolean]',
    dateTag$4 = '[object Date]',
    errorTag$3 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$9 = '[object Map]',
    numberTag$4 = '[object Number]',
    objectTag$4 = '[object Object]',
    regexpTag$4 = '[object RegExp]',
    setTag$9 = '[object Set]',
    stringTag$4 = '[object String]',
    weakMapTag$3 = '[object WeakMap]';

var arrayBufferTag$4 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$4] = typedArrayTags[boolTag$4] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$4] =
typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$9] = typedArrayTags[numberTag$4] =
typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$4] =
typedArrayTags[setTag$9] = typedArrayTags[stringTag$4] =
typedArrayTags[weakMapTag$3] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal$1.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

var nodeUtil$1 = nodeUtil;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray$1 = isTypedArray;

/** Used for built-in method references. */
var objectProto$k = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$i = objectProto$k.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray$1(value),
      isArg = !isArr && isArguments$1(value),
      isBuff = !isArr && !isArg && isBuffer$1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$i.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

var nativeKeys$1 = nativeKeys;

/** Used for built-in method references. */
var objectProto$j = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$h = objectProto$j.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys$1(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$h.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/** Used for built-in method references. */
var objectProto$i = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$g = objectProto$i.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty$g.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

var assign$1 = assign;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$h = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$f = objectProto$h.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$f.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */
var assignIn = createAssigner(function(object, source) {
  copyObject(source, keysIn(source), object);
});

var extend$1 = assignIn;

/**
 * This method is like `_.assignIn` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keysIn(source), object, customizer);
});

var extendWith = assignInWith;

/**
 * This method is like `_.assign` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignInWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keys(source), object, customizer);
});

var assignWith$1 = assignWith;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray$1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

var nativeCreate$1 = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$g = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$e = objectProto$g.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate$1) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$f = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$d = objectProto$f.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$d.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto$5 = Array.prototype;

/** Built-in value references. */
var splice$2 = arrayProto$5.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice$2.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root$1, 'Map');

var Map$2 = Map$1;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$2 || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Error message constants. */
var FUNC_ERROR_TEXT$9 = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT$9);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var stringToPath$1 = stringToPath;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray$1(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath$1(toString(value));
}

/** Used as references for various `Number` constants. */
var INFINITY$3 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

/**
 * The base implementation of `_.at` without support for individual paths.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {string[]} paths The property paths to pick.
 * @returns {Array} Returns the picked elements.
 */
function baseAt(object, paths) {
  var index = -1,
      length = paths.length,
      result = Array(length),
      skip = object == null;

  while (++index < length) {
    result[index] = skip ? undefined : get(object, paths[index]);
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Built-in value references. */
var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray$1(value) || isArguments$1(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString$1(overRest(func, undefined, flatten), func + '');
}

/**
 * Creates an array of values corresponding to `paths` of `object`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Array} Returns the picked values.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 *
 * _.at(object, ['a[0].b.c', 'a[1]']);
 * // => [3, 4]
 */
var at$1 = flatRest(baseAt);

var at$2 = at$1;

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

var getPrototype$1 = getPrototype;

/** `Object#toString` result references. */
var objectTag$3 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$e = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$e.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$c.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag$2 = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag$2 || tag == domExcTag ||
    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
}

/**
 * Attempts to invoke `func`, returning either the result or the caught error
 * object. Any additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Function} func The function to attempt.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {*} Returns the `func` result or error object.
 * @example
 *
 * // Avoid throwing errors for invalid selectors.
 * var elements = _.attempt(function(selector) {
 *   return document.querySelectorAll(selector);
 * }, '>_>');
 *
 * if (_.isError(elements)) {
 *   elements = [];
 * }
 */
var attempt = baseRest(function(func, args) {
  try {
    return apply(func, undefined, args);
  } catch (e) {
    return isError(e) ? e : new Error(e);
  }
});

var attempt$1 = attempt;

/** Error message constants. */
var FUNC_ERROR_TEXT$8 = 'Expected a function';

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$8);
  }
  n = toInteger(n);
  return function() {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG$1 = 1,
    WRAP_PARTIAL_FLAG$3 = 32;

/**
 * Creates a function that invokes `func` with the `this` binding of `thisArg`
 * and `partials` prepended to the arguments it receives.
 *
 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for partially applied arguments.
 *
 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
 * property of bound functions.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * function greet(greeting, punctuation) {
 *   return greeting + ' ' + this.user + punctuation;
 * }
 *
 * var object = { 'user': 'fred' };
 *
 * var bound = _.bind(greet, object, 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bind(greet, object, _, '!');
 * bound('hi');
 * // => 'hi fred!'
 */
var bind = baseRest(function(func, thisArg, partials) {
  var bitmask = WRAP_BIND_FLAG$1;
  if (partials.length) {
    var holders = replaceHolders(partials, getHolder(bind));
    bitmask |= WRAP_PARTIAL_FLAG$3;
  }
  return createWrap(func, bitmask, thisArg, partials, holders);
});

// Assign default placeholders.
bind.placeholder = {};

var bind$1 = bind;

/**
 * Binds methods of an object to the object itself, overwriting the existing
 * method.
 *
 * **Note:** This method doesn't set the "length" property of bound functions.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {Object} object The object to bind and assign the bound methods to.
 * @param {...(string|string[])} methodNames The object method names to bind.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var view = {
 *   'label': 'docs',
 *   'click': function() {
 *     console.log('clicked ' + this.label);
 *   }
 * };
 *
 * _.bindAll(view, ['click']);
 * jQuery(element).on('click', view.click);
 * // => Logs 'clicked docs' when clicked.
 */
var bindAll = flatRest(function(object, methodNames) {
  arrayEach(methodNames, function(key) {
    key = toKey(key);
    baseAssignValue(object, key, bind$1(object[key], object));
  });
  return object;
});

var bindAll$1 = bindAll;

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG$1 = 2,
    WRAP_PARTIAL_FLAG$2 = 32;

/**
 * Creates a function that invokes the method at `object[key]` with `partials`
 * prepended to the arguments it receives.
 *
 * This method differs from `_.bind` by allowing bound functions to reference
 * methods that may be redefined or don't yet exist. See
 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
 * for more details.
 *
 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Function
 * @param {Object} object The object to invoke the method on.
 * @param {string} key The key of the method.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * var object = {
 *   'user': 'fred',
 *   'greet': function(greeting, punctuation) {
 *     return greeting + ' ' + this.user + punctuation;
 *   }
 * };
 *
 * var bound = _.bindKey(object, 'greet', 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * object.greet = function(greeting, punctuation) {
 *   return greeting + 'ya ' + this.user + punctuation;
 * };
 *
 * bound('!');
 * // => 'hiya fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bindKey(object, 'greet', _, '!');
 * bound('hi');
 * // => 'hiya fred!'
 */
var bindKey = baseRest(function(object, key, partials) {
  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG$1;
  if (partials.length) {
    var holders = replaceHolders(partials, getHolder(bindKey));
    bitmask |= WRAP_PARTIAL_FLAG$2;
  }
  return createWrap(key, bitmask, object, partials, holders);
});

// Assign default placeholders.
bindKey.placeholder = {};

var bindKey$1 = bindKey;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/** Used to compose unicode character classes. */
var rsAstralRange$3 = '\\ud800-\\udfff',
    rsComboMarksRange$4 = '\\u0300-\\u036f',
    reComboHalfMarksRange$4 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$4 = '\\u20d0-\\u20ff',
    rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
    rsVarRange$3 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ$3 = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3  + rsComboRange$4 + rsVarRange$3 + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/** Used to compose unicode character classes. */
var rsAstralRange$2 = '\\ud800-\\udfff',
    rsComboMarksRange$3 = '\\u0300-\\u036f',
    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsVarRange$2 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral$1 = '[' + rsAstralRange$2 + ']',
    rsCombo$3 = '[' + rsComboRange$3 + ']',
    rsFitz$2 = '\\ud83c[\\udffb-\\udfff]',
    rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
    rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
    rsRegional$2 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair$2 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ$2 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod$2 = rsModifier$2 + '?',
    rsOptVar$2 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
    rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
    rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode$1) || [];
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

var upperFirst$1 = upperFirst;

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize(string) {
  return upperFirst$1(toString(string).toLowerCase());
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

var deburrLetter$1 = deburrLetter;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange$2 = '\\u0300-\\u036f',
    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;

/** Used to compose unicode capture groups. */
var rsCombo$2 = '[' + rsComboRange$2 + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo$2, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter$1).replace(reComboMark, '');
}

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\ud800-\\udfff',
    rsComboMarksRange$1 = '\\u0300-\\u036f',
    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange$1 = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$1 = '[' + rsComboRange$1 + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

var camelCase$1 = camelCase;

/**
 * Casts `value` as an array if it's not one.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Lang
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast array.
 * @example
 *
 * _.castArray(1);
 * // => [1]
 *
 * _.castArray({ 'a': 1 });
 * // => [{ 'a': 1 }]
 *
 * _.castArray('abc');
 * // => ['abc']
 *
 * _.castArray(null);
 * // => [null]
 *
 * _.castArray(undefined);
 * // => [undefined]
 *
 * _.castArray();
 * // => []
 *
 * var array = [1, 2, 3];
 * console.log(_.castArray(array) === array);
 * // => true
 */
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray$1(value) ? value : [value];
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsFinite$1 = root$1.isFinite,
    nativeMin$c = Math.min;

/**
 * Creates a function like `_.round`.
 *
 * @private
 * @param {string} methodName The name of the `Math` method to use when rounding.
 * @returns {Function} Returns the new round function.
 */
function createRound(methodName) {
  var func = Math[methodName];
  return function(number, precision) {
    number = toNumber(number);
    precision = precision == null ? 0 : nativeMin$c(toInteger(precision), 292);
    if (precision && nativeIsFinite$1(number)) {
      // Shift with exponential notation to avoid floating-point issues.
      // See [MDN](https://mdn.io/round#Examples) for more details.
      var pair = (toString(number) + 'e').split('e'),
          value = func(pair[0] + 'e' + (+pair[1] + precision));

      pair = (toString(value) + 'e').split('e');
      return +(pair[0] + 'e' + (+pair[1] - precision));
    }
    return func(number);
  };
}

/**
 * Computes `number` rounded up to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round up.
 * @param {number} [precision=0] The precision to round up to.
 * @returns {number} Returns the rounded up number.
 * @example
 *
 * _.ceil(4.006);
 * // => 5
 *
 * _.ceil(6.004, 2);
 * // => 6.01
 *
 * _.ceil(6040, -2);
 * // => 6100
 */
var ceil$1 = createRound('ceil');

var ceil$2 = ceil$1;

/**
 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
 * chain sequences enabled. The result of such sequences must be unwrapped
 * with `_#value`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Seq
 * @param {*} value The value to wrap.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36 },
 *   { 'user': 'fred',    'age': 40 },
 *   { 'user': 'pebbles', 'age': 1 }
 * ];
 *
 * var youngest = _
 *   .chain(users)
 *   .sortBy('age')
 *   .map(function(o) {
 *     return o.user + ' is ' + o.age;
 *   })
 *   .head()
 *   .value();
 * // => 'pebbles is 1'
 */
function chain(value) {
  var result = lodash(value);
  result.__chain__ = true;
  return result;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil$3 = Math.ceil,
    nativeMax$c = Math.max;

/**
 * Creates an array of elements split into groups the length of `size`.
 * If `array` can't be split evenly, the final chunk will be the remaining
 * elements.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to process.
 * @param {number} [size=1] The length of each chunk
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the new array of chunks.
 * @example
 *
 * _.chunk(['a', 'b', 'c', 'd'], 2);
 * // => [['a', 'b'], ['c', 'd']]
 *
 * _.chunk(['a', 'b', 'c', 'd'], 3);
 * // => [['a', 'b', 'c'], ['d']]
 */
function chunk(array, size, guard) {
  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
    size = 1;
  } else {
    size = nativeMax$c(toInteger(size), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size < 1) {
    return [];
  }
  var index = 0,
      resIndex = 0,
      result = Array(nativeCeil$3(length / size));

  while (index < length) {
    result[resIndex++] = baseSlice(array, index, (index += size));
  }
  return result;
}

/**
 * The base implementation of `_.clamp` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 */
function baseClamp(number, lower, upper) {
  if (number === number) {
    if (upper !== undefined) {
      number = number <= upper ? number : upper;
    }
    if (lower !== undefined) {
      number = number >= lower ? number : lower;
    }
  }
  return number;
}

/**
 * Clamps `number` within the inclusive `lower` and `upper` bounds.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Number
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 * @example
 *
 * _.clamp(-10, -5, 5);
 * // => -5
 *
 * _.clamp(10, -5, 5);
 * // => 5
 */
function clamp$1(number, lower, upper) {
  if (upper === undefined) {
    upper = lower;
    lower = undefined;
  }
  if (upper !== undefined) {
    upper = toNumber(upper);
    upper = upper === upper ? upper : 0;
  }
  if (lower !== undefined) {
    lower = toNumber(lower);
    lower = lower === lower ? lower : 0;
  }
  return baseClamp(toNumber(number), lower, upper);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$2 = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE$2 - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root$1.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$d.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var getSymbols$1 = getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols$1(source), object);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols$1(object));
    object = getPrototype$1(object);
  }
  return result;
};

var getSymbolsIn$1 = getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn$1(source), object);
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols$1);
}

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn$1);
}

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative(root$1, 'DataView');

var DataView$2 = DataView$1;

/* Built-in method references that are verified to be native. */
var Promise$1 = getNative(root$1, 'Promise');

var Promise$2 = Promise$1;

/* Built-in method references that are verified to be native. */
var Set$1 = getNative(root$1, 'Set');

var Set$2 = Set$1;

/** `Object#toString` result references. */
var mapTag$8 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$8 = '[object Set]',
    weakMapTag$2 = '[object WeakMap]';

var dataViewTag$3 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView$2),
    mapCtorString = toSource(Map$2),
    promiseCtorString = toSource(Promise$2),
    setCtorString = toSource(Set$2),
    weakMapCtorString = toSource(WeakMap$1);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView$2 && getTag(new DataView$2(new ArrayBuffer(1))) != dataViewTag$3) ||
    (Map$2 && getTag(new Map$2) != mapTag$8) ||
    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||
    (Set$2 && getTag(new Set$2) != setTag$8) ||
    (WeakMap$1 && getTag(new WeakMap$1) != weakMapTag$2)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$3;
        case mapCtorString: return mapTag$8;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$8;
        case weakMapCtorString: return weakMapTag$2;
      }
    }
    return result;
  };
}

var getTag$1 = getTag;

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$c.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$b.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/** Built-in value references. */
var Uint8Array = root$1.Uint8Array;

var Uint8Array$1 = Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags$1 = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags$1.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/** `Object#toString` result references. */
var boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    mapTag$7 = '[object Map]',
    numberTag$3 = '[object Number]',
    regexpTag$3 = '[object RegExp]',
    setTag$7 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$2 = '[object Symbol]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$2 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$3:
      return cloneArrayBuffer(object);

    case boolTag$3:
    case dateTag$3:
      return new Ctor(+object);

    case dataViewTag$2:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$7:
      return new Ctor;

    case numberTag$3:
    case stringTag$3:
      return new Ctor(object);

    case regexpTag$3:
      return cloneRegExp(object);

    case setTag$7:
      return new Ctor;

    case symbolTag$2:
      return cloneSymbol(object);
  }
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate$1(getPrototype$1(object))
    : {};
}

/** `Object#toString` result references. */
var mapTag$6 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag$1(value) == mapTag$6;
}

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

var isMap$1 = isMap;

/** `Object#toString` result references. */
var setTag$6 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag$1(value) == setTag$6;
}

/* Node.js helper references. */
var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

var isSet$1 = isSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$7 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$5 = 4;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag$5 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag$2 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$1 = '[object Symbol]',
    weakMapTag$1 = '[object WeakMap]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$1] =
cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag$5] =
cloneableTags[numberTag$2] = cloneableTags[objectTag$1] =
cloneableTags[regexpTag$2] = cloneableTags[setTag$5] =
cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$1] = cloneableTags[funcTag] =
cloneableTags[weakMapTag$1] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$7,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$5;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray$1(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag$1(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer$1(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet$1(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap$1(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG$4 = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone$1(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG$4);
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$6 = 1,
    CLONE_SYMBOLS_FLAG$3 = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG$6 | CLONE_SYMBOLS_FLAG$3);
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$5 = 1,
    CLONE_SYMBOLS_FLAG$2 = 4;

/**
 * This method is like `_.cloneWith` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the deep cloned value.
 * @see _.cloneWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(true);
 *   }
 * }
 *
 * var el = _.cloneDeepWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 20
 */
function cloneDeepWith(value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseClone(value, CLONE_DEEP_FLAG$5 | CLONE_SYMBOLS_FLAG$2, customizer);
}

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG$1 = 4;

/**
 * This method is like `_.clone` except that it accepts `customizer` which
 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
 * cloning is handled by the method instead. The `customizer` is invoked with
 * up to four arguments; (value [, index|key, object, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeepWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(false);
 *   }
 * }
 *
 * var el = _.cloneWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 0
 */
function cloneWith(value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseClone(value, CLONE_SYMBOLS_FLAG$1, customizer);
}

/**
 * Executes the chain sequence and returns the wrapped result.
 *
 * @name commit
 * @memberOf _
 * @since 3.2.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var array = [1, 2];
 * var wrapped = _(array).push(3);
 *
 * console.log(array);
 * // => [1, 2]
 *
 * wrapped = wrapped.commit();
 * console.log(array);
 * // => [1, 2, 3]
 *
 * wrapped.last();
 * // => 3
 *
 * console.log(array);
 * // => [1, 2, 3]
 */
function wrapperCommit() {
  return new LodashWrapper(this.value(), this.__chain__);
}

/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Creates a new array concatenating `array` with any additional arrays
 * and/or values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to concatenate.
 * @param {...*} [values] The values to concatenate.
 * @returns {Array} Returns the new concatenated array.
 * @example
 *
 * var array = [1];
 * var other = _.concat(array, 2, [3], [[4]]);
 *
 * console.log(other);
 * // => [1, 2, 3, [4]]
 *
 * console.log(array);
 * // => [1]
 */
function concat() {
  var length = arguments.length;
  if (!length) {
    return [];
  }
  var args = Array(length - 1),
      array = arguments[0],
      index = length;

  while (index--) {
    args[index - 1] = arguments[index];
  }
  return arrayPush(isArray$1(array) ? copyArray(array) : [array], baseFlatten(args, 1));
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    errorTag = '[object Error]',
    mapTag$4 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag$1:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
        return false;
      }
      return true;

    case boolTag$1:
    case dateTag$1:
    case numberTag$1:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag$1:
    case stringTag$1:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag$4:
      var convert = mapToArray;

    case setTag$4:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$b.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$a.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$1(object),
      othIsArr = isArray$1(other),
      objTag = objIsArr ? arrayTag : getTag$1(object),
      othTag = othIsArr ? arrayTag : getTag$1(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer$1(object)) {
    if (!isBuffer$1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray$1(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$9.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$9.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray$1(object) || isArguments$1(object));
}

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray$1(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

/** Error message constants. */
var FUNC_ERROR_TEXT$7 = 'Expected a function';

/**
 * Creates a function that iterates over `pairs` and invokes the corresponding
 * function of the first predicate to return truthy. The predicate-function
 * pairs are invoked with the `this` binding and arguments of the created
 * function.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {Array} pairs The predicate-function pairs.
 * @returns {Function} Returns the new composite function.
 * @example
 *
 * var func = _.cond([
 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
 *   [_.stubTrue,                      _.constant('no match')]
 * ]);
 *
 * func({ 'a': 1, 'b': 2 });
 * // => 'matches A'
 *
 * func({ 'a': 0, 'b': 1 });
 * // => 'matches B'
 *
 * func({ 'a': '1', 'b': '2' });
 * // => 'no match'
 */
function cond(pairs) {
  var length = pairs == null ? 0 : pairs.length,
      toIteratee = baseIteratee;

  pairs = !length ? [] : arrayMap(pairs, function(pair) {
    if (typeof pair[1] != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$7);
    }
    return [toIteratee(pair[0]), pair[1]];
  });

  return baseRest(function(args) {
    var index = -1;
    while (++index < length) {
      var pair = pairs[index];
      if (apply(pair[0], this, args)) {
        return apply(pair[1], this, args);
      }
    }
  });
}

/**
 * The base implementation of `_.conformsTo` which accepts `props` to check.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property predicates to conform to.
 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
 */
function baseConformsTo(object, source, props) {
  var length = props.length;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (length--) {
    var key = props[length],
        predicate = source[key],
        value = object[key];

    if ((value === undefined && !(key in object)) || !predicate(value)) {
      return false;
    }
  }
  return true;
}

/**
 * The base implementation of `_.conforms` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property predicates to conform to.
 * @returns {Function} Returns the new spec function.
 */
function baseConforms(source) {
  var props = keys(source);
  return function(object) {
    return baseConformsTo(object, source, props);
  };
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$4 = 1;

/**
 * Creates a function that invokes the predicate properties of `source` with
 * the corresponding property values of a given object, returning `true` if
 * all predicates return truthy, else `false`.
 *
 * **Note:** The created function is equivalent to `_.conformsTo` with
 * `source` partially applied.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {Object} source The object of property predicates to conform to.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 2, 'b': 1 },
 *   { 'a': 1, 'b': 2 }
 * ];
 *
 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
 * // => [{ 'a': 1, 'b': 2 }]
 */
function conforms(source) {
  return baseConforms(baseClone(source, CLONE_DEEP_FLAG$4));
}

/**
 * Checks if `object` conforms to `source` by invoking the predicate
 * properties of `source` with the corresponding property values of `object`.
 *
 * **Note:** This method is equivalent to `_.conforms` when `source` is
 * partially applied.
 *
 * @static
 * @memberOf _
 * @since 4.14.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property predicates to conform to.
 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
 * // => true
 *
 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
 * // => false
 */
function conformsTo(object, source) {
  return source == null || baseConformsTo(object, source, keys(source));
}

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

var baseFor$1 = baseFor;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor$1(object, iteratee, keys);
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

var baseEach$1 = baseEach;

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach$1(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray$1(collection) ? arrayAggregator : baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, baseIteratee(iteratee), accumulator);
  };
}

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the number of times the key was returned by `iteratee`. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.countBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': 1, '6': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.countBy(['one', 'two', 'three'], 'length');
 * // => { '3': 2, '5': 1 }
 */
var countBy = createAggregator(function(result, value, key) {
  if (hasOwnProperty$8.call(result, key)) {
    ++result[key];
  } else {
    baseAssignValue(result, key, 1);
  }
});

var countBy$1 = countBy;

/**
 * Creates an object that inherits from the `prototype` object. If a
 * `properties` object is given, its own enumerable string keyed properties
 * are assigned to the created object.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties) {
  var result = baseCreate$1(prototype);
  return properties == null ? result : baseAssign(result, properties);
}

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG$1 = 8;

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_FLAG$1, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

// Assign default placeholders.
curry.placeholder = {};

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_RIGHT_FLAG = 16;

/**
 * This method is like `_.curry` except that arguments are applied to `func`
 * in the manner of `_.partialRight` instead of `_.partial`.
 *
 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curryRight(abc);
 *
 * curried(3)(2)(1);
 * // => [1, 2, 3]
 *
 * curried(2, 3)(1);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(3)(1, _)(2);
 * // => [1, 2, 3]
 */
function curryRight(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curryRight.placeholder;
  return result;
}

// Assign default placeholders.
curryRight.placeholder = {};

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root$1.Date.now();
};

var now$1 = now;

/** Error message constants. */
var FUNC_ERROR_TEXT$6 = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$b = Math.max,
    nativeMin$b = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$6);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax$b(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin$b(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now$1();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now$1());
  }

  function debounced() {
    var time = now$1(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks `value` to determine whether a default value should be returned in
 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
 * or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.14.0
 * @category Util
 * @param {*} value The value to check.
 * @param {*} defaultValue The default value.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * _.defaultTo(1, 10);
 * // => 1
 *
 * _.defaultTo(undefined, 10);
 * // => 10
 */
function defaultTo(value, defaultValue) {
  return (value == null || value !== value) ? defaultValue : value;
}

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = baseRest(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          (eq(value, objectProto$8[key]) && !hasOwnProperty$7.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

var defaults$1 = defaults;

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray$1(srcValue),
        isBuff = !isArr && isBuffer$1(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$1(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments$1(srcValue)) {
      newValue = objValue;
      if (isArguments$1(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor$1(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */
function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    stack['delete'](srcValue);
  }
  return objValue;
}

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});

var mergeWith$1 = mergeWith;

/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */
var defaultsDeep = baseRest(function(args) {
  args.push(undefined, customDefaultsMerge);
  return apply(mergeWith$1, undefined, args);
});

var defaultsDeep$1 = defaultsDeep;

/** Error message constants. */
var FUNC_ERROR_TEXT$5 = 'Expected a function';

/**
 * The base implementation of `_.delay` and `_.defer` which accepts `args`
 * to provide to `func`.
 *
 * @private
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {Array} args The arguments to provide to `func`.
 * @returns {number|Object} Returns the timer id or timeout object.
 */
function baseDelay(func, wait, args) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$5);
  }
  return setTimeout(function() { func.apply(undefined, args); }, wait);
}

/**
 * Defers invoking the `func` until the current call stack has cleared. Any
 * additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to defer.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.defer(function(text) {
 *   console.log(text);
 * }, 'deferred');
 * // => Logs 'deferred' after one millisecond.
 */
var defer = baseRest(function(func, args) {
  return baseDelay(func, 1, args);
});

var defer$1 = defer;

/**
 * Invokes `func` after `wait` milliseconds. Any additional arguments are
 * provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.delay(function(text) {
 *   console.log(text);
 * }, 1000, 'later');
 * // => Logs 'later' after one second.
 */
var delay = baseRest(function(func, wait, args) {
  return baseDelay(func, toNumber(wait) || 0, args);
});

var delay$1 = delay;

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$1 = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE$1) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    : [];
});

var difference$1 = difference;

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

/**
 * This method is like `_.difference` except that it accepts `iteratee` which
 * is invoked for each element of `array` and `values` to generate the criterion
 * by which they're compared. The order and references of result values are
 * determined by the first array. The iteratee is invoked with one argument:
 * (value).
 *
 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
 * // => [{ 'x': 2 }]
 */
var differenceBy = baseRest(function(array, values) {
  var iteratee = last(values);
  if (isArrayLikeObject(iteratee)) {
    iteratee = undefined;
  }
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee))
    : [];
});

var differenceBy$1 = differenceBy;

/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */
var differenceWith = baseRest(function(array, values) {
  var comparator = last(values);
  if (isArrayLikeObject(comparator)) {
    comparator = undefined;
  }
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
    : [];
});

var differenceWith$1 = differenceWith;

/**
 * Divide two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {number} dividend The first number in a division.
 * @param {number} divisor The second number in a division.
 * @returns {number} Returns the quotient.
 * @example
 *
 * _.divide(6, 4);
 * // => 1.5
 */
var divide$1 = createMathOperation(function(dividend, divisor) {
  return dividend / divisor;
}, 1);

var divide$2 = divide$1;

/**
 * Creates a slice of `array` with `n` elements dropped from the beginning.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to drop.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.drop([1, 2, 3]);
 * // => [2, 3]
 *
 * _.drop([1, 2, 3], 2);
 * // => [3]
 *
 * _.drop([1, 2, 3], 5);
 * // => []
 *
 * _.drop([1, 2, 3], 0);
 * // => [1, 2, 3]
 */
function drop(array, n, guard) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  n = (guard || n === undefined) ? 1 : toInteger(n);
  return baseSlice(array, n < 0 ? 0 : n, length);
}

/**
 * Creates a slice of `array` with `n` elements dropped from the end.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to drop.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.dropRight([1, 2, 3]);
 * // => [1, 2]
 *
 * _.dropRight([1, 2, 3], 2);
 * // => [1]
 *
 * _.dropRight([1, 2, 3], 5);
 * // => []
 *
 * _.dropRight([1, 2, 3], 0);
 * // => [1, 2, 3]
 */
function dropRight(array, n, guard) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  n = (guard || n === undefined) ? 1 : toInteger(n);
  n = length - n;
  return baseSlice(array, 0, n < 0 ? 0 : n);
}

/**
 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
 * without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {Function} predicate The function invoked per iteration.
 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the slice of `array`.
 */
function baseWhile(array, predicate, isDrop, fromRight) {
  var length = array.length,
      index = fromRight ? length : -1;

  while ((fromRight ? index-- : ++index < length) &&
    predicate(array[index], index, array)) {}

  return isDrop
    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
}

/**
 * Creates a slice of `array` excluding elements dropped from the end.
 * Elements are dropped until `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.dropRightWhile(users, function(o) { return !o.active; });
 * // => objects for ['barney']
 *
 * // The `_.matches` iteratee shorthand.
 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
 * // => objects for ['barney', 'fred']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.dropRightWhile(users, ['active', false]);
 * // => objects for ['barney']
 *
 * // The `_.property` iteratee shorthand.
 * _.dropRightWhile(users, 'active');
 * // => objects for ['barney', 'fred', 'pebbles']
 */
function dropRightWhile(array, predicate) {
  return (array && array.length)
    ? baseWhile(array, baseIteratee(predicate), true, true)
    : [];
}

/**
 * Creates a slice of `array` excluding elements dropped from the beginning.
 * Elements are dropped until `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.dropWhile(users, function(o) { return !o.active; });
 * // => objects for ['pebbles']
 *
 * // The `_.matches` iteratee shorthand.
 * _.dropWhile(users, { 'user': 'barney', 'active': false });
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.dropWhile(users, ['active', false]);
 * // => objects for ['pebbles']
 *
 * // The `_.property` iteratee shorthand.
 * _.dropWhile(users, 'active');
 * // => objects for ['barney', 'fred', 'pebbles']
 */
function dropWhile(array, predicate) {
  return (array && array.length)
    ? baseWhile(array, baseIteratee(predicate), true)
    : [];
}

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray$1(collection) ? arrayEach : baseEach$1;
  return func(collection, castFunction(iteratee));
}

/**
 * A specialized version of `_.forEachRight` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEachRight(array, iteratee) {
  var length = array == null ? 0 : array.length;

  while (length--) {
    if (iteratee(array[length], length, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * This function is like `baseFor` except that it iterates over properties
 * in the opposite order.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseForRight = createBaseFor(true);

var baseForRight$1 = baseForRight;

/**
 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwnRight(object, iteratee) {
  return object && baseForRight$1(object, iteratee, keys);
}

/**
 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEachRight = createBaseEach(baseForOwnRight, true);

var baseEachRight$1 = baseEachRight;

/**
 * This method is like `_.forEach` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @alias eachRight
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEach
 * @example
 *
 * _.forEachRight([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `2` then `1`.
 */
function forEachRight(collection, iteratee) {
  var func = isArray$1(collection) ? arrayEachRight : baseEachRight$1;
  return func(collection, castFunction(iteratee));
}

/**
 * Checks if `string` ends with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=string.length] The position to search up to.
 * @returns {boolean} Returns `true` if `string` ends with `target`,
 *  else `false`.
 * @example
 *
 * _.endsWith('abc', 'c');
 * // => true
 *
 * _.endsWith('abc', 'b');
 * // => false
 *
 * _.endsWith('abc', 'b', 2);
 * // => true
 */
function endsWith(string, target, position) {
  string = toString(string);
  target = baseToString(target);

  var length = string.length;
  position = position === undefined
    ? length
    : baseClamp(toInteger(position), 0, length);

  var end = position;
  position -= target.length;
  return position >= 0 && string.slice(position, end) == target;
}

/**
 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
 * of key-value pairs for `object` corresponding to the property names of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the key-value pairs.
 */
function baseToPairs(object, props) {
  return arrayMap(props, function(key) {
    return [key, object[key]];
  });
}

/**
 * Converts `set` to its value-value pairs.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the value-value pairs.
 */
function setToPairs(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = [value, value];
  });
  return result;
}

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]',
    setTag$3 = '[object Set]';

/**
 * Creates a `_.toPairs` or `_.toPairsIn` function.
 *
 * @private
 * @param {Function} keysFunc The function to get the keys of a given object.
 * @returns {Function} Returns the new pairs function.
 */
function createToPairs(keysFunc) {
  return function(object) {
    var tag = getTag$1(object);
    if (tag == mapTag$3) {
      return mapToArray(object);
    }
    if (tag == setTag$3) {
      return setToPairs(object);
    }
    return baseToPairs(object, keysFunc(object));
  };
}

/**
 * Creates an array of own enumerable string keyed-value pairs for `object`
 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
 * entries are returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias entries
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the key-value pairs.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.toPairs(new Foo);
 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
 */
var toPairs = createToPairs(keys);

var toPairs$1 = toPairs;

/**
 * Creates an array of own and inherited enumerable string keyed-value pairs
 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
 * or set, its entries are returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias entriesIn
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the key-value pairs.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.toPairsIn(new Foo);
 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
 */
var toPairsIn = createToPairs(keysIn);

var toPairsIn$1 = toPairsIn;

/** Used to map characters to HTML entities. */
var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};

/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
var escapeHtmlChar = basePropertyOf(htmlEscapes);

var escapeHtmlChar$1 = escapeHtmlChar;

/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"']/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/**
 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
 * corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */
function escape(string) {
  string = toString(string);
  return (string && reHasUnescapedHtml.test(string))
    ? string.replace(reUnescapedHtml, escapeHtmlChar$1)
    : string;
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    reHasRegExpChar = RegExp(reRegExpChar.source);

/**
 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escapeRegExp('[lodash](https://lodash.com/)');
 * // => '\[lodash\]\(https://lodash\.com/\)'
 */
function escapeRegExp(string) {
  string = toString(string);
  return (string && reHasRegExpChar.test(string))
    ? string.replace(reRegExpChar, '\\$&')
    : string;
}

/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  baseEach$1(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = isArray$1(collection) ? arrayEvery : baseEvery;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate));
}

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH$5 = 4294967295;

/**
 * Converts `value` to an integer suitable for use as the length of an
 * array-like object.
 *
 * **Note:** This method is based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toLength(3.2);
 * // => 3
 *
 * _.toLength(Number.MIN_VALUE);
 * // => 0
 *
 * _.toLength(Infinity);
 * // => 4294967295
 *
 * _.toLength('3.2');
 * // => 3
 */
function toLength(value) {
  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH$5) : 0;
}

/**
 * The base implementation of `_.fill` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to fill.
 * @param {*} value The value to fill `array` with.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns `array`.
 */
function baseFill(array, value, start, end) {
  var length = array.length;

  start = toInteger(start);
  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = (end === undefined || end > length) ? length : toInteger(end);
  if (end < 0) {
    end += length;
  }
  end = start > end ? 0 : toLength(end);
  while (start < end) {
    array[start++] = value;
  }
  return array;
}

/**
 * Fills elements of `array` with `value` from `start` up to, but not
 * including, `end`.
 *
 * **Note:** This method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Array
 * @param {Array} array The array to fill.
 * @param {*} value The value to fill `array` with.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.fill(array, 'a');
 * console.log(array);
 * // => ['a', 'a', 'a']
 *
 * _.fill(Array(3), 2);
 * // => [2, 2, 2]
 *
 * _.fill([4, 6, 8, 10], '*', 1, 3);
 * // => [4, '*', '*', 10]
 */
function fill(array, value, start, end) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
    start = 0;
    end = length;
  }
  return baseFill(array, value, start, end);
}

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach$1(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 *
 * // Combining several predicates using `_.overEvery` or `_.overSome`.
 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
 * // => objects for ['fred', 'barney']
 */
function filter(collection, predicate) {
  var func = isArray$1(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate));
}

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$a = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax$a(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate), index);
}

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

var find$1 = find;

/**
 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
 * without support for iteratee shorthands, which iterates over `collection`
 * using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the found element or its key, else `undefined`.
 */
function baseFindKey(collection, predicate, eachFunc) {
  var result;
  eachFunc(collection, function(value, key, collection) {
    if (predicate(value, key, collection)) {
      result = key;
      return false;
    }
  });
  return result;
}

/**
 * This method is like `_.find` except that it returns the key of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {string|undefined} Returns the key of the matched element,
 *  else `undefined`.
 * @example
 *
 * var users = {
 *   'barney':  { 'age': 36, 'active': true },
 *   'fred':    { 'age': 40, 'active': false },
 *   'pebbles': { 'age': 1,  'active': true }
 * };
 *
 * _.findKey(users, function(o) { return o.age < 40; });
 * // => 'barney' (iteration order is not guaranteed)
 *
 * // The `_.matches` iteratee shorthand.
 * _.findKey(users, { 'age': 1, 'active': true });
 * // => 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findKey(users, ['active', false]);
 * // => 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.findKey(users, 'active');
 * // => 'barney'
 */
function findKey(object, predicate) {
  return baseFindKey(object, baseIteratee(predicate), baseForOwn);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$9 = Math.max,
    nativeMin$a = Math.min;

/**
 * This method is like `_.findIndex` except that it iterates over elements
 * of `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
 * // => 2
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
 * // => 0
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastIndex(users, ['active', false]);
 * // => 2
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastIndex(users, 'active');
 * // => 0
 */
function findLastIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== undefined) {
    index = toInteger(fromIndex);
    index = fromIndex < 0
      ? nativeMax$9(length + index, 0)
      : nativeMin$a(index, length - 1);
  }
  return baseFindIndex(array, baseIteratee(predicate), index, true);
}

/**
 * This method is like `_.find` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=collection.length-1] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * _.findLast([1, 2, 3, 4], function(n) {
 *   return n % 2 == 1;
 * });
 * // => 3
 */
var findLast = createFind(findLastIndex);

var findLast$1 = findLast;

/**
 * This method is like `_.findKey` except that it iterates over elements of
 * a collection in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {string|undefined} Returns the key of the matched element,
 *  else `undefined`.
 * @example
 *
 * var users = {
 *   'barney':  { 'age': 36, 'active': true },
 *   'fred':    { 'age': 40, 'active': false },
 *   'pebbles': { 'age': 1,  'active': true }
 * };
 *
 * _.findLastKey(users, function(o) { return o.age < 40; });
 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastKey(users, { 'age': 36, 'active': true });
 * // => 'barney'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastKey(users, ['active', false]);
 * // => 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastKey(users, 'active');
 * // => 'pebbles'
 */
function findLastKey(object, predicate) {
  return baseFindKey(object, baseIteratee(predicate), baseForOwnRight);
}

/**
 * Gets the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias first
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the first element of `array`.
 * @example
 *
 * _.head([1, 2, 3]);
 * // => 1
 *
 * _.head([]);
 * // => undefined
 */
function head(array) {
  return (array && array.length) ? array[0] : undefined;
}

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach$1(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray$1(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee));
}

/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0;

/**
 * This method is like `_.flatMap` except that it recursively flattens the
 * mapped results.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [[[n, n]]];
 * }
 *
 * _.flatMapDeep([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMapDeep(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), INFINITY$2);
}

/**
 * This method is like `_.flatMap` except that it recursively flattens the
 * mapped results up to `depth` times.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {number} [depth=1] The maximum recursion depth.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [[[n, n]]];
 * }
 *
 * _.flatMapDepth([1, 2], duplicate, 2);
 * // => [[1, 1], [2, 2]]
 */
function flatMapDepth(collection, iteratee, depth) {
  depth = depth === undefined ? 1 : toInteger(depth);
  return baseFlatten(map(collection, iteratee), depth);
}

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Recursively flattens `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flattenDeep([1, [2, [3, [4]], 5]]);
 * // => [1, 2, 3, 4, 5]
 */
function flattenDeep(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, INFINITY$1) : [];
}

/**
 * Recursively flatten `array` up to `depth` times.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @param {number} [depth=1] The maximum recursion depth.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * var array = [1, [2, [3, [4]], 5]];
 *
 * _.flattenDepth(array, 1);
 * // => [1, 2, [3, [4]], 5]
 *
 * _.flattenDepth(array, 2);
 * // => [1, 2, 3, [4], 5]
 */
function flattenDepth(array, depth) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  depth = depth === undefined ? 1 : toInteger(depth);
  return baseFlatten(array, depth);
}

/** Used to compose bitmasks for function metadata. */
var WRAP_FLIP_FLAG = 512;

/**
 * Creates a function that invokes `func` with arguments reversed.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to flip arguments for.
 * @returns {Function} Returns the new flipped function.
 * @example
 *
 * var flipped = _.flip(function() {
 *   return _.toArray(arguments);
 * });
 *
 * flipped('a', 'b', 'c', 'd');
 * // => ['d', 'c', 'b', 'a']
 */
function flip$1(func) {
  return createWrap(func, WRAP_FLIP_FLAG);
}

/**
 * Computes `number` rounded down to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round down.
 * @param {number} [precision=0] The precision to round down to.
 * @returns {number} Returns the rounded down number.
 * @example
 *
 * _.floor(4.006);
 * // => 4
 *
 * _.floor(0.046, 2);
 * // => 0.04
 *
 * _.floor(4060, -2);
 * // => 4000
 */
var floor$1 = createRound('floor');

var floor$2 = floor$1;

/** Error message constants. */
var FUNC_ERROR_TEXT$4 = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG$1 = 32,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG$1 = 256;

/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */
function createFlow(fromRight) {
  return flatRest(function(funcs) {
    var length = funcs.length,
        index = length,
        prereq = LodashWrapper.prototype.thru;

    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$4);
      }
      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
        var wrapper = new LodashWrapper([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];

      var funcName = getFuncName(func),
          data = funcName == 'wrapper' ? getData$1(func) : undefined;

      if (data && isLaziable(data[0]) &&
            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG$1 | WRAP_REARG_FLAG$1) &&
            !data[4].length && data[9] == 1
          ) {
        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = (func.length == 1 && isLaziable(func))
          ? wrapper[funcName]()
          : wrapper.thru(func);
      }
    }
    return function() {
      var args = arguments,
          value = args[0];

      if (wrapper && args.length == 1 && isArray$1(value)) {
        return wrapper.plant(value).value();
      }
      var index = 0,
          result = length ? funcs[index].apply(this, args) : value;

      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}

/**
 * Creates a function that returns the result of invoking the given functions
 * with the `this` binding of the created function, where each successive
 * invocation is supplied the return value of the previous.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flowRight
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flow([_.add, square]);
 * addSquare(1, 2);
 * // => 9
 */
var flow = createFlow();

var flow$1 = flow;

/**
 * This method is like `_.flow` except that it creates a function that
 * invokes the given functions from right to left.
 *
 * @static
 * @since 3.0.0
 * @memberOf _
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flow
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flowRight([square, _.add]);
 * addSquare(1, 2);
 * // => 9
 */
var flowRight = createFlow(true);

var flowRight$1 = flowRight;

/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */
function forIn(object, iteratee) {
  return object == null
    ? object
    : baseFor$1(object, castFunction(iteratee), keysIn);
}

/**
 * This method is like `_.forIn` except that it iterates over properties of
 * `object` in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forInRight(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
 */
function forInRight(object, iteratee) {
  return object == null
    ? object
    : baseForRight$1(object, castFunction(iteratee), keysIn);
}

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forOwn(object, iteratee) {
  return object && baseForOwn(object, castFunction(iteratee));
}

/**
 * This method is like `_.forOwn` except that it iterates over properties of
 * `object` in the opposite order.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwnRight(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
 */
function forOwnRight(object, iteratee) {
  return object && baseForOwnRight(object, castFunction(iteratee));
}

/**
 * The inverse of `_.toPairs`; this method returns an object composed
 * from key-value `pairs`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} pairs The key-value pairs.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.fromPairs([['a', 1], ['b', 2]]);
 * // => { 'a': 1, 'b': 2 }
 */
function fromPairs(pairs) {
  var index = -1,
      length = pairs == null ? 0 : pairs.length,
      result = {};

  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }
  return result;
}

/**
 * The base implementation of `_.functions` which creates an array of
 * `object` function property names filtered from `props`.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Array} props The property names to filter.
 * @returns {Array} Returns the function names.
 */
function baseFunctions(object, props) {
  return arrayFilter(props, function(key) {
    return isFunction(object[key]);
  });
}

/**
 * Creates an array of function property names from own enumerable properties
 * of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns the function names.
 * @see _.functionsIn
 * @example
 *
 * function Foo() {
 *   this.a = _.constant('a');
 *   this.b = _.constant('b');
 * }
 *
 * Foo.prototype.c = _.constant('c');
 *
 * _.functions(new Foo);
 * // => ['a', 'b']
 */
function functions(object) {
  return object == null ? [] : baseFunctions(object, keys(object));
}

/**
 * Creates an array of function property names from own and inherited
 * enumerable properties of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns the function names.
 * @see _.functions
 * @example
 *
 * function Foo() {
 *   this.a = _.constant('a');
 *   this.b = _.constant('b');
 * }
 *
 * Foo.prototype.c = _.constant('c');
 *
 * _.functionsIn(new Foo);
 * // => ['a', 'b', 'c']
 */
function functionsIn(object) {
  return object == null ? [] : baseFunctions(object, keysIn(object));
}

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */
var groupBy = createAggregator(function(result, value, key) {
  if (hasOwnProperty$6.call(result, key)) {
    result[key].push(value);
  } else {
    baseAssignValue(result, key, [value]);
  }
});

var groupBy$1 = groupBy;

/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */
function baseGt(value, other) {
  return value > other;
}

/**
 * Creates a function that performs a relational operation on two values.
 *
 * @private
 * @param {Function} operator The function to perform the operation.
 * @returns {Function} Returns the new relational operation function.
 */
function createRelationalOperation(operator) {
  return function(value, other) {
    if (!(typeof value == 'string' && typeof other == 'string')) {
      value = toNumber(value);
      other = toNumber(other);
    }
    return operator(value, other);
  };
}

/**
 * Checks if `value` is greater than `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 * @see _.lt
 * @example
 *
 * _.gt(3, 1);
 * // => true
 *
 * _.gt(3, 3);
 * // => false
 *
 * _.gt(1, 3);
 * // => false
 */
var gt = createRelationalOperation(baseGt);

var gt$1 = gt;

/**
 * Checks if `value` is greater than or equal to `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than or equal to
 *  `other`, else `false`.
 * @see _.lte
 * @example
 *
 * _.gte(3, 1);
 * // => true
 *
 * _.gte(3, 3);
 * // => true
 *
 * _.gte(1, 3);
 * // => false
 */
var gte = createRelationalOperation(function(value, other) {
  return value >= other;
});

var gte$1 = gte;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty$5.call(object, key);
}

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$8 = Math.max,
    nativeMin$9 = Math.min;

/**
 * The base implementation of `_.inRange` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */
function baseInRange(number, start, end) {
  return number >= nativeMin$9(start, end) && number < nativeMax$8(start, end);
}

/**
 * Checks if `n` is between `start` and up to, but not including, `end`. If
 * `end` is not specified, it's set to `start` with `start` then set to `0`.
 * If `start` is greater than `end` the params are swapped to support
 * negative ranges.
 *
 * @static
 * @memberOf _
 * @since 3.3.0
 * @category Number
 * @param {number} number The number to check.
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 * @see _.range, _.rangeRight
 * @example
 *
 * _.inRange(3, 2, 4);
 * // => true
 *
 * _.inRange(4, 8);
 * // => true
 *
 * _.inRange(4, 2);
 * // => false
 *
 * _.inRange(2, 2);
 * // => false
 *
 * _.inRange(1.2, 2);
 * // => true
 *
 * _.inRange(5.2, 4);
 * // => false
 *
 * _.inRange(-3, -2, -6);
 * // => true
 */
function inRange(number, start, end) {
  start = toFinite(start);
  if (end === undefined) {
    end = start;
    start = 0;
  } else {
    end = toFinite(end);
  }
  number = toNumber(number);
  return baseInRange(number, start, end);
}

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$7 = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax$7(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$6 = Math.max;

/**
 * Gets the index at which the first occurrence of `value` is found in `array`
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. If `fromIndex` is negative, it's used as the
 * offset from the end of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.indexOf([1, 2, 1, 2], 2);
 * // => 1
 *
 * // Search from the `fromIndex`.
 * _.indexOf([1, 2, 1, 2], 2, 2);
 * // => 3
 */
function indexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax$6(length + index, 0);
  }
  return baseIndexOf(array, value, index);
}

/**
 * Gets all but the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.initial([1, 2, 3]);
 * // => [1, 2]
 */
function initial(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseSlice(array, 0, -1) : [];
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$8 = Math.min;

/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */
function baseIntersection(arrays, iteratee, comparator) {
  var includes = comparator ? arrayIncludesWith : arrayIncludes,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];

  while (othIndex--) {
    var array = arrays[othIndex];
    if (othIndex && iteratee) {
      array = arrayMap(array, baseUnary(iteratee));
    }
    maxLength = nativeMin$8(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
      ? new SetCache(othIndex && array)
      : undefined;
  }
  array = arrays[0];

  var index = -1,
      seen = caches[0];

  outer:
  while (++index < length && result.length < maxLength) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (!(seen
          ? cacheHas(seen, computed)
          : includes(result, computed, comparator)
        )) {
      othIndex = othLength;
      while (--othIndex) {
        var cache = caches[othIndex];
        if (!(cache
              ? cacheHas(cache, computed)
              : includes(arrays[othIndex], computed, comparator))
            ) {
          continue outer;
        }
      }
      if (seen) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

/**
 * Casts `value` to an empty array if it's not an array like object.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array|Object} Returns the cast array-like object.
 */
function castArrayLikeObject(value) {
  return isArrayLikeObject(value) ? value : [];
}

/**
 * Creates an array of unique values that are included in all given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersection([2, 1], [2, 3]);
 * // => [2]
 */
var intersection = baseRest(function(arrays) {
  var mapped = arrayMap(arrays, castArrayLikeObject);
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped)
    : [];
});

var intersection$1 = intersection;

/**
 * This method is like `_.intersection` except that it accepts `iteratee`
 * which is invoked for each element of each `arrays` to generate the criterion
 * by which they're compared. The order and references of result values are
 * determined by the first array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [2.1]
 *
 * // The `_.property` iteratee shorthand.
 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }]
 */
var intersectionBy = baseRest(function(arrays) {
  var iteratee = last(arrays),
      mapped = arrayMap(arrays, castArrayLikeObject);

  if (iteratee === last(mapped)) {
    iteratee = undefined;
  } else {
    mapped.pop();
  }
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped, baseIteratee(iteratee))
    : [];
});

var intersectionBy$1 = intersectionBy;

/**
 * This method is like `_.intersection` except that it accepts `comparator`
 * which is invoked to compare elements of `arrays`. The order and references
 * of result values are determined by the first array. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.intersectionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }]
 */
var intersectionWith = baseRest(function(arrays) {
  var comparator = last(arrays),
      mapped = arrayMap(arrays, castArrayLikeObject);

  comparator = typeof comparator == 'function' ? comparator : undefined;
  if (comparator) {
    mapped.pop();
  }
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped, undefined, comparator)
    : [];
});

var intersectionWith$1 = intersectionWith;

/**
 * The base implementation of `_.invert` and `_.invertBy` which inverts
 * `object` with values transformed by `iteratee` and set by `setter`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform values.
 * @param {Object} accumulator The initial inverted object.
 * @returns {Function} Returns `accumulator`.
 */
function baseInverter(object, setter, iteratee, accumulator) {
  baseForOwn(object, function(value, key, object) {
    setter(accumulator, iteratee(value), key, object);
  });
  return accumulator;
}

/**
 * Creates a function like `_.invertBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} toIteratee The function to resolve iteratees.
 * @returns {Function} Returns the new inverter function.
 */
function createInverter(setter, toIteratee) {
  return function(object, iteratee) {
    return baseInverter(object, setter, toIteratee(iteratee), {});
  };
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$5.toString;

/**
 * Creates an object composed of the inverted keys and values of `object`.
 * If `object` contains duplicate values, subsequent values overwrite
 * property assignments of previous values.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Object
 * @param {Object} object The object to invert.
 * @returns {Object} Returns the new inverted object.
 * @example
 *
 * var object = { 'a': 1, 'b': 2, 'c': 1 };
 *
 * _.invert(object);
 * // => { '1': 'c', '2': 'b' }
 */
var invert = createInverter(function(result, value, key) {
  if (value != null &&
      typeof value.toString != 'function') {
    value = nativeObjectToString$1.call(value);
  }

  result[value] = key;
}, constant$1(identity));

var invert$1 = invert;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$4.toString;

/**
 * This method is like `_.invert` except that the inverted object is generated
 * from the results of running each element of `object` thru `iteratee`. The
 * corresponding inverted value of each inverted key is an array of keys
 * responsible for generating the inverted value. The iteratee is invoked
 * with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.1.0
 * @category Object
 * @param {Object} object The object to invert.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Object} Returns the new inverted object.
 * @example
 *
 * var object = { 'a': 1, 'b': 2, 'c': 1 };
 *
 * _.invertBy(object);
 * // => { '1': ['a', 'c'], '2': ['b'] }
 *
 * _.invertBy(object, function(value) {
 *   return 'group' + value;
 * });
 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
 */
var invertBy = createInverter(function(result, value, key) {
  if (value != null &&
      typeof value.toString != 'function') {
    value = nativeObjectToString.call(value);
  }

  if (hasOwnProperty$4.call(result, value)) {
    result[value].push(key);
  } else {
    result[value] = [key];
  }
}, baseIteratee);

var invertBy$1 = invertBy;

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

/**
 * The base implementation of `_.invoke` without support for individual
 * method arguments.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {Array} args The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 */
function baseInvoke(object, path, args) {
  path = castPath(path, object);
  object = parent(object, path);
  var func = object == null ? object : object[toKey(last(path))];
  return func == null ? undefined : apply(func, object, args);
}

/**
 * Invokes the method at `path` of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
 *
 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
 * // => [2, 3]
 */
var invoke = baseRest(baseInvoke);

var invoke$1 = invoke;

/**
 * Invokes the method at `path` of each element in `collection`, returning
 * an array of the results of each invoked method. Any additional arguments
 * are provided to each invoked method. If `path` is a function, it's invoked
 * for, and `this` bound to, each element in `collection`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Array|Function|string} path The path of the method to invoke or
 *  the function invoked per iteration.
 * @param {...*} [args] The arguments to invoke each method with.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
 * // => [[1, 5, 7], [1, 2, 3]]
 *
 * _.invokeMap([123, 456], String.prototype.split, '');
 * // => [['1', '2', '3'], ['4', '5', '6']]
 */
var invokeMap = baseRest(function(collection, path, args) {
  var index = -1,
      isFunc = typeof path == 'function',
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach$1(collection, function(value) {
    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
  });
  return result;
});

var invokeMap$1 = invokeMap;

var arrayBufferTag = '[object ArrayBuffer]';

/**
 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
 */
function baseIsArrayBuffer(value) {
  return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
}

/* Node.js helper references. */
var nodeIsArrayBuffer = nodeUtil$1 && nodeUtil$1.isArrayBuffer;

/**
 * Checks if `value` is classified as an `ArrayBuffer` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
 * @example
 *
 * _.isArrayBuffer(new ArrayBuffer(2));
 * // => true
 *
 * _.isArrayBuffer(new Array(2));
 * // => false
 */
var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

var isArrayBuffer$1 = isArrayBuffer;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike(value) && baseGetTag(value) == boolTag);
}

/** `Object#toString` result references. */
var dateTag = '[object Date]';

/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */
function baseIsDate(value) {
  return isObjectLike(value) && baseGetTag(value) == dateTag;
}

/* Node.js helper references. */
var nodeIsDate = nodeUtil$1 && nodeUtil$1.isDate;

/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * _.isDate(new Date);
 * // => true
 *
 * _.isDate('Mon April 23 2012');
 * // => false
 */
var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

var isDate$1 = isDate;

/**
 * Checks if `value` is likely a DOM element.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
 * @example
 *
 * _.isElement(document.body);
 * // => true
 *
 * _.isElement('<body>');
 * // => false
 */
function isElement(value) {
  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
}

/** `Object#toString` result references. */
var mapTag$2 = '[object Map]',
    setTag$2 = '[object Set]';

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray$1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {
    return !value.length;
  }
  var tag = getTag$1(value);
  if (tag == mapTag$2 || tag == setTag$2) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty$3.call(value, key)) {
      return false;
    }
  }
  return true;
}

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, othValue) {
 *   if (isGreeting(objValue) && isGreeting(othValue)) {
 *     return true;
 *   }
 * }
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */
function isEqualWith(value, other, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  var result = customizer ? customizer(value, other) : undefined;
  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsFinite = root$1.isFinite;

/**
 * Checks if `value` is a finite primitive number.
 *
 * **Note:** This method is based on
 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 * @example
 *
 * _.isFinite(3);
 * // => true
 *
 * _.isFinite(Number.MIN_VALUE);
 * // => true
 *
 * _.isFinite(Infinity);
 * // => false
 *
 * _.isFinite('3');
 * // => false
 */
function isFinite$1(value) {
  return typeof value == 'number' && nativeIsFinite(value);
}

/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */
function isInteger(value) {
  return typeof value == 'number' && value == toInteger(value);
}

/**
 * Performs a partial deep comparison between `object` and `source` to
 * determine if `object` contains equivalent property values.
 *
 * **Note:** This method is equivalent to `_.matches` when `source` is
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 *
 * _.isMatch(object, { 'b': 2 });
 * // => true
 *
 * _.isMatch(object, { 'b': 1 });
 * // => false
 */
function isMatch(object, source) {
  return object === source || baseIsMatch(object, source, getMatchData(source));
}

/**
 * This method is like `_.isMatch` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with five
 * arguments: (objValue, srcValue, index|key, object, source).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, srcValue) {
 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
 *     return true;
 *   }
 * }
 *
 * var object = { 'greeting': 'hello' };
 * var source = { 'greeting': 'hi' };
 *
 * _.isMatchWith(object, source, customizer);
 * // => true
 */
function isMatchWith(object, source, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseIsMatch(object, source, getMatchData(source), customizer);
}

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN$1(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

/**
 * Checks if `func` is capable of being masked.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
 */
var isMaskable = coreJsData$1 ? isFunction : stubFalse;

var isMaskable$1 = isMaskable;

/** Error message constants. */
var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.';

/**
 * Checks if `value` is a pristine native function.
 *
 * **Note:** This method can't reliably detect native functions in the presence
 * of the core-js package because core-js circumvents this kind of detection.
 * Despite multiple requests, the core-js maintainer has made it clear: any
 * attempt to fix the detection will be obstructed. As a result, we're left
 * with little choice but to throw an error. Unfortunately, this also affects
 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
 * which rely on core-js.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (isMaskable$1(value)) {
    throw new Error(CORE_ERROR_TEXT);
  }
  return baseIsNative(value);
}

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

/** `Object#toString` result references. */
var regexpTag = '[object RegExp]';

/**
 * The base implementation of `_.isRegExp` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 */
function baseIsRegExp(value) {
  return isObjectLike(value) && baseGetTag(value) == regexpTag;
}

/* Node.js helper references. */
var nodeIsRegExp = nodeUtil$1 && nodeUtil$1.isRegExp;

/**
 * Checks if `value` is classified as a `RegExp` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 * @example
 *
 * _.isRegExp(/abc/);
 * // => true
 *
 * _.isRegExp('/abc/');
 * // => false
 */
var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

var isRegExp$1 = isRegExp;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$4 = 9007199254740991;

/**
 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
 * double precision number which isn't the result of a rounded unsafe integer.
 *
 * **Note:** This method is based on
 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
 * @example
 *
 * _.isSafeInteger(3);
 * // => true
 *
 * _.isSafeInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isSafeInteger(Infinity);
 * // => false
 *
 * _.isSafeInteger('3');
 * // => false
 */
function isSafeInteger(value) {
  return isInteger(value) && value >= -MAX_SAFE_INTEGER$4 && value <= MAX_SAFE_INTEGER$4;
}

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

/** `Object#toString` result references. */
var weakMapTag = '[object WeakMap]';

/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */
function isWeakMap(value) {
  return isObjectLike(value) && getTag$1(value) == weakMapTag;
}

/** `Object#toString` result references. */
var weakSetTag = '[object WeakSet]';

/**
 * Checks if `value` is classified as a `WeakSet` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
 * @example
 *
 * _.isWeakSet(new WeakSet);
 * // => true
 *
 * _.isWeakSet(new Set);
 * // => false
 */
function isWeakSet(value) {
  return isObjectLike(value) && baseGetTag(value) == weakSetTag;
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$3 = 1;

/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */
function iteratee(func) {
  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG$3));
}

/** Used for built-in method references. */
var arrayProto$4 = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeJoin = arrayProto$4.join;

/**
 * Converts all elements in `array` into a string separated by `separator`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to convert.
 * @param {string} [separator=','] The element separator.
 * @returns {string} Returns the joined string.
 * @example
 *
 * _.join(['a', 'b', 'c'], '~');
 * // => 'a~b~c'
 */
function join(array, separator) {
  return array == null ? '' : nativeJoin.call(array, separator);
}

/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */
var kebabCase = createCompounder(function(result, word, index) {
  return result + (index ? '-' : '') + word.toLowerCase();
});

var kebabCase$1 = kebabCase;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */
var keyBy = createAggregator(function(result, value, key) {
  baseAssignValue(result, key, value);
});

var keyBy$1 = keyBy;

/**
 * A specialized version of `_.lastIndexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictLastIndexOf(array, value, fromIndex) {
  var index = fromIndex + 1;
  while (index--) {
    if (array[index] === value) {
      return index;
    }
  }
  return index;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$5 = Math.max,
    nativeMin$7 = Math.min;

/**
 * This method is like `_.indexOf` except that it iterates over elements of
 * `array` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.lastIndexOf([1, 2, 1, 2], 2);
 * // => 3
 *
 * // Search from the `fromIndex`.
 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
 * // => 1
 */
function lastIndexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length;
  if (fromIndex !== undefined) {
    index = toInteger(fromIndex);
    index = index < 0 ? nativeMax$5(length + index, 0) : nativeMin$7(index, length - 1);
  }
  return value === value
    ? strictLastIndexOf(array, value, index)
    : baseFindIndex(array, baseIsNaN, index, true);
}

/**
 * Converts `string`, as space separated words, to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the lower cased string.
 * @example
 *
 * _.lowerCase('--Foo-Bar--');
 * // => 'foo bar'
 *
 * _.lowerCase('fooBar');
 * // => 'foo bar'
 *
 * _.lowerCase('__FOO_BAR__');
 * // => 'foo bar'
 */
var lowerCase = createCompounder(function(result, word, index) {
  return result + (index ? ' ' : '') + word.toLowerCase();
});

var lowerCase$1 = lowerCase;

/**
 * Converts the first character of `string` to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.lowerFirst('Fred');
 * // => 'fred'
 *
 * _.lowerFirst('FRED');
 * // => 'fRED'
 */
var lowerFirst = createCaseFirst('toLowerCase');

var lowerFirst$1 = lowerFirst;

/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */
function baseLt(value, other) {
  return value < other;
}

/**
 * Checks if `value` is less than `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 * @see _.gt
 * @example
 *
 * _.lt(1, 3);
 * // => true
 *
 * _.lt(3, 3);
 * // => false
 *
 * _.lt(3, 1);
 * // => false
 */
var lt = createRelationalOperation(baseLt);

var lt$1 = lt;

/**
 * Checks if `value` is less than or equal to `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than or equal to
 *  `other`, else `false`.
 * @see _.gte
 * @example
 *
 * _.lte(1, 3);
 * // => true
 *
 * _.lte(3, 3);
 * // => true
 *
 * _.lte(3, 1);
 * // => false
 */
var lte = createRelationalOperation(function(value, other) {
  return value <= other;
});

var lte$1 = lte;

/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */
function mapKeys(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, iteratee(value, key, object), value);
  });
  return result;
}

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$2 = 1;

/**
 * Creates a function that performs a partial deep comparison between a given
 * object and `source`, returning `true` if the given object has equivalent
 * property values, else `false`.
 *
 * **Note:** The created function is equivalent to `_.isMatch` with `source`
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * **Note:** Multiple values can be checked by combining several matchers
 * using `_.overSome`
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 1, 'b': 2, 'c': 3 },
 *   { 'a': 4, 'b': 5, 'c': 6 }
 * ];
 *
 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
 *
 * // Checking for several possible values
 * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
 */
function matches(source) {
  return baseMatches(baseClone(source, CLONE_DEEP_FLAG$2));
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1;

/**
 * Creates a function that performs a partial deep comparison between the
 * value at `path` of a given object to `srcValue`, returning `true` if the
 * object value is equivalent, else `false`.
 *
 * **Note:** Partial comparisons will match empty array and empty object
 * `srcValue` values against any array or object value, respectively. See
 * `_.isEqual` for a list of supported value comparisons.
 *
 * **Note:** Multiple values can be checked by combining several matchers
 * using `_.overSome`
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 1, 'b': 2, 'c': 3 },
 *   { 'a': 4, 'b': 5, 'c': 6 }
 * ];
 *
 * _.find(objects, _.matchesProperty('a', 4));
 * // => { 'a': 4, 'b': 5, 'c': 6 }
 *
 * // Checking for several possible values
 * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
 */
function matchesProperty(path, srcValue) {
  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG$1));
}

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */
function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined
          ? (current === current && !isSymbol(current))
          : comparator(current, computed)
        )) {
      var computed = current,
          result = value;
    }
  }
  return result;
}

/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */
function max$1(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseGt)
    : undefined;
}

/**
 * This method is like `_.max` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.maxBy(objects, function(o) { return o.n; });
 * // => { 'n': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.maxBy(objects, 'n');
 * // => { 'n': 2 }
 */
function maxBy(array, iteratee) {
  return (array && array.length)
    ? baseExtremum(array, baseIteratee(iteratee), baseGt)
    : undefined;
}

/**
 * The base implementation of `_.sum` and `_.sumBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */
function baseSum(array, iteratee) {
  var result,
      index = -1,
      length = array.length;

  while (++index < length) {
    var current = iteratee(array[index]);
    if (current !== undefined) {
      result = result === undefined ? current : (result + current);
    }
  }
  return result;
}

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/**
 * The base implementation of `_.mean` and `_.meanBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the mean.
 */
function baseMean(array, iteratee) {
  var length = array == null ? 0 : array.length;
  return length ? (baseSum(array, iteratee) / length) : NAN;
}

/**
 * Computes the mean of the values in `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the mean.
 * @example
 *
 * _.mean([4, 2, 8, 6]);
 * // => 5
 */
function mean(array) {
  return baseMean(array, identity);
}

/**
 * This method is like `_.mean` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the value to be averaged.
 * The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the mean.
 * @example
 *
 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
 *
 * _.meanBy(objects, function(o) { return o.n; });
 * // => 5
 *
 * // The `_.property` iteratee shorthand.
 * _.meanBy(objects, 'n');
 * // => 5
 */
function meanBy(array, iteratee) {
  return baseMean(array, baseIteratee(iteratee));
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

var merge$1 = merge;

/**
 * Creates a function that invokes the method at `path` of a given object.
 * Any additional arguments are provided to the invoked method.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Util
 * @param {Array|string} path The path of the method to invoke.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {Function} Returns the new invoker function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': _.constant(2) } },
 *   { 'a': { 'b': _.constant(1) } }
 * ];
 *
 * _.map(objects, _.method('a.b'));
 * // => [2, 1]
 *
 * _.map(objects, _.method(['a', 'b']));
 * // => [2, 1]
 */
var method = baseRest(function(path, args) {
  return function(object) {
    return baseInvoke(object, path, args);
  };
});

var method$1 = method;

/**
 * The opposite of `_.method`; this method creates a function that invokes
 * the method at a given path of `object`. Any additional arguments are
 * provided to the invoked method.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Util
 * @param {Object} object The object to query.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {Function} Returns the new invoker function.
 * @example
 *
 * var array = _.times(3, _.constant),
 *     object = { 'a': array, 'b': array, 'c': array };
 *
 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 * // => [2, 0]
 *
 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 * // => [2, 0]
 */
var methodOf = baseRest(function(object, args) {
  return function(path) {
    return baseInvoke(object, path, args);
  };
});

var methodOf$1 = methodOf;

/**
 * Computes the minimum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * _.min([4, 2, 8, 6]);
 * // => 2
 *
 * _.min([]);
 * // => undefined
 */
function min$1(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseLt)
    : undefined;
}

/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */
function minBy(array, iteratee) {
  return (array && array.length)
    ? baseExtremum(array, baseIteratee(iteratee), baseLt)
    : undefined;
}

/**
 * Adds all own enumerable string keyed function properties of a source
 * object to the destination object. If `object` is a function, then methods
 * are added to its prototype as well.
 *
 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 * avoid conflicts caused by modifying the original.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {Function|Object} [object=lodash] The destination object.
 * @param {Object} source The object of functions to add.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
 * @returns {Function|Object} Returns `object`.
 * @example
 *
 * function vowels(string) {
 *   return _.filter(string, function(v) {
 *     return /[aeiou]/i.test(v);
 *   });
 * }
 *
 * _.mixin({ 'vowels': vowels });
 * _.vowels('fred');
 * // => ['e']
 *
 * _('fred').vowels().value();
 * // => ['e']
 *
 * _.mixin({ 'vowels': vowels }, { 'chain': false });
 * _('fred').vowels();
 * // => ['e']
 */
function mixin$1(object, source, options) {
  var props = keys(source),
      methodNames = baseFunctions(source, props);

  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
      isFunc = isFunction(object);

  arrayEach(methodNames, function(methodName) {
    var func = source[methodName];
    object[methodName] = func;
    if (isFunc) {
      object.prototype[methodName] = function() {
        var chainAll = this.__chain__;
        if (chain || chainAll) {
          var result = object(this.__wrapped__),
              actions = result.__actions__ = copyArray(this.__actions__);

          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
          result.__chain__ = chainAll;
          return result;
        }
        return func.apply(object, arrayPush([this.value()], arguments));
      };
    }
  });

  return object;
}

/**
 * Multiply two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {number} multiplier The first number in a multiplication.
 * @param {number} multiplicand The second number in a multiplication.
 * @returns {number} Returns the product.
 * @example
 *
 * _.multiply(6, 4);
 * // => 24
 */
var multiply = createMathOperation(function(multiplier, multiplicand) {
  return multiplier * multiplicand;
}, 1);

var multiply$1 = multiply;

/** Error message constants. */
var FUNC_ERROR_TEXT$3 = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$3);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */
function iteratorToArray(iterator) {
  var data,
      result = [];

  while (!(data = iterator.next()).done) {
    result.push(data.value);
  }
  return result;
}

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]',
    setTag$1 = '[object Set]';

/** Built-in value references. */
var symIterator$1 = Symbol$2 ? Symbol$2.iterator : undefined;

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value);
  }
  if (symIterator$1 && value[symIterator$1]) {
    return iteratorToArray(value[symIterator$1]());
  }
  var tag = getTag$1(value),
      func = tag == mapTag$1 ? mapToArray : (tag == setTag$1 ? setToArray : values);

  return func(value);
}

/**
 * Gets the next value on a wrapped object following the
 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
 *
 * @name next
 * @memberOf _
 * @since 4.0.0
 * @category Seq
 * @returns {Object} Returns the next iterator value.
 * @example
 *
 * var wrapped = _([1, 2]);
 *
 * wrapped.next();
 * // => { 'done': false, 'value': 1 }
 *
 * wrapped.next();
 * // => { 'done': false, 'value': 2 }
 *
 * wrapped.next();
 * // => { 'done': true, 'value': undefined }
 */
function wrapperNext() {
  if (this.__values__ === undefined) {
    this.__values__ = toArray(this.value());
  }
  var done = this.__index__ >= this.__values__.length,
      value = done ? undefined : this.__values__[this.__index__++];

  return { 'done': done, 'value': value };
}

/**
 * The base implementation of `_.nth` which doesn't coerce arguments.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {number} n The index of the element to return.
 * @returns {*} Returns the nth element of `array`.
 */
function baseNth(array, n) {
  var length = array.length;
  if (!length) {
    return;
  }
  n += n < 0 ? length : 0;
  return isIndex(n, length) ? array[n] : undefined;
}

/**
 * Gets the element at index `n` of `array`. If `n` is negative, the nth
 * element from the end is returned.
 *
 * @static
 * @memberOf _
 * @since 4.11.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=0] The index of the element to return.
 * @returns {*} Returns the nth element of `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'd'];
 *
 * _.nth(array, 1);
 * // => 'b'
 *
 * _.nth(array, -2);
 * // => 'c';
 */
function nth(array, n) {
  return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
}

/**
 * Creates a function that gets the argument at index `n`. If `n` is negative,
 * the nth argument from the end is returned.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {number} [n=0] The index of the argument to return.
 * @returns {Function} Returns the new pass-thru function.
 * @example
 *
 * var func = _.nthArg(1);
 * func('a', 'b', 'c', 'd');
 * // => 'b'
 *
 * var func = _.nthArg(-2);
 * func('a', 'b', 'c', 'd');
 * // => 'c'
 */
function nthArg(n) {
  n = toInteger(n);
  return baseRest(function(args) {
    return baseNth(args, n);
  });
}

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

var omit$1 = omit;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = arrayMap(getAllKeysIn(object), function(prop) {
    return [prop];
  });
  predicate = baseIteratee(predicate);
  return basePickBy(object, props, function(value, path) {
    return predicate(value, path[0]);
  });
}

/**
 * The opposite of `_.pickBy`; this method creates an object composed of
 * the own and inherited enumerable string keyed properties of `object` that
 * `predicate` doesn't return truthy for. The predicate is invoked with two
 * arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omitBy(object, _.isNumber);
 * // => { 'b': '2' }
 */
function omitBy(object, predicate) {
  return pickBy(object, negate(baseIteratee(predicate)));
}

/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
function once(func) {
  return before(2, func);
}

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */
function baseSortBy(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray$1(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

/**
 * This method is like `_.sortBy` except that it allows specifying the sort
 * orders of the iteratees to sort by. If `orders` is unspecified, all values
 * are sorted in ascending order. Otherwise, specify an order of "desc" for
 * descending or "asc" for ascending sort order of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @param {string[]} [orders] The sort orders of `iteratees`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 34 },
 *   { 'user': 'fred',   'age': 40 },
 *   { 'user': 'barney', 'age': 36 }
 * ];
 *
 * // Sort by `user` in ascending order and by `age` in descending order.
 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
 */
function orderBy(collection, iteratees, orders, guard) {
  if (collection == null) {
    return [];
  }
  if (!isArray$1(iteratees)) {
    iteratees = iteratees == null ? [] : [iteratees];
  }
  orders = guard ? undefined : orders;
  if (!isArray$1(orders)) {
    orders = orders == null ? [] : [orders];
  }
  return baseOrderBy(collection, iteratees, orders);
}

/**
 * Creates a function like `_.over`.
 *
 * @private
 * @param {Function} arrayFunc The function to iterate over iteratees.
 * @returns {Function} Returns the new over function.
 */
function createOver(arrayFunc) {
  return flatRest(function(iteratees) {
    iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
    return baseRest(function(args) {
      var thisArg = this;
      return arrayFunc(iteratees, function(iteratee) {
        return apply(iteratee, thisArg, args);
      });
    });
  });
}

/**
 * Creates a function that invokes `iteratees` with the arguments it receives
 * and returns their results.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to invoke.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var func = _.over([Math.max, Math.min]);
 *
 * func(1, 2, 3, 4);
 * // => [4, 1]
 */
var over = createOver(arrayMap);

var over$1 = over;

/**
 * A `baseRest` alias which can be replaced with `identity` by module
 * replacement plugins.
 *
 * @private
 * @type {Function}
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
var castRest = baseRest;

var castRest$1 = castRest;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$6 = Math.min;

/**
 * Creates a function that invokes `func` with its arguments transformed.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Function
 * @param {Function} func The function to wrap.
 * @param {...(Function|Function[])} [transforms=[_.identity]]
 *  The argument transforms.
 * @returns {Function} Returns the new function.
 * @example
 *
 * function doubled(n) {
 *   return n * 2;
 * }
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var func = _.overArgs(function(x, y) {
 *   return [x, y];
 * }, [square, doubled]);
 *
 * func(9, 3);
 * // => [81, 6]
 *
 * func(10, 5);
 * // => [100, 10]
 */
var overArgs = castRest$1(function(func, transforms) {
  transforms = (transforms.length == 1 && isArray$1(transforms[0]))
    ? arrayMap(transforms[0], baseUnary(baseIteratee))
    : arrayMap(baseFlatten(transforms, 1), baseUnary(baseIteratee));

  var funcsLength = transforms.length;
  return baseRest(function(args) {
    var index = -1,
        length = nativeMin$6(args.length, funcsLength);

    while (++index < length) {
      args[index] = transforms[index].call(this, args[index]);
    }
    return apply(func, this, args);
  });
});

var overArgs$1 = overArgs;

/**
 * Creates a function that checks if **all** of the `predicates` return
 * truthy when invoked with the arguments it receives.
 *
 * Following shorthands are possible for providing predicates.
 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {...(Function|Function[])} [predicates=[_.identity]]
 *  The predicates to check.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var func = _.overEvery([Boolean, isFinite]);
 *
 * func('1');
 * // => true
 *
 * func(null);
 * // => false
 *
 * func(NaN);
 * // => false
 */
var overEvery = createOver(arrayEvery);

var overEvery$1 = overEvery;

/**
 * Creates a function that checks if **any** of the `predicates` return
 * truthy when invoked with the arguments it receives.
 *
 * Following shorthands are possible for providing predicates.
 * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
 * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {...(Function|Function[])} [predicates=[_.identity]]
 *  The predicates to check.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var func = _.overSome([Boolean, isFinite]);
 *
 * func('1');
 * // => true
 *
 * func(null);
 * // => true
 *
 * func(NaN);
 * // => false
 *
 * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
 * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
 */
var overSome = createOver(arraySome);

var overSome$1 = overSome;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$3 = 9007199254740991;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor$3 = Math.floor;

/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */
function baseRepeat(string, n) {
  var result = '';
  if (!string || n < 1 || n > MAX_SAFE_INTEGER$3) {
    return result;
  }
  // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do {
    if (n % 2) {
      result += string;
    }
    n = nativeFloor$3(n / 2);
    if (n) {
      string += string;
    }
  } while (n);

  return result;
}

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

var asciiSize$1 = asciiSize;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;
  while (reUnicode.test(string)) {
    ++result;
  }
  return result;
}

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize$1(string);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil$2 = Math.ceil;

/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);

  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil$2(length / stringSize(chars)));
  return hasUnicode(chars)
    ? castSlice(stringToArray(result), 0, length).join('')
    : result.slice(0, length);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil$1 = Math.ceil,
    nativeFloor$2 = Math.floor;

/**
 * Pads `string` on the left and right sides if it's shorter than `length`.
 * Padding characters are truncated if they can't be evenly divided by `length`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.pad('abc', 8);
 * // => '  abc   '
 *
 * _.pad('abc', 8, '_-');
 * // => '_-abc_-_'
 *
 * _.pad('abc', 3);
 * // => 'abc'
 */
function pad(string, length, chars) {
  string = toString(string);
  length = toInteger(length);

  var strLength = length ? stringSize(string) : 0;
  if (!length || strLength >= length) {
    return string;
  }
  var mid = (length - strLength) / 2;
  return (
    createPadding(nativeFloor$2(mid), chars) +
    string +
    createPadding(nativeCeil$1(mid), chars)
  );
}

/**
 * Pads `string` on the right side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padEnd('abc', 6);
 * // => 'abc   '
 *
 * _.padEnd('abc', 6, '_-');
 * // => 'abc_-_'
 *
 * _.padEnd('abc', 3);
 * // => 'abc'
 */
function padEnd(string, length, chars) {
  string = toString(string);
  length = toInteger(length);

  var strLength = length ? stringSize(string) : 0;
  return (length && strLength < length)
    ? (string + createPadding(length - strLength, chars))
    : string;
}

/**
 * Pads `string` on the left side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padStart('abc', 6);
 * // => '   abc'
 *
 * _.padStart('abc', 6, '_-');
 * // => '_-_abc'
 *
 * _.padStart('abc', 3);
 * // => 'abc'
 */
function padStart(string, length, chars) {
  string = toString(string);
  length = toInteger(length);

  var strLength = length ? stringSize(string) : 0;
  return (length && strLength < length)
    ? (createPadding(length - strLength, chars) + string)
    : string;
}

/** Used to match leading whitespace. */
var reTrimStart$1 = /^\s+/;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeParseInt = root$1.parseInt;

/**
 * Converts `string` to an integer of the specified radix. If `radix` is
 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
 * hexadecimal, in which case a `radix` of `16` is used.
 *
 * **Note:** This method aligns with the
 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category String
 * @param {string} string The string to convert.
 * @param {number} [radix=10] The radix to interpret `value` by.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.parseInt('08');
 * // => 8
 *
 * _.map(['6', '08', '10'], _.parseInt);
 * // => [6, 8, 10]
 */
function parseInt$1(string, radix, guard) {
  if (guard || radix == null) {
    radix = 0;
  } else if (radix) {
    radix = +radix;
  }
  return nativeParseInt(toString(string).replace(reTrimStart$1, ''), radix || 0);
}

/** Used to compose bitmasks for function metadata. */
var WRAP_PARTIAL_FLAG = 32;

/**
 * Creates a function that invokes `func` with `partials` prepended to the
 * arguments it receives. This method is like `_.bind` except it does **not**
 * alter the `this` binding.
 *
 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 0.2.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var sayHelloTo = _.partial(greet, 'hello');
 * sayHelloTo('fred');
 * // => 'hello fred'
 *
 * // Partially applied with placeholders.
 * var greetFred = _.partial(greet, _, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 */
var partial = baseRest(function(func, partials) {
  var holders = replaceHolders(partials, getHolder(partial));
  return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
});

// Assign default placeholders.
partial.placeholder = {};

var partial$1 = partial;

/** Used to compose bitmasks for function metadata. */
var WRAP_PARTIAL_RIGHT_FLAG = 64;

/**
 * This method is like `_.partial` except that partially applied arguments
 * are appended to the arguments it receives.
 *
 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
 * builds, may be used as a placeholder for partially applied arguments.
 *
 * **Note:** This method doesn't set the "length" property of partially
 * applied functions.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Function
 * @param {Function} func The function to partially apply arguments to.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new partially applied function.
 * @example
 *
 * function greet(greeting, name) {
 *   return greeting + ' ' + name;
 * }
 *
 * var greetFred = _.partialRight(greet, 'fred');
 * greetFred('hi');
 * // => 'hi fred'
 *
 * // Partially applied with placeholders.
 * var sayHelloTo = _.partialRight(greet, 'hello', _);
 * sayHelloTo('fred');
 * // => 'hello fred'
 */
var partialRight = baseRest(function(func, partials) {
  var holders = replaceHolders(partials, getHolder(partialRight));
  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
});

// Assign default placeholders.
partialRight.placeholder = {};

var partialRight$1 = partialRight;

/**
 * Creates an array of elements split into two groups, the first of which
 * contains elements `predicate` returns truthy for, the second of which
 * contains elements `predicate` returns falsey for. The predicate is
 * invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of grouped elements.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': false },
 *   { 'user': 'fred',    'age': 40, 'active': true },
 *   { 'user': 'pebbles', 'age': 1,  'active': false }
 * ];
 *
 * _.partition(users, function(o) { return o.active; });
 * // => objects for [['fred'], ['barney', 'pebbles']]
 *
 * // The `_.matches` iteratee shorthand.
 * _.partition(users, { 'age': 1, 'active': false });
 * // => objects for [['pebbles'], ['barney', 'fred']]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.partition(users, ['active', false]);
 * // => objects for [['barney', 'pebbles'], ['fred']]
 *
 * // The `_.property` iteratee shorthand.
 * _.partition(users, 'active');
 * // => objects for [['fred'], ['barney', 'pebbles']]
 */
var partition = createAggregator(function(result, value, key) {
  result[key ? 0 : 1].push(value);
}, function() { return [[], []]; });

var partition$1 = partition;

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

var pick$1 = pick;

/**
 * Creates a clone of the chain sequence planting `value` as the wrapped value.
 *
 * @name plant
 * @memberOf _
 * @since 3.2.0
 * @category Seq
 * @param {*} value The value to plant.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2]).map(square);
 * var other = wrapped.plant([3, 4]);
 *
 * other.value();
 * // => [9, 16]
 *
 * wrapped.value();
 * // => [1, 4]
 */
function wrapperPlant(value) {
  var result,
      parent = this;

  while (parent instanceof baseLodash) {
    var clone = wrapperClone(parent);
    clone.__index__ = 0;
    clone.__values__ = undefined;
    if (result) {
      previous.__wrapped__ = clone;
    } else {
      result = clone;
    }
    var previous = clone;
    parent = parent.__wrapped__;
  }
  previous.__wrapped__ = value;
  return result;
}

/**
 * The opposite of `_.property`; this method creates a function that returns
 * the value at a given path of `object`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var array = [0, 1, 2],
 *     object = { 'a': array, 'b': array, 'c': array };
 *
 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
 * // => [2, 0]
 *
 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
 * // => [2, 0]
 */
function propertyOf(object) {
  return function(path) {
    return object == null ? undefined : baseGet(object, path);
  };
}

/**
 * This function is like `baseIndexOf` except that it accepts a comparator.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOfWith(array, value, fromIndex, comparator) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (comparator(array[index], value)) {
      return index;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto$3 = Array.prototype;

/** Built-in value references. */
var splice$1 = arrayProto$3.splice;

/**
 * The base implementation of `_.pullAllBy` without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 */
function basePullAll(array, values, iteratee, comparator) {
  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
      index = -1,
      length = values.length,
      seen = array;

  if (array === values) {
    values = copyArray(values);
  }
  if (iteratee) {
    seen = arrayMap(array, baseUnary(iteratee));
  }
  while (++index < length) {
    var fromIndex = 0,
        value = values[index],
        computed = iteratee ? iteratee(value) : value;

    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
      if (seen !== array) {
        splice$1.call(seen, fromIndex, 1);
      }
      splice$1.call(array, fromIndex, 1);
    }
  }
  return array;
}

/**
 * This method is like `_.pull` except that it accepts an array of values to remove.
 *
 * **Note:** Unlike `_.difference`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pullAll(array, ['a', 'c']);
 * console.log(array);
 * // => ['b', 'b']
 */
function pullAll(array, values) {
  return (array && array.length && values && values.length)
    ? basePullAll(array, values)
    : array;
}

/**
 * Removes all given values from `array` using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
 * to remove elements from an array by predicate.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {...*} [values] The values to remove.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
 *
 * _.pull(array, 'a', 'c');
 * console.log(array);
 * // => ['b', 'b']
 */
var pull = baseRest(pullAll);

var pull$1 = pull;

/**
 * This method is like `_.pullAll` except that it accepts `iteratee` which is
 * invoked for each element of `array` and `values` to generate the criterion
 * by which they're compared. The iteratee is invoked with one argument: (value).
 *
 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
 *
 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
 * console.log(array);
 * // => [{ 'x': 2 }]
 */
function pullAllBy(array, values, iteratee) {
  return (array && array.length && values && values.length)
    ? basePullAll(array, values, baseIteratee(iteratee))
    : array;
}

/**
 * This method is like `_.pullAll` except that it accepts `comparator` which
 * is invoked to compare elements of `array` to `values`. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
 *
 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
 * console.log(array);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
 */
function pullAllWith(array, values, comparator) {
  return (array && array.length && values && values.length)
    ? basePullAll(array, values, undefined, comparator)
    : array;
}

/** Used for built-in method references. */
var arrayProto$2 = Array.prototype;

/** Built-in value references. */
var splice = arrayProto$2.splice;

/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */
function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];
    if (length == lastIndex || index !== previous) {
      var previous = index;
      if (isIndex(index)) {
        splice.call(array, index, 1);
      } else {
        baseUnset(array, index);
      }
    }
  }
  return array;
}

/**
 * Removes elements from `array` corresponding to `indexes` and returns an
 * array of removed elements.
 *
 * **Note:** Unlike `_.at`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = ['a', 'b', 'c', 'd'];
 * var pulled = _.pullAt(array, [1, 3]);
 *
 * console.log(array);
 * // => ['a', 'c']
 *
 * console.log(pulled);
 * // => ['b', 'd']
 */
var pullAt = flatRest(function(array, indexes) {
  var length = array == null ? 0 : array.length,
      result = baseAt(array, indexes);

  basePullAt(array, arrayMap(indexes, function(index) {
    return isIndex(index, length) ? +index : index;
  }).sort(compareAscending));

  return result;
});

var pullAt$1 = pullAt;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor$1 = Math.floor,
    nativeRandom$1 = Math.random;

/**
 * The base implementation of `_.random` without support for returning
 * floating-point numbers.
 *
 * @private
 * @param {number} lower The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the random number.
 */
function baseRandom(lower, upper) {
  return lower + nativeFloor$1(nativeRandom$1() * (upper - lower + 1));
}

/** Built-in method references without a dependency on `root`. */
var freeParseFloat = parseFloat;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$5 = Math.min,
    nativeRandom = Math.random;

/**
 * Produces a random number between the inclusive `lower` and `upper` bounds.
 * If only one argument is provided a number between `0` and the given number
 * is returned. If `floating` is `true`, or either `lower` or `upper` are
 * floats, a floating-point number is returned instead of an integer.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Number
 * @param {number} [lower=0] The lower bound.
 * @param {number} [upper=1] The upper bound.
 * @param {boolean} [floating] Specify returning a floating-point number.
 * @returns {number} Returns the random number.
 * @example
 *
 * _.random(0, 5);
 * // => an integer between 0 and 5
 *
 * _.random(5);
 * // => also an integer between 0 and 5
 *
 * _.random(5, true);
 * // => a floating-point number between 0 and 5
 *
 * _.random(1.2, 5.2);
 * // => a floating-point number between 1.2 and 5.2
 */
function random$1(lower, upper, floating) {
  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    upper = floating = undefined;
  }
  if (floating === undefined) {
    if (typeof upper == 'boolean') {
      floating = upper;
      upper = undefined;
    }
    else if (typeof lower == 'boolean') {
      floating = lower;
      lower = undefined;
    }
  }
  if (lower === undefined && upper === undefined) {
    lower = 0;
    upper = 1;
  }
  else {
    lower = toFinite(lower);
    if (upper === undefined) {
      upper = lower;
      lower = 0;
    } else {
      upper = toFinite(upper);
    }
  }
  if (lower > upper) {
    var temp = lower;
    lower = upper;
    upper = temp;
  }
  if (floating || lower % 1 || upper % 1) {
    var rand = nativeRandom();
    return nativeMin$5(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
  }
  return baseRandom(lower, upper);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax$4 = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax$4(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */
function createRange(fromRight) {
  return function(start, end, step) {
    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
      end = step = undefined;
    }
    // Ensure the sign of `-0` is preserved.
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
    return baseRange(start, end, step, fromRight);
  };
}

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */
var range = createRange();

var range$1 = range;

/**
 * This method is like `_.range` except that it populates values in
 * descending order.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.range
 * @example
 *
 * _.rangeRight(4);
 * // => [3, 2, 1, 0]
 *
 * _.rangeRight(-4);
 * // => [-3, -2, -1, 0]
 *
 * _.rangeRight(1, 5);
 * // => [4, 3, 2, 1]
 *
 * _.rangeRight(0, 20, 5);
 * // => [15, 10, 5, 0]
 *
 * _.rangeRight(0, -4, -1);
 * // => [-3, -2, -1, 0]
 *
 * _.rangeRight(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.rangeRight(0);
 * // => []
 */
var rangeRight = createRange(true);

var rangeRight$1 = rangeRight;

/** Used to compose bitmasks for function metadata. */
var WRAP_REARG_FLAG = 256;

/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */
var rearg = flatRest(function(func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});

var rearg$1 = rearg;

/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */
function reduce(collection, iteratee, accumulator) {
  var func = isArray$1(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach$1);
}

/**
 * A specialized version of `_.reduceRight` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the last element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduceRight(array, iteratee, accumulator, initAccum) {
  var length = array == null ? 0 : array.length;
  if (initAccum && length) {
    accumulator = array[--length];
  }
  while (length--) {
    accumulator = iteratee(accumulator, array[length], length, array);
  }
  return accumulator;
}

/**
 * This method is like `_.reduce` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduce
 * @example
 *
 * var array = [[0, 1], [2, 3], [4, 5]];
 *
 * _.reduceRight(array, function(flattened, other) {
 *   return flattened.concat(other);
 * }, []);
 * // => [4, 5, 2, 3, 0, 1]
 */
function reduceRight(collection, iteratee, accumulator) {
  var func = isArray$1(collection) ? arrayReduceRight : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEachRight$1);
}

/**
 * The opposite of `_.filter`; this method returns the elements of `collection`
 * that `predicate` does **not** return truthy for.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.filter
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': true }
 * ];
 *
 * _.reject(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.reject(users, { 'age': 40, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.reject(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.reject(users, 'active');
 * // => objects for ['barney']
 */
function reject(collection, predicate) {
  var func = isArray$1(collection) ? arrayFilter : baseFilter;
  return func(collection, negate(baseIteratee(predicate)));
}

/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = baseIteratee(predicate);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  basePullAt(array, indexes);
  return result;
}

/**
 * Repeats the given string `n` times.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to repeat.
 * @param {number} [n=1] The number of times to repeat the string.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the repeated string.
 * @example
 *
 * _.repeat('*', 3);
 * // => '***'
 *
 * _.repeat('abc', 2);
 * // => 'abcabc'
 *
 * _.repeat('abc', 0);
 * // => ''
 */
function repeat(string, n, guard) {
  if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
    n = 1;
  } else {
    n = toInteger(n);
  }
  return baseRepeat(toString(string), n);
}

/**
 * Replaces matches for `pattern` in `string` with `replacement`.
 *
 * **Note:** This method is based on
 * [`String#replace`](https://mdn.io/String/replace).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to modify.
 * @param {RegExp|string} pattern The pattern to replace.
 * @param {Function|string} replacement The match replacement.
 * @returns {string} Returns the modified string.
 * @example
 *
 * _.replace('Hi Fred', 'Fred', 'Barney');
 * // => 'Hi Barney'
 */
function replace() {
  var args = arguments,
      string = toString(args[0]);

  return args.length < 3 ? string : string.replace(args[1], args[2]);
}

/** Error message constants. */
var FUNC_ERROR_TEXT$2 = 'Expected a function';

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as
 * an array.
 *
 * **Note:** This method is based on the
 * [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function rest(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$2);
  }
  start = start === undefined ? start : toInteger(start);
  return baseRest(func, start);
}

/**
 * This method is like `_.get` except that if the resolved value is a
 * function it's invoked with the `this` binding of its parent object and
 * its result is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to resolve.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
 *
 * _.result(object, 'a[0].b.c1');
 * // => 3
 *
 * _.result(object, 'a[0].b.c2');
 * // => 4
 *
 * _.result(object, 'a[0].b.c3', 'default');
 * // => 'default'
 *
 * _.result(object, 'a[0].b.c3', _.constant('default'));
 * // => 'default'
 */
function result(object, path, defaultValue) {
  path = castPath(path, object);

  var index = -1,
      length = path.length;

  // Ensure the loop is entered when path is empty.
  if (!length) {
    length = 1;
    object = undefined;
  }
  while (++index < length) {
    var value = object == null ? undefined : object[toKey(path[index])];
    if (value === undefined) {
      index = length;
      value = defaultValue;
    }
    object = isFunction(value) ? value.call(object) : value;
  }
  return object;
}

/** Used for built-in method references. */
var arrayProto$1 = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeReverse = arrayProto$1.reverse;

/**
 * Reverses `array` so that the first element becomes the last, the second
 * element becomes the second to last, and so on.
 *
 * **Note:** This method mutates `array` and is based on
 * [`Array#reverse`](https://mdn.io/Array/reverse).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.reverse(array);
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */
function reverse(array) {
  return array == null ? array : nativeReverse.call(array);
}

/**
 * Computes `number` rounded to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round.
 * @param {number} [precision=0] The precision to round to.
 * @returns {number} Returns the rounded number.
 * @example
 *
 * _.round(4.006);
 * // => 4
 *
 * _.round(4.006, 2);
 * // => 4.01
 *
 * _.round(4060, -2);
 * // => 4100
 */
var round$1 = createRound('round');

var round$2 = round$1;

/**
 * A specialized version of `_.sample` for arrays.
 *
 * @private
 * @param {Array} array The array to sample.
 * @returns {*} Returns the random element.
 */
function arraySample(array) {
  var length = array.length;
  return length ? array[baseRandom(0, length - 1)] : undefined;
}

/**
 * The base implementation of `_.sample`.
 *
 * @private
 * @param {Array|Object} collection The collection to sample.
 * @returns {*} Returns the random element.
 */
function baseSample(collection) {
  return arraySample(values(collection));
}

/**
 * Gets a random element from `collection`.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to sample.
 * @returns {*} Returns the random element.
 * @example
 *
 * _.sample([1, 2, 3, 4]);
 * // => 2
 */
function sample(collection) {
  var func = isArray$1(collection) ? arraySample : baseSample;
  return func(collection);
}

/**
 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
 *
 * @private
 * @param {Array} array The array to shuffle.
 * @param {number} [size=array.length] The size of `array`.
 * @returns {Array} Returns `array`.
 */
function shuffleSelf(array, size) {
  var index = -1,
      length = array.length,
      lastIndex = length - 1;

  size = size === undefined ? length : size;
  while (++index < size) {
    var rand = baseRandom(index, lastIndex),
        value = array[rand];

    array[rand] = array[index];
    array[index] = value;
  }
  array.length = size;
  return array;
}

/**
 * A specialized version of `_.sampleSize` for arrays.
 *
 * @private
 * @param {Array} array The array to sample.
 * @param {number} n The number of elements to sample.
 * @returns {Array} Returns the random elements.
 */
function arraySampleSize(array, n) {
  return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
}

/**
 * The base implementation of `_.sampleSize` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to sample.
 * @param {number} n The number of elements to sample.
 * @returns {Array} Returns the random elements.
 */
function baseSampleSize(collection, n) {
  var array = values(collection);
  return shuffleSelf(array, baseClamp(n, 0, array.length));
}

/**
 * Gets `n` random elements at unique keys from `collection` up to the
 * size of `collection`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to sample.
 * @param {number} [n=1] The number of elements to sample.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the random elements.
 * @example
 *
 * _.sampleSize([1, 2, 3], 2);
 * // => [3, 1]
 *
 * _.sampleSize([1, 2, 3], 4);
 * // => [2, 3, 1]
 */
function sampleSize(collection, n, guard) {
  if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
    n = 1;
  } else {
    n = toInteger(n);
  }
  var func = isArray$1(collection) ? arraySampleSize : baseSampleSize;
  return func(collection, n);
}

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

/**
 * This method is like `_.set` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.setWith(object, '[0][1]', 'a', Object);
 * // => { '0': { '1': 'a' } }
 */
function setWith(object, path, value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseSet(object, path, value, customizer);
}

/**
 * A specialized version of `_.shuffle` for arrays.
 *
 * @private
 * @param {Array} array The array to shuffle.
 * @returns {Array} Returns the new shuffled array.
 */
function arrayShuffle(array) {
  return shuffleSelf(copyArray(array));
}

/**
 * The base implementation of `_.shuffle`.
 *
 * @private
 * @param {Array|Object} collection The collection to shuffle.
 * @returns {Array} Returns the new shuffled array.
 */
function baseShuffle(collection) {
  return shuffleSelf(values(collection));
}

/**
 * Creates an array of shuffled values, using a version of the
 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to shuffle.
 * @returns {Array} Returns the new shuffled array.
 * @example
 *
 * _.shuffle([1, 2, 3, 4]);
 * // => [4, 1, 3, 2]
 */
function shuffle(collection) {
  var func = isArray$1(collection) ? arrayShuffle : baseShuffle;
  return func(collection);
}

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }
  var tag = getTag$1(collection);
  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }
  return baseKeys(collection).length;
}

/**
 * Creates a slice of `array` from `start` up to, but not including, `end`.
 *
 * **Note:** This method is used instead of
 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
 * returned.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function slice(array, start, end) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
    start = 0;
    end = length;
  }
  else {
    start = start == null ? 0 : toInteger(start);
    end = end === undefined ? length : toInteger(end);
  }
  return baseSlice(array, start, end);
}

/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */
var snakeCase = createCompounder(function(result, word, index) {
  return result + (index ? '_' : '') + word.toLowerCase();
});

var snakeCase$1 = snakeCase;

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach$1(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray$1(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate));
}

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

var sortBy$1 = sortBy;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH$4 = 4294967295,
    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH$4 - 1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor = Math.floor,
    nativeMin$4 = Math.min;

/**
 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
 * which invokes `iteratee` for `value` and each element of `array` to compute
 * their sort ranking. The iteratee is invoked with one argument; (value).
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} iteratee The iteratee invoked per element.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */
function baseSortedIndexBy(array, value, iteratee, retHighest) {
  var low = 0,
      high = array == null ? 0 : array.length;
  if (high === 0) {
    return 0;
  }

  value = iteratee(value);
  var valIsNaN = value !== value,
      valIsNull = value === null,
      valIsSymbol = isSymbol(value),
      valIsUndefined = value === undefined;

  while (low < high) {
    var mid = nativeFloor((low + high) / 2),
        computed = iteratee(array[mid]),
        othIsDefined = computed !== undefined,
        othIsNull = computed === null,
        othIsReflexive = computed === computed,
        othIsSymbol = isSymbol(computed);

    if (valIsNaN) {
      var setLow = retHighest || othIsReflexive;
    } else if (valIsUndefined) {
      setLow = othIsReflexive && (retHighest || othIsDefined);
    } else if (valIsNull) {
      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    } else if (valIsSymbol) {
      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    } else if (othIsNull || othIsSymbol) {
      setLow = false;
    } else {
      setLow = retHighest ? (computed <= value) : (computed < value);
    }
    if (setLow) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  return nativeMin$4(high, MAX_ARRAY_INDEX);
}

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH$3 = 4294967295,
    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH$3 >>> 1;

/**
 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
 * performs a binary search of `array` to determine the index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */
function baseSortedIndex(array, value, retHighest) {
  var low = 0,
      high = array == null ? low : array.length;

  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    while (low < high) {
      var mid = (low + high) >>> 1,
          computed = array[mid];

      if (computed !== null && !isSymbol(computed) &&
          (retHighest ? (computed <= value) : (computed < value))) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return high;
  }
  return baseSortedIndexBy(array, value, identity, retHighest);
}

/**
 * Uses a binary search to determine the lowest index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedIndex([30, 50], 40);
 * // => 1
 */
function sortedIndex(array, value) {
  return baseSortedIndex(array, value);
}

/**
 * This method is like `_.sortedIndex` except that it accepts `iteratee`
 * which is invoked for `value` and each element of `array` to compute their
 * sort ranking. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * var objects = [{ 'x': 4 }, { 'x': 5 }];
 *
 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
 * // => 0
 */
function sortedIndexBy(array, value, iteratee) {
  return baseSortedIndexBy(array, value, baseIteratee(iteratee));
}

/**
 * This method is like `_.indexOf` except that it performs a binary
 * search on a sorted `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
 * // => 1
 */
function sortedIndexOf(array, value) {
  var length = array == null ? 0 : array.length;
  if (length) {
    var index = baseSortedIndex(array, value);
    if (index < length && eq(array[index], value)) {
      return index;
    }
  }
  return -1;
}

/**
 * This method is like `_.sortedIndex` except that it returns the highest
 * index at which `value` should be inserted into `array` in order to
 * maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
 * // => 4
 */
function sortedLastIndex(array, value) {
  return baseSortedIndex(array, value, true);
}

/**
 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
 * which is invoked for `value` and each element of `array` to compute their
 * sort ranking. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * var objects = [{ 'x': 4 }, { 'x': 5 }];
 *
 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
 * // => 1
 *
 * // The `_.property` iteratee shorthand.
 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
 * // => 1
 */
function sortedLastIndexBy(array, value, iteratee) {
  return baseSortedIndexBy(array, value, baseIteratee(iteratee), true);
}

/**
 * This method is like `_.lastIndexOf` except that it performs a binary
 * search on a sorted `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
 * // => 3
 */
function sortedLastIndexOf(array, value) {
  var length = array == null ? 0 : array.length;
  if (length) {
    var index = baseSortedIndex(array, value, true) - 1;
    if (eq(array[index], value)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseSortedUniq(array, iteratee) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    if (!index || !eq(computed, seen)) {
      var seen = computed;
      result[resIndex++] = value === 0 ? 0 : value;
    }
  }
  return result;
}

/**
 * This method is like `_.uniq` except that it's designed and optimized
 * for sorted arrays.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.sortedUniq([1, 1, 2]);
 * // => [1, 2]
 */
function sortedUniq(array) {
  return (array && array.length)
    ? baseSortedUniq(array)
    : [];
}

/**
 * This method is like `_.uniqBy` except that it's designed and optimized
 * for sorted arrays.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
 * // => [1.1, 2.3]
 */
function sortedUniqBy(array, iteratee) {
  return (array && array.length)
    ? baseSortedUniq(array, baseIteratee(iteratee))
    : [];
}

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH$2 = 4294967295;

/**
 * Splits `string` by `separator`.
 *
 * **Note:** This method is based on
 * [`String#split`](https://mdn.io/String/split).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to split.
 * @param {RegExp|string} separator The separator pattern to split by.
 * @param {number} [limit] The length to truncate results to.
 * @returns {Array} Returns the string segments.
 * @example
 *
 * _.split('a-b-c', '-', 2);
 * // => ['a', 'b']
 */
function split(string, separator, limit) {
  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
    separator = limit = undefined;
  }
  limit = limit === undefined ? MAX_ARRAY_LENGTH$2 : limit >>> 0;
  if (!limit) {
    return [];
  }
  string = toString(string);
  if (string && (
        typeof separator == 'string' ||
        (separator != null && !isRegExp$1(separator))
      )) {
    separator = baseToString(separator);
    if (!separator && hasUnicode(string)) {
      return castSlice(stringToArray(string), 0, limit);
    }
  }
  return string.split(separator, limit);
}

/** Error message constants. */
var FUNC_ERROR_TEXT$1 = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$3 = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * create function and an array of arguments much like
 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
 *
 * **Note:** This method is based on the
 * [spread operator](https://mdn.io/spread_operator).
 *
 * @static
 * @memberOf _
 * @since 3.2.0
 * @category Function
 * @param {Function} func The function to spread arguments over.
 * @param {number} [start=0] The start position of the spread.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.spread(function(who, what) {
 *   return who + ' says ' + what;
 * });
 *
 * say(['fred', 'hello']);
 * // => 'fred says hello'
 *
 * var numbers = Promise.all([
 *   Promise.resolve(40),
 *   Promise.resolve(36)
 * ]);
 *
 * numbers.then(_.spread(function(x, y) {
 *   return x + y;
 * }));
 * // => a Promise of 76
 */
function spread(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  start = start == null ? 0 : nativeMax$3(toInteger(start), 0);
  return baseRest(function(args) {
    var array = args[start],
        otherArgs = castSlice(args, 0, start);

    if (array) {
      arrayPush(otherArgs, array);
    }
    return apply(func, this, otherArgs);
  });
}

/**
 * Converts `string` to
 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
 *
 * @static
 * @memberOf _
 * @since 3.1.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the start cased string.
 * @example
 *
 * _.startCase('--foo-bar--');
 * // => 'Foo Bar'
 *
 * _.startCase('fooBar');
 * // => 'Foo Bar'
 *
 * _.startCase('__FOO_BAR__');
 * // => 'FOO BAR'
 */
var startCase = createCompounder(function(result, word, index) {
  return result + (index ? ' ' : '') + upperFirst$1(word);
});

var startCase$1 = startCase;

/**
 * Checks if `string` starts with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=0] The position to search from.
 * @returns {boolean} Returns `true` if `string` starts with `target`,
 *  else `false`.
 * @example
 *
 * _.startsWith('abc', 'a');
 * // => true
 *
 * _.startsWith('abc', 'b');
 * // => false
 *
 * _.startsWith('abc', 'b', 1);
 * // => true
 */
function startsWith(string, target, position) {
  string = toString(string);
  position = position == null
    ? 0
    : baseClamp(toInteger(position), 0, string.length);

  target = baseToString(target);
  return string.slice(position, position + target.length) == target;
}

/**
 * This method returns a new empty object.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Object} Returns the new empty object.
 * @example
 *
 * var objects = _.times(2, _.stubObject);
 *
 * console.log(objects);
 * // => [{}, {}]
 *
 * console.log(objects[0] === objects[1]);
 * // => false
 */
function stubObject() {
  return {};
}

/**
 * This method returns an empty string.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {string} Returns the empty string.
 * @example
 *
 * _.times(2, _.stubString);
 * // => ['', '']
 */
function stubString() {
  return '';
}

/**
 * This method returns `true`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `true`.
 * @example
 *
 * _.times(2, _.stubTrue);
 * // => [true, true]
 */
function stubTrue() {
  return true;
}

/**
 * Subtract two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {number} minuend The first number in a subtraction.
 * @param {number} subtrahend The second number in a subtraction.
 * @returns {number} Returns the difference.
 * @example
 *
 * _.subtract(6, 4);
 * // => 2
 */
var subtract = createMathOperation(function(minuend, subtrahend) {
  return minuend - subtrahend;
}, 0);

var subtract$1 = subtract;

/**
 * Computes the sum of the values in `array`.
 *
 * @static
 * @memberOf _
 * @since 3.4.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {number} Returns the sum.
 * @example
 *
 * _.sum([4, 2, 8, 6]);
 * // => 20
 */
function sum$1(array) {
  return (array && array.length)
    ? baseSum(array, identity)
    : 0;
}

/**
 * This method is like `_.sum` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the value to be summed.
 * The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the sum.
 * @example
 *
 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
 *
 * _.sumBy(objects, function(o) { return o.n; });
 * // => 20
 *
 * // The `_.property` iteratee shorthand.
 * _.sumBy(objects, 'n');
 * // => 20
 */
function sumBy(array, iteratee) {
  return (array && array.length)
    ? baseSum(array, baseIteratee(iteratee))
    : 0;
}

/**
 * Gets all but the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.tail([1, 2, 3]);
 * // => [2, 3]
 */
function tail(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseSlice(array, 1, length) : [];
}

/**
 * Creates a slice of `array` with `n` elements taken from the beginning.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.take([1, 2, 3]);
 * // => [1]
 *
 * _.take([1, 2, 3], 2);
 * // => [1, 2]
 *
 * _.take([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.take([1, 2, 3], 0);
 * // => []
 */
function take(array, n, guard) {
  if (!(array && array.length)) {
    return [];
  }
  n = (guard || n === undefined) ? 1 : toInteger(n);
  return baseSlice(array, 0, n < 0 ? 0 : n);
}

/**
 * Creates a slice of `array` with `n` elements taken from the end.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.takeRight([1, 2, 3]);
 * // => [3]
 *
 * _.takeRight([1, 2, 3], 2);
 * // => [2, 3]
 *
 * _.takeRight([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.takeRight([1, 2, 3], 0);
 * // => []
 */
function takeRight(array, n, guard) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  n = (guard || n === undefined) ? 1 : toInteger(n);
  n = length - n;
  return baseSlice(array, n < 0 ? 0 : n, length);
}

/**
 * Creates a slice of `array` with elements taken from the end. Elements are
 * taken until `predicate` returns falsey. The predicate is invoked with
 * three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.takeRightWhile(users, function(o) { return !o.active; });
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.matches` iteratee shorthand.
 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
 * // => objects for ['pebbles']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.takeRightWhile(users, ['active', false]);
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.property` iteratee shorthand.
 * _.takeRightWhile(users, 'active');
 * // => []
 */
function takeRightWhile(array, predicate) {
  return (array && array.length)
    ? baseWhile(array, baseIteratee(predicate), false, true)
    : [];
}

/**
 * Creates a slice of `array` with elements taken from the beginning. Elements
 * are taken until `predicate` returns falsey. The predicate is invoked with
 * three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.takeWhile(users, function(o) { return !o.active; });
 * // => objects for ['barney', 'fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.takeWhile(users, { 'user': 'barney', 'active': false });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.takeWhile(users, ['active', false]);
 * // => objects for ['barney', 'fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.takeWhile(users, 'active');
 * // => []
 */
function takeWhile(array, predicate) {
  return (array && array.length)
    ? baseWhile(array, baseIteratee(predicate))
    : [];
}

/**
 * This method invokes `interceptor` and returns `value`. The interceptor
 * is invoked with one argument; (value). The purpose of this method is to
 * "tap into" a method chain sequence in order to modify intermediate results.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Seq
 * @param {*} value The value to provide to `interceptor`.
 * @param {Function} interceptor The function to invoke.
 * @returns {*} Returns `value`.
 * @example
 *
 * _([1, 2, 3])
 *  .tap(function(array) {
 *    // Mutate input array.
 *    array.pop();
 *  })
 *  .reverse()
 *  .value();
 * // => [2, 1]
 */
function tap(value, interceptor) {
  interceptor(value);
  return value;
}

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
 * of source objects to the destination object for all destination properties
 * that resolve to `undefined`.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to assign.
 * @param {Object} object The parent object of `objValue`.
 * @returns {*} Returns the value to assign.
 */
function customDefaultsAssignIn(objValue, srcValue, key, object) {
  if (objValue === undefined ||
      (eq(objValue, objectProto$2[key]) && !hasOwnProperty$2.call(object, key))) {
    return srcValue;
  }
  return objValue;
}

/** Used to escape characters for inclusion in compiled string literals. */
var stringEscapes = {
  '\\': '\\',
  "'": "'",
  '\n': 'n',
  '\r': 'r',
  '\u2028': 'u2028',
  '\u2029': 'u2029'
};

/**
 * Used by `_.template` to escape characters for inclusion in compiled string literals.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
function escapeStringChar(chr) {
  return '\\' + stringEscapes[chr];
}

/** Used to match template delimiters. */
var reInterpolate = /<%=([\s\S]+?)%>/g;

var reInterpolate$1 = reInterpolate;

/** Used to match template delimiters. */
var reEscape = /<%-([\s\S]+?)%>/g;

var reEscape$1 = reEscape;

/** Used to match template delimiters. */
var reEvaluate = /<%([\s\S]+?)%>/g;

var reEvaluate$1 = reEvaluate;

/**
 * By default, the template delimiters used by lodash are like those in
 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
 * following template settings to use alternative delimiters.
 *
 * @static
 * @memberOf _
 * @type {Object}
 */
var templateSettings = {

  /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'escape': reEscape$1,

  /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'evaluate': reEvaluate$1,

  /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'interpolate': reInterpolate$1,

  /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */
  'variable': '',

  /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */
  'imports': {

    /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */
    '_': { 'escape': escape }
  }
};

var templateSettings$1 = templateSettings;

/** Error message constants. */
var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

/** Used to match empty string literals in compiled template source. */
var reEmptyStringLeading = /\b__p \+= '';/g,
    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

/**
 * Used to validate the `validate` option in `_.template` variable.
 *
 * Forbids characters which could potentially change the meaning of the function argument definition:
 * - "()," (modification of function parameters)
 * - "=" (default value)
 * - "[]{}" (destructuring of function parameters)
 * - "/" (beginning of a comment)
 * - whitespace
 */
var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

/**
 * Used to match
 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
 */
var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

/** Used to ensure capturing order of template delimiters. */
var reNoMatch = /($^)/;

/** Used to match unescaped characters in compiled string literals. */
var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Creates a compiled template function that can interpolate data properties
 * in "interpolate" delimiters, HTML-escape interpolated data properties in
 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
 * properties may be accessed as free variables in the template. If a setting
 * object is given, it takes precedence over `_.templateSettings` values.
 *
 * **Note:** In the development build `_.template` utilizes
 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
 * for easier debugging.
 *
 * For more information on precompiling templates see
 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
 *
 * For more information on Chrome extension sandboxes see
 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The template string.
 * @param {Object} [options={}] The options object.
 * @param {RegExp} [options.escape=_.templateSettings.escape]
 *  The HTML "escape" delimiter.
 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
 *  The "evaluate" delimiter.
 * @param {Object} [options.imports=_.templateSettings.imports]
 *  An object to import into the template as free variables.
 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
 *  The "interpolate" delimiter.
 * @param {string} [options.sourceURL='templateSources[n]']
 *  The sourceURL of the compiled template.
 * @param {string} [options.variable='obj']
 *  The data object variable name.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the compiled template function.
 * @example
 *
 * // Use the "interpolate" delimiter to create a compiled template.
 * var compiled = _.template('hello <%= user %>!');
 * compiled({ 'user': 'fred' });
 * // => 'hello fred!'
 *
 * // Use the HTML "escape" delimiter to escape data property values.
 * var compiled = _.template('<b><%- value %></b>');
 * compiled({ 'value': '<script>' });
 * // => '<b>&lt;script&gt;</b>'
 *
 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the internal `print` function in "evaluate" delimiters.
 * var compiled = _.template('<% print("hello " + user); %>!');
 * compiled({ 'user': 'barney' });
 * // => 'hello barney!'
 *
 * // Use the ES template literal delimiter as an "interpolate" delimiter.
 * // Disable support by replacing the "interpolate" delimiter.
 * var compiled = _.template('hello ${ user }!');
 * compiled({ 'user': 'pebbles' });
 * // => 'hello pebbles!'
 *
 * // Use backslashes to treat delimiters as plain text.
 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
 * compiled({ 'value': 'ignored' });
 * // => '<%- value %>'
 *
 * // Use the `imports` option to import `jQuery` as `jq`.
 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
 * compiled(data);
 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
 *
 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
 * compiled.source;
 * // => function(data) {
 * //   var __t, __p = '';
 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
 * //   return __p;
 * // }
 *
 * // Use custom template delimiters.
 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
 * var compiled = _.template('hello {{ user }}!');
 * compiled({ 'user': 'mustache' });
 * // => 'hello mustache!'
 *
 * // Use the `source` property to inline compiled templates for meaningful
 * // line numbers in error messages and stack traces.
 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
 *   var JST = {\
 *     "main": ' + _.template(mainText).source + '\
 *   };\
 * ');
 */
function template(string, options, guard) {
  // Based on John Resig's `tmpl` implementation
  // (http://ejohn.org/blog/javascript-micro-templating/)
  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
  var settings = templateSettings$1.imports._.templateSettings || templateSettings$1;

  if (guard && isIterateeCall(string, options, guard)) {
    options = undefined;
  }
  string = toString(string);
  options = extendWith({}, options, settings, customDefaultsAssignIn);

  var imports = extendWith({}, options.imports, settings.imports, customDefaultsAssignIn),
      importsKeys = keys(imports),
      importsValues = baseValues(imports, importsKeys);

  var isEscaping,
      isEvaluating,
      index = 0,
      interpolate = options.interpolate || reNoMatch,
      source = "__p += '";

  // Compile the regexp to match each delimiter.
  var reDelimiters = RegExp(
    (options.escape || reNoMatch).source + '|' +
    interpolate.source + '|' +
    (interpolate === reInterpolate$1 ? reEsTemplate : reNoMatch).source + '|' +
    (options.evaluate || reNoMatch).source + '|$'
  , 'g');

  // Use a sourceURL for easier debugging.
  // The sourceURL gets injected into the source that's eval-ed, so be careful
  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
  // and escape the comment, thus injecting code that gets evaled.
  var sourceURL = hasOwnProperty$1.call(options, 'sourceURL')
    ? ('//# sourceURL=' +
       (options.sourceURL + '').replace(/\s/g, ' ') +
       '\n')
    : '';

  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    interpolateValue || (interpolateValue = esTemplateValue);

    // Escape characters that can't be included in string literals.
    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

    // Replace delimiters with snippets.
    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }
    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }
    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }
    index = offset + match.length;

    // The JS engine embedded in Adobe products needs `match` returned in
    // order to produce the correct `offset` value.
    return match;
  });

  source += "';\n";

  // If `variable` is not specified wrap a with-statement around the generated
  // code to add the data object to the top of the scope chain.
  var variable = hasOwnProperty$1.call(options, 'variable') && options.variable;
  if (!variable) {
    source = 'with (obj) {\n' + source + '\n}\n';
  }
  // Throw an error if a forbidden character was found in `variable`, to prevent
  // potential command injection attacks.
  else if (reForbiddenIdentifierChars.test(variable)) {
    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
  }

  // Cleanup code by stripping empty strings.
  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
    .replace(reEmptyStringMiddle, '$1')
    .replace(reEmptyStringTrailing, '$1;');

  // Frame code as the function body.
  source = 'function(' + (variable || 'obj') + ') {\n' +
    (variable
      ? ''
      : 'obj || (obj = {});\n'
    ) +
    "var __t, __p = ''" +
    (isEscaping
       ? ', __e = _.escape'
       : ''
    ) +
    (isEvaluating
      ? ', __j = Array.prototype.join;\n' +
        "function print() { __p += __j.call(arguments, '') }\n"
      : ';\n'
    ) +
    source +
    'return __p\n}';

  var result = attempt$1(function() {
    return Function(importsKeys, sourceURL + 'return ' + source)
      .apply(undefined, importsValues);
  });

  // Provide the compiled function's source by its `toString` method or
  // the `source` property as a convenience for inlining compiled templates.
  result.source = source;
  if (isError(result)) {
    throw result;
  }
  return result;
}

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * This method is like `_.tap` except that it returns the result of `interceptor`.
 * The purpose of this method is to "pass thru" values replacing intermediate
 * results in a method chain sequence.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Seq
 * @param {*} value The value to provide to `interceptor`.
 * @param {Function} interceptor The function to invoke.
 * @returns {*} Returns the result of `interceptor`.
 * @example
 *
 * _('  abc  ')
 *  .chain()
 *  .trim()
 *  .thru(function(value) {
 *    return [value];
 *  })
 *  .value();
 * // => ['abc']
 */
function thru(value, interceptor) {
  return interceptor(value);
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$2 = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH$1 = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$3 = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger(n);
  if (n < 1 || n > MAX_SAFE_INTEGER$2) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH$1,
      length = nativeMin$3(n, MAX_ARRAY_LENGTH$1);

  iteratee = castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH$1;

  var result = baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

/**
 * Enables the wrapper to be iterable.
 *
 * @name Symbol.iterator
 * @memberOf _
 * @since 4.0.0
 * @category Seq
 * @returns {Object} Returns the wrapper object.
 * @example
 *
 * var wrapped = _([1, 2]);
 *
 * wrapped[Symbol.iterator]() === wrapped;
 * // => true
 *
 * Array.from(wrapped);
 * // => [1, 2]
 */
function wrapperToIterator() {
  return this;
}

/**
 * The base implementation of `wrapperValue` which returns the result of
 * performing a sequence of actions on the unwrapped `value`, where each
 * successive action is supplied the return value of the previous.
 *
 * @private
 * @param {*} value The unwrapped value.
 * @param {Array} actions Actions to perform to resolve the unwrapped value.
 * @returns {*} Returns the resolved value.
 */
function baseWrapperValue(value, actions) {
  var result = value;
  if (result instanceof LazyWrapper) {
    result = result.value();
  }
  return arrayReduce(actions, function(result, action) {
    return action.func.apply(action.thisArg, arrayPush([result], action.args));
  }, result);
}

/**
 * Executes the chain sequence to resolve the unwrapped value.
 *
 * @name value
 * @memberOf _
 * @since 0.1.0
 * @alias toJSON, valueOf
 * @category Seq
 * @returns {*} Returns the resolved unwrapped value.
 * @example
 *
 * _([1, 2, 3]).value();
 * // => [1, 2, 3]
 */
function wrapperValue() {
  return baseWrapperValue(this.__wrapped__, this.__actions__);
}

/**
 * Converts `string`, as a whole, to lower case just like
 * [String#toLowerCase](https://mdn.io/toLowerCase).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the lower cased string.
 * @example
 *
 * _.toLower('--Foo-Bar--');
 * // => '--foo-bar--'
 *
 * _.toLower('fooBar');
 * // => 'foobar'
 *
 * _.toLower('__FOO_BAR__');
 * // => '__foo_bar__'
 */
function toLower(value) {
  return toString(value).toLowerCase();
}

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */
function toPath(value) {
  if (isArray$1(value)) {
    return arrayMap(value, toKey);
  }
  return isSymbol(value) ? [value] : copyArray(stringToPath$1(toString(value)));
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Converts `value` to a safe integer. A safe integer can be compared and
 * represented correctly.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toSafeInteger(3.2);
 * // => 3
 *
 * _.toSafeInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toSafeInteger(Infinity);
 * // => 9007199254740991
 *
 * _.toSafeInteger('3.2');
 * // => 3
 */
function toSafeInteger(value) {
  return value
    ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER$1, MAX_SAFE_INTEGER$1)
    : (value === 0 ? value : 0);
}

/**
 * Converts `string`, as a whole, to upper case just like
 * [String#toUpperCase](https://mdn.io/toUpperCase).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the upper cased string.
 * @example
 *
 * _.toUpper('--foo-bar--');
 * // => '--FOO-BAR--'
 *
 * _.toUpper('fooBar');
 * // => 'FOOBAR'
 *
 * _.toUpper('__foo_bar__');
 * // => '__FOO_BAR__'
 */
function toUpper(value) {
  return toString(value).toUpperCase();
}

/**
 * An alternative to `_.reduce`; this method transforms `object` to a new
 * `accumulator` object which is the result of running each of its own
 * enumerable string keyed properties thru `iteratee`, with each invocation
 * potentially mutating the `accumulator` object. If `accumulator` is not
 * provided, a new object with the same `[[Prototype]]` will be used. The
 * iteratee is invoked with four arguments: (accumulator, value, key, object).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The custom accumulator value.
 * @returns {*} Returns the accumulated value.
 * @example
 *
 * _.transform([2, 3, 4], function(result, n) {
 *   result.push(n *= n);
 *   return n % 2 == 0;
 * }, []);
 * // => [4, 9]
 *
 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] }
 */
function transform(object, iteratee, accumulator) {
  var isArr = isArray$1(object),
      isArrLike = isArr || isBuffer$1(object) || isTypedArray$1(object);

  iteratee = baseIteratee(iteratee);
  if (accumulator == null) {
    var Ctor = object && object.constructor;
    if (isArrLike) {
      accumulator = isArr ? new Ctor : [];
    }
    else if (isObject(object)) {
      accumulator = isFunction(Ctor) ? baseCreate$1(getPrototype$1(object)) : {};
    }
    else {
      accumulator = {};
    }
  }
  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    return iteratee(accumulator, value, index, object);
  });
  return accumulator;
}

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */
function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return baseTrim(string);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

/**
 * Removes trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimEnd('  abc  ');
 * // => '  abc'
 *
 * _.trimEnd('-_-abc-_-', '_-');
 * // => '-_-abc'
 */
function trimEnd(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.slice(0, trimmedEndIndex(string) + 1);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

  return castSlice(strSymbols, 0, end).join('');
}

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * Removes leading whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimStart('  abc  ');
 * // => 'abc  '
 *
 * _.trimStart('-_-abc-_-', '_-');
 * // => 'abc-_-'
 */
function trimStart(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.replace(reTrimStart, '');
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      start = charsStartIndex(strSymbols, stringToArray(chars));

  return castSlice(strSymbols, start).join('');
}

/** Used as default options for `_.truncate`. */
var DEFAULT_TRUNC_LENGTH = 30,
    DEFAULT_TRUNC_OMISSION = '...';

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Truncates `string` if it's longer than the given maximum string length.
 * The last characters of the truncated string are replaced with the omission
 * string which defaults to "...".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to truncate.
 * @param {Object} [options={}] The options object.
 * @param {number} [options.length=30] The maximum string length.
 * @param {string} [options.omission='...'] The string to indicate text is omitted.
 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
 * @returns {string} Returns the truncated string.
 * @example
 *
 * _.truncate('hi-diddly-ho there, neighborino');
 * // => 'hi-diddly-ho there, neighbo...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'length': 24,
 *   'separator': ' '
 * });
 * // => 'hi-diddly-ho there,...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'length': 24,
 *   'separator': /,? +/
 * });
 * // => 'hi-diddly-ho there...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'omission': ' [...]'
 * });
 * // => 'hi-diddly-ho there, neig [...]'
 */
function truncate$1(string, options) {
  var length = DEFAULT_TRUNC_LENGTH,
      omission = DEFAULT_TRUNC_OMISSION;

  if (isObject(options)) {
    var separator = 'separator' in options ? options.separator : separator;
    length = 'length' in options ? toInteger(options.length) : length;
    omission = 'omission' in options ? baseToString(options.omission) : omission;
  }
  string = toString(string);

  var strLength = string.length;
  if (hasUnicode(string)) {
    var strSymbols = stringToArray(string);
    strLength = strSymbols.length;
  }
  if (length >= strLength) {
    return string;
  }
  var end = length - stringSize(omission);
  if (end < 1) {
    return omission;
  }
  var result = strSymbols
    ? castSlice(strSymbols, 0, end).join('')
    : string.slice(0, end);

  if (separator === undefined) {
    return result + omission;
  }
  if (strSymbols) {
    end += (result.length - end);
  }
  if (isRegExp$1(separator)) {
    if (string.slice(end).search(separator)) {
      var match,
          substring = result;

      if (!separator.global) {
        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
      }
      separator.lastIndex = 0;
      while ((match = separator.exec(substring))) {
        var newEnd = match.index;
      }
      result = result.slice(0, newEnd === undefined ? end : newEnd);
    }
  } else if (string.indexOf(baseToString(separator), end) != end) {
    var index = result.lastIndexOf(separator);
    if (index > -1) {
      result = result.slice(0, index);
    }
  }
  return result + omission;
}

/**
 * Creates a function that accepts up to one argument, ignoring any
 * additional arguments.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.unary(parseInt));
 * // => [6, 8, 10]
 */
function unary(func) {
  return ary(func, 1);
}

/** Used to map HTML entities to characters. */
var htmlUnescapes = {
  '&amp;': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&#39;': "'"
};

/**
 * Used by `_.unescape` to convert HTML entities to characters.
 *
 * @private
 * @param {string} chr The matched character to unescape.
 * @returns {string} Returns the unescaped character.
 */
var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

var unescapeHtmlChar$1 = unescapeHtmlChar;

/** Used to match HTML entities and HTML characters. */
var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
    reHasEscapedHtml = RegExp(reEscapedHtml.source);

/**
 * The inverse of `_.escape`; this method converts the HTML entities
 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
 * their corresponding characters.
 *
 * **Note:** No other HTML entities are unescaped. To unescape additional
 * HTML entities use a third-party library like [_he_](https://mths.be/he).
 *
 * @static
 * @memberOf _
 * @since 0.6.0
 * @category String
 * @param {string} [string=''] The string to unescape.
 * @returns {string} Returns the unescaped string.
 * @example
 *
 * _.unescape('fred, barney, &amp; pebbles');
 * // => 'fred, barney, & pebbles'
 */
function unescape(string) {
  string = toString(string);
  return (string && reHasEscapedHtml.test(string))
    ? string.replace(reEscapedHtml, unescapeHtmlChar$1)
    : string;
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set$2 && (1 / setToArray(new Set$2([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set$2(values);
};

var createSet$1 = createSet;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet$1(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest(function(arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});

var union$1 = union;

/**
 * This method is like `_.union` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which uniqueness is computed. Result values are chosen from the first
 * array in which the value occurs. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
var unionBy = baseRest(function(arrays) {
  var iteratee = last(arrays);
  if (isArrayLikeObject(iteratee)) {
    iteratee = undefined;
  }
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee));
});

var unionBy$1 = unionBy;

/**
 * This method is like `_.union` except that it accepts `comparator` which
 * is invoked to compare elements of `arrays`. Result values are chosen from
 * the first array in which the value occurs. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.unionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
 */
var unionWith = baseRest(function(arrays) {
  var comparator = last(arrays);
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
});

var unionWith$1 = unionWith;

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length) ? baseUniq(array) : [];
}

/**
 * This method is like `_.uniq` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * uniqueness is computed. The order of result values is determined by the
 * order they occur in the array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
function uniqBy(array, iteratee) {
  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee)) : [];
}

/**
 * This method is like `_.uniq` except that it accepts `comparator` which
 * is invoked to compare elements of `array`. The order of result values is
 * determined by the order they occur in the array.The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.uniqWith(objects, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */
function uniqWith(array, comparator) {
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
}

/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$2 = Math.max;

/**
 * This method is like `_.zip` except that it accepts an array of grouped
 * elements and creates an array regrouping the elements to their pre-zip
 * configuration.
 *
 * @static
 * @memberOf _
 * @since 1.2.0
 * @category Array
 * @param {Array} array The array of grouped elements to process.
 * @returns {Array} Returns the new array of regrouped elements.
 * @example
 *
 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 *
 * _.unzip(zipped);
 * // => [['a', 'b'], [1, 2], [true, false]]
 */
function unzip(array) {
  if (!(array && array.length)) {
    return [];
  }
  var length = 0;
  array = arrayFilter(array, function(group) {
    if (isArrayLikeObject(group)) {
      length = nativeMax$2(group.length, length);
      return true;
    }
  });
  return baseTimes(length, function(index) {
    return arrayMap(array, baseProperty(index));
  });
}

/**
 * This method is like `_.unzip` except that it accepts `iteratee` to specify
 * how regrouped values should be combined. The iteratee is invoked with the
 * elements of each group: (...group).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Array
 * @param {Array} array The array of grouped elements to process.
 * @param {Function} [iteratee=_.identity] The function to combine
 *  regrouped values.
 * @returns {Array} Returns the new array of regrouped elements.
 * @example
 *
 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
 * // => [[1, 10, 100], [2, 20, 200]]
 *
 * _.unzipWith(zipped, _.add);
 * // => [3, 30, 300]
 */
function unzipWith(array, iteratee) {
  if (!(array && array.length)) {
    return [];
  }
  var result = unzip(array);
  if (iteratee == null) {
    return result;
  }
  return arrayMap(result, function(group) {
    return apply(iteratee, undefined, group);
  });
}

/**
 * The base implementation of `_.update`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to update.
 * @param {Function} updater The function to produce the updated value.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseUpdate(object, path, updater, customizer) {
  return baseSet(object, path, updater(baseGet(object, path)), customizer);
}

/**
 * This method is like `_.set` except that accepts `updater` to produce the
 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
 * is invoked with one argument: (value).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {Function} updater The function to produce the updated value.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
 * console.log(object.a[0].b.c);
 * // => 9
 *
 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
 * console.log(object.x[0].y.z);
 * // => 0
 */
function update(object, path, updater) {
  return object == null ? object : baseUpdate(object, path, castFunction(updater));
}

/**
 * This method is like `_.update` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {Function} updater The function to produce the updated value.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
 * // => { '0': { '1': 'a' } }
 */
function updateWith(object, path, updater, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
}

/**
 * Converts `string`, as space separated words, to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the upper cased string.
 * @example
 *
 * _.upperCase('--foo-bar');
 * // => 'FOO BAR'
 *
 * _.upperCase('fooBar');
 * // => 'FOO BAR'
 *
 * _.upperCase('__foo_bar__');
 * // => 'FOO BAR'
 */
var upperCase = createCompounder(function(result, word, index) {
  return result + (index ? ' ' : '') + word.toUpperCase();
});

var upperCase$1 = upperCase;

/**
 * Creates an array of the own and inherited enumerable string keyed property
 * values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.valuesIn(new Foo);
 * // => [1, 2, 3] (iteration order is not guaranteed)
 */
function valuesIn(object) {
  return object == null ? [] : baseValues(object, keysIn(object));
}

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, values)
    : [];
});

var without$1 = without;

/**
 * Creates a function that provides `value` to `wrapper` as its first
 * argument. Any additional arguments provided to the function are appended
 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
 * binding of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {*} value The value to wrap.
 * @param {Function} [wrapper=identity] The wrapper function.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var p = _.wrap(_.escape, function(func, text) {
 *   return '<p>' + func(text) + '</p>';
 * });
 *
 * p('fred, barney, & pebbles');
 * // => '<p>fred, barney, &amp; pebbles</p>'
 */
function wrap(value, wrapper) {
  return partial$1(castFunction(wrapper), value);
}

/**
 * This method is the wrapper version of `_.at`.
 *
 * @name at
 * @memberOf _
 * @since 1.0.0
 * @category Seq
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 *
 * _(object).at(['a[0].b.c', 'a[1]']).value();
 * // => [3, 4]
 */
var wrapperAt = flatRest(function(paths) {
  var length = paths.length,
      start = length ? paths[0] : 0,
      value = this.__wrapped__,
      interceptor = function(object) { return baseAt(object, paths); };

  if (length > 1 || this.__actions__.length ||
      !(value instanceof LazyWrapper) || !isIndex(start)) {
    return this.thru(interceptor);
  }
  value = value.slice(start, +start + (length ? 1 : 0));
  value.__actions__.push({
    'func': thru,
    'args': [interceptor],
    'thisArg': undefined
  });
  return new LodashWrapper(value, this.__chain__).thru(function(array) {
    if (length && !array.length) {
      array.push(undefined);
    }
    return array;
  });
});

var at = wrapperAt;

/**
 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
 *
 * @name chain
 * @memberOf _
 * @since 0.1.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 40 }
 * ];
 *
 * // A sequence without explicit chaining.
 * _(users).head();
 * // => { 'user': 'barney', 'age': 36 }
 *
 * // A sequence with explicit chaining.
 * _(users)
 *   .chain()
 *   .head()
 *   .pick('user')
 *   .value();
 * // => { 'user': 'barney' }
 */
function wrapperChain() {
  return chain(this);
}

/**
 * This method is the wrapper version of `_.reverse`.
 *
 * **Note:** This method mutates the wrapped array.
 *
 * @name reverse
 * @memberOf _
 * @since 0.1.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _(array).reverse().value()
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */
function wrapperReverse() {
  var value = this.__wrapped__;
  if (value instanceof LazyWrapper) {
    var wrapped = value;
    if (this.__actions__.length) {
      wrapped = new LazyWrapper(this);
    }
    wrapped = wrapped.reverse();
    wrapped.__actions__.push({
      'func': thru,
      'args': [reverse],
      'thisArg': undefined
    });
    return new LodashWrapper(wrapped, this.__chain__);
  }
  return this.thru(reverse);
}

/**
 * The base implementation of methods like `_.xor`, without support for
 * iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of values.
 */
function baseXor(arrays, iteratee, comparator) {
  var length = arrays.length;
  if (length < 2) {
    return length ? baseUniq(arrays[0]) : [];
  }
  var index = -1,
      result = Array(length);

  while (++index < length) {
    var array = arrays[index],
        othIndex = -1;

    while (++othIndex < length) {
      if (othIndex != index) {
        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
      }
    }
  }
  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
}

/**
 * Creates an array of unique values that is the
 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
 * of the given arrays. The order of result values is determined by the order
 * they occur in the arrays.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.without
 * @example
 *
 * _.xor([2, 1], [2, 3]);
 * // => [1, 3]
 */
var xor = baseRest(function(arrays) {
  return baseXor(arrayFilter(arrays, isArrayLikeObject));
});

var xor$1 = xor;

/**
 * This method is like `_.xor` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which by which they're compared. The order of result values is determined
 * by the order they occur in the arrays. The iteratee is invoked with one
 * argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [1.2, 3.4]
 *
 * // The `_.property` iteratee shorthand.
 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 2 }]
 */
var xorBy = baseRest(function(arrays) {
  var iteratee = last(arrays);
  if (isArrayLikeObject(iteratee)) {
    iteratee = undefined;
  }
  return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee));
});

var xorBy$1 = xorBy;

/**
 * This method is like `_.xor` except that it accepts `comparator` which is
 * invoked to compare elements of `arrays`. The order of result values is
 * determined by the order they occur in the arrays. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.xorWith(objects, others, _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
 */
var xorWith = baseRest(function(arrays) {
  var comparator = last(arrays);
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
});

var xorWith$1 = xorWith;

/**
 * Creates an array of grouped elements, the first of which contains the
 * first elements of the given arrays, the second of which contains the
 * second elements of the given arrays, and so on.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to process.
 * @returns {Array} Returns the new array of grouped elements.
 * @example
 *
 * _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 */
var zip = baseRest(unzip);

var zip$1 = zip;

/**
 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
 *
 * @private
 * @param {Array} props The property identifiers.
 * @param {Array} values The property values.
 * @param {Function} assignFunc The function to assign values.
 * @returns {Object} Returns the new object.
 */
function baseZipObject(props, values, assignFunc) {
  var index = -1,
      length = props.length,
      valsLength = values.length,
      result = {};

  while (++index < length) {
    var value = index < valsLength ? values[index] : undefined;
    assignFunc(result, props[index], value);
  }
  return result;
}

/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */
function zipObject(props, values) {
  return baseZipObject(props || [], values || [], assignValue);
}

/**
 * This method is like `_.zipObject` except that it supports property paths.
 *
 * @static
 * @memberOf _
 * @since 4.1.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
 */
function zipObjectDeep(props, values) {
  return baseZipObject(props || [], values || [], baseSet);
}

/**
 * This method is like `_.zip` except that it accepts `iteratee` to specify
 * how grouped values should be combined. The iteratee is invoked with the
 * elements of each group: (...group).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Array
 * @param {...Array} [arrays] The arrays to process.
 * @param {Function} [iteratee=_.identity] The function to combine
 *  grouped values.
 * @returns {Array} Returns the new array of grouped elements.
 * @example
 *
 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
 *   return a + b + c;
 * });
 * // => [111, 222]
 */
var zipWith = baseRest(function(arrays) {
  var length = arrays.length,
      iteratee = length > 1 ? arrays[length - 1] : undefined;

  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
  return unzipWith(arrays, iteratee);
});

var zipWith$1 = zipWith;

var array = {
  chunk, compact, concat, difference: difference$1, differenceBy: differenceBy$1,
  differenceWith: differenceWith$1, drop, dropRight, dropRightWhile, dropWhile,
  fill, findIndex, findLastIndex, first: head, flatten,
  flattenDeep, flattenDepth, fromPairs, head, indexOf,
  initial, intersection: intersection$1, intersectionBy: intersectionBy$1, intersectionWith: intersectionWith$1, join,
  last, lastIndexOf, nth, pull: pull$1, pullAll,
  pullAllBy, pullAllWith, pullAt: pullAt$1, remove, reverse,
  slice, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex,
  sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, tail,
  take, takeRight, takeRightWhile, takeWhile, union: union$1,
  unionBy: unionBy$1, unionWith: unionWith$1, uniq, uniqBy, uniqWith,
  unzip, unzipWith, without: without$1, xor: xor$1, xorBy: xorBy$1,
  xorWith: xorWith$1, zip: zip$1, zipObject, zipObjectDeep, zipWith: zipWith$1
};

var collection = {
  countBy: countBy$1, each: forEach, eachRight: forEachRight, every, filter,
  find: find$1, findLast: findLast$1, flatMap, flatMapDeep, flatMapDepth,
  forEach, forEachRight, groupBy: groupBy$1, includes, invokeMap: invokeMap$1,
  keyBy: keyBy$1, map, orderBy, partition: partition$1, reduce,
  reduceRight, reject, sample, sampleSize, shuffle,
  size, some, sortBy: sortBy$1
};

var date$1 = {
  now: now$1
};

var func = {
  after, ary, before, bind: bind$1, bindKey: bindKey$1,
  curry, curryRight, debounce, defer: defer$1, delay: delay$1,
  flip: flip$1, memoize, negate, once, overArgs: overArgs$1,
  partial: partial$1, partialRight: partialRight$1, rearg: rearg$1, rest, spread,
  throttle, unary, wrap
};

var lang$1 = {
  castArray, clone: clone$1, cloneDeep, cloneDeepWith, cloneWith,
  conformsTo, eq, gt: gt$1, gte: gte$1, isArguments: isArguments$1,
  isArray: isArray$1, isArrayBuffer: isArrayBuffer$1, isArrayLike, isArrayLikeObject, isBoolean,
  isBuffer: isBuffer$1, isDate: isDate$1, isElement, isEmpty, isEqual,
  isEqualWith, isError, isFinite: isFinite$1, isFunction, isInteger,
  isLength, isMap: isMap$1, isMatch, isMatchWith, isNaN: isNaN$1,
  isNative, isNil, isNull, isNumber, isObject,
  isObjectLike, isPlainObject, isRegExp: isRegExp$1, isSafeInteger, isSet: isSet$1,
  isString, isSymbol, isTypedArray: isTypedArray$1, isUndefined, isWeakMap,
  isWeakSet, lt: lt$1, lte: lte$1, toArray, toFinite,
  toInteger, toLength, toNumber, toPlainObject, toSafeInteger,
  toString
};

var math = {
  add: add$2, ceil: ceil$2, divide: divide$2, floor: floor$2, max: max$1,
  maxBy, mean, meanBy, min: min$1, minBy,
  multiply: multiply$1, round: round$2, subtract: subtract$1, sum: sum$1, sumBy
};

var number$1 = {
  clamp: clamp$1, inRange, random: random$1
};

var object$1 = {
  assign: assign$1, assignIn: extend$1, assignInWith: extendWith, assignWith: assignWith$1, at: at$2,
  create, defaults: defaults$1, defaultsDeep: defaultsDeep$1, entries: toPairs$1, entriesIn: toPairsIn$1,
  extend: extend$1, extendWith, findKey, findLastKey, forIn,
  forInRight, forOwn, forOwnRight, functions, functionsIn,
  get, has, hasIn, invert: invert$1, invertBy: invertBy$1,
  invoke: invoke$1, keys, keysIn, mapKeys, mapValues,
  merge: merge$1, mergeWith: mergeWith$1, omit: omit$1, omitBy, pick: pick$1,
  pickBy, result, set, setWith, toPairs: toPairs$1,
  toPairsIn: toPairsIn$1, transform, unset, update, updateWith,
  values, valuesIn
};

var seq = {
  at, chain, commit: wrapperCommit, lodash, next: wrapperNext,
  plant: wrapperPlant, reverse: wrapperReverse, tap, thru, toIterator: wrapperToIterator,
  toJSON: wrapperValue, value: wrapperValue, valueOf: wrapperValue, wrapperChain
};

var string$1 = {
  camelCase: camelCase$1, capitalize, deburr, endsWith, escape,
  escapeRegExp, kebabCase: kebabCase$1, lowerCase: lowerCase$1, lowerFirst: lowerFirst$1, pad,
  padEnd, padStart, parseInt: parseInt$1, repeat, replace,
  snakeCase: snakeCase$1, split, startCase: startCase$1, startsWith, template,
  templateSettings: templateSettings$1, toLower, toUpper, trim, trimEnd,
  trimStart, truncate: truncate$1, unescape, upperCase: upperCase$1, upperFirst: upperFirst$1,
  words
};

var util = {
  attempt: attempt$1, bindAll: bindAll$1, cond, conforms, constant: constant$1,
  defaultTo, flow: flow$1, flowRight: flowRight$1, identity, iteratee,
  matches, matchesProperty, method: method$1, methodOf: methodOf$1, mixin: mixin$1,
  noop, nthArg, over: over$1, overEvery: overEvery$1, overSome: overSome$1,
  property, propertyOf, range: range$1, rangeRight: rangeRight$1, stubArray,
  stubFalse, stubObject, stubString, stubTrue, times,
  toPath, uniqueId
};

/**
 * Creates a clone of the lazy wrapper object.
 *
 * @private
 * @name clone
 * @memberOf LazyWrapper
 * @returns {Object} Returns the cloned `LazyWrapper` object.
 */
function lazyClone() {
  var result = new LazyWrapper(this.__wrapped__);
  result.__actions__ = copyArray(this.__actions__);
  result.__dir__ = this.__dir__;
  result.__filtered__ = this.__filtered__;
  result.__iteratees__ = copyArray(this.__iteratees__);
  result.__takeCount__ = this.__takeCount__;
  result.__views__ = copyArray(this.__views__);
  return result;
}

/**
 * Reverses the direction of lazy iteration.
 *
 * @private
 * @name reverse
 * @memberOf LazyWrapper
 * @returns {Object} Returns the new reversed `LazyWrapper` object.
 */
function lazyReverse() {
  if (this.__filtered__) {
    var result = new LazyWrapper(this);
    result.__dir__ = -1;
    result.__filtered__ = true;
  } else {
    result = this.clone();
    result.__dir__ *= -1;
  }
  return result;
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$1 = Math.max,
    nativeMin$2 = Math.min;

/**
 * Gets the view, applying any `transforms` to the `start` and `end` positions.
 *
 * @private
 * @param {number} start The start of the view.
 * @param {number} end The end of the view.
 * @param {Array} transforms The transformations to apply to the view.
 * @returns {Object} Returns an object containing the `start` and `end`
 *  positions of the view.
 */
function getView(start, end, transforms) {
  var index = -1,
      length = transforms.length;

  while (++index < length) {
    var data = transforms[index],
        size = data.size;

    switch (data.type) {
      case 'drop':      start += size; break;
      case 'dropRight': end -= size; break;
      case 'take':      end = nativeMin$2(end, start + size); break;
      case 'takeRight': start = nativeMax$1(start, end - size); break;
    }
  }
  return { 'start': start, 'end': end };
}

/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG$1 = 1,
    LAZY_MAP_FLAG = 2;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin$1 = Math.min;

/**
 * Extracts the unwrapped value from its lazy wrapper.
 *
 * @private
 * @name value
 * @memberOf LazyWrapper
 * @returns {*} Returns the unwrapped value.
 */
function lazyValue() {
  var array = this.__wrapped__.value(),
      dir = this.__dir__,
      isArr = isArray$1(array),
      isRight = dir < 0,
      arrLength = isArr ? array.length : 0,
      view = getView(0, arrLength, this.__views__),
      start = view.start,
      end = view.end,
      length = end - start,
      index = isRight ? end : (start - 1),
      iteratees = this.__iteratees__,
      iterLength = iteratees.length,
      resIndex = 0,
      takeCount = nativeMin$1(length, this.__takeCount__);

  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
    return baseWrapperValue(array, this.__actions__);
  }
  var result = [];

  outer:
  while (length-- && resIndex < takeCount) {
    index += dir;

    var iterIndex = -1,
        value = array[index];

    while (++iterIndex < iterLength) {
      var data = iteratees[iterIndex],
          iteratee = data.iteratee,
          type = data.type,
          computed = iteratee(value);

      if (type == LAZY_MAP_FLAG) {
        value = computed;
      } else if (!computed) {
        if (type == LAZY_FILTER_FLAG$1) {
          continue outer;
        } else {
          break outer;
        }
      }
    }
    result[resIndex++] = value;
  }
  return result;
}

/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the semantic version number. */
var VERSION = '4.17.21';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_KEY_FLAG = 2;

/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG = 1,
    LAZY_WHILE_FLAG = 3;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var symIterator = Symbol$2 ? Symbol$2.iterator : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

// wrap `_.mixin` so it works when provided only one argument
var mixin = (function(func) {
  return function(object, source, options) {
    if (options == null) {
      var isObj = isObject(source),
          props = isObj && keys(source),
          methodNames = props && props.length && baseFunctions(source, props);

      if (!(methodNames ? methodNames.length : isObj)) {
        options = source;
        source = object;
        object = this;
      }
    }
    return func(object, source, options);
  };
}(mixin$1));

// Add methods that return wrapped values in chain sequences.
lodash.after = func.after;
lodash.ary = func.ary;
lodash.assign = object$1.assign;
lodash.assignIn = object$1.assignIn;
lodash.assignInWith = object$1.assignInWith;
lodash.assignWith = object$1.assignWith;
lodash.at = object$1.at;
lodash.before = func.before;
lodash.bind = func.bind;
lodash.bindAll = util.bindAll;
lodash.bindKey = func.bindKey;
lodash.castArray = lang$1.castArray;
lodash.chain = seq.chain;
lodash.chunk = array.chunk;
lodash.compact = array.compact;
lodash.concat = array.concat;
lodash.cond = util.cond;
lodash.conforms = util.conforms;
lodash.constant = util.constant;
lodash.countBy = collection.countBy;
lodash.create = object$1.create;
lodash.curry = func.curry;
lodash.curryRight = func.curryRight;
lodash.debounce = func.debounce;
lodash.defaults = object$1.defaults;
lodash.defaultsDeep = object$1.defaultsDeep;
lodash.defer = func.defer;
lodash.delay = func.delay;
lodash.difference = array.difference;
lodash.differenceBy = array.differenceBy;
lodash.differenceWith = array.differenceWith;
lodash.drop = array.drop;
lodash.dropRight = array.dropRight;
lodash.dropRightWhile = array.dropRightWhile;
lodash.dropWhile = array.dropWhile;
lodash.fill = array.fill;
lodash.filter = collection.filter;
lodash.flatMap = collection.flatMap;
lodash.flatMapDeep = collection.flatMapDeep;
lodash.flatMapDepth = collection.flatMapDepth;
lodash.flatten = array.flatten;
lodash.flattenDeep = array.flattenDeep;
lodash.flattenDepth = array.flattenDepth;
lodash.flip = func.flip;
lodash.flow = util.flow;
lodash.flowRight = util.flowRight;
lodash.fromPairs = array.fromPairs;
lodash.functions = object$1.functions;
lodash.functionsIn = object$1.functionsIn;
lodash.groupBy = collection.groupBy;
lodash.initial = array.initial;
lodash.intersection = array.intersection;
lodash.intersectionBy = array.intersectionBy;
lodash.intersectionWith = array.intersectionWith;
lodash.invert = object$1.invert;
lodash.invertBy = object$1.invertBy;
lodash.invokeMap = collection.invokeMap;
lodash.iteratee = util.iteratee;
lodash.keyBy = collection.keyBy;
lodash.keys = keys;
lodash.keysIn = object$1.keysIn;
lodash.map = collection.map;
lodash.mapKeys = object$1.mapKeys;
lodash.mapValues = object$1.mapValues;
lodash.matches = util.matches;
lodash.matchesProperty = util.matchesProperty;
lodash.memoize = func.memoize;
lodash.merge = object$1.merge;
lodash.mergeWith = object$1.mergeWith;
lodash.method = util.method;
lodash.methodOf = util.methodOf;
lodash.mixin = mixin;
lodash.negate = negate;
lodash.nthArg = util.nthArg;
lodash.omit = object$1.omit;
lodash.omitBy = object$1.omitBy;
lodash.once = func.once;
lodash.orderBy = collection.orderBy;
lodash.over = util.over;
lodash.overArgs = func.overArgs;
lodash.overEvery = util.overEvery;
lodash.overSome = util.overSome;
lodash.partial = func.partial;
lodash.partialRight = func.partialRight;
lodash.partition = collection.partition;
lodash.pick = object$1.pick;
lodash.pickBy = object$1.pickBy;
lodash.property = util.property;
lodash.propertyOf = util.propertyOf;
lodash.pull = array.pull;
lodash.pullAll = array.pullAll;
lodash.pullAllBy = array.pullAllBy;
lodash.pullAllWith = array.pullAllWith;
lodash.pullAt = array.pullAt;
lodash.range = util.range;
lodash.rangeRight = util.rangeRight;
lodash.rearg = func.rearg;
lodash.reject = collection.reject;
lodash.remove = array.remove;
lodash.rest = func.rest;
lodash.reverse = array.reverse;
lodash.sampleSize = collection.sampleSize;
lodash.set = object$1.set;
lodash.setWith = object$1.setWith;
lodash.shuffle = collection.shuffle;
lodash.slice = array.slice;
lodash.sortBy = collection.sortBy;
lodash.sortedUniq = array.sortedUniq;
lodash.sortedUniqBy = array.sortedUniqBy;
lodash.split = string$1.split;
lodash.spread = func.spread;
lodash.tail = array.tail;
lodash.take = array.take;
lodash.takeRight = array.takeRight;
lodash.takeRightWhile = array.takeRightWhile;
lodash.takeWhile = array.takeWhile;
lodash.tap = seq.tap;
lodash.throttle = func.throttle;
lodash.thru = thru;
lodash.toArray = lang$1.toArray;
lodash.toPairs = object$1.toPairs;
lodash.toPairsIn = object$1.toPairsIn;
lodash.toPath = util.toPath;
lodash.toPlainObject = lang$1.toPlainObject;
lodash.transform = object$1.transform;
lodash.unary = func.unary;
lodash.union = array.union;
lodash.unionBy = array.unionBy;
lodash.unionWith = array.unionWith;
lodash.uniq = array.uniq;
lodash.uniqBy = array.uniqBy;
lodash.uniqWith = array.uniqWith;
lodash.unset = object$1.unset;
lodash.unzip = array.unzip;
lodash.unzipWith = array.unzipWith;
lodash.update = object$1.update;
lodash.updateWith = object$1.updateWith;
lodash.values = object$1.values;
lodash.valuesIn = object$1.valuesIn;
lodash.without = array.without;
lodash.words = string$1.words;
lodash.wrap = func.wrap;
lodash.xor = array.xor;
lodash.xorBy = array.xorBy;
lodash.xorWith = array.xorWith;
lodash.zip = array.zip;
lodash.zipObject = array.zipObject;
lodash.zipObjectDeep = array.zipObjectDeep;
lodash.zipWith = array.zipWith;

// Add aliases.
lodash.entries = object$1.toPairs;
lodash.entriesIn = object$1.toPairsIn;
lodash.extend = object$1.assignIn;
lodash.extendWith = object$1.assignInWith;

// Add methods to `lodash.prototype`.
mixin(lodash, lodash);

// Add methods that return unwrapped values in chain sequences.
lodash.add = math.add;
lodash.attempt = util.attempt;
lodash.camelCase = string$1.camelCase;
lodash.capitalize = string$1.capitalize;
lodash.ceil = math.ceil;
lodash.clamp = number$1.clamp;
lodash.clone = lang$1.clone;
lodash.cloneDeep = lang$1.cloneDeep;
lodash.cloneDeepWith = lang$1.cloneDeepWith;
lodash.cloneWith = lang$1.cloneWith;
lodash.conformsTo = lang$1.conformsTo;
lodash.deburr = string$1.deburr;
lodash.defaultTo = util.defaultTo;
lodash.divide = math.divide;
lodash.endsWith = string$1.endsWith;
lodash.eq = lang$1.eq;
lodash.escape = string$1.escape;
lodash.escapeRegExp = string$1.escapeRegExp;
lodash.every = collection.every;
lodash.find = collection.find;
lodash.findIndex = array.findIndex;
lodash.findKey = object$1.findKey;
lodash.findLast = collection.findLast;
lodash.findLastIndex = array.findLastIndex;
lodash.findLastKey = object$1.findLastKey;
lodash.floor = math.floor;
lodash.forEach = collection.forEach;
lodash.forEachRight = collection.forEachRight;
lodash.forIn = object$1.forIn;
lodash.forInRight = object$1.forInRight;
lodash.forOwn = object$1.forOwn;
lodash.forOwnRight = object$1.forOwnRight;
lodash.get = object$1.get;
lodash.gt = lang$1.gt;
lodash.gte = lang$1.gte;
lodash.has = object$1.has;
lodash.hasIn = object$1.hasIn;
lodash.head = array.head;
lodash.identity = identity;
lodash.includes = collection.includes;
lodash.indexOf = array.indexOf;
lodash.inRange = number$1.inRange;
lodash.invoke = object$1.invoke;
lodash.isArguments = lang$1.isArguments;
lodash.isArray = isArray$1;
lodash.isArrayBuffer = lang$1.isArrayBuffer;
lodash.isArrayLike = lang$1.isArrayLike;
lodash.isArrayLikeObject = lang$1.isArrayLikeObject;
lodash.isBoolean = lang$1.isBoolean;
lodash.isBuffer = lang$1.isBuffer;
lodash.isDate = lang$1.isDate;
lodash.isElement = lang$1.isElement;
lodash.isEmpty = lang$1.isEmpty;
lodash.isEqual = lang$1.isEqual;
lodash.isEqualWith = lang$1.isEqualWith;
lodash.isError = lang$1.isError;
lodash.isFinite = lang$1.isFinite;
lodash.isFunction = lang$1.isFunction;
lodash.isInteger = lang$1.isInteger;
lodash.isLength = lang$1.isLength;
lodash.isMap = lang$1.isMap;
lodash.isMatch = lang$1.isMatch;
lodash.isMatchWith = lang$1.isMatchWith;
lodash.isNaN = lang$1.isNaN;
lodash.isNative = lang$1.isNative;
lodash.isNil = lang$1.isNil;
lodash.isNull = lang$1.isNull;
lodash.isNumber = lang$1.isNumber;
lodash.isObject = isObject;
lodash.isObjectLike = lang$1.isObjectLike;
lodash.isPlainObject = lang$1.isPlainObject;
lodash.isRegExp = lang$1.isRegExp;
lodash.isSafeInteger = lang$1.isSafeInteger;
lodash.isSet = lang$1.isSet;
lodash.isString = lang$1.isString;
lodash.isSymbol = lang$1.isSymbol;
lodash.isTypedArray = lang$1.isTypedArray;
lodash.isUndefined = lang$1.isUndefined;
lodash.isWeakMap = lang$1.isWeakMap;
lodash.isWeakSet = lang$1.isWeakSet;
lodash.join = array.join;
lodash.kebabCase = string$1.kebabCase;
lodash.last = last;
lodash.lastIndexOf = array.lastIndexOf;
lodash.lowerCase = string$1.lowerCase;
lodash.lowerFirst = string$1.lowerFirst;
lodash.lt = lang$1.lt;
lodash.lte = lang$1.lte;
lodash.max = math.max;
lodash.maxBy = math.maxBy;
lodash.mean = math.mean;
lodash.meanBy = math.meanBy;
lodash.min = math.min;
lodash.minBy = math.minBy;
lodash.stubArray = util.stubArray;
lodash.stubFalse = util.stubFalse;
lodash.stubObject = util.stubObject;
lodash.stubString = util.stubString;
lodash.stubTrue = util.stubTrue;
lodash.multiply = math.multiply;
lodash.nth = array.nth;
lodash.noop = util.noop;
lodash.now = date$1.now;
lodash.pad = string$1.pad;
lodash.padEnd = string$1.padEnd;
lodash.padStart = string$1.padStart;
lodash.parseInt = string$1.parseInt;
lodash.random = number$1.random;
lodash.reduce = collection.reduce;
lodash.reduceRight = collection.reduceRight;
lodash.repeat = string$1.repeat;
lodash.replace = string$1.replace;
lodash.result = object$1.result;
lodash.round = math.round;
lodash.sample = collection.sample;
lodash.size = collection.size;
lodash.snakeCase = string$1.snakeCase;
lodash.some = collection.some;
lodash.sortedIndex = array.sortedIndex;
lodash.sortedIndexBy = array.sortedIndexBy;
lodash.sortedIndexOf = array.sortedIndexOf;
lodash.sortedLastIndex = array.sortedLastIndex;
lodash.sortedLastIndexBy = array.sortedLastIndexBy;
lodash.sortedLastIndexOf = array.sortedLastIndexOf;
lodash.startCase = string$1.startCase;
lodash.startsWith = string$1.startsWith;
lodash.subtract = math.subtract;
lodash.sum = math.sum;
lodash.sumBy = math.sumBy;
lodash.template = string$1.template;
lodash.times = util.times;
lodash.toFinite = lang$1.toFinite;
lodash.toInteger = toInteger;
lodash.toLength = lang$1.toLength;
lodash.toLower = string$1.toLower;
lodash.toNumber = lang$1.toNumber;
lodash.toSafeInteger = lang$1.toSafeInteger;
lodash.toString = lang$1.toString;
lodash.toUpper = string$1.toUpper;
lodash.trim = string$1.trim;
lodash.trimEnd = string$1.trimEnd;
lodash.trimStart = string$1.trimStart;
lodash.truncate = string$1.truncate;
lodash.unescape = string$1.unescape;
lodash.uniqueId = util.uniqueId;
lodash.upperCase = string$1.upperCase;
lodash.upperFirst = string$1.upperFirst;

// Add aliases.
lodash.each = collection.forEach;
lodash.eachRight = collection.forEachRight;
lodash.first = array.head;

mixin(lodash, (function() {
  var source = {};
  baseForOwn(lodash, function(func, methodName) {
    if (!hasOwnProperty.call(lodash.prototype, methodName)) {
      source[methodName] = func;
    }
  });
  return source;
}()), { 'chain': false });

/**
 * The semantic version number.
 *
 * @static
 * @memberOf _
 * @type {string}
 */
lodash.VERSION = VERSION;
(lodash.templateSettings = string$1.templateSettings).imports._ = lodash;

// Assign default placeholders.
arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
  lodash[methodName].placeholder = lodash;
});

// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
arrayEach(['drop', 'take'], function(methodName, index) {
  LazyWrapper.prototype[methodName] = function(n) {
    n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

    var result = (this.__filtered__ && !index)
      ? new LazyWrapper(this)
      : this.clone();

    if (result.__filtered__) {
      result.__takeCount__ = nativeMin(n, result.__takeCount__);
    } else {
      result.__views__.push({
        'size': nativeMin(n, MAX_ARRAY_LENGTH),
        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
      });
    }
    return result;
  };

  LazyWrapper.prototype[methodName + 'Right'] = function(n) {
    return this.reverse()[methodName](n).reverse();
  };
});

// Add `LazyWrapper` methods that accept an `iteratee` value.
arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
  var type = index + 1,
      isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

  LazyWrapper.prototype[methodName] = function(iteratee) {
    var result = this.clone();
    result.__iteratees__.push({
      'iteratee': baseIteratee(iteratee),
      'type': type
    });
    result.__filtered__ = result.__filtered__ || isFilter;
    return result;
  };
});

// Add `LazyWrapper` methods for `_.head` and `_.last`.
arrayEach(['head', 'last'], function(methodName, index) {
  var takeName = 'take' + (index ? 'Right' : '');

  LazyWrapper.prototype[methodName] = function() {
    return this[takeName](1).value()[0];
  };
});

// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
arrayEach(['initial', 'tail'], function(methodName, index) {
  var dropName = 'drop' + (index ? '' : 'Right');

  LazyWrapper.prototype[methodName] = function() {
    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
  };
});

LazyWrapper.prototype.compact = function() {
  return this.filter(identity);
};

LazyWrapper.prototype.find = function(predicate) {
  return this.filter(predicate).head();
};

LazyWrapper.prototype.findLast = function(predicate) {
  return this.reverse().find(predicate);
};

LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
  if (typeof path == 'function') {
    return new LazyWrapper(this);
  }
  return this.map(function(value) {
    return baseInvoke(value, path, args);
  });
});

LazyWrapper.prototype.reject = function(predicate) {
  return this.filter(negate(baseIteratee(predicate)));
};

LazyWrapper.prototype.slice = function(start, end) {
  start = toInteger(start);

  var result = this;
  if (result.__filtered__ && (start > 0 || end < 0)) {
    return new LazyWrapper(result);
  }
  if (start < 0) {
    result = result.takeRight(-start);
  } else if (start) {
    result = result.drop(start);
  }
  if (end !== undefined) {
    end = toInteger(end);
    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
  }
  return result;
};

LazyWrapper.prototype.takeRightWhile = function(predicate) {
  return this.reverse().takeWhile(predicate).reverse();
};

LazyWrapper.prototype.toArray = function() {
  return this.take(MAX_ARRAY_LENGTH);
};

// Add `LazyWrapper` methods to `lodash.prototype`.
baseForOwn(LazyWrapper.prototype, function(func, methodName) {
  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
      isTaker = /^(?:head|last)$/.test(methodName),
      lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
      retUnwrapped = isTaker || /^find/.test(methodName);

  if (!lodashFunc) {
    return;
  }
  lodash.prototype[methodName] = function() {
    var value = this.__wrapped__,
        args = isTaker ? [1] : arguments,
        isLazy = value instanceof LazyWrapper,
        iteratee = args[0],
        useLazy = isLazy || isArray$1(value);

    var interceptor = function(value) {
      var result = lodashFunc.apply(lodash, arrayPush([value], args));
      return (isTaker && chainAll) ? result[0] : result;
    };

    if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
      // Avoid lazy use if the iteratee has a "length" value other than `1`.
      isLazy = useLazy = false;
    }
    var chainAll = this.__chain__,
        isHybrid = !!this.__actions__.length,
        isUnwrapped = retUnwrapped && !chainAll,
        onlyLazy = isLazy && !isHybrid;

    if (!retUnwrapped && useLazy) {
      value = onlyLazy ? value : new LazyWrapper(this);
      var result = func.apply(value, args);
      result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
      return new LodashWrapper(result, chainAll);
    }
    if (isUnwrapped && onlyLazy) {
      return func.apply(this, args);
    }
    result = this.thru(interceptor);
    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
  };
});

// Add `Array` methods to `lodash.prototype`.
arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
  var func = arrayProto[methodName],
      chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

  lodash.prototype[methodName] = function() {
    var args = arguments;
    if (retUnwrapped && !this.__chain__) {
      var value = this.value();
      return func.apply(isArray$1(value) ? value : [], args);
    }
    return this[chainName](function(value) {
      return func.apply(isArray$1(value) ? value : [], args);
    });
  };
});

// Map minified method names to their real names.
baseForOwn(LazyWrapper.prototype, function(func, methodName) {
  var lodashFunc = lodash[methodName];
  if (lodashFunc) {
    var key = lodashFunc.name + '';
    if (!hasOwnProperty.call(realNames$1, key)) {
      realNames$1[key] = [];
    }
    realNames$1[key].push({ 'name': methodName, 'func': lodashFunc });
  }
});

realNames$1[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
  'name': 'wrapper',
  'func': undefined
}];

// Add methods to `LazyWrapper`.
LazyWrapper.prototype.clone = lazyClone;
LazyWrapper.prototype.reverse = lazyReverse;
LazyWrapper.prototype.value = lazyValue;

// Add chain sequence methods to the `lodash` wrapper.
lodash.prototype.at = seq.at;
lodash.prototype.chain = seq.wrapperChain;
lodash.prototype.commit = seq.commit;
lodash.prototype.next = seq.next;
lodash.prototype.plant = seq.plant;
lodash.prototype.reverse = seq.reverse;
lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = seq.value;

// Add lazy aliases.
lodash.prototype.first = lodash.prototype.head;

if (symIterator) {
  lodash.prototype[symIterator] = seq.toIterator;
}

// This file is autogenerated. It's used to publish ESM to npm.
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color, opts) {
  color = color ? color : "";
  opts = opts || {};

  // If input is already a tinycolor, return itself
  if (color instanceof tinycolor) {
    return color;
  }
  // If we are called as a function, call using new instead
  if (!(this instanceof tinycolor)) {
    return new tinycolor(color, opts);
  }
  var rgb = inputToRGB(color);
  this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
  this._gradientType = opts.gradientType;

  // Don't let the range of [0,255] come back in [0,1].
  // Potentially lose a little bit of precision here, but will fix issues where
  // .5 gets interpreted as half of the total, instead of half of 1
  // If it was supposed to be 128, this was already taken care of by `inputToRgb`
  if (this._r < 1) this._r = Math.round(this._r);
  if (this._g < 1) this._g = Math.round(this._g);
  if (this._b < 1) this._b = Math.round(this._b);
  this._ok = rgb.ok;
}
tinycolor.prototype = {
  isDark: function isDark() {
    return this.getBrightness() < 128;
  },
  isLight: function isLight() {
    return !this.isDark();
  },
  isValid: function isValid() {
    return this._ok;
  },
  getOriginalInput: function getOriginalInput() {
    return this._originalInput;
  },
  getFormat: function getFormat() {
    return this._format;
  },
  getAlpha: function getAlpha() {
    return this._a;
  },
  getBrightness: function getBrightness() {
    //http://www.w3.org/TR/AERT#color-contrast
    var rgb = this.toRgb();
    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
  },
  getLuminance: function getLuminance() {
    //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
    var rgb = this.toRgb();
    var RsRGB, GsRGB, BsRGB, R, G, B;
    RsRGB = rgb.r / 255;
    GsRGB = rgb.g / 255;
    BsRGB = rgb.b / 255;
    if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
  },
  setAlpha: function setAlpha(value) {
    this._a = boundAlpha(value);
    this._roundA = Math.round(100 * this._a) / 100;
    return this;
  },
  toHsv: function toHsv() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: this._a
    };
  },
  toHsvString: function toHsvString() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    var h = Math.round(hsv.h * 360),
      s = Math.round(hsv.s * 100),
      v = Math.round(hsv.v * 100);
    return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
  },
  toHsl: function toHsl() {
    var hsl = rgbToHsl(this._r, this._g, this._b);
    return {
      h: hsl.h * 360,
      s: hsl.s,
      l: hsl.l,
      a: this._a
    };
  },
  toHslString: function toHslString() {
    var hsl = rgbToHsl(this._r, this._g, this._b);
    var h = Math.round(hsl.h * 360),
      s = Math.round(hsl.s * 100),
      l = Math.round(hsl.l * 100);
    return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
  },
  toHex: function toHex(allow3Char) {
    return rgbToHex(this._r, this._g, this._b, allow3Char);
  },
  toHexString: function toHexString(allow3Char) {
    return "#" + this.toHex(allow3Char);
  },
  toHex8: function toHex8(allow4Char) {
    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
  },
  toHex8String: function toHex8String(allow4Char) {
    return "#" + this.toHex8(allow4Char);
  },
  toRgb: function toRgb() {
    return {
      r: Math.round(this._r),
      g: Math.round(this._g),
      b: Math.round(this._b),
      a: this._a
    };
  },
  toRgbString: function toRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
  },
  toPercentageRgb: function toPercentageRgb() {
    return {
      r: Math.round(bound01(this._r, 255) * 100) + "%",
      g: Math.round(bound01(this._g, 255) * 100) + "%",
      b: Math.round(bound01(this._b, 255) * 100) + "%",
      a: this._a
    };
  },
  toPercentageRgbString: function toPercentageRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
  },
  toName: function toName() {
    if (this._a === 0) {
      return "transparent";
    }
    if (this._a < 1) {
      return false;
    }
    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
  },
  toFilter: function toFilter(secondColor) {
    var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
    var secondHex8String = hex8String;
    var gradientType = this._gradientType ? "GradientType = 1, " : "";
    if (secondColor) {
      var s = tinycolor(secondColor);
      secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
  },
  toString: function toString(format) {
    var formatSet = !!format;
    format = format || this._format;
    var formattedString = false;
    var hasAlpha = this._a < 1 && this._a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
    if (needsAlphaFormat) {
      // Special case for "transparent", all other non-alpha formats
      // will return rgba when there is transparency.
      if (format === "name" && this._a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format === "hex" || format === "hex6") {
      formattedString = this.toHexString();
    }
    if (format === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format === "name") {
      formattedString = this.toName();
    }
    if (format === "hsl") {
      formattedString = this.toHslString();
    }
    if (format === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  },
  clone: function clone() {
    return tinycolor(this.toString());
  },
  _applyModification: function _applyModification(fn, args) {
    var color = fn.apply(null, [this].concat([].slice.call(args)));
    this._r = color._r;
    this._g = color._g;
    this._b = color._b;
    this.setAlpha(color._a);
    return this;
  },
  lighten: function lighten() {
    return this._applyModification(_lighten, arguments);
  },
  brighten: function brighten() {
    return this._applyModification(_brighten, arguments);
  },
  darken: function darken() {
    return this._applyModification(_darken, arguments);
  },
  desaturate: function desaturate() {
    return this._applyModification(_desaturate, arguments);
  },
  saturate: function saturate() {
    return this._applyModification(_saturate, arguments);
  },
  greyscale: function greyscale() {
    return this._applyModification(_greyscale, arguments);
  },
  spin: function spin() {
    return this._applyModification(_spin, arguments);
  },
  _applyCombination: function _applyCombination(fn, args) {
    return fn.apply(null, [this].concat([].slice.call(args)));
  },
  analogous: function analogous() {
    return this._applyCombination(_analogous, arguments);
  },
  complement: function complement() {
    return this._applyCombination(_complement, arguments);
  },
  monochromatic: function monochromatic() {
    return this._applyCombination(_monochromatic, arguments);
  },
  splitcomplement: function splitcomplement() {
    return this._applyCombination(_splitcomplement, arguments);
  },
  // Disabled until https://github.com/bgrins/TinyColor/issues/254
  // polyad: function (number) {
  //   return this._applyCombination(polyad, [number]);
  // },
  triad: function triad() {
    return this._applyCombination(polyad, [3]);
  },
  tetrad: function tetrad() {
    return this._applyCombination(polyad, [4]);
  }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function (color, opts) {
  if (_typeof(color) == "object") {
    var newColor = {};
    for (var i in color) {
      if (color.hasOwnProperty(i)) {
        if (i === "a") {
          newColor[i] = color[i];
        } else {
          newColor[i] = convertToPercentage(color[i]);
        }
      }
    }
    color = newColor;
  }
  return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {
  var rgb = {
    r: 0,
    g: 0,
    b: 0
  };
  var a = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format = false;
  if (typeof color == "string") {
    color = stringInputToObject(color);
  }
  if (_typeof(color) == "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l);
      ok = true;
      format = "hsl";
    }
    if (color.hasOwnProperty("a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok: ok,
    format: color.format || format,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a: a
  };
}

// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b),
    min = Math.min(r, g, b);
  var h,
    s,
    l = (max + min) / 2;
  if (max == min) {
    h = s = 0; // achromatic
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h: h,
    s: s,
    l: l
  };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
  var r, g, b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  function hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 1 / 2) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
  }
  if (s === 0) {
    r = g = b = l; // achromatic
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b),
    min = Math.min(r, g, b);
  var h,
    s,
    v = max;
  var d = max - min;
  s = max === 0 ? 0 : d / max;
  if (max == min) {
    h = 0; // achromatic
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h: h,
    s: s,
    v: v
  };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h),
    f = h - i,
    p = v * (1 - s),
    q = v * (1 - f * s),
    t = v * (1 - (1 - f) * s),
    mod = i % 6,
    r = [v, q, p, p, t, v][mod],
    g = [t, v, v, q, p, p][mod],
    b = [p, p, t, v, v, q][mod];
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {
  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];

  // Return a 3 character hex if possible
  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}

// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {
  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];

  // Return a 4 character hex if possible
  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}

// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {
  var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  return hex.join("");
}

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
  if (!color1 || !color2) return false;
  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};
tinycolor.random = function () {
  return tinycolor.fromRatio({
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  });
};

// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function _desaturate(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.s -= amount / 100;
  hsl.s = clamp01(hsl.s);
  return tinycolor(hsl);
}
function _saturate(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.s += amount / 100;
  hsl.s = clamp01(hsl.s);
  return tinycolor(hsl);
}
function _greyscale(color) {
  return tinycolor(color).desaturate(100);
}
function _lighten(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.l += amount / 100;
  hsl.l = clamp01(hsl.l);
  return tinycolor(hsl);
}
function _brighten(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var rgb = tinycolor(color).toRgb();
  rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
  rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
  rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
  return tinycolor(rgb);
}
function _darken(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.l -= amount / 100;
  hsl.l = clamp01(hsl.l);
  return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function _spin(color, amount) {
  var hsl = tinycolor(color).toHsl();
  var hue = (hsl.h + amount) % 360;
  hsl.h = hue < 0 ? 360 + hue : hue;
  return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function _complement(color) {
  var hsl = tinycolor(color).toHsl();
  hsl.h = (hsl.h + 180) % 360;
  return tinycolor(hsl);
}
function polyad(color, number) {
  if (isNaN(number) || number <= 0) {
    throw new Error("Argument to polyad must be a positive number");
  }
  var hsl = tinycolor(color).toHsl();
  var result = [tinycolor(color)];
  var step = 360 / number;
  for (var i = 1; i < number; i++) {
    result.push(tinycolor({
      h: (hsl.h + i * step) % 360,
      s: hsl.s,
      l: hsl.l
    }));
  }
  return result;
}
function _splitcomplement(color) {
  var hsl = tinycolor(color).toHsl();
  var h = hsl.h;
  return [tinycolor(color), tinycolor({
    h: (h + 72) % 360,
    s: hsl.s,
    l: hsl.l
  }), tinycolor({
    h: (h + 216) % 360,
    s: hsl.s,
    l: hsl.l
  })];
}
function _analogous(color, results, slices) {
  results = results || 6;
  slices = slices || 30;
  var hsl = tinycolor(color).toHsl();
  var part = 360 / slices;
  var ret = [tinycolor(color)];
  for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
    hsl.h = (hsl.h + part) % 360;
    ret.push(tinycolor(hsl));
  }
  return ret;
}
function _monochromatic(color, results) {
  results = results || 6;
  var hsv = tinycolor(color).toHsv();
  var h = hsv.h,
    s = hsv.s,
    v = hsv.v;
  var ret = [];
  var modification = 1 / results;
  while (results--) {
    ret.push(tinycolor({
      h: h,
      s: s,
      v: v
    }));
    v = (v + modification) % 1;
  }
  return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function (color1, color2, amount) {
  amount = amount === 0 ? 0 : amount || 50;
  var rgb1 = tinycolor(color1).toRgb();
  var rgb2 = tinycolor(color2).toRgb();
  var p = amount / 100;
  var rgba = {
    r: (rgb2.r - rgb1.r) * p + rgb1.r,
    g: (rgb2.g - rgb1.g) * p + rgb1.g,
    b: (rgb2.b - rgb1.b) * p + rgb1.b,
    a: (rgb2.a - rgb1.a) * p + rgb1.a
  };
  return tinycolor(rgba);
};

// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function (color1, color2) {
  var c1 = tinycolor(color1);
  var c2 = tinycolor(color2);
  return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
};

// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function (color1, color2, wcag2) {
  var readability = tinycolor.readability(color1, color2);
  var wcag2Parms, out;
  out = false;
  wcag2Parms = validateWCAG2Parms(wcag2);
  switch (wcag2Parms.level + wcag2Parms.size) {
    case "AAsmall":
    case "AAAlarge":
      out = readability >= 4.5;
      break;
    case "AAlarge":
      out = readability >= 3;
      break;
    case "AAAsmall":
      out = readability >= 7;
      break;
  }
  return out;
};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function (baseColor, colorList, args) {
  var bestColor = null;
  var bestScore = 0;
  var readability;
  var includeFallbackColors, level, size;
  args = args || {};
  includeFallbackColors = args.includeFallbackColors;
  level = args.level;
  size = args.size;
  for (var i = 0; i < colorList.length; i++) {
    readability = tinycolor.readability(baseColor, colorList[i]);
    if (readability > bestScore) {
      bestScore = readability;
      bestColor = tinycolor(colorList[i]);
    }
  }
  if (tinycolor.isReadable(baseColor, bestColor, {
    level: level,
    size: size
  }) || !includeFallbackColors) {
    return bestColor;
  } else {
    args.includeFallbackColors = false;
    return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
  }
};

// Big List of Colors
// ------------------
// <https://www.w3.org/TR/css-color-4/#named-colors>
var names = tinycolor.names = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "0ff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "00f",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  burntsienna: "ea7e5d",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "0ff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "f0f",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "663399",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);

// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
  var flipped = {};
  for (var i in o) {
    if (o.hasOwnProperty(i)) {
      flipped[o[i]] = i;
    }
  }
  return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
  if (isOnePointZero(n)) n = "100%";
  var processPercent = isPercentage(n);
  n = Math.min(max, Math.max(0, parseFloat(n)));

  // Automatically convert percentage into number
  if (processPercent) {
    n = parseInt(n * max, 10) / 100;
  }

  // Handle floating point rounding errors
  if (Math.abs(n - max) < 0.000001) {
    return 1;
  }

  // Convert into [0, 1] range if it isn't already
  return n % max / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
  return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
  return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
  return c.length == 1 ? "0" + c : "" + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
  if (n <= 1) {
    n = n * 100 + "%";
  }
  return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
var matchers = function () {
  // <http://www.w3.org/TR/css3-values/#integers>
  var CSS_INTEGER = "[-\\+]?\\d+%?";

  // <http://www.w3.org/TR/css3-values/#number-value>
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

  // Actual matching.
  // Parentheses and commas are optional, but not required.
  // Whitespace can take the place of commas or opening paren
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  return {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
}();

// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
  return !!matchers.CSS_UNIT.exec(color);
}

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {
  color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color == "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }

  // Try to match string input using regular expressions.
  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
  // Just return an object and let the conversion functions handle that.
  // This way the result will be the same whether the tinycolor is initialized with string or object.
  var match;
  if (match = matchers.rgb.exec(color)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  if (match = matchers.rgba.exec(color)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsl.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  if (match = matchers.hsla.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsv.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  if (match = matchers.hsva.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hex8.exec(color)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  if (match = matchers.hex6.exec(color)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  if (match = matchers.hex4.exec(color)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      a: convertHexToDecimal(match[4] + "" + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  if (match = matchers.hex3.exec(color)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function validateWCAG2Parms(parms) {
  // return valid WCAG2 parms for isReadable.
  // If input parms are invalid, return {"level":"AA", "size":"small"}
  var level, size;
  parms = parms || {
    level: "AA",
    size: "small"
  };
  level = (parms.level || "AA").toUpperCase();
  size = (parms.size || "small").toLowerCase();
  if (level !== "AA" && level !== "AAA") {
    level = "AA";
  }
  if (size !== "small" && size !== "large") {
    size = "small";
  }
  return {
    level: level,
    size: size
  };
}

var WHITE_COLOR = '#FFFFFF';
var BLACK_COLOR = '#000000';
/** S2 标准色板 mix 规则 */
var STANDARD_COLOR_MIX_PERCENT = [95, 85, 75, 30, 15, 0, 15, 30, 45, 60, 80];
/**
 * basic color 数量
 * @see Palette.basicColors
 */
var BASIC_COLOR_COUNT = 15;
/**
 * 智能反色使用
 * @param color
 */
var shouldReverseFontColor = function (color) {
    return tinycolor(color).getLuminance() <= 0.5;
};
var FONT_COLOR_RELATIONS = [
    {
        fontColorIndex: 0,
        bgColorIndex: 3,
    },
    {
        fontColorIndex: 13,
        bgColorIndex: 8,
    },
    {
        fontColorIndex: 14,
        bgColorIndex: 1,
    },
];
/**
 * 生成 s2 设计规范下的标准色（共 11 个）
 *
 * - 第 1~5 为主题色加白
 * - 第 6 为主题色
 * - 第 7~11 为主题色加黑
 *
 * @param brandColor 主题色
 * @returns 标准色卡
 */
var generateStandardColors = function (brandColor) {
    var standardColors = [];
    for (var index = 0; index < 11; index++) {
        var mixPercent = STANDARD_COLOR_MIX_PERCENT[index];
        standardColors.push(mixPercent === 0
            ? toUpper(brandColor)
            : toUpper(tinycolor
                .mix(brandColor, index < 5 ? WHITE_COLOR : BLACK_COLOR, mixPercent)
                .toHexString()));
    }
    return standardColors;
};
/**
 * 根据 S2 内置色板及自选主题色生成新色板
 * @param paletteMeta @PaletteMeta
 * @returns 新色板
 */
var generatePalette = function (paletteMeta) {
    if (paletteMeta === void 0) { paletteMeta = {}; }
    var basicColors = Array.from(Array(BASIC_COLOR_COUNT)).fill(REVERSE_FONT_COLOR);
    var _a = paletteMeta.basicColorRelations, basicColorRelations = _a === void 0 ? [] : _a, brandColor = paletteMeta.brandColor;
    var standardColors = generateStandardColors(brandColor);
    // 使用标准色填充 basicColors
    basicColorRelations.forEach(function (relation) {
        basicColors[relation.basicColorIndex] =
            standardColors[relation.standardColorIndex];
    });
    // 根据背景明暗设置字体颜色
    FONT_COLOR_RELATIONS.forEach(function (_a) {
        var fontColorIndex = _a.fontColorIndex, bgColorIndex = _a.bgColorIndex;
        basicColors[fontColorIndex] = shouldReverseFontColor(basicColors[bgColorIndex])
            ? REVERSE_FONT_COLOR
            : DEFAULT_FONT_COLOR;
    });
    return __assign(__assign({}, paletteMeta), { basicColors: basicColors });
};

var paletteColorfulMeta = {
    brandColor: '#3471F9',
    // ---------- semantic colors ----------
    semanticColors: {
        red: '#FF4D4F',
        green: '#29A294',
        yellow: '#FAAD14',
    },
    others: {
        // ---------- searchResults colors ----------
        highlight: '#87B5FF',
        results: '#F0F7FF',
    },
    basicColorRelations: [
        {
            basicColorIndex: 1,
            standardColorIndex: 0,
        },
        {
            basicColorIndex: 2,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 3,
            standardColorIndex: 5,
        },
        {
            basicColorIndex: 4,
            standardColorIndex: 6,
        },
        {
            basicColorIndex: 5,
            standardColorIndex: 6,
        },
        {
            basicColorIndex: 6,
            standardColorIndex: 6,
        },
        {
            basicColorIndex: 7,
            standardColorIndex: 5,
        },
        {
            basicColorIndex: 9,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 10,
            standardColorIndex: 4,
        },
        {
            basicColorIndex: 11,
            standardColorIndex: 4,
        },
        {
            basicColorIndex: 12,
            standardColorIndex: 5,
        },
    ],
};
var paletteColorful = generatePalette(paletteColorfulMeta);

var paletteDefaultMeta = {
    brandColor: '#326EF4',
    // ---------- semantic colors ----------
    semanticColors: {
        red: '#FF4D4F',
        green: '#29A294',
        yellow: '#FAAD14',
    },
    others: {
        // ---------- searchResults colors ----------
        highlight: '#87B5FF',
        results: '#F0F7FF',
    },
    basicColorRelations: [
        {
            basicColorIndex: 1,
            standardColorIndex: 0,
        },
        {
            basicColorIndex: 2,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 3,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 4,
            standardColorIndex: 2,
        },
        {
            basicColorIndex: 5,
            standardColorIndex: 7,
        },
        {
            basicColorIndex: 6,
            standardColorIndex: 5,
        },
        {
            basicColorIndex: 7,
            standardColorIndex: 5,
        },
        {
            basicColorIndex: 9,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 10,
            standardColorIndex: 2,
        },
        {
            basicColorIndex: 11,
            standardColorIndex: 5,
        },
        {
            basicColorIndex: 12,
            standardColorIndex: 5,
        },
    ],
};
var paletteDefault = generatePalette(paletteDefaultMeta);

var paletteGrayMeta = {
    brandColor: '#9DA7B6',
    // ---------- semantic colors ----------
    semanticColors: {
        red: '#FF4D4F',
        green: '#29A294',
        yellow: '#FAAD14',
    },
    others: {
        // ---------- searchResults colors ----------
        highlight: '#87B5FF',
        results: '#F0F7FF',
    },
    basicColorRelations: [
        {
            basicColorIndex: 1,
            standardColorIndex: 0,
        },
        {
            basicColorIndex: 2,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 3,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 4,
            standardColorIndex: 2,
        },
        {
            basicColorIndex: 5,
            standardColorIndex: 7,
        },
        {
            basicColorIndex: 6,
            standardColorIndex: 8,
        },
        {
            basicColorIndex: 7,
            standardColorIndex: 5,
        },
        {
            basicColorIndex: 9,
            standardColorIndex: 1,
        },
        {
            basicColorIndex: 10,
            standardColorIndex: 2,
        },
        {
            basicColorIndex: 11,
            standardColorIndex: 3,
        },
        {
            basicColorIndex: 12,
            standardColorIndex: 3,
        },
    ],
};
var paletteGray = generatePalette(paletteGrayMeta);

// Map of the theme
var PALETTE_MAP = {
    default: paletteDefault,
    colorful: paletteColorful,
    gray: paletteGray,
};
var FONT_FAMILY = 'Roboto, PingFangSC, BlinkMacSystemFont, Microsoft YaHei, Arial, sans-serif';
var INTERVAL_BAR_HEIGHT = 12;

var ZH_CN = {
    小计: '小计',
    总计: '总计',
    总和: '（总和）',
    项: '项',
    已选择: '已选择',
    序号: '序号',
    度量: '度量',
    数值: '数值',
    共计: '共计',
    条: '条',
    趋势: '趋势',
    隐藏: '隐藏',
    组内升序: '组内升序',
    升序: '升序',
    降序: '降序',
    组内降序: '组内降序',
    不排序: '不排序',
    '，': '，',
};

var EN_US = {
    小计: 'Total',
    总计: 'Total',
    总和: '(SUM)',
    项: 'items',
    已选择: 'selected',
    序号: 'Index',
    度量: 'Measure',
    数值: 'Measure',
    共计: 'Total',
    条: '',
    隐藏: 'Hide',
    趋势: 'Trend',
    组内升序: 'Group ASC',
    组内降序: 'Group DESC',
    升序: 'ASC',
    降序: 'DESC',
    不排序: 'No order',
    '，': ', ',
};

var DEFAULT_LANG = 'zh_CN';
var lang = DEFAULT_LANG;
var locale = {
    zh_CN: ZH_CN,
    en_US: EN_US,
};
var getLang = function () { return lang; };
/**
 * 设置语言
 * @param lang
 */
var setLang = function (langType) {
    lang = langType || DEFAULT_LANG;
};
/**
 * 拓展locale配置
 */
var extendLocale = function (extraLocale) {
    locale = merge$1({}, locale, extraLocale);
};
var getLocale = function () { return locale; };
var i18n = function (key, defaultValue) {
    if (defaultValue === void 0) { defaultValue = key; }
    return get(locale, [lang, key], defaultValue);
};

var TOOLTIP_PREFIX_CLS = "".concat(S2_PREFIX_CLS, "-tooltip");
var TOOLTIP_CONTAINER_CLS = "".concat(TOOLTIP_PREFIX_CLS, "-container");
var TOOLTIP_CONTAINER_SHOW_CLS = "".concat(TOOLTIP_CONTAINER_CLS, "-show");
var TOOLTIP_CONTAINER_HIDE_CLS = "".concat(TOOLTIP_CONTAINER_CLS, "-hide");
var TOOLTIP_OPERATION_PREFIX_CLS = "".concat(TOOLTIP_PREFIX_CLS, "-operation");
var TOOLTIP_POSITION_OFFSET = {
    x: 15,
    y: 10,
};
var getTooltipOperatorHiddenColumnsMenu = function () { return ({
    key: 'hiddenColumns',
    text: i18n('隐藏'),
    icon: 'EyeOutlined',
}); };
var getTooltipOperatorTrendMenu = function () { return ({
    key: 'trend',
    text: i18n('趋势'),
    icon: 'Trend',
}); };
var getTooltipOperatorSortMenus = function () { return [
    {
        key: 'asc',
        icon: 'groupAsc',
        text: i18n('组内升序'),
    },
    {
        key: 'desc',
        icon: 'groupDesc',
        text: i18n('组内降序'),
    },
    {
        key: 'none',
        text: i18n('不排序'),
    },
]; };
var getTooltipOperatorTableSortMenus = function () { return [
    {
        key: 'asc',
        icon: 'groupAsc',
        text: i18n('升序'),
    },
    {
        key: 'desc',
        icon: 'groupDesc',
        text: i18n('降序'),
    },
    {
        key: 'none',
        text: i18n('不排序'),
    },
]; };

var CopyType;
(function (CopyType) {
    CopyType[CopyType["ALL"] = 0] = "ALL";
    CopyType[CopyType["COL"] = 1] = "COL";
    CopyType[CopyType["ROW"] = 2] = "ROW";
})(CopyType || (CopyType = {}));

var DEFAULT_PAGE_INDEX = 1;

var QueryDataType;
(function (QueryDataType) {
    QueryDataType["All"] = "all";
    QueryDataType["DetailOnly"] = "detailOnly";
})(QueryDataType || (QueryDataType = {}));

/*
 * 判断是否是移动端。
 * 兼容场景：pc端但是使用mobile配置。
 */
function isMobile(device) {
    if (device === 'mobile') {
        return true;
    }
    return /(iPhone|iPad|SymbianOS|Windows Phone|iPod|iOS|Android)/i.test(navigator.userAgent);
}
function isIPhoneX() {
    // eslint-disable-next-line no-restricted-globals
    return (/iPhone/gi.test(navigator.userAgent) &&
        window.screen.height === 812 &&
        window.screen.width === 375);
}
function isWindows() {
    return /windows/i.test(navigator.userAgent);
}

/**
 * 获取当前的主题色板
 * @param type 主题名
 */
var getPalette = function (type) {
    var themeName = type || 'default';
    return PALETTE_MAP[themeName.toLowerCase()];
};

/**
 * @describe generate the theme according to the type
 * @param themeCfg
 */
var getTheme = function (themeCfg) {
    var _a, _b, _c, _d, _e;
    var _f = (themeCfg === null || themeCfg === void 0 ? void 0 : themeCfg.palette) || getPalette(themeCfg === null || themeCfg === void 0 ? void 0 : themeCfg.name), basicColors = _f.basicColors, semanticColors = _f.semanticColors, otherColors = _f.others;
    var isTable = (_a = themeCfg === null || themeCfg === void 0 ? void 0 : themeCfg.spreadsheet) === null || _a === void 0 ? void 0 : _a.isTableMode();
    var boldTextDefaultFontWeight = isWindows() ? 'bold' : 700;
    var getDataCell = function () {
        var _a, _b;
        return ({
            bolderText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: boldTextDefaultFontWeight,
                fill: basicColors[13],
                opacity: 1,
                textAlign: 'right',
                textBaseline: 'middle',
                linkTextFill: basicColors[6],
            },
            text: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: 'normal',
                fill: basicColors[13],
                opacity: 1,
                textAlign: 'right',
                textBaseline: 'middle',
                linkTextFill: basicColors[6],
            },
            cell: {
                // ----------- background color -----------
                crossBackgroundColor: basicColors[1],
                backgroundColor: basicColors[8],
                backgroundColorOpacity: 1,
                // ----------- border color --------------
                horizontalBorderColor: basicColors[9],
                horizontalBorderColorOpacity: 1,
                verticalBorderColor: basicColors[9],
                verticalBorderColorOpacity: 1,
                // ----------- border width --------------
                horizontalBorderWidth: 1,
                verticalBorderWidth: 1,
                // -------------- border dash -----------------
                borderDash: [],
                // -------------- layout -----------------
                padding: {
                    top: 8,
                    right: 8,
                    bottom: 8,
                    left: 8,
                },
                /* ---------- interaction state ----------- */
                interactionState: {
                    // -------------- hover -------------------
                    hover: {
                        backgroundColor: basicColors[2],
                        backgroundOpacity: 0.6,
                    },
                    // -------------- keep hover -------------------
                    hoverFocus: {
                        backgroundColor: basicColors[2],
                        backgroundOpacity: 0.6,
                        borderColor: basicColors[14],
                        borderWidth: 1,
                        borderOpacity: 1,
                    },
                    // -------------- selected -------------------
                    selected: {
                        backgroundColor: basicColors[2],
                        backgroundOpacity: 0.6,
                    },
                    // -------------- unselected -------------------
                    unselected: {
                        backgroundOpacity: 0.3,
                        textOpacity: 0.3,
                        opacity: 0.3,
                    },
                    // -------------- searchResult -------------------
                    searchResult: {
                        backgroundColor: (_a = otherColors === null || otherColors === void 0 ? void 0 : otherColors.results) !== null && _a !== void 0 ? _a : basicColors[2],
                        backgroundOpacity: 1,
                    },
                    // -------------- highlight -------------------
                    highlight: {
                        backgroundColor: (_b = otherColors === null || otherColors === void 0 ? void 0 : otherColors.highlight) !== null && _b !== void 0 ? _b : basicColors[6],
                        backgroundOpacity: 1,
                    },
                    // -------------- prepare select --------------
                    prepareSelect: {
                        borderColor: basicColors[14],
                        borderOpacity: 1,
                        borderWidth: 1,
                    },
                },
            },
            // ------------- mini chart ---------------
            miniChart: {
                // ------------- line graph -----------------
                line: {
                    point: {
                        size: 2.2,
                        fill: basicColors[6],
                        opacity: 1,
                    },
                    linkLine: {
                        size: 1.5,
                        fill: basicColors[6],
                        opacity: 0.6,
                    },
                },
                // ------------- bar graph -----------------
                bar: {
                    intervalPadding: 4,
                    fill: basicColors[6],
                    opacity: 1,
                },
                // ------------- bullet graph -----------------
                bullet: {
                    progressBar: {
                        widthPercent: 0.6,
                        height: 10,
                        innerHeight: 6,
                    },
                    comparativeMeasure: {
                        width: 1,
                        height: 12,
                        fill: basicColors[13],
                        opacity: 0.25,
                    },
                    rangeColors: {
                        good: semanticColors === null || semanticColors === void 0 ? void 0 : semanticColors.green,
                        satisfactory: semanticColors.yellow,
                        bad: semanticColors.red,
                    },
                    backgroundColor: '#E9E9E9',
                },
                // ------------ interval bar graph -----------------
                interval: {
                    height: INTERVAL_BAR_HEIGHT,
                    fill: basicColors[7],
                },
            },
            icon: {
                fill: basicColors[13],
                downIconColor: semanticColors.red,
                upIconColor: semanticColors.green,
                size: 10,
                margin: {
                    right: 4,
                    left: 4,
                },
            },
        });
    };
    return {
        // ------------- Headers -------------------
        cornerCell: {
            bolderText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: boldTextDefaultFontWeight,
                fill: basicColors[0],
                opacity: 1,
                textAlign: isTable ? 'center' : 'left',
                textBaseline: 'middle',
            },
            text: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: boldTextDefaultFontWeight,
                fill: basicColors[0],
                opacity: 1,
                textAlign: 'right',
                textBaseline: 'middle',
            },
            cell: {
                // ----------- background color -----------
                backgroundColor: basicColors[3],
                backgroundColorOpacity: 1,
                // ----------- border color --------------
                horizontalBorderColor: basicColors[10],
                horizontalBorderColorOpacity: 1,
                verticalBorderColor: basicColors[10],
                verticalBorderColorOpacity: 1,
                // ----------- border width --------------
                horizontalBorderWidth: 1,
                verticalBorderWidth: 1,
                // -------------- border dash -----------------
                borderDash: [],
                // -------------- layout -----------------
                padding: {
                    top: 0,
                    right: 8,
                    bottom: 0,
                    left: 8,
                },
            },
            icon: {
                fill: basicColors[0],
                size: 10,
                margin: {
                    right: 4,
                    left: 4,
                },
            },
        },
        rowCell: {
            seriesText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: 'normal',
                fill: basicColors[14],
                linkTextFill: basicColors[6],
                opacity: 1,
                textBaseline: isTable ? 'middle' : 'top',
                textAlign: 'center',
            },
            measureText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: 'normal',
                fill: basicColors[14],
                linkTextFill: basicColors[6],
                opacity: 1,
                textAlign: isTable ? 'center' : 'left',
                textBaseline: 'top',
            },
            bolderText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: boldTextDefaultFontWeight,
                fill: basicColors[14],
                linkTextFill: basicColors[6],
                opacity: 1,
                textAlign: isTable ? 'center' : 'left',
                textBaseline: 'top',
            },
            text: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: 'normal',
                fill: basicColors[14],
                linkTextFill: basicColors[6],
                opacity: 1,
                textBaseline: 'top',
                textAlign: isTable ? 'center' : 'left', // default align center for row cell in table mode
            },
            cell: {
                // ----------- background color -----------
                backgroundColor: basicColors[1],
                backgroundColorOpacity: 1,
                // ----------- bottom border color --------------
                horizontalBorderColor: basicColors[9],
                horizontalBorderColorOpacity: 1,
                verticalBorderColor: basicColors[9],
                verticalBorderColorOpacity: 1,
                // ----------- bottom border width --------------
                horizontalBorderWidth: 1,
                verticalBorderWidth: 1,
                // -------------- border dash -----------------
                borderDash: [],
                // -------------- layout -----------------
                padding: {
                    top: 0,
                    right: 8,
                    bottom: 0,
                    left: 8,
                },
                /* ---------- interaction state ----------- */
                interactionState: {
                    // -------------- hover -------------------
                    hover: {
                        backgroundColor: basicColors[2],
                        backgroundOpacity: 0.6,
                    },
                    // -------------- selected -------------------
                    selected: {
                        backgroundColor: basicColors[2],
                        backgroundOpacity: 0.6,
                    },
                    // -------------- unselected -------------------
                    unselected: {
                        backgroundOpacity: 0.3,
                        textOpacity: 0.3,
                        opacity: 0.3,
                    },
                    // -------------- prepare select --------------
                    prepareSelect: {
                        borderColor: basicColors[14],
                        borderOpacity: 1,
                        borderWidth: 1,
                    },
                    // -------------- searchResult -------------------
                    searchResult: {
                        backgroundColor: (_b = otherColors === null || otherColors === void 0 ? void 0 : otherColors.results) !== null && _b !== void 0 ? _b : basicColors[2],
                        backgroundOpacity: 1,
                    },
                    // -------------- highlight -------------------
                    highlight: {
                        backgroundColor: (_c = otherColors === null || otherColors === void 0 ? void 0 : otherColors.highlight) !== null && _c !== void 0 ? _c : basicColors[6],
                        backgroundOpacity: 1,
                    },
                },
            },
            icon: {
                fill: basicColors[14],
                size: 10,
                margin: {
                    right: 4,
                    left: 4,
                },
            },
            seriesNumberWidth: 80,
        },
        colCell: {
            measureText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: 'normal',
                fill: basicColors[0],
                opacity: 1,
                // 默认数值字段和 dataCell 数值对齐
                textAlign: 'right',
                textBaseline: 'middle',
            },
            bolderText: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: boldTextDefaultFontWeight,
                fill: basicColors[0],
                opacity: 1,
                textAlign: 'center',
                textBaseline: 'middle',
            },
            text: {
                fontFamily: FONT_FAMILY,
                fontSize: 12,
                fontWeight: 'normal',
                fill: basicColors[0],
                opacity: 1,
                textAlign: 'center',
                textBaseline: 'middle',
            },
            cell: {
                // ----------- background color -----------
                backgroundColor: basicColors[3],
                backgroundColorOpacity: 1,
                // ----------- border color --------------
                horizontalBorderColor: basicColors[10],
                horizontalBorderColorOpacity: 1,
                verticalBorderColor: basicColors[10],
                verticalBorderColorOpacity: 1,
                // ----------- border width --------------
                horizontalBorderWidth: 1,
                verticalBorderWidth: 1,
                // -------------- border dash -----------------
                borderDash: [],
                // -------------- layout -----------------
                padding: {
                    top: 0,
                    right: 8,
                    bottom: 0,
                    left: 8,
                },
                /* ---------- interaction state ----------- */
                interactionState: {
                    // -------------- hover -------------------
                    hover: {
                        backgroundColor: basicColors[4],
                        backgroundOpacity: 0.6,
                    },
                    // -------------- selected -------------------
                    selected: {
                        backgroundColor: basicColors[4],
                        backgroundOpacity: 0.6,
                    },
                    // -------------- unselected -------------------
                    unselected: {
                        backgroundOpacity: 0.3,
                        textOpacity: 0.3,
                        opacity: 0.3,
                    },
                    // -------------- prepare select --------------
                    prepareSelect: {
                        borderColor: basicColors[14],
                        borderOpacity: 1,
                        borderWidth: 1,
                    },
                    // -------------- searchResult -------------------
                    searchResult: {
                        backgroundColor: (_d = otherColors === null || otherColors === void 0 ? void 0 : otherColors.results) !== null && _d !== void 0 ? _d : basicColors[2],
                        backgroundOpacity: 1,
                    },
                    // -------------- highlight -------------------
                    highlight: {
                        backgroundColor: (_e = otherColors === null || otherColors === void 0 ? void 0 : otherColors.highlight) !== null && _e !== void 0 ? _e : basicColors[6],
                        backgroundOpacity: 1,
                    },
                },
            },
            icon: {
                fill: basicColors[0],
                size: 10,
                margin: {
                    top: 6,
                    right: 4,
                    bottom: 6,
                    left: 4,
                },
            },
        },
        // ------------- DataCell -------------------
        dataCell: getDataCell(),
        // ------------- MergedCell -------------------
        mergedCell: getDataCell(),
        // resize active area
        resizeArea: {
            size: 3,
            background: basicColors[7],
            backgroundOpacity: 0,
            guideLineColor: basicColors[7],
            guideLineDisableColor: 'rgba(0,0,0,0.25)',
            guideLineDash: [3, 3],
            /* ---------- interaction state ----------- */
            interactionState: {
                hover: {
                    backgroundColor: basicColors[7],
                    backgroundOpacity: 1,
                },
            },
        },
        // ------------- scrollBar -------------------
        scrollBar: {
            trackColor: 'rgba(0,0,0,0.01)',
            thumbHoverColor: 'rgba(0,0,0,0.25)',
            thumbColor: 'rgba(0,0,0,0.15)',
            thumbHorizontalMinSize: 32,
            thumbVerticalMinSize: 32,
            size: isMobile() ? 3 : 6,
            hoverSize: isMobile() ? 4 : 8,
            lineCap: 'round',
        },
        // ------------- split line -----------------
        splitLine: {
            horizontalBorderColor: basicColors[12],
            horizontalBorderColorOpacity: 0.2,
            horizontalBorderWidth: 2,
            verticalBorderColor: basicColors[11],
            verticalBorderColorOpacity: 0.25,
            verticalBorderWidth: 2,
            showShadow: true,
            shadowWidth: 8,
            shadowColors: {
                left: 'rgba(0,0,0,0.1)',
                right: 'rgba(0,0,0,0)',
            },
            borderDash: [],
        },
        // ------------- prepareSelectMask -----------------
        prepareSelectMask: {
            backgroundColor: basicColors[5],
            backgroundOpacity: 0.3,
        },
        // ------------- canvas background
        background: {
            color: basicColors[8],
            opacity: 1,
        },
    };
};

/**
 * Node for cornerHeader, colHeader, rowHeader
 */
var Node$1 = /** @class */ (function () {
    function Node(cfg) {
        // node top-left x-coordinate
        this.x = 0;
        // node top-left y-coordinate
        this.y = 0;
        // node width
        this.width = 0;
        // node height
        this.height = 0;
        // cell index in layout list(TODO What's use for?)
        this.colIndex = -1;
        // node's level in tree hierarchy
        this.level = 0;
        // check if node is leaf(the max level in tree)
        this.isLeaf = false;
        // node's children
        this.children = [];
        // node width adaptive mode need paddingLeft = paddingRight
        this.padding = 0;
        var id = cfg.id, key = cfg.key, value = cfg.value, label = cfg.label, parent = cfg.parent, level = cfg.level, rowIndex = cfg.rowIndex, isTotals = cfg.isTotals, isGrandTotals = cfg.isGrandTotals, isSubTotals = cfg.isSubTotals, isCollapsed = cfg.isCollapsed, isTotalRoot = cfg.isTotalRoot, hierarchy = cfg.hierarchy, isPivotMode = cfg.isPivotMode, seriesNumberWidth = cfg.seriesNumberWidth, field = cfg.field, spreadsheet = cfg.spreadsheet, query = cfg.query, belongsCell = cfg.belongsCell, inCollapseNode = cfg.inCollapseNode, isTotalMeasure = cfg.isTotalMeasure, isLeaf = cfg.isLeaf, extra = cfg.extra;
        this.id = id;
        this.key = key;
        this.value = value;
        this.label = label || value;
        this.parent = parent;
        this.level = level;
        this.rowIndex = rowIndex;
        this.isTotals = isTotals;
        this.isCollapsed = isCollapsed;
        this.hierarchy = hierarchy;
        this.isPivotMode = isPivotMode;
        this.seriesNumberWidth = seriesNumberWidth;
        this.field = field;
        this.spreadsheet = spreadsheet;
        this.query = query;
        this.belongsCell = belongsCell;
        this.inCollapseNode = inCollapseNode;
        this.isTotalMeasure = isTotalMeasure;
        this.isLeaf = isLeaf;
        this.isGrandTotals = isGrandTotals;
        this.isSubTotals = isSubTotals;
        this.isTotalRoot = isTotalRoot;
        this.extra = extra;
    }
    /**
     * Get node's field path
     * eg: node.id = root[&]东北[&]黑龙江
     * => [area, province]
     * @param node
     */
    Node.getFieldPath = function (node, isDrillDown) {
        if ((node && !node.isTotals) || (node && isDrillDown)) {
            // total nodes don't need rows from node self except in drill down mode
            var parent_1 = node.parent;
            var fieldPath = [node.field];
            while (parent_1 && parent_1.id !== ROOT_ID) {
                fieldPath.push(parent_1.field);
                parent_1 = parent_1.parent;
            }
            return fieldPath.reverse();
        }
    };
    /**
     * Get all leaves in this node branch, eg:
     *        c1
     *    b1〈
     *        c2
     * a〈
     *        c3
     *    b2〈
     *        c4
     * get a branch's all leaves(c1~c4)
     * @param node
     */
    Node.getAllLeaveNodes = function (node) {
        var leaves = [];
        if (node.isLeaf) {
            return [node];
        }
        // current root node children
        var nodes = __spreadArray$1([], __read(node.children), false);
        var current = nodes.shift();
        while (current) {
            if (current.isLeaf) {
                leaves.push(current);
            }
            else {
                nodes.unshift.apply(nodes, __spreadArray$1([], __read(current.children), false));
            }
            current = nodes.shift();
        }
        return leaves;
    };
    /**
     * Get all children nodes in this node branch, eg:
     *        c1
     *    b1〈
     *        c2
     * a〈
     *        c3
     *    b2〈
     *        c4
     * get a branch's all nodes(c1~c4, b1, b2)
     * @param node
     */
    Node.getAllChildrenNodes = function (node) {
        var all = [];
        if (node.isLeaf) {
            return [node];
        }
        // current root node children
        var nodes = __spreadArray$1([], __read((node.children || [])), false);
        var current = nodes.shift();
        while (current) {
            all.push(current);
            nodes.unshift.apply(nodes, __spreadArray$1([], __read(current.children), false));
            current = nodes.shift();
        }
        return all;
    };
    /**
     * Get all children branch in this node branch, eg:
     *        c1
     *    b1〈
     *        c2
     * a〈
     *        c3
     *    b2〈
     *        c4
     * get all branch [[b1,c1],[b1,c2],[b2,c3],[b2,c4]]
     * @param parent
     */
    Node.getAllBranch = function (parent) {
        var all = [];
        var leaves = this.getAllLeaveNodes(parent);
        var current = leaves.shift();
        var tempBranch = [];
        while (current) {
            tempBranch.unshift(current);
            var pa = current.parent;
            while (pa) {
                if (!isEqual(pa, parent)) {
                    tempBranch.unshift(pa);
                }
                else {
                    break;
                }
                pa = pa.parent;
            }
            all.push(tempBranch);
            current = leaves.shift();
            tempBranch = [];
        }
        return all;
    };
    Node.blankNode = function () {
        return new Node({
            id: '',
            key: '',
            value: '',
        });
    };
    Node.rootNode = function () {
        return new Node({
            id: 'root',
            key: '',
            value: '',
        });
    };
    Node.prototype.toJSON = function () {
        return omit$1(this, ['config', 'hierarchy', 'parent', 'spreadsheet']);
    };
    Node.prototype.getHeadLeafChild = function () {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var leafChild = this;
        while (!isEmpty(leafChild.children)) {
            leafChild = head(leafChild.children);
        }
        return leafChild;
    };
    /**
     * 获取树状模式下，当前节点以及其所有子节点的高度总和
     * */
    Node.prototype.getTotalHeightForTreeHierarchy = function () {
        if (this.height === 0 || isEmpty(this.children)) {
            return this.height;
        }
        return this.children.reduce(function (sum, child) { return sum + child.getTotalHeightForTreeHierarchy(); }, this.height);
    };
    return Node;
}());

/**
 * Row and Column hierarchy to handle all contained nodes
 */
var Hierarchy = /** @class */ (function () {
    function Hierarchy() {
        // the full width contains all nodes
        this.width = 0;
        // the full height contains all nodes
        this.height = 0;
        // just a mark to get node from each level
        this.maxLevel = -1;
        // each level's first node
        this.sampleNodesForAllLevels = [];
        // last level's first node
        this.sampleNodeForLastLevel = null;
        // all nodes in this hierarchy
        this.allNodesWithoutRoot = [];
        // all nodes in the lastLevel
        this.indexNode = [];
    }
    // get all leaf nodes
    Hierarchy.prototype.getLeaves = function () {
        return this.allNodesWithoutRoot.filter(function (value) { return value.isLeaf; });
    };
    /**
     * Get all or level-related nodes in hierarchy
     * @param level
     */
    Hierarchy.prototype.getNodes = function (level) {
        if (level !== undefined) {
            return this.allNodesWithoutRoot.filter(function (value) { return value.level === level; });
        }
        return this.allNodesWithoutRoot;
    };
    /**
     * Get all or less than level-related nodes in hierarchy
     * @param lessThanLevel
     */
    Hierarchy.prototype.getNodesLessThanLevel = function (lessThanLevel) {
        return this.allNodesWithoutRoot.filter(function (value) { return value.level <= lessThanLevel; });
    };
    /**
     * Add new node
     * @param value
     * @param insetIndex
     */
    Hierarchy.prototype.pushNode = function (value, insetIndex) {
        if (insetIndex === void 0) { insetIndex = -1; }
        if (insetIndex === -1) {
            this.allNodesWithoutRoot.push(value);
        }
        else {
            this.allNodesWithoutRoot.splice(insetIndex, 0, value);
        }
    };
    Hierarchy.prototype.pushIndexNode = function (value) {
        this.indexNode.push(value);
    };
    Hierarchy.prototype.getIndexNodes = function () {
        return this.indexNode;
    };
    return Hierarchy;
}());

/**
 * Class to mark '小计' & '总计'
 */
var TotalClass = /** @class */ (function () {
    function TotalClass(params) {
        var label = params.label, isSubTotals = params.isSubTotals, isGrandTotals = params.isGrandTotals, isTotalRoot = params.isTotalRoot;
        this.label = label;
        this.isSubTotals = isSubTotals;
        this.isGrandTotals = isGrandTotals;
        this.isTotalRoot = isTotalRoot;
    }
    return TotalClass;
}());

var addTotals$1 = function (params) {
    var _a;
    var isFirstField = params.isFirstField, currentField = params.currentField, fieldValues = params.fieldValues, spreadsheet = params.spreadsheet, lastField = params.lastField;
    var totalsConfig = spreadsheet.getTotalsConfig(isFirstField ? currentField : lastField);
    var action;
    var totalValue;
    if (isFirstField) {
        // check to see if grand total is added
        if (totalsConfig === null || totalsConfig === void 0 ? void 0 : totalsConfig.showGrandTotals) {
            action = totalsConfig.reverseLayout ? 'unshift' : 'push';
            totalValue = new TotalClass({
                label: totalsConfig.label,
                isSubTotals: false,
                isGrandTotals: true,
                isTotalRoot: true,
            });
        }
    }
    else if (
    /**
     * 是否需要展示小计项
     * 1. showSubTotals 属性为真
     * 2. 子维度个数 > 1 或 showSubTotals.always 不为 false（undefined 认为是 true）
     */
    (totalsConfig === null || totalsConfig === void 0 ? void 0 : totalsConfig.showSubTotals) &&
        (lodash.size(fieldValues) > 1 ||
            lodash.get(totalsConfig, 'showSubTotals.always') !== false) &&
        currentField !== EXTRA_FIELD) {
        action = totalsConfig.reverseSubLayout ? 'unshift' : 'push';
        totalValue = new TotalClass({
            label: totalsConfig.subLabel,
            isSubTotals: true,
            isGrandTotals: false,
            isTotalRoot: true,
        });
    }
    (_a = fieldValues[action]) === null || _a === void 0 ? void 0 : _a.call(fieldValues, totalValue);
};

function getDimsCondition(parent, force) {
    var cond = {};
    var p = parent;
    while (p && p.key) {
        /**
         * 当为表格布局时，小计行的内容是“小计”不需要作为筛选条件
         * 当为树状布局时，force可以强行指定小计行，即父类目作为筛选条件
         */
        if ((!p.isTotalRoot || force) && p.value !== EMPTY_FIELD_VALUE) {
            cond[p.key] = p.value;
        }
        p = p.parent;
    }
    return cond;
}

/* eslint-disable no-console */
var DEBUG_TRANSFORM_DATA = 'Transform Data';
var DEBUG_HEADER_LAYOUT = 'Header Layout';
var DEBUG_VIEW_RENDER = 'Data Cell Render';
var DebuggerUtil = /** @class */ (function () {
    function DebuggerUtil() {
        var _this = this;
        this.debug = false;
        this.debugCallback = function (info, callback) {
            if (_this.debug) {
                var start = performance.now();
                callback();
                var end = performance.now();
                console.log(info, "".concat(end - start, " ms"));
            }
            else {
                callback();
            }
        };
        this.logger = function (info) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            if (_this.debug) {
                console.log.apply(console, __spreadArray$1([info], __read(params), false));
            }
        };
    }
    DebuggerUtil.getInstance = function () {
        if (!DebuggerUtil.instance) {
            DebuggerUtil.instance = new DebuggerUtil();
        }
        return DebuggerUtil.instance;
    };
    DebuggerUtil.prototype.setDebug = function (debug) {
        this.debug = debug;
    };
    return DebuggerUtil;
}());

// 不本地直接引用svg文件，避免下游无依赖
var ArrowDown = "\n<svg width=\"10px\" height=\"10px\" viewBox=\"0 0 10 10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"\u9875\u9762-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" font-family=\"Roboto, PingFangSC, BlinkMacSystemFont, Microsoft YaHei, Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">\n    <text id=\"\u2193\" fill=\"#29A294\">\n        <tspan x=\"-0.225097656\" y=\"8.5\">\u2193</tspan>\n    </text>\n</g>\n</svg>";
var ArrowUp = "<svg width=\"10px\" height=\"10px\" viewBox=\"0 0 10 10\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"\u9875\u9762-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" font-family=\"Roboto, PingFangSC, BlinkMacSystemFont, Microsoft YaHei, Arial, sans-serif\" font-size=\"12\" font-weight=\"bold\">\n    <text id=\"\u2191\" fill=\"#FF4D4F\">\n        <tspan x=\"-0.225097656\" y=\"8.5\">\u2191</tspan>\n    </text>\n</g>\n</svg>\n";
var CellDown = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"7px\" height=\"9px\" viewBox=\"0 0 7 9\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <!-- Generator: Sketch 58 (84663) - https://sketch.com -->\n    <title>down</title>\n    <desc>Created with Sketch.</desc>\n    <g id=\"\u4E00\u671F\u5F00\u53D1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <polygon id=\"down\" fill=\"#58AE57\" transform=\"translate(3.500000, 4.500000) scale(1, -1) translate(-3.500000, -4.500000) \" points=\"3.5 0 7 9 0 9\"></polygon>\n    </g>\n</svg>";
var CellUp = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"7px\" height=\"9px\" viewBox=\"0 0 7 9\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <!-- Generator: Sketch 58 (84663) - https://sketch.com -->\n    <title>up</title>\n    <desc>Created with Sketch.</desc>\n    <g id=\"\u4E00\u671F\u5F00\u53D1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <polygon id=\"up\" fill=\"#F46649\" points=\"3.5 0 7 9 0 9\"></polygon>\n    </g>\n</svg> ";
var GlobalAsc = "<svg t=\"1557124621626\" class=\"icon\" style=\"\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\nxmlns=\"http://www.w3.org/2000/svg\" p-id=\"17452\"\nxmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\">\n<defs>\n  <style type=\"text/css\"></style>\n</defs>\n<path d=\"M182.272 167.04a8 8 0 0 0-12.544 0L57.728 309.056A8 8 0 0 0 64 321.984h76.032v530.048c0 4.352 3.584 7.936 7.936 7.936h56.064a8 8 0 0 0 7.936-7.936V321.92H288a8 8 0 0 0 6.272-12.992l-112-141.888z m209.728 626.944h176c4.416 0 8 3.584 8 8v56a8 8 0 0 1-8 8h-176A8 8 0 0 1 384 857.984v-56c0-4.416 3.584-8 8-8z m0-424h368c4.416 0 8 3.648 8 8v56a8 8 0 0 1-8 8h-368A8 8 0 0 1 384 433.984v-56c0-4.352 3.584-8 8-8z m528-139.968h-528A8 8 0 0 1 384 222.016v-56c0-4.416 3.584-8 8-8h528c4.416 0 8 3.584 8 8v56a8 8 0 0 1-8 8z m-256 424h-272A8 8 0 0 1 384 646.016v-56c0-4.416 3.584-8 8-8h272c4.416 0 8 3.584 8 8v56a8 8 0 0 1-8 8z\" p-id=\"17453\"></path>\n</svg>";
var GlobalDesc = "<svg t=\"1557124685600\" class=\"icon\" style=\"\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17561\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\">\n  <defs>\n    <style type=\"text/css\"></style>\n  </defs>\n  <path d=\"M182.272 856.96a8 8 0 0 1-12.544 0l-112-141.952A8 8 0 0 1 64 702.08h76.032V172.032c0-4.416 3.584-8 7.936-8h56.064c4.352 0 7.936 3.584 7.936 8v529.984H288c6.72 0 10.496 7.808 6.272 12.992l-112 141.888z m209.728-626.944h176A8 8 0 0 0 576 222.016v-56a8 8 0 0 0-8-8h-176A8 8 0 0 0 384 166.016v56c0 4.416 3.584 8 8 8z m0 424h368a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8h-368A8 8 0 0 0 384 590.016v56c0 4.416 3.584 8 8 8z m528 139.968h-528a8 8 0 0 0-8 8v56c0 4.416 3.584 8 8 8h528a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8z m-256-424h-272A8 8 0 0 0 384 377.984v56c0 4.416 3.584 8 8 8h272a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8z\" p-id=\"17562\"></path>\n</svg>";
var GroupAsc = "<svg t=\"1557124695786\" class=\"icon\" style=\"\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17670\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\">\n  <defs>\n    <style type=\"text/css\"></style>\n  </defs>\n  <path d=\"M182.272 167.04a8 8 0 0 0-12.544 0L57.728 309.056A8 8 0 0 0 64 321.984h76.032v530.048c0 4.352 3.584 7.936 7.936 7.936h56.064a8 8 0 0 0 7.936-7.936V321.92H288a8 8 0 0 0 6.272-12.992l-112-141.888z m209.728 62.976h304A8 8 0 0 0 704 222.016v-56a8 8 0 0 0-8-8h-304A8 8 0 0 0 384 166.016v56c0 4.416 3.584 8 8 8z m0 424h304a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8h-304A8 8 0 0 0 384 590.016v56c0 4.416 3.584 8 8 8z m528 139.968h-528a8 8 0 0 0-8 8v56c0 4.416 3.584 8 8 8h528a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8z m0-424h-528A8 8 0 0 0 384 377.984v56c0 4.416 3.584 8 8 8h528a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8z\" p-id=\"17671\"></path>\n</svg>";
var GroupDesc = "<svg t=\"1557124710652\" class=\"icon\" style=\"\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17779\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\">\n  <defs>\n    <style type=\"text/css\"></style>\n  </defs>\n  <path d=\"M182.272 856.96a8 8 0 0 1-12.544 0l-112-141.952A8 8 0 0 1 64 702.08h76.032V172.032c0-4.416 3.584-8 7.936-8h56.064c4.352 0 7.936 3.584 7.936 8v529.984H288c6.72 0 10.496 7.808 6.272 12.992l-112 141.888z m209.728-626.944h304A8 8 0 0 0 704 222.016v-56a8 8 0 0 0-8-8h-304A8 8 0 0 0 384 166.016v56c0 4.416 3.584 8 8 8z m0 424h304a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8h-304A8 8 0 0 0 384 590.016v56c0 4.416 3.584 8 8 8z m528 139.968h-528a8 8 0 0 0-8 8v56c0 4.416 3.584 8 8 8h528a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8z m0-424h-528A8 8 0 0 0 384 377.984v56c0 4.416 3.584 8 8 8h528a8 8 0 0 0 8-8v-56a8 8 0 0 0-8-8z\" p-id=\"17780\"></path>\n</svg>";
var GroupNone = "<svg width=\"16px\" height=\"16px\" viewBox=\"0 0 16 16\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"\u8BBE\u8BA1\u8F93\u51FA\" stroke=\"none\" stroke-width=\"1\" fill-opacity=\"0.25\" fill-rule=\"evenodd\">\n    <g id=\"\u8BBE\u8BA1\u8F93\u51FA-\u79FB\u52A8\u7AEF\u6307\u6807\u8BE6\u60C5\u9875-\u9605\u8BFB\u7AEF\" transform=\"translate(-3275.000000, -724.000000)\" fill-rule=\"nonzero\">\n        <g id=\"\u7F16\u7EC4-39\" transform=\"translate(3064.500000, 667.000000)\">\n            <g id=\"\u7F16\u7EC4-36\" transform=\"translate(80.500000, 44.000000)\">\n                <g id=\"\u4E0D\u6392\u5E8F\" transform=\"translate(130.000000, 13.000000)\">\n                    <path d=\"M12.0009375,12.40625 C12.0696875,12.40625 12.1259375,12.4625 12.1259375,12.53125 L12.1259375,12.53125 L12.1259375,13.40625 C12.1259375,13.475 12.0696875,13.53125 12.0009375,13.53125 L12.0009375,13.53125 L6.25093747,13.53125 C6.18218747,13.53125 6.12593747,13.475 6.12593747,13.40625 L6.12593747,13.40625 L6.12593747,12.53125 C6.12593747,12.4625 6.18218747,12.40625 6.25093747,12.40625 L6.25093747,12.40625 Z M2.93949997,2.5801875 L2.97437497,2.6109375 L4.72437497,4.828125 C4.78062497,4.89776786 4.74503823,4.99725765 4.66779698,5.02426203 L4.62593747,5.03125 L3.438,5.03089062 L3.43843747,10.9691406 L4.62593747,10.9691406 C4.73062497,10.9691406 4.78999997,11.0910156 4.72437497,11.1722656 L2.97437497,13.3894531 C2.92437497,13.4535156 2.82749997,13.4535156 2.77749997,13.3894531 L1.02749997,11.1722656 C0.961874969,11.0894531 1.02124997,10.9691406 1.12593747,10.9691406 L2.31343747,10.9691406 L2.313,5.03089062 L1.12593747,5.03125 C1.03620533,5.03125 0.979764,4.94285714 1.00679571,4.8654519 L1.02749997,4.828125 L2.77749997,2.6109375 C2.81749997,2.5596875 2.88749997,2.5494375 2.93949997,2.5801875 Z M10.5009375,9.09375 C10.5696875,9.09375 10.6259375,9.15 10.6259375,9.21875 L10.6259375,9.21875 L10.6259375,10.09375 C10.6259375,10.1625 10.5696875,10.21875 10.5009375,10.21875 L10.5009375,10.21875 L6.25093747,10.21875 C6.18218747,10.21875 6.12593747,10.1625 6.12593747,10.09375 L6.12593747,10.09375 L6.12593747,9.21875 C6.12593747,9.15 6.18218747,9.09375 6.25093747,9.09375 L6.25093747,9.09375 Z M14.5009375,5.78125 C14.5696875,5.78125 14.6259375,5.8375 14.6259375,5.90625 L14.6259375,5.90625 L14.6259375,6.78125 C14.6259375,6.85 14.5696875,6.90625 14.5009375,6.90625 L14.5009375,6.90625 L6.25093747,6.90625 C6.18218747,6.90625 6.12593747,6.85 6.12593747,6.78125 L6.12593747,6.78125 L6.12593747,5.90625 C6.12593747,5.8375 6.18218747,5.78125 6.25093747,5.78125 L6.25093747,5.78125 Z M9.00093747,2.46875 C9.06968747,2.46875 9.12593747,2.525 9.12593747,2.59375 L9.12593747,2.59375 L9.12593747,3.46875 C9.12593747,3.5375 9.06968747,3.59375 9.00093747,3.59375 L9.00093747,3.59375 L6.25093747,3.59375 C6.18218747,3.59375 6.12593747,3.5375 6.12593747,3.46875 L6.12593747,3.46875 L6.12593747,2.59375 C6.12593747,2.525 6.18218747,2.46875 6.25093747,2.46875 L6.25093747,2.46875 Z\" id=\"\u5F62\u72B6\u7ED3\u5408\"></path>\n                </g>\n            </g>\n        </g>\n    </g>q\n</g>\n</svg>";
var InfoCircle = "<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg t=\"1590389330617\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"19656\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"><defs><style type=\"text/css\"></style></defs><path d=\"M512 64c-247.4 0-448 200.6-448 448s200.6 448 448 448 448-200.6 448-448-200.6-448-448-448z m0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" fill=\"\" p-id=\"19657\"></path><path d=\"M464 336c0 26.5 21.5 48 48 48s48-21.5 48-48-21.5-48-48-48-48 21.5-48 48zM536 448h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-272c0-4.4-3.6-8-8-8z\" fill=\"\" p-id=\"19658\"></path></svg>";
var ExpandColIcon = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"23px\" height=\"12px\" viewBox=\"0 0 23 12\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>\u7F16\u7EC4 8\u5907\u4EFD 3</title>\n    <g id=\"----\u9690\u85CF\u5217\u6807\u6CE8\uFF01\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"\u9690\u85CF\u5217\u6807\u6CE8\" transform=\"translate(-275.000000, -824.000000)\">\n            <rect fill=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"1333\" height=\"1167\"></rect>\n            <g id=\"\u7F16\u7EC4-8\u5907\u4EFD-3\" transform=\"translate(275.000000, 824.000000)\">\n                <rect id=\"\u77E9\u5F62\" stroke-opacity=\"0.25\" stroke=\"#000000\" fill=\"#F7F7F7\" x=\"0.5\" y=\"0.5\" width=\"11\" height=\"11\"></rect>\n                <rect id=\"\u77E9\u5F62\u5907\u4EFD-9\" stroke-opacity=\"0.25\" stroke=\"#000000\" fill=\"#F7F7F7\" x=\"11.5\" y=\"0.5\" width=\"11\" height=\"11\"></rect>\n                <g id=\"7.Icon/arrow/15.down/fill\" transform=\"translate(6.000000, 6.000000) rotate(90.000000) translate(-6.000000, -6.000000) \" fill=\"#000000\" fill-rule=\"nonzero\" opacity=\"0.65\">\n                    <path d=\"M7.25020811,6.37218077 L4.91348936,8.20968077 C4.82677061,8.27764952 4.69903624,8.21671202 4.69903624,8.10655577 L4.69903624,4.43272764 C4.69903624,4.32257139 4.82677061,4.26046202 4.91348936,4.32960264 L7.25020811,6.16593077 C7.31700499,6.21866514 7.31700499,6.31944639 7.25020811,6.37218077 Z\" id=\"fill\" transform=\"translate(5.999671, 6.269385) rotate(90.000000) translate(-5.999671, -6.269385) \"></path>\n                </g>\n                <g id=\"7.Icon/arrow/15.down/fill\" transform=\"translate(17.000000, 6.000000) rotate(270.000000) translate(-17.000000, -6.000000) translate(11.000000, 0.000000)\" fill=\"#000000\" fill-rule=\"nonzero\" opacity=\"0.65\">\n                    <path d=\"M7.25020811,6.37218077 L4.91348936,8.20968077 C4.82677061,8.27764952 4.69903624,8.21671202 4.69903624,8.10655577 L4.69903624,4.43272764 C4.69903624,4.32257139 4.82677061,4.26046202 4.91348936,4.32960264 L7.25020811,6.16593077 C7.31700499,6.21866514 7.31700499,6.31944639 7.25020811,6.37218077 Z\" id=\"fill\" transform=\"translate(5.999671, 6.269385) rotate(90.000000) translate(-5.999671, -6.269385) \"></path>\n                </g>\n            </g>\n            <line x1=\"286.5\" y1=\"813\" x2=\"286.5\" y2=\"864.5\" id=\"\u8DEF\u5F84-2\u5907\u4EFD-3\" stroke=\"#000000\" opacity=\"0.25\"></line>\n        </g>\n    </g>\n</svg>";
var Minus = "<svg t=\"1557140120188\" class=\"icon\" style=\"\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\nxmlns=\"http://www.w3.org/2000/svg\" p-id=\"16909\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\nwidth=\"200\" height=\"200\">\n\t<defs>\n\t\t<style type=\"text/css\">\n\t\t</style>\n\t</defs>\n\t<path d=\"M328 544h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z\"\n\tp-id=\"16910\">\n\t</path>\n\t<path d=\"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32z m-40 728H184V184h656v656z\"\n\tp-id=\"16911\">\n\t</path>\n</svg>";
var Plus = "<svg t=\"1557140186692\" class=\"icon\" style=\"\" viewBox=\"0 0 1024 1024\" version=\"1.1\"\nxmlns=\"http://www.w3.org/2000/svg\" p-id=\"17025\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\nwidth=\"200\" height=\"200\">\n\t<defs>\n\t\t<style type=\"text/css\">\n\t\t</style>\n\t</defs>\n\t<path d=\"M328 544h152v152c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V544h152c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8H544V328c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v152H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8z\"\n\tp-id=\"17026\">\n\t</path>\n\t<path d=\"M880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32z m-40 728H184V184h656v656z\"\n\tp-id=\"17027\">\n\t</path>\n</svg>";
var SortDownSelected = "<svg t=\"1565940955886\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n     p-id=\"17472\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\">\n  <defs>\n    <style type=\"text/css\"></style>\n  </defs>\n  <path\n    d=\"M948 392.992l-403.008 488.99200001Q532 896 512.992 896t-32-14.016L76 392.992q-18.016-20.992-7.008-46.016T108 321.98400001L916 321.98400001q28 0 39.008 24.99199999T948 392.992z\"\n    p-id=\"17473\" data-spm-anchor-id=\"a313x.7781069.0.i2\" class=\"selected\"></path>\n</svg>\n";
var SortDown = "<svg t=\"1565940955886\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n     p-id=\"17472\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\">\n  <defs>\n    <style type=\"text/css\"></style>\n  </defs>\n  <path\n    fill-opacity=\"0.45\"\n    d=\"M948 392.992l-403.008 488.99200001Q532 896 512.992 896t-32-14.016L76 392.992q-18.016-20.992-7.008-46.016T108 321.98400001L916 321.98400001q28 0 39.008 24.99199999T948 392.992z\"\n    p-id=\"17473\" data-spm-anchor-id=\"a313x.7781069.0.i2\" class=\"selected\"></path>\n</svg>\n";
var SortUpSelected = "<svg t=\"1565940979768\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\np-id=\"17620\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\">\n<defs>\n<style type=\"text/css\"></style>\n</defs>\n<path\nd=\"M76 631.008l403.008-488.99200001Q492 128 511.008 128t32 14.016L948 631.008q18.016 20.992 7.008 46.016T916 702.01599999L108 702.01599999q-28 0-39.008-24.99199999T76 631.008z\"\np-id=\"17621\"></path>\n</svg>\n";
var SortUp = "<svg t=\"1565940979768\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n     p-id=\"17620\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\">\n  <defs>\n    <style type=\"text/css\"></style>\n  </defs>\n  <path\n    fill-opacity=\"0.45\"\n    d=\"M76 631.008l403.008-488.99200001Q492 128 511.008 128t32 14.016L948 631.008q18.016 20.992 7.008 46.016T916 702.01599999L108 702.01599999q-28 0-39.008-24.99199999T76 631.008z\"\n    p-id=\"17621\"></path>\n</svg>\n";
var Trend = "<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg t=\"1596433821690\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"20229\" width=\"16\" height=\"16\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><style type=\"text/css\"></style></defs><path d=\"M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM305.8 637.7c3.1 3.1 8.1 3.1 11.3 0l138.3-137.6L583 628.5c3.1 3.1 8.2 3.1 11.3 0l275.4-275.3c3.1-3.1 3.1-8.2 0-11.3l-39.6-39.6c-3.1-3.1-8.2-3.1-11.3 0l-230 229.9L461.4 404c-3.1-3.1-8.2-3.1-11.3 0L266.3 586.7c-3.1 3.1-3.1 8.2 0 11.3l39.5 39.7z\" p-id=\"20230\"></path></svg>";
var DrillDownIcon = "<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg t=\"1608030723688\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"21482\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\"><defs><style type=\"text/css\"></style></defs><path d=\"M547.648 696a32 32 0 0 1 31.488 26.24l0.512 5.76v151.68l145.216-144.512a32 32 0 0 1 40.832-3.648l4.416 3.712a32 32 0 0 1 3.584 40.832l-3.712 4.48-203.072 202.24a32 32 0 0 1-40.768 3.648l-4.416-3.712-202.24-202.24a32 32 0 0 1 40.832-48.96l4.416 3.712 150.912 150.912v-158.144a32 32 0 0 1 32-32z m194.56-529.28l4.928 3.072 233.792 180.224a32 32 0 0 1 1.728 49.28l-4.864 3.52-409.792 245.568a32 32 0 0 1-27.328 2.624l-5.184-2.432-422.4-245.568a32 32 0 0 1-7.552-49.28l4.544-4.032 242.816-180.288a32 32 0 0 1 42.432 47.552l-4.288 3.84-203.84 151.296 364.16 211.648 353.28-211.712-196.608-151.552a32 32 0 0 1-8.896-40l3.136-4.864a32 32 0 0 1 40-8.96zM547.712 28.672a32 32 0 0 1 31.488 26.24l0.512 5.76v396.992a32 32 0 0 1-63.488 5.76l-0.512-5.76V60.736a32 32 0 0 1 32-32z\" p-id=\"21483\" fill=\"currentColor\"></path></svg>\n";
var EyeOutlined = "<svg viewBox=\"64 64 896 896\" focusable=\"false\" data-icon=\"eye\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\"></path></svg>";

// 不本地直接引用svg，避免下游无依赖

var InternalSvgIcons = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ArrowDown: ArrowDown,
  ArrowUp: ArrowUp,
  CellDown: CellDown,
  CellUp: CellUp,
  GlobalAsc: GlobalAsc,
  GlobalDesc: GlobalDesc,
  GroupAsc: GroupAsc,
  GroupDesc: GroupDesc,
  GroupNone: GroupNone,
  Minus: Minus,
  Plus: Plus,
  SortDown: SortDown,
  SortUp: SortUp,
  SortDownSelected: SortDownSelected,
  SortUpSelected: SortUpSelected,
  InfoCircle: InfoCircle,
  ExpandColIcon: ExpandColIcon,
  Trend: Trend,
  DrillDownIcon: DrillDownIcon,
  EyeOutlined: EyeOutlined
});

// 所有的 Icon 缓存
var SVGMap = {};
var registerIcon = function (name, svg) {
    SVGMap[lowerCase$1(name)] = svg;
};
var getIcon = function (name) {
    return SVGMap[lowerCase$1(name)];
};
// 缓存内置 Icon 信息
keys(InternalSvgIcons).forEach(function (name) {
    registerIcon(name, InternalSvgIcons[name]);
});

var STYLE_PLACEHOLDER = '<svg';
var SVG_CONTENT_TYPE = 'data:image/svg+xml';
// Image 缓存
var ImageCache = {};
/**
 * 使用 iconfont 上的 svg 来创建 Icon
 */
var GuiIcon = /** @class */ (function (_super) {
    __extends(GuiIcon, _super);
    function GuiIcon(cfg) {
        var _this = _super.call(this, cfg) || this;
        /**
         * 1. https://xxx.svg
         * 2. http://xxx.svg
         * 3. //xxx.svg
         */
        _this.isOnlineLink = function (src) {
            return /^(https?:)?(\/\/)/.test(src);
        };
        _this.render();
        return _this;
    }
    // 获取 Image 实例，使用缓存，以避免滚动时因重复的 new Image() 耗时导致的闪烁问题
    /* 异步获取 image 实例 */
    GuiIcon.prototype.getImage = function (name, cacheKey, fill) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var svg = getIcon(name);
            if (!svg) {
                return;
            }
            var img = new Image();
            img.onload = function () {
                ImageCache[cacheKey] = img;
                resolve(img);
            };
            img.onerror = reject;
            // 兼容三种情况
            // 1、base 64
            // 2、svg本地文件（兼容老方式，可以改颜色）
            // 3、线上支持的图片地址
            if (svg.includes(SVG_CONTENT_TYPE) || _this.isOnlineLink(svg)) {
                img.src = svg;
                // https://github.com/antvis/S2/issues/2513
                img.crossOrigin = 'anonymous';
            }
            else {
                // 传入 svg 字符串（支持颜色fill）
                if (fill) {
                    // 如果有fill，移除原来的 fill
                    // 这里有一个潜在的问题，不同的svg里面的schema不尽相同，导致这个正则考虑不全
                    // 1、fill='' 2、fill 3、fill-***(不需要处理)
                    // eslint-disable-next-line no-useless-escape
                    svg = svg.replace(/fill=[\'\"]#?\w+[\'\"]/g, ''); // 移除 fill="red|#fff"
                    svg = svg.replace(/fill>/g, '>'); // fill> 替换为 >
                }
                svg = svg.replace(STYLE_PLACEHOLDER, "".concat(STYLE_PLACEHOLDER, " fill=\"").concat(fill, "\""));
                // 兼容 Firefox: https://github.com/antvis/S2/issues/1571 https://stackoverflow.com/questions/30733607/svg-data-image-not-working-as-a-background-image-in-a-pseudo-element/30733736#30733736
                // https://www.chromestatus.com/features/5656049583390720
                img.src = "".concat(SVG_CONTENT_TYPE, ";utf-8,").concat(encodeURIComponent(svg));
            }
        });
    };
    GuiIcon.prototype.render = function () {
        var _a = this.cfg, name = _a.name, fill = _a.fill;
        var attrs = clone$1(this.cfg);
        var imageShapeAttrs = __assign(__assign({}, omit$1(attrs, 'fill')), { type: GuiIcon.type });
        var image = new ImageShape$1({
            attrs: imageShapeAttrs,
        });
        this.iconImageShape = image;
        this.setImageAttrs({ name: name, fill: fill });
    };
    GuiIcon.prototype.setImageAttrs = function (attrs) {
        var _this = this;
        var name = attrs.name, fill = attrs.fill;
        var image = this.iconImageShape;
        // 保证 name 和 fill 都有值
        name = name || image.attrs.name;
        fill = fill || image.attrs.fill;
        var cacheKey = "".concat(name, "-").concat(fill);
        var img = ImageCache[cacheKey];
        if (img) {
            // already in cache
            image.attr('img', img);
            this.addShape('image', image);
        }
        else {
            this.getImage(name, cacheKey, fill)
                .then(function (value) {
                var _a, _b, _c;
                // 异步加载完成后，当前 Cell 可能已经销毁了
                var canvas = (_c = (_b = (_a = _this.getParent()) === null || _a === void 0 ? void 0 : _a.getMeta) === null || _b === void 0 ? void 0 : _b.call(_a).spreadsheet) === null || _c === void 0 ? void 0 : _c.container;
                // G 底层 refreshElements 默认是个数组, 销毁时获取不到, 没有兜底 https://github.com/antvis/S2/issues/2435
                if (_this.destroyed || (canvas && !canvas.get('refreshElements'))) {
                    DebuggerUtil.getInstance().logger("GuiIcon ".concat(name, " destroyed."));
                    return;
                }
                image.attr('img', value);
                _this.addShape('image', image);
            })
                .catch(function (event) {
                // 如果是 TypeError, 则是 G 底层渲染有问题, 其他场景才报加载异常的错误
                if (event instanceof TypeError) {
                    // eslint-disable-next-line no-console
                    console.warn("GuiIcon ".concat(name, " destroyed:"), event);
                    return;
                }
                // eslint-disable-next-line no-console
                console.error("GuiIcon ".concat(name, " load failed:"), event);
            });
        }
    };
    GuiIcon.type = '__GUI_ICON__';
    return GuiIcon;
}(Group));

var CellBorderPosition;
(function (CellBorderPosition) {
    CellBorderPosition["TOP"] = "TOP";
    CellBorderPosition["BOTTOM"] = "BOTTOM";
    CellBorderPosition["LEFT"] = "LEFT";
    CellBorderPosition["RIGHT"] = "RIGHT";
})(CellBorderPosition || (CellBorderPosition = {}));
var Aggregation;
(function (Aggregation) {
    Aggregation["SUM"] = "SUM";
    Aggregation["MIN"] = "MIN";
    Aggregation["MAX"] = "MAX";
    Aggregation["AVG"] = "AVG";
})(Aggregation || (Aggregation = {}));

// 角头 node 类型
var CornerNodeType;
(function (CornerNodeType) {
    CornerNodeType["Row"] = "row";
    CornerNodeType["Col"] = "col";
    CornerNodeType["Series"] = "series";
})(CornerNodeType || (CornerNodeType = {}));

/**
 * Store something in {@link SpreadSheet} temporary along with it's lifecycle
 * All the keys need be declare in {@see StoreKey} first
 */
var Store = /** @class */ (function () {
    function Store() {
        this.store = new Map();
    }
    Store.prototype.set = function (key, value) {
        return this.store.set(key, value);
    };
    Store.prototype.get = function (key, defaultValue) {
        var _a;
        var value = this.store.get(key);
        return (_a = value) !== null && _a !== void 0 ? _a : defaultValue;
    };
    Store.prototype.clear = function () {
        this.store.clear();
    };
    Store.prototype.size = function () {
        return this.store.size;
    };
    return Store;
}());

var whetherLeafByLevel = function (params) {
    var _a, _b;
    var facetCfg = params.facetCfg, level = params.level, fields = params.fields;
    var colCfg = facetCfg.colCfg, spreadsheet = facetCfg.spreadsheet, dataSet = facetCfg.dataSet;
    var moreThanOneValue = dataSet.moreThanOneValue();
    var isValueInCols = (_b = (_a = spreadsheet.dataCfg.fields) === null || _a === void 0 ? void 0 : _a.valueInCols) !== null && _b !== void 0 ? _b : true;
    var isHideMeasure = (colCfg === null || colCfg === void 0 ? void 0 : colCfg.hideMeasureColumn) &&
        isValueInCols &&
        !moreThanOneValue &&
        includes(fields, EXTRA_FIELD);
    var extraSize = isHideMeasure ? 2 : 1;
    return level === fields.length - extraSize;
};

/**
 * re-arrange field values by custom arrange hooks
 * @param fieldValues
 * @param facetCfg
 * @param parent
 * @param field
 */
var layoutArrange = function (fieldValues, facetCfg, parent, field) {
    if (facetCfg.layoutArrange) {
        return facetCfg.layoutArrange(facetCfg.spreadsheet, parent, field, fieldValues);
    }
    return fieldValues;
};
/**
 * Push node directly or custom push according to Hierarchy Hooks
 * @param facetCfg
 * @param parentNode
 * @param currentNode
 * @param hierarchy
 */
var layoutHierarchy = function (facetCfg, parentNode, currentNode, hierarchy) {
    var _a, _b;
    var hiddenColumnNode = (_b = (_a = facetCfg.spreadsheet) === null || _a === void 0 ? void 0 : _a.facet) === null || _b === void 0 ? void 0 : _b.getHiddenColumnsInfo(currentNode);
    if (hiddenColumnNode &&
        // fix: Only hiding the column headers is supported to prevent the row subtotals from being hidden when the IDs of the row totals and column totals are the same.
        facetCfg.columns.find(function (field) { return field === currentNode.field; })) {
        return false;
    }
    var expandCurrentNode = true;
    var addNode = function (node, insetIndex, hierarchyIndex) {
        if (insetIndex === void 0) { insetIndex = -1; }
        if (hierarchyIndex === void 0) { hierarchyIndex = -1; }
        if (insetIndex === -1) {
            // add in parent
            parentNode.children.push(node);
            hierarchy.pushNode(node);
        }
        else {
            parentNode.children.splice(insetIndex, 0, node);
            hierarchy.pushNode(node, hierarchyIndex);
        }
    };
    if (facetCfg.layoutHierarchy) {
        var facetLayoutHierarchy = facetCfg.layoutHierarchy(facetCfg.spreadsheet, currentNode);
        if (facetLayoutHierarchy) {
            var deleteNode = !isBoolean(facetLayoutHierarchy === null || facetLayoutHierarchy === void 0 ? void 0 : facetLayoutHierarchy.delete)
                ? false
                : facetLayoutHierarchy === null || facetLayoutHierarchy === void 0 ? void 0 : facetLayoutHierarchy.delete;
            expandCurrentNode = !deleteNode;
            var pushNodes = facetLayoutHierarchy.push, unshiftNodes = facetLayoutHierarchy.unshift;
            var currentIndex = parentNode.children.length;
            var hierarchyIndex = hierarchy.getNodes().length;
            if (!isEmpty(unshiftNodes)) {
                forEach(unshiftNodes, function (node) {
                    addNode(node);
                });
                currentIndex = parentNode.children.length;
                hierarchyIndex = hierarchy.getNodes().length;
            }
            if (!isEmpty(pushNodes)) {
                forEach(pushNodes, function (node) {
                    addNode(node);
                });
            }
            if (!deleteNode) {
                addNode(currentNode, currentIndex, hierarchyIndex);
            }
        }
        else {
            addNode(currentNode);
        }
    }
    else {
        addNode(currentNode);
    }
    return expandCurrentNode;
};
/**
 * custom control every header node's coordinates
 * @param facetCfg
 * @param rowNode
 * @param colNode
 */
var layoutCoordinate = function (facetCfg, rowNode, colNode) {
    if (facetCfg === null || facetCfg === void 0 ? void 0 : facetCfg.layoutCoordinate) {
        // only leaf node's coordinates can be modified
        if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.isLeaf) || (colNode === null || colNode === void 0 ? void 0 : colNode.isLeaf)) {
            facetCfg === null || facetCfg === void 0 ? void 0 : facetCfg.layoutCoordinate(facetCfg.spreadsheet, rowNode, colNode);
        }
    }
};
/**
 * Custom position cell's data
 * @param facetCfg
 * @param layoutResult
 */
var layoutDataPosition = function (facetCfg, layoutResult) {
    var dataPosition = facetCfg === null || facetCfg === void 0 ? void 0 : facetCfg.layoutDataPosition;
    if (dataPosition) {
        var getCellMeta = layoutResult.getCellMeta;
        var handledGetCellMeta = dataPosition(facetCfg.spreadsheet, getCellMeta);
        return __assign(__assign({}, layoutResult), { getCellMeta: handledGetCellMeta });
    }
    return layoutResult;
};

var TotalMeasure = /** @class */ (function () {
    function TotalMeasure(label) {
        this.label = label;
    }
    return TotalMeasure;
}());

var buildTotalGridHierarchy = function (params) {
    var addTotalMeasureInTotal = params.addTotalMeasureInTotal, parentNode = params.parentNode, currentField = params.currentField, fields = params.fields, facetCfg = params.facetCfg, hierarchy = params.hierarchy;
    var index = fields.indexOf(currentField);
    var dataSet = facetCfg.dataSet, values = facetCfg.values, spreadsheet = facetCfg.spreadsheet;
    var fieldValues = [];
    var query = {};
    var totalsConfig = spreadsheet.getTotalsConfig(currentField);
    var dimensionGroup = parentNode.isGrandTotals
        ? totalsConfig.totalsGroupDimensions
        : totalsConfig.subTotalsGroupDimensions;
    if (dimensionGroup === null || dimensionGroup === void 0 ? void 0 : dimensionGroup.includes(currentField)) {
        query = getDimsCondition(parentNode);
        var dimValues = dataSet.getDimensionValues(currentField, query);
        fieldValues.push.apply(fieldValues, __spreadArray$1([], __read((dimValues || []).map(function (value) {
            return new TotalClass({
                label: value,
                isSubTotals: parentNode.isSubTotals,
                isGrandTotals: parentNode.isGrandTotals,
                isTotalRoot: false,
            });
        })), false));
        if (isEmpty(fieldValues) && currentField) {
            fieldValues.push(EMPTY_FIELD_VALUE);
        }
    }
    else if (addTotalMeasureInTotal && currentField === EXTRA_FIELD) {
        // add total measures
        query = getDimsCondition(parentNode);
        fieldValues.push.apply(fieldValues, __spreadArray$1([], __read(values.map(function (v) { return new TotalMeasure(v); })), false));
    }
    else if (whetherLeafByLevel({ facetCfg: facetCfg, level: index, fields: fields })) {
        // 如果最后一级没有分组维度，则将上一个结点设为叶子节点
        parentNode.isLeaf = true;
        hierarchy.pushIndexNode(parentNode);
        parentNode.rowIndex = hierarchy.getIndexNodes().length - 1;
        return;
    }
    else {
        // 如果是空维度，则跳转到下一级 level
        buildTotalGridHierarchy(__assign(__assign({}, params), { currentField: fields[index + 1] }));
        return;
    }
    var displayFieldValues = fieldValues.filter(function (value) { return !isUndefined(value); });
    generateHeaderNodes(__assign(__assign({}, params), { fieldValues: displayFieldValues, level: index, parentNode: parentNode, query: query }));
};
var buildNormalGridHierarchy = function (params) {
    var _a;
    var parentNode = params.parentNode, currentField = params.currentField, fields = params.fields, facetCfg = params.facetCfg;
    var index = fields.indexOf(currentField);
    var dataSet = facetCfg.dataSet, spreadsheet = facetCfg.spreadsheet;
    var fieldValues = [];
    var query = {};
    // field(dimension)'s all values
    query = getDimsCondition(parentNode, true);
    var dimValues = dataSet.getDimensionValues(currentField, query);
    var arrangedValues = layoutArrange(dimValues, facetCfg, parentNode, currentField);
    fieldValues.push.apply(fieldValues, __spreadArray$1([], __read((arrangedValues || [])), false));
    // add skeleton for empty data
    if (isEmpty(fieldValues) && currentField) {
        if (currentField === EXTRA_FIELD) {
            fieldValues.push.apply(fieldValues, __spreadArray$1([], __read((_a = dataSet.fields) === null || _a === void 0 ? void 0 : _a.values), false));
        }
        else {
            fieldValues.push(EMPTY_FIELD_VALUE);
        }
    }
    // add totals if needed
    addTotals$1({
        currentField: currentField,
        lastField: fields[index - 1],
        isFirstField: index === 0,
        fieldValues: fieldValues,
        spreadsheet: spreadsheet,
    });
    var displayFieldValues = fieldValues.filter(function (value) { return !isUndefined(value); });
    generateHeaderNodes(__assign(__assign({}, params), { fieldValues: displayFieldValues, level: index, parentNode: parentNode, query: query }));
};
/**
 * Build grid hierarchy in rows or columns
 *
 * @param params
 */
var buildGridHierarchy = function (params) {
    if (params.parentNode.isTotals) {
        buildTotalGridHierarchy(params);
    }
    else {
        buildNormalGridHierarchy(params);
    }
};

/**
 * Row and column header node id generator.
 * @param parentId
 * @param value
 */
var generateId = function (parentId, value) {
    return "".concat(parentId).concat(ID_SEPARATOR).concat(value);
};

var generateHeaderNodes = function (params) {
    var e_1, _a, _b, _c, _d, _e;
    var _f, _g, _h, _j;
    var currentField = params.currentField, fields = params.fields, fieldValues = params.fieldValues, facetCfg = params.facetCfg, hierarchy = params.hierarchy, parentNode = params.parentNode, level = params.level, query = params.query, addMeasureInTotalQuery = params.addMeasureInTotalQuery, addTotalMeasureInTotal = params.addTotalMeasureInTotal;
    var spreadsheet = facetCfg.spreadsheet, collapsedCols = facetCfg.collapsedCols;
    try {
        for (var _k = __values(fieldValues.entries()), _l = _k.next(); !_l.done; _l = _k.next()) {
            var _m = __read(_l.value, 2), index = _m[0], fieldValue = _m[1];
            var isTotals = fieldValue instanceof TotalClass;
            var isTotalMeasure = fieldValue instanceof TotalMeasure;
            var value = void 0;
            var nodeQuery = void 0;
            var isLeaf = false;
            var isGrandTotals = false;
            var isSubTotals = false;
            var isTotalRoot = false;
            var adjustedField = currentField;
            if (isTotals) {
                var totalClass = fieldValue;
                isGrandTotals = totalClass.isGrandTotals;
                isSubTotals = totalClass.isSubTotals;
                isTotalRoot = totalClass.isTotalRoot;
                value = i18n(fieldValue.label);
                if (isTotalRoot) {
                    nodeQuery = query;
                }
                else {
                    // root[&]四川[&]总计 => {province: '四川'}
                    nodeQuery = __assign(__assign({}, query), (_b = {}, _b[currentField] = value, _b));
                }
                if (addMeasureInTotalQuery) {
                    // root[&]四川[&]总计 => {province: '四川', EXTRA_FIELD: 'price'}
                    nodeQuery[EXTRA_FIELD] = (_f = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _f === void 0 ? void 0 : _f.fields.values[0];
                }
                isLeaf = whetherLeafByLevel({ facetCfg: facetCfg, level: level, fields: fields });
            }
            else if (isTotalMeasure) {
                value = i18n(fieldValue.label);
                // root[&]四川[&]总计[&]price => {province: '四川',EXTRA_FIELD: 'price' }
                nodeQuery = __assign(__assign({}, query), (_c = {}, _c[EXTRA_FIELD] = value, _c));
                adjustedField = EXTRA_FIELD;
                isGrandTotals = parentNode.isGrandTotals;
                isSubTotals = parentNode.isSubTotals;
                isLeaf = whetherLeafByLevel({ facetCfg: facetCfg, level: level, fields: fields });
            }
            else if (spreadsheet.isTableMode()) {
                value = fieldValue;
                adjustedField = fields[index];
                nodeQuery = __assign(__assign({}, query), (_d = {}, _d[adjustedField] = value, _d));
                isLeaf = true;
            }
            else {
                value = fieldValue;
                // root[&]四川[&]成都 => {province: '四川', city: '成都' }
                // 子维度的维值为空时, 使用父级节点的 query, 避免查询不到数据
                nodeQuery =
                    value === EMPTY_FIELD_VALUE
                        ? __assign({}, query) : __assign(__assign({}, query), (_e = {}, _e[currentField] = value, _e));
                isLeaf = whetherLeafByLevel({ facetCfg: facetCfg, level: level, fields: fields });
            }
            var uniqueId = generateId(parentNode.id, value);
            if (!uniqueId) {
                return;
            }
            // TODO need merge with collapsedRows
            var isCollapsed = isBoolean(collapsedCols === null || collapsedCols === void 0 ? void 0 : collapsedCols[uniqueId])
                ? collapsedCols === null || collapsedCols === void 0 ? void 0 : collapsedCols[uniqueId]
                : false;
            // create new header nodes
            var node = new Node$1({
                id: uniqueId,
                key: adjustedField,
                value: value,
                level: level,
                field: adjustedField,
                parent: parentNode,
                isTotals: isTotals || isTotalMeasure,
                isGrandTotals: isGrandTotals,
                isSubTotals: isSubTotals,
                isTotalMeasure: isTotalMeasure,
                isCollapsed: isCollapsed,
                isTotalRoot: isTotalRoot,
                hierarchy: hierarchy,
                query: nodeQuery,
                spreadsheet: spreadsheet,
                isLeaf: isLeaf || isCollapsed,
            });
            var expandCurrentNode = layoutHierarchy(facetCfg, parentNode, node, hierarchy);
            // 如果当前是隐藏节点, 给其父节点挂载相应信息 (兄弟节点, 当前哪个子节点隐藏了), 这样在 facet 层可以直接使用, 不用每次都去遍历
            var hiddenColumnsInfo = (_g = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _g === void 0 ? void 0 : _g.getHiddenColumnsInfo(node);
            if (hiddenColumnsInfo && parentNode) {
                // hiddenChildNodeInfo 属性在 S2 中没有用到，但是没删怕外部有使用，已标记为废弃
                parentNode.hiddenChildNodeInfo = hiddenColumnsInfo;
            }
            // omit the the whole column or row of the grandTotal or subTotals
            if (level > hierarchy.maxLevel &&
                !isGrandTotals &&
                !parentNode.isGrandTotals &&
                !parentNode.isSubTotals &&
                !node.isSubTotals) {
                hierarchy.sampleNodesForAllLevels.push(node);
                hierarchy.maxLevel = level;
                // 如果当前是隐藏节点, 则采样其兄弟节点
                hierarchy.sampleNodeForLastLevel = hiddenColumnsInfo
                    ? ((_h = hiddenColumnsInfo === null || hiddenColumnsInfo === void 0 ? void 0 : hiddenColumnsInfo.displaySiblingNode) === null || _h === void 0 ? void 0 : _h.next) ||
                        ((_j = hiddenColumnsInfo === null || hiddenColumnsInfo === void 0 ? void 0 : hiddenColumnsInfo.displaySiblingNode) === null || _j === void 0 ? void 0 : _j.prev)
                    : node;
            }
            var isLeafNode = isLeaf || isCollapsed || !expandCurrentNode;
            if (isLeafNode) {
                node.isLeaf = true;
                hierarchy.pushIndexNode(node);
                node.rowIndex = hierarchy.getIndexNodes().length - 1;
            }
            else {
                buildGridHierarchy({
                    addTotalMeasureInTotal: addTotalMeasureInTotal,
                    addMeasureInTotalQuery: addMeasureInTotalQuery,
                    parentNode: node,
                    currentField: fields[level + 1],
                    fields: fields,
                    facetCfg: facetCfg,
                    hierarchy: hierarchy,
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_a = _k.return)) _a.call(_k);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
/**
 * 给定一个树形结构的表头，深度优先创建表头的 node
 * @param columns
 * @param params
 * @param pNode
 * @param level
 */
var DFSGenerateHeaderNodes = function (columns, params, level, pNode) {
    var facetCfg = params.facetCfg, hierarchy = params.hierarchy, parentNode = params.parentNode;
    var dataSet = facetCfg.dataSet;
    columns.forEach(function (column, i) {
        if (typeof column === 'string') {
            column = { key: column };
        }
        var key = column.key;
        var value = key === SERIES_NUMBER_FIELD ? i18n('序号') : dataSet.getFieldName(key);
        var currentParent = pNode || parentNode;
        generateHeaderNodes({
            currentField: key,
            fields: [key],
            fieldValues: [value],
            facetCfg: facetCfg,
            hierarchy: hierarchy,
            parentNode: currentParent,
            level: level,
            query: {},
            addMeasureInTotalQuery: false,
            addTotalMeasureInTotal: false,
        });
        if (column.children && column.children.length) {
            var generateNode = currentParent.children[i];
            generateNode.isLeaf = false;
            DFSGenerateHeaderNodes(column.children, params, level + 1, generateNode);
        }
    });
};

var isFrozenCol = function (colIndex, frozenCount) {
    return frozenCount > 0 && colIndex < frozenCount;
};
var isFrozenTrailingCol = function (colIndex, frozenCount, colLength) {
    return frozenCount > 0 && colIndex >= colLength - frozenCount;
};
var isFrozenRow = function (rowIndex, minRowIndex, frozenCount) {
    return frozenCount > 0 && rowIndex < minRowIndex + frozenCount;
};
var isFrozenTrailingRow = function (rowIndex, maxRowIndex, frozenCount) {
    return frozenCount > 0 && rowIndex >= maxRowIndex + 1 - frozenCount;
};
/**
 * 计算偏移 scrollX、scrollY 的时候，在视窗中的节点索引
 * @param scrollX
 * @param scrollY
 * @param widths
 * @param heights
 * @param viewport
 * @param rowRemainWidth
 */
var calculateInViewIndexes = function (scrollX, scrollY, widths, heights, viewport, rowRemainWidth) {
    // 1. 计算 x min、max
    var xMin = findIndex(widths, function (width, idx) {
        var x = scrollX - (isNil(rowRemainWidth) ? 0 : rowRemainWidth) + viewport.x;
        return x >= width && x < widths[idx + 1];
    }, 0);
    xMin = Math.max(xMin, 0);
    var xMax = findIndex(widths, function (width, idx) {
        var x = viewport.width + scrollX + viewport.x;
        return x >= width && x < widths[idx + 1];
    }, xMin);
    xMax = Math.min(xMax === -1 ? Infinity : xMax, widths.length - 2);
    var _a = heights.getIndexRange(scrollY + viewport.y, viewport.height + scrollY + viewport.y), yMin = _a.start, yMax = _a.end;
    // use direction
    // const halfWidthSize = Math.ceil(xMax - xMin / 4);
    // const halfHeightSize = Math.ceil(yMax - yMin / 4);
    // xMin = Math.max(0, xMin - halfWidthSize)
    // xMax = xMax + halfWidthSize;
    // yMin = Math.max(0, yMin - halfHeightSize);
    // yMax = yMax + halfHeightSize;
    return [xMin, xMax, yMin, yMax];
};
/**
 * 优化滚动方向，对于小角度的滚动，固定为一个方向
 * @param x
 * @param y
 * @param ratio
 */
var optimizeScrollXY = function (x, y, ratio) {
    var ANGLE = 2; // 调参工程师
    var angle = Math.abs(x / y);
    // 经过滚动优化之后的 x, y
    var deltaX = angle <= 1 / ANGLE ? 0 : x;
    var deltaY = angle > ANGLE ? 0 : y;
    return [deltaX * ratio.horizontal, deltaY * ratio.vertical];
};
var translateGroup = function (group, scrollX, scrollY) {
    var _a, _b;
    var matrix = group === null || group === void 0 ? void 0 : group.getMatrix();
    var preX = (_a = matrix === null || matrix === void 0 ? void 0 : matrix[6]) !== null && _a !== void 0 ? _a : 0;
    var preY = (_b = matrix === null || matrix === void 0 ? void 0 : matrix[7]) !== null && _b !== void 0 ? _b : 0;
    group === null || group === void 0 ? void 0 : group.translate(scrollX - preX, scrollY - preY);
};
var translateGroupX = function (group, scrollX) {
    var _a;
    var matrix = group === null || group === void 0 ? void 0 : group.getMatrix();
    var preX = (_a = matrix === null || matrix === void 0 ? void 0 : matrix[6]) !== null && _a !== void 0 ? _a : 0;
    group === null || group === void 0 ? void 0 : group.translate(scrollX - preX, 0);
};
var translateGroupY = function (group, scrollY) {
    var _a;
    var matrix = group === null || group === void 0 ? void 0 : group.getMatrix();
    var preY = (_a = matrix === null || matrix === void 0 ? void 0 : matrix[7]) !== null && _a !== void 0 ? _a : 0;
    group === null || group === void 0 ? void 0 : group.translate(0, scrollY - preY);
};
/**
 * frozen                     frozenTrailing
 * ColCount                   ColCount
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * |     |     frozenRow     |          |  frozenRowCount
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * | fro |                   | fro      |
 * | zen |      panel        | zen      |
 * | col |      scroll       | trailing |
 * |     |                   | col      |
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * |     | frozenTrailingRow |          |  frozenTrailingRowCount
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * @description returns which group data cell belongs in frozen mode
 */
var getFrozenDataCellType = function (meta, frozenOpts, colLength, cellRange) {
    var frozenColCount = frozenOpts.frozenColCount, frozenRowCount = frozenOpts.frozenRowCount, frozenTrailingColCount = frozenOpts.frozenTrailingColCount, frozenTrailingRowCount = frozenOpts.frozenTrailingRowCount;
    var colIndex = meta.colIndex, rowIndex = meta.rowIndex;
    if (isFrozenRow(rowIndex, cellRange.start, frozenRowCount)) {
        return FrozenCellType.ROW;
    }
    if (isFrozenTrailingRow(rowIndex, cellRange.end, frozenTrailingRowCount)) {
        return FrozenCellType.TRAILING_ROW;
    }
    if (isFrozenCol(colIndex, frozenColCount)) {
        return FrozenCellType.COL;
    }
    if (isFrozenTrailingCol(colIndex, frozenTrailingColCount, colLength)) {
        return FrozenCellType.TRAILING_COL;
    }
    return FrozenCellType.SCROLL;
};
/**
 * @description calculate all cells in frozen group's intersection region
 */
var calculateFrozenCornerCells = function (opts, colLength, cellRange) {
    var _a;
    var frozenColCount = opts.frozenColCount, frozenRowCount = opts.frozenRowCount, frozenTrailingColCount = opts.frozenTrailingColCount, frozenTrailingRowCount = opts.frozenTrailingRowCount;
    var result = (_a = {},
        _a[FrozenCellType.TOP] = [],
        _a[FrozenCellType.BOTTOM] = [],
        _a);
    // frozenColGroup with frozenRowGroup or frozenTrailingRowGroup. Top left and bottom left corner.
    for (var i = 0; i < frozenColCount; i++) {
        for (var j = cellRange.start; j < cellRange.start + frozenRowCount; j++) {
            result[FrozenCellType.TOP].push({
                x: i,
                y: j,
            });
        }
        if (frozenTrailingRowCount > 0) {
            for (var j = 0; j < frozenTrailingRowCount; j++) {
                var index = cellRange.end - j;
                result[FrozenCellType.BOTTOM].push({
                    x: i,
                    y: index,
                });
            }
        }
    }
    // frozenTrailingColGroup with frozenRowGroup or frozenTrailingRowGroup. Top right and bottom right corner.
    for (var i = 0; i < frozenTrailingColCount; i++) {
        var colIndex = colLength - 1 - i;
        for (var j = cellRange.start; j < cellRange.start + frozenRowCount; j++) {
            result[FrozenCellType.TOP].push({
                x: colIndex,
                y: j,
            });
        }
        if (frozenTrailingRowCount > 0) {
            for (var j = 0; j < frozenTrailingRowCount; j++) {
                var index = cellRange.end - j;
                result[FrozenCellType.BOTTOM].push({
                    x: colIndex,
                    y: index,
                });
            }
        }
    }
    return result;
};
/**
 * @description split all cells in current panel with five child group
 */
var splitInViewIndexesWithFrozen = function (indexes, frozenOpts, colLength, cellRange) {
    var frozenColCount = frozenOpts.frozenColCount, frozenRowCount = frozenOpts.frozenRowCount, frozenTrailingColCount = frozenOpts.frozenTrailingColCount, frozenTrailingRowCount = frozenOpts.frozenTrailingRowCount;
    var centerIndexes = __spreadArray$1([], __read(indexes), false);
    // Cut off frozen cells from centerIndexes
    if (isFrozenCol(centerIndexes[0], frozenColCount)) {
        centerIndexes[0] = frozenColCount;
    }
    if (isFrozenTrailingCol(centerIndexes[1], frozenTrailingColCount, colLength)) {
        centerIndexes[1] = colLength - frozenTrailingColCount - 1;
    }
    if (isFrozenRow(centerIndexes[2], cellRange.start, frozenRowCount)) {
        centerIndexes[2] = cellRange.start + frozenRowCount;
    }
    if (isFrozenTrailingRow(centerIndexes[3], cellRange.end, frozenTrailingRowCount)) {
        centerIndexes[3] = cellRange.end - frozenTrailingRowCount;
    }
    // Calculate indexes for four frozen groups
    var frozenRowIndexes = __spreadArray$1([], __read(centerIndexes), false);
    frozenRowIndexes[2] = cellRange.start;
    frozenRowIndexes[3] = cellRange.start + frozenRowCount - 1;
    var frozenColIndexes = __spreadArray$1([], __read(centerIndexes), false);
    frozenColIndexes[0] = 0;
    frozenColIndexes[1] = frozenColCount - 1;
    var frozenTrailingRowIndexes = __spreadArray$1([], __read(centerIndexes), false);
    frozenTrailingRowIndexes[2] = cellRange.end + 1 - frozenTrailingRowCount;
    frozenTrailingRowIndexes[3] = cellRange.end;
    var frozenTrailingColIndexes = __spreadArray$1([], __read(centerIndexes), false);
    frozenTrailingColIndexes[0] = colLength - frozenTrailingColCount;
    frozenTrailingColIndexes[1] = colLength - 1;
    return {
        center: centerIndexes,
        frozenRow: frozenRowIndexes,
        frozenCol: frozenColIndexes,
        frozenTrailingCol: frozenTrailingColIndexes,
        frozenTrailingRow: frozenTrailingRowIndexes,
    };
};
var getCellRange = function (viewCellHeights, pagination) {
    var heights = viewCellHeights;
    var start = 0;
    var end = heights.getTotalLength() - 1;
    if (pagination) {
        var _a = pagination.current, current = _a === void 0 ? DEFAULT_PAGE_INDEX : _a, pageSize = pagination.pageSize;
        start = Math.max((current - 1) * pageSize, 0);
        end = Math.min(current * pageSize - 1, heights.getTotalLength() - 1);
    }
    return {
        start: start,
        end: end,
    };
};
/**
 * 给定一个一层的 node 数组以及左右固定列的数量，计算出实际固定列（叶子节点）的数量
 * @param nodes
 * @param frozenColCount
 * @param frozenTrailingColCount
 * @returns {colCount, trailingColCount}
 */
var getFrozenLeafNodesCount = function (nodes, frozenColCount, frozenTrailingColCount) {
    var colCount = frozenColCount;
    var trailingColCount = frozenTrailingColCount;
    var getLeafNodesCount = function (node) {
        if (node.isLeaf) {
            return 1;
        }
        if (node.children) {
            return node.children.reduce(function (pCount, item) {
                pCount += getLeafNodesCount(item);
                return pCount;
            }, 0);
        }
        return 0;
    };
    if (frozenColCount) {
        colCount = nodes.slice(0, frozenColCount).reduce(function (count, node) {
            count += getLeafNodesCount(node);
            return count;
        }, 0);
    }
    if (frozenTrailingColCount) {
        trailingColCount = nodes
            .slice(nodes.length - frozenTrailingColCount)
            .reduce(function (count, node) {
            count += getLeafNodesCount(node);
            return count;
        }, 0);
    }
    return { colCount: colCount, trailingColCount: trailingColCount };
};
/**
 * 根据列配置树和已显示的字段，返回深拷贝过的过滤掉隐藏列的配置结构
 * @param columnsTree
 * @param fieldsMap
 * @returns {ColumnNode} 配置结构
 */
var getDisplayedColumnsTree = function (columnsTree, fieldsMap) {
    return columnsTree.reduce(function (tree, column) {
        if (typeof column === 'string') {
            column = { key: column };
        }
        var copyColumn = __assign({}, column);
        // 分支节点显示
        if (copyColumn.children) {
            copyColumn.children = getDisplayedColumnsTree(copyColumn.children, fieldsMap);
            tree.push(copyColumn);
            return tree;
        }
        // 非分支节点判断是否显示
        if (fieldsMap[copyColumn.key]) {
            tree.push(copyColumn);
        }
        return tree;
    }, []);
};
/**
 * 明细表多级表头判断一个 node 是不是顶层节点
 * @param node
 * @returns {boolean}
 */
var isTopLevelNode = function (node) {
    return node.parent.id === 'root';
};
/**
 * 明细表多级表头根据一个 node 返回其所属顶层节点
 * @param node
 * @returns {Node}
 */
var getNodeRoot = function (node) {
    while (!isTopLevelNode(node)) {
        node = node.parent;
    }
    return node;
};
/**
 * 获取 columns 的所有叶子节点
 * @param columns 列配置
 * @returns {Array} 叶子节点列组成的数组
 */
var getLeafColumns = function (columns) {
    var leafs = [];
    var recursionFn = function (list) {
        list.forEach(function (column) {
            if (typeof column === 'string' || !column.children) {
                leafs.push(column);
            }
            else {
                recursionFn(column.children);
            }
        });
    };
    recursionFn(columns);
    return leafs;
};
/**
 * 获取 columns 的所有叶子节点的 key
 * @param columns 列配置
 * @returns {Array<string>} 叶子节点列的key组成的数组
 */
var getLeafColumnsWithKey = function (columns) {
    var leafs = getLeafColumns(columns);
    return leafs.map(function (column) {
        if (typeof column === 'string') {
            return column;
        }
        return column.key;
    });
};
/**
 * 获取一个 node 的最左叶子节点，找不到则返回自身
 * @param node
 * @returns {Node}
 */
var getLeftLeafNode = function (node) {
    var firstNode = node.children[0];
    if (!firstNode) {
        return node;
    }
    return firstNode.isLeaf ? firstNode : getLeftLeafNode(firstNode);
};
/**
 * fields 的 rows、columns、values、customTreeItems 值都为空时，返回 true
 * @param {Fields} fields
 * @return {boolean}
 */
var areAllFieldsEmpty = function (fields) {
    return (isEmpty(fields.rows) &&
        isEmpty(fields.columns) &&
        isEmpty(fields.values) &&
        isEmpty(fields.customTreeItems));
};
/**
 * get frozen options pivot-sheet (business limit)
 * @param options
 * @returns
 */
var getFrozenRowCfgPivot = function (options, rowNodes) {
    var _a;
    var pagination = options.pagination, frozenFirstRow = options.frozenFirstRow, hierarchyType = options.hierarchyType, showSeriesNumber = options.showSeriesNumber;
    var enablePagination = pagination && pagination.pageSize;
    var enableFrozenFirstRow = false;
    var headNode = rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes[0];
    if (!enablePagination && frozenFirstRow) {
        // first node no children: entire row
        enableFrozenFirstRow = ((_a = headNode === null || headNode === void 0 ? void 0 : headNode.children) === null || _a === void 0 ? void 0 : _a.length) === 0;
        var treeMode = hierarchyType === 'tree' || hierarchyType === 'customTree';
        if (treeMode && !enableFrozenFirstRow) {
            enableFrozenFirstRow = !showSeriesNumber;
        }
    }
    var effectiveFrozenFirstRow = enableFrozenFirstRow && !!headNode;
    return {
        frozenRowCount: effectiveFrozenFirstRow ? 1 : 0,
        frozenColCount: 0,
        frozenTrailingColCount: 0,
        frozenTrailingRowCount: 0,
        enableFrozenFirstRow: enableFrozenFirstRow,
        frozenRowHeight: effectiveFrozenFirstRow ? headNode.height : 0,
    };
};

var buildTableHierarchy = function (params) {
    var facetCfg = params.facetCfg;
    var columns = facetCfg.columns, spreadsheet = facetCfg.spreadsheet;
    var hiddenColumnsDetail = spreadsheet.store.get('hiddenColumnsDetail');
    var showSeriesNumber = facetCfg === null || facetCfg === void 0 ? void 0 : facetCfg.showSeriesNumber;
    // 获取所有叶子结点
    var leafs = getLeafColumnsWithKey(columns);
    var displayedColumns = leafs.filter(function (column) {
        if (!hiddenColumnsDetail) {
            return true;
        }
        return hiddenColumnsDetail.every(function (detail) {
            return detail.hideColumnNodes.every(function (node) {
                return node.field !== column;
            });
        });
    });
    var fields = __spreadArray$1([], __read(displayedColumns), false);
    var tree = __spreadArray$1([], __read(columns), false);
    var fieldsMap = {};
    if (showSeriesNumber) {
        tree.unshift({
            key: SERIES_NUMBER_FIELD,
        });
        fieldsMap[SERIES_NUMBER_FIELD] = true;
    }
    fields.reduce(function (prev, field) {
        prev[field] = true;
        return prev;
    }, fieldsMap);
    DFSGenerateHeaderNodes(getDisplayedColumnsTree(tree, fieldsMap), params, 0, null);
};

var FORMATTERS = {
    en_US: ['KMBTP'.split(''), [1e3, 1e3, 1e3, 1e3, 1e3]],
    zh_CN: [
        ['万', '亿'],
        [10000, 1e4],
    ],
};
/**
 * 自动格式化
 * 规则
 *  1，小于1w，使用逗号分割，例如 3,459
 *  2，大于1w，使用语义化，例如 3.2万，3.4亿 2,234万
 * @param v
 * @param fixed
 * @param formatter
 */
var auto = function (v, fixed, formatter) {
    if (fixed === void 0) { fixed = 2; }
    if (formatter === void 0) { formatter = FORMATTERS[getLang()] || FORMATTERS.zh_CN; }
    if (typeof v !== 'number' || isNaN$1(v)) {
        return '';
    }
    // let n = Math.abs(v); // abs什么鬼。
    var n = v;
    // 语义化
    var _a = __read(formatter, 2), texts = _a[0], powers = _a[1];
    var loop = 0;
    var power;
    var running = true;
    while (running) {
        power = powers[loop];
        if (n >= power && loop < texts.length) {
            n /= power;
        }
        else {
            running = false;
        }
        loop += 1;
    }
    // parseFloat 解决 toFixed 出现很多 0 结尾。
    // 举例：123.toFixed(2) = '123.00'，需要返回 '123'
    n = parseFloat(n.toFixed(fixed));
    // 千分位
    var output = n >= 1000 ? n.toLocaleString('en') : "".concat(n);
    // 加上最后的单位
    return loop === 0 ? output : "".concat(output, " ").concat(texts[loop - 1]);
};
// 简单处理小数精度误差，保持和Spreadsheet统一逻辑
// 技术细节：https://juejin.im/post/5ce373d651882532e409ea96
var parseNumberWithPrecision = function (value) {
    return Number.parseFloat((toNumber(value) || 0).toPrecision(PRECISION));
};

var getValidFrozenOptions = function (opts, colLength, dataLength) {
    if (dataLength === void 0) { dataLength = 0; }
    // 如果没有传行列冻结选项，提前返回
    if (!Object.values(opts).find(function (item) { return item > 0; })) {
        return opts;
    }
    var newOpts = __assign({}, opts);
    if (newOpts.frozenColCount >= colLength) {
        newOpts.frozenColCount = colLength;
    }
    var remainFrozenColCount = colLength - newOpts.frozenColCount;
    if (newOpts.frozenTrailingColCount > remainFrozenColCount) {
        newOpts.frozenTrailingColCount = remainFrozenColCount;
    }
    if (newOpts.frozenRowCount >= dataLength) {
        newOpts.frozenRowCount = dataLength;
    }
    var remainFrozenRowCount = dataLength - newOpts.frozenRowCount;
    if (newOpts.frozenTrailingRowCount > remainFrozenRowCount) {
        newOpts.frozenTrailingRowCount = remainFrozenRowCount;
    }
    return newOpts;
};

function renderRect(group, attrs, extraParams) {
    var _a;
    return (_a = group === null || group === void 0 ? void 0 : group.addShape) === null || _a === void 0 ? void 0 : _a.call(group, 'rect', __assign({ zIndex: 1, attrs: attrs }, (extraParams || {})));
}
function renderPolygon(group, attrs) {
    var _a;
    return (_a = group === null || group === void 0 ? void 0 : group.addShape) === null || _a === void 0 ? void 0 : _a.call(group, 'polygon', {
        attrs: attrs,
    });
}
function renderPolyline(group, attrs) {
    var _a;
    return (_a = group === null || group === void 0 ? void 0 : group.addShape) === null || _a === void 0 ? void 0 : _a.call(group, 'polyline', {
        attrs: attrs,
    });
}
function renderCircle(group, attrs) {
    var _a;
    return (_a = group === null || group === void 0 ? void 0 : group.addShape) === null || _a === void 0 ? void 0 : _a.call(group, 'circle', {
        attrs: attrs,
    });
}
function renderText(group, shapes, x, y, text, textStyle, extraStyle, 
// 因为 text 为 ellipsisText
originalText) {
    var _a;
    if (!isEmpty(shapes) && group) {
        forEach(shapes, function (shape) {
            if (group.contain(shape)) {
                group.removeChild(shape, true);
            }
        });
    }
    return (_a = group === null || group === void 0 ? void 0 : group.addShape) === null || _a === void 0 ? void 0 : _a.call(group, 'text', {
        attrs: __assign(__assign({ x: x, y: y, text: text, originalText: originalText }, textStyle), extraStyle),
    });
}
function renderLine(group, coordinate, lineStyle) {
    var _a;
    return (_a = group === null || group === void 0 ? void 0 : group.addShape) === null || _a === void 0 ? void 0 : _a.call(group, 'line', {
        zIndex: 100,
        attrs: __assign(__assign({}, coordinate), lineStyle),
    });
}
function updateShapeAttr(shapeGroup, attribute, value) {
    if (isEmpty(shapeGroup)) {
        return;
    }
    var shapes = isArray$1(shapeGroup) ? shapeGroup : [shapeGroup];
    shapes.forEach(function (shape) {
        set(shape, "attrs.".concat(attribute), value);
    });
}
function updateFillOpacity(shape, opacity) {
    updateShapeAttr(shape, 'fillOpacity', opacity);
}
function updateStrokeOpacity(shape, opacity) {
    updateShapeAttr(shape, 'strokeOpacity', opacity);
}
function renderIcon(group, iconCfg) {
    var iconShape = new GuiIcon(iconCfg);
    group === null || group === void 0 ? void 0 : group.add(iconShape);
    return iconShape;
}
function renderTreeIcon(group, area, fill, isCollapse, onClick) {
    var icon = new GuiIcon(__assign(__assign({ name: isCollapse ? 'Plus' : 'Minus' }, area), { fill: fill }));
    if (isFunction(onClick)) {
        icon.on('click', onClick);
    }
    group === null || group === void 0 ? void 0 : group.add(icon);
    return icon;
}

var OFFSCREEN_CANVAS_DOM_ID = 's2-offscreen-canvas';
/**
 * 获取工具 canvas
 * 需要把 canvas 插入到 body 下，继承全局的 css 样式（如 letter-spacing）
 * 否则后续的 measureText 与实际渲染会有较大差异
 */
var getOffscreenCanvas = function () {
    var canvas = document.getElementById(OFFSCREEN_CANVAS_DOM_ID);
    if (canvas) {
        return canvas;
    }
    canvas = document.createElement('canvas');
    canvas.id = OFFSCREEN_CANVAS_DOM_ID;
    canvas.style.display = 'none';
    document.body.appendChild(canvas);
    return canvas;
};
/**
 * 移除工具 canvas
 */
var removeOffscreenCanvas = function () {
    var _a;
    (_a = document.getElementById(OFFSCREEN_CANVAS_DOM_ID)) === null || _a === void 0 ? void 0 : _a.remove();
};

var getIconPositionCfg = function (condition) {
    var _a;
    return (_a = condition === null || condition === void 0 ? void 0 : condition.position) !== null && _a !== void 0 ? _a : 'right';
};
// 生成柱状图的的绘制范围，柱状图的生成逻辑都是统一的负左正右的逻辑
// 分为以下几种情况：
// 1. maxValue > minValue >=0，柱状图从最左侧开始绘制，范围是 min -- max， 可以认为 0 点此时和 min 重合
// 0 min                      max
// | |                        |
// | +------------------------+
// | |▉▉▉▉▉▉▉                 |
// | +------------------------+
// 2. maxValue > 0 > minValue，柱状图从0点开始绘制，范围是 min -- 0 --  max
// min          0            max
//  |           |            |
//  +-----------|------------+
//  |    ▉▉▉▉▉▉▉|▉▉▉▉        |
//  +-----------|------------+
// 3. 0 >= maxValue > minValue，柱状图从最右侧开始绘制，范围是 min -- max，可以认为 0 点此时和 max 重合
// min                      max 0
//  |                        |  |
//  +------------------------+  |
//  |             ▉▉▉▉▉▉▉▉▉▉▉|  |
//  +------------------------+  |
var getIntervalScale = function (minValue, maxValue) {
    if (minValue === void 0) { minValue = 0; }
    if (maxValue === void 0) { maxValue = 0; }
    minValue = parseNumberWithPrecision(minValue);
    maxValue = parseNumberWithPrecision(maxValue);
    var allPositiveValue = minValue >= 0;
    var bothPositiveAndNegativeValue = maxValue >= 0 && minValue <= 0;
    var zeroForEitherPositiveOrNegative = allPositiveValue
        ? minValue
        : maxValue;
    var zero = bothPositiveAndNegativeValue
        ? 0
        : zeroForEitherPositiveOrNegative;
    var distance = maxValue - minValue;
    return function (current) {
        var zeroScaleForEitherPositiveOrNegative = allPositiveValue ? 0 : 1;
        var zeroScale = bothPositiveAndNegativeValue
            ? clamp$1(Math.abs(0 - minValue) / distance, 0, 1)
            : zeroScaleForEitherPositiveOrNegative;
        // scale 为负值时，代表方向绘制（g支持的模式）
        var scale = clamp$1((current - zero) / distance, -1, 1);
        return { zeroScale: zeroScale, scale: scale };
    };
};

/**
 * 基于 g 绘制简单 mini 图工具库
 * https://github.com/antvis/g
 */
/**
 *  坐标转换
 */
var scale = function (chartData, cell) {
    var _a, _b, _c;
    var data = chartData.data, encode = chartData.encode, type = chartData.type;
    var _d = cell.getMeta(), x = _d.x, y = _d.y, height = _d.height, width = _d.width;
    var dataCellStyle = cell.getStyle(CellTypes.DATA_CELL);
    var cellStyle = dataCellStyle.cell, miniChart = dataCellStyle.miniChart;
    var measures = [];
    var encodedData = map(data, function (item) {
        measures.push(item === null || item === void 0 ? void 0 : item[encode.y]);
        return {
            x: item[encode.x],
            y: item[encode.y],
        };
    });
    var maxMeasure = max$1(measures);
    var minMeasure = min$1(measures);
    var measureRange = maxMeasure - minMeasure;
    var xStart = x + cellStyle.padding.left;
    var xEnd = x + width - cellStyle.padding.right;
    var yStart = y + cellStyle.padding.top;
    var yEnd = y + height - cellStyle.padding.bottom;
    var heightRange = yEnd - yStart;
    var intervalX = type === MiniChartTypes.Bar
        ? (xEnd -
            xStart -
            (measures.length - 1) * ((_a = miniChart === null || miniChart === void 0 ? void 0 : miniChart.bar) === null || _a === void 0 ? void 0 : _a.intervalPadding)) /
            measures.length +
            ((_b = miniChart === null || miniChart === void 0 ? void 0 : miniChart.bar) === null || _b === void 0 ? void 0 : _b.intervalPadding)
        : (_c = (xEnd - xStart) / (measures.length - 1)) !== null && _c !== void 0 ? _c : 0;
    var box = [];
    var points = map(encodedData, function (item, key) {
        var _a;
        var positionX = xStart + key * intervalX;
        var positionY;
        if (measureRange !== 0) {
            positionY = yEnd - (((item === null || item === void 0 ? void 0 : item.y) - minMeasure) / measureRange) * heightRange;
        }
        else {
            positionY = minMeasure > 0 ? yStart : yEnd;
        }
        if (type === MiniChartTypes.Bar) {
            var baseLinePositionY = void 0;
            var barHeight = void 0;
            if (minMeasure < 0 && maxMeasure > 0 && measureRange !== 0) {
                // 基准线（0 坐标）在中间
                baseLinePositionY =
                    yEnd - ((0 - minMeasure) / measureRange) * heightRange;
                barHeight = Math.abs(positionY - baseLinePositionY);
                if ((item === null || item === void 0 ? void 0 : item.y) < 0) {
                    positionY = baseLinePositionY; // 如果值小于 0 需要从基准线为起始 y 坐标开始绘制
                }
            }
            else {
                // TODO 之后看需不需要把基准线画出来
                baseLinePositionY = minMeasure < 0 ? yStart : yEnd;
                measureRange = max$1([Math.abs(maxMeasure), Math.abs(minMeasure)]);
                barHeight =
                    measureRange === 0
                        ? heightRange
                        : (Math.abs((item === null || item === void 0 ? void 0 : item.y) - 0) / measureRange) * heightRange;
                positionY = baseLinePositionY;
            }
            var barWidth = intervalX - ((_a = miniChart === null || miniChart === void 0 ? void 0 : miniChart.bar) === null || _a === void 0 ? void 0 : _a.intervalPadding);
            box.push([barWidth, barHeight]);
        }
        return [positionX, positionY];
    });
    return {
        points: points,
        box: box,
    };
};
// ========================= mini 折线相关 ==============================
/**
 *  绘制单元格内的 mini 折线图
 */
var drawLine = function (chartData, cell) {
    if (isEmpty(chartData === null || chartData === void 0 ? void 0 : chartData.data) || isEmpty(cell)) {
        return;
    }
    var dataCellStyle = cell.getStyle(CellTypes.DATA_CELL);
    var miniChart = dataCellStyle.miniChart;
    var _a = miniChart.line, point = _a.point, linkLine = _a.linkLine;
    var points = scale(chartData, cell).points;
    renderPolyline(cell, {
        points: points,
        stroke: linkLine.fill,
        lineWidth: linkLine.size,
        opacity: linkLine.opacity,
    });
    for (var i = 0; i < points.length; i++) {
        renderCircle(cell, {
            x: points[i][0],
            y: points[i][1],
            r: point.size,
            fill: point.fill,
            fillOpacity: point.opacity,
        });
    }
};
// ========================= mini 柱状图相关 ==============================
/**
 *  绘制单元格内的 mini 柱状图
 */
var drawBar = function (chartData, cell) {
    if (isEmpty(chartData === null || chartData === void 0 ? void 0 : chartData.data) || isEmpty(cell)) {
        return;
    }
    var dataCellStyle = cell.getStyle(CellTypes.DATA_CELL);
    var miniChart = dataCellStyle.miniChart;
    var bar = miniChart.bar;
    var _a = scale(chartData, cell), points = _a.points, box = _a.box;
    for (var i = 0; i < points.length; i++) {
        renderRect(cell, {
            x: points[i][0],
            y: points[i][1],
            width: box[i][0],
            height: box[i][1],
            fill: bar.fill,
            fillOpacity: bar.opacity,
        });
    }
};
// ======================== mini 子弹图相关 ==============================
/**
 * 根据当前值和目标值获取子弹图填充色
 */
var getBulletRangeColor = function (measure, target, rangeColors) {
    var delta = Number(target) - Number(measure);
    if (Number.isNaN(delta) || Number(measure) < 0) {
        return rangeColors.bad;
    }
    if (delta <= 0.1) {
        return rangeColors.good;
    }
    if (delta > 0.1 && delta <= 0.2) {
        return rangeColors.satisfactory;
    }
    return rangeColors.bad;
};
// 比率转百分比, 简单解决计算精度问题
var transformRatioToPercent = function (ratio, fractionDigits) {
    var _a, _b;
    if (fractionDigits === void 0) { fractionDigits = { min: 0, max: 0 }; }
    var value = Number(ratio);
    if (Number.isNaN(value)) {
        return ratio;
    }
    var minimumFractionDigits = (_a = fractionDigits === null || fractionDigits === void 0 ? void 0 : fractionDigits.min) !== null && _a !== void 0 ? _a : fractionDigits;
    var maximumFractionDigits = (_b = fractionDigits === null || fractionDigits === void 0 ? void 0 : fractionDigits.max) !== null && _b !== void 0 ? _b : fractionDigits;
    var formatter = new Intl.NumberFormat('en-US', {
        minimumFractionDigits: minimumFractionDigits,
        maximumFractionDigits: maximumFractionDigits,
        // 禁用自动分组: "12220%" => "12,220%"
        useGrouping: false,
        style: 'percent',
    });
    return formatter.format(value);
};
// ========================= 条件格式柱图相关 ==============================
/**
 *  绘制单元格内的 条件格式 柱图
 */
var drawInterval = function (cell) {
    var _a, _b, _c, _d, _e, _f;
    if (isEmpty(cell)) {
        return;
    }
    var _g = cell.getCellArea(), x = _g.x, y = _g.y, height = _g.height, width = _g.width;
    var intervalCondition = cell.findFieldCondition((_a = cell.cellConditions) === null || _a === void 0 ? void 0 : _a.interval);
    if (intervalCondition && intervalCondition.mapping) {
        var attrs = cell.mappingValue(intervalCondition);
        if (!attrs) {
            return;
        }
        var valueRange = attrs.isCompare ? attrs : cell.valueRangeByField;
        var minValue = parseNumberWithPrecision(valueRange.minValue);
        var maxValue = parseNumberWithPrecision(valueRange.maxValue);
        var fieldValue = isNil(attrs === null || attrs === void 0 ? void 0 : attrs.fieldValue)
            ? parseNumberWithPrecision(cell.getMeta().fieldValue)
            : parseNumberWithPrecision(attrs === null || attrs === void 0 ? void 0 : attrs.fieldValue);
        // 对于超出设定范围的值不予显示
        if (fieldValue < minValue || fieldValue > maxValue) {
            return;
        }
        var barChartHeight = (_c = (_b = cell.getStyle().miniChart.interval) === null || _b === void 0 ? void 0 : _b.height) !== null && _c !== void 0 ? _c : cell.getStyle().cell.miniBarChartHeight;
        var barChartFillColor = (_e = (_d = cell.getStyle().miniChart.interval) === null || _d === void 0 ? void 0 : _d.fill) !== null && _e !== void 0 ? _e : cell.getStyle().cell.miniBarChartFillColor;
        var getScale = getIntervalScale(minValue, maxValue);
        var _h = getScale(fieldValue), zeroScale = _h.zeroScale, intervalScale = _h.scale;
        var fill = (_f = attrs.fill) !== null && _f !== void 0 ? _f : barChartFillColor;
        return renderRect(cell, {
            x: x + width * zeroScale,
            y: y + height / 2 - barChartHeight / 2,
            width: width * intervalScale,
            height: barChartHeight,
            fill: fill,
        });
    }
};
/**
 *  绘制单元格内的 mini子弹图
 */
var drawBullet = function (value, cell) {
    var _a;
    var dataCellStyle = cell.getStyle(CellTypes.DATA_CELL);
    var _b = cell.getMeta(), x = _b.x, y = _b.y, height = _b.height, width = _b.width, spreadsheet = _b.spreadsheet;
    if (isEmpty(value)) {
        renderText(cell, [], x + width - dataCellStyle.cell.padding.right, y + height / 2, getEmptyPlaceholder(cell, spreadsheet.options.placeholder), dataCellStyle.text);
        return;
    }
    var bulletStyle = dataCellStyle.miniChart.bullet;
    var progressBar = bulletStyle.progressBar, comparativeMeasure = bulletStyle.comparativeMeasure, rangeColors = bulletStyle.rangeColors, backgroundColor = bulletStyle.backgroundColor;
    var measure = value.measure, target = value.target;
    var displayMeasure = Math.max(Number(measure), 0);
    var displayTarget = Math.max(Number(target), 0);
    // 原本是 "0%", 需要精确到浮点数后两位, 保证数值很小时能正常显示, 显示的百分比格式为 "0.22%"
    // 所以子弹图需要为数值预留宽度
    // 对于负数, 进度条计算按照 0 处理, 但是展示还是要显示原来的百分比
    var measurePercent = transformRatioToPercent(measure, 2);
    var widthPercent = (progressBar === null || progressBar === void 0 ? void 0 : progressBar.widthPercent) > 1
        ? (progressBar === null || progressBar === void 0 ? void 0 : progressBar.widthPercent) / 100
        : progressBar === null || progressBar === void 0 ? void 0 : progressBar.widthPercent;
    var padding = dataCellStyle.cell.padding;
    var contentWidth = width - padding.left - padding.right;
    // 子弹图先占位(bulletWidth)，剩下空间给文字(measureWidth)
    var bulletWidth = widthPercent * contentWidth;
    var measureWidth = contentWidth - bulletWidth;
    // TODO 先支持默认右对齐
    // 绘制子弹图
    // 1. 背景
    var positionX = x + width - padding.right - bulletWidth;
    var positionY = y + height / 2 - progressBar.height / 2;
    renderRect(cell, {
        x: positionX,
        y: positionY,
        width: bulletWidth,
        height: progressBar.height,
        fill: backgroundColor,
        textBaseline: dataCellStyle.text.textBaseline,
    });
    // 2. 进度条
    var getRangeColor = get(cell.getMeta(), 'spreadsheet.options.bullet.getRangeColor');
    var displayBulletWidth = Math.max(Math.min(bulletWidth * displayMeasure, bulletWidth), 0);
    renderRect(cell, {
        x: positionX,
        y: positionY + (progressBar.height - progressBar.innerHeight) / 2,
        width: displayBulletWidth,
        height: progressBar.innerHeight,
        fill: (_a = getRangeColor === null || getRangeColor === void 0 ? void 0 : getRangeColor(displayMeasure, displayTarget)) !== null && _a !== void 0 ? _a : getBulletRangeColor(displayMeasure, displayTarget, rangeColors),
    });
    // 3.测量标记线
    var lineX = positionX + bulletWidth * displayTarget;
    renderLine(cell, {
        x1: lineX,
        y1: y + (height - comparativeMeasure.height) / 2,
        x2: lineX,
        y2: y +
            (height - comparativeMeasure.height) / 2 +
            comparativeMeasure.height,
    }, {
        stroke: (comparativeMeasure === null || comparativeMeasure === void 0 ? void 0 : comparativeMeasure.fill) || (comparativeMeasure === null || comparativeMeasure === void 0 ? void 0 : comparativeMeasure.color),
        lineWidth: comparativeMeasure.width,
        opacity: comparativeMeasure === null || comparativeMeasure === void 0 ? void 0 : comparativeMeasure.opacity,
    });
    // 4.绘制指标
    renderText(cell, [], positionX - padding.right, y + height / 2, getEllipsisText({
        measureTextWidth: spreadsheet.measureTextWidth,
        text: measurePercent,
        maxWidth: measureWidth - padding.right,
        fontParam: dataCellStyle.text,
    }), dataCellStyle.text);
};
var renderMiniChart = function (cell, data) {
    switch (data === null || data === void 0 ? void 0 : data.type) {
        case MiniChartTypes.Line:
            drawLine(data, cell);
            break;
        case MiniChartTypes.Bar:
            drawBar(data, cell);
            break;
        default:
            drawBullet(data, cell);
            break;
    }
};

/**
 * -----------------------------
 * |           padding         |
 * |  |---------------------|  |
 * |  |                     |  |
 * |  |                     |  |
 * |  |---------------------|  |
 * |           padding         |
 * -----------------------------
 */
var getContentArea = function (bbox, padding) {
    var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;
    var contentWidth = width - (padding === null || padding === void 0 ? void 0 : padding.left) - (padding === null || padding === void 0 ? void 0 : padding.right);
    var contentHeight = height - (padding === null || padding === void 0 ? void 0 : padding.top) - (padding === null || padding === void 0 ? void 0 : padding.bottom);
    return {
        x: x + (padding === null || padding === void 0 ? void 0 : padding.left),
        y: y + (padding === null || padding === void 0 ? void 0 : padding.top),
        width: contentWidth,
        height: contentHeight,
    };
};
/**
 * text 和 icon 之间布局关系：
 *    y轴： text 和 icon 高度上居中对齐
 *    x轴：
 *       1. text 和 icon 同为 left 或者 right 时，icon bbox 只需要简单放置在 left 或者 right 即可
 *       2. 其他的情况，需要根据实际 text width 确定 icon bbox 开始位置
 */
var normalizeIconCfg = function (iconCfg) {
    return merge$1({
        size: 0,
        position: 'right',
        margin: {
            left: 0,
            right: 0,
        },
    }, iconCfg);
};
var getMaxTextWidth = function (contentWidth, iconCfg) {
    iconCfg = normalizeIconCfg(iconCfg);
    return (contentWidth - iconCfg.size - iconCfg.margin.right - iconCfg.margin.left);
};
var getVerticalPosition = function (_a, textBaseline, size) {
    var y = _a.y, height = _a.height;
    if (size === void 0) { size = 0; }
    var p = 0;
    switch (textBaseline) {
        case 'top':
            p = y;
            break;
        case 'middle':
            p = y + height / 2 - size / 2;
            break;
        default:
            p = y + height - size;
            break;
    }
    return p;
};
// 获取text及其跟随icon的位置坐标
var getTextAndFollowingIconPosition = function (contentBox, textCfg, textWidth, iconCfg, iconCount) {
    if (textWidth === void 0) { textWidth = 0; }
    if (iconCount === void 0) { iconCount = 1; }
    var x = contentBox.x, width = contentBox.width;
    var textAlign = textCfg.textAlign, textBaseline = textCfg.textBaseline;
    var _a = normalizeIconCfg(iconCfg), size = _a.size, margin = _a.margin, iconPosition = _a.position;
    var iconSpace = iconCount * (size + margin.left) + (iconCount ? margin.right : 0);
    var textX;
    var iconX;
    switch (textAlign) {
        case 'left':
            /**
             * icon left -- text left
             * ------------------------------------------------------
             * | margin-left | icon | margin-right | text | padding |
             * ------------------------------------------------------
             *
             * text left - icon right
             * ------------------------------------------------------
             * | text | margin-left | icon | margin-right | padding |
             * ------------------------------------------------------
             */
            textX = x + (iconPosition === 'left' ? iconSpace : 0);
            iconX =
                x + (iconPosition === 'left' ? margin.left : textWidth + margin.left);
            break;
        case 'center': {
            /**
             * icon left -- text center
             * ----------------------------------------------------------------
             * | padding | margin-left | icon | margin-right | text | padding |
             * ----------------------------------------------------------------
             *
             * text center - icon right
             * ----------------------------------------------------------------
             * | padding | text | margin-left | icon | margin-right | padding |
             * ----------------------------------------------------------------
             */
            var totalWidth = iconSpace -
                (iconPosition === 'left' ? margin.left : margin.right) +
                textWidth;
            var startX = x + width / 2 - totalWidth / 2;
            textX =
                startX +
                    textWidth / 2 +
                    (iconPosition === 'left' ? iconSpace - margin.left : 0);
            iconX = startX + (iconPosition === 'left' ? 0 : textWidth + margin.left);
            break;
        }
        default: {
            /**
             * icon left -- text right
             * ------------------------------------------------------
             * | padding | margin-left | icon | margin-right | text |
             * ------------------------------------------------------
             *
             * text right - icon right
             * ------------------------------------------------------
             * | padding | text | margin-left | icon | margin-right |
             * ------------------------------------------------------
             */
            textX = x + width - (iconPosition === 'right' ? iconSpace : 0);
            iconX =
                x +
                    width -
                    (iconPosition === 'right'
                        ? iconSpace - margin.left
                        : textWidth + iconSpace - margin.left);
            break;
        }
    }
    var textY = getVerticalPosition(contentBox, textBaseline, 0);
    var iconY = getVerticalPosition(contentBox, textBaseline, size);
    return {
        text: { x: textX, y: textY },
        icon: { x: iconX, y: iconY },
    };
};
var getTextPosition = function (contentBox, textCfg) { return getTextAndFollowingIconPosition(contentBox, textCfg).text; };
/**
 * 在给定视窗和单元格的情况下，计算单元格文字区域的坐标信息
 * 计算遵循原则：
 * 1. 若可视范围小，尽可能多展示文字
 * 2. 若可视范围大，居中展示文字
 * @param viewport 视窗坐标信息
 * @param content content 列头单元格 content 区域坐标信息
 * @param textWidth 文字实际绘制区域宽度（含icon）
 * @returns 文字绘制位置（start 为文字区域的中点坐标值）
 */
var getTextAreaRange = function (viewport, content, textWidth) {
    var contentEnd = content.start + content.width;
    var viewportEnd = viewport.start + viewport.width;
    var position;
    var availableContentWidth;
    if (content.start <= viewport.start && contentEnd >= viewportEnd) {
        /**
         *     +----------------------+
         *     |      viewport        |
         *  +--|----------------------|--+
         *  |  |    cellContent       |  |
         *  +--|----------------------|--+
         *     +----------------------+
         */
        position = viewport.start + viewport.width / 2;
        availableContentWidth = viewport.width;
    }
    else if (content.start <= viewport.start) {
        /**
         *         +-------------------+
         *  +------|------+            |
         *  | cellContent |   viewport |
         *  +------|------+            |
         *         +-------------------+
         */
        var restWidth = content.width - (viewport.start - content.start);
        position =
            restWidth < textWidth
                ? contentEnd - textWidth / 2
                : contentEnd - restWidth / 2;
        availableContentWidth = restWidth;
    }
    else if (contentEnd >= viewportEnd) {
        /**
         *   +-------------------+
         *   |            +------|------+
         *   | viewport   | cellContent |
         *   |            +------|------+
         *   +-------------------+
         */
        var restWidth = content.width - (contentEnd - viewportEnd);
        position =
            restWidth < textWidth
                ? content.start + textWidth / 2
                : content.start + restWidth / 2;
        availableContentWidth = restWidth;
    }
    else {
        /**
         *   +----------------------------+
         *   |  +-------------+           |
         *   |  | cellContent |  viewport |
         *   |  +-------------+           |
         *   +----------------------------+
         */
        position = content.start + content.width / 2;
        availableContentWidth = content.width;
    }
    return { start: position, width: availableContentWidth };
};
var getBorderPositionAndStyle = function (position, contentBox, style) {
    var x = contentBox.x, y = contentBox.y, width = contentBox.width, height = contentBox.height;
    var horizontalBorderWidth = style.horizontalBorderWidth, horizontalBorderColorOpacity = style.horizontalBorderColorOpacity, horizontalBorderColor = style.horizontalBorderColor, verticalBorderWidth = style.verticalBorderWidth, verticalBorderColor = style.verticalBorderColor, verticalBorderColorOpacity = style.verticalBorderColorOpacity, borderDash = style.borderDash;
    var x1;
    var y1;
    var x2;
    var y2;
    var borderStyle;
    // horizontal
    if (position === CellBorderPosition.TOP ||
        position === CellBorderPosition.BOTTOM) {
        var yPosition = y;
        if (position === CellBorderPosition.TOP) {
            // 完全绘制在 Cell 内，否则会导致 Border 粗细不一： https://github.com/antvis/S2/issues/426
            yPosition = y + verticalBorderWidth / 2;
        }
        else {
            yPosition = y + height - verticalBorderWidth / 2;
        }
        y1 = yPosition;
        y2 = yPosition;
        x1 = x;
        x2 = x + width;
        borderStyle = {
            lineWidth: horizontalBorderWidth,
            stroke: horizontalBorderColor,
            strokeOpacity: horizontalBorderColorOpacity,
            lineDash: borderDash,
        };
    }
    // vertical
    if (position === CellBorderPosition.LEFT ||
        position === CellBorderPosition.RIGHT) {
        var xPosition = x;
        if (position === CellBorderPosition.LEFT) {
            xPosition = x + horizontalBorderWidth / 2;
        }
        else {
            xPosition = x + width - horizontalBorderWidth / 2;
        }
        x1 = xPosition;
        x2 = xPosition;
        y1 = y;
        y2 = y + height;
        borderStyle = {
            lineWidth: verticalBorderWidth,
            stroke: verticalBorderColor,
            strokeOpacity: verticalBorderColorOpacity,
            lineDash: borderDash,
        };
    }
    return {
        position: {
            x1: x1,
            x2: x2,
            y1: y1,
            y2: y2,
        },
        style: borderStyle,
    };
};
/**
 * 根据单元格文字样式调整 viewport range，使文字在滚动时不会贴边展示
 *
 * 以 textAlign=left 情况为例，由大到小的矩形分别是 viewport、cellContent、cellText
 * 左图是未调整前，滚动相交判定在 viewport 最左侧，即 colCell 滚动到 viewport 左侧后，文字会贴左边绘制
 * 右图是调整后，range.start 提前了 padding.left 个像素，文字与 viewport 有一定间隙更加美观
 *
 *    range.start                                   range.start
 *         |                                             |
 *         |      range.width                            |  range.width
 *         v<---------------------->                     v<------------------>
 *
 *         +-----------------------+                 +-----------------------+
 *         |       viewport        |                 |       viewport        |
 *     +-------------------+       |             +-------------------+       |
 *     |   +---------+     |       |             |   |   +---------+ |       |
 *     |   |  text   |     |       |             |   |   |  text   | |       |
 *     |   +---------+     |       |             |   |   +---------+ |       |
 *     +-------------------+       |             +-------------------+       |
 *         +-----------------------+                 +-----------------------+
 *
 *                                                   <-->
 *                                                padding.left
 *
 * @param viewport 原始 viewport
 * @param textAlign 文字样式
 * @param textPadding 单元格 padding 样式
 * @returns viewport range
 */
var adjustColHeaderScrollingViewport = function (viewport, textAlign, textPadding) {
    if (textPadding === void 0) { textPadding = { left: 0, right: 0 }; }
    var nextViewport = __assign({}, viewport);
    if (textAlign === 'left') {
        nextViewport.start += textPadding.left;
        nextViewport.width -= textPadding.left;
    }
    else if (textAlign === 'right') {
        nextViewport.width -= textPadding.right;
    }
    return nextViewport;
};
/**
 * 根据文字样式计算文字实际绘制起始
 *
 * 以 textAlign=left 为例，g 绘制时取 text 最左侧的坐标值作为基准坐标
 *
 * 计算前：                                        计算后：
 * startX = textAreaRange.start = 中心点           startX = 最左侧坐标
 *
 *        textAreaRange.start                     startX
 *                |                                |
 *                v                                v
 *  +----------------------------+                +----------------------------+
 *  |    +------------------+    |                |+------------------+        |
 *  |    |   text    | icon |    |                ||   text    | icon |        |
 *  |    +------------------+    |                |+------------------+        |
 *  +----------------------------+                +----------------------------+
 *       <------------------>
 *         textAndIconSpace
 *  <---------------------------->
 *        textAreaRange.width
 *
 * @param textAreaRange 文本&icon 绘制坐标
 * @param actualTextWidth 文本实际宽度
 * @param actionIconSpace icon 区域实际宽度
 * @param textAlign 对齐样式
 * @returns 文字绘制起点坐标
 */
var adjustColHeaderScrollingTextPosition = function (textAreaRange, actualTextWidth, actionIconSpace, textAlign) {
    var textAndIconSpace = actualTextWidth + actionIconSpace;
    var startX = textAreaRange.start; // 文本&icon 区域中心点坐标 x
    if (textAlign === 'center') {
        return startX - actionIconSpace / 2;
    }
    var hasEnoughWidth = textAreaRange.width - textAndIconSpace > 0;
    var offset = hasEnoughWidth
        ? textAreaRange.width / 2
        : textAndIconSpace / 2;
    return textAlign === 'left'
        ? startX - offset
        : startX + offset - actionIconSpace;
};

/**
 * 计算文本在画布中的宽度
 * @deprecated 已废弃，1.30.0 版本后移除。该方法计算宽度不准确，请使用 spreadsheet 实例上的同名方法
 */
var measureTextWidth = memoize(function (text, font) {
    if (text === void 0) { text = ''; }
    if (!font) {
        return 0;
    }
    var ctx = getOffscreenCanvas().getContext('2d');
    var _a = font, fontSize = _a.fontSize, fontFamily = _a.fontFamily, fontWeight = _a.fontWeight, fontStyle = _a.fontStyle, fontVariant = _a.fontVariant;
    // copy G 里面的处理逻辑
    ctx.font = [fontStyle, fontVariant, fontWeight, "".concat(fontSize, "px"), fontFamily]
        .join(' ')
        .trim();
    return ctx.measureText("".concat(text)).width;
}, function (text, font) { return __spreadArray$1([text], __read(values(font)), false).join(''); });
/**
 * 获取文本的 ... 文本。
 * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：
 * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串
 * 2. 然后对最后这个字符串二分计算
 * @param measureTextWidth 文本宽度预估函数
 * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等
 * @param maxWidth
 * @param font
 */
var getEllipsisTextInner = function (measureTextWidth, text, maxWidth, font) {
    var STEP = 16; // 每次 16，调参工程师
    var DOT_WIDTH = measureTextWidth(ELLIPSIS_SYMBOL, font);
    var leftText;
    if (!isString(text)) {
        leftText = toString(text);
    }
    else {
        leftText = text;
    }
    var leftWidth = maxWidth;
    var r = []; // 最终的分段字符串
    var currentText;
    var currentWidth;
    if (measureTextWidth(text, font) <= maxWidth) {
        return text;
    }
    var runningStep1 = true;
    // 首先通过 step 计算，找出最大的未超出长度的
    while (runningStep1) {
        // 更新字符串
        currentText = leftText.substr(0, STEP);
        // 计算宽度
        currentWidth = measureTextWidth(currentText, font);
        // 超出剩余宽度，则停止
        if (currentWidth + DOT_WIDTH > leftWidth) {
            if (currentWidth > leftWidth) {
                runningStep1 = false;
                break;
            }
        }
        r.push(currentText);
        // 没有超出，则计算剩余宽度
        leftWidth -= currentWidth;
        leftText = leftText.substr(STEP);
        // 字符串整体没有超出
        if (!leftText) {
            return r.join('');
        }
    }
    var runningStep2 = true;
    // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）
    while (runningStep2) {
        // 更新字符串
        currentText = leftText.substr(0, 1);
        // 计算宽度
        currentWidth = measureTextWidth(currentText, font);
        // 超出剩余宽度，则停止
        if (currentWidth + DOT_WIDTH > leftWidth) {
            runningStep2 = false;
            break;
        }
        r.push(currentText);
        // 没有超出，则计算剩余宽度
        leftWidth -= currentWidth;
        leftText = leftText.substr(1);
        if (!leftText) {
            return r.join('');
        }
    }
    return "".concat(r.join(''), "...");
};
/**
 * 追求性能，粗略的计算文本的宽高！
 *
 * 算法逻辑：
 * 计算一个字符串中，符号[0-255]，中文（其他）的个数
 * 然后分别乘以中文、符号的宽度
 * @param text
 * @param font
 * @deprecated 已废弃，1.30.0 版本后移除。该方法计算宽度不准确，请使用 spreadsheet 实例上的同名方法
 */
var measureTextWidthRoughly = function (text, font) {
    var e_1, _a;
    if (font === void 0) { font = {}; }
    var alphaWidth = measureTextWidth('a', font);
    var chineseWidth = measureTextWidth('蚂', font);
    var w = 0;
    if (!text) {
        return w;
    }
    try {
        // eslint-disable-next-line no-restricted-syntax
        for (var text_1 = __values(text), text_1_1 = text_1.next(); !text_1_1.done; text_1_1 = text_1.next()) {
            var char = text_1_1.value;
            var code = char.charCodeAt(0);
            // /[\u0000-\u00ff]/
            w += code >= 0 && code <= 255 ? alphaWidth : chineseWidth;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (text_1_1 && !text_1_1.done && (_a = text_1.return)) _a.call(text_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return w;
};
/**
 * @desc 改良版 获取文本的 ... 文本（可传入 优先文本片段）
 * @param measureTextWidth 文本长度计算函数
 * @param text 需要计算的文本
 * @param maxWidth
 * @param font optional 文本字体 或 优先显示的文本
 * @param priority optional 优先显示的文本
 */
var getEllipsisText = function (_a) {
    var measureTextWidth = _a.measureTextWidth, text = _a.text, maxWidth = _a.maxWidth, fontParam = _a.fontParam, priorityParam = _a.priorityParam, placeholder = _a.placeholder;
    var font = {};
    var emptyPlaceholder = placeholder !== null && placeholder !== void 0 ? placeholder : EMPTY_PLACEHOLDER;
    // 对应维度缺少维度数据时, 会使用 EMPTY_FIELD_VALUE 填充, 实际渲染时统一转成 "-"
    var isEmptyText = isNil(text) || text === '' || text === EMPTY_FIELD_VALUE;
    var finalText = isEmptyText ? emptyPlaceholder : "".concat(text);
    var priority = priorityParam;
    if (fontParam && isArray$1(fontParam)) {
        priority = fontParam;
    }
    else {
        font = fontParam || {};
    }
    if (!priority || !priority.length) {
        return getEllipsisTextInner(measureTextWidth, finalText, maxWidth, font);
    }
    var leftSubTexts = [];
    var subTexts = [finalText];
    priority.forEach(function (priorityItem) {
        subTexts.forEach(function (tempSubText, index) {
            // 处理 leftText
            var startIdx = -1;
            var matched = tempSubText.match(new RegExp(priorityItem));
            if (matched) {
                var matchedText = matched[0];
                startIdx = matched.index;
                leftSubTexts.push(matchedText);
                var endIdx = startIdx + matchedText.length;
                var left = tempSubText.slice(0, startIdx);
                var right = tempSubText.slice(endIdx);
                var tmp = [left, right].filter(function (v) { return !!v; });
                subTexts.splice.apply(subTexts, __spreadArray$1([index, 1], __read(tmp), false));
            }
        });
    });
    // original text is split into serval texts by priority
    subTexts = leftSubTexts.concat(subTexts);
    var result = finalText;
    var DOT_WIDTH = measureTextWidth(ELLIPSIS_SYMBOL, font);
    var remainWidth = maxWidth;
    subTexts.forEach(function (subText) {
        if (remainWidth <= 0) {
            var originIdx = result.indexOf(subText);
            var prev = result.slice(originIdx - 3, originIdx);
            if (prev && prev !== ELLIPSIS_SYMBOL) {
                var subWidth = measureTextWidth(subText, font);
                // fix-边界处理: when subWidth <= DOT_WIDTH 不做 ... 处理
                result = result.replace(subText, subWidth > DOT_WIDTH ? ELLIPSIS_SYMBOL : subText);
            }
            else {
                result = result.replace(subText, '');
            }
            remainWidth -= DOT_WIDTH;
        }
        else {
            var subWidth = measureTextWidth(subText, font);
            // fix-边界处理: when subWidth <= DOT_WIDTH 不做 ... 处理
            if (remainWidth < subWidth && subWidth > DOT_WIDTH) {
                var ellipsis = getEllipsisTextInner(measureTextWidth, subText, remainWidth, font);
                result = result.replace(subText, ellipsis);
                remainWidth = 0;
            }
            else {
                remainWidth -= subWidth;
            }
        }
    });
    return result;
};
/**
 * To decide whether the data is positive or negative.
 * Two cases needed to be considered since  the derived value could be number or string.
 * @param value
 * @param font
 */
var isUpDataValue = function (value) {
    if (isNumber(value)) {
        return value >= 0;
    }
    return !!value && !trim(value).startsWith('-');
};
/**
 * Determines whether the data is actually equal to 0 or empty or nil
 * example: "0.00%" => true
 * @param value
 */
var isZeroOrEmptyValue = function (value) {
    return (isNil(value) ||
        value === '' ||
        Number(String(value).replace(/[^0-9.]+/g, '')) === 0);
};
/**
 * Determines whether the data is actually equal to 0 or empty or nil or equals to compareValue
 * example: "0.00%" => true
 * @param value
 * @param compareValue
 */
var isUnchangedValue = function (value, compareValue) {
    return isZeroOrEmptyValue(value) || value === compareValue;
};
/**
 * 根据单元格对齐方式计算文本的 x 坐标
 * @param x 单元格的 x 坐标
 * @param paddingRight
 * @param extraWidth 额外的宽度
 * @param textAlign 文本对齐方式
 */
var calX = function (x, padding, extraWidth, textAlign) {
    if (textAlign === void 0) { textAlign = 'left'; }
    var right = padding.right, left = padding.left;
    var extra = extraWidth || 0;
    if (textAlign === 'left') {
        return x + right / 2 + extra;
    }
    if (textAlign === 'right') {
        return x - right / 2 - extra;
    }
    return x + left / 2 + extra;
};
/**
 * 返回需要绘制的 cell 主题
 * @param cell 目标 cell
 * @returns cell 主题和具体 text 主题
 */
var getDrawStyle = function (cell) {
    var _a, _b;
    var isTotals = cell.getMeta().isTotals;
    var isMeasureField = (_b = (_a = cell).isMeasureField) === null || _b === void 0 ? void 0 : _b.call(_a);
    var cellStyle = cell.getStyle(cell.cellType || CellTypes.DATA_CELL);
    var textStyle;
    if (isMeasureField) {
        textStyle = cellStyle.measureText;
    }
    else if (isTotals) {
        textStyle = cellStyle.bolderText;
    }
    else {
        textStyle = cellStyle.text;
    }
    return {
        cellStyle: cellStyle,
        textStyle: textStyle,
    };
};
/**
 * 获取当前文字的绘制样式
 */
var getCurrentTextStyle = function (_a) {
    var rowIndex = _a.rowIndex, colIndex = _a.colIndex, meta = _a.meta, data = _a.data, textStyle = _a.textStyle, textCondition = _a.textCondition;
    var fill = textStyle.fill;
    if (textCondition === null || textCondition === void 0 ? void 0 : textCondition.mapping) {
        fill = textCondition === null || textCondition === void 0 ? void 0 : textCondition.mapping(data, {
            rowIndex: rowIndex,
            colIndex: colIndex,
            meta: meta,
        }).fill;
    }
    return __assign(__assign({}, textStyle), { fill: fill });
};
/**
 * 获取自定义空值占位符
 */
var getEmptyPlaceholder = function (meta, placeHolder) {
    return isFunction(placeHolder) ? placeHolder(meta) : placeHolder;
};
/**
 * @desc 获取多指标情况下每一个指标的内容包围盒
 * --------------------------------------------
 * |  text icon  |  text icon  |  text icon  |
 * |-------------|-------------|-------------|
 * |  text icon  |  text icon  |  text icon  |
 * --------------------------------------------
 * @param box SimpleBBox 整体绘制内容包围盒
 * @param texts  SimpleDataItem[][] 指标集合
 * @param widthPercent number[] 每行指标的宽度百分比
 */
var getContentAreaForMultiData = function (box, textValues, widthPercent) {
    var x = box.x, y = box.y, width = box.width, height = box.height;
    var avgHeight = height / size(textValues);
    var boxes = [];
    var curX;
    var curY;
    var avgWidth;
    var totalWidth = 0;
    var percents = map(widthPercent, function (item) { return (item > 1 ? item / 100 : item); });
    for (var i = 0; i < size(textValues); i++) {
        curY = y + avgHeight * i;
        var rows = [];
        curX = x;
        totalWidth = 0;
        for (var j = 0; j < size(textValues[i]); j++) {
            avgWidth = !isEmpty(percents)
                ? width * percents[j]
                : width / size(textValues[0]); // 指标个数相同，任取其一即可
            curX = calX(x, { left: 0, right: 0 }, totalWidth, 'left');
            totalWidth += avgWidth;
            rows.push({
                x: curX,
                y: curY,
                width: avgWidth,
                height: avgHeight,
            });
        }
        boxes.push(rows);
    }
    return boxes;
};
/**
 * @desc draw text shape of object
 * @param cell
 * @multiData 自定义文本内容
 * @useCondition 是否使用条件格式
 */
var drawObjectText = function (cell, multiData, useCondition) {
    var _a, _b, _c, _d;
    if (useCondition === void 0) { useCondition = true; }
    var _e = cell.getContentArea(), x = _e.x, y = _e.y, totalTextHeight = _e.height, totalTextWidth = _e.width;
    var text = multiData || cell.getMeta().fieldValue;
    var textValues = text.values;
    var _f = cell.getMeta().spreadsheet, options = _f.options, measureTextWidth = _f.measureTextWidth;
    var valuesCfg = options.style.cellCfg.valuesCfg;
    // 趋势分析表默认只作用一个条件（因为指标挂行头，每列都不一样，直接在回调里判断是否需要染色即可）
    var textCondition = (_b = (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.text) === null || _b === void 0 ? void 0 : _b[0];
    var iconCondition = (_d = (_c = options === null || options === void 0 ? void 0 : options.conditions) === null || _c === void 0 ? void 0 : _c.icon) === null || _d === void 0 ? void 0 : _d[0];
    if (!isArray$1(textValues)) {
        renderMiniChart(cell, textValues);
        return;
    }
    var widthPercent = valuesCfg === null || valuesCfg === void 0 ? void 0 : valuesCfg.widthPercent;
    var labelHeight = 0;
    // 绘制单元格主标题
    if (text === null || text === void 0 ? void 0 : text.label) {
        var dataCellStyle = cell.getStyle(CellTypes.DATA_CELL);
        var labelStyle = dataCellStyle.bolderText;
        // TODO 把padding计算在内
        // const { padding } = dataCellStyle.cell;
        labelHeight = totalTextHeight / (textValues.length + 1);
        var textShape = renderText(cell, [], x, y + labelHeight / 2, getEllipsisText({
            measureTextWidth: measureTextWidth,
            text: text.label,
            maxWidth: totalTextWidth,
            fontParam: labelStyle,
        }), labelStyle);
        cell.addTextShape(textShape);
    }
    // 绘制指标
    var _g = getDrawStyle(cell), cellStyle = _g.cellStyle, textStyle = _g.textStyle;
    var iconStyle = cellStyle === null || cellStyle === void 0 ? void 0 : cellStyle.icon;
    var iconCfg = iconCondition &&
        iconCondition.mapping && {
        size: iconStyle === null || iconStyle === void 0 ? void 0 : iconStyle.size,
        margin: iconStyle === null || iconStyle === void 0 ? void 0 : iconStyle.margin,
        position: iconCondition === null || iconCondition === void 0 ? void 0 : iconCondition.position,
    };
    var curText;
    var contentBoxes = getContentAreaForMultiData({
        x: x,
        y: y + labelHeight,
        height: totalTextHeight - labelHeight,
        width: totalTextWidth,
    }, textValues, widthPercent);
    for (var i = 0; i < textValues.length; i++) {
        var measures = clone$1(textValues[i]);
        for (var j = 0; j < measures.length; j++) {
            curText = measures[j];
            var curStyle = useCondition
                ? getCurrentTextStyle({
                    rowIndex: i,
                    colIndex: j,
                    meta: cell === null || cell === void 0 ? void 0 : cell.getMeta(),
                    data: curText,
                    textStyle: textStyle,
                    textCondition: textCondition,
                })
                : textStyle;
            var placeholder = (cell === null || cell === void 0 ? void 0 : cell.getMeta().spreadsheet.options).placeholder;
            var emptyPlaceholder = getEmptyPlaceholder(cell === null || cell === void 0 ? void 0 : cell.getMeta(), placeholder);
            var maxTextWidth = getMaxTextWidth(contentBoxes[i][j].width, iconStyle);
            var ellipsisText = getEllipsisText({
                measureTextWidth: measureTextWidth,
                text: curText,
                maxWidth: maxTextWidth,
                fontParam: curStyle,
                placeholder: emptyPlaceholder,
            });
            var actualTextWidth = measureTextWidth(ellipsisText, textStyle);
            var position = getTextAndFollowingIconPosition(contentBoxes[i][j], textStyle, actualTextWidth, iconCfg, iconCondition ? 1 : 0);
            var textShape = renderText(cell, [], position.text.x, position.text.y, ellipsisText, curStyle, {}, curText === null || curText === void 0 ? void 0 : curText.toString());
            cell.addTextShape(textShape);
            // 绘制条件格式的 icon
            if (iconCondition && useCondition) {
                var attrs = iconCondition === null || iconCondition === void 0 ? void 0 : iconCondition.mapping(curText, {
                    rowIndex: i,
                    colIndex: j,
                    meta: cell === null || cell === void 0 ? void 0 : cell.getMeta(),
                });
                if (attrs) {
                    var iconShape = renderIcon(cell, __assign(__assign({}, position.icon), { name: attrs.icon, width: iconStyle === null || iconStyle === void 0 ? void 0 : iconStyle.size, height: iconStyle === null || iconStyle === void 0 ? void 0 : iconStyle.size, fill: attrs.fill }));
                    cell.addConditionIconShape(iconShape);
                }
            }
        }
    }
};
/**
 * 根据 cellCfg 配置获取当前单元格宽度
 */
var getCellWidth = function (cellCfg, labelSize) {
    if (labelSize === void 0) { labelSize = 1; }
    return (cellCfg === null || cellCfg === void 0 ? void 0 : cellCfg.width) * labelSize;
};
var safeJsonParse = function (val) {
    try {
        return JSON.parse(val);
    }
    catch (err) {
        return null;
    }
};

var getListBySorted = function (list, sorted, mapValue) {
    return list.sort(function (a, b) {
        if (mapValue) {
            a = mapValue(a);
            b = mapValue(b);
        }
        var ia = sorted.indexOf(a);
        var ib = sorted.indexOf(b);
        if (ia === -1 && ib === -1) {
            return 0;
        }
        if (ia === -1) {
            return 1;
        }
        if (ib === -1) {
            return -1;
        }
        return ia - ib;
    });
};
var filterOutDetail = function (values) {
    if (values === void 0) { values = []; }
    return values.filter(function (v) { return v !== TOTAL_VALUE && v !== EMPTY_EXTRA_FIELD_PLACEHOLDER; });
};
var customFlattenDeep = function (data) {
    if (!isArray$1(data)) {
        return [data];
    }
    return flattenDeep(data);
};
/**
 * arr1包含arr2，将arr2排到最后
 *
 */
var sortByItems = function (arr1, arr2) {
    var _a;
    return (_a = arr1 === null || arr1 === void 0 ? void 0 : arr1.filter(function (item) { return !(arr2 === null || arr2 === void 0 ? void 0 : arr2.includes(item)); })) === null || _a === void 0 ? void 0 : _a.concat(arr2);
};
function getAggregationAndCalcFuncByQuery(totalsStatus, totalsOptions) {
    var isRowTotal = totalsStatus.isRowTotal, isRowSubTotal = totalsStatus.isRowSubTotal, isColTotal = totalsStatus.isColTotal, isColSubTotal = totalsStatus.isColSubTotal;
    var _a = totalsOptions || {}, row = _a.row, col = _a.col;
    var _b = row || {}, _c = _b.calcTotals, rowCalcTotals = _c === void 0 ? {} : _c, _d = _b.calcSubTotals, rowCalcSubTotals = _d === void 0 ? {} : _d;
    var _e = col || {}, _f = _e.calcTotals, colCalcTotals = _f === void 0 ? {} : _f, _g = _e.calcSubTotals, colCalcSubTotals = _g === void 0 ? {} : _g;
    var getCalcTotals = function (dimensionTotals, totalType) {
        if ((dimensionTotals.aggregation || dimensionTotals.calcFunc) &&
            totalType) {
            return {
                aggregation: dimensionTotals.aggregation,
                calcFunc: dimensionTotals.calcFunc,
            };
        }
    };
    // 优先级: 列总计/小计 > 行总计/小计
    return (getCalcTotals(colCalcTotals, isColTotal) ||
        getCalcTotals(colCalcSubTotals, isColSubTotal) ||
        getCalcTotals(rowCalcTotals, isRowTotal) ||
        getCalcTotals(rowCalcSubTotals, isRowSubTotal));
}

function isMultiValue(pathValue) {
    return pathValue === MULTI_VALUE;
}
/**
 * Transform from origin single data to correct dimension values
 * data: {
 *  price: 16,
 *  province: '辽宁省',
 *  city: '芜湖市',
 *  category: '家具',
 *  subCategory: '椅子',
 * }
 * dimensions: [province, city]
 * return [辽宁省, 芜湖市]
 *
 * @param record
 * @param dimensions
 */
function transformDimensionsValues(record, dimensions, placeholder) {
    if (record === void 0) { record = {}; }
    if (dimensions === void 0) { dimensions = []; }
    if (placeholder === void 0) { placeholder = TOTAL_VALUE; }
    return dimensions.reduce(function (res, dimension) {
        var value = record[dimension];
        if (!(dimension in record)) {
            res.push(placeholder);
        }
        else {
            res.push(String(value));
        }
        return res;
    }, []);
}
function getExistValues(data, values) {
    var result = values.filter(function (v) { return v in data; });
    if (isEmpty(result)) {
        result.push(EMPTY_EXTRA_FIELD_PLACEHOLDER);
    }
    return result;
}
function transformDimensionsValuesWithExtraFields(record, dimensions, values) {
    if (record === void 0) { record = {}; }
    if (dimensions === void 0) { dimensions = []; }
    var result = [];
    function transform(data, fields, valueField) {
        return fields.reduce(function (res, dimension) {
            var value = data[dimension];
            if (!(dimension in data)) {
                if (dimension === EXTRA_FIELD && valueField) {
                    res.push(valueField);
                }
                else {
                    res.push(TOTAL_VALUE);
                }
            }
            else {
                res.push(String(value));
            }
            return res;
        }, []);
    }
    if (values) {
        values.forEach(function (value) {
            result.push(transform(record, dimensions, value));
        });
    }
    else {
        result.push(transform(record, dimensions));
    }
    return result;
}
/**
 * Get dimensions with parent path
 * field: 'category'
 * defaultDimensions: ['province', 'city', 'category', 'subCategory']
 * dimensions: [
 *  {
 *   province: '辽宁省',
 *   city: '芜湖市',
 *   category: '家具',
 *   subCategory: '椅子',
 *   price: ''
 *  },
 * ]
 * return ['辽宁省[&]芜湖市[&]家具']
 *
 * @param field
 * @param defaultDimensions
 * @param dimensions
 */
function getDimensionsWithParentPath(field, defaultDimensions, dimensions) {
    var _a;
    var measure = defaultDimensions.slice(0, defaultDimensions.indexOf(field) + 1);
    return (_a = dimensions
        .map(function (item) { return measure.map(function (i) { return item[i]; }).join("".concat(ID_SEPARATOR)); })) === null || _a === void 0 ? void 0 : _a.filter(function (item) { return item; });
}
function getDataPathPrefix(rowFields, colFields) {
    return rowFields
        .concat(colFields)
        .filter(function (i) { return i !== EXTRA_FIELD; })
        .join(ID_SEPARATOR);
}
/**
 * Transform a single data to path
 * {
 * $$VALUE$$: 15
 * $$EXTRA$$: 'price'
 * "price": 15,
 * "province": "辽宁省",
 * "city": "达州市",
 * "category": "家具",
 * "subCategory": "椅子"
 * }
 * rows: [province, city]
 * columns: [category, subCategory, $$EXTRA$$]
 *
 * rowDimensionValues = [辽宁省, 达州市]
 * colDimensionValues = [家具, 椅子, price]
 *
 * @param params
 */
function getDataPath(params) {
    var rowDimensionValues = params.rowDimensionValues, colDimensionValues = params.colDimensionValues, isFirstCreate = params.isFirstCreate, onFirstCreate = params.onFirstCreate, rowFields = params.rowFields, colFields = params.colFields, rowPivotMeta = params.rowPivotMeta, colPivotMeta = params.colPivotMeta, _a = params.prefix, prefix = _a === void 0 ? '' : _a;
    // 根据行、列维度值生成对应的 path 路径，始终将总计小计置于第 0 位，明细数据从第 1 位开始，有两个情况：
    // 如果是汇总格子: path = [0, 0, 0, 0] path 中会存在 0 的值
    // 如果是明细格子: path = [1, 1, 1] 数字均不为 0
    var getPath = function (dimensions, dimensionValues, pivotMeta, careRepeated) {
        var currentMeta = pivotMeta;
        var path = [];
        for (var i = 0; i < dimensionValues.length; i++) {
            var value = dimensionValues[i];
            if (isFirstCreate && currentMeta && !(currentMeta === null || currentMeta === void 0 ? void 0 : currentMeta.has(value))) {
                var currentDimensions = dimensionValues
                    .slice(0, i + 1)
                    .map(function (it) { return String(it); });
                var id = currentDimensions.join(ID_SEPARATOR);
                var isTotal = value === TOTAL_VALUE;
                var level = void 0;
                if (isTotal) {
                    level = 0;
                }
                else if (currentMeta.has(TOTAL_VALUE)) {
                    level = currentMeta.size;
                }
                else {
                    level = currentMeta.size + 1;
                }
                currentMeta.set(value, {
                    id: id,
                    dimensions: currentDimensions,
                    value: value,
                    level: level,
                    children: new Map(),
                });
                onFirstCreate === null || onFirstCreate === void 0 ? void 0 : onFirstCreate({
                    dimension: dimensions === null || dimensions === void 0 ? void 0 : dimensions[i],
                    dimensionPath: id,
                    careRepeated: careRepeated,
                });
            }
            var meta = currentMeta === null || currentMeta === void 0 ? void 0 : currentMeta.get(value);
            path.push(isMultiValue(value) ? value : meta === null || meta === void 0 ? void 0 : meta.level);
            if (meta) {
                var childDimension = dimensions === null || dimensions === void 0 ? void 0 : dimensions[i + 1];
                if (isFirstCreate && meta.childField !== childDimension) {
                    // mark the child field
                    // NOTE: should take more care when reset meta.childField to undefined, the meta info is shared with brother nodes.
                    meta.childField = childDimension;
                }
                currentMeta = meta === null || meta === void 0 ? void 0 : meta.children;
            }
        }
        return path;
    };
    var rowPath = getPath(rowFields, rowDimensionValues, rowPivotMeta, false);
    var colPath = getPath(colFields, colDimensionValues, colPivotMeta, true);
    return __spreadArray$1(__spreadArray$1([prefix], __read(rowPath), false), __read(colPath), false);
}
/**
 * 转换原始数据为二维数组数据
 */
function transformIndexesData(params) {
    var rows = params.rows, columns = params.columns, values = params.values, valueInCols = params.valueInCols, _a = params.data, data = _a === void 0 ? [] : _a, _b = params.indexesData, indexesData = _b === void 0 ? {} : _b, sortedDimensionValues = params.sortedDimensionValues, rowPivotMeta = params.rowPivotMeta, colPivotMeta = params.colPivotMeta, getExistValuesByDataItem = params.getExistValuesByDataItem;
    var paths = [];
    /**
     * 记录行头、列头重复的字段
     */
    var repeatedDimensionSet = new Set(intersection$1(rows, columns));
    /**
     * 在 PivotMap 创建新节点时，填充 sortedDimensionValues 维度数据
     */
    var onFirstCreate = function (_a) {
        var dimension = _a.dimension, dimensionPath = _a.dimensionPath, _b = _a.careRepeated, careRepeated = _b === void 0 ? true : _b;
        if (careRepeated && repeatedDimensionSet.has(dimension)) {
            // 当行、列都配置了同一维度字段时，因为 getDataPath 先处理行、再处理列
            // 所有重复字段的维度值无需再加入到 sortedDimensionValues
            return;
        }
        (sortedDimensionValues[dimension] ||
            (sortedDimensionValues[dimension] = [])).push(dimensionPath);
    };
    var prefix = getDataPathPrefix(rows, columns);
    data.forEach(function (item) {
        var e_1, _a, e_2, _b;
        // 空数据没有意义，直接跳过
        if (!item || isEmpty(item)) {
            return;
        }
        var existValues = getExistValuesByDataItem
            ? getExistValuesByDataItem(item, values)
            : getExistValues(item, values);
        var multiRowDimensionValues = transformDimensionsValuesWithExtraFields(item, rows, valueInCols ? null : existValues);
        var multiColDimensionValues = transformDimensionsValuesWithExtraFields(item, columns, valueInCols ? existValues : null);
        try {
            for (var multiRowDimensionValues_1 = __values(multiRowDimensionValues), multiRowDimensionValues_1_1 = multiRowDimensionValues_1.next(); !multiRowDimensionValues_1_1.done; multiRowDimensionValues_1_1 = multiRowDimensionValues_1.next()) {
                var rowDimensionValues = multiRowDimensionValues_1_1.value;
                try {
                    for (var multiColDimensionValues_1 = (e_2 = void 0, __values(multiColDimensionValues)), multiColDimensionValues_1_1 = multiColDimensionValues_1.next(); !multiColDimensionValues_1_1.done; multiColDimensionValues_1_1 = multiColDimensionValues_1.next()) {
                        var colDimensionValues = multiColDimensionValues_1_1.value;
                        var path = getDataPath({
                            rowDimensionValues: rowDimensionValues,
                            colDimensionValues: colDimensionValues,
                            rowPivotMeta: rowPivotMeta,
                            colPivotMeta: colPivotMeta,
                            rowFields: rows,
                            colFields: columns,
                            isFirstCreate: true,
                            onFirstCreate: onFirstCreate,
                            prefix: prefix,
                        });
                        paths.push(path);
                        set(indexesData, path, item);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (multiColDimensionValues_1_1 && !multiColDimensionValues_1_1.done && (_b = multiColDimensionValues_1.return)) _b.call(multiColDimensionValues_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (multiRowDimensionValues_1_1 && !multiRowDimensionValues_1_1.done && (_a = multiRowDimensionValues_1.return)) _a.call(multiRowDimensionValues_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    return {
        paths: paths,
        indexesData: indexesData,
        rowPivotMeta: rowPivotMeta,
        colPivotMeta: colPivotMeta,
        sortedDimensionValues: sortedDimensionValues,
    };
}
function deleteMetaById(meta, nodeId) {
    if (!meta || !nodeId) {
        return;
    }
    var paths = nodeId.split(ID_SEPARATOR);
    var deletePath = last(paths);
    var currentMeta = meta;
    forEach(paths, function (path, idx) {
        var pathMeta = currentMeta.get(path);
        if (pathMeta) {
            if (path === deletePath) {
                pathMeta.children = new Map();
                pathMeta.childField = undefined;
            }
            else {
                currentMeta = pathMeta.children;
            }
            return true;
        }
        // exit iteration early when pathMeta not exists
        return idx === 0 && path === ROOT_ID;
    });
}
function generateExtraFieldMeta(meta, cornerExtraFieldText, defaultText) {
    var valueFormatter = function (value) {
        var currentMeta = find$1(meta, function (_a) {
            var field = _a.field;
            return field === value;
        });
        return get(currentMeta, 'name', value);
    };
    // 虚拟列字段，为文本分类字段
    var extraFieldName = cornerExtraFieldText || defaultText;
    var extraFieldMeta = {
        field: EXTRA_FIELD,
        name: extraFieldName,
        formatter: function (value) { return valueFormatter(value); },
    };
    return extraFieldMeta;
}
function getHeaderTotalStatus(row, col) {
    return {
        isRowTotal: row.isGrandTotals,
        isRowSubTotal: row.isSubTotals,
        isColTotal: col.isGrandTotals,
        isColSubTotal: col.isSubTotals,
    };
}
/**
 * 检查 getMultiData 时，传入的 query 是否是包含总计、小计分组的场景
 * MULTI_VALUE 后面再出现具体的名字，就表明是分组场景
 * 以 rows: [province, city] 为例
 * 如果是: [四川, MULTI_VALUE] => 代表获取四川下面的所有 city
 * 如果是: [MULTI_VALUE, 成都] => 这种结果就是所有成都的小计分组
 *    每个 province 下面的 city 都不一样的
 *    就算换成 [province, sex] => [MULTI_VALUE, 女] 这样的形式，去获取所有 province 下的女性，但是每个 province 下的女性的 index 也可能不同
 *    需要将其拓展成多个结构 =>  [MULTI_VALUE, 女] => [[四川，女], [北京，女], ....] => [[1,1],[2,1],[3,2]....]
 */
function existDimensionTotalGroup(path) {
    var multiIdx = null;
    for (var i = 0; i < path.length; i++) {
        var element = path[i];
        if (isMultiValue(element)) {
            multiIdx = i;
        }
        else if (!isNull(multiIdx) && multiIdx < i) {
            return true;
        }
    }
    return false;
}
function getSatisfiedPivotMetaValues(params) {
    var pivotMeta = params.pivotMeta, dimensionValues = params.dimensionValues, fieldIdx = params.fieldIdx, queryType = params.queryType, fields = params.fields, sortedDimensionValues = params.sortedDimensionValues;
    var rootContainer = {
        children: pivotMeta,
    };
    var metaValueList = [rootContainer];
    function flattenMetaValue(list, field) {
        var _a;
        var allValues = flatMap(list, function (metaValue) {
            var values = __spreadArray$1([], __read(metaValue.children.values()), false);
            return values.filter(function (v) {
                return v.value !== EMPTY_EXTRA_FIELD_PLACEHOLDER &&
                    (queryType === QueryDataType.All ? true : v.value !== TOTAL_VALUE);
            });
        });
        if (list.length > 1) {
            // 从不同父维度中获取的子维度需要再排一次，比如province => city 按照字母倒序，那么在获取了所有 province 的 city 后需要再排一次
            var sortedDimensionValue_1 = (_a = sortedDimensionValues[field]) !== null && _a !== void 0 ? _a : [];
            return sortBy$1(allValues, function (item) {
                return indexOf(sortedDimensionValue_1, item.id);
            });
        }
        return allValues;
    }
    var _loop_1 = function (i) {
        var dimensionValue = dimensionValues[i];
        var field = fields[i];
        if (isMultiValue(dimensionValue)) {
            metaValueList = flattenMetaValue(metaValueList, field);
        }
        else {
            metaValueList = metaValueList
                .map(function (v) { return v.children.get(dimensionValue); })
                .filter(Boolean);
        }
    };
    for (var i = 0; i <= fieldIdx; i++) {
        _loop_1(i);
    }
    return metaValueList;
}
function flattenDimensionValues(params) {
    var dimensionValues = params.dimensionValues, pivotMeta = params.pivotMeta, fields = params.fields, sortedDimensionValues = params.sortedDimensionValues, _a = params.queryType, queryType = _a === void 0 ? QueryDataType.All : _a;
    if (!existDimensionTotalGroup(dimensionValues)) {
        return [dimensionValues];
    }
    var metaValues = getSatisfiedPivotMetaValues({
        pivotMeta: pivotMeta,
        dimensionValues: dimensionValues,
        fieldIdx: dimensionValues.length - 1,
        queryType: queryType,
        fields: fields,
        sortedDimensionValues: sortedDimensionValues,
    });
    return metaValues.map(function (v) { return v.dimensions; });
}
function getFlattenDimensionValues(params) {
    var rowFields = params.rowFields, rowDimensionValues = params.rowDimensionValues, rowPivotMeta = params.rowPivotMeta, colFields = params.colFields, colDimensionValues = params.colDimensionValues, colPivotMeta = params.colPivotMeta, queryType = params.queryType, sortedDimensionValues = params.sortedDimensionValues;
    var rowQueries = flattenDimensionValues({
        dimensionValues: rowDimensionValues,
        pivotMeta: rowPivotMeta,
        fields: rowFields,
        sortedDimensionValues: sortedDimensionValues,
        queryType: queryType,
    });
    var colQueries = flattenDimensionValues({
        dimensionValues: colDimensionValues,
        pivotMeta: colPivotMeta,
        fields: colFields,
        sortedDimensionValues: sortedDimensionValues,
        queryType: queryType,
    });
    return {
        rowQueries: rowQueries,
        colQueries: colQueries,
    };
}
function flattenIndexesData(data, queryType) {
    if (!data) {
        return [];
    }
    if (!isArray$1(data)) {
        return compact([data]);
    }
    return flatMap(data, function (dimensionData) {
        if (!isArray$1(dimensionData)) {
            return compact([dimensionData]);
        }
        // 数组的第 0 项是总计/小计专位，从第 1 项开始是明细数据
        var startIdx = queryType === QueryDataType.DetailOnly ? 1 : 0;
        return compact(dimensionData.slice(startIdx));
    });
}

var _a$1;
function keyEqualTo(key, compareKey) {
    if (!key || !compareKey) {
        return false;
    }
    return String(key).toLowerCase() === String(compareKey).toLowerCase();
}
var newLine = '\r\n';
var newTab = '\t';
var getColNodeField = function (spreadsheet, id) {
    var colNode = spreadsheet.getColumnNodes().find(function (col) { return col.id === id; });
    if (spreadsheet.isPivotMode()) {
        return colNode === null || colNode === void 0 ? void 0 : colNode.value;
    }
    return colNode === null || colNode === void 0 ? void 0 : colNode.field;
};
var getFiledIdFromMeta = function (colIndex, spreadsheet) {
    var colNode = spreadsheet
        .getColumnNodes()
        .find(function (col) { return col.colIndex === colIndex; });
    return getColNodeField(spreadsheet, colNode.id);
};
var getHeaderNodeFromMeta = function (meta, spreadsheet) {
    var rowIndex = meta.rowIndex, colIndex = meta.colIndex;
    return [
        spreadsheet.getRowNodes().find(function (row) { return row.rowIndex === rowIndex; }),
        spreadsheet.getColumnNodes().find(function (col) { return col.colIndex === colIndex; }),
    ];
};
var getFormat = function (colIndex, spreadsheet) {
    var colNode = spreadsheet
        .getColumnNodes()
        .find(function (col) { return col.colIndex === colIndex; });
    var fieldId = getColNodeField(spreadsheet, colNode.id);
    if (spreadsheet.options.interaction.copyWithFormat) {
        return spreadsheet.dataSet.getFieldFormatter(fieldId);
    }
    return function (v) { return v; };
};
/**
 * 兼容 hideMeasureColumn 方案：hideMeasureColumn 的隐藏实现是通过截取掉度量(measure)数据，但是又只截取了 Node 中的，像 pivotMeta 中的又是完整的。导致复制时，无法通过 Node 找出正确路径。
 * https://github.com/antvis/S2/issues/1955
 * @param spreadsheet
 */
var compatibleHideMeasureColumn = function (spreadsheet) {
    var _a;
    var _b, _c, _d;
    var isHideMeasureColumn = ((_d = (_c = (_b = spreadsheet.options) === null || _b === void 0 ? void 0 : _b.style) === null || _c === void 0 ? void 0 : _c.colCfg) === null || _d === void 0 ? void 0 : _d.hideMeasureColumn) &&
        spreadsheet.isValueInCols();
    // 被 hideMeasureColumn 隐藏的 度量(measure) 值，手动添加上。
    return isHideMeasureColumn
        ? (_a = {},
            _a[EXTRA_FIELD] = spreadsheet.dataCfg.fields.values[0],
            _a) : {};
};
var getValueFromMeta = function (meta, displayData, spreadsheet) {
    var _a, _b;
    if (spreadsheet.isPivotMode()) {
        var _c = __read(getHeaderNodeFromMeta(meta, spreadsheet), 2), rowNode = _c[0], colNode = _c[1];
        var measureQuery = compatibleHideMeasureColumn(spreadsheet);
        var cell = spreadsheet.dataSet.getCellData({
            query: __assign(__assign(__assign({}, rowNode.query), colNode.query), measureQuery),
            rowNode: rowNode,
            isTotals: rowNode.isTotals ||
                rowNode.isTotalMeasure ||
                colNode.isTotals ||
                colNode.isTotalMeasure,
            totalStatus: getHeaderTotalStatus(rowNode, colNode),
        });
        return (_a = cell === null || cell === void 0 ? void 0 : cell[VALUE_FIELD]) !== null && _a !== void 0 ? _a : '';
    }
    var fieldId = getFiledIdFromMeta(meta.colIndex, spreadsheet);
    return (_b = displayData[meta.rowIndex]) === null || _b === void 0 ? void 0 : _b[fieldId];
};
var format = function (meta, displayData, spreadsheet) {
    var formatter = getFormat(meta.colIndex, spreadsheet);
    return formatter(getValueFromMeta(meta, displayData, spreadsheet));
};
var convertString = function (v) {
    if (/\n/.test(v)) {
        // 单元格内换行 替换双引号 防止内容存在双引号 导致内容换行出错
        return '"' + v.replace(/\r\n?/g, '\n') + '"';
    }
    return v;
};
/**
 * 根据 id 计算出行头或者列头展示的文本数组
 * 将 id : root[&]家具[&]桌子[&]price"
 * startLevel 不传, 转换为 List: ['家具', '桌子', 'price']
 * startLevel = 1, 转换为 List: ['家具', '桌子', 'price']
 * @param headerId
 * @param startLevel 层级
 */
var getHeaderMeasureFields = function (headerId, startLevel) {
    var headerList = headerId.split(ID_SEPARATOR);
    if (startLevel) {
        return headerList.slice(headerList.length - startLevel);
    }
    headerList.shift(); // 去除 root
    return headerList;
};
var getHeaderMeasureFieldNames = function (fields, spreadsheet) {
    return map(fields, function (field) {
        return spreadsheet.dataSet.getFieldName(field);
    });
};
var CopyMIMEType;
(function (CopyMIMEType) {
    CopyMIMEType["PLAIN"] = "text/plain";
    CopyMIMEType["HTML"] = "text/html";
})(CopyMIMEType || (CopyMIMEType = {}));
// 把 string[][] 矩阵转换成 CopyableItem
var matrixPlainTextTransformer = function (dataMatrix) {
    return {
        type: CopyMIMEType.PLAIN,
        content: map(dataMatrix, function (line) { return line.join(newTab); }).join(newLine),
    };
};
// 把 string[][] 矩阵转换成 CopyableItem
var matrixHtmlTransformer = function (dataMatrix) {
    function createTableData(data, tagName) {
        return data
            .map(function (cell) { return "<".concat(tagName, ">").concat(escape(cell), "</").concat(tagName, ">"); })
            .join('');
    }
    function createBody(data, tagName) {
        return data
            .map(function (row) { return "<".concat(tagName, ">").concat(createTableData(row, 'td'), "</").concat(tagName, ">"); })
            .join('');
    }
    return {
        type: CopyMIMEType.HTML,
        content: "<meta charset=\"utf-8\"><table><tbody>".concat(createBody(dataMatrix, 'tr'), "</tbody></table>"),
    };
};
var transformers = (_a$1 = {},
    _a$1[CopyMIMEType.PLAIN] = matrixPlainTextTransformer,
    _a$1[CopyMIMEType.HTML] = matrixHtmlTransformer,
    _a$1);
function registerTransformer(type, transformer) {
    transformers[type] = transformer;
}
function getTransformer(type) {
    return transformers[type];
}
function pickDataFromCopyable(copyable, type) {
    if (type === void 0) { type = CopyMIMEType.PLAIN; }
    if (Array.isArray(type)) {
        return [].concat(copyable)
            .filter(function (item) { return type.includes(item.type); })
            .map(function (item) { return item.content; });
    }
    return ([].concat(copyable)
        .filter(function (item) { return (item === null || item === void 0 ? void 0 : item.type) === type; })
        .map(function (item) { return item.content; })[0] || '');
}
// 生成矩阵：https://gw.alipayobjects.com/zos/antfincdn/bxBVt0nXx/a182c1d4-81bf-469f-b868-8b2e29acfc5f.png
var assembleMatrix = function (rowMatrix, colMatrix, dataMatrix) {
    var _a, _b, _c, _d, _e, _f;
    var rowWidth = (_b = (_a = rowMatrix[0]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
    var colHeight = (_c = colMatrix === null || colMatrix === void 0 ? void 0 : colMatrix.length) !== null && _c !== void 0 ? _c : 0;
    var dataWidth = (_e = (_d = dataMatrix[0]) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0;
    var dataHeight = (_f = dataMatrix.length) !== null && _f !== void 0 ? _f : 0;
    var matrixWidth = rowWidth + dataWidth;
    var matrixHeight = colHeight + dataHeight;
    var matrix = Array.from(Array(matrixHeight), function () { return new Array(matrixWidth); });
    matrix = map(matrix, function (heightArr, y) {
        return map(heightArr, function (w, x) {
            if (x >= 0 && x < rowWidth && y >= 0 && y < colHeight) {
                return '';
            }
            if (x >= rowWidth && x <= matrixWidth && y >= 0 && y < colHeight) {
                return colMatrix[y][x - rowWidth];
            }
            if (x >= 0 && x < rowWidth && y >= colHeight && y < matrixHeight) {
                return rowMatrix[y - colHeight][x];
            }
            if (x >= rowWidth &&
                x <= matrixWidth &&
                y >= colHeight &&
                y < matrixHeight) {
                return dataMatrix[y - colHeight][x - rowWidth];
            }
            return undefined;
        });
    });
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
};
var processCopyData = function (displayData, cells, spreadsheet) {
    var matrix = cells.map(function (cols) {
        return cols.map(function (item) {
            if (!item) {
                return '';
            }
            return convertString(format(item, displayData, spreadsheet));
        });
    });
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
};
/**
 * 返回选中数据单元格生成的二维数组（ CellMeta[][]）
 * @param { CellMeta[] } cells
 * @return { CellMeta[][] }
 */
var getSelectedCellsMeta = function (cells) {
    if (!(cells === null || cells === void 0 ? void 0 : cells.length)) {
        return [];
    }
    var _a = __read([
        { row: Infinity, col: Infinity },
        { row: 0, col: 0 },
    ], 2), minCell = _a[0], maxCell = _a[1];
    // get left-top cell and right-bottom cell position
    cells.forEach(function (e) {
        var rowIndex = e.rowIndex, colIndex = e.colIndex;
        minCell.col = Math.min(colIndex, minCell.col);
        minCell.row = Math.min(rowIndex, minCell.row);
        maxCell.col = Math.max(colIndex, maxCell.col);
        maxCell.row = Math.max(rowIndex, maxCell.row);
    });
    var _b = __read([
        maxCell.row - minCell.row + 1,
        maxCell.col - minCell.col + 1,
    ], 2), rowLen = _b[0], colLen = _b[1];
    var twoDimDataArray = new Array(rowLen)
        .fill('')
        .map(function () { return new Array(colLen).fill(''); });
    cells.forEach(function (e) {
        var rowIndex = e.rowIndex, colIndex = e.colIndex;
        var _a = __read([rowIndex - minCell.row, colIndex - minCell.col], 2), diffRow = _a[0], diffCol = _a[1];
        twoDimDataArray[diffRow][diffCol] = e;
    });
    return twoDimDataArray;
};
var processTableColSelected = function (spreadsheet, selectedCols) {
    var displayData = spreadsheet.dataSet.getDisplayDataSet();
    var selectedFields = selectedCols.length
        ? selectedCols.map(function (e) { return ({
            field: getColNodeField(spreadsheet, e.id),
            formatter: getFormat(e.colIndex, spreadsheet),
        }); })
        : spreadsheet.dataCfg.fields.columns
            .map(function (cName) {
            return spreadsheet.getColumnNodes().find(function (n) { return n.field === cName; });
        })
            .map(function (node) { return ({
            field: getColNodeField(spreadsheet, node.id),
            formatter: getFormat(node.colIndex, spreadsheet),
        }); });
    var matrix = displayData.map(function (row) {
        return selectedFields.map(function (_a) {
            var field = _a.field, formatter = _a.formatter;
            return convertString(formatter(row[field]));
        });
    });
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
};
var getDataMatrix = function (leafRowNodes, leafColNodes, spreadsheet) {
    return map(leafRowNodes, function (rowNode) {
        return leafColNodes.map(function (colNode) {
            var _a;
            var cellData = spreadsheet.dataSet.getCellData({
                query: __assign(__assign({}, rowNode.query), colNode.query),
                rowNode: rowNode,
                isTotals: rowNode.isTotals ||
                    rowNode.isTotalMeasure ||
                    colNode.isTotals ||
                    colNode.isTotalMeasure,
                totalStatus: getHeaderTotalStatus(rowNode, colNode),
            });
            return getFormat(colNode.colIndex, spreadsheet)((_a = cellData === null || cellData === void 0 ? void 0 : cellData[VALUE_FIELD]) !== null && _a !== void 0 ? _a : '');
        });
    });
};
var getPivotWithoutHeaderCopyData = function (spreadsheet, leafRows, leafCols) {
    var matrix = getDataMatrix(leafRows, leafCols, spreadsheet);
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
};
var getPivotWithHeaderCopyData = function (spreadsheet, leafRowNodes, leafColNodes) {
    var rowMatrix = map(leafRowNodes, function (node) {
        return getHeaderMeasureFields(node.id);
    });
    var colMatrix = zip$1.apply(void 0, __spreadArray$1([], __read(map(leafColNodes, function (node) { return getHeaderMeasureFields(node.id); })), false));
    var dataMatrix = getDataMatrix(leafRowNodes, leafColNodes, spreadsheet);
    return assembleMatrix(rowMatrix, colMatrix, dataMatrix);
};
function getPivotCopyData(spreadsheet, allRowLeafNodes, colNodes) {
    var copyWithHeader = spreadsheet.options.interaction.copyWithHeader;
    return copyWithHeader
        ? getPivotWithHeaderCopyData(spreadsheet, allRowLeafNodes, colNodes)
        : getPivotWithoutHeaderCopyData(spreadsheet, allRowLeafNodes, colNodes);
}
var processPivotColSelected = function (spreadsheet, selectedCols) {
    var allRowLeafNodes = spreadsheet
        .getRowNodes()
        .filter(function (node) { return node.isLeaf || spreadsheet.isHierarchyTreeType(); });
    var allColLeafNodes = spreadsheet
        .getColumnNodes()
        .filter(function (node) { return node.isLeaf; });
    var colNodes = selectedCols.length
        ? selectedCols.reduce(function (arr, e) {
            arr.push.apply(arr, __spreadArray$1([], __read(allColLeafNodes.filter(function (node) { return node.id.startsWith(e.id); })), false));
            return arr;
        }, [])
        : allColLeafNodes;
    return getPivotCopyData(spreadsheet, allRowLeafNodes, colNodes);
};
var processColSelected = function (displayData, spreadsheet, selectedCols) {
    if (spreadsheet.isPivotMode()) {
        return processPivotColSelected(spreadsheet, selectedCols);
    }
    return processTableColSelected(spreadsheet, selectedCols);
};
var processTableRowSelected = function (spreadsheet, selectedRows) {
    var displayData = spreadsheet.dataSet.getDisplayDataSet();
    var matrix = displayData
        .filter(function (_, i) { return selectedRows.map(function (row) { return row.rowIndex; }).includes(i); })
        .map(function (entry) {
        // 确保顺序和表格中的列顺序一致
        var idxMap = spreadsheet.getColumnNodes().reduce(function (prev, curr, idx) {
            prev[curr.field] = idx;
            return prev;
        }, {});
        return Object.keys(entry)
            .sort(function (a, b) { return idxMap[a] - idxMap[b]; })
            .map(function (cName) {
            return spreadsheet.getColumnNodes().find(function (n) { return n.field === cName; });
        })
            .filter(Boolean) // 过滤掉空值，如行头cell
            .map(function (node) {
            return convertString(getFormat(node.colIndex, spreadsheet)(entry[node.field]));
        });
    });
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
};
var processPivotRowSelected = function (spreadsheet, selectedRows) {
    var allRowLeafNodes = spreadsheet
        .getRowNodes()
        .filter(function (node) { return node.isLeaf || spreadsheet.isHierarchyTreeType(); });
    var allColLeafNodes = spreadsheet
        .getColumnNodes()
        .filter(function (node) { return node.isLeaf; });
    var rowNodes = selectedRows.reduce(function (arr, e) {
        arr.push.apply(arr, __spreadArray$1([], __read(allRowLeafNodes.filter(function (node) { return node.id.startsWith(e.id); })), false));
        return arr;
    }, []);
    return getPivotCopyData(spreadsheet, rowNodes, allColLeafNodes);
};
var processRowSelected = function (displayData, spreadsheet, selectedRows) {
    if (spreadsheet.isPivotMode()) {
        return processPivotRowSelected(spreadsheet, selectedRows);
    }
    return processTableRowSelected(spreadsheet, selectedRows);
};
function getCopyData(spreadsheet, copyType, copyFormat) {
    if (copyFormat === void 0) { copyFormat = CopyMIMEType.PLAIN; }
    var displayData = spreadsheet.dataSet.getDisplayDataSet();
    var cells = spreadsheet.interaction.getState().cells || [];
    if (copyType === CopyType.ALL) {
        return pickDataFromCopyable(processColSelected(displayData, spreadsheet, []), copyFormat);
    }
    if (copyType === CopyType.COL) {
        var colIndexes_1 = cells.reduce(function (pre, cur) {
            if (!pre.find(function (item) { return item === cur.colIndex; })) {
                pre.push(cur.colIndex);
            }
            return pre;
        }, []);
        var colNodes = spreadsheet.facet.layoutResult.colLeafNodes
            .filter(function (node) { return colIndexes_1.includes(node.colIndex); })
            .map(function (node) { return ({
            id: node.id,
            colIndex: node.colIndex,
            rowIndex: node.rowIndex,
            type: CellTypes.COL_CELL,
        }); });
        return pickDataFromCopyable(processColSelected(displayData, spreadsheet, colNodes), copyFormat);
    }
    if (copyType === CopyType.ROW) {
        var rowIndexes = cells.reduce(function (pre, cur) {
            if (!pre.find(function (item) { return item === cur.rowIndex; })) {
                pre.push(cur.rowIndex);
            }
            return pre;
        }, []);
        var rowNodes = rowIndexes.map(function (index) {
            return {
                id: index + '-' + spreadsheet.facet.layoutResult.colLeafNodes[0].id,
                colIndex: 0,
                rowIndex: index,
                type: CellTypes.ROW_CELL,
            };
        });
        return pickDataFromCopyable(processRowSelected(displayData, spreadsheet, rowNodes), copyFormat);
    }
}
/**
 * 生成包含行列头的导出数据。查看👇🏻图效果展示，更容易理解代码：
 * https://gw.alipayobjects.com/zos/antfincdn/bxBVt0nXx/a182c1d4-81bf-469f-b868-8b2e29acfc5f.png
 * @param cellMetaMatrix
 * @param displayData
 * @param spreadsheet
 */
var getDataWithHeaderMatrix = function (cellMetaMatrix, displayData, spreadsheet) {
    var colMatrix = zip$1.apply(void 0, __spreadArray$1([], __read(map(cellMetaMatrix[0], function (cellMeta) {
        var _a, _b;
        var colId = (_b = (_a = cellMeta.id.split(EMPTY_PLACEHOLDER)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : '';
        return getHeaderMeasureFieldNames(getHeaderMeasureFields(colId), spreadsheet);
    })), false));
    var rowMatrix = map(cellMetaMatrix, function (cellsMeta) {
        var _a, _b;
        var rowId = (_b = (_a = cellsMeta[0].id.split(EMPTY_PLACEHOLDER)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';
        return getHeaderMeasureFieldNames(getHeaderMeasureFields(rowId), spreadsheet);
    });
    var dataMatrix = map(cellMetaMatrix, function (cellsMeta) {
        return map(cellsMeta, function (meta) { return format(meta, displayData, spreadsheet); });
    });
    return assembleMatrix(rowMatrix, colMatrix, dataMatrix);
};
function getAllLevels(interactedCells) {
    var allLevels = new Set();
    forEach(interactedCells, function (cell) {
        var level = cell.getMeta().level;
        if (allLevels.has(level)) {
            return;
        }
        allLevels.add(level);
    });
    return allLevels;
}
function getLastLevelCells(interactedCells, maxLevel) {
    return filter(interactedCells, function (cell) {
        var meta = cell.getMeta();
        var isLastLevel = meta.level === maxLevel;
        var isLastTotal = meta.isTotals && isEmpty(meta.children);
        return isLastLevel || isLastTotal;
    });
}
/** 处理有合并单元格的复制（小记总计格）
 *  维度1 ｜ 维度2  ｜ 维度3
 *  总计           ｜  维度三
 *  => 总计  总计  维度三
 */
function getTotalCellMatrixId(meta, maxLevel) {
    var nextNode = meta;
    var lastNode = { level: maxLevel };
    var cellId = nextNode.label;
    while (nextNode.level >= 0) {
        var repeatNumber = lastNode.level - nextNode.level;
        while (repeatNumber > 0) {
            cellId = "".concat(nextNode.label).concat(ID_SEPARATOR).concat(cellId);
            repeatNumber--;
        }
        lastNode = nextNode;
        nextNode = nextNode.parent;
    }
    return cellId;
}
function getCellMatrix(lastLevelCells, maxLevel, allLevel) {
    return map(lastLevelCells, function (cell) {
        var meta = cell.getMeta();
        var id = meta.id, isTotals = meta.isTotals, spreadsheet = meta.spreadsheet;
        var cellId = isTotals ? getTotalCellMatrixId(meta, maxLevel) : id;
        // 将指标维度单元格的标签替换为实际文本
        var headerFields = getHeaderMeasureFields(cellId, allLevel.size);
        return getHeaderMeasureFieldNames(headerFields, spreadsheet);
    });
}
function getBrushHeaderCopyable(interactedCells) {
    var _a;
    // 获取圈选的层级有哪些
    var allLevels = getAllLevels(interactedCells);
    var maxLevel = (_a = max$1(Array.from(allLevels))) !== null && _a !== void 0 ? _a : 0;
    // 获取最后一层的 cell
    var lastLevelCells = getLastLevelCells(interactedCells, maxLevel);
    // 拼接选中行列头的内容矩阵
    var isCol = interactedCells[0].cellType === CellTypes.COL_CELL;
    var matrix = getCellMatrix(lastLevelCells, maxLevel, allLevels);
    // 如果是列头，需要转置
    if (isCol) {
        matrix = zip$1.apply(void 0, __spreadArray$1([], __read(matrix), false));
    }
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
}
var tilePivotData = function (data, columnOrdered, defaultDataValue) {
    return map(columnOrdered, function (field) { var _a; return (_a = data[field]) !== null && _a !== void 0 ? _a : defaultDataValue; });
};
var getDataByRowData = function (spreadsheet, rowData) {
    var placeholder = spreadsheet.options.placeholder, _a = spreadsheet.dataCfg.fields, rows = _a.rows, columns = _a.columns, values = _a.values;
    var defaultDataValue = getEmptyPlaceholder(spreadsheet, placeholder);
    var column = spreadsheet.getColumnLeafNodes();
    var matrix = [];
    if (spreadsheet.isTableMode()) {
        var columnWithoutSeriesNumber_1 = filter(column, function (node) { return node.field !== SERIES_NUMBER_FIELD; });
        // 按列头顺序复制
        matrix = map(rowData, function (rowDataItem) {
            return map(columnWithoutSeriesNumber_1, function (node) { var _a; return (_a = rowDataItem === null || rowDataItem === void 0 ? void 0 : rowDataItem[node.field]) !== null && _a !== void 0 ? _a : defaultDataValue; });
        });
    }
    else if (spreadsheet.isPivotMode()) {
        // 透视表的数据加上行头、列头才有意义，这里会以行头、列头、数据值的顺序将每一个单元格构造成一行
        var columnOrdered_1 = __spreadArray$1(__spreadArray$1(__spreadArray$1([], __read(rows), false), __read(columns), false), __read(values), false);
        var rowDataFlatten = customFlattenDeep(rowData);
        // 去掉小计
        var rowDataFlattenWithoutTotal = rowDataFlatten.filter(function (data) {
            return __spreadArray$1(__spreadArray$1([], __read(rows), false), __read(columns), false).every(function (field) { return !isNil(data[field]); });
        });
        matrix = reduce(rowDataFlattenWithoutTotal, function (ret, data) {
            return __spreadArray$1(__spreadArray$1([], __read(ret), false), [tilePivotData(data, columnOrdered_1, defaultDataValue)], false);
        }, []);
    }
    return [
        getTransformer(CopyMIMEType.PLAIN)(matrix),
        getTransformer(CopyMIMEType.HTML)(matrix),
    ];
};
function getDataCellCopyable(spreadsheet, cells) {
    var _a;
    var data;
    var selectedCols = cells.filter(function (_a) {
        var type = _a.type;
        return type === CellTypes.COL_CELL;
    });
    var selectedRows = cells.filter(function (_a) {
        var type = _a.type;
        return type === CellTypes.ROW_CELL;
    });
    var displayData = spreadsheet.dataSet.getDisplayDataSet();
    if (spreadsheet.interaction.getCurrentStateName() ===
        InteractionStateName.ALL_SELECTED) {
        data = processColSelected(displayData, spreadsheet, []);
    }
    else if (selectedCols.length) {
        data = processColSelected(displayData, spreadsheet, selectedCols);
    }
    else if (selectedRows.length) {
        data = processRowSelected(displayData, spreadsheet, selectedRows);
    }
    else {
        if (!cells.length) {
            return;
        }
        // normal selected
        var selectedCellsMeta = getSelectedCellsMeta(cells);
        var currentRow = spreadsheet.interaction.getSelectedCellHighlight().currentRow;
        if (currentRow) {
            var rowData = orderBy(cells, 'rowIndex', 'asc').map(function (cell) {
                return spreadsheet.dataSet.getRowData(cell);
            });
            data = getDataByRowData(spreadsheet, rowData);
        }
        else if ((_a = spreadsheet.options.interaction) === null || _a === void 0 ? void 0 : _a.copyWithHeader) {
            data = getDataWithHeaderMatrix(selectedCellsMeta, displayData, spreadsheet);
        }
        else {
            data = processCopyData(displayData, selectedCellsMeta, spreadsheet);
        }
    }
    return data;
}
var getSelectedData = function (spreadsheet) {
    var _a;
    var interaction = spreadsheet.interaction;
    var cells = interaction.getState().cells || [];
    var data;
    // 通过判断当前存在交互的单元格，来区分圈选行/列头 还是 点选行/列头
    var interactedCells = (_a = interaction.getInteractedCells()) !== null && _a !== void 0 ? _a : [];
    var isBrushHeader = isEmpty(interactedCells)
        ? false
        : every(interactedCells, function (cell) {
            return (cell.cellType === CellTypes.ROW_CELL ||
                cell.cellType === CellTypes.COL_CELL);
        });
    // 行列头圈选复制 和 单元格复制不同
    if (isBrushHeader) {
        data = getBrushHeaderCopyable(interactedCells);
    }
    else {
        data = getDataCellCopyable(spreadsheet, cells);
    }
    if (data) {
        copyToClipboard(data);
    }
    return pickDataFromCopyable(data, CopyMIMEType.PLAIN);
};

function getCsvString(v) {
    if (!v) {
        return v;
    }
    if (typeof v === 'string') {
        var out = v;
        // 需要替换", https://en.wikipedia.org/wiki/Comma-separated_values#Example
        return "\"".concat(out.replace(/"/g, '""'), "\"");
    }
    return "\"".concat(v, "\"");
}

var copyToClipboardByExecCommand = function (data) {
    return new Promise(function (resolve, reject) {
        var content;
        if (Array.isArray(data)) {
            content = get(data.filter(function (item) { return item.type === CopyMIMEType.PLAIN; }), '[0].content', '');
        }
        else {
            content = data.content || '';
        }
        var textarea = document.createElement('textarea');
        textarea.value = content;
        document.body.appendChild(textarea);
        // 开启 preventScroll, 防止页面有滚动条时触发滚动
        textarea.focus({ preventScroll: true });
        textarea.select();
        var success = document.execCommand('copy');
        document.body.removeChild(textarea);
        if (success) {
            resolve();
        }
        else {
            reject();
        }
    });
};
var copyToClipboardByClipboard = function (data) {
    return navigator.clipboard
        .write([
        new ClipboardItem([].concat(data).reduce(function (prev, copyable) {
            var _a;
            var type = copyable.type, content = copyable.content;
            // eslint-disable-next-line no-control-regex
            var contentToCopy = content.replace(/\x00/g, '');
            return __assign(__assign({}, prev), (_a = {}, _a[type] = new Blob([contentToCopy], { type: type }), _a));
        }, {})),
    ])
        .catch(function () {
        return copyToClipboardByExecCommand(data);
    });
};
var copyToClipboard = function (data, sync) {
    if (sync === void 0) { sync = false; }
    var copyableItem;
    if (typeof data === 'string') {
        copyableItem = {
            content: data,
            type: CopyMIMEType.PLAIN,
        };
    }
    else {
        copyableItem = data;
    }
    if (!navigator.clipboard || !window.ClipboardItem || sync) {
        return copyToClipboardByExecCommand(copyableItem);
    }
    return copyToClipboardByClipboard(copyableItem);
};
var download = function (str, fileName) {
    try {
        var link = document.createElement('a');
        link.download = "".concat(fileName, ".csv");
        // Avoid errors in Chinese encoding.
        var dataBlob = new Blob(["\uFEFF".concat(str)], {
            type: 'text/csv;charset=utf-8',
        });
        link.href = URL.createObjectURL(dataBlob);
        link.click();
        URL.revokeObjectURL(link.href);
    }
    catch (e) {
        // eslint-disable-next-line no-console
        console.error(e);
    }
};
/*
 * Process the multi-measure with multi-lines
 * For Grid-analysis-sheet
 * use the ' ' to divide different measures in the same line
 * use the '$' to divide different lines
 */
var processObjectValueInCol = function (data) {
    var tempCells = (data === null || data === void 0 ? void 0 : data.label) ? [data === null || data === void 0 ? void 0 : data.label] : [];
    var values = data === null || data === void 0 ? void 0 : data.values;
    if (!isEmpty(values)) {
        forEach(values, function (value) {
            tempCells.push(value.join(' '));
        });
    }
    return tempCells.join('$');
};
/*
 * Process the multi-measure with single-lines
 * For StrategySheet
 */
var processObjectValueInRow = function (data, isFormat) {
    var _a, _b, _c, _d;
    if (!isFormat) {
        return (_b = (_a = data === null || data === void 0 ? void 0 : data.originalValues) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : (_c = data === null || data === void 0 ? void 0 : data.values) === null || _c === void 0 ? void 0 : _c[0];
    }
    return (_d = data === null || data === void 0 ? void 0 : data.values) === null || _d === void 0 ? void 0 : _d[0];
};
/* Process the data in detail mode. */
var processValueInDetail = function (sheetInstance, split, isFormat) {
    var e_1, _a;
    var _b;
    var data = sheetInstance.dataSet.getDisplayDataSet();
    var columns = ((_b = sheetInstance.dataCfg) === null || _b === void 0 ? void 0 : _b.fields).columns;
    var leafColumns = getLeafColumnsWithKey(columns || []);
    var res = [];
    var _loop_1 = function (index, record) {
        var tempRows = [];
        if (!isFormat) {
            tempRows = leafColumns.map(function (v) { return getCsvString(record[v]); });
        }
        else {
            tempRows = leafColumns.map(function (v) {
                var mainFormatter = sheetInstance.dataSet.getFieldFormatter(v);
                return getCsvString(mainFormatter(record[v], record));
            });
        }
        if (sheetInstance.options.showSeriesNumber) {
            tempRows = [getCsvString(index + 1)].concat(tempRows);
        }
        res.push(tempRows.join(split));
    };
    try {
        for (var _c = __values(data.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), index = _e[0], record = _e[1];
            _loop_1(index, record);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return res;
};
/* Process the data when the value position is on the columns.  */
var processValueInCol = function (viewMeta, sheetInstance, isFormat) {
    if (!viewMeta) {
        // If the meta equals null, replacing it with blank line.
        return '';
    }
    var fieldValue = viewMeta.fieldValue, valueField = viewMeta.valueField, data = viewMeta.data;
    if (isObject(fieldValue)) {
        return processObjectValueInCol(fieldValue);
    }
    if (!isFormat) {
        return "".concat(fieldValue);
    }
    var mainFormatter = sheetInstance.dataSet.getFieldFormatter(valueField);
    return mainFormatter(fieldValue, data);
};
/* Process the data when the value position is on the rows. */
var processValueInRow = function (viewMeta, sheetInstance, placeholder, isFormat) {
    var tempCells = [];
    if (viewMeta) {
        var fieldValue = viewMeta.fieldValue, valueField = viewMeta.valueField, data = viewMeta.data;
        if (isObject(fieldValue)) {
            tempCells = processObjectValueInRow(fieldValue, isFormat);
            return tempCells;
        }
        // 如果本身格子的数据是 null， 但是一个格子又需要绘制多个指标时，需要使用placeholder填充
        if (isNil(fieldValue) && placeholder.length > 1) {
            tempCells.push.apply(tempCells, __spreadArray$1([], __read(placeholder), false));
            return tempCells;
        }
        // The main measure.
        if (!isFormat) {
            tempCells.push(fieldValue);
        }
        else {
            var mainFormatter = sheetInstance.dataSet.getFieldFormatter(valueField);
            tempCells.push(mainFormatter(fieldValue, data));
        }
    }
    else {
        // If the meta equals null then it will be replaced by '-'.
        tempCells.push.apply(tempCells, __spreadArray$1([], __read(placeholder), false));
    }
    return tempCells.join('    ');
};
/* Get the label name for the header. */
var getHeaderLabel = function (val) {
    var label = safeJsonParse(val);
    if (isArray$1(label)) {
        return label;
    }
    return val;
};
var getPlaceholder = function (viewMeta, leafNode, sheetInstance) {
    var label = getHeaderLabel(leafNode.label);
    var labelLength = isArray$1(label) ? label.length : 1;
    var placeholder = sheetInstance.options.placeholder;
    var placeholderStr = isFunction(placeholder)
        ? placeholder(viewMeta)
        : placeholder;
    return Array(labelLength).fill(placeholderStr);
};
/**
 * 当列头label存在数组情况，需要将其他层级补齐空格
 * eg [ ['数值', '环比'], '2021'] => [ ['数值', '环比'], ['2021', '']
 */
var processColHeaders = function (headers) {
    var result = headers.map(function (header) {
        return header.map(function (item) {
            if (isArray$1(item)) {
                return item;
            }
            if (isArray$1(header[0])) {
                return __spreadArray$1([item], __read(new Array(header[0].length - 1)), false);
            }
            return item;
        });
    });
    return result;
};
var getNodeFormatLabel = function (node) {
    var _a, _b, _c, _d;
    var formatter = (_c = (_b = (_a = node.spreadsheet) === null || _a === void 0 ? void 0 : _a.dataSet) === null || _b === void 0 ? void 0 : _b.getFieldFormatter) === null || _c === void 0 ? void 0 : _c.call(_b, node.field);
    return (_d = formatter === null || formatter === void 0 ? void 0 : formatter(node.label)) !== null && _d !== void 0 ? _d : node.label;
};
/**
 * 通过 rowLeafNode 获取到当前行所有 rowNode 的数据
 * @param rowLeafNode
 */
var getRowNodeFormatData = function (rowLeafNode) {
    var line = [];
    var getRowNodeFormatterLabel = function (node) {
        // node.id === ROOT_ID 时，为 S2 内的虚拟根节点，导出的内容不需要考虑此节点
        if (node.id === ROOT_ID) {
            return;
        }
        var formatterLabel = getNodeFormatLabel(node);
        line.unshift(formatterLabel);
        if (node === null || node === void 0 ? void 0 : node.parent) {
            return getRowNodeFormatterLabel(node.parent);
        }
    };
    getRowNodeFormatterLabel(rowLeafNode);
    return line;
};
var getFormatOptions = function (isFormat) {
    var _a, _b;
    if (typeof isFormat === 'object') {
        return {
            isFormatHeader: (_a = isFormat.isFormatHeader) !== null && _a !== void 0 ? _a : false,
            isFormatData: (_b = isFormat.isFormatData) !== null && _b !== void 0 ? _b : false,
        };
    }
    return {
        isFormatHeader: isFormat !== null && isFormat !== void 0 ? isFormat : false,
        isFormatData: isFormat !== null && isFormat !== void 0 ? isFormat : false,
    };
};
/**
 * Copy data
 * @param sheetInstance
 * @param formatOptions 是否格式化数据
 * @param split
 */
var copyData = function (sheetInstance, split, formatOptions) {
    var e_2, _a, e_3, _b;
    var _c;
    // isFormatHeader 格式化表头， isFormatData 格式化数据
    var _d = getFormatOptions(formatOptions), isFormatHeader = _d.isFormatHeader, isFormatData = _d.isFormatData;
    var _e = (_c = sheetInstance === null || sheetInstance === void 0 ? void 0 : sheetInstance.facet) === null || _c === void 0 ? void 0 : _c.layoutResult, rowsHierarchy = _e.rowsHierarchy, rowLeafNodes = _e.rowLeafNodes, colLeafNodes = _e.colLeafNodes, getCellMeta = _e.getCellMeta;
    var maxRowsHeaderLevel = rowsHierarchy.maxLevel;
    var valueInCols = sheetInstance.dataCfg.fields.valueInCols;
    // Generate the table header.
    var rowsHeader = rowsHierarchy.sampleNodesForAllLevels.map(function (item) {
        return sheetInstance.dataSet.getFieldName(item.key);
    });
    // get max query property length
    var maxRowDepth = rowLeafNodes.reduce(function (maxDepth, node) {
        var _a;
        // 第一层的level为0
        var depth = ((_a = node.level) !== null && _a !== void 0 ? _a : 0) + 1;
        return depth > maxDepth ? depth : maxDepth;
    }, 0);
    // Generate the table body.
    var detailRows = [];
    var maxRowLength = 0;
    if (!sheetInstance.isPivotMode()) {
        detailRows = processValueInDetail(sheetInstance, split, isFormatData);
    }
    else {
        // Filter out the related row head leaf nodes.
        var caredRowLeafNodes = rowLeafNodes.filter(function (row) { return row.height !== 0; });
        try {
            for (var caredRowLeafNodes_1 = __values(caredRowLeafNodes), caredRowLeafNodes_1_1 = caredRowLeafNodes_1.next(); !caredRowLeafNodes_1_1.done; caredRowLeafNodes_1_1 = caredRowLeafNodes_1.next()) {
                var rowNode = caredRowLeafNodes_1_1.value;
                var tempLine = [];
                if (isFormatHeader) {
                    tempLine = getRowNodeFormatData(rowNode);
                }
                else {
                    // Removing the space at the beginning of the line of the label.
                    rowNode.label = trim(rowNode === null || rowNode === void 0 ? void 0 : rowNode.label);
                    var id = rowNode.id.replace(ROOT_BEGINNING_REGEX, '');
                    tempLine = id.split(ID_SEPARATOR);
                }
                // TODO 兼容下钻，需要获取下钻最大层级
                var totalLevel = maxRowsHeaderLevel + 1;
                var emptyLength = totalLevel - tempLine.length;
                if (emptyLength > 0) {
                    tempLine.push.apply(tempLine, __spreadArray$1([], __read(new Array(emptyLength)), false));
                }
                // 指标挂行头且为平铺模式下，获取指标名称
                var lastLabel = sheetInstance.dataSet.getFieldName(last(tempLine));
                tempLine[tempLine.length - 1] = lastLabel;
                try {
                    for (var colLeafNodes_1 = (e_3 = void 0, __values(colLeafNodes)), colLeafNodes_1_1 = colLeafNodes_1.next(); !colLeafNodes_1_1.done; colLeafNodes_1_1 = colLeafNodes_1.next()) {
                        var colNode = colLeafNodes_1_1.value;
                        if (valueInCols) {
                            var viewMeta = getCellMeta(rowNode.rowIndex, colNode.colIndex);
                            tempLine.push(processValueInCol(viewMeta, sheetInstance, isFormatData));
                        }
                        else {
                            var viewMeta = getCellMeta(rowNode.rowIndex, colNode.colIndex);
                            var placeholder = getPlaceholder(viewMeta, colNode, sheetInstance);
                            var lintItem = processValueInRow(viewMeta, sheetInstance, placeholder, isFormatData);
                            if (isArray$1(lintItem)) {
                                tempLine = tempLine.concat.apply(tempLine, __spreadArray$1([], __read(lintItem), false));
                            }
                            else {
                                tempLine.push(lintItem);
                            }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (colLeafNodes_1_1 && !colLeafNodes_1_1.done && (_b = colLeafNodes_1.return)) _b.call(colLeafNodes_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                maxRowLength = max$1([tempLine.length, maxRowLength]);
                var lineString = tempLine
                    .map(function (value) { return getCsvString(value); })
                    .join(split);
                detailRows.push(lineString);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (caredRowLeafNodes_1_1 && !caredRowLeafNodes_1_1.done && (_a = caredRowLeafNodes_1.return)) _a.call(caredRowLeafNodes_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    // Generate the table header.
    var headers = [];
    if (isEmpty(colLeafNodes) && !sheetInstance.isPivotMode()) {
        // when there is no column in detail mode
        headers = [rowsHeader];
    }
    else {
        // 当列头label为array时用于补全其他层级的label
        var arrayLength_1 = 0;
        // Get the table header of Columns.
        var tempColHeader = clone$1(colLeafNodes).map(function (colItem) {
            var curColItem = colItem;
            var tempCol = [];
            // Generate the column dimensions.
            while (curColItem.level !== undefined) {
                var label = getHeaderLabel(curColItem.label);
                if (isArray$1(label)) {
                    arrayLength_1 = max$1([arrayLength_1, size(label)]);
                }
                else {
                    // label 为数组时不进行格式化
                    label =
                        isFormatHeader && sheetInstance.isPivotMode()
                            ? getNodeFormatLabel(curColItem)
                            : label;
                }
                tempCol.push(label);
                curColItem = curColItem.parent;
            }
            return tempCol;
        });
        if (arrayLength_1 > 1) {
            tempColHeader = processColHeaders(tempColHeader);
        }
        var colLevels = tempColHeader.map(function (colHeader) { return colHeader.length; });
        var colLevel_1 = max$1(colLevels);
        var colHeader_1 = [];
        var _loop_2 = function (i) {
            // The map of data set: key-name
            var colHeaderItem = tempColHeader
                // total col completion
                .map(function (item) {
                return item.length < colLevel_1
                    ? __spreadArray$1(__spreadArray$1([], __read(new Array(colLevel_1 - item.length)), false), __read(item), false) : item;
            })
                .map(function (item) { return item[i]; })
                .map(function (colItem) { return sheetInstance.dataSet.getFieldName(colItem); });
            colHeader_1.push(flatten(colHeaderItem));
        };
        // Convert the number of column dimension levels to the corresponding array.
        for (var i = colLevel_1 - 1; i >= 0; i -= 1) {
            _loop_2(i);
        }
        // Generate the table header.
        headers = colHeader_1.map(function (item, index) {
            var _a;
            var _b;
            if (sheetInstance.isPivotMode()) {
                var _c = sheetInstance.facet.cornerHeader.cfg, columns_1 = _c.columns, rows = _c.rows, data_1 = _c.data;
                var colNodes = data_1.filter(function (_a) {
                    var cornerType = _a.cornerType;
                    return cornerType === CornerNodeType.Col;
                });
                if (index < colHeader_1.length - 1) {
                    return __spreadArray$1(__spreadArray$1(__spreadArray$1([], __read(Array(maxRowsHeaderLevel).fill('')), false), [
                        ((_b = colNodes.find(function (_a) {
                            var field = _a.field;
                            return field === columns_1[index];
                        })) === null || _b === void 0 ? void 0 : _b.label) || ''
                    ], false), __read(item), false);
                }
                // 行头展开多少层，则复制多少层的内容。不进行全量复制。 eg: 树结构下，行头为 省份/城市, 折叠所有城市，则只复制省份
                var copiedRows = rows.slice(0, maxRowDepth);
                // 在趋势分析表中，行头只有一个 extra的维度，但是有多个层级
                if (copiedRows.length < maxRowDepth) {
                    copiedRows.unshift.apply(copiedRows, __spreadArray$1([], __read(Array(maxRowDepth - copiedRows.length).fill('')), false));
                }
                return __spreadArray$1(__spreadArray$1([], __read(copiedRows.map(function (row) { return sheetInstance.dataSet.getFieldName(row) || ''; })), false), __read(item), false);
            }
            return index < colHeader_1.length
                ? (_a = Array(maxRowDepth)
                    .fill(''))
                    .concat.apply(_a, __spreadArray$1([], __read(item), false)) : rowsHeader.concat.apply(rowsHeader, __spreadArray$1([], __read(item), false));
        });
    }
    var headerRow = headers
        .map(function (header) {
        var emptyLength = maxRowLength - header.length;
        if (emptyLength > 0) {
            header.unshift.apply(header, __spreadArray$1([], __read(new Array(emptyLength)), false));
        }
        return header.map(function (h) { return getCsvString(h); }).join(split);
    })
        .join('\r\n');
    var data = [headerRow].concat(detailRows);
    var result = data.join('\r\n');
    return result;
};

/* formate the base Event data */
var getBaseCellData = function (event) {
    var _a, _b, _c, _d, _e, _f;
    var currentCellData = (_c = (_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b.appendInfo) === null || _c === void 0 ? void 0 : _c.cellData;
    var target = (_e = (_d = event.target).get) === null || _e === void 0 ? void 0 : _e.call(_d, 'parent');
    var meta = ((_f = target === null || target === void 0 ? void 0 : target.getMeta) === null || _f === void 0 ? void 0 : _f.call(target)) || currentCellData;
    return {
        target: target,
        viewMeta: meta,
        event: event,
    };
};

/**
 * @description Return all the row cells or column cells which are needed to be highlighted.
 * @param id rowId or colId
 * @param headerCells all the rowHeader cells or all the colHeader cells
 * @param isRowInHierarchyTreeType  The tree mode will only highlight the leaf nodes at the head of the row
 */
var getActiveHoverRowColCells = function (id, headerCells, isRowInHierarchyTreeType) {
    var allHeaderIds;
    var ids = id.split(ID_SEPARATOR);
    if (isRowInHierarchyTreeType) {
        allHeaderIds = [id];
    }
    else {
        allHeaderIds = [generateId(ids[0], ids[1])];
        for (var i = 2; i < ids.length; i += 1) {
            allHeaderIds.push(generateId(allHeaderIds[i - 2], ids[i]));
        }
    }
    var allHeaderCells = filter(headerCells, function (cell) { var _a; return allHeaderIds.includes((_a = cell.getMeta()) === null || _a === void 0 ? void 0 : _a.id); });
    return allHeaderCells;
};
var updateAllColHeaderCellState = function (colId, colHeaderCells, stateName) {
    if (colId) {
        var allColHeaderCells = getActiveHoverRowColCells(colId, colHeaderCells);
        forEach(allColHeaderCells, function (cell) {
            cell.updateByState(stateName);
        });
    }
};

var checkIsLinkField = function (linkFields, meta) {
    return typeof linkFields === 'function'
        ? linkFields(meta)
        : linkFields.some(function (field) {
            return field === meta.key || field === meta.id || field === meta.valueField;
        });
};

var customMerge = function () {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    var customize = function (origin, updated) {
        if (isArray$1(origin) && isArray$1(updated)) {
            return updated;
        }
    };
    var args = __spreadArray$1(__spreadArray$1([], __read(objects), false), [customize], false);
    return mergeWith$1.apply(void 0, __spreadArray$1([{}], __read(args), false));
};
var uniqueFields = function (fields) {
    var keys = ['rows', 'columns', 'values'];
    var result = keys.reduce(function (r, key) {
        var list = fields[key];
        var unique = uniq(list);
        if (!isEqual(unique, list)) {
            // eslint-disable-next-line no-console
            console.warn("fields.".concat(key, ":[").concat(list, "] should be unique"));
        }
        r[key] = unique;
        return r;
    }, {});
    return __assign(__assign({}, fields), result);
};
var getSafetyDataConfig = function () {
    var dataConfig = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        dataConfig[_i] = arguments[_i];
    }
    var result = customMerge.apply(void 0, __spreadArray$1([DEFAULT_DATA_CONFIG], __read(dataConfig), false));
    // fields 去重
    result.fields = uniqueFields(result.fields);
    // 自定义树和数值为空的场景, 关闭 数值置于列头
    if (!isEmpty(result.fields.customTreeItems) ||
        isEmpty(result.fields.values)) {
        result.fields.valueInCols = false;
    }
    return result;
};
var getSafetyOptions = function (options) {
    return customMerge(DEFAULT_OPTIONS, options);
};

var BaseCell = /** @class */ (function (_super) {
    __extends(BaseCell, _super);
    function BaseCell(meta, spreadsheet) {
        var restOptions = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            restOptions[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this, {}) || this;
        _this.textShapes = [];
        // actual text width after be ellipsis
        _this.actualTextWidth = 0;
        _this.conditionIconShapes = [];
        // interactive control shapes, unify read and manipulate operations
        _this.stateShapes = new Map();
        _this.meta = meta;
        _this.spreadsheet = spreadsheet;
        _this.theme = spreadsheet.theme;
        _this.conditions = _this.spreadsheet.options.conditions;
        _this.handleRestOptions.apply(_this, __spreadArray$1([], __read(restOptions), false));
        if (_this.shouldInit()) {
            _this.initCell();
        }
        return _this;
    }
    BaseCell.prototype.getMeta = function () {
        return this.meta;
    };
    BaseCell.prototype.setMeta = function (viewMeta) {
        this.meta = customMerge(this.meta, viewMeta);
    };
    BaseCell.prototype.getIconStyle = function () {
        return this.theme[this.cellType].icon;
    };
    BaseCell.prototype.getTextAndIconPosition = function (iconCount) {
        if (iconCount === void 0) { iconCount = 1; }
        var textStyle = this.getTextStyle();
        var iconCfg = this.getIconStyle();
        return getTextAndFollowingIconPosition(this.getContentArea(), textStyle, this.actualTextWidth, iconCfg, iconCount);
    };
    BaseCell.prototype.getActualText = function () {
        return this.actualText;
    };
    // TODO: 2.0 使用 G 内置的方法
    BaseCell.prototype.isTextOverflowing = function () {
        var text = this.getActualText();
        if (text) {
            return includes(text, ELLIPSIS_SYMBOL);
        }
        // 多列文本, 或者自定义单元格等没有 textShape 的场景, 暂时还是保持原来的写法
        return text !== this.getFieldValue();
    };
    BaseCell.prototype.getFieldValue = function () {
        var formattedValue = this.getFormattedFieldValue().formattedValue;
        if (formattedValue === EMPTY_FIELD_VALUE) {
            return this.getActualText();
        }
        return formattedValue;
    };
    /**
     * in case there are more params to be handled
     * @param options any type's rest params
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    BaseCell.prototype.handleRestOptions = function () {
        // default do nothing
    };
    /* -------------------------------------------------------------------------- */
    /*                common functions that will be used in subtype               */
    /* -------------------------------------------------------------------------- */
    BaseCell.prototype.shouldInit = function () {
        var _a = this.meta, width = _a.width, height = _a.height;
        return width > 0 && height > 0;
    };
    BaseCell.prototype.getStyle = function (name) {
        return get(this.theme, name || this.cellType);
    };
    BaseCell.prototype.getResizeAreaStyle = function () {
        return this.getStyle('resizeArea');
    };
    BaseCell.prototype.shouldDrawResizeAreaByType = function (type, cell) {
        var resize = this.spreadsheet.options.interaction.resize;
        if (isBoolean(resize)) {
            return resize;
        }
        if (isFunction(resize.visible)) {
            return resize.visible(cell);
        }
        return resize[type];
    };
    BaseCell.prototype.getCellArea = function () {
        var _a = this.meta, x = _a.x, y = _a.y, height = _a.height, width = _a.width;
        return { x: x, y: y, height: height, width: width };
    };
    // get content area that exclude padding
    BaseCell.prototype.getContentArea = function () {
        var cellStyle = (this.getStyle() ||
            this.theme.dataCell);
        var padding = (cellStyle === null || cellStyle === void 0 ? void 0 : cellStyle.cell).padding;
        return getContentArea(this.getCellArea(), padding);
    };
    BaseCell.prototype.getIconPosition = function (iconCount) {
        if (iconCount === void 0) { iconCount = 1; }
        return this.getTextAndIconPosition(iconCount).icon;
    };
    BaseCell.prototype.drawTextShape = function () {
        var formattedValue = this.getFormattedFieldValue().formattedValue;
        var maxTextWidth = this.getMaxTextWidth();
        var textStyle = this.getTextStyle();
        var _a = this.spreadsheet, placeholder = _a.options.placeholder, measureTextWidth = _a.measureTextWidth;
        var emptyPlaceholder = getEmptyPlaceholder(this, placeholder);
        var ellipsisText = getEllipsisText({
            measureTextWidth: measureTextWidth,
            text: formattedValue,
            maxWidth: maxTextWidth,
            fontParam: textStyle,
            placeholder: emptyPlaceholder,
        });
        this.actualText = ellipsisText;
        this.actualTextWidth = measureTextWidth(ellipsisText, textStyle);
        var position = this.getTextPosition();
        this.textShape = renderText(this, [this.textShape], position.x, position.y, ellipsisText, textStyle);
        this.textShapes.push(this.textShape);
    };
    BaseCell.prototype.drawLinkFieldShape = function (showLinkFieldShape, linkFillColor) {
        if (!showLinkFieldShape) {
            return;
        }
        var device = this.spreadsheet.options.style.device;
        // 配置了链接跳转
        if (!isMobile(device)) {
            var textStyle = this.getTextStyle();
            var position = this.getTextPosition();
            var startX = position.x; // 默认居左，其他align方式需要调整
            if (textStyle.textAlign === 'center') {
                startX -= this.actualTextWidth / 2;
            }
            else if (textStyle.textAlign === 'right') {
                startX -= this.actualTextWidth;
            }
            var maxY = this.textShape.getBBox().maxY;
            this.linkFieldShape = renderLine(this, {
                x1: startX,
                y1: maxY + 1,
                x2: startX + this.actualTextWidth,
                y2: maxY + 1,
            }, { stroke: linkFillColor, lineWidth: 1 });
        }
        this.textShape.attr({
            fill: linkFillColor,
            cursor: 'pointer',
            appendInfo: {
                isLinkFieldText: true,
                cellData: this.meta,
            },
        });
    };
    // 要被子类覆写，返回颜色字符串
    BaseCell.prototype.getLinkFieldStyle = function () {
        return this.getTextStyle().linkTextFill;
    };
    BaseCell.prototype.drawLinkField = function (meta) {
        var _a = this.spreadsheet.options.interaction.linkFields, linkFields = _a === void 0 ? [] : _a;
        var linkTextFill = this.getLinkFieldStyle();
        var isLinkField = checkIsLinkField(linkFields, meta);
        this.drawLinkFieldShape(isLinkField, linkTextFill);
    };
    // 根据当前state来更新cell的样式
    BaseCell.prototype.updateByState = function (stateName, cell) {
        var _this = this;
        this.spreadsheet.interaction.setInteractedCells(cell);
        var stateStyles = get(this.theme, "".concat(this.cellType, ".cell.interactionState.").concat(stateName));
        forEach(stateStyles, function (style, styleKey) {
            var targetShapeNames = keys(pickBy(SHAPE_ATTRS_MAP, function (attrs) { return includes(attrs, styleKey); }));
            targetShapeNames.forEach(function (shapeName) {
                var isStateShape = _this.stateShapes.has(shapeName);
                var shapeGroup = isStateShape
                    ? _this.stateShapes.get(shapeName)
                    : _this[shapeName];
                // 兼容多列文本 (MultiData)
                var shapes = !isArray$1(shapeGroup) ? [shapeGroup] : shapeGroup;
                // stateShape 默认 visible 为 false
                if (isStateShape) {
                    shapes.forEach(function (shape) {
                        shape.set('visible', true);
                    });
                }
                // 根据 borderWidth 更新 borderShape 大小 https://github.com/antvis/S2/pull/705
                if (shapeName === 'interactiveBorderShape' &&
                    styleKey === 'borderWidth') {
                    if (isNumber(style)) {
                        var marginStyle = _this.getInteractiveBorderShapeStyle(style);
                        forEach(marginStyle, function (currentStyle, currentStyleKey) {
                            updateShapeAttr(shapes, currentStyleKey, currentStyle);
                        });
                    }
                }
                updateShapeAttr(shapes, SHAPE_STYLE_MAP[styleKey], style);
            });
        });
    };
    BaseCell.prototype.getInteractiveBorderShapeStyle = function (style) {
        var _a = this.getCellArea(), x = _a.x, y = _a.y, height = _a.height, width = _a.width;
        var _b = this.theme.dataCell.cell, horizontalBorderWidth = _b.horizontalBorderWidth, verticalBorderWidth = _b.verticalBorderWidth;
        return {
            x: x + verticalBorderWidth / 2 + style / 2,
            y: y + horizontalBorderWidth / 2 + style / 2,
            width: width - verticalBorderWidth - style,
            height: height - horizontalBorderWidth - style,
        };
    };
    BaseCell.prototype.hideInteractionShape = function () {
        this.stateShapes.forEach(function (shape) {
            updateShapeAttr(shape, SHAPE_STYLE_MAP.backgroundOpacity, 0);
            updateShapeAttr(shape, SHAPE_STYLE_MAP.backgroundColor, 'transparent');
            updateShapeAttr(shape, SHAPE_STYLE_MAP.borderOpacity, 0);
            updateShapeAttr(shape, SHAPE_STYLE_MAP.borderWidth, 1);
            updateShapeAttr(shape, SHAPE_STYLE_MAP.borderColor, 'transparent');
        });
    };
    BaseCell.prototype.clearUnselectedState = function () {
        updateShapeAttr(this.backgroundShape, SHAPE_STYLE_MAP.backgroundOpacity, 1);
        updateShapeAttr(this.textShapes, SHAPE_STYLE_MAP.textOpacity, 1);
        updateShapeAttr(this.linkFieldShape, SHAPE_STYLE_MAP.opacity, 1);
    };
    BaseCell.prototype.getTextShape = function () {
        return this.textShape;
    };
    BaseCell.prototype.getTextShapes = function () {
        return this.textShapes || [this.textShape];
    };
    BaseCell.prototype.addTextShape = function (textShape) {
        if (!textShape) {
            return;
        }
        this.textShapes.push(textShape);
    };
    BaseCell.prototype.getConditionIconShape = function () {
        return this.conditionIconShape;
    };
    BaseCell.prototype.getConditionIconShapes = function () {
        return this.conditionIconShapes || [this.conditionIconShape];
    };
    BaseCell.prototype.addConditionIconShape = function (iconShape) {
        if (!iconShape) {
            return;
        }
        this.conditionIconShapes.push(iconShape);
    };
    BaseCell.prototype.resetTextAndConditionIconShapes = function () {
        this.textShapes = [];
        this.conditionIconShapes = [];
    };
    Object.defineProperty(BaseCell.prototype, "cellConditions", {
        get: function () {
            return this.conditions;
        },
        enumerable: false,
        configurable: true
    });
    BaseCell.prototype.drawConditionIconShapes = function () {
        var _a;
        var iconCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.icon);
        if (iconCondition && iconCondition.mapping) {
            var attrs = this.mappingValue(iconCondition);
            var position = this.getIconPosition();
            var size = this.theme.dataCell.icon.size;
            if (!isEmpty(attrs === null || attrs === void 0 ? void 0 : attrs.icon)) {
                this.conditionIconShape = renderIcon(this, __assign(__assign({}, position), { name: attrs.icon, width: size, height: size, fill: attrs.fill }));
                this.addConditionIconShape(this.conditionIconShape);
            }
        }
    };
    BaseCell.prototype.getTextConditionFill = function (textStyle) {
        var _a, _b;
        // get text condition's fill result
        var fillResult = textStyle.fill;
        var textCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.text);
        if (textCondition === null || textCondition === void 0 ? void 0 : textCondition.mapping) {
            fillResult = ((_b = this.mappingValue(textCondition)) === null || _b === void 0 ? void 0 : _b.fill) || textStyle.fill;
        }
        return fillResult;
    };
    BaseCell.prototype.getCrossBackgroundColor = function (rowIndex) {
        var _a = this.getStyle().cell, crossBackgroundColor = _a.crossBackgroundColor, backgroundColorOpacity = _a.backgroundColorOpacity;
        if (crossBackgroundColor && rowIndex % 2 === 0) {
            // 隔行颜色的配置
            // 偶数行展示灰色背景，因为index是从0开始的
            return { backgroundColorOpacity: backgroundColorOpacity, backgroundColor: crossBackgroundColor };
        }
        return {
            backgroundColorOpacity: backgroundColorOpacity,
            backgroundColor: this.getStyle().cell.backgroundColor,
        };
    };
    return BaseCell;
}(Group));

var handleDataItem = function (data, callback) {
    return callback
        ? callback(data[EXTRA_FIELD], data[VALUE_FIELD])
        : data[VALUE_FIELD];
};
/**
 * @description  Determine if the current cell belongs to Cells
 * @param cells active cells
 * @param currentCell current activated cell
 */
var includeCell = function (cells, currentCell) {
    var currentId = currentCell.getMeta().id;
    return cells.some(function (cell) {
        return isEqual(cell.id, currentId);
    });
};
var getDataCellId = function (rowIndex, colIndex) {
    return "".concat(rowIndex).concat(EMPTY_PLACEHOLDER).concat(colIndex);
};
var shouldUpdateBySelectedCellsHighlight = function (s2) {
    var _a = s2.interaction.getSelectedCellHighlight(), currentRow = _a.currentRow, currentCol = _a.currentCol, rowHeader = _a.rowHeader, colHeader = _a.colHeader;
    return currentRow || currentCol || rowHeader || colHeader;
};
var isDataCell = function (cell) {
    return cell.type === CellTypes.DATA_CELL;
};
/**
 * highlight cells of the row
 * @param cells cells selected
 * @param dataCell cell to render
 */
var updateCurrentRowCellState = function (cells, dataCell) {
    forEach(cells, function (cell) {
        if (isDataCell(cell) && cell.rowIndex === dataCell.getMeta().rowIndex) {
            dataCell.updateByState(InteractionStateName.SELECTED);
        }
    });
};
/**
 * highlight cells of the column
 * @param cells cells selected
 * @param dataCell cell to render
 */
var updateCurrentColumnCellState = function (cells, dataCell) {
    forEach(cells, function (cell) {
        if (isDataCell(cell) && cell.colIndex === dataCell.getMeta().colIndex) {
            dataCell.updateByState(InteractionStateName.SELECTED);
        }
    });
};
/**
 * highlight cells
 * @param cells cells selected
 * @param dataCell cell to render
 */
var updateCurrentCellState = function (cells, dataCell) {
    forEach(cells, function (cell) {
        if (isDataCell(cell) &&
            cell.rowIndex === dataCell.getMeta().rowIndex &&
            cell.colIndex === dataCell.getMeta().colIndex) {
            dataCell.updateByState(InteractionStateName.SELECTED);
        }
    });
};
var updateBySelectedCellsHighlight = function (cells, dataCell, s2) {
    var _a = s2.interaction.getSelectedCellHighlight(), rowHeader = _a.rowHeader, colHeader = _a.colHeader, currentRow = _a.currentRow, currentCol = _a.currentCol;
    var isRowCell = dataCell.cellType === CellTypes.ROW_CELL;
    // 高亮序号
    var showSNWhenRowHeaderHighlight = s2.isTableMode() && s2.options.showSeriesNumber && rowHeader && isRowCell;
    if (currentRow || showSNWhenRowHeaderHighlight) {
        updateCurrentRowCellState(cells, dataCell);
    }
    if (currentCol) {
        updateCurrentColumnCellState(cells, dataCell);
    }
    if (rowHeader || colHeader) {
        updateCurrentCellState(cells, dataCell);
    }
};

/**
 * DataCell for panelGroup area
 * ----------------------------
 * |                  |       |
 * |interval      text| icon  |
 * |                  |       |
 * ----------------------------
 * There are four conditions({@see BaseCell.conditions}) to determine how to render
 * 1、background color
 * 2、icon align in right with size {@link ICON_SIZE}
 * 3、left rect area is interval(in left) and text(in right)
 */
var DataCell = /** @class */ (function (_super) {
    __extends(DataCell, _super);
    function DataCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DataCell.prototype, "cellType", {
        get: function () {
            return CellTypes.DATA_CELL;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataCell.prototype, "valueRangeByField", {
        get: function () {
            return this.spreadsheet.dataSet.getValueRangeByField(this.meta.valueField);
        },
        enumerable: false,
        configurable: true
    });
    DataCell.prototype.handleByStateName = function (cells, stateName) {
        if (includeCell(cells, this)) {
            this.updateByState(stateName);
        }
    };
    DataCell.prototype.handleSearchResult = function (cells) {
        if (!includeCell(cells, this)) {
            return;
        }
        var targetCell = find$1(cells, function (cell) { return cell === null || cell === void 0 ? void 0 : cell.isTarget; });
        if (targetCell.id === this.getMeta().id) {
            this.updateByState(InteractionStateName.HIGHLIGHT);
        }
        else {
            this.updateByState(InteractionStateName.SEARCH_RESULT);
        }
    };
    DataCell.prototype.handleSelect = function (cells) {
        var _a;
        var currentCellType = (_a = cells === null || cells === void 0 ? void 0 : cells[0]) === null || _a === void 0 ? void 0 : _a.type;
        switch (currentCellType) {
            // 列多选
            case CellTypes.COL_CELL:
                this.changeRowColSelectState('colIndex');
                break;
            // 行多选
            case CellTypes.ROW_CELL:
                this.changeRowColSelectState('rowIndex');
                break;
            // 单元格单选/多选
            case CellTypes.DATA_CELL:
                if (shouldUpdateBySelectedCellsHighlight(this.spreadsheet)) {
                    updateBySelectedCellsHighlight(cells, this, this.spreadsheet);
                }
                else if (includeCell(cells, this)) {
                    this.updateByState(InteractionStateName.SELECTED);
                }
                else if (this.spreadsheet.options.interaction.selectedCellsSpotlight) {
                    this.updateByState(InteractionStateName.UNSELECTED);
                }
                break;
        }
    };
    DataCell.prototype.handleHover = function (cells) {
        var currentHoverCell = head(cells);
        if (currentHoverCell.type !== CellTypes.DATA_CELL) {
            this.hideInteractionShape();
            return;
        }
        var _a = this.spreadsheet.interaction.getHoverHighlight(), currentRow = _a.currentRow, currentCol = _a.currentCol;
        if (currentRow || currentCol) {
            // 如果当前是hover，要绘制出十字交叉的行列样式
            var currentColIndex = this.meta.colIndex;
            var currentRowIndex = this.meta.rowIndex;
            // 当视图内的 cell 行列 index 与 hover 的 cell 一致，绘制hover的十字样式
            if ((currentCol && currentColIndex === (currentHoverCell === null || currentHoverCell === void 0 ? void 0 : currentHoverCell.colIndex)) ||
                (currentRow && currentRowIndex === (currentHoverCell === null || currentHoverCell === void 0 ? void 0 : currentHoverCell.rowIndex))) {
                this.updateByState(InteractionStateName.HOVER);
            }
            else {
                // 当视图内的 cell 行列 index 与 hover 的 cell 不一致，隐藏其他样式
                this.hideInteractionShape();
            }
        }
        var _b = this.getMeta(), id = _b.id, rowIndex = _b.rowIndex, colIndex = _b.colIndex;
        // fix issue: https://github.com/antvis/S2/issues/1781
        if (isEqual(currentHoverCell.id, id) &&
            isEqual(currentHoverCell.rowIndex, rowIndex) &&
            isEqual(currentHoverCell.colIndex, colIndex)) {
            this.updateByState(InteractionStateName.HOVER_FOCUS);
        }
    };
    DataCell.prototype.update = function () {
        var stateName = this.spreadsheet.interaction.getCurrentStateName();
        // 获取当前 interaction 记录的 Cells 元信息列表，不仅仅是数据单元格，也可能是行头或者列头。
        var cells = this.spreadsheet.interaction.getCells();
        if (stateName === InteractionStateName.ALL_SELECTED) {
            this.updateByState(InteractionStateName.SELECTED);
            return;
        }
        if (isEmpty(cells) || !stateName) {
            return;
        }
        switch (stateName) {
            case InteractionStateName.SELECTED:
                this.handleSelect(cells);
                break;
            case InteractionStateName.HOVER_FOCUS:
            case InteractionStateName.HOVER:
                this.handleHover(cells);
                break;
            case InteractionStateName.SEARCH_RESULT:
                this.handleSearchResult(cells);
                break;
            default:
                this.handleByStateName(cells, stateName);
                break;
        }
    };
    DataCell.prototype.setMeta = function (viewMeta) {
        _super.prototype.setMeta.call(this, viewMeta);
        this.initCell();
    };
    // draw text
    DataCell.prototype.drawTextShape = function () {
        _super.prototype.drawTextShape.call(this);
        this.drawLinkField(this.meta);
    };
    DataCell.prototype.initCell = function () {
        this.resetTextAndConditionIconShapes();
        this.drawBackgroundShape();
        this.drawInteractiveBgShape();
        if (!this.shouldHideRowSubtotalData()) {
            this.drawConditionIntervalShape();
            this.drawTextShape();
            this.drawConditionIconShapes();
        }
        this.drawInteractiveBorderShape();
        if (this.meta.isFrozenCorner) {
            this.drawBorderShape();
        }
        this.update();
    };
    /**
     * 获取默认字体颜色：根据字段标记背景颜色，设置字体颜色
     * @param textStyle
     * @private
     */
    DataCell.prototype.getDefaultTextFill = function (textStyle) {
        var textFill = textStyle.fill;
        var _a = this.getBackgroundColor(), backgroundColor = _a.backgroundColor, intelligentReverseTextColor = _a.intelligentReverseTextColor;
        // text 默认为黑色，当背景颜色亮度过低时，修改 text 为白色
        if (shouldReverseFontColor(backgroundColor) &&
            textStyle.fill === DEFAULT_FONT_COLOR &&
            intelligentReverseTextColor) {
            textFill = REVERSE_FONT_COLOR;
        }
        return textFill;
    };
    DataCell.prototype.getTextStyle = function () {
        var isTotals = this.meta.isTotals;
        var textStyle = isTotals
            ? this.theme.dataCell.bolderText
            : this.theme.dataCell.text;
        // 优先级：默认字体颜色（已经根据背景反色后的） < 用户配置字体颜色
        var fill = this.getTextConditionFill(__assign(__assign({}, textStyle), { fill: this.getDefaultTextFill(textStyle) }));
        return __assign(__assign({}, textStyle), { fill: fill });
    };
    DataCell.prototype.getIconStyle = function () {
        var _a;
        var _b = this.theme.dataCell.icon, size = _b.size, margin = _b.margin;
        var iconCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.icon);
        var iconCfg = iconCondition &&
            iconCondition.mapping && {
            size: size,
            margin: margin,
            position: getIconPositionCfg(iconCondition),
        };
        return iconCfg;
    };
    DataCell.prototype.drawConditionIntervalShape = function () {
        this.conditionIntervalShape = drawInterval(this);
    };
    DataCell.prototype.shouldHideRowSubtotalData = function () {
        var _a;
        var _b = this.meta, rowId = _b.rowId, rowIndex = _b.rowIndex;
        // 如果该格子是被下钻的格子，下钻格子本身来说是明细格子，因为下钻变成了小计格子，是应该展示的
        var drillDownIdPathMap = this.spreadsheet.store.get('drillDownIdPathMap');
        if (drillDownIdPathMap === null || drillDownIdPathMap === void 0 ? void 0 : drillDownIdPathMap.has(rowId)) {
            return false;
        }
        var _c = ((_a = this.spreadsheet.options.totals) !== null && _a !== void 0 ? _a : {}).row, row = _c === void 0 ? {} : _c;
        var node = this.spreadsheet.facet.layoutResult.rowLeafNodes[rowIndex];
        var isRowSubTotal = !(node === null || node === void 0 ? void 0 : node.isGrandTotals) && (node === null || node === void 0 ? void 0 : node.isTotals);
        // 在树状结构时，如果单元格本身是行小计，但是行小计配置又未开启时
        // 不管能否查到实际的数据，都不应该展示
        return (this.spreadsheet.options.hierarchyType === 'tree' &&
            !row.showSubTotals &&
            isRowSubTotal);
    };
    DataCell.prototype.getFormattedFieldValue = function () {
        var _a;
        if (this.shouldHideRowSubtotalData()) {
            return {
                value: null,
                // 这里使用默认的placeholder，而不是空字符串，是为了防止后续使用用户自定义的placeholder
                // 比如用户自定义 placeholder 为 0, 那行小计也会显示0，也很有迷惑性，显示 - 更为合理
                formattedValue: EMPTY_PLACEHOLDER,
            };
        }
        var _b = this.meta, rowId = _b.rowId, valueField = _b.valueField, fieldValue = _b.fieldValue, data = _b.data, id = _b.id;
        var displayFormattedValue = (_a = this.spreadsheet.dataSet.displayFormattedValueMap) === null || _a === void 0 ? void 0 : _a.get(id);
        var rowMeta = this.spreadsheet.dataSet.getFieldMeta(rowId);
        var fieldId = rowMeta ? rowId : valueField;
        var formatter = this.spreadsheet.dataSet.getFieldFormatter(fieldId);
        // TODO: 这里只用 formatter(fieldValue, this.meta) 即可, 为了保持兼容, 暂时在第三个参入传入 meta 信息
        var formattedValue = displayFormattedValue !== null && displayFormattedValue !== void 0 ? displayFormattedValue : formatter(fieldValue, data, this.meta);
        return {
            value: fieldValue,
            formattedValue: formattedValue,
        };
    };
    DataCell.prototype.getMaxTextWidth = function () {
        var width = this.getContentArea().width;
        return getMaxTextWidth(width, this.getIconStyle());
    };
    DataCell.prototype.getTextPosition = function () {
        return this.getTextAndIconPosition().text;
    };
    DataCell.prototype.getBackgroundColor = function () {
        var _a;
        var backgroundColorByCross = this.getCrossBackgroundColor(this.meta.rowIndex);
        var backgroundColor = backgroundColorByCross.backgroundColor;
        var backgroundColorOpacity = backgroundColorByCross.backgroundColorOpacity;
        if (this.shouldHideRowSubtotalData()) {
            return { backgroundColor: backgroundColor, backgroundColorOpacity: backgroundColorOpacity };
        }
        // get background condition fill color
        var bgCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.background);
        var intelligentReverseTextColor = false;
        if (bgCondition && bgCondition.mapping) {
            var attrs = this.mappingValue(bgCondition);
            if (attrs) {
                backgroundColor = attrs.fill;
                intelligentReverseTextColor = attrs.intelligentReverseTextColor;
            }
        }
        return {
            backgroundColor: backgroundColor,
            backgroundColorOpacity: backgroundColorOpacity,
            intelligentReverseTextColor: intelligentReverseTextColor,
        };
    };
    /**
     * Draw cell background
     */
    DataCell.prototype.drawBackgroundShape = function () {
        var _a = this.getBackgroundColor(), fill = _a.backgroundColor, fillOpacity = _a.backgroundColorOpacity;
        this.backgroundShape = renderRect(this, __assign(__assign({}, this.getCellArea()), { fill: fill, fillOpacity: fillOpacity }));
    };
    /**
     * 绘制hover悬停，刷选的外框
     */
    DataCell.prototype.drawInteractiveBorderShape = function () {
        // 往内缩一个像素，避免和外边框重叠
        var margin = 1;
        var _a = this.getCellArea(), x = _a.x, y = _a.y, height = _a.height, width = _a.width;
        this.stateShapes.set('interactiveBorderShape', renderRect(this, {
            x: x + margin,
            y: y + margin,
            width: width - margin * 2,
            height: height - margin * 2,
        }, {
            capture: false,
            visible: false,
        }));
    };
    /**
     * Draw interactive color
     */
    DataCell.prototype.drawInteractiveBgShape = function () {
        this.stateShapes.set('interactiveBgShape', renderRect(this, __assign({}, this.getCellArea()), {
            visible: false,
        }));
    };
    // dataCell 根据 state 改变当前样式，
    DataCell.prototype.changeRowColSelectState = function (indexType) {
        var interaction = this.spreadsheet.interaction;
        var currentIndex = get(this.meta, indexType);
        var _a = interaction.getState(), _b = _a.nodes, nodes = _b === void 0 ? [] : _b, _c = _a.cells, cells = _c === void 0 ? [] : _c;
        var isEqualIndex = false;
        // 明细表模式多级表头计算索引换一种策略
        if (this.spreadsheet.isTableMode() && nodes.length) {
            var leafs = nodes[0].hierarchy.getLeaves();
            isEqualIndex = leafs.some(function (cell, i) {
                if (nodes.some(function (node) { return node === cell; })) {
                    return i === currentIndex;
                }
                return false;
            });
        }
        else {
            isEqualIndex = __spreadArray$1(__spreadArray$1([], __read(nodes), false), __read(cells), false).some(function (cell) { return get(cell, indexType) === currentIndex; });
        }
        if (isEqualIndex) {
            this.updateByState(InteractionStateName.SELECTED);
        }
        else if (this.spreadsheet.options.interaction.selectedCellsSpotlight) {
            this.updateByState(InteractionStateName.UNSELECTED);
        }
        else {
            this.hideInteractionShape();
        }
    };
    /**
     * Render cell border controlled by verticalBorder & horizontalBorder
     * @protected
     */
    DataCell.prototype.drawBorderShape = function () {
        var _this = this;
        [CellBorderPosition.BOTTOM, CellBorderPosition.RIGHT].forEach(function (type) {
            var _a = getBorderPositionAndStyle(type, _this.getCellArea(), _this.getStyle().cell), position = _a.position, style = _a.style;
            renderLine(_this, position, style);
        });
    };
    /**
     * Find current field related condition
     * @param conditions
     */
    DataCell.prototype.findFieldCondition = function (conditions) {
        var _this = this;
        return findLast$1(conditions, function (item) {
            return item.field instanceof RegExp
                ? item.field.test(_this.meta.valueField)
                : item.field === _this.meta.valueField;
        });
    };
    /**
     * Mapping value to get condition related attrs
     * @param condition
     */
    DataCell.prototype.mappingValue = function (condition) {
        var value = this.meta.fieldValue;
        var rowDataInfo = this.spreadsheet.isTableMode()
            ? this.spreadsheet.dataSet.getCellData({
                query: { rowIndex: this.meta.rowIndex },
            })
            : this.meta.data;
        return condition === null || condition === void 0 ? void 0 : condition.mapping(value, rowDataInfo);
    };
    DataCell.prototype.updateByState = function (stateName) {
        _super.prototype.updateByState.call(this, stateName, this);
        if (stateName === InteractionStateName.UNSELECTED) {
            var interactionStateTheme = get(this.theme, "".concat(this.cellType, ".cell.interactionState.").concat(stateName));
            if (interactionStateTheme) {
                this.toggleConditionIntervalShapeOpacity(interactionStateTheme.opacity);
            }
        }
    };
    DataCell.prototype.clearUnselectedState = function () {
        _super.prototype.clearUnselectedState.call(this);
        this.toggleConditionIntervalShapeOpacity(1);
    };
    DataCell.prototype.toggleConditionIntervalShapeOpacity = function (opacity) {
        updateShapeAttr(this.conditionIntervalShape, SHAPE_STYLE_MAP.backgroundOpacity, opacity);
        updateShapeAttr(this.conditionIconShapes, SHAPE_STYLE_MAP.opacity, opacity);
    };
    DataCell.prototype.drawLeftBorder = function () {
        var _a = getBorderPositionAndStyle(CellBorderPosition.LEFT, this.getCellArea(), this.getStyle().cell), position = _a.position, style = _a.style;
        renderLine(this, position, style);
    };
    return DataCell;
}(BaseCell));

/**
 * Cell for panelGroup area
 */
var MergedCell = /** @class */ (function (_super) {
    __extends(MergedCell, _super);
    function MergedCell(spreadsheet, cells, meta) {
        return _super.call(this, meta, spreadsheet, cells) || this;
    }
    MergedCell.prototype.handleRestOptions = function () {
        var _a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _a[_i] = arguments[_i];
        }
        var _b = __read(_a, 1), cells = _b[0];
        this.cells = cells;
    };
    Object.defineProperty(MergedCell.prototype, "cellType", {
        get: function () {
            return CellTypes.MERGED_CELL;
        },
        enumerable: false,
        configurable: true
    });
    MergedCell.prototype.update = function () { };
    MergedCell.prototype.initCell = function () {
        this.resetTextAndConditionIconShapes();
        // TODO：1、交互态扩展； 2、合并后的单元格文字布局及文字内容（目前参考Excel合并后只保留第一个单元格子的数据）
        this.conditions = this.spreadsheet.options.conditions;
        this.drawBackgroundShape();
        this.drawTextShape();
    };
    /**
     * Draw merged cells background
     */
    MergedCell.prototype.drawBackgroundShape = function () {
        var allPoints = getPolygonPoints(this.cells);
        var cellTheme = this.theme.dataCell.cell;
        this.backgroundShape = renderPolygon(this, {
            points: allPoints,
            stroke: cellTheme.horizontalBorderColor,
            fill: cellTheme.backgroundColor,
            lineHeight: cellTheme.horizontalBorderWidth,
        });
    };
    /**
     * Render data text
     */
    MergedCell.prototype.drawTextShape = function () {
        if (isEmpty(this.meta)) {
            return;
        }
        if (isObject(this.meta.fieldValue)) {
            drawObjectText(this);
        }
        else {
            _super.prototype.drawTextShape.call(this);
        }
    };
    return MergedCell;
}(DataCell));

/**
 *  according to the coordinates of the starting point of the rectangle,
 * return the four sides of the rectangle in a clockwise direction.
 * [TopLeft] --- [TopRight]
 *    |               |
 * [BottomLeft] -[BottomRight]
 * @param x
 * @param y
 * @param width
 * @param height
 */
var getRectangleEdges = function (x, y, width, height) {
    var topLeft = [x, y];
    var topRight = [x + width, y];
    var bottomRight = [x + width, y + height];
    var bottomLeft = [x, y + height];
    return [
        [topLeft, topRight],
        [topRight, bottomRight],
        [bottomRight, bottomLeft],
        [bottomLeft, topLeft],
    ];
};
/**
 * return the edges without overlapping edges
 * @param edges the collection of edges
 */
var unique = function (edges) {
    var result = [];
    forEach(edges, function (edge) {
        var reverseEdge = [edge[1], edge[0]];
        if (!JSON.stringify(edges).includes(JSON.stringify(reverseEdge))) {
            result.push(edge);
        }
    });
    return result;
};
/**
 * return the edge according to the  coordinate of current edge
 * eg: curEdge: [[0,0], [100,0]] then the next edge: [[100, 0 ], [100, 100]]
 * @param curEdge the  coordinate of current edge
 * @param edges the collection of edges
 */
var getNextEdge = function (curEdge, edges) {
    return find$1(edges, function (edge) { return isEqual(edge[0], curEdge[1]); });
};
/**
 * return all the points of the polygon
 * @param cells the collection of information of cells which needed be merged
 */
var getPolygonPoints = function (cells) {
    var allEdges = [];
    cells.forEach(function (cell) {
        var meta = cell.getMeta();
        var x = meta.x, y = meta.y, width = meta.width, height = meta.height;
        allEdges = allEdges.concat(getRectangleEdges(x, y, width, height));
    });
    allEdges = unique(allEdges);
    var allPoints = [];
    var startEdge = allEdges[0];
    var curEdge = startEdge;
    var nextEdge = [];
    while (!isEqual(startEdge, nextEdge)) {
        allPoints = allPoints.concat(curEdge);
        nextEdge = getNextEdge(curEdge, allEdges);
        curEdge = nextEdge;
    }
    return allPoints;
};
/**
 * get cells on the outside of visible area through mergeCellInfo
 * @param invisibleCellInfo
 * @param sheet
 */
var getInvisibleInfo = function (invisibleCellInfo, sheet) {
    var cells = [];
    var viewMeta;
    forEach(invisibleCellInfo, function (cellInfo) {
        var _a, _b, _c;
        var meta = (_b = (_a = sheet === null || sheet === void 0 ? void 0 : sheet.facet) === null || _a === void 0 ? void 0 : _a.layoutResult) === null || _b === void 0 ? void 0 : _b.getCellMeta(cellInfo.rowIndex, cellInfo.colIndex);
        if (meta) {
            var cell = (_c = sheet === null || sheet === void 0 ? void 0 : sheet.facet) === null || _c === void 0 ? void 0 : _c.cfg.dataCell(meta);
            viewMeta = (cellInfo === null || cellInfo === void 0 ? void 0 : cellInfo.showText) ? meta : viewMeta;
            cells.push(cell);
        }
    });
    return { cells: cells, cellsMeta: viewMeta };
};
/**
 * get { cells, invisibleCellInfo, cellsMeta } in the inside of visible area through mergeCellInfo
 * @param cellsInfos
 * @param allVisibleCells
 * @returns { cells, invisibleCellInfo, cellsMeta }
 */
var getVisibleInfo = function (cellsInfos, allVisibleCells) {
    var cells = [];
    var invisibleCellInfo = [];
    var cellsMeta;
    forEach(cellsInfos, function (cellInfo) {
        var findCell = find$1(allVisibleCells, function (cell) {
            var _a;
            var meta = (_a = cell === null || cell === void 0 ? void 0 : cell.getMeta) === null || _a === void 0 ? void 0 : _a.call(cell);
            if ((meta === null || meta === void 0 ? void 0 : meta.colIndex) === (cellInfo === null || cellInfo === void 0 ? void 0 : cellInfo.colIndex) &&
                (meta === null || meta === void 0 ? void 0 : meta.rowIndex) === (cellInfo === null || cellInfo === void 0 ? void 0 : cellInfo.rowIndex)) {
                return cell;
            }
        });
        if (findCell) {
            cells.push(findCell);
            cellsMeta = (cellInfo === null || cellInfo === void 0 ? void 0 : cellInfo.showText)
                ? findCell === null || findCell === void 0 ? void 0 : findCell.getMeta()
                : cellsMeta;
        }
        else {
            invisibleCellInfo.push(cellInfo);
        }
    });
    return { cells: cells, invisibleCellInfo: invisibleCellInfo, cellsMeta: cellsMeta };
};
/**
 * get the data cell and meta that make up the mergedCell
 * @param cellsInfos
 * @param allVisibleCells
 * @param sheet
 */
var getTempMergedCell = function (allVisibleCells, sheet, cellsInfos) {
    var _a;
    if (cellsInfos === void 0) { cellsInfos = []; }
    var _b = getVisibleInfo(cellsInfos, allVisibleCells), cellsMeta = _b.cellsMeta, cells = _b.cells, invisibleCellInfo = _b.invisibleCellInfo;
    var viewMeta = cellsMeta;
    var mergedAllCells = cells;
    // some cells are invisible and some cells are visible
    var isPartiallyVisible = (invisibleCellInfo === null || invisibleCellInfo === void 0 ? void 0 : invisibleCellInfo.length) > 0 &&
        invisibleCellInfo.length < cellsInfos.length;
    // 当 MergedCell 只有部分在可视区域时，在此获取 MergedCell 不在可视区域内的 cells
    if (isPartiallyVisible) {
        var _c = getInvisibleInfo(invisibleCellInfo, sheet), invisibleCells = _c.cells, invisibleMeta = _c.cellsMeta;
        viewMeta = viewMeta || invisibleMeta;
        mergedAllCells = cells.concat(invisibleCells);
    }
    if (!isEmpty(cells) && !viewMeta) {
        viewMeta = (_a = mergedAllCells[0]) === null || _a === void 0 ? void 0 : _a.getMeta(); // 如果没有指定合并后的文本绘制的位置，默认画在选择的第一个单元格内
    }
    return {
        cells: mergedAllCells,
        viewMeta: viewMeta,
    };
};
/**
 * get the active cells' info as the default info of merged cells
 * @param sheet
 */
var getActiveCellsInfo = function (sheet) {
    var interaction = sheet.interaction;
    var cells = interaction.getActiveCells();
    var mergedCellsInfo = [];
    forEach(cells, function (cell, index) {
        var meta = cell.getMeta();
        // 在合并单元格中，第一个单元格被标标记为展示数据。
        var showText = index === 0 ? { showText: true } : {};
        mergedCellsInfo.push(__assign(__assign({}, showText), { colIndex: meta === null || meta === void 0 ? void 0 : meta.colIndex, rowIndex: meta === null || meta === void 0 ? void 0 : meta.rowIndex }));
    });
    return mergedCellsInfo;
};
/**
 * 创建 merged cell 实例
 * @param spreasheet 表格实例
 * @param cells 待合并的单元格
 * @param meta 元信息
 * @returns
 */
var getMergedCellInstance = function (spreasheet, cells, meta) {
    if (spreasheet.options.mergedCell) {
        return spreasheet.options.mergedCell(spreasheet, cells, meta);
    }
    return new MergedCell(spreasheet, cells, meta);
};
/**
 * draw the background of the merged cell
 * @param sheet the base sheet instance
 * @param cellsInfo
 * @param hideData
 */
var mergeCell = function (sheet, cellsInfo, hideData) {
    var _a;
    var mergeCellInfo = cellsInfo || getActiveCellsInfo(sheet);
    if ((mergeCellInfo === null || mergeCellInfo === void 0 ? void 0 : mergeCellInfo.length) <= 1) {
        // eslint-disable-next-line no-console
        console.error('then merged cells must be more than one');
        return;
    }
    var allVisibleCells = sheet.interaction.getPanelGroupAllDataCells();
    var _b = getTempMergedCell(allVisibleCells, sheet, mergeCellInfo), cells = _b.cells, viewMeta = _b.viewMeta;
    if (!isEmpty(cells)) {
        var mergedCellInfoList = ((_a = sheet.options) === null || _a === void 0 ? void 0 : _a.mergedCellsInfo) || [];
        mergedCellInfoList.push(mergeCellInfo);
        sheet.setOptions({
            mergedCellsInfo: mergedCellInfoList,
        });
        var meta = hideData ? undefined : viewMeta;
        sheet.panelScrollGroup.addMergeCell(getMergedCellInstance(sheet, cells, meta));
    }
};
/**
 * remove unmergedCells Info, return new mergedCell info
 * @param removeMergedCell
 * @param mergedCellsInfo
 */
var removeUnmergedCellsInfo = function (removeMergedCell, mergedCellsInfo) {
    var removeCellInfo = map(removeMergedCell.cells, function (cell) {
        return {
            colIndex: cell.getMeta().colIndex,
            rowIndex: cell.getMeta().rowIndex,
        };
    });
    return filter(mergedCellsInfo, function (mergedCellInfo) {
        var newMergedCellInfo = mergedCellInfo.map(function (info) {
            if (info.showText) {
                return {
                    colIndex: info.colIndex,
                    rowIndex: info.rowIndex,
                };
            }
            return info;
        });
        return !isEqual(newMergedCellInfo, removeCellInfo);
    });
};
/**
 * unmerge MergedCell
 * @param removedCells
 * @param sheet
 */
var unmergeCell = function (sheet, removedCells) {
    var _a, _b, _c;
    if (!removedCells || removedCells.cellType !== CellTypes.MERGED_CELL) {
        // eslint-disable-next-line no-console
        console.error("unmergeCell: the ".concat(removedCells, " is not a MergedCell"));
        return;
    }
    var newMergedCellsInfo = removeUnmergedCellsInfo(removedCells, (_a = sheet.options) === null || _a === void 0 ? void 0 : _a.mergedCellsInfo);
    if ((newMergedCellsInfo === null || newMergedCellsInfo === void 0 ? void 0 : newMergedCellsInfo.length) !== ((_c = (_b = sheet.options) === null || _b === void 0 ? void 0 : _b.mergedCellsInfo) === null || _c === void 0 ? void 0 : _c.length)) {
        sheet.setOptions({
            mergedCellsInfo: newMergedCellsInfo,
        });
        removedCells.remove(true);
    }
};
/**
 * 合并 TempMergedCell, 通过 cell.viewMeta.id 判断 TempMergedCell 是否是同一个。
 * @param TempMergedCells
 * @param otherTempMergedCells
 */
var mergeTempMergedCell = function (TempMergedCells, otherTempMergedCells) {
    var mergedTempMergedCells = {};
    __spreadArray$1(__spreadArray$1([], __read(TempMergedCells), false), __read(otherTempMergedCells), false).forEach(function (cell) {
        mergedTempMergedCells[cell.viewMeta.id] = cell;
    });
    return Object.values(mergedTempMergedCells);
};
/**
 * 将 MergedCell 转换成 TempMergedCell
 * @param oldMergedCells
 * @constructor
 */
var MergedCellConvertTempMergedCells = function (oldMergedCells) {
    return map(oldMergedCells, function (mergedCell) {
        return {
            cells: mergedCell.cells,
            viewMeta: mergedCell.getMeta(),
        };
    });
};
/**
 * 对比两个TempMergedCell，返回 mainTempMergedCells 中存在的，但是 otherTempMergedCells 中不存在的的 TempMergedCell
 * @param mainTempMergedCells
 * @param compareTempMergedCells
 */
var differenceTempMergedCells = function (mainTempMergedCells, compareTempMergedCells) {
    return differenceWith$1(mainTempMergedCells, compareTempMergedCells, function (main, compare) {
        return isEqual(main.viewMeta.id, compare.viewMeta.id);
    });
};
/**
 * update the mergedCell
 * @param sheet the base sheet instance
 */
var updateMergedCells = function (sheet, mergedCellsGroup) {
    var _a;
    var mergedCellsInfo = (_a = sheet.options) === null || _a === void 0 ? void 0 : _a.mergedCellsInfo;
    if (isEmpty(mergedCellsInfo)) {
        return;
    }
    // 可见区域的所有cells
    var allCells = sheet.interaction.getPanelGroupAllDataCells();
    if (isEmpty(allCells)) {
        return;
    }
    // allVisibleTempMergedCells 所有可视区域的 mergedCell
    var allVisibleTempMergedCells = [];
    mergedCellsInfo.forEach(function (cellsInfo) {
        var tempMergedCell = getTempMergedCell(allCells, sheet, cellsInfo);
        if (tempMergedCell.cells.length > 0) {
            allVisibleTempMergedCells.push(tempMergedCell);
        }
    });
    // 获取 oldTempMergedCells 便用后续进行 diff 操作
    var oldMergedCells = mergedCellsGroup.getChildren();
    var oldTempMergedCells = MergedCellConvertTempMergedCells(oldMergedCells);
    // compare oldTempMergedCells and allTempMergedCells, find remove MergedCells and add MergedCells
    var removeTempMergedCells = differenceTempMergedCells(oldTempMergedCells, allVisibleTempMergedCells);
    var addTempMergedCells = differenceTempMergedCells(allVisibleTempMergedCells, oldTempMergedCells);
    // remove old MergedCells
    forEach(removeTempMergedCells, function (tempMergedCell) {
        var oldMergedCell = find$1(oldMergedCells, function (mergedCell) {
            return isEqual(mergedCell.getMeta().id, tempMergedCell.viewMeta.id);
        });
        oldMergedCell === null || oldMergedCell === void 0 ? void 0 : oldMergedCell.remove(true);
    });
    // add new MergedCells
    forEach(addTempMergedCells, function (_a) {
        var cells = _a.cells, viewMeta = _a.viewMeta;
        mergedCellsGroup.add(getMergedCellInstance(sheet, cells, viewMeta));
    });
};

var getHiddenColumnFieldKey = function (field) {
    var targetFieldKey = (field.includes(ID_SEPARATOR) ? 'id' : 'field');
    return targetFieldKey;
};
/**
 * @name 获取需要隐藏的 field 转成对应的 Node
 */
var getHiddenColumnNodes = function (spreadsheet, hiddenColumnFields) {
    if (hiddenColumnFields === void 0) { hiddenColumnFields = []; }
    var columnNodes = spreadsheet.getInitColumnLeafNodes();
    return compact(hiddenColumnFields.map(function (field) {
        var targetFieldKey = getHiddenColumnFieldKey(field);
        return columnNodes.find(function (node) { return node[targetFieldKey] === field; });
    }));
};
/**
 * @name 获取隐藏列兄弟节点
 * @description 获取当前隐藏列(兼容多选) 所对应为未隐藏的兄弟节点
 * @param hideColumns 经过分组的连续隐藏列
   [ 1, 2, 3, -, -, -, (7 √), 8, 9 ]
  [ 1, 2, 3, (4 √), - ]
 */
var getHiddenColumnDisplaySiblingNode = function (spreadsheet, hiddenColumnFields) {
    if (hiddenColumnFields === void 0) { hiddenColumnFields = []; }
    if (isEmpty(hiddenColumnFields)) {
        return {
            prev: null,
            next: null,
        };
    }
    var initColumnLeafNodes = spreadsheet.getInitColumnLeafNodes();
    var hiddenColumnIndexes = getHiddenColumnNodes(spreadsheet, hiddenColumnFields).map(function (node) { return node === null || node === void 0 ? void 0 : node.colIndex; });
    var lastHiddenColumnIndex = Math.max.apply(Math, __spreadArray$1([], __read(hiddenColumnIndexes), false));
    var firstHiddenColumnIndex = Math.min.apply(Math, __spreadArray$1([], __read(hiddenColumnIndexes), false));
    var nextSiblingNode = initColumnLeafNodes.find(function (node) { return node.colIndex === lastHiddenColumnIndex + 1; });
    var prevSiblingNode = initColumnLeafNodes.find(function (node) { return node.colIndex === firstHiddenColumnIndex - 1; });
    return {
        prev: prevSiblingNode || null,
        next: nextSiblingNode || null,
    };
};
/**
 * @name 获取隐藏列组
 * @description 如果给定的隐藏列不是连续的, 比如原始列是 [1,2,3,4,5,6,7], 隐藏列是 [2,3,6], 那么其实在表格上需要显示两个展开按钮
   [[2,3],[6]]
 */
var getHiddenColumnsThunkGroup = function (columns, hiddenColumnFields) {
    if (isEmpty(hiddenColumnFields)) {
        return [];
    }
    // 上一个需要隐藏项的序号
    var prevHiddenIndex = Number.NEGATIVE_INFINITY;
    return columns.reduce(function (result, field, index) {
        if (!hiddenColumnFields.includes(field)) {
            return result;
        }
        if (index === prevHiddenIndex + 1) {
            var lastGroup = last(result);
            lastGroup.push(field);
        }
        else {
            var group = [field];
            result.push(group);
        }
        prevHiddenIndex = index;
        return result;
    }, []);
};
/**
 * @name 隐藏指定列
 * @description 1. 通过分析组件隐藏, 2. 点击列头隐藏
   存储: 1.隐藏列所对应的兄弟节点 (显示展开按钮), 2.当前隐藏列 (点击展开按钮恢复隐藏)
   重置交互: 比如选中当前列, 显示高亮背景色, 隐藏后需要取消高亮
   钩子: 提供当前被隐藏的列, 和全量的隐藏组
 */
var hideColumns = function (spreadsheet, selectedColumnFields, forceRender) {
    if (selectedColumnFields === void 0) { selectedColumnFields = []; }
    if (forceRender === void 0) { forceRender = false; }
    var renderByHiddenColumns = function (hiddenColumnFields, hiddenColumnsDetail) {
        if (hiddenColumnFields === void 0) { hiddenColumnFields = []; }
        if (hiddenColumnsDetail === void 0) { hiddenColumnsDetail = []; }
        spreadsheet.setOptions({
            interaction: {
                hiddenColumnFields: hiddenColumnFields,
            },
        });
        spreadsheet.interaction.reset();
        spreadsheet.store.set('hiddenColumnsDetail', hiddenColumnsDetail);
        spreadsheet.render(false, { reBuildHiddenColumnsDetail: false });
    };
    if (isEmpty(selectedColumnFields) && forceRender) {
        renderByHiddenColumns();
        return;
    }
    var lastHiddenColumnDetail = spreadsheet.store.get('hiddenColumnsDetail', []);
    var lastHiddenColumnFields = spreadsheet.options.interaction.hiddenColumnFields;
    if (isEqual(selectedColumnFields, lastHiddenColumnFields) && !forceRender) {
        return;
    }
    var hiddenColumnFields = uniq(__spreadArray$1(__spreadArray$1([], __read(selectedColumnFields), false), __read(lastHiddenColumnFields), false));
    var isAllNearToHiddenColumnNodes = getHiddenColumnNodes(spreadsheet, hiddenColumnFields).every(function (node, i, nodes) {
        var nextNode = nodes[i + 1];
        return !nextNode || Math.abs(node.colIndex - nextNode.colIndex) === 1;
    });
    var displaySiblingNode = getHiddenColumnDisplaySiblingNode(spreadsheet, isAllNearToHiddenColumnNodes ? hiddenColumnFields : selectedColumnFields);
    var currentHiddenColumnsInfo = {
        hideColumnNodes: getHiddenColumnNodes(spreadsheet, selectedColumnFields),
        displaySiblingNode: displaySiblingNode,
    };
    var hiddenColumnsDetail = __spreadArray$1(__spreadArray$1([], __read(lastHiddenColumnDetail), false), [
        currentHiddenColumnsInfo,
    ], false);
    spreadsheet.emit(S2Event.LAYOUT_COLS_HIDDEN, currentHiddenColumnsInfo, hiddenColumnsDetail);
    renderByHiddenColumns(hiddenColumnFields, hiddenColumnsDetail);
};
/**
 * @name 获取配置的列头
 * @description 明细表: 配置的是 field,直接使用, 透视表: 需要将 field 转成布局之后的唯一id
 */
var getColumns = function (spreadsheet) {
    var _a = spreadsheet.dataCfg.fields.columns, columns = _a === void 0 ? [] : _a;
    if (spreadsheet.isTableMode()) {
        return columns;
    }
    return spreadsheet.getInitColumnLeafNodes().map(function (_a) {
        var id = _a.id;
        return id;
    });
};
/**
 * @name 根据分组隐藏指定列
 * @description 根据配置的隐藏列自动分组, 批量隐藏
 * @param spreadsheet
 * @param hiddenColumnFields 隐藏的列头字段
 * @param forceRender 隐藏的列头字段为空时, 是否强制更新
 */
var hideColumnsByThunkGroup = function (spreadsheet, hiddenColumnFields, forceRender) {
    if (hiddenColumnFields === void 0) { hiddenColumnFields = []; }
    if (forceRender === void 0) { forceRender = false; }
    // 隐藏列为空时, 有可能是隐藏后又展开 ( [] => ['A'] => []), 所以需要更新一次, 将渲染的展开icon, 隐藏列信息等清空
    if (isEmpty(hiddenColumnFields) && forceRender) {
        hideColumns(spreadsheet, hiddenColumnFields, true);
    }
    var columns = getColumns(spreadsheet);
    var leafs = getLeafColumnsWithKey(columns);
    var hiddenColumnsGroup = getHiddenColumnsThunkGroup(leafs, hiddenColumnFields);
    hiddenColumnsGroup.forEach(function (fields) {
        hideColumns(spreadsheet, fields, forceRender);
    });
};
var isLastColumnAfterHidden = function (spreadsheet, columnField) {
    var columnLeafNodes = spreadsheet.getColumnLeafNodes();
    var initColumnLeafNodes = spreadsheet.getInitColumnLeafNodes();
    var fieldKey = getHiddenColumnFieldKey(columnField);
    return (get(last(columnLeafNodes), fieldKey) === columnField &&
        get(last(initColumnLeafNodes), fieldKey) !== columnField);
};
var getValidDisplaySiblingNode = function (displaySiblingNode) {
    return (displaySiblingNode === null || displaySiblingNode === void 0 ? void 0 : displaySiblingNode.next) || (displaySiblingNode === null || displaySiblingNode === void 0 ? void 0 : displaySiblingNode.prev);
};
var getValidDisplaySiblingNodeId = function (displaySiblingNode) {
    var node = getValidDisplaySiblingNode(displaySiblingNode);
    return node === null || node === void 0 ? void 0 : node.id;
};
var isEqualDisplaySiblingNodeId = function (displaySiblingNode, nodeId) {
    return getValidDisplaySiblingNodeId(displaySiblingNode) === nodeId;
};

var getResizeAreaAttrs = function (options) {
    var type = options.type, id = options.id, theme = options.theme, resizeAreaWidth = options.width, resizeAreaHeight = options.height, otherOptions = __rest(options, ["type", "id", "theme", "width", "height"]);
    var width = type === ResizeDirectionType.Horizontal ? theme.size : null;
    var height = type === ResizeDirectionType.Vertical ? theme.size : null;
    return {
        fill: theme.background,
        fillOpacity: theme.backgroundOpacity,
        cursor: "".concat(type, "-resize"),
        width: width,
        height: height,
        appendInfo: __assign(__assign({}, otherOptions), { isResizeArea: true, type: type, id: id, width: resizeAreaWidth, height: resizeAreaHeight, size: theme.size }),
    };
};
var getOrCreateResizeAreaGroupById = function (spreadsheet, id) {
    if (!spreadsheet.foregroundGroup) {
        return;
    }
    var existedResizeArea = spreadsheet.foregroundGroup.findById(id);
    return (existedResizeArea ||
        spreadsheet.foregroundGroup.addGroup({
            id: id,
            zIndex: FRONT_GROUND_GROUP_RESIZE_AREA_Z_INDEX,
        }));
};
var shouldAddResizeArea = function (resizeArea, resizeClipArea, scrollOffset) {
    var _a = scrollOffset !== null && scrollOffset !== void 0 ? scrollOffset : {}, _b = _a.scrollX, scrollX = _b === void 0 ? 0 : _b, _c = _a.scrollY, scrollY = _c === void 0 ? 0 : _c;
    // x轴上有重叠
    var overlapInXAxis = !(resizeArea.x - scrollX > resizeClipArea.x + resizeClipArea.width ||
        resizeArea.x + resizeArea.width - scrollX < resizeClipArea.x);
    // y轴上有重叠
    var overlapInYAxis = !(resizeArea.y - scrollY > resizeClipArea.y + resizeClipArea.height ||
        resizeArea.y + resizeArea.height - scrollY < resizeClipArea.y);
    return overlapInXAxis && overlapInYAxis;
};

var shouldShowActionIcons = function (actionIconCfg, meta, cellType) {
    if (!actionIconCfg) {
        return false;
    }
    var iconNames = actionIconCfg.iconNames, displayCondition = actionIconCfg.displayCondition, belongsCell = actionIconCfg.belongsCell;
    if (isEmpty(iconNames)) {
        return false;
    }
    if (belongsCell !== cellType) {
        return false;
    }
    if (!displayCondition) {
        // 没有展示条件参数默认全展示
        return true;
    }
    // 有任意 iconName 命中展示，则使用当前 headerActionIcon config
    return iconNames.some(function (iconName) { return displayCondition(meta, iconName); });
};
/**
 * 返回可用的 icon 配置
 * @param actionIconCfgList icon 配置列表
 * @param meta 单元格 meta
 * @param cellType 单元格类型
 * @returns icon 配置
 */
var getActionIconConfig = function (actionIconCfgList, meta, cellType) {
    var iconConfig = find$1(actionIconCfgList, function (cfg) {
        return shouldShowActionIcons(cfg, meta, cellType);
    });
    if (!iconConfig) {
        return;
    }
    // 使用配置的 displayCondition 进一步筛选需要展示的 icon
    var nextIconNames = iconConfig.iconNames;
    if (iconConfig.displayCondition) {
        nextIconNames = nextIconNames.filter(function (iconName) {
            return iconConfig.displayCondition(meta, iconName);
        });
    }
    return __assign(__assign({}, iconConfig), { iconNames: nextIconNames });
};
/**
 * 格式化行列头维度名称
 * @param meta
 * @param fieldName
 */
var formattedFieldValue = function (meta, fieldName) {
    var label = meta.label, field = meta.field;
    if (!isEqual(field, EXTRA_FIELD)) {
        return {
            formattedValue: label,
            value: label,
        };
    }
    return {
        formattedValue: fieldName || label,
        value: label,
    };
};

var isAscSort = function (sortMethod) { return toUpper(sortMethod) === 'ASC'; };
var isDescSort = function (sortMethod) { return toUpper(sortMethod) === 'DESC'; };
var couldConvertToNumber = function (a) { return !isNaN$1(Number(a)); };
/**
 * 执行排序
 * @param list - 待排序数组
 * @param sortMethod - 升、降序
 * @param key - 根据key数值排序，如果有key代表根据维度值排序，故按数字排，如果没有按照字典排
 */
var sortAction = function (list, sortMethod, key) {
    var sort = isAscSort(sortMethod) ? 1 : -1;
    var specialValues = ['-', undefined];
    return list === null || list === void 0 ? void 0 : list.sort(function (pre, next) {
        var a = pre;
        var b = next;
        if (key) {
            a = pre[key];
            b = next[key];
            if (couldConvertToNumber(a) && couldConvertToNumber(b)) {
                return (Number(a) - Number(b)) * sort;
            }
            if (a && (specialValues === null || specialValues === void 0 ? void 0 : specialValues.includes(a === null || a === void 0 ? void 0 : a.toString()))) {
                return -sort;
            }
            if (Number(a) && (specialValues === null || specialValues === void 0 ? void 0 : specialValues.includes(b === null || b === void 0 ? void 0 : b.toString()))) {
                return sort;
            }
        }
        // 没有参数 key 时，需要理解成按字典序（首字母）进行排序，用于排维度值的。（我也不理解为啥要把这两个逻辑写在一起，很容易误解
        if (!isNil(a) && !isNil(b)) {
            // 数据健全兼容，用户数据不全时，能够展示.
            return a.toString().localeCompare(b.toString(), 'zh') * sort;
        }
        if (a) {
            return sort;
        }
        return -sort;
    });
};
var mergeDataWhenASC = function (sortedValues, originValues, asc) {
    if (asc) {
        // 如果是升序，需要将无数据的项放到前面
        return sortByItems(originValues, uniq(sortedValues));
    }
    return __spreadArray$1([], __read(new Set(__spreadArray$1(__spreadArray$1([], __read(sortedValues), false), __read(originValues), false))), false);
};
var sortByCustom = function (params) {
    var sortByValues = params.sortByValues, originValues = params.originValues;
    // 从 originValues 中过滤出所有包含 sortByValue 的 id
    var idWithPre = originValues.filter(function (originItem) {
        return sortByValues.find(function (value) { return endsWith(originItem, value); });
    });
    // 将 id 拆分为父节点和目标节点
    var idListWithPre = idWithPre.map(function (idStr) {
        var ids = idStr.split(ID_SEPARATOR);
        if (ids.length > 1) {
            var parentId = ids.slice(0, ids.length - 1).join(ID_SEPARATOR);
            return [parentId, ids[ids.length - 1]];
        }
        return ids;
    });
    // 获取父节点顺序
    var parentOrder = Array.from(new Set(idListWithPre.map(function (id) { return id[0]; })));
    // 排序
    idListWithPre.sort(function (a, b) {
        var aParent = a.slice(0, a.length - 1);
        var bParent = b.slice(0, b.length - 1);
        // 父节点不同时，按 parentOrder 排序
        if (aParent.join() !== bParent.join()) {
            var aParentIndex = parentOrder.indexOf(aParent[0]);
            var bParentIndex = parentOrder.indexOf(bParent[0]);
            return aParentIndex - bParentIndex;
        }
        // 父节点相同时，按 sortByValues 排序
        var aIndex = sortByValues.indexOf(a[a.length - 1]);
        var bIndex = sortByValues.indexOf(b[b.length - 1]);
        return aIndex - bIndex;
    });
    // 拼接 id
    var sortedIdWithPre = idListWithPre.map(function (idArr) {
        return idArr.join(ID_SEPARATOR);
    });
    return getListBySorted(originValues, sortedIdWithPre);
};
var sortByFunc = function (params) {
    var originValues = params.originValues, measureValues = params.measureValues, sortParam = params.sortParam, dataSet = params.dataSet;
    var sortFunc = sortParam.sortFunc, sortFieldId = sortParam.sortFieldId, sortMethod = sortParam.sortMethod;
    var sortResult = sortFunc(__assign({ data: measureValues }, sortParam));
    if (!(sortResult === null || sortResult === void 0 ? void 0 : sortResult.length)) {
        return originValues;
    }
    if ((dataSet.fields.rows.indexOf(sortFieldId) > 0 ||
        dataSet.fields.columns.indexOf(sortFieldId) > 0) &&
        !includes(sortResult[0], ID_SEPARATOR)) {
        /**
         * 当被排序字段为 行、列维度的非首维度，且用户返回的结果没有 [&] 连接符，把使用 sortResult 按照手动排序进行兜底处理
         * 如 行维度=[province, city]，sortFieldId=city
         * sortResult 返回的为 ['成都', '杭州']，而不是 ['浙江[&]杭州', '四川[&]成都']
         */
        return sortByCustom({
            sortByValues: sortResult,
            originValues: originValues,
        });
    }
    // 用户返回的 sortResult 可能是不全的，需要用原始数据补全
    return mergeDataWhenASC(sortResult, originValues, isAscSort(sortMethod));
};
var sortByMethod = function (params) {
    var sortParam = params.sortParam, measureValues = params.measureValues, originValues = params.originValues, dataSet = params.dataSet;
    var sortByMeasure = sortParam.sortByMeasure, query = sortParam.query, sortFieldId = sortParam.sortFieldId, sortMethod = sortParam.sortMethod;
    var _a = dataSet.fields, rows = _a.rows, columns = _a.columns;
    var isInRows = rows.includes(sortFieldId);
    var result;
    if (sortByMeasure) {
        var dimensions = sortAction(measureValues, sortMethod, sortByMeasure === TOTAL_VALUE ? query[EXTRA_FIELD] : sortByMeasure);
        result = getDimensionsWithParentPath(sortFieldId, isInRows ? rows : getLeafColumnsWithKey(columns), dimensions);
    }
    else {
        result = map(sortAction(measureValues, sortMethod));
    }
    return mergeDataWhenASC(result, originValues, isAscSort(sortMethod));
};
var processSort = function (params) {
    var sortParam = params.sortParam, originValues = params.originValues, measureValues = params.measureValues, dataSet = params.dataSet;
    var sortFunc = sortParam.sortFunc, sortMethod = sortParam.sortMethod, sortBy = sortParam.sortBy;
    var result = originValues;
    var sortActionParams = {
        originValues: originValues,
        measureValues: measureValues,
        sortParam: sortParam,
        dataSet: dataSet,
    };
    if (sortFunc) {
        result = sortByFunc(sortActionParams);
    }
    else if (sortBy) {
        // 自定义列表
        result = sortByCustom({ sortByValues: sortBy, originValues: originValues });
    }
    else if (isAscSort(sortMethod) || isDescSort(sortMethod)) {
        // 如果是升序，需要将无数据的项放到前面
        result = sortByMethod(sortActionParams);
    }
    return result;
};
/**
 * 生成 getTotalValue (前端计算）所需的 params
 * @param originValue
 * @param fields
 * @param sortFieldId
 */
var createTotalParams = function (originValue, fields, sortFieldId) {
    var _a;
    var totalParams = {};
    var isMultipleDimensionValue = includes(originValue, ID_SEPARATOR);
    if (isMultipleDimensionValue) {
        // 获取行/列小计时，需要将所有行/列维度的值作为 params
        var realOriginValue = split(originValue, ID_SEPARATOR);
        var keys_1 = ((_a = fields === null || fields === void 0 ? void 0 : fields.rows) === null || _a === void 0 ? void 0 : _a.includes(sortFieldId))
            ? fields.rows
            : getLeafColumnsWithKey(fields.columns);
        for (var i = 0; i <= indexOf(keys_1, sortFieldId); i++) {
            totalParams[keys_1[i]] = realOriginValue[i];
        }
    }
    else {
        totalParams[sortFieldId] = originValue;
    }
    return totalParams;
};
var filterExtraField = function (fields) {
    return fields.filter(function (field) { return field !== EXTRA_FIELD; });
};
/**
 * 获取 “按数值排序” 的排序参考数据
 *
 * 本函数可用以下结构的交叉表理解
 * rows：province、city
 * cols：type、subType
 * vals：price、account
 */
var getSortByMeasureValues = function (params) {
    var dataSet = params.dataSet, sortParam = params.sortParam, originValues = params.originValues;
    var fields = dataSet.fields;
    var sortByMeasure = sortParam.sortByMeasure, query = sortParam.query, sortFieldId = sortParam.sortFieldId;
    if (sortByMeasure !== TOTAL_VALUE) {
        var dataList_1 = dataSet.getMultiData(query, {
            queryType: QueryDataType.DetailOnly,
        });
        return dataList_1;
    }
    var dataList = dataSet.getMultiData(query, {
        queryType: QueryDataType.All,
    });
    // 按 query 查出所有数据
    var columns = getLeafColumnsWithKey(fields.columns);
    /**
     * 按汇总值进行排序
     * 需要过滤出符合要求的 “汇总数据”
     * 因为 getMultiData 会查询出 query 及其子维度的所有数据
     * 如 query={ type: 'xx' } 会包含 { type: 'xx', subType: '*' } 的数据
     */
    var isSortFieldInRow = includes(fields.rows, sortFieldId);
    // 排序字段所在一侧的全部字段
    var sortFields = filterExtraField(isSortFieldInRow ? fields.rows : columns);
    // 与排序交叉的另一侧全部字段
    var oppositeFields = filterExtraField(isSortFieldInRow ? columns : fields.rows);
    var fieldAfterSortField = sortFields[sortFields.indexOf(sortFieldId) + 1];
    var queryKeys = keys(query);
    var missedOppositeFields = oppositeFields.filter(function (field) {
        return !queryKeys.includes(field);
    });
    var totalDataList = dataList.filter(function (dataItem) {
        var dataItemKeys = new Set(Object.keys(dataItem[ORIGIN_FIELD]));
        if (!dataItemKeys.has(sortFieldId)) {
            // 若排序数据中都不含被排序字段，则过滤
            // 如按`省`排序，query={[EXTRA_FIELD]: 'price'} 时
            // 查询出的数据会包含 “行总计x列总计” 数据，需要过滤
            return false;
        }
        if (dataItemKeys.has(fieldAfterSortField)) {
            // 若排序数据包含`排序字段`的后一个维度字段，则过滤
            // 不需要比排序字段更 “明细” 的数据，只需取到 sortFieldId 当级的汇总
            return false;
        }
        // 当排序字段这一侧的维度匹配完成
        // 另一侧维度参考 query 中的维度缺失情况，过滤出汇总数据即可
        // 如 query={ type: 'xx',EXTRA_FIELD=price }，代表了最高可以取到 type 的小计汇总数据
        var allMissed = missedOppositeFields.every(function (missedField) {
            return !dataItemKeys.has(missedField);
        });
        // 返回符合要求的汇总数据
        return allMissed;
    });
    if (!isEmpty(totalDataList)) {
        return totalDataList;
    }
    /**
     * 无汇总值的兜底
     * 按前端的小计，总计排序
     */
    return compact(map(originValues, function (originValue) {
        var totalParams = createTotalParams(originValue, fields, sortFieldId);
        return dataSet.getTotalValue(__assign(__assign({}, query), totalParams));
    }));
};
var handleSortAction = function (params) {
    var dataSet = params.dataSet, sortParam = params.sortParam, originValues = params.originValues, isSortByMeasure = params.isSortByMeasure;
    var measureValues;
    if (isSortByMeasure) {
        // 根据指标排序，需要首先找到指标的对应的值
        measureValues = getSortByMeasureValues(params);
    }
    else {
        // 其他都是维度本身的排序方式
        measureValues = originValues;
    }
    return processSort({
        sortParam: sortParam,
        originValues: originValues,
        measureValues: measureValues,
        dataSet: dataSet,
    });
};
var getSortTypeIcon = function (sortParam, isSortCell) {
    if (sortParam === null || sortParam === void 0 ? void 0 : sortParam.sortMethod) {
        if (isAscSort(sortParam === null || sortParam === void 0 ? void 0 : sortParam.sortMethod)) {
            return 'groupAsc';
        }
        if (isDescSort(sortParam === null || sortParam === void 0 ? void 0 : sortParam.sortMethod)) {
            return 'groupDesc';
        }
    }
    if (isSortCell) {
        return 'SortDown';
    }
};
/**
 * 对 pivot meta 中的内容进行排序，返回新的 sorted pivot meta
 */
var getSortedPivotMeta = function (params) {
    var e_1, _a;
    var pivotMeta = params.pivotMeta, dimensions = params.dimensions, sortedDimensionValues = params.sortedDimensionValues, sortFieldId = params.sortFieldId;
    var rootContainer = {
        children: pivotMeta,
    };
    var metaValueList = [rootContainer];
    try {
        for (var dimensions_1 = __values(dimensions), dimensions_1_1 = dimensions_1.next(); !dimensions_1_1.done; dimensions_1_1 = dimensions_1.next()) {
            var dimension = dimensions_1_1.value;
            if (dimension !== sortFieldId) {
                metaValueList = flatMap(metaValueList, function (metaValue) {
                    return __spreadArray$1([], __read(metaValue.children.values()), false);
                });
            }
            else {
                metaValueList.forEach(function (metaValue) {
                    var values = __spreadArray$1([], __read(metaValue.children.values()), false);
                    var entities = sortBy$1(values, function (value) {
                        return indexOf(sortedDimensionValues, value.id);
                    }).map(function (value) { return [value.value, value]; });
                    metaValue.children = new Map(entities);
                });
                break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (dimensions_1_1 && !dimensions_1_1.done && (_a = dimensions_1.return)) _a.call(dimensions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return rootContainer.children;
};

var HeaderCell = /** @class */ (function (_super) {
    __extends(HeaderCell, _super);
    function HeaderCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderCell.prototype.handleRestOptions = function () {
        var _a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _a[_i] = arguments[_i];
        }
        var _b = __read(_a, 1), headerConfig = _b[0];
        this.headerConfig = __assign({}, headerConfig);
        var _c = this.meta, value = _c.value, query = _c.query;
        var sortParams = this.spreadsheet.dataCfg.sortParams;
        var isSortCell = this.isSortCell(); // 改单元格是否为需要展示排序 icon 单元格
        var sortParam = find$1(__spreadArray$1([], __read(sortParams), false).reverse(), function (item) {
            return isSortCell &&
                (item === null || item === void 0 ? void 0 : item.sortByMeasure) === value &&
                isEqual(get(item, 'query'), query);
        });
        var type = getSortTypeIcon(sortParam, isSortCell);
        this.headerConfig.sortParam = __assign(__assign(__assign({}, this.headerConfig.sortParam), (sortParam || { query: query })), { type: type });
    };
    HeaderCell.prototype.initCell = function () {
        this.resetTextAndConditionIconShapes();
        this.actionIcons = [];
        this.hasDefaultHiddenIcon = false;
    };
    HeaderCell.prototype.getTreeIcon = function () {
        return this.treeIcon;
    };
    HeaderCell.prototype.getInteractiveBorderShapeStyle = function (border) {
        var _a = this.getCellArea(), x = _a.x, y = _a.y, height = _a.height, width = _a.width;
        return {
            x: x + border,
            y: y + border,
            width: width - border * 2,
            height: height - border * 2,
        };
    };
    HeaderCell.prototype.getFormattedFieldValue = function () {
        var _a = this.meta, label = _a.label, isTotalRoot = _a.isTotalRoot, isGrandTotals = _a.isGrandTotals;
        var formatter = this.spreadsheet.dataSet.getFieldFormatter(this.meta.field);
        // 如果是 table mode，列头不需要被格式化
        // 树状模式下，小计是父维度本身，需要被格式化，此时只有总计才不需要被格式化
        // 平铺模式下，总计/小计 文字单元格，不需要被格式化
        // 自定义树模式下，没有总计小计概念，isTotals 均为 false, 所以不受影响
        var shouldFormat = true;
        if (this.spreadsheet.isTableMode()) {
            shouldFormat = false;
        }
        else if (this.spreadsheet.isHierarchyTreeType()) {
            shouldFormat = !(isGrandTotals && isTotalRoot);
        }
        else {
            shouldFormat = !isTotalRoot;
        }
        var formattedValue = shouldFormat && formatter
            ? formatter(label, undefined, this.meta)
            : label;
        return {
            formattedValue: formattedValue,
            value: label,
        };
    };
    /**
     * 获取操作 icons
     */
    HeaderCell.prototype.getActionIconCfg = function () {
        return getActionIconConfig(this.spreadsheet.options.headerActionIcons, this.meta, this.cellType);
    };
    HeaderCell.prototype.showSortIcon = function () {
        var _a = this.spreadsheet, options = _a.options, dataCfg = _a.dataCfg;
        var isEmptyValues = isEmpty(dataCfg.fields.values);
        if (options.showDefaultHeaderActionIcon && !isEmptyValues) {
            var sortParam = this.headerConfig.sortParam;
            var query = this.meta.query;
            // sortParam的query，和type本身可能会 undefined
            return (query &&
                isEqual(sortParam === null || sortParam === void 0 ? void 0 : sortParam.query, query) &&
                (sortParam === null || sortParam === void 0 ? void 0 : sortParam.type) &&
                (sortParam === null || sortParam === void 0 ? void 0 : sortParam.type) !== 'none');
        }
        return false;
    };
    HeaderCell.prototype.getActionIconsCount = function () {
        if (this.showSortIcon()) {
            return 1;
        }
        var actionIconCfg = this.getActionIconCfg();
        if (actionIconCfg) {
            var iconNames = actionIconCfg.iconNames;
            return iconNames.length;
        }
        return 0;
    };
    HeaderCell.prototype.getActionIconsWidth = function () {
        var _a = this.getStyle().icon, size = _a.size, margin = _a.margin;
        return (size + margin.left) * this.getActionIconsCount();
    };
    // 绘制排序icon
    HeaderCell.prototype.drawSortIcons = function () {
        var _this = this;
        if (!this.showSortIcon()) {
            return;
        }
        var _a = this.getStyle(), icon = _a.icon, text = _a.text;
        var fill = this.getTextConditionFill(text);
        var sortParam = this.headerConfig.sortParam;
        var position = this.getIconPosition();
        var sortIcon = new GuiIcon(__assign(__assign({ name: get(sortParam, 'type', 'none') }, position), { width: icon.size, height: icon.size, fill: fill }));
        sortIcon.on('click', function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_ACTION_ICON_CLICK, event);
            _this.spreadsheet.handleGroupSort(event, _this.meta);
        });
        this.add(sortIcon);
        this.actionIcons.push(sortIcon);
    };
    // 是否设置为默认隐藏 action icon，默认隐藏的交互为 hover 后可见
    HeaderCell.prototype.hasDefaultHideActionIcon = function () {
        return this.hasDefaultHiddenIcon;
    };
    HeaderCell.prototype.addActionIcon = function (options) {
        var _this = this;
        var x = options.x, y = options.y, iconName = options.iconName, defaultHide = options.defaultHide, action = options.action, onClick = options.onClick, onHover = options.onHover;
        var _a = this.getStyle(), iconTheme = _a.icon, textTheme = _a.text;
        var fill = this.getTextConditionFill(textTheme);
        // 主题 icon 颜色配置优先，若无则默认为文本条件格式颜色优先
        var actionIconColor = (iconTheme === null || iconTheme === void 0 ? void 0 : iconTheme.fill) || fill;
        var icon = new GuiIcon({
            name: iconName,
            x: x,
            y: y,
            width: iconTheme === null || iconTheme === void 0 ? void 0 : iconTheme.size,
            height: iconTheme === null || iconTheme === void 0 ? void 0 : iconTheme.size,
            fill: actionIconColor,
        });
        // 默认隐藏，hover 可见
        icon.set('visible', !defaultHide);
        icon.on('mouseover', function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_ACTION_ICON_HOVER, event);
            onHover === null || onHover === void 0 ? void 0 : onHover({
                hovering: true,
                iconName: iconName,
                meta: _this.meta,
                event: event,
            });
        });
        icon.on('mouseleave', function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_ACTION_ICON_HOVER_OFF, event);
            onHover === null || onHover === void 0 ? void 0 : onHover({
                hovering: false,
                iconName: iconName,
                meta: _this.meta,
                event: event,
            });
        });
        icon.on('click', function (event) {
            var _a;
            _this.spreadsheet.emit(S2Event.GLOBAL_ACTION_ICON_CLICK, event);
            (_a = (onClick || action)) === null || _a === void 0 ? void 0 : _a({
                iconName: iconName,
                meta: _this.meta,
                event: event,
            });
        });
        this.actionIcons.push(icon);
        this.add(icon);
    };
    HeaderCell.prototype.drawActionIcons = function () {
        var _this = this;
        if (this.showSortIcon()) {
            this.drawSortIcons();
            return;
        }
        var actionIconCfg = this.getActionIconCfg();
        if (!actionIconCfg) {
            return;
        }
        var iconNames = actionIconCfg.iconNames, action = actionIconCfg.action, onClick = actionIconCfg.onClick, onHover = actionIconCfg.onHover, defaultHide = actionIconCfg.defaultHide;
        var position = this.getIconPosition(iconNames.length);
        var _a = this.getStyle().icon, size = _a.size, margin = _a.margin;
        forEach(iconNames, function (iconName, i) {
            var x = position.x + i * size + i * margin.left;
            var y = position.y;
            var iconDefaultHide = typeof defaultHide === 'function'
                ? defaultHide(_this.meta, iconName)
                : defaultHide;
            if (iconDefaultHide) {
                _this.hasDefaultHiddenIcon = true;
            }
            _this.addActionIcon({
                iconName: iconName,
                x: x,
                y: y,
                defaultHide: iconDefaultHide,
                action: action,
                onClick: onClick,
                onHover: onHover,
            });
        });
    };
    HeaderCell.prototype.drawBackgroundShape = function () {
        var _a = this.getBackgroundColor(), backgroundColor = _a.backgroundColor, backgroundColorOpacity = _a.backgroundColorOpacity;
        this.backgroundShape = renderRect(this, __assign(__assign({}, this.getCellArea()), { fill: backgroundColor, fillOpacity: backgroundColorOpacity }));
    };
    HeaderCell.prototype.isSortCell = function () {
        var _a, _b, _c;
        // 数值置于列头, 排序 icon 绘制在列头叶子节点; 置于行头, 排序 icon 绘制在行头叶子节点
        var isValueInCols = (_b = (_a = this.meta.spreadsheet) === null || _a === void 0 ? void 0 : _a.isValueInCols) === null || _b === void 0 ? void 0 : _b.call(_a);
        var isMaxLevel = this.meta.level === ((_c = this.meta.hierarchy) === null || _c === void 0 ? void 0 : _c.maxLevel);
        if (isValueInCols) {
            return isMaxLevel && this.cellType === CellTypes.COL_CELL;
        }
        return isMaxLevel && this.cellType === CellTypes.ROW_CELL;
    };
    HeaderCell.prototype.handleByStateName = function (cells, stateName) {
        if (includeCell(cells, this)) {
            this.updateByState(stateName);
        }
    };
    HeaderCell.prototype.handleSearchResult = function (cells) {
        if (!includeCell(cells, this)) {
            return;
        }
        var targetCell = find$1(cells, function (cell) { return cell === null || cell === void 0 ? void 0 : cell.isTarget; });
        if (targetCell.id === this.getMeta().id) {
            this.updateByState(InteractionStateName.HIGHLIGHT);
        }
        else {
            this.updateByState(InteractionStateName.SEARCH_RESULT);
        }
    };
    HeaderCell.prototype.handleHover = function (cells) {
        var _a;
        if (includeCell(cells, this)) {
            this.updateByState(InteractionStateName.HOVER);
            if (this.hasDefaultHideActionIcon()) {
                // hover 只会有一个 cell
                this.toggleActionIcon((_a = cells === null || cells === void 0 ? void 0 : cells[0]) === null || _a === void 0 ? void 0 : _a.id);
            }
        }
    };
    HeaderCell.prototype.handleSelect = function (cells, nodes) {
        if (includeCell(cells, this)) {
            this.updateByState(InteractionStateName.SELECTED);
        }
        var selectedNodeIds = map(nodes, 'id');
        if (includes(selectedNodeIds, this.meta.id)) {
            this.updateByState(InteractionStateName.SELECTED);
        }
    };
    HeaderCell.prototype.getTextStyle = function () {
        var _a = this.getStyle(), text = _a.text, bolderText = _a.bolderText, measureText = _a.measureText;
        var style;
        if (this.isMeasureField()) {
            style = measureText || text;
        }
        else if (this.isBolderText()) {
            style = bolderText;
        }
        else {
            style = text;
        }
        var fill = this.getTextConditionFill(style);
        return __assign(__assign({}, style), { fill: fill });
    };
    HeaderCell.prototype.getBackgroundColor = function () {
        var _a;
        var _b = ((_a = this.getStyle()) === null || _a === void 0 ? void 0 : _a.cell) || {}, backgroundColor = _b.backgroundColor, backgroundColorOpacity = _b.backgroundColorOpacity;
        return this.getBackgroundColorByCondition(backgroundColor, backgroundColorOpacity);
    };
    HeaderCell.prototype.getBackgroundColorByCondition = function (backgroundColor, backgroundColorOpacity) {
        var _a;
        var fill = backgroundColor;
        // get background condition fill color
        var bgCondition = this.findFieldCondition((_a = this.conditions) === null || _a === void 0 ? void 0 : _a.background);
        if (bgCondition && bgCondition.mapping) {
            var attrs = this.mappingValue(bgCondition);
            if (attrs) {
                fill = attrs.fill;
            }
        }
        return { backgroundColor: fill, backgroundColorOpacity: backgroundColorOpacity };
    };
    HeaderCell.prototype.toggleActionIcon = function (id) {
        if (this.getMeta().id === id) {
            var visibleActionIcons_1 = [];
            forEach(this.actionIcons, function (icon) {
                // 仅存储当前不可见的 icon
                if (!icon.get('visible')) {
                    icon.set('visible', true);
                    visibleActionIcons_1.push(icon);
                }
            });
            this.spreadsheet.store.set('visibleActionIcons', visibleActionIcons_1);
        }
    };
    HeaderCell.prototype.update = function () {
        var interaction = this.spreadsheet.interaction;
        var stateInfo = interaction === null || interaction === void 0 ? void 0 : interaction.getState();
        var cells = interaction === null || interaction === void 0 ? void 0 : interaction.getCells([
            CellTypes.CORNER_CELL,
            CellTypes.COL_CELL,
            CellTypes.ROW_CELL,
        ]);
        if (!head(cells)) {
            return;
        }
        switch (stateInfo === null || stateInfo === void 0 ? void 0 : stateInfo.stateName) {
            case InteractionStateName.SELECTED:
            case InteractionStateName.BRUSH_SELECTED:
                this.handleSelect(cells, stateInfo === null || stateInfo === void 0 ? void 0 : stateInfo.nodes);
                break;
            case InteractionStateName.HOVER_FOCUS:
            case InteractionStateName.HOVER:
                this.handleHover(cells);
                break;
            case InteractionStateName.SEARCH_RESULT:
                this.handleSearchResult(cells);
                break;
            default:
                this.handleByStateName(cells, stateInfo === null || stateInfo === void 0 ? void 0 : stateInfo.stateName);
                break;
        }
    };
    HeaderCell.prototype.updateByState = function (stateName) {
        _super.prototype.updateByState.call(this, stateName, this);
    };
    HeaderCell.prototype.hideInteractionShape = function () {
        _super.prototype.hideInteractionShape.call(this);
    };
    HeaderCell.prototype.isMeasureField = function () {
        return [EXTRA_FIELD, EXTRA_COLUMN_FIELD].includes(this.meta.field);
    };
    HeaderCell.prototype.mappingValue = function (condition) {
        var value = this.getMeta().label;
        return condition === null || condition === void 0 ? void 0 : condition.mapping(value, this.meta);
    };
    HeaderCell.prototype.findFieldCondition = function (conditions) {
        var _this = this;
        return findLast$1(conditions, function (item) {
            return item.field instanceof RegExp
                ? item.field.test(_this.meta.field)
                : item.field === _this.meta.field;
        });
    };
    return HeaderCell;
}(BaseCell));

var ColCell = /** @class */ (function (_super) {
    __extends(ColCell, _super);
    function ColCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ColCell.prototype, "cellType", {
        get: function () {
            return CellTypes.COL_CELL;
        },
        enumerable: false,
        configurable: true
    });
    ColCell.prototype.initCell = function () {
        _super.prototype.initCell.call(this);
        // 1、draw rect background
        this.drawBackgroundShape();
        // interactive background shape
        this.drawInteractiveBgShape();
        // interactive cell border shape
        this.drawInteractiveBorderShape();
        // draw text
        this.drawTextShape();
        // 绘制字段标记 -- icon
        this.drawConditionIconShapes();
        // draw action icons
        this.drawActionIcons();
        // draw borders
        this.drawBorders();
        // draw resize ares
        this.drawResizeArea();
        this.addExpandColumnIconShapes();
        this.update();
    };
    // 交互使用的背景色
    ColCell.prototype.drawInteractiveBgShape = function () {
        this.stateShapes.set('interactiveBgShape', renderRect(this, __assign({}, this.getCellArea()), {
            visible: false,
        }));
    };
    /**
     * 绘制hover悬停，刷选的外框
     */
    ColCell.prototype.drawInteractiveBorderShape = function () {
        // 往内缩一个像素，避免和外边框重叠
        var margin = 2;
        this.stateShapes.set('interactiveBorderShape', renderRect(this, this.getInteractiveBorderShapeStyle(margin), {
            visible: false,
        }));
    };
    ColCell.prototype.getMaxTextWidth = function () {
        var width = this.getContentArea().width;
        return width - this.getActionIconsWidth();
    };
    ColCell.prototype.getIconPosition = function () {
        if (this.meta.isLeaf) {
            return _super.prototype.getIconPosition.call(this, this.getActionIconsCount());
        }
        // 非叶子节点，因 label 滚动展示，需要适配不同 align情况
        var iconStyle = this.getIconStyle();
        var iconMarginLeft = iconStyle.margin.left;
        var textStyle = this.getTextStyle();
        var position = this.textPosition;
        var textX = position.x;
        var y = position.y - iconStyle.size / 2;
        if (textStyle.textAlign === 'left') {
            /**
             * textX          x
             *   |            |
             *   v            v
             *   +---------+  +----+
             *   |  text   |--|icon|
             *   +---------+  +----+
             */
            return {
                x: textX + this.actualTextWidth + iconMarginLeft,
                y: y,
            };
        }
        if (textStyle.textAlign === 'right') {
            /**
             *         textX  x
             *             |  |
             *             v  v
             *   +---------+  +----+
             *   |  text   |--|icon|
             *   +---------+  +----+
             */
            return {
                x: textX + iconMarginLeft,
                y: y,
            };
        }
        /**
         *      textX     x
         *        |       |
         *        v       v
         *   +---------+  +----+
         *   |  text   |--|icon|
         *   +---------+  +----+
         */
        return {
            x: textX + this.actualTextWidth / 2 + iconMarginLeft,
            y: y,
        };
    };
    ColCell.prototype.isBolderText = function () {
        // 非叶子节点、小计总计，均为粗体
        var _a = this.meta, isLeaf = _a.isLeaf, isTotals = _a.isTotals;
        if (isTotals || !isLeaf) {
            return true;
        }
        return false;
    };
    ColCell.prototype.getTextPosition = function () {
        var _a;
        var isLeaf = this.meta.isLeaf;
        var _b = this.headerConfig, width = _b.width, scrollContainsRowHeader = _b.scrollContainsRowHeader, cornerWidth = _b.cornerWidth, scrollX = _b.scrollX;
        var textStyle = this.getTextStyle();
        var contentBox = this.getContentArea();
        var iconStyle = this.getIconStyle();
        if (isLeaf) {
            return getTextAndFollowingIconPosition(contentBox, textStyle, this.actualTextWidth, iconStyle, this.getActionIconsCount()).text;
        }
        /**
         *  p(x, y)
         *  +----------------------+            x
         *  |                    +--------------->
         *  | viewport           | |ColCell  |
         *  |                    |-|---------+
         *  +--------------------|-+
         *                       |
         *                     y |
         *                       v
         *
         * 将 viewport 坐标(p)映射到 col header 的坐标体系中，简化计算逻辑
         *
         */
        var viewport = {
            start: scrollX - (scrollContainsRowHeader ? cornerWidth : 0),
            width: width + (scrollContainsRowHeader ? cornerWidth : 0),
        };
        var textAlign = this.getTextStyle().textAlign;
        var adjustedViewport = adjustColHeaderScrollingViewport(viewport, textAlign, (_a = this.getStyle().cell) === null || _a === void 0 ? void 0 : _a.padding);
        var actionIconSpace = this.getActionIconsWidth();
        var textAndIconSpace = this.actualTextWidth + actionIconSpace;
        var textAreaRange = getTextAreaRange(adjustedViewport, { start: contentBox.x, width: contentBox.width }, textAndIconSpace);
        // textAreaRange.start 是 text&icon 整个区域的 center
        // 此处按实际样式(left or right)调整计算出的文字绘制点
        var textX = adjustColHeaderScrollingTextPosition(textAreaRange, this.actualTextWidth, actionIconSpace, textAlign);
        var textY = contentBox.y + contentBox.height / 2;
        this.textPosition = { x: textX, y: textY };
        return this.textPosition;
    };
    ColCell.prototype.getActionIconsWidth = function () {
        var _a = this.getStyle().icon, size = _a.size, margin = _a.margin;
        var iconCount = this.getActionIconsCount();
        return ((size + margin.left) * iconCount + (iconCount > 0 ? margin.right : 0));
    };
    ColCell.prototype.getColResizeAreaKey = function () {
        return this.meta.key;
    };
    ColCell.prototype.getColResizeArea = function () {
        return getOrCreateResizeAreaGroupById(this.spreadsheet, KEY_GROUP_COL_RESIZE_AREA);
    };
    ColCell.prototype.getHorizontalResizeAreaName = function () {
        return "".concat(HORIZONTAL_RESIZE_AREA_KEY_PRE).concat(this.meta.key);
    };
    ColCell.prototype.drawHorizontalResizeArea = function () {
        var _a, _b;
        // 隐藏列头时不绘制水平热区 https://github.com/antvis/S2/issues/1603
        var isHiddenCol = ((_b = (_a = this.spreadsheet.options.style) === null || _a === void 0 ? void 0 : _a.colCfg) === null || _b === void 0 ? void 0 : _b.height) === 0;
        if (isHiddenCol ||
            !this.shouldDrawResizeAreaByType('colCellVertical', this)) {
            return;
        }
        var _c = this.headerConfig, cornerWidth = _c.cornerWidth, headerWidth = _c.viewportWidth;
        var _d = this.meta, y = _d.y, height = _d.height;
        var resizeStyle = this.getResizeAreaStyle();
        var resizeArea = this.getColResizeArea();
        var resizeAreaName = this.getHorizontalResizeAreaName();
        var existedHorizontalResizeArea = resizeArea.find(function (element) { return element.attrs.name === resizeAreaName; });
        // 如果已经绘制当前列高调整热区热区，则不再绘制
        if (existedHorizontalResizeArea) {
            return;
        }
        var resizeAreaWidth = cornerWidth + headerWidth;
        // 列高调整热区
        resizeArea.addShape('rect', {
            attrs: __assign(__assign({}, getResizeAreaAttrs({
                theme: resizeStyle,
                type: ResizeDirectionType.Vertical,
                id: this.getColResizeAreaKey(),
                effect: ResizeAreaEffect.Field,
                offsetX: 0,
                offsetY: y,
                width: resizeAreaWidth,
                height: height,
                meta: this.meta,
            })), { name: resizeAreaName, x: 0, y: y + height - resizeStyle.size / 2, width: resizeAreaWidth }),
        });
    };
    ColCell.prototype.shouldAddVerticalResizeArea = function () {
        var _a = this.meta, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var _b = this.headerConfig, scrollX = _b.scrollX, scrollY = _b.scrollY, scrollContainsRowHeader = _b.scrollContainsRowHeader, cornerWidth = _b.cornerWidth, headerHeight = _b.height, headerWidth = _b.width;
        var resizeStyle = this.getResizeAreaStyle();
        var resizeAreaBBox = {
            x: x + width - resizeStyle.size / 2,
            y: y,
            width: resizeStyle.size,
            height: height,
        };
        var resizeClipAreaBBox = {
            x: scrollContainsRowHeader ? -cornerWidth : 0,
            y: 0,
            width: scrollContainsRowHeader ? cornerWidth + headerWidth : headerWidth,
            height: headerHeight,
        };
        return shouldAddResizeArea(resizeAreaBBox, resizeClipAreaBBox, {
            scrollX: scrollX,
            scrollY: scrollY,
        });
    };
    ColCell.prototype.getVerticalResizeAreaOffset = function () {
        var _a = this.meta, x = _a.x, y = _a.y;
        var _b = this.headerConfig, scrollX = _b.scrollX, position = _b.position;
        return {
            x: position.x + x - scrollX,
            y: position.y + y,
        };
    };
    ColCell.prototype.drawVerticalResizeArea = function () {
        if (!this.meta.isLeaf ||
            !this.shouldDrawResizeAreaByType('colCellHorizontal', this)) {
            return;
        }
        var _a = this.meta, label = _a.label, width = _a.width, height = _a.height;
        var resizeStyle = this.getResizeAreaStyle();
        var resizeArea = this.getColResizeArea();
        if (!this.shouldAddVerticalResizeArea()) {
            return;
        }
        var _b = this.getVerticalResizeAreaOffset(), offsetX = _b.x, offsetY = _b.y;
        // 列宽调整热区
        // 基准线是根据container坐标来的，因此把热区画在container
        resizeArea.addShape('rect', {
            attrs: __assign(__assign({}, getResizeAreaAttrs({
                theme: resizeStyle,
                type: ResizeDirectionType.Horizontal,
                effect: ResizeAreaEffect.Cell,
                id: label,
                offsetX: offsetX,
                offsetY: offsetY,
                width: width,
                height: height,
                meta: this.meta,
            })), { x: offsetX + width - resizeStyle.size / 2, y: offsetY, height: height }),
        });
    };
    // 绘制热区
    ColCell.prototype.drawResizeArea = function () {
        this.drawHorizontalResizeArea();
        this.drawVerticalResizeArea();
    };
    ColCell.prototype.drawHorizontalBorder = function () {
        var _a = getBorderPositionAndStyle(CellBorderPosition.TOP, this.meta, this.theme.colCell.cell), position = _a.position, style = _a.style;
        renderLine(this, position, style);
    };
    ColCell.prototype.drawVerticalBorder = function (dir) {
        var _a = getBorderPositionAndStyle(dir, this.meta, this.theme.colCell.cell), position = _a.position, style = _a.style;
        renderLine(this, position, style);
    };
    ColCell.prototype.drawBorders = function () {
        var _a = this.spreadsheet, options = _a.options, isTableMode = _a.isTableMode;
        if (this.meta.colIndex === 0 &&
            isTableMode() &&
            !options.showSeriesNumber) {
            this.drawVerticalBorder(CellBorderPosition.LEFT);
        }
        this.drawHorizontalBorder();
        this.drawVerticalBorder(CellBorderPosition.RIGHT);
    };
    ColCell.prototype.hasHiddenColumnCell = function () {
        var _this = this;
        var _a = this.spreadsheet.options, _b = _a.interaction.hiddenColumnFields, hiddenColumnFields = _b === void 0 ? [] : _b, operation = _a.tooltip.operation;
        var hiddenColumnsDetail = this.spreadsheet.store.get('hiddenColumnsDetail', []);
        if (isEmpty(hiddenColumnsDetail) ||
            isEmpty(hiddenColumnFields) ||
            !operation.hiddenColumns) {
            return false;
        }
        return !!hiddenColumnsDetail.find(function (column) {
            return isEqualDisplaySiblingNodeId(column === null || column === void 0 ? void 0 : column.displaySiblingNode, _this.meta.id);
        });
    };
    ColCell.prototype.getExpandIconTheme = function () {
        var themeCfg = this.getStyle();
        return themeCfg.icon;
    };
    ColCell.prototype.addExpandColumnSplitLine = function () {
        var _a = this.meta, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var _b = this.theme.splitLine, horizontalBorderColor = _b.horizontalBorderColor, horizontalBorderWidth = _b.horizontalBorderWidth, horizontalBorderColorOpacity = _b.horizontalBorderColorOpacity, borderDash = _b.borderDash;
        var lineX = this.isLastColumn() ? x + width - horizontalBorderWidth : x;
        renderLine(this, {
            x1: lineX,
            y1: y,
            x2: lineX,
            y2: y + height,
        }, {
            stroke: horizontalBorderColor,
            lineWidth: horizontalBorderWidth,
            strokeOpacity: horizontalBorderColorOpacity,
            lineDash: borderDash,
        });
    };
    ColCell.prototype.addExpandColumnIconShapes = function () {
        if (!this.hasHiddenColumnCell()) {
            return;
        }
        this.addExpandColumnSplitLine();
        this.addExpandColumnIcons();
    };
    ColCell.prototype.addExpandColumnIcons = function () {
        var isLastColumn = this.isLastColumn();
        this.addExpandColumnIcon(isLastColumn);
        // 如果当前节点的兄弟节点 (前/后) 都被隐藏了, 隐藏后当前节点变为最后一个节点, 需要渲染两个展开按钮, 一个展开[前], 一个展开[后]
        if (this.isAllDisplaySiblingNodeHidden() && isLastColumn) {
            this.addExpandColumnIcon(false);
        }
    };
    ColCell.prototype.addExpandColumnIcon = function (isLastColumn) {
        var _this = this;
        var iconConfig = this.getExpandColumnIconConfig(isLastColumn);
        var icon = renderIcon(this, __assign(__assign({}, iconConfig), { name: 'ExpandColIcon', cursor: 'pointer' }));
        icon.on('click', function () {
            _this.spreadsheet.emit(S2Event.LAYOUT_COLS_EXPANDED, _this.meta);
        });
    };
    // 在隐藏的下一个兄弟节点的起始坐标显示隐藏提示线和展开按钮, 如果是尾元素, 则显示在前一个兄弟节点的结束坐标
    ColCell.prototype.getExpandColumnIconConfig = function (isLastColumn) {
        var size = this.getExpandIconTheme().size;
        var _a = this.getCellArea(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var baseIconX = x - size;
        var iconX = isLastColumn ? baseIconX + width : baseIconX;
        var iconY = y + height / 2 - size / 2;
        return {
            x: iconX,
            y: iconY,
            width: size * 2,
            height: size,
        };
    };
    ColCell.prototype.isLastColumn = function () {
        return isLastColumnAfterHidden(this.spreadsheet, this.meta.id);
    };
    ColCell.prototype.isAllDisplaySiblingNodeHidden = function () {
        var id = this.meta.id;
        var lastHiddenColumnDetail = this.spreadsheet.store.get('hiddenColumnsDetail', []);
        var isPrevSiblingNodeHidden = lastHiddenColumnDetail.find(function (_a) {
            var _b;
            var displaySiblingNode = _a.displaySiblingNode;
            return ((_b = displaySiblingNode === null || displaySiblingNode === void 0 ? void 0 : displaySiblingNode.next) === null || _b === void 0 ? void 0 : _b.id) === id;
        });
        var isNextSiblingNodeHidden = lastHiddenColumnDetail.find(function (_a) {
            var _b;
            var displaySiblingNode = _a.displaySiblingNode;
            return ((_b = displaySiblingNode === null || displaySiblingNode === void 0 ? void 0 : displaySiblingNode.prev) === null || _b === void 0 ? void 0 : _b.id) === id;
        });
        return isNextSiblingNodeHidden && isPrevSiblingNodeHidden;
    };
    return ColCell;
}(HeaderCell));

var CornerCell = /** @class */ (function (_super) {
    __extends(CornerCell, _super);
    function CornerCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CornerCell.prototype.isBolderText = function () {
        var cornerType = this.meta.cornerType;
        return cornerType === CornerNodeType.Col;
    };
    Object.defineProperty(CornerCell.prototype, "cellType", {
        get: function () {
            return CellTypes.CORNER_CELL;
        },
        enumerable: false,
        configurable: true
    });
    CornerCell.prototype.initCell = function () {
        _super.prototype.initCell.call(this);
        this.resetTextAndConditionIconShapes();
        this.drawBackgroundShape();
        this.drawTreeIcon();
        this.drawCellText();
        this.drawConditionIconShapes();
        this.drawActionIcons();
        this.drawBorderShape();
        this.drawResizeArea();
        this.update();
    };
    /**
     * @deprecated 已废弃, 请使用 drawTextShape
     */
    CornerCell.prototype.drawCellText = function () {
        this.drawTextShape();
    };
    CornerCell.prototype.drawTextShape = function () {
        var x = this.getContentArea().x;
        var _a = this.getCellArea(), y = _a.y, height = _a.height;
        var textStyle = this.getTextStyle();
        var cornerText = this.getCornerText();
        // 当为树状结构下需要计算文本前收起展开的icon占的位置
        var maxWidth = this.getMaxTextWidth();
        var emptyPlaceholder = getEmptyPlaceholder(this.meta, this.spreadsheet.options.placeholder);
        var measureTextWidth = this.spreadsheet.measureTextWidth;
        var text = getEllipsisText({
            measureTextWidth: measureTextWidth,
            text: cornerText,
            maxWidth: maxWidth,
            fontParam: textStyle,
            placeholder: emptyPlaceholder,
        });
        this.actualText = text;
        var ellipseIndex = text.indexOf(ELLIPSIS_SYMBOL);
        var firstLine = text;
        var secondLine = '';
        // 存在文字的省略号 & 展示为tree结构
        if (ellipseIndex !== -1 && this.spreadsheet.isHierarchyTreeType()) {
            // 剪裁到 ... 最有点的后1个像素位置
            var lastIndex = ellipseIndex + (isIPhoneX() ? 1 : 0);
            firstLine = cornerText.substr(0, lastIndex);
            secondLine = cornerText.slice(lastIndex);
            // 第二行重新计算...逻辑
            secondLine = getEllipsisText({
                measureTextWidth: measureTextWidth,
                text: secondLine,
                maxWidth: maxWidth,
                fontParam: textStyle,
            });
        }
        var textX = getTextPosition({
            x: x + this.getTreeIconWidth(),
            y: y,
            width: maxWidth,
            height: height,
        }, textStyle).x;
        var textY = y + (isEmpty(secondLine) ? height / 2 : height / 4);
        // first line
        this.addTextShape(renderText(this, [this.textShapes[0]], textX, textY, firstLine, textStyle));
        // second line
        if (!isEmpty(secondLine)) {
            this.addTextShape(renderText(this, [this.textShapes[1]], textX, y + height * 0.75, secondLine, textStyle));
        }
        this.actualTextWidth = max$1([
            measureTextWidth(firstLine, textStyle),
            measureTextWidth(secondLine, textStyle),
        ]);
    };
    /**
     * 绘制折叠展开的icon
     */
    CornerCell.prototype.drawTreeIcon = function () {
        var _this = this;
        if (!this.showTreeIcon() || this.meta.cornerType === CornerNodeType.Col) {
            return;
        }
        var hierarchyCollapse = this.headerConfig.hierarchyCollapse;
        var size = this.getStyle().icon.size;
        var _a = this.getTextStyle(), textBaseline = _a.textBaseline, fill = _a.fill;
        var area = this.getContentArea();
        this.treeIcon = renderTreeIcon(this, {
            x: area.x,
            y: getVerticalPosition(area, textBaseline, size),
            width: size,
            height: size,
        }, fill, hierarchyCollapse, function () {
            _this.headerConfig.spreadsheet.store.set('scrollY', 0);
            _this.headerConfig.spreadsheet.emit(S2Event.LAYOUT_TREE_ROWS_COLLAPSE_ALL, hierarchyCollapse);
        });
    };
    /**
     * Render cell horizontalBorder border
     * @protected
     */
    CornerCell.prototype.drawBorderShape = function () {
        var _this = this;
        [CellBorderPosition.TOP, CellBorderPosition.LEFT].forEach(function (type) {
            var _a = getBorderPositionAndStyle(type, _this.getCellArea(), _this.getStyle().cell), position = _a.position, style = _a.style;
            renderLine(_this, position, style);
        });
    };
    CornerCell.prototype.isLastRowCornerCell = function () {
        var _a = this.meta, cornerType = _a.cornerType, field = _a.field;
        var rows = this.headerConfig.rows;
        return (cornerType === CornerNodeType.Row &&
            (this.spreadsheet.isHierarchyTreeType() || last(rows) === field));
    };
    CornerCell.prototype.getResizeAreaEffect = function () {
        var cornerType = this.meta.cornerType;
        if (cornerType === CornerNodeType.Series) {
            return ResizeAreaEffect.Series;
        }
        return this.isLastRowCornerCell() && this.spreadsheet.isHierarchyTreeType()
            ? ResizeAreaEffect.Tree
            : ResizeAreaEffect.Field;
    };
    CornerCell.prototype.drawResizeArea = function () {
        if (!this.shouldDrawResizeAreaByType('cornerCellHorizontal', this)) {
            return;
        }
        var resizeStyle = this.getResizeAreaStyle();
        var resizeArea = getOrCreateResizeAreaGroupById(this.spreadsheet, KEY_GROUP_CORNER_RESIZE_AREA);
        var _a = this.headerConfig, position = _a.position, scrollX = _a.scrollX, scrollY = _a.scrollY, headerWidth = _a.width, headerHeight = _a.height;
        var _b = this.meta, x = _b.x, y = _b.y, width = _b.width, height = _b.height, field = _b.field, cornerType = _b.cornerType;
        var resizeAreaBBox = {
            x: x + width - resizeStyle.size / 2,
            y: y,
            width: resizeStyle.size,
            height: height,
        };
        var resizeClipAreaBBox = {
            x: 0,
            y: 0,
            width: headerWidth,
            height: headerHeight,
        };
        if (cornerType === CornerNodeType.Col ||
            !shouldAddResizeArea(resizeAreaBBox, resizeClipAreaBBox, {
                scrollX: scrollX,
                scrollY: scrollY,
            })) {
            return;
        }
        // 将相对坐标映射到全局坐标系中
        // 最后一个维度需要撑满角头高度
        var offsetX = position.x + x - scrollX;
        var offsetY = position.y + (this.isLastRowCornerCell() ? 0 : y);
        resizeArea.addShape('rect', {
            attrs: __assign(__assign({}, getResizeAreaAttrs({
                theme: resizeStyle,
                id: field,
                type: ResizeDirectionType.Horizontal,
                effect: this.getResizeAreaEffect(),
                offsetX: offsetX,
                offsetY: offsetY,
                width: width,
                height: height,
                meta: this.meta,
            })), { x: offsetX + width - resizeStyle.size / 2, y: offsetY, height: this.isLastRowCornerCell() ? headerHeight : height }),
        });
    };
    CornerCell.prototype.showTreeIcon = function () {
        var _a;
        // 批量折叠或者展开的icon，只存在树状结构的第一个cell前
        return this.spreadsheet.isHierarchyTreeType() && ((_a = this.meta) === null || _a === void 0 ? void 0 : _a.x) === 0;
    };
    CornerCell.prototype.getIconPosition = function () {
        var _a, _b;
        var textCfg = (_b = (_a = this.textShapes) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.cfg.attrs;
        var _c = this.getTextStyle(), textBaseline = _c.textBaseline, textAlign = _c.textAlign;
        var _d = this.getStyle().icon, size = _d.size, margin = _d.margin;
        var iconX = (textCfg === null || textCfg === void 0 ? void 0 : textCfg.x) +
            cond([
                [matches('center'), constant$1(this.actualTextWidth / 2)],
                [matches('right'), constant$1(0)],
                [stubTrue, constant$1(this.actualTextWidth)],
            ])(textAlign) +
            margin.left;
        var iconY = getVerticalPosition(this.getContentArea(), textBaseline, size);
        return { x: iconX, y: iconY };
    };
    CornerCell.prototype.getTreeIconWidth = function () {
        var _a = this.getStyle().icon, size = _a.size, margin = _a.margin;
        return this.showTreeIcon() ? size + margin.right : 0;
    };
    CornerCell.prototype.getTextStyle = function () {
        var _a = this.getStyle(), text = _a.text, bolderText = _a.bolderText;
        var cornerTextStyle = this.isBolderText() ? text : bolderText;
        var fill = this.getTextConditionFill(cornerTextStyle);
        return __assign(__assign({}, cornerTextStyle), { fill: fill });
    };
    CornerCell.prototype.getMaxTextWidth = function () {
        var width = this.getContentArea().width;
        return width - this.getTreeIconWidth() - this.getActionIconsWidth();
    };
    CornerCell.prototype.getTextPosition = function () {
        return {
            x: 0,
            y: 0,
        };
    };
    // corner cell 不需要使用formatter进行格式化
    CornerCell.prototype.getFormattedFieldValue = function () {
        return formattedFieldValue(this.meta, this.spreadsheet.dataSet.getFieldName(this.meta.label));
    };
    CornerCell.prototype.getCornerText = function () {
        var formattedValue = this.getFormattedFieldValue().formattedValue;
        return formattedValue;
    };
    return CornerCell;
}(HeaderCell));

var getTableColIconsWidth = function (s2, meta, cellType, iconStyle) {
    var _a, _b;
    var iconSize = get(iconStyle, 'size');
    var iconMargin = get(iconStyle, 'margin');
    var iconNums = 0;
    if (s2.options.showDefaultHeaderActionIcon) {
        iconNums = 1;
    }
    else {
        iconNums =
            (_b = (_a = getActionIconConfig(s2.options.headerActionIcons, meta, cellType)) === null || _a === void 0 ? void 0 : _a.iconNames.length) !== null && _b !== void 0 ? _b : 0;
    }
    return (iconNums * (iconSize + iconMargin.left) +
        (iconNums > 0 ? iconMargin.right : 0));
};
var getExtraPaddingForExpandIcon = function (s2, field, style) {
    var _a, _b;
    var iconMarginLeft = ((_a = style.icon.margin) === null || _a === void 0 ? void 0 : _a.left) || 0;
    var iconMarginRight = ((_b = style.icon.margin) === null || _b === void 0 ? void 0 : _b.right) || 0;
    var hiddenColumnsDetail = s2.store.get('hiddenColumnsDetail', []);
    var hasPrevSiblingCell = false;
    var hasNextSiblingCell = false;
    hiddenColumnsDetail.forEach(function (column) {
        var _a, _b, _c, _d;
        if (((_b = (_a = column === null || column === void 0 ? void 0 : column.displaySiblingNode) === null || _a === void 0 ? void 0 : _a.prev) === null || _b === void 0 ? void 0 : _b.field) === field) {
            hasPrevSiblingCell = true;
        }
        if (((_d = (_c = column === null || column === void 0 ? void 0 : column.displaySiblingNode) === null || _c === void 0 ? void 0 : _c.next) === null || _d === void 0 ? void 0 : _d.field) === field) {
            hasNextSiblingCell = true;
        }
    });
    var iconSize = get(style, 'icon.size');
    // 图标本身宽度 + 主题配置的 icon margin
    return {
        left: hasNextSiblingCell ? iconSize + iconMarginRight : 0,
        right: hasPrevSiblingCell ? iconSize + iconMarginLeft : 0,
    };
};
var getOccupiedWidthForTableCol = function (s2, meta, style) {
    var padding = get(style, 'cell.padding');
    var expandIconPadding = getExtraPaddingForExpandIcon(s2, meta.field, style);
    return (padding.left +
        padding.right +
        getTableColIconsWidth(s2, meta, CellTypes.COL_CELL, get(style, 'icon')) +
        expandIconPadding.left +
        expandIconPadding.right);
};

var TableColCell = /** @class */ (function (_super) {
    __extends(TableColCell, _super);
    function TableColCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableColCell.prototype.handleRestOptions = function () {
        var _a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _a[_i] = arguments[_i];
        }
        var _b = __read(_a, 1), headerConfig = _b[0];
        this.headerConfig = __assign({}, headerConfig);
        var field = this.meta.field;
        var sortParams = this.spreadsheet.dataCfg.sortParams;
        var sortParam = find$1(sortParams, function (item) { return (item === null || item === void 0 ? void 0 : item.sortFieldId) === field; });
        var type = getSortTypeIcon(sortParam, true);
        this.headerConfig.sortParam = __assign(__assign(__assign({}, this.headerConfig.sortParam), (sortParam || {})), { type: type });
    };
    TableColCell.prototype.isFrozenCell = function () {
        var _a = this.spreadsheet.options, frozenColCount = _a.frozenColCount, frozenTrailingColCount = _a.frozenTrailingColCount;
        var colNodes = this.spreadsheet.facet.layoutResult.colNodes.filter(function (node) {
            return isTopLevelNode(node);
        });
        var colIndex = getNodeRoot(this.meta).colIndex;
        return (isFrozenCol(colIndex, frozenColCount) ||
            isFrozenTrailingCol(colIndex, frozenTrailingColCount, colNodes.length));
    };
    TableColCell.prototype.getFormattedFieldValue = function () {
        return formattedFieldValue(this.meta, this.spreadsheet.dataSet.getFieldName(this.meta.label));
    };
    TableColCell.prototype.shouldAddVerticalResizeArea = function () {
        if (this.isFrozenCell()) {
            return true;
        }
        return _super.prototype.shouldAddVerticalResizeArea.call(this);
    };
    TableColCell.prototype.getVerticalResizeAreaOffset = function () {
        var _a = this.meta, x = _a.x, y = _a.y;
        var _b = this.headerConfig, scrollX = _b.scrollX, position = _b.position;
        if (this.isFrozenCell()) {
            return {
                x: x,
                y: y,
            };
        }
        return {
            x: position.x + x - scrollX,
            y: position.y + y,
        };
    };
    TableColCell.prototype.getColResizeArea = function () {
        var isFrozenCell = this.isFrozenCell();
        if (!isFrozenCell) {
            return _super.prototype.getColResizeArea.call(this);
        }
        return getOrCreateResizeAreaGroupById(this.spreadsheet, KEY_GROUP_FROZEN_COL_RESIZE_AREA);
    };
    TableColCell.prototype.isSortCell = function () {
        return true;
    };
    TableColCell.prototype.showSortIcon = function () {
        return this.spreadsheet.options.showDefaultHeaderActionIcon;
    };
    TableColCell.prototype.getTextStyle = function () {
        var style = this.getStyle();
        return style === null || style === void 0 ? void 0 : style.bolderText;
    };
    TableColCell.prototype.getContentArea = function () {
        var _a;
        var padding = (((_a = this.getStyle()) === null || _a === void 0 ? void 0 : _a.cell) || this.theme.dataCell.cell).padding;
        var newPadding = __assign({}, padding);
        var extraPadding = getExtraPaddingForExpandIcon(this.spreadsheet, this.meta.field, this.getStyle());
        if (extraPadding.left) {
            newPadding.left = (newPadding.left || 0) + extraPadding.left;
        }
        if (extraPadding.right) {
            newPadding.right = (newPadding.right || 0) + extraPadding.right;
        }
        return getContentArea(this.getCellArea(), newPadding);
    };
    TableColCell.prototype.getHorizontalResizeAreaName = function () {
        return "".concat(HORIZONTAL_RESIZE_AREA_KEY_PRE).concat('table-col-cell');
    };
    TableColCell.prototype.drawBackgroundShape = function () {
        var backgroundColor = this.getStyle().cell.backgroundColor;
        this.backgroundShape = renderRect(this, __assign(__assign({}, this.getCellArea()), { fill: backgroundColor }));
    };
    return TableColCell;
}(ColCell));

var TableCornerCell = /** @class */ (function (_super) {
    __extends(TableCornerCell, _super);
    function TableCornerCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableCornerCell.prototype.getStyle = function (name) {
        return name ? this.theme[name] : get(this, 'theme.cornerCell');
    };
    TableCornerCell.prototype.showSortIcon = function () {
        return false;
    };
    TableCornerCell.prototype.drawLeftBorder = function () {
        var _a = getBorderPositionAndStyle(CellBorderPosition.LEFT, this.getCellArea(), this.getStyle().cell), position = _a.position, style = _a.style;
        renderLine(this, position, style);
    };
    TableCornerCell.prototype.drawBorders = function () {
        _super.prototype.drawBorders.call(this);
        if (this.meta.colIndex === 0) {
            this.drawLeftBorder();
        }
    };
    return TableCornerCell;
}(TableColCell));

var TableDataCell = /** @class */ (function (_super) {
    __extends(TableDataCell, _super);
    function TableDataCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableDataCell.prototype.getLinkFieldStyle = function () {
        return this.theme.rowCell.text.linkTextFill;
    };
    TableDataCell.prototype.drawBorderShape = function () {
        _super.prototype.drawBorderShape.call(this);
        if (this.meta.colIndex === 0) {
            this.drawLeftBorder();
        }
    };
    TableDataCell.prototype.shouldDrawResizeArea = function () {
        // 只有最左侧的单元格需要绘制resize区域
        return this.meta.colIndex === 0;
    };
    TableDataCell.prototype.drawResizeArea = function () {
        if (!this.shouldDrawResizeArea()) {
            return;
        }
        var _a = this.getCellArea(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var rowIndex = this.meta.rowIndex;
        var resizeStyle = this.getResizeAreaStyle();
        var _b = this.spreadsheet.options, frozenRowCount = _b.frozenRowCount, frozenTrailingRowCount = _b.frozenTrailingRowCount;
        var cellRange = this.spreadsheet.facet.getCellRange();
        var isFrozenRow$1 = isFrozenRow(rowIndex, cellRange.start, frozenRowCount);
        var isFrozenTrailingRow$1 = isFrozenTrailingRow(rowIndex, cellRange.end, frozenTrailingRowCount);
        var isFrozen = isFrozenRow$1 || isFrozenTrailingRow$1;
        var resizeAreaId = isFrozen
            ? KEY_GROUP_FROZEN_ROW_RESIZE_AREA
            : KEY_GROUP_ROW_RESIZE_AREA;
        var resizeArea = getOrCreateResizeAreaGroupById(this.spreadsheet, resizeAreaId);
        var colHeight = this.spreadsheet.facet.layoutResult.colsHierarchy.height;
        var sy = this.spreadsheet.facet.getScrollOffset().scrollY;
        var paginationSy = this.spreadsheet.facet.getPaginationScrollY();
        var scrollY = sy + paginationSy;
        var yOffset = y + (isFrozenTrailingRow$1 ? 0 : colHeight);
        if (!isFrozenTrailingRow$1) {
            yOffset -= isFrozenRow$1 ? paginationSy : scrollY;
        }
        resizeArea.addShape('rect', {
            attrs: __assign(__assign({}, getResizeAreaAttrs({
                id: String(this.meta.rowIndex),
                theme: resizeStyle,
                type: ResizeDirectionType.Vertical,
                effect: ResizeAreaEffect.Cell,
                offsetX: x,
                offsetY: yOffset,
                width: width,
                height: height,
                meta: this.meta,
            })), { x: x, y: yOffset + height - resizeStyle.size / 2, width: width }),
        });
    };
    return TableDataCell;
}(DataCell));

var TableSeriesCell = /** @class */ (function (_super) {
    __extends(TableSeriesCell, _super);
    function TableSeriesCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TableSeriesCell.prototype, "cellType", {
        get: function () {
            return CellTypes.ROW_CELL;
        },
        enumerable: false,
        configurable: true
    });
    TableSeriesCell.prototype.getTextStyle = function () {
        return this.theme.rowCell.seriesText;
    };
    return TableSeriesCell;
}(TableDataCell));

var Gesture = /** @class */ (function () {
    function Gesture(gm) {
        this.EVENT = 'gesture';
        this.gm = gm;
    }
    /**
     * 处理事件
     * @param ev
     */
    Gesture.prototype.do = function (ev) {
        var type = ev.type;
        switch (type) {
            case 'touchstart':
                this.onTouchStart(ev);
                break;
            case 'touchmove':
                this.onTouchMove(ev);
                break;
            case 'touchend':
                this.onTouchEnd(ev);
                break;
            case 'touchcancel':
                this.onTouchCancel(ev);
                break;
            default:
                return;
        }
    };
    /**
     * 触发事件
     * @param e
     */
    Gesture.prototype.emit = function (e) {
        this.gm.emit(this.EVENT, e);
    };
    return Gesture;
}());

var Pan = /** @class */ (function (_super) {
    __extends(Pan, _super);
    function Pan() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENT = 'pan';
        return _this;
    }
    Pan.prototype.onTouchCancel = function (ev) { };
    Pan.prototype.onTouchEnd = function (ev) { };
    Pan.prototype.onTouchMove = function (ev) {
        var x = ev.x, y = ev.y;
        var deltaX = x - this.preX;
        var deltaY = y - this.preY;
        this.preX = x;
        this.preY = y;
        this.emit({ x: x, y: y, deltaX: deltaX, deltaY: deltaY, event: ev });
    };
    Pan.prototype.onTouchStart = function (ev) {
        var x = ev.x, y = ev.y;
        this.preX = x;
        this.preY = y;
    };
    return Pan;
}(Gesture));

// 时钟
var clock = typeof performance === 'object' && performance.now ? performance : Date;

var TIME$1 = 300;
var DISTANCE$1 = 10;
var Press = /** @class */ (function (_super) {
    __extends(Press, _super);
    function Press() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENT = 'press';
        return _this;
    }
    Press.prototype.onTouchCancel = function (ev) {
        this.clearTimeout();
    };
    Press.prototype.onTouchEnd = function (ev) {
        this.clearTimeout();
    };
    Press.prototype.onTouchMove = function (ev) {
        var x = ev.x, y = ev.y;
        if (x - this.touchStartX > DISTANCE$1 || y - this.touchStartY > DISTANCE$1) {
            this.clearTimeout();
        }
    };
    Press.prototype.onTouchStart = function (ev) {
        var _this = this;
        this.clearTimeout();
        var x = ev.x, y = ev.y;
        this.touchStartTime = clock.now();
        this.touchStartX = x;
        this.touchStartY = y;
        this.pressTimeout = window.setTimeout(function () {
            _this.emit({ x: x, y: y, event: ev });
        }, TIME$1);
    };
    Press.prototype.clearTimeout = function () {
        window.clearTimeout(this.pressTimeout);
    };
    return Press;
}(Gesture));

var SWIPE_TIME_GAP = 100;
var Swipe = /** @class */ (function (_super) {
    __extends(Swipe, _super);
    function Swipe() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENT = 'swipe';
        // 最后一次 move 的事件，用于区分 swipe 和 pan
        _this.latestMoveTime = 0;
        // 最后交互的时间，用于计算速度
        _this.ms = 0;
        // 最后的 move 速度，用于touchend 之后做惯性
        _this.speedX = 0;
        _this.speedY = 0;
        // 最后 move 的 x，y 位置
        _this.preX = 0;
        _this.preY = 0;
        return _this;
    }
    Swipe.prototype.onTouchCancel = function (ev) { };
    Swipe.prototype.onTouchEnd = function (ev) {
        var speedX = this.speedX;
        var speedY = this.speedY;
        if (clock.now() - this.latestMoveTime < SWIPE_TIME_GAP) {
            var x = ev.x, y = ev.y;
            // 抛出事件
            this.emit({ x: x, y: y, speedX: speedX, speedY: speedY, event: ev });
        }
    };
    Swipe.prototype.onTouchMove = function (ev) {
        var x = ev.x, y = ev.y;
        var ms = clock.now();
        // 1. 计算 wheel 偏移
        var deltaX = x - this.preX;
        var deltaY = y - this.preY;
        var deltaTime = ms - this.ms;
        // 2. 计算速度（简版吧）
        this.speedX = deltaX / deltaTime;
        this.speedY = deltaY / deltaTime;
        // 记录最后一次移动事件
        this.latestMoveTime = ms;
    };
    Swipe.prototype.onTouchStart = function (ev) {
        var x = ev.x, y = ev.y;
        // 初始化
        this.speedX = this.speedY = 0;
        this.preX = x;
        this.preY = y;
        this.ms = clock.now();
    };
    return Swipe;
}(Gesture));

var TIME = 300;
var DISTANCE = 2;
var Tap = /** @class */ (function (_super) {
    __extends(Tap, _super);
    function Tap() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.EVENT = 'tap';
        return _this;
    }
    Tap.prototype.onTouchCancel = function (ev) { };
    Tap.prototype.onTouchEnd = function (ev) {
        var x = ev.x, y = ev.y;
        if (x - this.touchStartX < DISTANCE &&
            y - this.touchStartY < DISTANCE &&
            clock.now() - this.touchStartTime < TIME) {
            this.emit({ x: x, y: y, event: ev });
        }
    };
    Tap.prototype.onTouchMove = function (ev) { };
    Tap.prototype.onTouchStart = function (ev) {
        var x = ev.x, y = ev.y;
        this.touchStartTime = clock.now();
        this.touchStartX = x;
        this.touchStartY = y;
    };
    return Tap;
}(Gesture));

var MAP = {
    Pan: Pan,
    Press: Press,
    Swipe: Swipe,
    Tap: Tap,
};
var getGesture = function (g) { return MAP[g]; };

/**
 * 给 view 添加移动端的滚动能力：
 *  - 监听 touch 事件，emit wheel 事件
 *  - 滚动惯性包装
 *  - 和 pc 的 wheel 事件保持基本一致
 */
var GM = /** @class */ (function (_super) {
    __extends(GM, _super);
    function GM(element, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        /**
         * touchstart 触发
         * @param ev
         */
        _this.onTouchStart = function (ev) {
            _this.preventEvent(ev);
            _this.element.on('touchmove', _this.onTouchMove);
            _this.element.on('touchend', _this.onTouchEnd);
            _this.element.on('touchcancel', _this.onTouchCancel);
            _this.emit('touchdown', ev);
            _this.doGestures(ev);
        };
        /**
         * touchmove 触发
         * @param ev
         */
        _this.onTouchMove = function (ev) {
            _this.preventEvent(ev);
            _this.emit('touchmove', ev);
            _this.doGestures(ev);
        };
        /**
         * touchend 触发
         * @param ev
         */
        _this.onTouchEnd = function (ev) {
            _this.preventEvent(ev);
            _this.emit('touchend', ev);
            _this.element.off('touchmove', _this.onTouchMove);
            _this.element.off('touchend', _this.onTouchEnd);
            _this.element.off('touchcancel', _this.onTouchCancel);
            _this.doGestures(ev);
        };
        /**
         * touchcancel 触发
         * @param ev
         */
        _this.onTouchCancel = function (ev) {
            _this.preventEvent(ev);
            _this.emit('touchcancel', ev);
            _this.element.off('touchmove', _this.onTouchMove);
            _this.element.off('touchend', _this.onTouchEnd);
            _this.element.off('touchcancel', _this.onTouchCancel);
            _this.doGestures(ev);
        };
        _this.element = element;
        _this.options = options;
        _this.initialGestures();
        _this.bindTouchStart();
        return _this;
    }
    /**
     * 销毁，取消事件绑定
     */
    GM.prototype.destroy = function () {
        this.element.off('touchstart', this.onTouchStart);
        this.off();
    };
    /**
     * 实例化手势
     */
    GM.prototype.initialGestures = function () {
        var _this = this;
        var gestures = this.options.gestures || ['Pan', 'Press', 'Swipe', 'Tap'];
        this.gestures = gestures.map(function (gesture) {
            var Ctor = getGesture(gesture);
            return new Ctor(_this);
        });
    };
    /**
     * 绑定 touchstart 事件
     */
    GM.prototype.bindTouchStart = function () {
        this.element.on('touchstart', this.onTouchStart);
    };
    GM.prototype.preventEvent = function (ev) {
        var type = ev.type;
        var prevents = this.options.prevents || [];
        if (prevents.includes(type)) {
            ev.preventDefault();
        }
    };
    GM.prototype.doGestures = function (ev) {
        this.gestures.forEach(function (g) {
            g.do(ev);
        });
    };
    return GM;
}(EventEmitter));

// 看那个曲线跟合适了
var ease = cubicIn;
var TOTAL_MS = 800; // 惯性滚动时间；调参工程师，或者根据速度来计算这个时间
var SWIPE = 'swipe';
var PAN = 'pan';
var WHEEL = 'wheel';
/**
 * 给 view 添加移动端的滚动能力：
 *  - 监听 touch 事件，emit wheel 事件
 *  - 滚动惯性包装
 *  - 和 pc 的 wheel 事件保持基本一致
 */
var Wheel = /** @class */ (function (_super) {
    __extends(Wheel, _super);
    function Wheel(element) {
        var _this = _super.call(this) || this;
        _this.rafMs = 0;
        /**
         * pan 事件
         * @param ev
         */
        _this.onPan = function (ev) {
            // pan 时取消掉 swipe 的延时回调
            if (_this.raf) {
                cancelAnimationFrame(_this.raf);
            }
            var deltaX = ev.deltaX, deltaY = ev.deltaY;
            var e = _this.getWrapperEvent(ev, deltaX, deltaY);
            _this.emit(WHEEL, e);
        };
        /**
         * 当出现 swipe 事件的时候
         * @param ev
         */
        _this.onSwipe = function (ev) {
            var speedX = ev.speedX, speedY = ev.speedY;
            // raf 循环执行的时间戳
            _this.rafMs = clock.now();
            _this.ms = _this.rafMs;
            // 对于没有滑动的情况下，不做处理
            if (speedX !== 0 || speedY !== 0) {
                _this.rafInertia(ev);
            }
        };
        _this.element = element;
        _this.gm = new GM(element, { gestures: ['Pan', 'Swipe'] });
        _this.gm.on(SWIPE, _this.onSwipe);
        _this.gm.on(PAN, _this.onPan);
        return _this;
    }
    Wheel.prototype.destroy = function () {
        window.cancelAnimationFrame(this.raf);
        this.gm.destroy();
        this.off();
    };
    // 使用 raf 进行惯性滑动
    Wheel.prototype.rafInertia = function (ev) {
        var _this = this;
        var speedX = ev.speedX, speedY = ev.speedY;
        this.raf = window.requestAnimationFrame(function () {
            var now = clock.now();
            var ratio = (now - _this.ms) / TOTAL_MS;
            if (ratio < 1) {
                ratio = ease(1 - ratio);
                // 折损之后的速度 * 时间，等于距离
                var t = now - _this.rafMs;
                var movedX = speedX * ratio * t;
                var movedY = speedY * ratio * t;
                var e = _this.getWrapperEvent(ev, movedX, movedY);
                // 发出 wheel 事件
                _this.emit(WHEEL, e);
                _this.rafMs = now; // 记录时间
                // 进行下一次
                _this.rafInertia(ev);
            }
        });
    };
    Wheel.prototype.getWrapperEvent = function (ev, deltaX, deltaY) {
        // 移动端的滑动应该是跟随手指
        return __assign(__assign({}, ev), { deltaX: -deltaX, deltaY: -deltaY });
    };
    return Wheel;
}(EventEmitter));

/**
 * 获取当前node所有children的总高度
 * @param node
 */
var getAllChildrenNodeHeight = function (node) {
    var nodeAllCellHeight = 0;
    var nodes = node.children;
    nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (item) {
        nodeAllCellHeight += item.height || 0;
    });
    return nodeAllCellHeight;
};

/**
 * 文本吸附定位计算
 * @param rectLeft       矩形左边
 * @param rectWidth      矩形宽度
 * @param viewportLeft   视窗左边
 * @param viewportWidth  视窗宽度
 * @param textWidth
 * @returns 文本定位坐标 x 或者 y
 *
 * 画布元素：视窗矩形、矩形、文本，其中文本放置在矩形中
 * 矩形从右进入视窗时，交互流程为：
 *  1. 文本开始显示，文本贴左边
 *  2. 文本还未达到矩形中心位置，继续贴左边
 *  3. 文本显示全时，文本贴右边
 *  4. 文本居于矩形中心时，文本贴中间
 *  5. 文本贴近视窗左边还能显示全，文本贴左边
 *  6. 文本开始显示不全时，文本贴右边
 * **************************************************************
 *                    viewportLeft               rectLeft
 *                    ▲                          ▲   centerTextLeft
 *                    |                          |   ▲
 *                    +------------------+       |   |
 *                    |                  |       +------------+
 *                    |                  |       |   +----+   |
 *                    |                  |       |   |Text|   |
 *                    |                  |       |   +----+   |
 *                    |                  |       +------------+
 *                    +------------------+       ◀- rectWidth -▶
 *                    ◀- viewportWidth  -▶
 * ****************************************************************
 */
var getAdjustPosition = function (rectLeft, rectWidth, viewportLeft, viewportWidth, textWidth) {
    var textX = 0;
    // 文本居于矩形中间时的坐标
    var centerTextLeft = rectLeft + (rectWidth - textWidth) / 2;
    var centerTextRight = rectLeft + (rectWidth + textWidth) / 2;
    var viewportRight = viewportLeft + viewportWidth;
    if (rectLeft + textWidth >= viewportRight) {
        // 1. 文本开始显示，文本贴左边
        textX = rectLeft;
    }
    else if (viewportRight < centerTextRight) {
        // 2. 文本还未达到矩形中心位置，继续贴左边
        textX = viewportLeft + viewportWidth - textWidth;
    }
    else if (viewportLeft > centerTextLeft) {
        // 3. 文本显示全时，文本贴右边
        if (rectLeft + rectWidth - viewportLeft > textWidth) {
            // 5. 文本贴近视窗左边还能显示全，文本贴左边
            textX = viewportLeft;
        }
        else {
            // 6. 文本开始显示不全时，文本贴右边
            textX = rectLeft + rectWidth - textWidth;
        }
    }
    else {
        // 4. 文本居于矩形中心时，文本贴中间
        textX = rectLeft + (rectWidth - textWidth) / 2;
    }
    return textX;
};

var BaseRowCell = /** @class */ (function (_super) {
    __extends(BaseRowCell, _super);
    function BaseRowCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BaseRowCell.prototype, "cellType", {
        get: function () {
            return CellTypes.ROW_CELL;
        },
        enumerable: false,
        configurable: true
    });
    BaseRowCell.prototype.destroy = function () {
        var _a;
        _super.prototype.destroy.call(this);
        (_a = this.gm) === null || _a === void 0 ? void 0 : _a.destroy();
    };
    BaseRowCell.prototype.initCell = function () {
        _super.prototype.initCell.call(this);
        // 绘制单元格背景
        this.drawBackgroundShape();
        // 绘制交互背景
        this.drawInteractiveBgShape();
        // 绘制交互边框
        this.drawInteractiveBorderShape();
        // 绘制单元格文本
        this.drawTextShape();
        // 绘制字段标记 -- icon
        this.drawConditionIconShapes();
        // 绘制树状模式收起展开的 icon
        this.drawTreeIcon();
        // 绘制树状模式下子节点层级占位圆点
        this.drawTreeLeafNodeAlignDot();
        // 绘制单元格边框
        this.drawRectBorder();
        // 绘制 resize 热区
        this.drawResizeAreaInLeaf();
        // 绘制 action icons
        this.drawActionIcons();
        this.update();
    };
    BaseRowCell.prototype.getBackgroundColor = function () {
        var _a = this.getCrossBackgroundColor(this.meta.rowIndex), backgroundColor = _a.backgroundColor, backgroundColorOpacity = _a.backgroundColorOpacity;
        return this.getBackgroundColorByCondition(backgroundColor, backgroundColorOpacity);
    };
    /**
     * 绘制hover悬停，刷选的外框
     */
    BaseRowCell.prototype.drawInteractiveBorderShape = function () {
        // 往内缩一个像素，避免和外边框重叠
        var margin = 2;
        this.stateShapes.set('interactiveBorderShape', renderRect(this, this.getInteractiveBorderShapeStyle(margin), {
            visible: false,
        }));
    };
    // 交互使用的背景色
    BaseRowCell.prototype.drawInteractiveBgShape = function () {
        this.stateShapes.set('interactiveBgShape', renderRect(this, __assign({}, this.getCellArea()), {
            visible: false,
        }));
    };
    BaseRowCell.prototype.showTreeIcon = function () {
        return this.spreadsheet.isHierarchyTreeType() && !this.meta.isLeaf;
    };
    BaseRowCell.prototype.showTreeLeafNodeAlignDot = function () {
        var _a;
        return (((_a = this.spreadsheet.options.style) === null || _a === void 0 ? void 0 : _a.showTreeLeafNodeAlignDot) &&
            this.spreadsheet.isHierarchyTreeType());
    };
    // 获取树状模式下叶子节点的父节点收起展开 icon 图形属性
    BaseRowCell.prototype.getParentTreeIconCfg = function () {
        if (!this.showTreeLeafNodeAlignDot() ||
            !this.spreadsheet.isHierarchyTreeType() ||
            !this.meta.isLeaf) {
            return;
        }
        return get(this.meta, 'parent.belongsCell.treeIcon.cfg');
    };
    // draw tree icon
    BaseRowCell.prototype.drawTreeIcon = function () {
        var _this = this;
        if (!this.showTreeIcon()) {
            return;
        }
        var _a = this.meta, isCollapsed = _a.isCollapsed, id = _a.id, hierarchy = _a.hierarchy;
        var x = this.getContentArea().x;
        var fill = this.getTextStyle().fill;
        var size = this.getStyle().icon.size;
        var contentIndent = this.getContentIndent();
        var iconX = x + contentIndent;
        var iconY = this.getIconYPosition();
        this.treeIcon = renderTreeIcon(this, {
            x: iconX,
            y: iconY,
            width: size,
            height: size,
        }, fill, isCollapsed, function () {
            if (isMobile()) {
                return;
            }
            // 折叠行头时因scrollY没变，导致底层出现空白
            if (!isCollapsed) {
                var oldScrollY = _this.spreadsheet.store.get('scrollY');
                // 可视窗口高度
                var viewportHeight = _this.headerConfig.viewportHeight || 0;
                // 被折叠项的高度
                var deleteHeight = getAllChildrenNodeHeight(_this.meta);
                // 折叠后真实高度
                var realHeight = hierarchy.height - deleteHeight;
                if (oldScrollY > 0 && oldScrollY + viewportHeight > realHeight) {
                    var currentScrollY = realHeight - viewportHeight;
                    _this.spreadsheet.store.set('scrollY', currentScrollY > 0 ? currentScrollY : 0);
                }
            }
            _this.spreadsheet.emit(S2Event.ROW_CELL_COLLAPSE_TREE_ROWS, {
                id: id,
                isCollapsed: !isCollapsed,
                node: _this.meta,
            });
        });
        // in mobile, we use this cell
        if (isMobile()) {
            this.gm = new GM(this, {
                gestures: ['Tap'],
            });
            this.gm.on('tap', function () {
                _this.spreadsheet.emit(S2Event.ROW_CELL_COLLAPSE_TREE_ROWS, {
                    id: id,
                    isCollapsed: !isCollapsed,
                    node: _this.meta,
                });
            });
        }
    };
    BaseRowCell.prototype.drawTreeLeafNodeAlignDot = function () {
        var parentTreeIconCfg = this.getParentTreeIconCfg();
        if (!parentTreeIconCfg) {
            return;
        }
        var _a = this.getStyle().icon, size = _a.size, margin = _a.margin;
        var x = parentTreeIconCfg.x + size + margin.right;
        var textY = this.getTextPosition().y;
        var _b = this.getTextStyle(), fill = _b.fill, fontSize = _b.fontSize;
        var r = size / 5; // 半径，暂时先写死，后面看是否有这个点点的定制需求
        this.treeLeafNodeAlignDot = renderCircle(this, {
            x: x + size / 2,
            y: textY + (fontSize - r) / 2,
            r: r,
            fill: fill,
            fillOpacity: 0.3, // 暂时先写死，后面看是否有这个点点的定制需求
        });
    };
    BaseRowCell.prototype.isBolderText = function () {
        // 非叶子节点、小计总计，均为粗体
        var _a = this.meta, isLeaf = _a.isLeaf, isTotals = _a.isTotals, level = _a.level;
        return (!isLeaf && level === 0) || isTotals;
    };
    // draw text
    BaseRowCell.prototype.drawTextShape = function () {
        _super.prototype.drawTextShape.call(this);
        this.drawLinkField(this.meta);
    };
    BaseRowCell.prototype.drawRectBorder = function () {
        var _this = this;
        var x = this.getCellArea().x;
        var contentIndent = this.getContentIndent();
        var finalX = this.spreadsheet.isHierarchyTreeType()
            ? x
            : x + contentIndent;
        [CellBorderPosition.BOTTOM, CellBorderPosition.LEFT].forEach(function (type) {
            var _a = getBorderPositionAndStyle(type, __assign(__assign({}, _this.getCellArea()), { x: finalX }), _this.getStyle().cell), position = _a.position, style = _a.style;
            renderLine(_this, position, style);
        });
    };
    BaseRowCell.prototype.getResizeClipAreaBBox = function () {
        var _a = this.headerConfig, width = _a.width, viewportHeight = _a.viewportHeight;
        return {
            x: 0,
            y: 0,
            width: width,
            height: viewportHeight,
        };
    };
    BaseRowCell.prototype.drawResizeAreaInLeaf = function () {
        if (!this.meta.isLeaf ||
            !this.shouldDrawResizeAreaByType('rowCellVertical', this)) {
            return;
        }
        var _a = this.getCellArea(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var resizeStyle = this.getResizeAreaStyle();
        var resizeArea = getOrCreateResizeAreaGroupById(this.spreadsheet, KEY_GROUP_ROW_RESIZE_AREA);
        var _b = this.headerConfig, position = _b.position, seriesNumberWidth = _b.seriesNumberWidth, headerWidth = _b.width, scrollX = _b.scrollX, scrollY = _b.scrollY;
        var resizeAreaBBox = {
            // fix: When scrolling without the entire frozen header horizontally, the resize area would be removed permanently.
            x: x + seriesNumberWidth,
            y: y + height - resizeStyle.size / 2,
            width: width,
            height: resizeStyle.size,
        };
        var resizeClipAreaBBox = this.getResizeClipAreaBBox();
        if (!shouldAddResizeArea(resizeAreaBBox, resizeClipAreaBBox, {
            scrollX: scrollX,
            scrollY: scrollY,
        })) {
            return;
        }
        var offsetX = (position === null || position === void 0 ? void 0 : position.x) + x - scrollX + seriesNumberWidth;
        var offsetY = (position === null || position === void 0 ? void 0 : position.y) + y - scrollY;
        var resizeAreaWidth = this.spreadsheet.isFrozenRowHeader()
            ? headerWidth - seriesNumberWidth - (x - scrollX)
            : width;
        resizeArea.addShape('rect', {
            attrs: __assign(__assign({}, getResizeAreaAttrs({
                id: this.meta.id,
                theme: resizeStyle,
                type: ResizeDirectionType.Vertical,
                effect: ResizeAreaEffect.Cell,
                offsetX: offsetX,
                offsetY: offsetY,
                width: width,
                height: height,
                meta: this.meta,
            })), { x: offsetX, y: offsetY + height - resizeStyle.size / 2, width: resizeAreaWidth }),
        });
    };
    BaseRowCell.prototype.getContentIndent = function () {
        if (!this.spreadsheet.isHierarchyTreeType()) {
            return 0;
        }
        var _a = this.getStyle(), icon = _a.icon, cell = _a.cell;
        var iconWidth = icon.size + icon.margin.right;
        var parent = this.meta.parent;
        var sum = 0;
        while (parent) {
            if (parent.height !== 0) {
                sum += iconWidth;
            }
            parent = parent.parent;
        }
        if (this.showTreeLeafNodeAlignDot()) {
            sum += this.isTreeLevel() ? 0 : cell.padding.right + icon.margin.right;
        }
        return sum;
    };
    BaseRowCell.prototype.getTextIndent = function () {
        var _a = this.getStyle().icon, size = _a.size, margin = _a.margin;
        var contentIndent = this.getContentIndent();
        var treeIconWidth = this.showTreeIcon() ||
            (this.isTreeLevel() && this.showTreeLeafNodeAlignDot())
            ? size + margin.right
            : 0;
        return contentIndent + treeIconWidth;
    };
    // 判断当前节点的兄弟节点是否叶子节点
    BaseRowCell.prototype.isTreeLevel = function () {
        return find$1(get(this.meta, 'parent.children'), function (cell) { return !cell.isLeaf; });
    };
    BaseRowCell.prototype.getIconPosition = function () {
        // 不同 textAlign 下，对应的文字绘制点 x 不同
        var _a = this.textShape.cfg.attrs, x = _a.x, y = _a.y, textAlign = _a.textAlign;
        var iconMarginLeft = this.getStyle().icon.margin.left;
        if (textAlign === 'left') {
            /**
             * attrs.x
             *   |
             *   v
             *   +---------+  +----+
             *   |  text   |--|icon|
             *   +---------+  +----+
             */
            return {
                x: x + this.actualTextWidth + iconMarginLeft,
                y: y,
            };
        }
        if (textAlign === 'right') {
            /**
             *           attrs.x
             *             |
             *             v
             *   +---------+  +----+
             *   |  text   |--|icon|
             *   +---------+  +----+
             */
            return {
                x: x + iconMarginLeft,
                y: y,
            };
        }
        /**
         *      attrs.x
         *        |
         *        v
         *   +---------+  +----+
         *   |  text   |--|icon|
         *   +---------+  +----+
         */
        return {
            x: x + this.actualTextWidth / 2 + iconMarginLeft,
            y: y,
        };
    };
    BaseRowCell.prototype.getMaxTextWidth = function () {
        var width = this.getContentArea().width;
        return width - this.getTextIndent() - this.getActionIconsWidth();
    };
    BaseRowCell.prototype.getTextArea = function () {
        var content = this.getContentArea();
        var textIndent = this.getTextIndent();
        return __assign(__assign({}, content), { x: content.x + textIndent, width: content.width - textIndent });
    };
    BaseRowCell.prototype.getAdjustTextAreaHeight = function (textArea, scrollY, viewportHeight) {
        var adjustTextAreaHeight = textArea.height;
        if (!this.spreadsheet.facet.vScrollBar &&
            textArea.y + textArea.height > scrollY + viewportHeight) {
            adjustTextAreaHeight = scrollY + viewportHeight - textArea.y;
        }
        return adjustTextAreaHeight;
    };
    BaseRowCell.prototype.calculateTextY = function (_a) {
        var textArea = _a.textArea, adjustTextAreaHeight = _a.adjustTextAreaHeight;
        var _b = this.headerConfig, scrollY = _b.scrollY, viewportHeight = _b.viewportHeight;
        var fontSize = this.getTextStyle().fontSize;
        return getAdjustPosition(textArea.y, adjustTextAreaHeight, scrollY, viewportHeight, fontSize);
    };
    BaseRowCell.prototype.getTextPosition = function () {
        var textArea = this.getTextArea();
        var _a = this.headerConfig, scrollY = _a.scrollY, viewportHeight = _a.viewportHeight;
        var adjustTextAreaHeight = this.getAdjustTextAreaHeight(textArea, scrollY, viewportHeight);
        var textY = this.calculateTextY({ textArea: textArea, adjustTextAreaHeight: adjustTextAreaHeight });
        var textX = getTextAndFollowingIconPosition(textArea, this.getTextStyle(), 0, this.getIconStyle(), this.getActionIconsCount()).text.x;
        return { x: textX, y: textY };
    };
    BaseRowCell.prototype.getIconYPosition = function () {
        var textY = this.getTextPosition().y;
        var size = this.getStyle().icon.size;
        var fontSize = this.getTextStyle().fontSize;
        return textY + (fontSize - size) / 2;
    };
    return BaseRowCell;
}(HeaderCell));

/**
 * Adapting the frozen first row for cells pivot table
 */
var RowCell = /** @class */ (function (_super) {
    __extends(RowCell, _super);
    function RowCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RowCell.prototype.handleRestOptions = function () {
        var _a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _a[_i] = arguments[_i];
        }
        var _b = __read(_a), headerConfig = _b[0], options = _b.slice(1);
        _super.prototype.handleRestOptions.call(this, headerConfig, options);
        this.frozenRowCell = options[0];
    };
    RowCell.prototype.getAdjustTextAreaHeight = function (textArea, scrollY, viewportHeight) {
        var correctY = textArea.y - this.getFrozenFirstRowHeight();
        var adjustTextAreaHeight = textArea.height;
        if (!this.spreadsheet.facet.vScrollBar &&
            correctY + textArea.height > scrollY + viewportHeight) {
            adjustTextAreaHeight = scrollY + viewportHeight - correctY;
        }
        return adjustTextAreaHeight;
    };
    RowCell.prototype.calculateTextY = function (_a) {
        var textArea = _a.textArea, adjustTextAreaHeight = _a.adjustTextAreaHeight;
        var _b = this.headerConfig, scrollY = _b.scrollY, viewportHeight = _b.viewportHeight;
        var fontSize = this.getTextStyle().fontSize;
        return getAdjustPosition(textArea.y, adjustTextAreaHeight, 
        // viewportLeft: start at the frozen row position
        scrollY + this.getFrozenFirstRowHeight(), viewportHeight, fontSize);
    };
    RowCell.prototype.getResizeClipAreaBBox = function () {
        return __assign(__assign({}, _super.prototype.getResizeClipAreaBBox.call(this)), { y: this.getFrozenFirstRowHeight() });
    };
    RowCell.prototype.getFrozenFirstRowHeight = function () {
        var _a;
        if (this.frozenRowCell) {
            // frozen row cell
            return 0;
        }
        var spreadsheet = this.headerConfig.spreadsheet;
        var facet = spreadsheet.facet;
        var frozenRowHeight = getFrozenRowCfgPivot(spreadsheet.options, (_a = facet === null || facet === void 0 ? void 0 : facet.layoutResult) === null || _a === void 0 ? void 0 : _a.rowNodes).frozenRowHeight;
        return frozenRowHeight;
    };
    return RowCell;
}(BaseRowCell));

var SeriesNumberCell = /** @class */ (function (_super) {
    __extends(SeriesNumberCell, _super);
    function SeriesNumberCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeriesNumberCell.prototype.initCell = function () {
        this.drawBackgroundShape();
        this.drawRectBorder();
        this.drawTextShape();
    };
    SeriesNumberCell.prototype.getTextStyle = function () {
        var _a;
        return (_a = this.getStyle()) === null || _a === void 0 ? void 0 : _a.seriesText;
    };
    SeriesNumberCell.prototype.getTextPosition = function () {
        return _super.prototype.getTextPosition.call(this);
    };
    SeriesNumberCell.prototype.getActionIconsCount = function () {
        return 0;
    };
    SeriesNumberCell.prototype.getIconStyle = function () {
        return undefined;
    };
    SeriesNumberCell.prototype.drawResizeAreaInLeaf = function () { };
    SeriesNumberCell.prototype.update = function () { };
    SeriesNumberCell.prototype.findFieldCondition = function () {
        return undefined;
    };
    SeriesNumberCell.prototype.mappingValue = function () {
        return undefined;
    };
    return SeriesNumberCell;
}(RowCell));

var isMultiSelectionKey = function (e) {
    return [InteractionKeyboardKey.META, InteractionKeyboardKey.CONTROL].includes(e.key);
};
var isMouseEventWithMeta = function (e) {
    return e.ctrlKey || e.metaKey;
};
var getCellMeta = function (cell) {
    var meta = cell.getMeta();
    var _a = meta || {}, id = _a.id, colIndex = _a.colIndex, rowIndex = _a.rowIndex, rowQuery = _a.rowQuery;
    return {
        id: id,
        colIndex: colIndex,
        rowIndex: rowIndex,
        type: cell.cellType,
        rowQuery: rowQuery,
    };
};
var selectCells = function (spreadsheet, cells) {
    var interaction = spreadsheet.interaction;
    interaction.changeState({
        stateName: InteractionStateName.SELECTED,
        cells: cells,
    });
    spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
};
function getRangeIndex(start, end) {
    var minRowIndex = Math.min(start.rowIndex, end.rowIndex);
    var maxRowIndex = Math.max(start.rowIndex, end.rowIndex);
    var minColIndex = Math.min(start.colIndex, end.colIndex);
    var maxColIndex = Math.max(start.colIndex, end.colIndex);
    return {
        start: {
            rowIndex: minRowIndex,
            colIndex: minColIndex,
        },
        end: {
            rowIndex: maxRowIndex,
            colIndex: maxColIndex,
        },
    };
}
function getRowCellForSelectedCell(meta, spreadsheet) {
    var interaction = spreadsheet.interaction, facet = spreadsheet.facet, options = spreadsheet.options;
    if (spreadsheet.isTableMode()) {
        if (!options.showSeriesNumber) {
            return [];
        }
        var colId = facet.layoutResult.colLeafNodes[0].id;
        var id_1 = getDataCellId(String(meta.rowIndex), colId);
        var result = [];
        var rowCell = interaction
            .getAllCells()
            .find(function (cell) { return cell.getMeta().id === id_1; });
        if (rowCell && rowCell instanceof TableSeriesCell) {
            result.push(rowCell);
        }
        return result;
    }
    return getActiveHoverRowColCells(meta.rowId, interaction.getAllRowHeaderCells(), spreadsheet.isHierarchyTreeType());
}
var getRowHeaderByCellId = function (cellId, s2) {
    return s2.getRowNodes().filter(function (node) { return cellId.includes(node.id); });
};
var getColHeaderByCellId = function (cellId, s2) {
    return s2.getColumnNodes().filter(function (node) { return cellId.includes(node.id); });
};
var getInteractionCells = function (cell, s2) {
    var _a = s2.interaction.getSelectedCellHighlight(), colHeader = _a.colHeader, rowHeader = _a.rowHeader;
    var headerGetters = [
        {
            shouldGet: rowHeader,
            getter: getRowHeaderByCellId,
        },
        {
            shouldGet: colHeader,
            getter: getColHeaderByCellId,
        },
    ];
    var selectedHeaderCells = headerGetters
        .filter(function (item) { return item.shouldGet; })
        .reduce(function (nodes, i) { return __spreadArray$1(__spreadArray$1([], __read(nodes), false), __read(i.getter(cell.id, s2)), false); }, [])
        .filter(function (node) { return !!node.belongsCell; })
        .map(function (node) { return getCellMeta(node.belongsCell); });
    return __spreadArray$1([cell], __read(selectedHeaderCells), false);
};
var getInteractionCellsBySelectedCells = function (selectedCells, s2) {
    var headerSelectedCell = reduce(selectedCells, function (_cells, selectedCell) {
        return __spreadArray$1(__spreadArray$1([], __read(_cells), false), __read(getInteractionCells(selectedCell, s2)), false);
    }, []);
    // headerSelectedCell 会有重复的 cell，在这里统一去重
    return uniqBy(__spreadArray$1(__spreadArray$1([], __read(selectedCells), false), __read(headerSelectedCell), false), 'id');
};
var afterSelectDataCells = function (root, updateDataCells) {
    var _a = root.getSelectedCellHighlight(), colHeader = _a.colHeader, rowHeader = _a.rowHeader;
    if (colHeader) {
        root.updateCells(root.getAllColHeaderCells());
    }
    if (rowHeader) {
        root.updateCells(root.getAllRowHeaderCells());
    }
    updateDataCells();
};

/**
 * @desc clear the interaction state information
 * @param spreadsheet sheet instance
 */
var clearState = function (spreadsheet) {
    var activeIcons = spreadsheet.store.get('visibleActionIcons');
    var allInteractedCells = spreadsheet.interaction.getInteractedCells();
    var cellMetas = spreadsheet.interaction.getState().cells;
    // 如果都处于初始化状态 不需要clear
    if (isEmpty(allInteractedCells) &&
        isEmpty(cellMetas) &&
        isEmpty(activeIcons)) {
        return false;
    }
    forEach(activeIcons, function (icon) {
        icon.set('visible', false);
    });
    spreadsheet.store.set('visibleActionIcons', []);
    forEach(allInteractedCells, function (cell) {
        cell.hideInteractionShape();
    });
    spreadsheet.interaction.resetState();
    if (spreadsheet.options.interaction.selectedCellsSpotlight) {
        var unSelectedCells = spreadsheet.interaction.getPanelGroupAllUnSelectedDataCells() || [];
        forEach(unSelectedCells, function (cell) {
            cell.clearUnselectedState();
        });
    }
    return true;
};
/**
 * @desc set the interaction state information
 * @param spreadsheet sheet instance
 * @param interactionStateInfo
 */
var setState = function (spreadsheet, interactionStateInfo) {
    var stateName = interactionStateInfo === null || interactionStateInfo === void 0 ? void 0 : interactionStateInfo.stateName;
    if (!spreadsheet.interaction.isEqualStateName(stateName)) {
        // There can only be one state in the table. When the stateName is inconsistent with the state in the stateInfo, the previously stored state should be cleared.
        clearState(spreadsheet);
        spreadsheet.hideTooltip();
        spreadsheet.store.set(INTERACTION_STATE_INFO_KEY, interactionStateInfo);
    }
};

// 获取滚动指定列到视口内的滚动 x 轴 Offset。滚动到视口边缘位置，左侧和右侧视滚动方向而定。
var getScrollOffsetForCol = function (colIndex, direction, spreadsheet) {
    var _a, _b;
    var facet = spreadsheet.facet;
    var width = facet.panelBBox.width;
    var info = facet === null || facet === void 0 ? void 0 : facet.frozenGroupInfo;
    var frozenColWidth = (_a = info === null || info === void 0 ? void 0 : info.frozenCol.width) !== null && _a !== void 0 ? _a : 0;
    var frozenTrailingColWidth = (_b = info === null || info === void 0 ? void 0 : info.frozenTrailingCol.width) !== null && _b !== void 0 ? _b : 0;
    var colNode = facet.layoutResult.colLeafNodes[colIndex];
    if (direction === ScrollDirection.SCROLL_UP) {
        return colNode.x - frozenColWidth;
    }
    return colNode.x + colNode.width - (width - frozenTrailingColWidth);
};
// 获取滚动指定行到视口内的滚动 y 轴 Offset。滚动到视口边缘位置，上侧和下侧视滚动方向而定。
var getScrollOffsetForRow = function (rowIndex, direction, spreadsheet) {
    var _a, _b;
    var facet = spreadsheet.facet;
    var getCellOffsetY = facet.viewCellHeights.getCellOffsetY;
    var height = facet.panelBBox.height;
    var rowOffset = getCellOffsetY(rowIndex + 1);
    if (isNil(rowOffset)) {
        return 0;
    }
    var info = facet === null || facet === void 0 ? void 0 : facet.frozenGroupInfo;
    var frozenRowHeight = (_a = info === null || info === void 0 ? void 0 : info.frozenRow.height) !== null && _a !== void 0 ? _a : 0;
    var frozenTrailingRowHeight = (_b = info === null || info === void 0 ? void 0 : info.frozenTrailingRow.height) !== null && _b !== void 0 ? _b : 0;
    if (direction === ScrollDirection.SCROLL_UP) {
        return getCellOffsetY(rowIndex) - frozenRowHeight;
    }
    return rowOffset - (height - frozenTrailingRowHeight);
};

/*!
 *  decimal.js v10.4.3
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */


// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


  // The maximum exponent magnitude.
  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
var EXP_LIMIT = 9e15,                      // 0 to 9e15

  // The limit on the value of `precision`, and on the value of the first argument to
  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
  MAX_DIGITS = 1e9,                        // 0 to 1e9

  // Base conversion alphabet.
  NUMERALS = '0123456789abcdef',

  // The natural logarithm of 10 (1025 digits).
  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

  // Pi (1025 digits).
  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


  // The initial configuration properties of the Decimal constructor.
  DEFAULTS = {

    // These values must be integers within the stated ranges (inclusive).
    // Most of these values can be changed at run-time using the `Decimal.config` method.

    // The maximum number of significant digits of the result of a calculation or base conversion.
    // E.g. `Decimal.config({ precision: 20 });`
    precision: 20,                         // 1 to MAX_DIGITS

    // The rounding mode used when rounding to `precision`.
    //
    // ROUND_UP         0 Away from zero.
    // ROUND_DOWN       1 Towards zero.
    // ROUND_CEIL       2 Towards +Infinity.
    // ROUND_FLOOR      3 Towards -Infinity.
    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    //
    // E.g.
    // `Decimal.rounding = 4;`
    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
    rounding: 4,                           // 0 to 8

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP         0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
    // FLOOR      3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN  6 The IEEE 754 remainder function.
    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
    //
    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
    // division (9) are commonly used for the modulus operation. The other rounding modes can also
    // be used, but they may not give useful results.
    modulo: 1,                             // 0 to 9

    // The exponent value at and beneath which `toString` returns exponential notation.
    // JavaScript numbers: -7
    toExpNeg: -7,                          // 0 to -EXP_LIMIT

    // The exponent value at and above which `toString` returns exponential notation.
    // JavaScript numbers: 21
    toExpPos:  21,                         // 0 to EXP_LIMIT

    // The minimum exponent value, beneath which underflow to zero occurs.
    // JavaScript numbers: -324  (5e-324)
    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

    // The maximum exponent value, above which overflow to Infinity occurs.
    // JavaScript numbers: 308  (1.7976931348623157e+308)
    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

    // Whether to use cryptographically-secure random number generation, if available.
    crypto: false                          // true/false
  },


// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


  inexact, quadrant,
  external = true,

  decimalError = '[DecimalError] ',
  invalidArgument = decimalError + 'Invalid argument: ',
  precisionLimitExceeded = decimalError + 'Precision limit exceeded',
  cryptoUnavailable = decimalError + 'crypto unavailable',
  tag = '[object Decimal]',

  mathfloor = Math.floor,
  mathpow = Math.pow,

  isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
  isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
  isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
  isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

  BASE = 1e7,
  LOG_BASE = 7,
  MAX_SAFE_INTEGER = 9007199254740991,

  LN10_PRECISION = LN10.length - 1,
  PI_PRECISION = PI.length - 1,

  // Decimal.prototype object
  P = { toStringTag: tag };


// Decimal prototype methods


/*
 *  absoluteValue             abs
 *  ceil
 *  clampedTo                 clamp
 *  comparedTo                cmp
 *  cosine                    cos
 *  cubeRoot                  cbrt
 *  decimalPlaces             dp
 *  dividedBy                 div
 *  dividedToIntegerBy        divToInt
 *  equals                    eq
 *  floor
 *  greaterThan               gt
 *  greaterThanOrEqualTo      gte
 *  hyperbolicCosine          cosh
 *  hyperbolicSine            sinh
 *  hyperbolicTangent         tanh
 *  inverseCosine             acos
 *  inverseHyperbolicCosine   acosh
 *  inverseHyperbolicSine     asinh
 *  inverseHyperbolicTangent  atanh
 *  inverseSine               asin
 *  inverseTangent            atan
 *  isFinite
 *  isInteger                 isInt
 *  isNaN
 *  isNegative                isNeg
 *  isPositive                isPos
 *  isZero
 *  lessThan                  lt
 *  lessThanOrEqualTo         lte
 *  logarithm                 log
 *  [maximum]                 [max]
 *  [minimum]                 [min]
 *  minus                     sub
 *  modulo                    mod
 *  naturalExponential        exp
 *  naturalLogarithm          ln
 *  negated                   neg
 *  plus                      add
 *  precision                 sd
 *  round
 *  sine                      sin
 *  squareRoot                sqrt
 *  tangent                   tan
 *  times                     mul
 *  toBinary
 *  toDecimalPlaces           toDP
 *  toExponential
 *  toFixed
 *  toFraction
 *  toHexadecimal             toHex
 *  toNearest
 *  toNumber
 *  toOctal
 *  toPower                   pow
 *  toPrecision
 *  toSignificantDigits       toSD
 *  toString
 *  truncated                 trunc
 *  valueOf                   toJSON
 */


/*
 * Return a new Decimal whose value is the absolute value of this Decimal.
 *
 */
P.absoluteValue = P.abs = function () {
  var x = new this.constructor(this);
  if (x.s < 0) x.s = 1;
  return finalise(x);
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
 * direction of positive Infinity.
 *
 */
P.ceil = function () {
  return finalise(new this.constructor(this), this.e + 1, 2);
};


/*
 * Return a new Decimal whose value is the value of this Decimal clamped to the range
 * delineated by `min` and `max`.
 *
 * min {number|string|Decimal}
 * max {number|string|Decimal}
 *
 */
P.clampedTo = P.clamp = function (min, max) {
  var k,
    x = this,
    Ctor = x.constructor;
  min = new Ctor(min);
  max = new Ctor(max);
  if (!min.s || !max.s) return new Ctor(NaN);
  if (min.gt(max)) throw Error(invalidArgument + max);
  k = x.cmp(min);
  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);
};


/*
 * Return
 *   1    if the value of this Decimal is greater than the value of `y`,
 *  -1    if the value of this Decimal is less than the value of `y`,
 *   0    if they have the same value,
 *   NaN  if the value of either Decimal is NaN.
 *
 */
P.comparedTo = P.cmp = function (y) {
  var i, j, xdL, ydL,
    x = this,
    xd = x.d,
    yd = (y = new x.constructor(y)).d,
    xs = x.s,
    ys = y.s;

  // Either NaN or ±Infinity?
  if (!xd || !yd) {
    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
  }

  // Either zero?
  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

  // Signs differ?
  if (xs !== ys) return xs;

  // Compare exponents.
  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

  xdL = xd.length;
  ydL = yd.length;

  // Compare digit by digit.
  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
  }

  // Compare lengths.
  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
};


/*
 * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-1, 1]
 *
 * cos(0)         = 1
 * cos(-0)        = 1
 * cos(Infinity)  = NaN
 * cos(-Infinity) = NaN
 * cos(NaN)       = NaN
 *
 */
P.cosine = P.cos = function () {
  var pr, rm,
    x = this,
    Ctor = x.constructor;

  if (!x.d) return new Ctor(NaN);

  // cos(0) = cos(-0) = 1
  if (!x.d[0]) return new Ctor(1);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
  Ctor.rounding = 1;

  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
};


/*
 *
 * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 *  cbrt(0)  =  0
 *  cbrt(-0) = -0
 *  cbrt(1)  =  1
 *  cbrt(-1) = -1
 *  cbrt(N)  =  N
 *  cbrt(-I) = -I
 *  cbrt(I)  =  I
 *
 * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
 *
 */
P.cubeRoot = P.cbrt = function () {
  var e, m, n, r, rep, s, sd, t, t3, t3plusx,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite() || x.isZero()) return new Ctor(x);
  external = false;

  // Initial estimate.
  s = x.s * mathpow(x.s * x, 1 / 3);

   // Math.cbrt underflow/overflow?
   // Pass x to Math.pow as integer, then adjust the exponent of the result.
  if (!s || Math.abs(s) == 1 / 0) {
    n = digitsToString(x.d);
    e = x.e;

    // Adjust n exponent so it is a multiple of 3 away from x exponent.
    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
    s = mathpow(n, 1 / 3);

    // Rarely, e may be one less than the result exponent value.
    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

    if (s == 1 / 0) {
      n = '5e' + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf('e') + 1) + e;
    }

    r = new Ctor(n);
    r.s = x.s;
  } else {
    r = new Ctor(s.toString());
  }

  sd = (e = Ctor.precision) + 3;

  // Halley's method.
  // TODO? Compare Newton's method.
  for (;;) {
    t = r;
    t3 = t.times(t).times(t);
    t3plusx = t3.plus(x);
    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

    // TODO? Replace with for-loop and checkRoundingDigits.
    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
      n = n.slice(sd - 3, sd + 1);

      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
      // , i.e. approaching a rounding boundary, continue the iteration.
      if (n == '9999' || !rep && n == '4999') {

        // On the first iteration only, check to see if rounding up gives the exact result as the
        // nines may infinitely repeat.
        if (!rep) {
          finalise(t, e + 1, 0);

          if (t.times(t).times(t).eq(x)) {
            r = t;
            break;
          }
        }

        sd += 4;
        rep = 1;
      } else {

        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
        // If not, then there are further digits and m will be truthy.
        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

          // Truncate to the first rounding digit.
          finalise(r, e + 1, 1);
          m = !r.times(r).times(r).eq(x);
        }

        break;
      }
    }
  }

  external = true;

  return finalise(r, e, Ctor.rounding, m);
};


/*
 * Return the number of decimal places of the value of this Decimal.
 *
 */
P.decimalPlaces = P.dp = function () {
  var w,
    d = this.d,
    n = NaN;

  if (d) {
    w = d.length - 1;
    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

    // Subtract the number of trailing zeros of the last word.
    w = d[w];
    if (w) for (; w % 10 == 0; w /= 10) n--;
    if (n < 0) n = 0;
  }

  return n;
};


/*
 *  n / 0 = I
 *  n / N = N
 *  n / I = 0
 *  0 / n = 0
 *  0 / 0 = N
 *  0 / N = N
 *  0 / I = 0
 *  N / n = N
 *  N / 0 = N
 *  N / N = N
 *  N / I = N
 *  I / n = I
 *  I / 0 = I
 *  I / N = N
 *  I / I = N
 *
 * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 */
P.dividedBy = P.div = function (y) {
  return divide(this, new this.constructor(y));
};


/*
 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
 * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
 *
 */
P.dividedToIntegerBy = P.divToInt = function (y) {
  var x = this,
    Ctor = x.constructor;
  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
};


/*
 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
 *
 */
P.equals = P.eq = function (y) {
  return this.cmp(y) === 0;
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
 * direction of negative Infinity.
 *
 */
P.floor = function () {
  return finalise(new this.constructor(this), this.e + 1, 3);
};


/*
 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
 * false.
 *
 */
P.greaterThan = P.gt = function (y) {
  return this.cmp(y) > 0;
};


/*
 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
 * otherwise return false.
 *
 */
P.greaterThanOrEqualTo = P.gte = function (y) {
  var k = this.cmp(y);
  return k == 1 || k === 0;
};


/*
 * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [1, Infinity]
 *
 * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
 *
 * cosh(0)         = 1
 * cosh(-0)        = 1
 * cosh(Infinity)  = Infinity
 * cosh(-Infinity) = Infinity
 * cosh(NaN)       = NaN
 *
 *  x        time taken (ms)   result
 * 1000      9                 9.8503555700852349694e+433
 * 10000     25                4.4034091128314607936e+4342
 * 100000    171               1.4033316802130615897e+43429
 * 1000000   3817              1.5166076984010437725e+434294
 * 10000000  abandoned after 2 minute wait
 *
 * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
 *
 */
P.hyperbolicCosine = P.cosh = function () {
  var k, n, pr, rm, len,
    x = this,
    Ctor = x.constructor,
    one = new Ctor(1);

  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
  if (x.isZero()) return one;

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
  Ctor.rounding = 1;
  len = x.d.length;

  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

  // Estimate the optimum number of times to use the argument reduction.
  // TODO? Estimation reused from cosine() and may not be optimal here.
  if (len < 32) {
    k = Math.ceil(len / 3);
    n = (1 / tinyPow(4, k)).toString();
  } else {
    k = 16;
    n = '2.3283064365386962890625e-10';
  }

  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

  // Reverse argument reduction
  var cosh2_x,
    i = k,
    d8 = new Ctor(8);
  for (; i--;) {
    cosh2_x = x.times(x);
    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
  }

  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
};


/*
 * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-Infinity, Infinity]
 *
 * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
 *
 * sinh(0)         = 0
 * sinh(-0)        = -0
 * sinh(Infinity)  = Infinity
 * sinh(-Infinity) = -Infinity
 * sinh(NaN)       = NaN
 *
 * x        time taken (ms)
 * 10       2 ms
 * 100      5 ms
 * 1000     14 ms
 * 10000    82 ms
 * 100000   886 ms            1.4033316802130615897e+43429
 * 200000   2613 ms
 * 300000   5407 ms
 * 400000   8824 ms
 * 500000   13026 ms          8.7080643612718084129e+217146
 * 1000000  48543 ms
 *
 * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
 *
 */
P.hyperbolicSine = P.sinh = function () {
  var k, pr, rm, len,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite() || x.isZero()) return new Ctor(x);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
  Ctor.rounding = 1;
  len = x.d.length;

  if (len < 3) {
    x = taylorSeries(Ctor, 2, x, x, true);
  } else {

    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
    // 3 multiplications and 1 addition

    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
    // 4 multiplications and 2 additions

    // Estimate the optimum number of times to use the argument reduction.
    k = 1.4 * Math.sqrt(len);
    k = k > 16 ? 16 : k | 0;

    x = x.times(1 / tinyPow(5, k));
    x = taylorSeries(Ctor, 2, x, x, true);

    // Reverse argument reduction
    var sinh2_x,
      d5 = new Ctor(5),
      d16 = new Ctor(16),
      d20 = new Ctor(20);
    for (; k--;) {
      sinh2_x = x.times(x);
      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
    }
  }

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return finalise(x, pr, rm, true);
};


/*
 * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-1, 1]
 *
 * tanh(x) = sinh(x) / cosh(x)
 *
 * tanh(0)         = 0
 * tanh(-0)        = -0
 * tanh(Infinity)  = 1
 * tanh(-Infinity) = -1
 * tanh(NaN)       = NaN
 *
 */
P.hyperbolicTangent = P.tanh = function () {
  var pr, rm,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite()) return new Ctor(x.s);
  if (x.isZero()) return new Ctor(x);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 7;
  Ctor.rounding = 1;

  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
};


/*
 * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
 * this Decimal.
 *
 * Domain: [-1, 1]
 * Range: [0, pi]
 *
 * acos(x) = pi/2 - asin(x)
 *
 * acos(0)       = pi/2
 * acos(-0)      = pi/2
 * acos(1)       = 0
 * acos(-1)      = pi
 * acos(1/2)     = pi/3
 * acos(-1/2)    = 2*pi/3
 * acos(|x| > 1) = NaN
 * acos(NaN)     = NaN
 *
 */
P.inverseCosine = P.acos = function () {
  var halfPi,
    x = this,
    Ctor = x.constructor,
    k = x.abs().cmp(1),
    pr = Ctor.precision,
    rm = Ctor.rounding;

  if (k !== -1) {
    return k === 0
      // |x| is 1
      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
      // |x| > 1 or x is NaN
      : new Ctor(NaN);
  }

  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

  Ctor.precision = pr + 6;
  Ctor.rounding = 1;

  x = x.asin();
  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return halfPi.minus(x);
};


/*
 * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
 * value of this Decimal.
 *
 * Domain: [1, Infinity]
 * Range: [0, Infinity]
 *
 * acosh(x) = ln(x + sqrt(x^2 - 1))
 *
 * acosh(x < 1)     = NaN
 * acosh(NaN)       = NaN
 * acosh(Infinity)  = Infinity
 * acosh(-Infinity) = NaN
 * acosh(0)         = NaN
 * acosh(-0)        = NaN
 * acosh(1)         = 0
 * acosh(-1)        = NaN
 *
 */
P.inverseHyperbolicCosine = P.acosh = function () {
  var pr, rm,
    x = this,
    Ctor = x.constructor;

  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
  if (!x.isFinite()) return new Ctor(x);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
  Ctor.rounding = 1;
  external = false;

  x = x.times(x).minus(1).sqrt().plus(x);

  external = true;
  Ctor.precision = pr;
  Ctor.rounding = rm;

  return x.ln();
};


/*
 * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
 * of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-Infinity, Infinity]
 *
 * asinh(x) = ln(x + sqrt(x^2 + 1))
 *
 * asinh(NaN)       = NaN
 * asinh(Infinity)  = Infinity
 * asinh(-Infinity) = -Infinity
 * asinh(0)         = 0
 * asinh(-0)        = -0
 *
 */
P.inverseHyperbolicSine = P.asinh = function () {
  var pr, rm,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite() || x.isZero()) return new Ctor(x);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
  Ctor.rounding = 1;
  external = false;

  x = x.times(x).plus(1).sqrt().plus(x);

  external = true;
  Ctor.precision = pr;
  Ctor.rounding = rm;

  return x.ln();
};


/*
 * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
 * value of this Decimal.
 *
 * Domain: [-1, 1]
 * Range: [-Infinity, Infinity]
 *
 * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
 *
 * atanh(|x| > 1)   = NaN
 * atanh(NaN)       = NaN
 * atanh(Infinity)  = NaN
 * atanh(-Infinity) = NaN
 * atanh(0)         = 0
 * atanh(-0)        = -0
 * atanh(1)         = Infinity
 * atanh(-1)        = -Infinity
 *
 */
P.inverseHyperbolicTangent = P.atanh = function () {
  var pr, rm, wpr, xsd,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite()) return new Ctor(NaN);
  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  xsd = x.sd();

  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

  Ctor.precision = wpr = xsd - x.e;

  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

  Ctor.precision = pr + 4;
  Ctor.rounding = 1;

  x = x.ln();

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return x.times(0.5);
};


/*
 * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
 * Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-pi/2, pi/2]
 *
 * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
 *
 * asin(0)       = 0
 * asin(-0)      = -0
 * asin(1/2)     = pi/6
 * asin(-1/2)    = -pi/6
 * asin(1)       = pi/2
 * asin(-1)      = -pi/2
 * asin(|x| > 1) = NaN
 * asin(NaN)     = NaN
 *
 * TODO? Compare performance of Taylor series.
 *
 */
P.inverseSine = P.asin = function () {
  var halfPi, k,
    pr, rm,
    x = this,
    Ctor = x.constructor;

  if (x.isZero()) return new Ctor(x);

  k = x.abs().cmp(1);
  pr = Ctor.precision;
  rm = Ctor.rounding;

  if (k !== -1) {

    // |x| is 1
    if (k === 0) {
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
      halfPi.s = x.s;
      return halfPi;
    }

    // |x| > 1 or x is NaN
    return new Ctor(NaN);
  }

  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

  Ctor.precision = pr + 6;
  Ctor.rounding = 1;

  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return x.times(2);
};


/*
 * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
 * of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-pi/2, pi/2]
 *
 * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
 *
 * atan(0)         = 0
 * atan(-0)        = -0
 * atan(1)         = pi/4
 * atan(-1)        = -pi/4
 * atan(Infinity)  = pi/2
 * atan(-Infinity) = -pi/2
 * atan(NaN)       = NaN
 *
 */
P.inverseTangent = P.atan = function () {
  var i, j, k, n, px, t, r, wpr, x2,
    x = this,
    Ctor = x.constructor,
    pr = Ctor.precision,
    rm = Ctor.rounding;

  if (!x.isFinite()) {
    if (!x.s) return new Ctor(NaN);
    if (pr + 4 <= PI_PRECISION) {
      r = getPi(Ctor, pr + 4, rm).times(0.5);
      r.s = x.s;
      return r;
    }
  } else if (x.isZero()) {
    return new Ctor(x);
  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
    r = getPi(Ctor, pr + 4, rm).times(0.25);
    r.s = x.s;
    return r;
  }

  Ctor.precision = wpr = pr + 10;
  Ctor.rounding = 1;

  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

  // Argument reduction
  // Ensure |x| < 0.42
  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

  k = Math.min(28, wpr / LOG_BASE + 2 | 0);

  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

  external = false;

  j = Math.ceil(wpr / LOG_BASE);
  n = 1;
  x2 = x.times(x);
  r = new Ctor(x);
  px = x;

  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
  for (; i !== -1;) {
    px = px.times(x2);
    t = r.minus(px.div(n += 2));

    px = px.times(x2);
    r = t.plus(px.div(n += 2));

    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
  }

  if (k) r = r.times(2 << (k - 1));

  external = true;

  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
};


/*
 * Return true if the value of this Decimal is a finite number, otherwise return false.
 *
 */
P.isFinite = function () {
  return !!this.d;
};


/*
 * Return true if the value of this Decimal is an integer, otherwise return false.
 *
 */
P.isInteger = P.isInt = function () {
  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
};


/*
 * Return true if the value of this Decimal is NaN, otherwise return false.
 *
 */
P.isNaN = function () {
  return !this.s;
};


/*
 * Return true if the value of this Decimal is negative, otherwise return false.
 *
 */
P.isNegative = P.isNeg = function () {
  return this.s < 0;
};


/*
 * Return true if the value of this Decimal is positive, otherwise return false.
 *
 */
P.isPositive = P.isPos = function () {
  return this.s > 0;
};


/*
 * Return true if the value of this Decimal is 0 or -0, otherwise return false.
 *
 */
P.isZero = function () {
  return !!this.d && this.d[0] === 0;
};


/*
 * Return true if the value of this Decimal is less than `y`, otherwise return false.
 *
 */
P.lessThan = P.lt = function (y) {
  return this.cmp(y) < 0;
};


/*
 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
 *
 */
P.lessThanOrEqualTo = P.lte = function (y) {
  return this.cmp(y) < 1;
};


/*
 * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * If no base is specified, return log[10](arg).
 *
 * log[base](arg) = ln(arg) / ln(base)
 *
 * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
 * otherwise:
 *
 * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
 * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
 * between the result and the correctly rounded result will be one ulp (unit in the last place).
 *
 * log[-b](a)       = NaN
 * log[0](a)        = NaN
 * log[1](a)        = NaN
 * log[NaN](a)      = NaN
 * log[Infinity](a) = NaN
 * log[b](0)        = -Infinity
 * log[b](-0)       = -Infinity
 * log[b](-a)       = NaN
 * log[b](1)        = 0
 * log[b](Infinity) = Infinity
 * log[b](NaN)      = NaN
 *
 * [base] {number|string|Decimal} The base of the logarithm.
 *
 */
P.logarithm = P.log = function (base) {
  var isBase10, d, denominator, k, inf, num, sd, r,
    arg = this,
    Ctor = arg.constructor,
    pr = Ctor.precision,
    rm = Ctor.rounding,
    guard = 5;

  // Default base is 10.
  if (base == null) {
    base = new Ctor(10);
    isBase10 = true;
  } else {
    base = new Ctor(base);
    d = base.d;

    // Return NaN if base is negative, or non-finite, or is 0 or 1.
    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

    isBase10 = base.eq(10);
  }

  d = arg.d;

  // Is arg negative, non-finite, 0 or 1?
  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
  }

  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
  // integer power of 10.
  if (isBase10) {
    if (d.length > 1) {
      inf = true;
    } else {
      for (k = d[0]; k % 10 === 0;) k /= 10;
      inf = k !== 1;
    }
  }

  external = false;
  sd = pr + guard;
  num = naturalLogarithm(arg, sd);
  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

  // The result will have 5 rounding digits.
  r = divide(num, denominator, sd, 1);

  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
  // calculate 10 further digits.
  //
  // If the result is known to have an infinite decimal expansion, repeat this until it is clear
  // that the result is above or below the boundary. Otherwise, if after calculating the 10
  // further digits, the last 14 are nines, round up and assume the result is exact.
  // Also assume the result is exact if the last 14 are zero.
  //
  // Example of a result that will be incorrectly rounded:
  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
  // place is still 2.6.
  if (checkRoundingDigits(r.d, k = pr, rm)) {

    do {
      sd += 10;
      num = naturalLogarithm(arg, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
      r = divide(num, denominator, sd, 1);

      if (!inf) {

        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
          r = finalise(r, pr + 1, 0);
        }

        break;
      }
    } while (checkRoundingDigits(r.d, k += 10, rm));
  }

  external = true;

  return finalise(r, pr, rm);
};


/*
 * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
 *
 * arguments {number|string|Decimal}
 *
P.max = function () {
  Array.prototype.push.call(arguments, this);
  return maxOrMin(this.constructor, arguments, 'lt');
};
 */


/*
 * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
 *
 * arguments {number|string|Decimal}
 *
P.min = function () {
  Array.prototype.push.call(arguments, this);
  return maxOrMin(this.constructor, arguments, 'gt');
};
 */


/*
 *  n - 0 = n
 *  n - N = N
 *  n - I = -I
 *  0 - n = -n
 *  0 - 0 = 0
 *  0 - N = N
 *  0 - I = -I
 *  N - n = N
 *  N - 0 = N
 *  N - N = N
 *  N - I = N
 *  I - n = I
 *  I - 0 = I
 *  I - N = N
 *  I - I = N
 *
 * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 */
P.minus = P.sub = function (y) {
  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
    x = this,
    Ctor = x.constructor;

  y = new Ctor(y);

  // If either is not finite...
  if (!x.d || !y.d) {

    // Return NaN if either is NaN.
    if (!x.s || !y.s) y = new Ctor(NaN);

    // Return y negated if x is finite and y is ±Infinity.
    else if (x.d) y.s = -y.s;

    // Return x if y is finite and x is ±Infinity.
    // Return x if both are ±Infinity with different signs.
    // Return NaN if both are ±Infinity with the same sign.
    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

    return y;
  }

  // If signs differ...
  if (x.s != y.s) {
    y.s = -y.s;
    return x.plus(y);
  }

  xd = x.d;
  yd = y.d;
  pr = Ctor.precision;
  rm = Ctor.rounding;

  // If either is zero...
  if (!xd[0] || !yd[0]) {

    // Return y negated if x is zero and y is non-zero.
    if (yd[0]) y.s = -y.s;

    // Return x if y is zero and x is non-zero.
    else if (xd[0]) y = new Ctor(x);

    // Return zero if both are zero.
    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
    else return new Ctor(rm === 3 ? -0 : 0);

    return external ? finalise(y, pr, rm) : y;
  }

  // x and y are finite, non-zero numbers with the same sign.

  // Calculate base 1e7 exponents.
  e = mathfloor(y.e / LOG_BASE);
  xe = mathfloor(x.e / LOG_BASE);

  xd = xd.slice();
  k = xe - e;

  // If base 1e7 exponents differ...
  if (k) {
    xLTy = k < 0;

    if (xLTy) {
      d = xd;
      k = -k;
      len = yd.length;
    } else {
      d = yd;
      e = xe;
      len = xd.length;
    }

    // Numbers with massively different exponents would result in a very high number of
    // zeros needing to be prepended, but this can be avoided while still ensuring correct
    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

    if (k > i) {
      k = i;
      d.length = 1;
    }

    // Prepend zeros to equalise exponents.
    d.reverse();
    for (i = k; i--;) d.push(0);
    d.reverse();

  // Base 1e7 exponents equal.
  } else {

    // Check digits to determine which is the bigger number.

    i = xd.length;
    len = yd.length;
    xLTy = i < len;
    if (xLTy) len = i;

    for (i = 0; i < len; i++) {
      if (xd[i] != yd[i]) {
        xLTy = xd[i] < yd[i];
        break;
      }
    }

    k = 0;
  }

  if (xLTy) {
    d = xd;
    xd = yd;
    yd = d;
    y.s = -y.s;
  }

  len = xd.length;

  // Append zeros to `xd` if shorter.
  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

  // Subtract yd from xd.
  for (i = yd.length; i > k;) {

    if (xd[--i] < yd[i]) {
      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
      --xd[j];
      xd[i] += BASE;
    }

    xd[i] -= yd[i];
  }

  // Remove trailing zeros.
  for (; xd[--len] === 0;) xd.pop();

  // Remove leading zeros and adjust exponent accordingly.
  for (; xd[0] === 0; xd.shift()) --e;

  // Zero?
  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

  y.d = xd;
  y.e = getBase10Exponent(xd, e);

  return external ? finalise(y, pr, rm) : y;
};


/*
 *   n % 0 =  N
 *   n % N =  N
 *   n % I =  n
 *   0 % n =  0
 *  -0 % n = -0
 *   0 % 0 =  N
 *   0 % N =  N
 *   0 % I =  0
 *   N % n =  N
 *   N % 0 =  N
 *   N % N =  N
 *   N % I =  N
 *   I % n =  N
 *   I % 0 =  N
 *   I % N =  N
 *   I % I =  N
 *
 * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * The result depends on the modulo mode.
 *
 */
P.modulo = P.mod = function (y) {
  var q,
    x = this,
    Ctor = x.constructor;

  y = new Ctor(y);

  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

  // Return x if y is ±Infinity or x is ±0.
  if (!y.d || x.d && !x.d[0]) {
    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
  }

  // Prevent rounding of intermediate calculations.
  external = false;

  if (Ctor.modulo == 9) {

    // Euclidian division: q = sign(y) * floor(x / abs(y))
    // result = x - q * y    where  0 <= result < abs(y)
    q = divide(x, y.abs(), 0, 3, 1);
    q.s *= y.s;
  } else {
    q = divide(x, y, 0, Ctor.modulo, 1);
  }

  q = q.times(y);

  external = true;

  return x.minus(q);
};


/*
 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
 * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 */
P.naturalExponential = P.exp = function () {
  return naturalExponential(this);
};


/*
 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
 * rounded to `precision` significant digits using rounding mode `rounding`.
 *
 */
P.naturalLogarithm = P.ln = function () {
  return naturalLogarithm(this);
};


/*
 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
 * -1.
 *
 */
P.negated = P.neg = function () {
  var x = new this.constructor(this);
  x.s = -x.s;
  return finalise(x);
};


/*
 *  n + 0 = n
 *  n + N = N
 *  n + I = I
 *  0 + n = n
 *  0 + 0 = 0
 *  0 + N = N
 *  0 + I = I
 *  N + n = N
 *  N + 0 = N
 *  N + N = N
 *  N + I = N
 *  I + n = I
 *  I + 0 = I
 *  I + N = N
 *  I + I = I
 *
 * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 */
P.plus = P.add = function (y) {
  var carry, d, e, i, k, len, pr, rm, xd, yd,
    x = this,
    Ctor = x.constructor;

  y = new Ctor(y);

  // If either is not finite...
  if (!x.d || !y.d) {

    // Return NaN if either is NaN.
    if (!x.s || !y.s) y = new Ctor(NaN);

    // Return x if y is finite and x is ±Infinity.
    // Return x if both are ±Infinity with the same sign.
    // Return NaN if both are ±Infinity with different signs.
    // Return y if x is finite and y is ±Infinity.
    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

    return y;
  }

   // If signs differ...
  if (x.s != y.s) {
    y.s = -y.s;
    return x.minus(y);
  }

  xd = x.d;
  yd = y.d;
  pr = Ctor.precision;
  rm = Ctor.rounding;

  // If either is zero...
  if (!xd[0] || !yd[0]) {

    // Return x if y is zero.
    // Return y if y is non-zero.
    if (!yd[0]) y = new Ctor(x);

    return external ? finalise(y, pr, rm) : y;
  }

  // x and y are finite, non-zero numbers with the same sign.

  // Calculate base 1e7 exponents.
  k = mathfloor(x.e / LOG_BASE);
  e = mathfloor(y.e / LOG_BASE);

  xd = xd.slice();
  i = k - e;

  // If base 1e7 exponents differ...
  if (i) {

    if (i < 0) {
      d = xd;
      i = -i;
      len = yd.length;
    } else {
      d = yd;
      e = k;
      len = xd.length;
    }

    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
    k = Math.ceil(pr / LOG_BASE);
    len = k > len ? k + 1 : len + 1;

    if (i > len) {
      i = len;
      d.length = 1;
    }

    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
    d.reverse();
    for (; i--;) d.push(0);
    d.reverse();
  }

  len = xd.length;
  i = yd.length;

  // If yd is longer than xd, swap xd and yd so xd points to the longer array.
  if (len - i < 0) {
    i = len;
    d = yd;
    yd = xd;
    xd = d;
  }

  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
  for (carry = 0; i;) {
    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
    xd[i] %= BASE;
  }

  if (carry) {
    xd.unshift(carry);
    ++e;
  }

  // Remove trailing zeros.
  // No need to check for zero, as +x + +y != 0 && -x + -y != 0
  for (len = xd.length; xd[--len] == 0;) xd.pop();

  y.d = xd;
  y.e = getBase10Exponent(xd, e);

  return external ? finalise(y, pr, rm) : y;
};


/*
 * Return the number of significant digits of the value of this Decimal.
 *
 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
 *
 */
P.precision = P.sd = function (z) {
  var k,
    x = this;

  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

  if (x.d) {
    k = getPrecision(x.d);
    if (z && x.e + 1 > k) k = x.e + 1;
  } else {
    k = NaN;
  }

  return k;
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
 * rounding mode `rounding`.
 *
 */
P.round = function () {
  var x = this,
    Ctor = x.constructor;

  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
};


/*
 * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-1, 1]
 *
 * sin(x) = x - x^3/3! + x^5/5! - ...
 *
 * sin(0)         = 0
 * sin(-0)        = -0
 * sin(Infinity)  = NaN
 * sin(-Infinity) = NaN
 * sin(NaN)       = NaN
 *
 */
P.sine = P.sin = function () {
  var pr, rm,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite()) return new Ctor(NaN);
  if (x.isZero()) return new Ctor(x);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
  Ctor.rounding = 1;

  x = sine(Ctor, toLessThanHalfPi(Ctor, x));

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
};


/*
 * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 *  sqrt(-n) =  N
 *  sqrt(N)  =  N
 *  sqrt(-I) =  N
 *  sqrt(I)  =  I
 *  sqrt(0)  =  0
 *  sqrt(-0) = -0
 *
 */
P.squareRoot = P.sqrt = function () {
  var m, n, sd, r, rep, t,
    x = this,
    d = x.d,
    e = x.e,
    s = x.s,
    Ctor = x.constructor;

  // Negative/NaN/Infinity/zero?
  if (s !== 1 || !d || !d[0]) {
    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
  }

  external = false;

  // Initial estimate.
  s = Math.sqrt(+x);

  // Math.sqrt underflow/overflow?
  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
  if (s == 0 || s == 1 / 0) {
    n = digitsToString(d);

    if ((n.length + e) % 2 == 0) n += '0';
    s = Math.sqrt(n);
    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

    if (s == 1 / 0) {
      n = '5e' + e;
    } else {
      n = s.toExponential();
      n = n.slice(0, n.indexOf('e') + 1) + e;
    }

    r = new Ctor(n);
  } else {
    r = new Ctor(s.toString());
  }

  sd = (e = Ctor.precision) + 3;

  // Newton-Raphson iteration.
  for (;;) {
    t = r;
    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

    // TODO? Replace with for-loop and checkRoundingDigits.
    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
      n = n.slice(sd - 3, sd + 1);

      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
      // 4999, i.e. approaching a rounding boundary, continue the iteration.
      if (n == '9999' || !rep && n == '4999') {

        // On the first iteration only, check to see if rounding up gives the exact result as the
        // nines may infinitely repeat.
        if (!rep) {
          finalise(t, e + 1, 0);

          if (t.times(t).eq(x)) {
            r = t;
            break;
          }
        }

        sd += 4;
        rep = 1;
      } else {

        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
        // If not, then there are further digits and m will be truthy.
        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

          // Truncate to the first rounding digit.
          finalise(r, e + 1, 1);
          m = !r.times(r).eq(x);
        }

        break;
      }
    }
  }

  external = true;

  return finalise(r, e, Ctor.rounding, m);
};


/*
 * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-Infinity, Infinity]
 *
 * tan(0)         = 0
 * tan(-0)        = -0
 * tan(Infinity)  = NaN
 * tan(-Infinity) = NaN
 * tan(NaN)       = NaN
 *
 */
P.tangent = P.tan = function () {
  var pr, rm,
    x = this,
    Ctor = x.constructor;

  if (!x.isFinite()) return new Ctor(NaN);
  if (x.isZero()) return new Ctor(x);

  pr = Ctor.precision;
  rm = Ctor.rounding;
  Ctor.precision = pr + 10;
  Ctor.rounding = 1;

  x = x.sin();
  x.s = 1;
  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

  Ctor.precision = pr;
  Ctor.rounding = rm;

  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
};


/*
 *  n * 0 = 0
 *  n * N = N
 *  n * I = I
 *  0 * n = 0
 *  0 * 0 = 0
 *  0 * N = N
 *  0 * I = N
 *  N * n = N
 *  N * 0 = N
 *  N * N = N
 *  N * I = N
 *  I * n = I
 *  I * 0 = N
 *  I * N = N
 *  I * I = I
 *
 * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 */
P.times = P.mul = function (y) {
  var carry, e, i, k, r, rL, t, xdL, ydL,
    x = this,
    Ctor = x.constructor,
    xd = x.d,
    yd = (y = new Ctor(y)).d;

  y.s *= x.s;

   // If either is NaN, ±Infinity or ±0...
  if (!xd || !xd[0] || !yd || !yd[0]) {

    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

      // Return NaN if either is NaN.
      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
      ? NaN

      // Return ±Infinity if either is ±Infinity.
      // Return ±0 if either is ±0.
      : !xd || !yd ? y.s / 0 : y.s * 0);
  }

  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
  xdL = xd.length;
  ydL = yd.length;

  // Ensure xd points to the longer array.
  if (xdL < ydL) {
    r = xd;
    xd = yd;
    yd = r;
    rL = xdL;
    xdL = ydL;
    ydL = rL;
  }

  // Initialise the result array with zeros.
  r = [];
  rL = xdL + ydL;
  for (i = rL; i--;) r.push(0);

  // Multiply!
  for (i = ydL; --i >= 0;) {
    carry = 0;
    for (k = xdL + i; k > i;) {
      t = r[k] + yd[i] * xd[k - i - 1] + carry;
      r[k--] = t % BASE | 0;
      carry = t / BASE | 0;
    }

    r[k] = (r[k] + carry) % BASE | 0;
  }

  // Remove trailing zeros.
  for (; !r[--rL];) r.pop();

  if (carry) ++e;
  else r.shift();

  y.d = r;
  y.e = getBase10Exponent(r, e);

  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
};


/*
 * Return a string representing the value of this Decimal in base 2, round to `sd` significant
 * digits using rounding mode `rm`.
 *
 * If the optional `sd` argument is present then return binary exponential notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toBinary = function (sd, rm) {
  return toStringBinary(this, 2, sd, rm);
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
 *
 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toDecimalPlaces = P.toDP = function (dp, rm) {
  var x = this,
    Ctor = x.constructor;

  x = new Ctor(x);
  if (dp === void 0) return x;

  checkInt32(dp, 0, MAX_DIGITS);

  if (rm === void 0) rm = Ctor.rounding;
  else checkInt32(rm, 0, 8);

  return finalise(x, dp + x.e + 1, rm);
};


/*
 * Return a string representing the value of this Decimal in exponential notation rounded to
 * `dp` fixed decimal places using rounding mode `rounding`.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toExponential = function (dp, rm) {
  var str,
    x = this,
    Ctor = x.constructor;

  if (dp === void 0) {
    str = finiteToString(x, true);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    x = finalise(new Ctor(x), dp + 1, rm);
    str = finiteToString(x, true, dp + 1);
  }

  return x.isNeg() && !x.isZero() ? '-' + str : str;
};


/*
 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
 * omitted.
 *
 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
 *
 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 * (-0).toFixed(3) is '0.000'.
 * (-0.5).toFixed(0) is '-0'.
 *
 */
P.toFixed = function (dp, rm) {
  var str, y,
    x = this,
    Ctor = x.constructor;

  if (dp === void 0) {
    str = finiteToString(x);
  } else {
    checkInt32(dp, 0, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    y = finalise(new Ctor(x), dp + x.e + 1, rm);
    str = finiteToString(y, false, dp + y.e + 1);
  }

  // To determine whether to add the minus sign look at the value before it was rounded,
  // i.e. look at `x` rather than `y`.
  return x.isNeg() && !x.isZero() ? '-' + str : str;
};


/*
 * Return an array representing the value of this Decimal as a simple fraction with an integer
 * numerator and an integer denominator.
 *
 * The denominator will be a positive non-zero value less than or equal to the specified maximum
 * denominator. If a maximum denominator is not specified, the denominator will be the lowest
 * value necessary to represent the number exactly.
 *
 * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
 *
 */
P.toFraction = function (maxD) {
  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
    x = this,
    xd = x.d,
    Ctor = x.constructor;

  if (!xd) return new Ctor(x);

  n1 = d0 = new Ctor(1);
  d1 = n0 = new Ctor(0);

  d = new Ctor(d1);
  e = d.e = getPrecision(xd) - x.e - 1;
  k = e % LOG_BASE;
  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

  if (maxD == null) {

    // d is 10**e, the minimum max-denominator needed.
    maxD = e > 0 ? d : n1;
  } else {
    n = new Ctor(maxD);
    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
  }

  external = false;
  n = new Ctor(digitsToString(xd));
  pr = Ctor.precision;
  Ctor.precision = e = xd.length * LOG_BASE * 2;

  for (;;)  {
    q = divide(n, d, 0, 1, 1);
    d2 = d0.plus(q.times(d1));
    if (d2.cmp(maxD) == 1) break;
    d0 = d1;
    d1 = d2;
    d2 = n1;
    n1 = n0.plus(q.times(d2));
    n0 = d2;
    d2 = d;
    d = n.minus(q.times(d2));
    n = d2;
  }

  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
  n0 = n0.plus(d2.times(n1));
  d0 = d0.plus(d2.times(d1));
  n0.s = n1.s = x.s;

  // Determine which fraction is closer to x, n0/d0 or n1/d1?
  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
      ? [n1, d1] : [n0, d0];

  Ctor.precision = pr;
  external = true;

  return r;
};


/*
 * Return a string representing the value of this Decimal in base 16, round to `sd` significant
 * digits using rounding mode `rm`.
 *
 * If the optional `sd` argument is present then return binary exponential notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toHexadecimal = P.toHex = function (sd, rm) {
  return toStringBinary(this, 16, sd, rm);
};


/*
 * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
 * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
 *
 * The return value will always have the same sign as this Decimal, unless either this Decimal
 * or `y` is NaN, in which case the return value will be also be NaN.
 *
 * The return value is not affected by the value of `precision`.
 *
 * y {number|string|Decimal} The magnitude to round to a multiple of.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * 'toNearest() rounding mode not an integer: {rm}'
 * 'toNearest() rounding mode out of range: {rm}'
 *
 */
P.toNearest = function (y, rm) {
  var x = this,
    Ctor = x.constructor;

  x = new Ctor(x);

  if (y == null) {

    // If x is not finite, return x.
    if (!x.d) return x;

    y = new Ctor(1);
    rm = Ctor.rounding;
  } else {
    y = new Ctor(y);
    if (rm === void 0) {
      rm = Ctor.rounding;
    } else {
      checkInt32(rm, 0, 8);
    }

    // If x is not finite, return x if y is not NaN, else NaN.
    if (!x.d) return y.s ? x : y;

    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
    if (!y.d) {
      if (y.s) y.s = x.s;
      return y;
    }
  }

  // If y is not zero, calculate the nearest multiple of y to x.
  if (y.d[0]) {
    external = false;
    x = divide(x, y, 0, rm, 1).times(y);
    external = true;
    finalise(x);

  // If y is zero, return zero with the sign of x.
  } else {
    y.s = x.s;
    x = y;
  }

  return x;
};


/*
 * Return the value of this Decimal converted to a number primitive.
 * Zero keeps its sign.
 *
 */
P.toNumber = function () {
  return +this;
};


/*
 * Return a string representing the value of this Decimal in base 8, round to `sd` significant
 * digits using rounding mode `rm`.
 *
 * If the optional `sd` argument is present then return binary exponential notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toOctal = function (sd, rm) {
  return toStringBinary(this, 8, sd, rm);
};


/*
 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
 * to `precision` significant digits using rounding mode `rounding`.
 *
 * ECMAScript compliant.
 *
 *   pow(x, NaN)                           = NaN
 *   pow(x, ±0)                            = 1

 *   pow(NaN, non-zero)                    = NaN
 *   pow(abs(x) > 1, +Infinity)            = +Infinity
 *   pow(abs(x) > 1, -Infinity)            = +0
 *   pow(abs(x) == 1, ±Infinity)           = NaN
 *   pow(abs(x) < 1, +Infinity)            = +0
 *   pow(abs(x) < 1, -Infinity)            = +Infinity
 *   pow(+Infinity, y > 0)                 = +Infinity
 *   pow(+Infinity, y < 0)                 = +0
 *   pow(-Infinity, odd integer > 0)       = -Infinity
 *   pow(-Infinity, even integer > 0)      = +Infinity
 *   pow(-Infinity, odd integer < 0)       = -0
 *   pow(-Infinity, even integer < 0)      = +0
 *   pow(+0, y > 0)                        = +0
 *   pow(+0, y < 0)                        = +Infinity
 *   pow(-0, odd integer > 0)              = -0
 *   pow(-0, even integer > 0)             = +0
 *   pow(-0, odd integer < 0)              = -Infinity
 *   pow(-0, even integer < 0)             = +Infinity
 *   pow(finite x < 0, finite non-integer) = NaN
 *
 * For non-integer or very large exponents pow(x, y) is calculated using
 *
 *   x^y = exp(y*ln(x))
 *
 * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
 * probability of an incorrectly rounded result
 * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
 * i.e. 1 in 250,000,000,000,000
 *
 * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
 *
 * y {number|string|Decimal} The power to which to raise this Decimal.
 *
 */
P.toPower = P.pow = function (y) {
  var e, k, pr, r, rm, s,
    x = this,
    Ctor = x.constructor,
    yn = +(y = new Ctor(y));

  // Either ±Infinity, NaN or ±0?
  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

  x = new Ctor(x);

  if (x.eq(1)) return x;

  pr = Ctor.precision;
  rm = Ctor.rounding;

  if (y.eq(1)) return finalise(x, pr, rm);

  // y exponent
  e = mathfloor(y.e / LOG_BASE);

  // If y is a small integer use the 'exponentiation by squaring' algorithm.
  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
    r = intPow(Ctor, x, k, pr);
    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
  }

  s = x.s;

  // if x is negative
  if (s < 0) {

    // if y is not an integer
    if (e < y.d.length - 1) return new Ctor(NaN);

    // Result is positive if x is negative and the last digit of integer y is even.
    if ((y.d[e] & 1) == 0) s = 1;

    // if x.eq(-1)
    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
      x.s = s;
      return x;
    }
  }

  // Estimate result exponent.
  // x^y = 10^e,  where e = y * log10(x)
  // log10(x) = log10(x_significand) + x_exponent
  // log10(x_significand) = ln(x_significand) / ln(10)
  k = mathpow(+x, yn);
  e = k == 0 || !isFinite(k)
    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
    : new Ctor(k + '').e;

  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

  // Overflow/underflow?
  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

  external = false;
  Ctor.rounding = x.s = 1;

  // Estimate the extra guard digits needed to ensure five correct rounding digits from
  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
  // new Decimal(2.32456).pow('2087987436534566.46411')
  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
  k = Math.min(12, (e + '').length);

  // r = x^y = exp(y*ln(x))
  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
  if (r.d) {

    // Truncate to the required precision plus five rounding digits.
    r = finalise(r, pr + 5, 1);

    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
    // the result.
    if (checkRoundingDigits(r.d, pr, rm)) {
      e = pr + 10;

      // Truncate to the increased precision plus five rounding digits.
      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
        r = finalise(r, pr + 1, 0);
      }
    }
  }

  r.s = s;
  external = true;
  Ctor.rounding = rm;

  return finalise(r, pr, rm);
};


/*
 * Return a string representing the value of this Decimal rounded to `sd` significant digits
 * using rounding mode `rounding`.
 *
 * Return exponential notation if `sd` is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 */
P.toPrecision = function (sd, rm) {
  var str,
    x = this,
    Ctor = x.constructor;

  if (sd === void 0) {
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
  } else {
    checkInt32(sd, 1, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);

    x = finalise(new Ctor(x), sd, rm);
    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
  }

  return x.isNeg() && !x.isZero() ? '-' + str : str;
};


/*
 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
 * omitted.
 *
 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
 *
 * 'toSD() digits out of range: {sd}'
 * 'toSD() digits not an integer: {sd}'
 * 'toSD() rounding mode not an integer: {rm}'
 * 'toSD() rounding mode out of range: {rm}'
 *
 */
P.toSignificantDigits = P.toSD = function (sd, rm) {
  var x = this,
    Ctor = x.constructor;

  if (sd === void 0) {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  } else {
    checkInt32(sd, 1, MAX_DIGITS);

    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);
  }

  return finalise(new Ctor(x), sd, rm);
};


/*
 * Return a string representing the value of this Decimal.
 *
 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
 *
 */
P.toString = function () {
  var x = this,
    Ctor = x.constructor,
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

  return x.isNeg() && !x.isZero() ? '-' + str : str;
};


/*
 * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
 *
 */
P.truncated = P.trunc = function () {
  return finalise(new this.constructor(this), this.e + 1, 1);
};


/*
 * Return a string representing the value of this Decimal.
 * Unlike `toString`, negative zero will include the minus sign.
 *
 */
P.valueOf = P.toJSON = function () {
  var x = this,
    Ctor = x.constructor,
    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

  return x.isNeg() ? '-' + str : str;
};


// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


/*
 *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
 *                           finiteToString, naturalExponential, naturalLogarithm
 *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
 *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
 *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
 *  convertBase              toStringBinary, parseOther
 *  cos                      P.cos
 *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
 *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
 *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
 *                           taylorSeries, atan2, parseOther
 *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
 *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
 *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
 *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
 *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
 *                           P.truncated, divide, getLn10, getPi, naturalExponential,
 *                           naturalLogarithm, ceil, floor, round, trunc
 *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
 *                           toStringBinary
 *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
 *  getLn10                  P.logarithm, naturalLogarithm
 *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
 *  getPrecision             P.precision, P.toFraction
 *  getZeroString            digitsToString, finiteToString
 *  intPow                   P.toPower, parseOther
 *  isOdd                    toLessThanHalfPi
 *  maxOrMin                 max, min
 *  naturalExponential       P.naturalExponential, P.toPower
 *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
 *                           P.toPower, naturalExponential
 *  nonFiniteToString        finiteToString, toStringBinary
 *  parseDecimal             Decimal
 *  parseOther               Decimal
 *  sin                      P.sin
 *  taylorSeries             P.cosh, P.sinh, cos, sin
 *  toLessThanHalfPi         P.cos, P.sin
 *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
 *  truncate                 intPow
 *
 *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
 *                           naturalLogarithm, config, parseOther, random, Decimal
 */


function digitsToString(d) {
  var i, k, ws,
    indexOfLastWord = d.length - 1,
    str = '',
    w = d[0];

  if (indexOfLastWord > 0) {
    str += w;
    for (i = 1; i < indexOfLastWord; i++) {
      ws = d[i] + '';
      k = LOG_BASE - ws.length;
      if (k) str += getZeroString(k);
      str += ws;
    }

    w = d[i];
    ws = w + '';
    k = LOG_BASE - ws.length;
    if (k) str += getZeroString(k);
  } else if (w === 0) {
    return '0';
  }

  // Remove trailing zeros of last w.
  for (; w % 10 === 0;) w /= 10;

  return str + w;
}


function checkInt32(i, min, max) {
  if (i !== ~~i || i < min || i > max) {
    throw Error(invalidArgument + i);
  }
}


/*
 * Check 5 rounding digits if `repeating` is null, 4 otherwise.
 * `repeating == null` if caller is `log` or `pow`,
 * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
 */
function checkRoundingDigits(d, i, rm, repeating) {
  var di, k, r, rd;

  // Get the length of the first word of the array d.
  for (k = d[0]; k >= 10; k /= 10) --i;

  // Is the rounding digit in the first word of d?
  if (--i < 0) {
    i += LOG_BASE;
    di = 0;
  } else {
    di = Math.ceil((i + 1) / LOG_BASE);
    i %= LOG_BASE;
  }

  // i is the index (0 - 6) of the rounding digit.
  // E.g. if within the word 3487563 the first rounding digit is 5,
  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
  k = mathpow(10, LOG_BASE - i);
  rd = d[di] % k | 0;

  if (repeating == null) {
    if (i < 3) {
      if (i == 0) rd = rd / 100 | 0;
      else if (i == 1) rd = rd / 10 | 0;
      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
    } else {
      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
    }
  } else {
    if (i < 4) {
      if (i == 0) rd = rd / 1000 | 0;
      else if (i == 1) rd = rd / 100 | 0;
      else if (i == 2) rd = rd / 10 | 0;
      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
    } else {
      r = ((repeating || rm < 4) && rd + 1 == k ||
      (!repeating && rm > 3) && rd + 1 == k / 2) &&
        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
    }
  }

  return r;
}


// Convert string of `baseIn` to an array of numbers of `baseOut`.
// Eg. convertBase('255', 10, 16) returns [15, 15].
// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
function convertBase(str, baseIn, baseOut) {
  var j,
    arr = [0],
    arrL,
    i = 0,
    strL = str.length;

  for (; i < strL;) {
    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
    arr[0] += NUMERALS.indexOf(str.charAt(i++));
    for (j = 0; j < arr.length; j++) {
      if (arr[j] > baseOut - 1) {
        if (arr[j + 1] === void 0) arr[j + 1] = 0;
        arr[j + 1] += arr[j] / baseOut | 0;
        arr[j] %= baseOut;
      }
    }
  }

  return arr.reverse();
}


/*
 * cos(x) = 1 - x^2/2! + x^4/4! - ...
 * |x| < pi/2
 *
 */
function cosine(Ctor, x) {
  var k, len, y;

  if (x.isZero()) return x;

  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

  // Estimate the optimum number of times to use the argument reduction.
  len = x.d.length;
  if (len < 32) {
    k = Math.ceil(len / 3);
    y = (1 / tinyPow(4, k)).toString();
  } else {
    k = 16;
    y = '2.3283064365386962890625e-10';
  }

  Ctor.precision += k;

  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

  // Reverse argument reduction
  for (var i = k; i--;) {
    var cos2x = x.times(x);
    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
  }

  Ctor.precision -= k;

  return x;
}


/*
 * Perform division in the specified base.
 */
var divide = (function () {

  // Assumes non-zero x and k, and hence non-zero result.
  function multiplyInteger(x, k, base) {
    var temp,
      carry = 0,
      i = x.length;

    for (x = x.slice(); i--;) {
      temp = x[i] * k + carry;
      x[i] = temp % base | 0;
      carry = temp / base | 0;
    }

    if (carry) x.unshift(carry);

    return x;
  }

  function compare(a, b, aL, bL) {
    var i, r;

    if (aL != bL) {
      r = aL > bL ? 1 : -1;
    } else {
      for (i = r = 0; i < aL; i++) {
        if (a[i] != b[i]) {
          r = a[i] > b[i] ? 1 : -1;
          break;
        }
      }
    }

    return r;
  }

  function subtract(a, b, aL, base) {
    var i = 0;

    // Subtract b from a.
    for (; aL--;) {
      a[aL] -= i;
      i = a[aL] < b[aL] ? 1 : 0;
      a[aL] = i * base + a[aL] - b[aL];
    }

    // Remove leading zeros.
    for (; !a[0] && a.length > 1;) a.shift();
  }

  return function (x, y, pr, rm, dp, base) {
    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
      yL, yz,
      Ctor = x.constructor,
      sign = x.s == y.s ? 1 : -1,
      xd = x.d,
      yd = y.d;

    // Either NaN, Infinity or 0?
    if (!xd || !xd[0] || !yd || !yd[0]) {

      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
    }

    if (base) {
      logBase = 1;
      e = x.e - y.e;
    } else {
      base = BASE;
      logBase = LOG_BASE;
      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
    }

    yL = yd.length;
    xL = xd.length;
    q = new Ctor(sign);
    qd = q.d = [];

    // Result exponent may be one less than e.
    // The digit array of a Decimal from toStringBinary may have trailing zeros.
    for (i = 0; yd[i] == (xd[i] || 0); i++);

    if (yd[i] > (xd[i] || 0)) e--;

    if (pr == null) {
      sd = pr = Ctor.precision;
      rm = Ctor.rounding;
    } else if (dp) {
      sd = pr + (x.e - y.e) + 1;
    } else {
      sd = pr;
    }

    if (sd < 0) {
      qd.push(1);
      more = true;
    } else {

      // Convert precision in number of base 10 digits to base 1e7 digits.
      sd = sd / logBase + 2 | 0;
      i = 0;

      // divisor < 1e7
      if (yL == 1) {
        k = 0;
        yd = yd[0];
        sd++;

        // k is the carry.
        for (; (i < xL || k) && sd--; i++) {
          t = k * base + (xd[i] || 0);
          qd[i] = t / yd | 0;
          k = t % yd | 0;
        }

        more = k || i < xL;

      // divisor >= 1e7
      } else {

        // Normalise xd and yd so highest order digit of yd is >= base/2
        k = base / (yd[0] + 1) | 0;

        if (k > 1) {
          yd = multiplyInteger(yd, k, base);
          xd = multiplyInteger(xd, k, base);
          yL = yd.length;
          xL = xd.length;
        }

        xi = yL;
        rem = xd.slice(0, yL);
        remL = rem.length;

        // Add zeros to make remainder as long as divisor.
        for (; remL < yL;) rem[remL++] = 0;

        yz = yd.slice();
        yz.unshift(0);
        yd0 = yd[0];

        if (yd[1] >= base / 2) ++yd0;

        do {
          k = 0;

          // Compare divisor and remainder.
          cmp = compare(yd, rem, yL, remL);

          // If divisor < remainder.
          if (cmp < 0) {

            // Calculate trial digit, k.
            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

            // k will be how many times the divisor goes into the current remainder.
            k = rem0 / yd0 | 0;

            //  Algorithm:
            //  1. product = divisor * trial digit (k)
            //  2. if product > remainder: product -= divisor, k--
            //  3. remainder -= product
            //  4. if product was < remainder at 2:
            //    5. compare new remainder and divisor
            //    6. If remainder > divisor: remainder -= divisor, k++

            if (k > 1) {
              if (k >= base) k = base - 1;

              // product = divisor * trial digit.
              prod = multiplyInteger(yd, k, base);
              prodL = prod.length;
              remL = rem.length;

              // Compare product and remainder.
              cmp = compare(prod, rem, prodL, remL);

              // product > remainder.
              if (cmp == 1) {
                k--;

                // Subtract divisor from product.
                subtract(prod, yL < prodL ? yz : yd, prodL, base);
              }
            } else {

              // cmp is -1.
              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
              // to avoid it. If k is 1 there is a need to compare yd and rem again below.
              if (k == 0) cmp = k = 1;
              prod = yd.slice();
            }

            prodL = prod.length;
            if (prodL < remL) prod.unshift(0);

            // Subtract product from remainder.
            subtract(rem, prod, remL, base);

            // If product was < previous remainder.
            if (cmp == -1) {
              remL = rem.length;

              // Compare divisor and new remainder.
              cmp = compare(yd, rem, yL, remL);

              // If divisor < new remainder, subtract divisor from remainder.
              if (cmp < 1) {
                k++;

                // Subtract divisor from remainder.
                subtract(rem, yL < remL ? yz : yd, remL, base);
              }
            }

            remL = rem.length;
          } else if (cmp === 0) {
            k++;
            rem = [0];
          }    // if cmp === 1, k will be 0

          // Add the next digit, k, to the result array.
          qd[i++] = k;

          // Update the remainder.
          if (cmp && rem[0]) {
            rem[remL++] = xd[xi] || 0;
          } else {
            rem = [xd[xi]];
            remL = 1;
          }

        } while ((xi++ < xL || rem[0] !== void 0) && sd--);

        more = rem[0] !== void 0;
      }

      // Leading zero?
      if (!qd[0]) qd.shift();
    }

    // logBase is 1 when divide is being used for base conversion.
    if (logBase == 1) {
      q.e = e;
      inexact = more;
    } else {

      // To calculate q.e, first get the number of digits of qd[0].
      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
      q.e = i + e * logBase - 1;

      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
    }

    return q;
  };
})();


/*
 * Round `x` to `sd` significant digits using rounding mode `rm`.
 * Check for over/under-flow.
 */
 function finalise(x, sd, rm, isTruncated) {
  var digits, i, j, k, rd, roundUp, w, xd, xdi,
    Ctor = x.constructor;

  // Don't round if sd is null or undefined.
  out: if (sd != null) {
    xd = x.d;

    // Infinity/NaN.
    if (!xd) return x;

    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
    // w: the word of xd containing rd, a base 1e7 number.
    // xdi: the index of w within xd.
    // digits: the number of digits of w.
    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
    // they had leading zeros)
    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

    // Get the length of the first word of the digits array xd.
    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
    i = sd - digits;

    // Is the rounding digit in the first word of xd?
    if (i < 0) {
      i += LOG_BASE;
      j = sd;
      w = xd[xdi = 0];

      // Get the rounding digit at index j of w.
      rd = w / mathpow(10, digits - j - 1) % 10 | 0;
    } else {
      xdi = Math.ceil((i + 1) / LOG_BASE);
      k = xd.length;
      if (xdi >= k) {
        if (isTruncated) {

          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
          for (; k++ <= xdi;) xd.push(0);
          w = rd = 0;
          digits = 1;
          i %= LOG_BASE;
          j = i - LOG_BASE + 1;
        } else {
          break out;
        }
      } else {
        w = k = xd[xdi];

        // Get the number of digits of w.
        for (digits = 1; k >= 10; k /= 10) digits++;

        // Get the index of rd within w.
        i %= LOG_BASE;

        // Get the index of rd within w, adjusted for leading zeros.
        // The number of leading zeros of w is given by LOG_BASE - digits.
        j = i - LOG_BASE + digits;

        // Get the rounding digit at index j of w.
        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
      }
    }

    // Are there any non-zero digits after the rounding digit?
    isTruncated = isTruncated || sd < 0 ||
      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
    // will give 714.

    roundUp = rm < 4
      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

        // Check whether the digit to the left of the rounding digit is odd.
        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
          rm == (x.s < 0 ? 8 : 7));

    if (sd < 1 || !xd[0]) {
      xd.length = 0;
      if (roundUp) {

        // Convert sd to decimal places.
        sd -= x.e + 1;

        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
        x.e = -sd || 0;
      } else {

        // Zero.
        xd[0] = x.e = 0;
      }

      return x;
    }

    // Remove excess digits.
    if (i == 0) {
      xd.length = xdi;
      k = 1;
      xdi--;
    } else {
      xd.length = xdi + 1;
      k = mathpow(10, LOG_BASE - i);

      // E.g. 56700 becomes 56000 if 7 is the rounding digit.
      // j > 0 means i > number of leading zeros of w.
      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
    }

    if (roundUp) {
      for (;;) {

        // Is the digit to be rounded up in the first word of xd?
        if (xdi == 0) {

          // i will be the length of xd[0] before k is added.
          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
          j = xd[0] += k;
          for (k = 1; j >= 10; j /= 10) k++;

          // if i != k the length has increased.
          if (i != k) {
            x.e++;
            if (xd[0] == BASE) xd[0] = 1;
          }

          break;
        } else {
          xd[xdi] += k;
          if (xd[xdi] != BASE) break;
          xd[xdi--] = 0;
          k = 1;
        }
      }
    }

    // Remove trailing zeros.
    for (i = xd.length; xd[--i] === 0;) xd.pop();
  }

  if (external) {

    // Overflow?
    if (x.e > Ctor.maxE) {

      // Infinity.
      x.d = null;
      x.e = NaN;

    // Underflow?
    } else if (x.e < Ctor.minE) {

      // Zero.
      x.e = 0;
      x.d = [0];
      // Ctor.underflow = true;
    } // else Ctor.underflow = false;
  }

  return x;
}


function finiteToString(x, isExp, sd) {
  if (!x.isFinite()) return nonFiniteToString(x);
  var k,
    e = x.e,
    str = digitsToString(x.d),
    len = str.length;

  if (isExp) {
    if (sd && (k = sd - len) > 0) {
      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
    } else if (len > 1) {
      str = str.charAt(0) + '.' + str.slice(1);
    }

    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
  } else if (e < 0) {
    str = '0.' + getZeroString(-e - 1) + str;
    if (sd && (k = sd - len) > 0) str += getZeroString(k);
  } else if (e >= len) {
    str += getZeroString(e + 1 - len);
    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
  } else {
    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
    if (sd && (k = sd - len) > 0) {
      if (e + 1 === len) str += '.';
      str += getZeroString(k);
    }
  }

  return str;
}


// Calculate the base 10 exponent from the base 1e7 exponent.
function getBase10Exponent(digits, e) {
  var w = digits[0];

  // Add the number of digits of the first word of the digits array.
  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
  return e;
}


function getLn10(Ctor, sd, pr) {
  if (sd > LN10_PRECISION) {

    // Reset global state in case the exception is caught.
    external = true;
    if (pr) Ctor.precision = pr;
    throw Error(precisionLimitExceeded);
  }
  return finalise(new Ctor(LN10), sd, 1, true);
}


function getPi(Ctor, sd, rm) {
  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
  return finalise(new Ctor(PI), sd, rm, true);
}


function getPrecision(digits) {
  var w = digits.length - 1,
    len = w * LOG_BASE + 1;

  w = digits[w];

  // If non-zero...
  if (w) {

    // Subtract the number of trailing zeros of the last word.
    for (; w % 10 == 0; w /= 10) len--;

    // Add the number of digits of the first word.
    for (w = digits[0]; w >= 10; w /= 10) len++;
  }

  return len;
}


function getZeroString(k) {
  var zs = '';
  for (; k--;) zs += '0';
  return zs;
}


/*
 * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
 * integer of type number.
 *
 * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
 *
 */
function intPow(Ctor, x, n, pr) {
  var isTruncated,
    r = new Ctor(1),

    // Max n of 9007199254740991 takes 53 loop iterations.
    // Maximum digits array length; leaves [28, 34] guard digits.
    k = Math.ceil(pr / LOG_BASE + 4);

  external = false;

  for (;;) {
    if (n % 2) {
      r = r.times(x);
      if (truncate(r.d, k)) isTruncated = true;
    }

    n = mathfloor(n / 2);
    if (n === 0) {

      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
      n = r.d.length - 1;
      if (isTruncated && r.d[n] === 0) ++r.d[n];
      break;
    }

    x = x.times(x);
    truncate(x.d, k);
  }

  external = true;

  return r;
}


function isOdd(n) {
  return n.d[n.d.length - 1] & 1;
}


/*
 * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
 */
function maxOrMin(Ctor, args, ltgt) {
  var y,
    x = new Ctor(args[0]),
    i = 0;

  for (; ++i < args.length;) {
    y = new Ctor(args[i]);
    if (!y.s) {
      x = y;
      break;
    } else if (x[ltgt](y)) {
      x = y;
    }
  }

  return x;
}


/*
 * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
 * digits.
 *
 * Taylor/Maclaurin series.
 *
 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
 *
 * Argument reduction:
 *   Repeat x = x / 32, k += 5, until |x| < 0.1
 *   exp(x) = exp(x / 2^k)^(2^k)
 *
 * Previously, the argument was initially reduced by
 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
 * found to be slower than just dividing repeatedly by 32 as above.
 *
 * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
 * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
 *
 *  exp(Infinity)  = Infinity
 *  exp(-Infinity) = 0
 *  exp(NaN)       = NaN
 *  exp(±0)        = 1
 *
 *  exp(x) is non-terminating for any finite, non-zero x.
 *
 *  The result will always be correctly rounded.
 *
 */
function naturalExponential(x, sd) {
  var denominator, guard, j, pow, sum, t, wpr,
    rep = 0,
    i = 0,
    k = 0,
    Ctor = x.constructor,
    rm = Ctor.rounding,
    pr = Ctor.precision;

  // 0/NaN/Infinity?
  if (!x.d || !x.d[0] || x.e > 17) {

    return new Ctor(x.d
      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
      : x.s ? x.s < 0 ? 0 : x : 0 / 0);
  }

  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }

  t = new Ctor(0.03125);

  // while abs(x) >= 0.1
  while (x.e > -2) {

    // x = x / 2^5
    x = x.times(t);
    k += 5;
  }

  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
  // necessary to ensure the first 4 rounding digits are correct.
  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
  wpr += guard;
  denominator = pow = sum = new Ctor(1);
  Ctor.precision = wpr;

  for (;;) {
    pow = finalise(pow.times(x), wpr, 1);
    denominator = denominator.times(++i);
    t = sum.plus(divide(pow, denominator, wpr, 1));

    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
      j = k;
      while (j--) sum = finalise(sum.times(sum), wpr, 1);

      // Check to see if the first 4 rounding digits are [49]999.
      // If so, repeat the summation with a higher precision, otherwise
      // e.g. with precision: 18, rounding: 1
      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
      // `wpr - guard` is the index of first rounding digit.
      if (sd == null) {

        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += 10;
          denominator = pow = t = new Ctor(1);
          i = 0;
          rep++;
        } else {
          return finalise(sum, Ctor.precision = pr, rm, external = true);
        }
      } else {
        Ctor.precision = pr;
        return sum;
      }
    }

    sum = t;
  }
}


/*
 * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
 * digits.
 *
 *  ln(-n)        = NaN
 *  ln(0)         = -Infinity
 *  ln(-0)        = -Infinity
 *  ln(1)         = 0
 *  ln(Infinity)  = Infinity
 *  ln(-Infinity) = NaN
 *  ln(NaN)       = NaN
 *
 *  ln(n) (n != 1) is non-terminating.
 *
 */
function naturalLogarithm(y, sd) {
  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
    n = 1,
    guard = 10,
    x = y,
    xd = x.d,
    Ctor = x.constructor,
    rm = Ctor.rounding,
    pr = Ctor.precision;

  // Is x negative or Infinity, NaN, 0 or 1?
  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
  }

  if (sd == null) {
    external = false;
    wpr = pr;
  } else {
    wpr = sd;
  }

  Ctor.precision = wpr += guard;
  c = digitsToString(xd);
  c0 = c.charAt(0);

  if (Math.abs(e = x.e) < 1.5e15) {

    // Argument reduction.
    // The series converges faster the closer the argument is to 1, so using
    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
    // later be divided by this number, then separate out the power of 10 using
    // ln(a*10^b) = ln(a) + b*ln(10).

    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
    // max n is 6 (gives 0.7 - 1.3)
    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
      x = x.times(y);
      c = digitsToString(x.d);
      c0 = c.charAt(0);
      n++;
    }

    e = x.e;

    if (c0 > 1) {
      x = new Ctor('0.' + c);
      e++;
    } else {
      x = new Ctor(c0 + '.' + c.slice(1));
    }
  } else {

    // The argument reduction method above may result in overflow if the argument y is a massive
    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
    // function using ln(x*10^e) = ln(x) + e*ln(10).
    t = getLn10(Ctor, wpr + 2, pr).times(e + '');
    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
    Ctor.precision = pr;

    return sd == null ? finalise(x, pr, rm, external = true) : x;
  }

  // x1 is x reduced to a value near 1.
  x1 = x;

  // Taylor series.
  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
  // where x = (y - 1)/(y + 1)    (|x| < 1)
  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
  x2 = finalise(x.times(x), wpr, 1);
  denominator = 3;

  for (;;) {
    numerator = finalise(numerator.times(x2), wpr, 1);
    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
      sum = sum.times(2);

      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
      sum = divide(sum, new Ctor(n), wpr, 1);

      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
      // been repeated previously) and the first 4 rounding digits 9999?
      // If so, restart the summation with a higher precision, otherwise
      // e.g. with precision: 12, rounding: 1
      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
      // `wpr - guard` is the index of first rounding digit.
      if (sd == null) {
        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
          Ctor.precision = wpr += guard;
          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
          x2 = finalise(x.times(x), wpr, 1);
          denominator = rep = 1;
        } else {
          return finalise(sum, Ctor.precision = pr, rm, external = true);
        }
      } else {
        Ctor.precision = pr;
        return sum;
      }
    }

    sum = t;
    denominator += 2;
  }
}


// ±Infinity, NaN.
function nonFiniteToString(x) {
  // Unsigned.
  return String(x.s * x.s / 0);
}


/*
 * Parse the value of a new Decimal `x` from string `str`.
 */
function parseDecimal(x, str) {
  var e, i, len;

  // Decimal point?
  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

  // Exponential form?
  if ((i = str.search(/e/i)) > 0) {

    // Determine exponent.
    if (e < 0) e = i;
    e += +str.slice(i + 1);
    str = str.substring(0, i);
  } else if (e < 0) {

    // Integer.
    e = str.length;
  }

  // Determine leading zeros.
  for (i = 0; str.charCodeAt(i) === 48; i++);

  // Determine trailing zeros.
  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
  str = str.slice(i, len);

  if (str) {
    len -= i;
    x.e = e = e - i - 1;
    x.d = [];

    // Transform base

    // e is the base 10 exponent.
    // i is where to slice str to get the first word of the digits array.
    i = (e + 1) % LOG_BASE;
    if (e < 0) i += LOG_BASE;

    if (i < len) {
      if (i) x.d.push(+str.slice(0, i));
      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
      str = str.slice(i);
      i = LOG_BASE - str.length;
    } else {
      i -= len;
    }

    for (; i--;) str += '0';
    x.d.push(+str);

    if (external) {

      // Overflow?
      if (x.e > x.constructor.maxE) {

        // Infinity.
        x.d = null;
        x.e = NaN;

      // Underflow?
      } else if (x.e < x.constructor.minE) {

        // Zero.
        x.e = 0;
        x.d = [0];
        // x.constructor.underflow = true;
      } // else x.constructor.underflow = false;
    }
  } else {

    // Zero.
    x.e = 0;
    x.d = [0];
  }

  return x;
}


/*
 * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
 */
function parseOther(x, str) {
  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

  if (str.indexOf('_') > -1) {
    str = str.replace(/(\d)_(?=\d)/g, '$1');
    if (isDecimal.test(str)) return parseDecimal(x, str);
  } else if (str === 'Infinity' || str === 'NaN') {
    if (!+str) x.s = NaN;
    x.e = NaN;
    x.d = null;
    return x;
  }

  if (isHex.test(str))  {
    base = 16;
    str = str.toLowerCase();
  } else if (isBinary.test(str))  {
    base = 2;
  } else if (isOctal.test(str))  {
    base = 8;
  } else {
    throw Error(invalidArgument + str);
  }

  // Is there a binary exponent part?
  i = str.search(/p/i);

  if (i > 0) {
    p = +str.slice(i + 1);
    str = str.substring(2, i);
  } else {
    str = str.slice(2);
  }

  // Convert `str` as an integer then divide the result by `base` raised to a power such that the
  // fraction part will be restored.
  i = str.indexOf('.');
  isFloat = i >= 0;
  Ctor = x.constructor;

  if (isFloat) {
    str = str.replace('.', '');
    len = str.length;
    i = len - i;

    // log[10](16) = 1.2041... , log[10](88) = 1.9444....
    divisor = intPow(Ctor, new Ctor(base), i, i * 2);
  }

  xd = convertBase(str, base, BASE);
  xe = xd.length - 1;

  // Remove trailing zeros.
  for (i = xe; xd[i] === 0; --i) xd.pop();
  if (i < 0) return new Ctor(x.s * 0);
  x.e = getBase10Exponent(xd, xe);
  x.d = xd;
  external = false;

  // At what precision to perform the division to ensure exact conversion?
  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
  // Therefore using 4 * the number of digits of str will always be enough.
  if (isFloat) x = divide(x, divisor, len * 4);

  // Multiply by the binary exponent part if present.
  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
  external = true;

  return x;
}


/*
 * sin(x) = x - x^3/3! + x^5/5! - ...
 * |x| < pi/2
 *
 */
function sine(Ctor, x) {
  var k,
    len = x.d.length;

  if (len < 3) {
    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
  }

  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

  // Estimate the optimum number of times to use the argument reduction.
  k = 1.4 * Math.sqrt(len);
  k = k > 16 ? 16 : k | 0;

  x = x.times(1 / tinyPow(5, k));
  x = taylorSeries(Ctor, 2, x, x);

  // Reverse argument reduction
  var sin2_x,
    d5 = new Ctor(5),
    d16 = new Ctor(16),
    d20 = new Ctor(20);
  for (; k--;) {
    sin2_x = x.times(x);
    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
  }

  return x;
}


// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
function taylorSeries(Ctor, n, x, y, isHyperbolic) {
  var j, t, u, x2,
    pr = Ctor.precision,
    k = Math.ceil(pr / LOG_BASE);

  external = false;
  x2 = x.times(x);
  u = new Ctor(y);

  for (;;) {
    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
    u = isHyperbolic ? y.plus(t) : y.minus(t);
    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
    t = u.plus(y);

    if (t.d[k] !== void 0) {
      for (j = k; t.d[j] === u.d[j] && j--;);
      if (j == -1) break;
    }

    j = u;
    u = y;
    y = t;
    t = j;
  }

  external = true;
  t.d.length = k + 1;

  return t;
}


// Exponent e must be positive and non-zero.
function tinyPow(b, e) {
  var n = b;
  while (--e) n *= b;
  return n;
}


// Return the absolute value of `x` reduced to less than or equal to half pi.
function toLessThanHalfPi(Ctor, x) {
  var t,
    isNeg = x.s < 0,
    pi = getPi(Ctor, Ctor.precision, 1),
    halfPi = pi.times(0.5);

  x = x.abs();

  if (x.lte(halfPi)) {
    quadrant = isNeg ? 4 : 1;
    return x;
  }

  t = x.divToInt(pi);

  if (t.isZero()) {
    quadrant = isNeg ? 3 : 2;
  } else {
    x = x.minus(t.times(pi));

    // 0 <= x < pi
    if (x.lte(halfPi)) {
      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
      return x;
    }

    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
  }

  return x.minus(pi).abs();
}


/*
 * Return the value of Decimal `x` as a string in base `baseOut`.
 *
 * If the optional `sd` argument is present include a binary exponent suffix.
 */
function toStringBinary(x, baseOut, sd, rm) {
  var base, e, i, k, len, roundUp, str, xd, y,
    Ctor = x.constructor,
    isExp = sd !== void 0;

  if (isExp) {
    checkInt32(sd, 1, MAX_DIGITS);
    if (rm === void 0) rm = Ctor.rounding;
    else checkInt32(rm, 0, 8);
  } else {
    sd = Ctor.precision;
    rm = Ctor.rounding;
  }

  if (!x.isFinite()) {
    str = nonFiniteToString(x);
  } else {
    str = finiteToString(x);
    i = str.indexOf('.');

    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
    // minBinaryExponent = floor(decimalExponent * log[2](10))
    // log[2](10) = 3.321928094887362347870319429489390175864

    if (isExp) {
      base = 2;
      if (baseOut == 16) {
        sd = sd * 4 - 3;
      } else if (baseOut == 8) {
        sd = sd * 3 - 2;
      }
    } else {
      base = baseOut;
    }

    // Convert the number as an integer then divide the result by its base raised to a power such
    // that the fraction part will be restored.

    // Non-integer.
    if (i >= 0) {
      str = str.replace('.', '');
      y = new Ctor(1);
      y.e = str.length - i;
      y.d = convertBase(finiteToString(y), 10, base);
      y.e = y.d.length;
    }

    xd = convertBase(str, 10, base);
    e = len = xd.length;

    // Remove trailing zeros.
    for (; xd[--len] == 0;) xd.pop();

    if (!xd[0]) {
      str = isExp ? '0p+0' : '0';
    } else {
      if (i < 0) {
        e--;
      } else {
        x = new Ctor(x);
        x.d = xd;
        x.e = e;
        x = divide(x, y, sd, rm, 0, base);
        xd = x.d;
        e = x.e;
        roundUp = inexact;
      }

      // The rounding digit, i.e. the digit after the digit that may be rounded up.
      i = xd[sd];
      k = base / 2;
      roundUp = roundUp || xd[sd + 1] !== void 0;

      roundUp = rm < 4
        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
          rm === (x.s < 0 ? 8 : 7));

      xd.length = sd;

      if (roundUp) {

        // Rounding up may mean the previous digit has to be rounded up and so on.
        for (; ++xd[--sd] > base - 1;) {
          xd[sd] = 0;
          if (!sd) {
            ++e;
            xd.unshift(1);
          }
        }
      }

      // Determine trailing zeros.
      for (len = xd.length; !xd[len - 1]; --len);

      // E.g. [4, 11, 15] becomes 4bf.
      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

      // Add binary exponent suffix?
      if (isExp) {
        if (len > 1) {
          if (baseOut == 16 || baseOut == 8) {
            i = baseOut == 16 ? 4 : 3;
            for (--len; len % i; len++) str += '0';
            xd = convertBase(str, base, baseOut);
            for (len = xd.length; !xd[len - 1]; --len);

            // xd[0] will always be be 1
            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
          } else {
            str = str.charAt(0) + '.' + str.slice(1);
          }
        }

        str =  str + (e < 0 ? 'p' : 'p+') + e;
      } else if (e < 0) {
        for (; ++e;) str = '0' + str;
        str = '0.' + str;
      } else {
        if (++e > len) for (e -= len; e-- ;) str += '0';
        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
      }
    }

    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
  }

  return x.s < 0 ? '-' + str : str;
}


// Does not strip trailing zeros.
function truncate(arr, len) {
  if (arr.length > len) {
    arr.length = len;
    return true;
  }
}


// Decimal methods


/*
 *  abs
 *  acos
 *  acosh
 *  add
 *  asin
 *  asinh
 *  atan
 *  atanh
 *  atan2
 *  cbrt
 *  ceil
 *  clamp
 *  clone
 *  config
 *  cos
 *  cosh
 *  div
 *  exp
 *  floor
 *  hypot
 *  ln
 *  log
 *  log2
 *  log10
 *  max
 *  min
 *  mod
 *  mul
 *  pow
 *  random
 *  round
 *  set
 *  sign
 *  sin
 *  sinh
 *  sqrt
 *  sub
 *  sum
 *  tan
 *  tanh
 *  trunc
 */


/*
 * Return a new Decimal whose value is the absolute value of `x`.
 *
 * x {number|string|Decimal}
 *
 */
function abs(x) {
  return new this(x).abs();
}


/*
 * Return a new Decimal whose value is the arccosine in radians of `x`.
 *
 * x {number|string|Decimal}
 *
 */
function acos(x) {
  return new this(x).acos();
}


/*
 * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function acosh(x) {
  return new this(x).acosh();
}


/*
 * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function add(x, y) {
  return new this(x).plus(y);
}


/*
 * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function asin(x) {
  return new this(x).asin();
}


/*
 * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function asinh(x) {
  return new this(x).asinh();
}


/*
 * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function atan(x) {
  return new this(x).atan();
}


/*
 * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
 * `precision` significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function atanh(x) {
  return new this(x).atanh();
}


/*
 * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
 * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
 *
 * Domain: [-Infinity, Infinity]
 * Range: [-pi, pi]
 *
 * y {number|string|Decimal} The y-coordinate.
 * x {number|string|Decimal} The x-coordinate.
 *
 * atan2(±0, -0)               = ±pi
 * atan2(±0, +0)               = ±0
 * atan2(±0, -x)               = ±pi for x > 0
 * atan2(±0, x)                = ±0 for x > 0
 * atan2(-y, ±0)               = -pi/2 for y > 0
 * atan2(y, ±0)                = pi/2 for y > 0
 * atan2(±y, -Infinity)        = ±pi for finite y > 0
 * atan2(±y, +Infinity)        = ±0 for finite y > 0
 * atan2(±Infinity, x)         = ±pi/2 for finite x
 * atan2(±Infinity, -Infinity) = ±3*pi/4
 * atan2(±Infinity, +Infinity) = ±pi/4
 * atan2(NaN, x) = NaN
 * atan2(y, NaN) = NaN
 *
 */
function atan2(y, x) {
  y = new this(y);
  x = new this(x);
  var r,
    pr = this.precision,
    rm = this.rounding,
    wpr = pr + 4;

  // Either NaN
  if (!y.s || !x.s) {
    r = new this(NaN);

  // Both ±Infinity
  } else if (!y.d && !x.d) {
    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
    r.s = y.s;

  // x is ±Infinity or y is ±0
  } else if (!x.d || y.isZero()) {
    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
    r.s = y.s;

  // y is ±Infinity or x is ±0
  } else if (!y.d || x.isZero()) {
    r = getPi(this, wpr, 1).times(0.5);
    r.s = y.s;

  // Both non-zero and finite
  } else if (x.s < 0) {
    this.precision = wpr;
    this.rounding = 1;
    r = this.atan(divide(y, x, wpr, 1));
    x = getPi(this, wpr, 1);
    this.precision = pr;
    this.rounding = rm;
    r = y.s < 0 ? r.minus(x) : r.plus(x);
  } else {
    r = this.atan(divide(y, x, wpr, 1));
  }

  return r;
}


/*
 * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function cbrt(x) {
  return new this(x).cbrt();
}


/*
 * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
 *
 * x {number|string|Decimal}
 *
 */
function ceil(x) {
  return finalise(x = new this(x), x.e + 1, 2);
}


/*
 * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.
 *
 * x {number|string|Decimal}
 * min {number|string|Decimal}
 * max {number|string|Decimal}
 *
 */
function clamp(x, min, max) {
  return new this(x).clamp(min, max);
}


/*
 * Configure global settings for a Decimal constructor.
 *
 * `obj` is an object with one or more of the following properties,
 *
 *   precision  {number}
 *   rounding   {number}
 *   toExpNeg   {number}
 *   toExpPos   {number}
 *   maxE       {number}
 *   minE       {number}
 *   modulo     {number}
 *   crypto     {boolean|number}
 *   defaults   {true}
 *
 * E.g. Decimal.config({ precision: 20, rounding: 4 })
 *
 */
function config(obj) {
  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
  var i, p, v,
    useDefaults = obj.defaults === true,
    ps = [
      'precision', 1, MAX_DIGITS,
      'rounding', 0, 8,
      'toExpNeg', -EXP_LIMIT, 0,
      'toExpPos', 0, EXP_LIMIT,
      'maxE', 0, EXP_LIMIT,
      'minE', -EXP_LIMIT, 0,
      'modulo', 0, 9
    ];

  for (i = 0; i < ps.length; i += 3) {
    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
    if ((v = obj[p]) !== void 0) {
      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
      else throw Error(invalidArgument + p + ': ' + v);
    }
  }

  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
  if ((v = obj[p]) !== void 0) {
    if (v === true || v === false || v === 0 || v === 1) {
      if (v) {
        if (typeof crypto != 'undefined' && crypto &&
          (crypto.getRandomValues || crypto.randomBytes)) {
          this[p] = true;
        } else {
          throw Error(cryptoUnavailable);
        }
      } else {
        this[p] = false;
      }
    } else {
      throw Error(invalidArgument + p + ': ' + v);
    }
  }

  return this;
}


/*
 * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function cos(x) {
  return new this(x).cos();
}


/*
 * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function cosh(x) {
  return new this(x).cosh();
}


/*
 * Create and return a Decimal constructor with the same configuration properties as this Decimal
 * constructor.
 *
 */
function clone(obj) {
  var i, p, ps;

  /*
   * The Decimal constructor and exported function.
   * Return a new Decimal instance.
   *
   * v {number|string|Decimal} A numeric value.
   *
   */
  function Decimal(v) {
    var e, i, t,
      x = this;

    // Decimal called without new.
    if (!(x instanceof Decimal)) return new Decimal(v);

    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
    // which points to Object.
    x.constructor = Decimal;

    // Duplicate.
    if (isDecimalInstance(v)) {
      x.s = v.s;

      if (external) {
        if (!v.d || v.e > Decimal.maxE) {

          // Infinity.
          x.e = NaN;
          x.d = null;
        } else if (v.e < Decimal.minE) {

          // Zero.
          x.e = 0;
          x.d = [0];
        } else {
          x.e = v.e;
          x.d = v.d.slice();
        }
      } else {
        x.e = v.e;
        x.d = v.d ? v.d.slice() : v.d;
      }

      return;
    }

    t = typeof v;

    if (t === 'number') {
      if (v === 0) {
        x.s = 1 / v < 0 ? -1 : 1;
        x.e = 0;
        x.d = [0];
        return;
      }

      if (v < 0) {
        v = -v;
        x.s = -1;
      } else {
        x.s = 1;
      }

      // Fast path for small integers.
      if (v === ~~v && v < 1e7) {
        for (e = 0, i = v; i >= 10; i /= 10) e++;

        if (external) {
          if (e > Decimal.maxE) {
            x.e = NaN;
            x.d = null;
          } else if (e < Decimal.minE) {
            x.e = 0;
            x.d = [0];
          } else {
            x.e = e;
            x.d = [v];
          }
        } else {
          x.e = e;
          x.d = [v];
        }

        return;

      // Infinity, NaN.
      } else if (v * 0 !== 0) {
        if (!v) x.s = NaN;
        x.e = NaN;
        x.d = null;
        return;
      }

      return parseDecimal(x, v.toString());

    } else if (t !== 'string') {
      throw Error(invalidArgument + v);
    }

    // Minus sign?
    if ((i = v.charCodeAt(0)) === 45) {
      v = v.slice(1);
      x.s = -1;
    } else {
      // Plus sign?
      if (i === 43) v = v.slice(1);
      x.s = 1;
    }

    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
  }

  Decimal.prototype = P;

  Decimal.ROUND_UP = 0;
  Decimal.ROUND_DOWN = 1;
  Decimal.ROUND_CEIL = 2;
  Decimal.ROUND_FLOOR = 3;
  Decimal.ROUND_HALF_UP = 4;
  Decimal.ROUND_HALF_DOWN = 5;
  Decimal.ROUND_HALF_EVEN = 6;
  Decimal.ROUND_HALF_CEIL = 7;
  Decimal.ROUND_HALF_FLOOR = 8;
  Decimal.EUCLID = 9;

  Decimal.config = Decimal.set = config;
  Decimal.clone = clone;
  Decimal.isDecimal = isDecimalInstance;

  Decimal.abs = abs;
  Decimal.acos = acos;
  Decimal.acosh = acosh;        // ES6
  Decimal.add = add;
  Decimal.asin = asin;
  Decimal.asinh = asinh;        // ES6
  Decimal.atan = atan;
  Decimal.atanh = atanh;        // ES6
  Decimal.atan2 = atan2;
  Decimal.cbrt = cbrt;          // ES6
  Decimal.ceil = ceil;
  Decimal.clamp = clamp;
  Decimal.cos = cos;
  Decimal.cosh = cosh;          // ES6
  Decimal.div = div;
  Decimal.exp = exp;
  Decimal.floor = floor;
  Decimal.hypot = hypot;        // ES6
  Decimal.ln = ln;
  Decimal.log = log;
  Decimal.log10 = log10;        // ES6
  Decimal.log2 = log2;          // ES6
  Decimal.max = max;
  Decimal.min = min;
  Decimal.mod = mod;
  Decimal.mul = mul;
  Decimal.pow = pow;
  Decimal.random = random;
  Decimal.round = round;
  Decimal.sign = sign;          // ES6
  Decimal.sin = sin;
  Decimal.sinh = sinh;          // ES6
  Decimal.sqrt = sqrt;
  Decimal.sub = sub;
  Decimal.sum = sum;
  Decimal.tan = tan;
  Decimal.tanh = tanh;          // ES6
  Decimal.trunc = trunc;        // ES6

  if (obj === void 0) obj = {};
  if (obj) {
    if (obj.defaults !== true) {
      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
    }
  }

  Decimal.config(obj);

  return Decimal;
}


/*
 * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function div(x, y) {
  return new this(x).div(y);
}


/*
 * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} The power to which to raise the base of the natural log.
 *
 */
function exp(x) {
  return new this(x).exp();
}


/*
 * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
 *
 * x {number|string|Decimal}
 *
 */
function floor(x) {
  return finalise(x = new this(x), x.e + 1, 3);
}


/*
 * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
 * rounded to `precision` significant digits using rounding mode `rounding`.
 *
 * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
 *
 * arguments {number|string|Decimal}
 *
 */
function hypot() {
  var i, n,
    t = new this(0);

  external = false;

  for (i = 0; i < arguments.length;) {
    n = new this(arguments[i++]);
    if (!n.d) {
      if (n.s) {
        external = true;
        return new this(1 / 0);
      }
      t = n;
    } else if (t.d) {
      t = t.plus(n.times(n));
    }
  }

  external = true;

  return t.sqrt();
}


/*
 * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
 * otherwise return false.
 *
 */
function isDecimalInstance(obj) {
  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
}


/*
 * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function ln(x) {
  return new this(x).ln();
}


/*
 * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
 * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
 *
 * log[y](x)
 *
 * x {number|string|Decimal} The argument of the logarithm.
 * y {number|string|Decimal} The base of the logarithm.
 *
 */
function log(x, y) {
  return new this(x).log(y);
}


/*
 * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function log2(x) {
  return new this(x).log(2);
}


/*
 * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function log10(x) {
  return new this(x).log(10);
}


/*
 * Return a new Decimal whose value is the maximum of the arguments.
 *
 * arguments {number|string|Decimal}
 *
 */
function max() {
  return maxOrMin(this, arguments, 'lt');
}


/*
 * Return a new Decimal whose value is the minimum of the arguments.
 *
 * arguments {number|string|Decimal}
 *
 */
function min() {
  return maxOrMin(this, arguments, 'gt');
}


/*
 * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
 * using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function mod(x, y) {
  return new this(x).mod(y);
}


/*
 * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function mul(x, y) {
  return new this(x).mul(y);
}


/*
 * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} The base.
 * y {number|string|Decimal} The exponent.
 *
 */
function pow(x, y) {
  return new this(x).pow(y);
}


/*
 * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
 * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
 * are produced).
 *
 * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
 *
 */
function random(sd) {
  var d, e, k, n,
    i = 0,
    r = new this(1),
    rd = [];

  if (sd === void 0) sd = this.precision;
  else checkInt32(sd, 1, MAX_DIGITS);

  k = Math.ceil(sd / LOG_BASE);

  if (!this.crypto) {
    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

  // Browsers supporting crypto.getRandomValues.
  } else if (crypto.getRandomValues) {
    d = crypto.getRandomValues(new Uint32Array(k));

    for (; i < k;) {
      n = d[i];

      // 0 <= n < 4294967296
      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
      if (n >= 4.29e9) {
        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
      } else {

        // 0 <= n <= 4289999999
        // 0 <= (n % 1e7) <= 9999999
        rd[i++] = n % 1e7;
      }
    }

  // Node.js supporting crypto.randomBytes.
  } else if (crypto.randomBytes) {

    // buffer
    d = crypto.randomBytes(k *= 4);

    for (; i < k;) {

      // 0 <= n < 2147483648
      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
      if (n >= 2.14e9) {
        crypto.randomBytes(4).copy(d, i);
      } else {

        // 0 <= n <= 2139999999
        // 0 <= (n % 1e7) <= 9999999
        rd.push(n % 1e7);
        i += 4;
      }
    }

    i = k / 4;
  } else {
    throw Error(cryptoUnavailable);
  }

  k = rd[--i];
  sd %= LOG_BASE;

  // Convert trailing digits to zeros according to sd.
  if (k && sd) {
    n = mathpow(10, LOG_BASE - sd);
    rd[i] = (k / n | 0) * n;
  }

  // Remove trailing words which are zero.
  for (; rd[i] === 0; i--) rd.pop();

  // Zero?
  if (i < 0) {
    e = 0;
    rd = [0];
  } else {
    e = -1;

    // Remove leading words which are zero and adjust exponent accordingly.
    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

    // Count the digits of the first word of rd to determine leading zeros.
    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

    // Adjust the exponent for leading zeros of the first word of rd.
    if (k < LOG_BASE) e -= LOG_BASE - k;
  }

  r.e = e;
  r.d = rd;

  return r;
}


/*
 * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
 *
 * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
 *
 * x {number|string|Decimal}
 *
 */
function round(x) {
  return finalise(x = new this(x), x.e + 1, this.rounding);
}


/*
 * Return
 *   1    if x > 0,
 *  -1    if x < 0,
 *   0    if x is 0,
 *  -0    if x is -0,
 *   NaN  otherwise
 *
 * x {number|string|Decimal}
 *
 */
function sign(x) {
  x = new this(x);
  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
}


/*
 * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
 * using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function sin(x) {
  return new this(x).sin();
}


/*
 * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function sinh(x) {
  return new this(x).sinh();
}


/*
 * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 *
 */
function sqrt(x) {
  return new this(x).sqrt();
}


/*
 * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
 * using rounding mode `rounding`.
 *
 * x {number|string|Decimal}
 * y {number|string|Decimal}
 *
 */
function sub(x, y) {
  return new this(x).sub(y);
}


/*
 * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * Only the result is rounded, not the intermediate calculations.
 *
 * arguments {number|string|Decimal}
 *
 */
function sum() {
  var i = 0,
    args = arguments,
    x = new this(args[i]);

  external = false;
  for (; x.s && ++i < args.length;) x = x.plus(args[i]);
  external = true;

  return finalise(x, this.precision, this.rounding);
}


/*
 * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
 * digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function tan(x) {
  return new this(x).tan();
}


/*
 * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
 * significant digits using rounding mode `rounding`.
 *
 * x {number|string|Decimal} A value in radians.
 *
 */
function tanh(x) {
  return new this(x).tanh();
}


/*
 * Return a new Decimal whose value is `x` truncated to an integer.
 *
 * x {number|string|Decimal}
 *
 */
function trunc(x) {
  return finalise(x = new this(x), x.e + 1, 1);
}


P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
P[Symbol.toStringTag] = 'Decimal';

// Create and configure initial Decimal constructor.
var Decimal = P.constructor = clone(DEFAULTS);

// Create the internal constants from their string values.
LN10 = new Decimal(LN10);
PI = new Decimal(PI);

var _a;
var isNotNumber = function (value) {
    if (typeof value === 'number') {
        return Number.isNaN(value);
    }
    if (!value) {
        return true;
    }
    if (typeof value === 'string') {
        return Number.isNaN(Number(value));
    }
    return true;
};
/**
 * 预处理原始数据为 Decimal 对象数组
 * 所有不能转为 number 的数据默认为 0
 * @param data 原始数据数组
 * @param field 值字段
 * @param filterIllegalValue 是否过滤非法值？过滤后，包装后的数据数组短于原始数组长度
 * @returns 经过 Decimal 包装后的值数组
 */
var processFieldValues = function (data, field, filterIllegalValue) {
    if (filterIllegalValue === void 0) { filterIllegalValue = false; }
    if (!(data === null || data === void 0 ? void 0 : data.length)) {
        return [];
    }
    return data.reduce(function (resultArr, item) {
        var fieldValue = get(item, field);
        var notNumber = isNotNumber(fieldValue);
        if (filterIllegalValue && notNumber) {
            // 过滤非法值
            return resultArr;
        }
        var val = notNumber ? 0 : fieldValue;
        resultArr.push(new Decimal(val));
        return resultArr;
    }, []);
};
/**
 * 计算数据项的和
 * @param data 数据项
 * @param field 值字段
 * @returns 算术和
 */
var getDataSumByField = function (data, field) {
    var fieldValues = processFieldValues(data, field);
    if (!fieldValues.length) {
        return 0;
    }
    return Decimal.sum.apply(Decimal, __spreadArray$1([], __read(fieldValues), false)).toNumber();
};
/**
 * 计算数据项的极值
 * @param method 最大值(max)或最小值(min)
 * @param data 数据项
 * @param field 值字段
 * @returns 最值
 */
var getDataExtremumByField = function (method, data, field) {
    // 防止预处理时默认值 0 影响极值结果，处理时需过滤非法值
    var fieldValues = processFieldValues(data, field, true);
    if (!(fieldValues === null || fieldValues === void 0 ? void 0 : fieldValues.length)) {
        return;
    }
    return Decimal[method].apply(Decimal, __spreadArray$1([], __read(fieldValues), false)).toNumber();
};
/**
 * 计算数据项的平均值
 * @param data 数据项
 * @param field 值字段
 * @returns 算术平均值
 */
var getDataAvgByField = function (data, field) {
    var fieldValues = processFieldValues(data, field);
    if (!(fieldValues === null || fieldValues === void 0 ? void 0 : fieldValues.length)) {
        return 0;
    }
    return Decimal.sum.apply(Decimal, __spreadArray$1([], __read(fieldValues), false)).dividedBy(fieldValues.length)
        .toNumber();
};
/**
 * totals 计算方法集合
 */
var calcActionByType = (_a = {},
    _a[Aggregation.SUM] = getDataSumByField,
    _a[Aggregation.MIN] = function (data, field) {
        return getDataExtremumByField('min', data, field);
    },
    _a[Aggregation.MAX] = function (data, field) {
        return getDataExtremumByField('max', data, field);
    },
    _a[Aggregation.AVG] = getDataAvgByField,
    _a);

var isMultiDataItem = function (value) {
    return isObject(value) && 'values' in value;
};

/**
 * 获取tooltip中需要显示的数据项
 */
/**
 * calculate tooltip show position
 */
var getAutoAdjustPosition = function (_a) {
    var spreadsheet = _a.spreadsheet, position = _a.position, tooltipContainer = _a.tooltipContainer, autoAdjustBoundary = _a.autoAdjustBoundary;
    var canvas = spreadsheet.getCanvasElement();
    var x = position.x + TOOLTIP_POSITION_OFFSET.x;
    var y = position.y + TOOLTIP_POSITION_OFFSET.y;
    if (!autoAdjustBoundary || !canvas) {
        return {
            x: x,
            y: y,
        };
    }
    var isAdjustBodyBoundary = autoAdjustBoundary === 'body';
    var _b = spreadsheet.facet.panelBBox, maxX = _b.maxX, maxY = _b.maxY;
    var _c = spreadsheet.options, width = _c.width, height = _c.height;
    var _d = canvas.getBoundingClientRect(), canvasOffsetTop = _d.top, canvasOffsetLeft = _d.left;
    var _e = tooltipContainer.getBoundingClientRect(), tooltipWidth = _e.width, tooltipHeight = _e.height;
    var _f = document.body.getBoundingClientRect(), viewportWidth = _f.width, viewportHeight = _f.height;
    var maxWidth = isAdjustBodyBoundary
        ? viewportWidth
        : Math.min(width, maxX) + canvasOffsetLeft;
    var maxHeight = isAdjustBodyBoundary
        ? viewportHeight
        : Math.min(height, maxY) + canvasOffsetTop;
    if (x + tooltipWidth >= maxWidth) {
        x = maxWidth - tooltipWidth;
    }
    if (y + tooltipHeight >= maxHeight) {
        y = maxHeight - tooltipHeight;
    }
    return {
        x: x,
        y: y,
    };
};
var getTooltipDefaultOptions = function (options) {
    return __assign({ operator: { onClick: noop, menus: [] }, enterable: true, enableFormat: true }, options);
};
var getMergedQuery = function (meta) {
    return __assign(__assign({}, meta === null || meta === void 0 ? void 0 : meta.colQuery), meta === null || meta === void 0 ? void 0 : meta.rowQuery);
};
var setTooltipContainerStyle = function (container, options) {
    var _a;
    if (!container) {
        return;
    }
    var style = options.style, _b = options.className, className = _b === void 0 ? [] : _b, visible = options.visible;
    if (style) {
        Object.assign(container.style, style);
    }
    if (className.length) {
        var classList = className.filter(Boolean);
        (_a = container.classList).add.apply(_a, __spreadArray$1([], __read(classList), false));
    }
    container.classList.toggle(TOOLTIP_CONTAINER_SHOW_CLS, visible);
    container.classList.toggle(TOOLTIP_CONTAINER_HIDE_CLS, !visible);
};
/* formate */
var getFriendlyVal = function (val) {
    var isInvalidNumber = isNumber(val) && Number.isNaN(val);
    var isEmptyString = val === '';
    return isNil(val) || isInvalidNumber || isEmptyString ? '-' : val;
};
var getFieldFormatter = function (spreadsheet, field) {
    var _a;
    var formatter = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _a === void 0 ? void 0 : _a.getFieldFormatter(field);
    return function (v, data) {
        return getFriendlyVal(formatter(v, data));
    };
};
var getListItem = function (spreadsheet, _a) {
    var _b;
    var data = _a.data, field = _a.field, valueField = _a.valueField, _c = _a.useCompleteDataForFormatter, useCompleteDataForFormatter = _c === void 0 ? true : _c;
    var name = (_b = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _b === void 0 ? void 0 : _b.getFieldName(field);
    var formatter = getFieldFormatter(spreadsheet, field);
    // 暂时对 object 类型 data 不作处理，上层通过自定义 tooltip 的方式去自行定制
    var dataValue = isObject(data[field])
        ? JSON.stringify(data[field])
        : data[field];
    var value = formatter(valueField || dataValue, useCompleteDataForFormatter ? data : undefined);
    return {
        name: name,
        value: value,
    };
};
var getFieldList = function (spreadsheet, fields, activeData) {
    var currFields = filter(concat([], fields), function (field) { return field !== EXTRA_FIELD && activeData[field]; });
    var fieldList = map(currFields, function (field) {
        return getListItem(spreadsheet, {
            data: activeData,
            field: field,
            useCompleteDataForFormatter: false,
        });
    });
    return fieldList;
};
/**
 * 获取选中格行/列头信息
 * @param spreadsheet
 * @param activeData
 */
var getHeadInfo = function (spreadsheet, activeData, options) {
    var _a, _b, _c, _d;
    var isTotals = (options || {}).isTotals;
    var colList = [];
    var rowList = [];
    if (activeData) {
        var colFields = (_b = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.columns;
        var rowFields = (_d = (_c = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _c === void 0 ? void 0 : _c.fields) === null || _d === void 0 ? void 0 : _d.rows;
        colList = getFieldList(spreadsheet, getLeafColumnsWithKey(colFields || []), activeData);
        rowList = getFieldList(spreadsheet, rowFields, activeData);
    }
    // 此时是总计-总计
    if (isEmpty(colList) && isEmpty(rowList) && isTotals) {
        colList = [{ value: i18n('总计') }];
    }
    return { cols: colList, rows: rowList };
};
/**
 * 获取数据明细
 * @param spreadsheet
 * @param activeData
 * @param options
 */
var getTooltipDetailList = function (spreadsheet, activeData, options) {
    if (activeData) {
        var isTotals = options.isTotals;
        var field = activeData[EXTRA_FIELD];
        var value = activeData[field];
        var valItem_1 = [];
        if (isTotals) {
            // total/subtotal
            valItem_1.push(getListItem(spreadsheet, {
                data: activeData,
                field: field,
                valueField: get(activeData, VALUE_FIELD),
            }));
        }
        // the value hangs at the head of the column, match the displayed fields according to the metric itself
        // 1、multiple derivative indicators
        // 2、only one column scene
        // 3、the clicked cell belongs to the derived index column
        // tooltip need to show all derivative indicators
        else if (isMultiDataItem(value) &&
            spreadsheet.getTooltipDataItemMappingCallback()) {
            var mappedResult_1 = handleDataItem(activeData, spreadsheet.getTooltipDataItemMappingCallback());
            forEach(mappedResult_1, function (_, key) {
                valItem_1.push(getListItem(spreadsheet, { data: mappedResult_1, field: key }));
            });
        }
        else {
            valItem_1.push(getListItem(spreadsheet, { data: activeData, field: field }));
        }
        return valItem_1;
    }
};
var getSummaryName = function (spreadsheet, currentField, isTotals) {
    var _a;
    if (isTotals) {
        return i18n('总计');
    }
    var name = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.dataSet) === null || _a === void 0 ? void 0 : _a.getFieldName(currentField);
    return name && name !== 'undefined' ? name : '';
};
var getRowOrColSelectedIndexes = function (nodes, leafNodes, isRow) {
    if (isRow === void 0) { isRow = true; }
    var selectedIndexes = [];
    forEach(leafNodes, function (leaf, index) {
        forEach(nodes, function (item) {
            if (!isRow && item.colIndex !== -1) {
                selectedIndexes.push([index, item.colIndex]);
            }
            else if (isRow && item.rowIndex !== -1) {
                selectedIndexes.push([item.rowIndex, index]);
            }
        });
    });
    return selectedIndexes;
};
var getSelectedCellIndexes = function (spreadsheet, layoutResult) {
    var _a;
    var rowLeafNodes = layoutResult.rowLeafNodes, colLeafNodes = layoutResult.colLeafNodes;
    var _b = spreadsheet.interaction.getState(), _c = _b.nodes, nodes = _c === void 0 ? [] : _c, _d = _b.cells, cells = _d === void 0 ? [] : _d;
    var cellType = (_a = cells === null || cells === void 0 ? void 0 : cells[0]) === null || _a === void 0 ? void 0 : _a.type;
    // 高亮所有的子节点, 但是只有叶子节点需要参与数据计算 https://github.com/antvis/S2/pull/1443
    var needCalcNodes = nodes.filter(function (node) { return node === null || node === void 0 ? void 0 : node.isLeaf; });
    if (cellType === CellTypes.COL_CELL) {
        return getRowOrColSelectedIndexes(needCalcNodes, rowLeafNodes, false);
    }
    if (cellType === CellTypes.ROW_CELL) {
        return getRowOrColSelectedIndexes(needCalcNodes, colLeafNodes);
    }
    return [];
};
var getSelectedCellsData = function (spreadsheet, targetCell, showSingleTips) {
    var _a;
    var layoutResult = (_a = spreadsheet.facet) === null || _a === void 0 ? void 0 : _a.layoutResult;
    /**
     * 当开启小计/总计后
     * 1. [点击列头单元格时], 选中列所对应的数值单元格的数据如果是小计/总计, 则不应该参与计算:
     *  - 1.1 [小计/总计 位于行头]: 点击的都是 (普通列头), 需要去除 (数值单元格) 对应 (行头为小计) 的单元格的数据
     *  - 1.2 [小计/总计 位于列头]: 点击的是 (普通列头/小计/总计列头), 由于行头没有, 所有数值单元格参与计算即可
     *  - 1.3 [小计/总计 同时位于行头/列头]: 和 1.1 处理一致
  
     * 2. [点击行头单元格时]:
     *  - 2.1 如果本身就是小计/总计单元格, 且列头无小计/总计, 则当前行所有 (数值单元格) 参与计算
     *  - 2.2 如果本身不是小计/总计单元格, 去除当前行/列 (含子节点) 所对应小计/总计数据
  
     * 3. [刷选/多选], 暂不考虑这种场景
     *  - 3.1 如果全部是小计或全部是总计单元格, 则正常计算
     *  - 3.2 如果部分是, 如何处理? 小计/总计不应该被选中, 还是数据不参与计算?
     *  - 3.3 如果选中的含有小计, 并且有总计, 数据参与计算也没有意义, 如何处理?
     */
    var isBelongTotalCell = function (cellMeta) {
        var targetCellMeta = targetCell === null || targetCell === void 0 ? void 0 : targetCell.getMeta();
        // target: 当前点击的单元格类型
        var isTargetTotalCell = targetCellMeta === null || targetCellMeta === void 0 ? void 0 : targetCellMeta.isTotals;
        var isTargetColCell = (targetCell === null || targetCell === void 0 ? void 0 : targetCell.cellType) === CellTypes.COL_CELL;
        var isTargetRowCell = (targetCell === null || targetCell === void 0 ? void 0 : targetCell.cellType) === CellTypes.ROW_CELL;
        if (!isTargetColCell && !isTargetRowCell) {
            return false;
        }
        var currentColCellNode = layoutResult.colNodes.find(function (node) { return node.colIndex === cellMeta.colIndex; });
        var currentRowCellNode = layoutResult.rowNodes.find(function (node) { return node.rowIndex === cellMeta.rowIndex; });
        // 行头点击, 去除列头对应的小计/总计, 列头相反
        var isTotalCell = isTargetColCell
            ? currentRowCellNode === null || currentRowCellNode === void 0 ? void 0 : currentRowCellNode.isTotals
            : currentColCellNode === null || currentColCellNode === void 0 ? void 0 : currentColCellNode.isTotals;
        return ((!isTargetTotalCell && (cellMeta === null || cellMeta === void 0 ? void 0 : cellMeta.isTotals)) ||
            (isTargetTotalCell && isTotalCell));
    };
    // 列头选择和行头选择没有存所有selected的cell，因此要遍历index对比，而selected则不需要
    if (showSingleTips) {
        // 行头列头单选多选
        var selectedCellIndexes = getSelectedCellIndexes(spreadsheet, layoutResult);
        return compact(map(selectedCellIndexes, function (_a) {
            var _b = __read(_a, 2), i = _b[0], j = _b[1];
            var currentCellMeta = layoutResult.getCellMeta(i, j);
            if (isBelongTotalCell(currentCellMeta)) {
                return;
            }
            return (currentCellMeta === null || currentCellMeta === void 0 ? void 0 : currentCellMeta.data) || getMergedQuery(currentCellMeta);
        }));
    }
    // 其他（刷选，data cell多选）
    var cells = spreadsheet.interaction.getCells();
    return cells
        .filter(function (cellMeta) {
        var meta = layoutResult.getCellMeta(cellMeta.rowIndex, cellMeta.colIndex);
        return !isBelongTotalCell(meta);
    })
        .map(function (cellMeta) {
        var meta = layoutResult.getCellMeta(cellMeta.rowIndex, cellMeta.colIndex);
        return (meta === null || meta === void 0 ? void 0 : meta.data) || getMergedQuery(meta);
    });
};
var getSummaries = function (params) {
    var spreadsheet = params.spreadsheet, targetCell = params.targetCell, _a = params.options, options = _a === void 0 ? {} : _a;
    var summaries = [];
    var summary = {};
    var isTableMode = spreadsheet.isTableMode();
    if (isTableMode && (options === null || options === void 0 ? void 0 : options.showSingleTips)) {
        var meta = targetCell.getMeta();
        // 如果是列头, 获取当前列所有数据, 其他则获取当前整行 (1条数据)
        var selectedCellsData_1 = (meta === null || meta === void 0 ? void 0 : meta.field)
            ? spreadsheet.dataSet.getMultiData({ field: meta.field })
            : [spreadsheet.dataSet.getRowData(meta)];
        return [{ selectedData: selectedCellsData_1, name: '', value: '' }];
    }
    // 拿到选择的所有 dataCell的数据
    var selectedCellsData = getSelectedCellsData(spreadsheet, targetCell, options.showSingleTips);
    forEach(selectedCellsData, function (item) {
        var _a;
        if (summary[item === null || item === void 0 ? void 0 : item[EXTRA_FIELD]]) {
            (_a = summary[item === null || item === void 0 ? void 0 : item[EXTRA_FIELD]]) === null || _a === void 0 ? void 0 : _a.push(item);
        }
        else {
            summary[item === null || item === void 0 ? void 0 : item[EXTRA_FIELD]] = [item];
        }
    });
    mapKeys(summary, function (selected, field) {
        var _a;
        var name = getSummaryName(spreadsheet, field, options === null || options === void 0 ? void 0 : options.isTotals);
        var value = '';
        var originVal = '';
        if (every(selected, function (item) { return isNotNumber(get(item, VALUE_FIELD)); })) {
            var placeholder = spreadsheet.options.placeholder;
            var emptyPlaceholder = getEmptyPlaceholder(summary, placeholder);
            // 如果选中的单元格都无数据，则显示"-" 或 options 里配置的占位符
            value = emptyPlaceholder;
            originVal = emptyPlaceholder;
        }
        else {
            var currentFormatter = getFieldFormatter(spreadsheet, field);
            var dataSum = getDataSumByField(selected, VALUE_FIELD);
            originVal = dataSum;
            value =
                (_a = currentFormatter === null || currentFormatter === void 0 ? void 0 : currentFormatter(dataSum, selected)) !== null && _a !== void 0 ? _a : parseFloat(dataSum.toPrecision(PRECISION)); // solve accuracy problems;
        }
        summaries.push({
            selectedData: selected,
            name: name,
            value: value,
            originValue: originVal,
        });
    });
    return summaries;
};
var getDescription = function (targetCell) {
    if (!targetCell) {
        return;
    }
    var meta = targetCell.getMeta();
    if (meta.isTotals) {
        return;
    }
    var currentMeta = find$1(meta.spreadsheet.dataCfg.meta, {
        field: meta.field || meta.value || meta.valueField,
    });
    var field = currentMeta === null || currentMeta === void 0 ? void 0 : currentMeta.field;
    return meta.spreadsheet.dataSet.getFieldDescription(field);
};
var getTooltipData = function (params) {
    var spreadsheet = params.spreadsheet, _a = params.cellInfos, cellInfos = _a === void 0 ? [] : _a, _b = params.options, options = _b === void 0 ? {} : _b, targetCell = params.targetCell;
    var summaries = null;
    var headInfo = null;
    var details = null;
    var description = getDescription(targetCell);
    var firstCellInfo = cellInfos[0] || {};
    if (!(options === null || options === void 0 ? void 0 : options.hideSummary)) {
        // 计算多项的sum（默认为sum，可自定义）
        summaries = getSummaries({
            spreadsheet: spreadsheet,
            options: options,
            targetCell: targetCell,
        });
    }
    else if (options.showSingleTips) {
        // 行列头hover & 明细表所有hover
        var currentFormatter = getFieldFormatter(spreadsheet, firstCellInfo.valueField);
        var formattedValue = currentFormatter(firstCellInfo.value);
        var cellName = options.enableFormat
            ? spreadsheet.dataSet.getFieldName(firstCellInfo.value) || formattedValue
            : spreadsheet.dataSet.getFieldName(firstCellInfo.valueField);
        firstCellInfo.name = cellName || '';
    }
    else {
        headInfo = getHeadInfo(spreadsheet, firstCellInfo, options);
        details = getTooltipDetailList(spreadsheet, firstCellInfo, options);
    }
    var _c = firstCellInfo || {}, interpretation = _c.interpretation, infos = _c.infos, tips = _c.tips, name = _c.name;
    return {
        summaries: summaries,
        interpretation: interpretation,
        infos: infos,
        tips: tips,
        name: name,
        headInfo: headInfo,
        details: details,
        description: description,
    };
};
var mergeCellInfo = function (cells) {
    return map(cells, function (stateCell) {
        var stateCellMeta = stateCell.getMeta();
        return assign$1({}, stateCellMeta.query || {}, pick$1(stateCellMeta, ['colIndex', 'rowIndex']));
    });
};
var getCellsTooltipData = function (spreadsheet) {
    if (!spreadsheet.interaction.isSelectedState()) {
        return [];
    }
    var valueInCols = spreadsheet.dataCfg.fields.valueInCols;
    // 包括不在可视区域内的格子, 如: 滚动刷选
    return spreadsheet.interaction
        .getCells()
        .reduce(function (tooltipData, cellMeta) {
        var meta = spreadsheet.facet.layoutResult.getCellMeta(cellMeta === null || cellMeta === void 0 ? void 0 : cellMeta.rowIndex, cellMeta === null || cellMeta === void 0 ? void 0 : cellMeta.colIndex);
        var query = getMergedQuery(meta);
        if (isEmpty(meta) || isEmpty(query)) {
            return [];
        }
        var currentCellInfo = __assign(__assign({}, query), { colIndex: valueInCols ? meta.colIndex : null, rowIndex: !valueInCols ? meta.rowIndex : null });
        var isEqualCellInfo = tooltipData.find(function (cellInfo) {
            return isEqual(currentCellInfo, cellInfo);
        });
        if (!isEqualCellInfo) {
            tooltipData.push(currentCellInfo);
        }
        return tooltipData;
    }, []);
};
var getTooltipOptionsByCellType = function (cellTooltipConfig, cellType) {
    if (cellTooltipConfig === void 0) { cellTooltipConfig = {}; }
    var getOptionsByCell = function (cellConfig) {
        return customMerge(cellTooltipConfig, cellConfig);
    };
    var col = cellTooltipConfig.col, row = cellTooltipConfig.row, data = cellTooltipConfig.data, corner = cellTooltipConfig.corner;
    if (cellType === CellTypes.COL_CELL) {
        return getOptionsByCell(col);
    }
    if (cellType === CellTypes.ROW_CELL) {
        return getOptionsByCell(row);
    }
    if (cellType === CellTypes.DATA_CELL) {
        return getOptionsByCell(data);
    }
    if (cellType === CellTypes.CORNER_CELL) {
        return getOptionsByCell(corner);
    }
    return __assign({}, cellTooltipConfig);
};
var getTooltipOptions = function (spreadsheet, event) {
    var _a;
    if (!event || !spreadsheet) {
        return;
    }
    var cellType = (_a = spreadsheet.getCellType) === null || _a === void 0 ? void 0 : _a.call(spreadsheet, event === null || event === void 0 ? void 0 : event.target);
    return getTooltipOptionsByCellType(spreadsheet.options.tooltip, cellType);
};
var getTooltipVisibleOperator = function (operation, options) {
    var _a = options.defaultMenus, defaultMenus = _a === void 0 ? [] : _a, cell = options.cell;
    var getDisplayMenus = function (menus) {
        if (menus === void 0) { menus = []; }
        return menus
            .filter(function (menu) {
            var _a;
            return isFunction(menu.visible)
                ? menu.visible(cell)
                : (_a = menu.visible) !== null && _a !== void 0 ? _a : true;
        })
            .map(function (menu) {
            if (menu.children) {
                menu.children = getDisplayMenus(menu.children);
            }
            return menu;
        });
    };
    var displayMenus = getDisplayMenus(operation.menus);
    return {
        onClick: operation.onClick,
        menus: compact(__spreadArray$1(__spreadArray$1([], __read(defaultMenus), false), __read(displayMenus), false)),
    };
};
var verifyTheElementInTooltip = function (parent, child) {
    var result = false;
    var currentNode = child;
    while (currentNode && currentNode !== document.body) {
        if (parent === currentNode) {
            result = true;
            break;
        }
        currentNode = currentNode.parentElement;
    }
    return result;
};

var getClassNameWithPrefix = function () {
    var classNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        classNames[_i] = arguments[_i];
    }
    return "".concat(S2_PREFIX_CLS, "-").concat(classNames.join('-'));
};

/**
 * @desc clear all value ranges
 */
var clearValueRangeState = function (spreadsheet) {
    spreadsheet.store.set(VALUE_RANGES_KEY, DEFAULT_VALUE_RANGES);
};
/**
 * @desc merge new value ranges with old values
 * @param spreadsheet sheet instance
 * @param updatedRanges updated value ranges
 */
var setValueRangeState = function (spreadsheet, updatedRanges) {
    var valueRanges = spreadsheet.store.get(VALUE_RANGES_KEY, DEFAULT_VALUE_RANGES);
    spreadsheet.store.set(VALUE_RANGES_KEY, __assign(__assign({}, valueRanges), updatedRanges));
};
/**
 * @desc get target value ranges
 * @param spreadsheet sheet instance
 * @param valueField target field
 */
var getValueRangeState = function (spreadsheet, valueField) {
    var valueRanges = spreadsheet.store.get(VALUE_RANGES_KEY, DEFAULT_VALUE_RANGES);
    return valueRanges[valueField];
};

var BaseDataSet = /** @class */ (function () {
    function BaseDataSet(spreadsheet) {
        var _this = this;
        // 单元格所对应格式化后的值（用于编辑表）
        this.displayFormattedValueMap = new Map();
        /**
         * 查找字段信息
         */
        this.getFieldMeta = memoize(function (field, meta) {
            return find$1(_this.meta || meta, function (m) { return m.field === field; });
        });
        this.spreadsheet = spreadsheet;
    }
    /**
     * 获得字段名称
     * @param field
     */
    BaseDataSet.prototype.getFieldName = function (field) {
        return get(this.getFieldMeta(field, this.meta), 'name', field);
    };
    /**
     * 获得字段格式方法
     * @param field
     */
    BaseDataSet.prototype.getFieldFormatter = function (field) {
        return get(this.getFieldMeta(field, this.meta), 'formatter', identity);
    };
    /**
     * 获得字段描述
     * @param field
     */
    BaseDataSet.prototype.getFieldDescription = function (field) {
        return get(this.getFieldMeta(field, this.meta), 'description');
    };
    BaseDataSet.prototype.setDataCfg = function (dataCfg) {
        this.getFieldMeta.cache.clear();
        var _a = this.processDataCfg(dataCfg), fields = _a.fields, meta = _a.meta, data = _a.data, totalData = _a.totalData, sortParams = _a.sortParams, filterParams = _a.filterParams;
        this.fields = fields;
        this.meta = meta;
        this.originData = data;
        this.totalData = totalData;
        this.sortParams = sortParams;
        this.filterParams = filterParams;
        this.displayData = this.originData;
        this.indexesData = {};
    };
    BaseDataSet.prototype.processMeta = function (meta, defaultExtraFieldText) {
        var _a, _b;
        if (meta === void 0) { meta = []; }
        return __spreadArray$1(__spreadArray$1([], __read(meta), false), [
            generateExtraFieldMeta(meta, (_b = (_a = this.spreadsheet) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.cornerExtraFieldText, defaultExtraFieldText),
        ], false);
    };
    BaseDataSet.prototype.getDisplayDataSet = function () {
        return this.displayData || [];
    };
    BaseDataSet.prototype.isEmpty = function () {
        return isEmpty(this.getDisplayDataSet());
    };
    // https://github.com/antvis/S2/issues/2255
    BaseDataSet.prototype.getEmptyViewIndexes = function () {
        return [];
    };
    BaseDataSet.prototype.getValueRangeByField = function (field) {
        var _a;
        var cacheRange = getValueRangeState(this.spreadsheet, field);
        if (cacheRange) {
            return cacheRange;
        }
        var fieldValues = compact(map(this.originData, function (item) {
            var value = item[field];
            return isNil(value) ? null : Number.parseFloat(value);
        }));
        var range = {
            maxValue: max$1(fieldValues),
            minValue: min$1(fieldValues),
        };
        setValueRangeState(this.spreadsheet, (_a = {},
            _a[field] = range,
            _a));
        return range;
    };
    BaseDataSet.prototype.moreThanOneValue = function () {
        var _a, _b;
        return ((_b = (_a = this.fields) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.length) > 1;
    };
    return BaseDataSet;
}());

var DataHandler = /** @class */ (function () {
    function DataHandler(extraField) {
        this.extraField = extraField;
    }
    DataHandler.createProxyData = function (data, extraField) {
        return new Proxy(data, new DataHandler(extraField));
    };
    DataHandler.createProxyDataList = function (data, extraFields) {
        return extraFields.map(function (field) { return DataHandler.createProxyData(data, field); });
    };
    DataHandler.prototype.get = function (target, key) {
        if (key === ORIGIN_FIELD) {
            return target;
        }
        if (key === EXTRA_FIELD) {
            return this.extraField;
        }
        if (key === VALUE_FIELD) {
            return target[this.extraField];
        }
        return target[key];
    };
    DataHandler.prototype.has = function (target, key) {
        if (key === EXTRA_FIELD || key === VALUE_FIELD) {
            return true;
        }
        return key in target;
    };
    DataHandler.prototype.ownKeys = function (target) {
        return Object.keys(target).concat(EXTRA_FIELD, VALUE_FIELD);
    };
    DataHandler.prototype.getOwnPropertyDescriptor = function (target, key) {
        if (key === EXTRA_FIELD || key === VALUE_FIELD) {
            return {
                configurable: true,
                enumerable: true,
            };
        }
        return Object.getOwnPropertyDescriptor(target, key);
    };
    return DataHandler;
}());

var PivotDataSet = /** @class */ (function (_super) {
    __extends(PivotDataSet, _super);
    function PivotDataSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * 排序优先级：
         * 1、sortParams里的条件优先级高于原始数据
         * 2、sortParams多个item：按照顺序优先级，排在后面的优先级高
         * 3、item中多个条件：sortByField > sortFunc > sortBy > sortMethod
         */
        _this.handleDimensionValuesSort = function () {
            forEach(_this.sortParams, function (item) {
                var sortFieldId = item.sortFieldId, sortByMeasure = item.sortByMeasure;
                // 万物排序的前提
                if (!sortFieldId) {
                    return;
                }
                var originValues = __spreadArray$1([], __read((_this.sortedDimensionValues[sortFieldId] || [])), false);
                var result = handleSortAction({
                    dataSet: _this,
                    sortParam: item,
                    originValues: originValues,
                    isSortByMeasure: !isEmpty(sortByMeasure),
                });
                _this.sortedDimensionValues[sortFieldId] = result;
                _this.handlePivotMetaSort(sortFieldId, result);
            });
        };
        _this.getTotalStatus = function (query) {
            var _a = _this.fields, columns = _a.columns, rows = _a.rows;
            var isTotals = function (dimensions, isSubTotal) {
                if (isSubTotal) {
                    var firstDimension = find$1(dimensions, function (item) { return !has(query, item); });
                    return firstDimension && firstDimension !== head(dimensions);
                }
                return every(dimensions, function (item) { return !has(query, item); });
            };
            var getDimensions = function (dimensions, hasExtra) {
                return hasExtra
                    ? dimensions.filter(function (item) { return item !== EXTRA_FIELD; })
                    : dimensions;
            };
            return {
                isRowTotal: isTotals(getDimensions(rows, !_this.spreadsheet.isValueInCols())),
                isRowSubTotal: isTotals(rows, true),
                isColTotal: isTotals(getDimensions(columns, _this.spreadsheet.isValueInCols())),
                isColSubTotal: isTotals(columns, true),
            };
        };
        return _this;
    }
    PivotDataSet.prototype.getExistValuesByDataItem = function (data, values) {
        return getExistValues(data, values);
    };
    /**
     * When data related config changed, we need
     * 1、re-process config
     * 2、re-transform origin data
     * 3、sort and other things
     * @param dataCfg
     */
    PivotDataSet.prototype.setDataCfg = function (dataCfg) {
        _super.prototype.setDataCfg.call(this, dataCfg);
        var rows = this.fields.rows;
        this.sortedDimensionValues = {};
        this.rowPivotMeta = new Map();
        this.colPivotMeta = new Map();
        this.transformIndexesData(this.originData.concat(this.totalData), rows);
        this.handleDimensionValuesSort();
    };
    PivotDataSet.prototype.transformIndexesData = function (data, rows) {
        var _this = this;
        var _a = this.fields, columns = _a.columns, values = _a.values, valueInCols = _a.valueInCols;
        var result;
        DebuggerUtil.getInstance().debugCallback(DEBUG_TRANSFORM_DATA, function () {
            result = transformIndexesData({
                rows: rows,
                columns: columns,
                values: values,
                valueInCols: valueInCols,
                data: data,
                indexesData: _this.indexesData,
                sortedDimensionValues: _this.sortedDimensionValues,
                rowPivotMeta: _this.rowPivotMeta,
                colPivotMeta: _this.colPivotMeta,
                getExistValuesByDataItem: _this.getExistValuesByDataItem,
            });
            _this.indexesData = result.indexesData;
            _this.rowPivotMeta = result.rowPivotMeta;
            _this.colPivotMeta = result.colPivotMeta;
            _this.sortedDimensionValues = result.sortedDimensionValues;
        });
        return result;
    };
    /**
     * Provide a way to append some drill-down data in indexesData
     * @param extraRowField
     * @param drillDownData
     * @param rowNode
     */
    PivotDataSet.prototype.transformDrillDownData = function (extraRowField, drillDownData, rowNode) {
        var _this = this;
        var _a;
        var currentRowFields = Node$1.getFieldPath(rowNode, true);
        var nextRowFields = __spreadArray$1(__spreadArray$1([], __read(currentRowFields), false), [extraRowField], false);
        var store = this.spreadsheet.store;
        // 2. 检查该节点是否已经存在下钻维度
        var rowNodeId = rowNode === null || rowNode === void 0 ? void 0 : rowNode.id;
        var idPathMap = (_a = store.get('drillDownIdPathMap')) !== null && _a !== void 0 ? _a : new Map();
        if (idPathMap.has(rowNodeId)) {
            // the current node has a drill-down field, clean it
            forEach(idPathMap.get(rowNodeId), function (path) {
                unset(_this.indexesData, path);
            });
            deleteMetaById(this.rowPivotMeta, rowNodeId);
        }
        // 3、转换数据
        var drillDownDataPaths = this.transformIndexesData(drillDownData, nextRowFields).paths;
        // 4、record data paths by nodeId
        // set new drill-down data path
        idPathMap.set(rowNodeId, drillDownDataPaths);
        store.set('drillDownIdPathMap', idPathMap);
    };
    /**
     * Clear drill down data by rowNodeId
     * rowNodeId is undefined => clear all
     * @param rowNodeId
     */
    PivotDataSet.prototype.clearDrillDownData = function (rowNodeId) {
        var _this = this;
        var store = this.spreadsheet.store;
        var idPathMap = store.get('drillDownIdPathMap');
        if (!idPathMap) {
            return false;
        }
        var drillDownDataCache = store.get('drillDownDataCache', []);
        if (rowNodeId) {
            // 1. 删除 indexesData 当前下钻层级对应数据
            var currentIdPathMap = idPathMap.get(rowNodeId);
            if (currentIdPathMap) {
                forEach(currentIdPathMap, function (path) {
                    unset(_this.indexesData, path);
                });
            }
            // 2. 删除 rowPivotMeta 当前下钻层级对应 meta 信息
            deleteMetaById(this.rowPivotMeta, rowNodeId);
            // 3. 删除下钻缓存路径
            idPathMap.delete(rowNodeId);
            // 4. 过滤清除的下钻缓存
            var restDataCache = filter(drillDownDataCache, function (cache) {
                return idPathMap.has(cache === null || cache === void 0 ? void 0 : cache.rowId);
            });
            store.set('drillDownDataCache', restDataCache);
            // 5. 过滤清除的下钻层级
            var restDrillLevels_1 = restDataCache.map(function (cache) { return cache === null || cache === void 0 ? void 0 : cache.drillLevel; });
            var drillDownFieldInLevel = store.get('drillDownFieldInLevel', []);
            var restFieldInLevel = drillDownFieldInLevel.filter(function (filed) {
                return includes(restDrillLevels_1, filed === null || filed === void 0 ? void 0 : filed.drillLevel);
            });
            store.set('drillDownFieldInLevel', restFieldInLevel);
        }
        else {
            idPathMap.clear();
            // 需要对应清空所有下钻后的dataCfg信息
            // 因此如果缓存有下钻前原始dataCfg，需要清空所有的下钻数据
            var originalDataCfg = this.spreadsheet.store.get('originalDataCfg');
            if (!isEmpty(originalDataCfg)) {
                this.spreadsheet.setDataCfg(originalDataCfg);
            }
            // 清空所有的下钻信息
            this.spreadsheet.store.set('drillItemsNum', -1);
            this.spreadsheet.store.set('drillDownDataCache', []);
            this.spreadsheet.store.set('drillDownFieldInLevel', []);
        }
        store.set('drillDownIdPathMap', idPathMap);
        return true;
    };
    PivotDataSet.prototype.handlePivotMetaSort = function (sortFieldId, sortedDimensionValues) {
        var _a = this.fields, rows = _a.rows, columns = _a.columns;
        if (includes(rows, sortFieldId)) {
            this.rowPivotMeta = getSortedPivotMeta({
                pivotMeta: this.rowPivotMeta,
                dimensions: rows,
                sortFieldId: sortFieldId,
                sortedDimensionValues: sortedDimensionValues,
            });
        }
        else if (includes(columns, sortFieldId)) {
            this.colPivotMeta = getSortedPivotMeta({
                pivotMeta: this.colPivotMeta,
                dimensions: columns,
                sortFieldId: sortFieldId,
                sortedDimensionValues: sortedDimensionValues,
            });
        }
    };
    PivotDataSet.prototype.processDataCfg = function (dataCfg) {
        var data = dataCfg.data, _a = dataCfg.meta, meta = _a === void 0 ? [] : _a, fields = dataCfg.fields, _b = dataCfg.sortParams, sortParams = _b === void 0 ? [] : _b, totalData = dataCfg.totalData;
        var columns = fields.columns, rows = fields.rows, values = fields.values, valueInCols = fields.valueInCols, customValueOrder = fields.customValueOrder;
        var newColumns = columns;
        var newRows = rows;
        if (valueInCols) {
            newColumns = this.isCustomMeasuresPosition(customValueOrder)
                ? this.handleCustomMeasuresOrder(customValueOrder, newColumns)
                : uniq(__spreadArray$1(__spreadArray$1([], __read(columns), false), [EXTRA_FIELD], false));
        }
        else {
            newRows = this.isCustomMeasuresPosition(customValueOrder)
                ? this.handleCustomMeasuresOrder(customValueOrder, newRows)
                : uniq(__spreadArray$1(__spreadArray$1([], __read(rows), false), [EXTRA_FIELD], false));
        }
        var newMeta = this.processMeta(meta, i18n('数值'));
        return {
            data: data,
            totalData: totalData,
            meta: newMeta,
            fields: __assign(__assign({}, fields), { rows: newRows, columns: newColumns, values: values }),
            sortParams: sortParams,
        };
    };
    PivotDataSet.prototype.getFieldsAndPivotMetaByField = function (field) {
        var _a = this.fields || {}, _b = _a.rows, rows = _b === void 0 ? [] : _b, _c = _a.columns, columns = _c === void 0 ? [] : _c;
        if (rows.includes(field)) {
            return {
                dimensions: rows,
                pivotMeta: this.rowPivotMeta,
            };
        }
        if (columns.includes(field)) {
            return {
                dimensions: columns,
                pivotMeta: this.colPivotMeta,
            };
        }
        return {};
    };
    PivotDataSet.prototype.getDimensionValues = function (field, query) {
        if (query === void 0) { query = {}; }
        var _a = this.getFieldsAndPivotMetaByField(field), pivotMeta = _a.pivotMeta, dimensions = _a.dimensions;
        if (!pivotMeta || !dimensions) {
            return [];
        }
        var dimensionValues = transformDimensionsValues(query, dimensions, MULTI_VALUE);
        var values = getSatisfiedPivotMetaValues({
            pivotMeta: pivotMeta,
            dimensionValues: dimensionValues,
            fields: dimensions,
            fieldIdx: indexOf(dimensions, field),
            queryType: QueryDataType.DetailOnly,
            sortedDimensionValues: this.sortedDimensionValues,
        });
        return uniq(values.map(function (v) { return v.value; }));
    };
    PivotDataSet.prototype.getTotalValue = function (query, totalStatus) {
        var _a;
        var _b;
        var effectiveStatus = some(totalStatus);
        var status = effectiveStatus ? totalStatus : this.getTotalStatus(query);
        var _c = getAggregationAndCalcFuncByQuery(status, (_b = this.spreadsheet.options) === null || _b === void 0 ? void 0 : _b.totals) || {}, aggregation = _c.aggregation, calcFunc = _c.calcFunc;
        var calcAction = calcActionByType[aggregation];
        // 前端计算汇总值
        if (calcAction || calcFunc) {
            var data = this.getMultiData(query, {
                queryType: QueryDataType.DetailOnly,
            });
            var totalValue = void 0;
            if (calcFunc) {
                totalValue = calcFunc(query, data);
            }
            else if (calcAction) {
                totalValue = calcAction(data, VALUE_FIELD);
            }
            return __assign(__assign({}, query), (_a = {}, _a[VALUE_FIELD] = totalValue, _a[query[EXTRA_FIELD]] = totalValue, _a));
        }
    };
    PivotDataSet.prototype.getCellData = function (params) {
        var _a, _b, _c;
        var _d = params || {}, _e = _d.query, query = _e === void 0 ? {} : _e, rowNode = _d.rowNode, _f = _d.isTotals, isTotals = _f === void 0 ? false : _f, totalStatus = _d.totalStatus;
        var _g = this.fields, originRows = _g.rows, columns = _g.columns;
        var rows = originRows;
        var drillDownIdPathMap = (_a = this.spreadsheet) === null || _a === void 0 ? void 0 : _a.store.get('drillDownIdPathMap');
        // 判断当前是否为下钻节点
        // 需检查 rowNode.id 是否属于下钻根节点(drillDownIdPathMap.keys)的下属节点
        var isDrillDown = Array.from((_b = drillDownIdPathMap === null || drillDownIdPathMap === void 0 ? void 0 : drillDownIdPathMap.keys()) !== null && _b !== void 0 ? _b : []).some(function (parentPath) { return rowNode === null || rowNode === void 0 ? void 0 : rowNode.id.startsWith(parentPath); });
        // 如果是下钻结点，行维度在 originRows 中并不存在
        if (rowNode && isDrillDown) {
            rows = (_c = Node$1.getFieldPath(rowNode, isDrillDown)) !== null && _c !== void 0 ? _c : originRows;
        }
        var rowDimensionValues = transformDimensionsValues(query, rows);
        var colDimensionValues = transformDimensionsValues(query, columns);
        var path = getDataPath({
            rowDimensionValues: rowDimensionValues,
            colDimensionValues: colDimensionValues,
            rowPivotMeta: this.rowPivotMeta,
            colPivotMeta: this.colPivotMeta,
            rowFields: rows,
            colFields: columns,
            prefix: getDataPathPrefix(rows, columns),
        });
        var data = get(this.indexesData, path);
        if (data) {
            // 如果已经有数据则取已有数据
            return DataHandler.createProxyData(data, query[EXTRA_FIELD]);
        }
        if (isTotals) {
            return this.getTotalValue(query, totalStatus);
        }
    };
    PivotDataSet.prototype.getQueryExtraFields = function (query) {
        var values = this.fields.values;
        var extra = query[EXTRA_FIELD];
        if (extra) {
            return includes(values, extra) ? [extra] : [];
        }
        return values;
    };
    PivotDataSet.prototype.getMultiData = function (query, params, isRow, drillDownFields, includeTotalData) {
        var e_1, _a, e_2, _b;
        if (query === void 0) { query = {}; }
        if (drillDownFields === void 0) { drillDownFields = []; }
        if (includeTotalData === void 0) { includeTotalData = true; }
        if (isEmpty(query)) {
            // 如果查询的 query 为空，这样的场景其实没有意义，如果用户想获取全量数据，可以直接从 data 中获取
            // eslint-disable-next-line no-console
            console.warn("query: ".concat(query, " shouldn't be empty, you can get all data from dataCfg if you're intended.\n you should use { EXTRA_FIELD: xxx} as least if you want query all specific value data"));
        }
        // 配置转换
        var _c = isObject(params)
            ? params
            : {
                queryType: includeTotalData
                    ? QueryDataType.All
                    : QueryDataType.DetailOnly,
                drillDownFields: drillDownFields,
            }, _d = _c.drillDownFields, actualDrillDownFields = _d === void 0 ? [] : _d, _e = _c.queryType, queryType = _e === void 0 ? QueryDataType.All : _e;
        var _f = this.fields, rows = _f.rows, columns = _f.columns;
        var totalRows = !isEmpty(actualDrillDownFields)
            ? rows.concat(actualDrillDownFields)
            : rows;
        var rowDimensionValues = transformDimensionsValues(query, totalRows, MULTI_VALUE);
        var colDimensionValues = transformDimensionsValues(query, columns, MULTI_VALUE);
        var _g = getFlattenDimensionValues({
            rowDimensionValues: rowDimensionValues,
            colDimensionValues: colDimensionValues,
            rowPivotMeta: this.rowPivotMeta,
            colPivotMeta: this.colPivotMeta,
            rowFields: totalRows,
            colFields: columns,
            sortedDimensionValues: this.sortedDimensionValues,
            queryType: queryType,
        }), rowQueries = _g.rowQueries, colQueries = _g.colQueries;
        var prefix = getDataPathPrefix(totalRows, columns);
        var all = [];
        try {
            for (var rowQueries_1 = __values(rowQueries), rowQueries_1_1 = rowQueries_1.next(); !rowQueries_1_1.done; rowQueries_1_1 = rowQueries_1.next()) {
                var rowQuery = rowQueries_1_1.value;
                try {
                    for (var colQueries_1 = (e_2 = void 0, __values(colQueries)), colQueries_1_1 = colQueries_1.next(); !colQueries_1_1.done; colQueries_1_1 = colQueries_1.next()) {
                        var colQuery = colQueries_1_1.value;
                        var path = getDataPath({
                            rowDimensionValues: rowQuery,
                            colDimensionValues: colQuery,
                            rowPivotMeta: this.rowPivotMeta,
                            colPivotMeta: this.colPivotMeta,
                            rowFields: totalRows,
                            colFields: columns,
                            prefix: prefix,
                        });
                        var hadMultiField = false;
                        var result = this.indexesData;
                        var _loop_1 = function (i) {
                            var current = path[i];
                            if (hadMultiField) {
                                if (isMultiValue(current)) {
                                    result = flattenIndexesData(result, queryType);
                                }
                                else {
                                    result = compact(map(result, function (item) {
                                        return item === null || item === void 0 ? void 0 : item[current];
                                    }));
                                }
                            }
                            else if (isMultiValue(current)) {
                                hadMultiField = true;
                                result = compact([result]);
                                i--;
                            }
                            else {
                                result = result === null || result === void 0 ? void 0 : result[current];
                            }
                            out_i_1 = i;
                        };
                        var out_i_1;
                        for (var i = 0; i < path.length; i++) {
                            _loop_1(i);
                            i = out_i_1;
                        }
                        // 如果每一个维度都是被指定好的，那么最终获取的数据就是单个的
                        if (isArray$1(result)) {
                            all.push.apply(all, __spreadArray$1([], __read(result), false));
                        }
                        else if (result) {
                            all.push(result);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (colQueries_1_1 && !colQueries_1_1.done && (_b = colQueries_1.return)) _b.call(colQueries_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rowQueries_1_1 && !rowQueries_1_1.done && (_a = rowQueries_1.return)) _a.call(rowQueries_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var extraFields = this.getQueryExtraFields(query);
        // 多个 extra field 有时对应的同一个对象，需要进行去重
        return flatMap(uniq(all), function (item) {
            return item ? DataHandler.createProxyDataList(item, extraFields) : [];
        });
    };
    PivotDataSet.prototype.getFieldFormatter = function (field, cellMeta) {
        // 兼容总计小计场景
        if (field === TOTAL_VALUE) {
            return this.getFieldFormatterForTotalValue(cellMeta);
        }
        return _super.prototype.getFieldFormatter.call(this, field);
    };
    PivotDataSet.prototype.getFieldFormatterForTotalValue = function (cellMeta) {
        var valueField;
        // 当数据置于行头时，小计总计列尝试去找对应的指标
        if (!this.spreadsheet.isValueInCols() && cellMeta) {
            valueField = get(cellMeta.rowQuery, EXTRA_FIELD);
        }
        // 如果没有找到对应指标，则默认取第一个维度
        valueField = valueField !== null && valueField !== void 0 ? valueField : get(this.fields.values, 0);
        return _super.prototype.getFieldFormatter.call(this, valueField);
    };
    /**
     * 自定义度量组位置值
     * @param customValueOrder 用户配置度量组位置，从 0 开始
     * @param fields Rows || Columns
     */
    PivotDataSet.prototype.handleCustomMeasuresOrder = function (customValueOrder, fields) {
        var newFields = uniq(__spreadArray$1([], __read(fields), false));
        if (fields.length >= customValueOrder) {
            newFields.splice(customValueOrder, 0, EXTRA_FIELD);
            return newFields;
        }
        // 当用户配置的度量组位置大于等于度量组数量时，默认放在最后
        return __spreadArray$1(__spreadArray$1([], __read(newFields), false), [EXTRA_FIELD], false);
    };
    // 是否开启自定义度量组位置值
    PivotDataSet.prototype.isCustomMeasuresPosition = function (customValueOrder) {
        return isNumber(customValueOrder);
    };
    PivotDataSet.prototype.getRowData = function (cell) {
        return this.getMultiData(cell.rowQuery);
    };
    return PivotDataSet;
}(BaseDataSet));

var CustomTreePivotDataSet = /** @class */ (function (_super) {
    __extends(CustomTreePivotDataSet, _super);
    function CustomTreePivotDataSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomTreePivotDataSet.prototype.getCellData = function (params) {
        var query = params.query;
        var _a = this.fields, rows = _a.rows, columns = _a.columns;
        var rowDimensionValues = transformDimensionsValues(query, rows);
        // 透视表下columns只支持简单结构
        var colDimensionValues = transformDimensionsValues(query, columns);
        var path = getDataPath({
            rowDimensionValues: rowDimensionValues,
            colDimensionValues: colDimensionValues,
            rowPivotMeta: this.rowPivotMeta,
            colPivotMeta: this.colPivotMeta,
            rowFields: rows,
            colFields: columns,
            prefix: getDataPathPrefix(rows, columns),
        });
        var data = get(this.indexesData, path);
        if (data) {
            return DataHandler.createProxyData(data, query[EXTRA_FIELD]);
        }
        return data;
    };
    CustomTreePivotDataSet.prototype.processDataCfg = function (dataCfg) {
        var meta = dataCfg.meta;
        var newMeta = this.processMeta(meta, i18n('指标'));
        return __assign(__assign({}, dataCfg), { meta: newMeta, fields: __assign(__assign({}, dataCfg.fields), { 
                // 1、rows配置必须是空，需要额外添加 $$extra$$ 定位数据（标记指标的id）
                rows: [EXTRA_FIELD], valueInCols: false }) });
    };
    return CustomTreePivotDataSet;
}(PivotDataSet));

var TableDataSet = /** @class */ (function (_super) {
    __extends(TableDataSet, _super);
    function TableDataSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleDimensionValueFilter = function () {
            forEach(_this.filterParams, function (_a) {
                var filterKey = _a.filterKey, filteredValues = _a.filteredValues, customFilter = _a.customFilter;
                var filteredValuesSet = new Set(filteredValues);
                var defaultFilterFunc = function (row) {
                    return !filteredValuesSet.has(row[filterKey]);
                };
                var filteredData = filter(_this.displayData, function (row) {
                    if (customFilter) {
                        return customFilter(row) && defaultFilterFunc(row);
                    }
                    return defaultFilterFunc(row);
                });
                _this.displayData = _this.getDisplayData(filteredData);
            });
        };
        //  sortFunc > sortBy > sortFieldId
        _this.handleDimensionValuesSort = function () {
            forEach(_this.sortParams, function (item) {
                var sortFieldId = item.sortFieldId, sortBy = item.sortBy, sortFunc = item.sortFunc, sortMethod = item.sortMethod, query = item.query;
                // 排序的前提
                if (!sortFieldId) {
                    return;
                }
                var data = _this.displayData;
                var restData = [];
                if (query) {
                    var scopedData_1 = [];
                    data.forEach(function (record) {
                        var keys = Object.keys(query);
                        var inScope = true;
                        for (var index = 0; index < keys.length; index++) {
                            var k = keys[index];
                            if (record[k] !== query[k]) {
                                inScope = false;
                                restData.push(record);
                                break;
                            }
                        }
                        if (inScope) {
                            scopedData_1.push(record);
                        }
                    });
                    data = scopedData_1;
                }
                var sortedData = data;
                if (sortFunc) {
                    sortedData = sortFunc(__assign(__assign({}, item), { data: data }));
                }
                else if (sortBy && !isFunction(sortBy)) {
                    var reversedSortBy_1 = __spreadArray$1([], __read(sortBy), false).reverse();
                    sortedData = data.sort(function (a, b) {
                        var idxA = reversedSortBy_1.indexOf(a[sortFieldId]);
                        var idxB = reversedSortBy_1.indexOf(b[sortFieldId]);
                        return idxB - idxA;
                    });
                }
                else if (isAscSort(sortMethod) || isDescSort(sortMethod)) {
                    var func = isFunction(sortBy) ? sortBy : null;
                    sortedData = orderBy(data, [func || sortFieldId], [sortMethod.toLocaleLowerCase()]);
                }
                if (restData.length) {
                    sortedData = __spreadArray$1(__spreadArray$1([], __read(sortedData), false), __read(restData), false);
                }
                // For frozen options
                _this.displayData = _this.getDisplayData(sortedData);
            });
        };
        return _this;
    }
    TableDataSet.prototype.processDataCfg = function (dataCfg) {
        return dataCfg;
    };
    TableDataSet.prototype.setDataCfg = function (dataCfg) {
        _super.prototype.setDataCfg.call(this, dataCfg);
        this.handleDimensionValueFilter();
        this.handleDimensionValuesSort();
    };
    /**
     * 返回顶部冻结行
     * @returns
     */
    TableDataSet.prototype.getStartFrozenRows = function (displayData) {
        var frozenRowCount = (this.spreadsheet.options || {}).frozenRowCount;
        if (!frozenRowCount) {
            return [];
        }
        return displayData.slice(0, frozenRowCount);
    };
    /**
     * 返回底部冻结行
     * @returns
     */
    TableDataSet.prototype.getEndFrozenRows = function (displayData) {
        var frozenTrailingRowCount = (this.spreadsheet.options || {}).frozenTrailingRowCount;
        if (!frozenTrailingRowCount) {
            return [];
        }
        return displayData.slice(-frozenTrailingRowCount);
    };
    TableDataSet.prototype.getDisplayData = function (displayData) {
        var startFrozenRows = this.getStartFrozenRows(displayData);
        var endFrozenRows = this.getEndFrozenRows(displayData);
        var data = displayData.slice(startFrozenRows.length || 0, -endFrozenRows.length || undefined);
        return __spreadArray$1(__spreadArray$1(__spreadArray$1([], __read(startFrozenRows), false), __read(data), false), __read(endFrozenRows), false);
    };
    TableDataSet.prototype.getDimensionValues = function () {
        return [];
    };
    TableDataSet.prototype.getCellData = function (_a) {
        var query = _a.query;
        if (this.displayData.length === 0 && query.rowIndex === 0) {
            return;
        }
        var rowData = this.displayData[query.rowIndex];
        if (!hasIn(query, 'field') || !isObject(rowData)) {
            return rowData;
        }
        return rowData[query.field];
    };
    TableDataSet.prototype.getMultiData = function (query) {
        if (!query) {
            return this.displayData;
        }
        var rowData = this.displayData[query.rowIndex]
            ? [this.displayData[query.rowIndex]]
            : this.displayData;
        if (!hasIn(query, 'field')) {
            return rowData;
        }
        return rowData.map(function (item) { return item[query.field]; });
    };
    TableDataSet.prototype.getRowData = function (cell) {
        return this.getCellData({
            query: {
                rowIndex: cell.rowIndex,
            },
        });
    };
    return TableDataSet;
}(BaseDataSet));

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
      : null) // invalid hex
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb$1(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb$1, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(")
      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
      + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(")
        + (this.h || 0) + ", "
        + (this.s || 0) * 100 + "%, "
        + (this.l || 0) * 100 + "%"
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

function constant(x) {
  return function() {
    return x;
  };
}

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
}

var rgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb(start, end) {
    var r = color((start = rgb$1(start)).r, (end = rgb$1(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1);

function numberArray(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function(t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

function interpolateArray(a, b) {
  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date(a, b) {
  var d = new Date;
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}

function number(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = value(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: number(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function value(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b)
      : (t === "number" ? number
      : t === "string" ? ((c = color(b)) ? (b = c, rgb) : string)
      : b instanceof color ? rgb
      : b instanceof Date ? date
      : isNumberArray(b) ? numberArray
      : Array.isArray(b) ? genericArray
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : number)(a, b);
}

var ScrollType;
(function (ScrollType) {
    ScrollType["ScrollChange"] = "scroll-change";
    ScrollType["ScrollEnd"] = "scroll-end";
})(ScrollType || (ScrollType = {}));
var ScrollBar = /** @class */ (function (_super) {
    __extends(ScrollBar, _super);
    function ScrollBar(scrollBarCfg) {
        var _this = _super.call(this, scrollBarCfg) || this;
        // 通过拖拽开始的事件是 mousedown 还是 touchstart 来决定是移动端还是 pc 端
        _this.isMobile = false;
        _this.eventHandlers = [];
        _this.scrollFrameId = null;
        _this.getCoordinatesName = function () {
            var from = _this.isHorizontal ? 'x1' : 'y1';
            var to = _this.isHorizontal ? 'x2' : 'y2';
            return { from: from, to: to };
        };
        /**
         * Antv/g 4.x 版本计算 bbox 有bug, 实际渲染的宽度会比给定的宽度大, 需要对其做修正
         * 详情: https://github.com/antvis/S2/pull/1566/files#diff-3f08348041906ddf1e4f094bfe2ac32b35ff668918d3fbb952e9227ae462cc08R52
         */
        _this.getCoordinatesWithBBoxExtraPadding = function () {
            var size = _this.theme.size;
            var startPadding = _this.isHorizontal ? 0 : size / 2;
            var endPadding = _this.isHorizontal ? size : size / 2;
            return {
                start: _this.thumbOffset + startPadding,
                end: _this.thumbOffset + _this.thumbLen - endPadding,
            };
        };
        /**
         * 当前滑块滑动的位置 0 ~ 1
         */
        _this.current = function () {
            var thumbRate = _this.thumbLen / _this.trackLen;
            var offsetRate = _this.thumbOffset / _this.trackLen;
            return offsetRate / (1 - thumbRate);
        };
        /**
         * 更新滑块长度
         * @param newThumbLen 新的滑道长度
         */
        _this.updateThumbLen = function (newThumbLen) {
            // 如果更新后的 thumbLen 没改变，无需执行后续逻辑
            if (_this.thumbLen === newThumbLen) {
                return;
            }
            _this.thumbLen = newThumbLen;
            var coordinate = _this.getCoordinatesName();
            _this.thumbShape.attr(coordinate.to, _this.thumbOffset + newThumbLen);
            _this.emitScrollChange((_this.thumbOffset / (_this.trackLen - _this.thumbLen)) *
                _this.scrollTargetMaxOffset, false);
        };
        /**
         * 更新滑块的 offset 值
         * @param offset
         */
        _this.updateThumbOffset = function (offset, emitScrollChange) {
            var _a;
            if (emitScrollChange === void 0) { emitScrollChange = true; }
            var newOffset = _this.validateRange(offset);
            var isNotChanged = _this.thumbOffset === newOffset && newOffset !== 0;
            if (isNotChanged) {
                return;
            }
            _this.thumbOffset = newOffset;
            var _b = _this.getCoordinatesName(), from = _b.from, to = _b.to;
            var _c = _this.getCoordinatesWithBBoxExtraPadding(), start = _c.start, end = _c.end;
            _this.thumbShape.attr((_a = {},
                _a[from] = start,
                _a[to] = end,
                _a));
            if (emitScrollChange) {
                _this.emitScrollChange((newOffset / (_this.trackLen - _this.thumbLen)) *
                    _this.scrollTargetMaxOffset, false);
            }
        };
        /**
         * 只更新位置属性，而不emit滚动事件
         * @param offset
         */
        _this.onlyUpdateThumbOffset = function (offset) {
            var _a;
            _this.updateThumbOffset(offset, false);
            (_a = _this.get('canvas')) === null || _a === void 0 ? void 0 : _a.draw();
        };
        _this.emitScrollChange = function (offset, updateThumbOffset) {
            if (updateThumbOffset === void 0) { updateThumbOffset = true; }
            cancelAnimationFrame(_this.scrollFrameId);
            _this.scrollFrameId = requestAnimationFrame(function () {
                _this.emit(ScrollType.ScrollChange, {
                    offset: offset,
                    updateThumbOffset: updateThumbOffset,
                });
            });
        };
        _this.addEventListener = function (target, eventType, callback) {
            target === null || target === void 0 ? void 0 : target.addEventListener(eventType, callback, false);
            return {
                remove: function () {
                    target === null || target === void 0 ? void 0 : target.removeEventListener(eventType, callback, false);
                },
            };
        };
        _this.addEvent = function (target, type, handler) {
            target.on(type, handler);
            _this.eventHandlers.push({ target: target, type: type, handler: handler });
        };
        _this.initScrollBar = function () {
            _this.scrollBarGroup = _this.createScrollBarGroup();
            _this.scrollBarGroup.move(_this.position.x, _this.position.y);
            _this.bindEvents();
        };
        // 创建 scrollBar 的 group
        _this.createScrollBarGroup = function () {
            var group = _this.addGroup({
                className: _this.isHorizontal ? 'horizontalBar' : 'verticalBar',
            });
            _this.trackShape = _this.createTrackShape(group);
            _this.thumbShape = _this.createThumbShape(group);
            return group;
        };
        // 创建滑道的 shape
        _this.createTrackShape = function (group) {
            var _a = _this.theme, _b = _a.lineCap, lineCap = _b === void 0 ? 'round' : _b, trackColor = _a.trackColor, size = _a.size;
            var baseAttrs = {
                lineWidth: size,
                stroke: trackColor,
                lineCap: lineCap,
            };
            if (_this.isHorizontal) {
                return group.addShape('line', {
                    attrs: __assign(__assign({}, baseAttrs), { x1: 0, y1: size / 2, x2: _this.trackLen, y2: size / 2 }),
                });
            }
            return group.addShape('line', {
                attrs: __assign(__assign({}, baseAttrs), { x1: size / 2, y1: 0, x2: size / 2, y2: _this.trackLen }),
            });
        };
        // 创建滑块的 shape
        _this.createThumbShape = function (group) {
            var _a = _this.theme, size = _a.size, _b = _a.lineCap, lineCap = _b === void 0 ? 'round' : _b, thumbColor = _a.thumbColor;
            var baseAttrs = {
                lineWidth: size,
                stroke: thumbColor,
                lineCap: lineCap,
                cursor: 'default',
            };
            var _c = _this.getCoordinatesWithBBoxExtraPadding(), start = _c.start, end = _c.end;
            if (_this.isHorizontal) {
                return group.addShape('line', {
                    attrs: __assign(__assign({}, baseAttrs), { x1: start, y1: size / 2, x2: end, y2: size / 2 }),
                });
            }
            return group.addShape('line', {
                attrs: __assign(__assign({}, baseAttrs), { x1: size / 2, y1: start, x2: size / 2, y2: end }),
            });
        };
        _this.bindEvents = function () {
            _this.on('mousedown', _this.onStartEvent(false));
            // 因为上层透视表交互 prevent 事件，导致 container 上的 mouseup 事件没有执行，
            // 整个拖拽过程没有 cancel 掉。
            _this.on('mouseup', _this.onMouseUp);
            _this.on('touchstart', _this.onStartEvent(true));
            _this.on('touchend', _this.onMouseUp);
            _this.trackShape.on('click', _this.onTrackClick);
            _this.thumbShape.on('mouseover', _this.onTrackMouseOver);
            _this.thumbShape.on('mouseout', _this.onTrackMouseOut);
        };
        _this.onStartEvent = function (isMobile) { return function (e) {
            e.preventDefault();
            _this.isMobile = isMobile;
            var event = (_this.isMobile ? get(e, 'touches.0', e) : e);
            var clientX = event.clientX, clientY = event.clientY;
            // 将开始的点记录下来
            _this.startPos = _this.isHorizontal ? clientX : clientY;
            _this.bindLaterEvent();
        }; };
        _this.bindLaterEvent = function () {
            var canvas = _this.get('canvas');
            var containerDOM = document.body;
            var events = [];
            if (_this.isMobile) {
                events = [
                    _this.addEventListener(containerDOM, 'touchmove', _this.onMouseMove),
                    _this.addEventListener(containerDOM, 'touchend', _this.onMouseUp),
                    _this.addEventListener(containerDOM, 'touchcancel', _this.onMouseUp),
                ];
                _this.addEvent(canvas, 'touchend', _this.onMouseUp);
                _this.addEvent(canvas, 'touchcancel', _this.onMouseUp);
            }
            else {
                events = [
                    _this.addEventListener(containerDOM, 'mousemove', _this.onMouseMove),
                    _this.addEventListener(containerDOM, 'mouseup', _this.onMouseUp),
                    // 为了保证划出 canvas containerDom 时还没触发 mouseup
                    _this.addEventListener(containerDOM, 'mouseleave', _this.onMouseUp),
                ];
                _this.addEvent(canvas, 'mouseup', _this.onMouseUp);
            }
            _this.clearEvents = function () {
                events.forEach(function (e) {
                    e === null || e === void 0 ? void 0 : e.remove();
                });
                forEach(_this.eventHandlers, function (eh) {
                    var _a;
                    (_a = eh.target) === null || _a === void 0 ? void 0 : _a.off(eh.type, eh.handler);
                });
                _this.eventHandlers.length = 0;
            };
        };
        // 点击滑道的事件回调,移动滑块位置
        _this.onTrackClick = function (event) {
            var offset = _this.isHorizontal
                ? event.x - _this.position.x - _this.thumbLen / 2
                : event.y - _this.position.y - _this.thumbLen / 2;
            var newOffset = _this.validateRange(offset);
            _this.updateThumbOffset(newOffset);
        };
        // 拖拽滑块的事件回调
        // 这里是 dom 原生事件，绑定在 dom 元素上的
        _this.onMouseMove = function (e) {
            e.preventDefault();
            var event = _this.isMobile ? get(e, 'touches.0', e) : e;
            var clientX = event.clientX;
            var clientY = event.clientY;
            // 鼠标松开的位置
            var endPos = _this.isHorizontal ? clientX : clientY;
            // 滑块需要移动的距离, 由于这里是对滑块监听，所以移动的距离就是 diffDis, 如果监听对象是 container dom，则需要算比例
            var diff = endPos - _this.startPos;
            // 更新 startPos
            _this.startPos = endPos;
            _this.updateThumbOffset(_this.thumbOffset + diff);
        };
        _this.onMouseUp = function (e) {
            var _a;
            _this.emit(ScrollType.ScrollEnd, {});
            e.preventDefault();
            (_a = _this.clearEvents) === null || _a === void 0 ? void 0 : _a.call(_this);
        };
        _this.onTrackMouseOver = function () {
            var _a = _this.theme, thumbHoverColor = _a.thumbHoverColor, hoverSize = _a.hoverSize;
            _this.thumbShape.attr('stroke', thumbHoverColor);
            _this.thumbShape.attr('lineWidth', hoverSize);
        };
        _this.onTrackMouseOut = function () {
            var _a = _this.theme, thumbColor = _a.thumbColor, size = _a.size;
            _this.thumbShape.attr('stroke', thumbColor);
            _this.thumbShape.attr('lineWidth', size);
        };
        // 判断滑块位置是否超出滑道区域
        _this.validateRange = function (offset) {
            var newOffset = offset;
            if (offset + _this.thumbLen > _this.trackLen) {
                newOffset = _this.trackLen - _this.thumbLen;
            }
            else if (offset + _this.thumbLen < _this.thumbLen) {
                newOffset = 0;
            }
            return newOffset;
        };
        var _a = scrollBarCfg.isHorizontal, isHorizontal = _a === void 0 ? false : _a, trackLen = scrollBarCfg.trackLen, thumbLen = scrollBarCfg.thumbLen, position = scrollBarCfg.position, _b = scrollBarCfg.thumbOffset, thumbOffset = _b === void 0 ? 0 : _b, theme = scrollBarCfg.theme, scrollTargetMaxOffset = scrollBarCfg.scrollTargetMaxOffset;
        _this.isHorizontal = isHorizontal;
        _this.thumbOffset = thumbOffset;
        _this.trackLen = trackLen;
        _this.thumbLen = thumbLen;
        _this.position = position;
        _this.theme = theme;
        _this.scrollTargetMaxOffset = scrollTargetMaxOffset;
        _this.initScrollBar();
        return _this;
    }
    return ScrollBar;
}(Group));

/**
 * 根据视窗高度计算需要展示的数据数组下标
 * 如有2个节点，每个高度30
 * @param heights 所有单元格的高度偏移量数组 [0, 30, 60]
 * @param minHeight 视窗高度起点
 * @param maxHeight 视窗高度终点
 * @returns
 */
var getIndexRangeWithOffsets = function (heights, minHeight, maxHeight) {
    if (maxHeight <= 0) {
        return {
            start: 0,
            end: 0,
        };
    }
    var yMin = findIndex(heights, function (height, idx) {
        var y = minHeight;
        return y >= height && y < heights[idx + 1];
    }, 0);
    yMin = Math.max(yMin, 0);
    var yMax = maxHeight === minHeight
        ? yMin
        : findIndex(heights, function (height, idx) {
            var y = maxHeight;
            return y > height && y <= heights[idx + 1];
        }, yMin);
    yMax = Math.min(yMax === -1 ? Infinity : yMax, heights.length - 2);
    return {
        start: yMin,
        end: yMax,
    };
};
var getAdjustedRowScrollX = function (rowHeaderScrollX, cornerBBox) {
    var width = cornerBBox.width, originalWidth = cornerBBox.originalWidth;
    var scrollX = Math.min(originalWidth - width, rowHeaderScrollX);
    if (scrollX < 0) {
        return 0;
    }
    return scrollX;
};
var getAdjustedScrollOffset = function (scrollY, contentLength, containerLength) {
    var offset = Math.min(contentLength - containerLength, scrollY);
    if (offset < 0) {
        return 0;
    }
    return offset;
};

var getAllChildCells = function (children, cellType) {
    if (children === void 0) { children = []; }
    if (isEmpty(children)) {
        return [];
    }
    var cells = [];
    children.forEach(function (child) {
        if (child instanceof cellType) {
            cells.push(child);
        }
        // panel group has child group
        if (child instanceof Group) {
            var groupChildren = child.getChildren();
            groupChildren.forEach(function (item) {
                if (item instanceof cellType) {
                    cells.push(item);
                }
            });
        }
    });
    return cells;
};

var getColsForGrid = function (colMin, colMax, colNodes) {
    return colNodes.slice(colMin, colMax + 1).map(function (item) { return item.x + item.width; });
};
var getRowsForGrid = function (rowMin, rowMax, viewCellHeights) {
    var rows = [];
    for (var index = rowMin; index < rowMax + 1; index++) {
        rows.push(viewCellHeights.getCellOffsetY(index + 1));
    }
    return rows;
};
var getFrozenRowsForGrid = function (rowMin, rowMax, startY, viewCellHeights) {
    var rows = getRowsForGrid(rowMin, rowMax, viewCellHeights);
    var baseY = viewCellHeights.getCellOffsetY(rowMin);
    return rows.map(function (r) { return r - baseY + startY; });
};

/**
 * 是否在 视窗索引范围中
 * @param x
 * @param y
 * @param indexes
 */
var isXYInRange = function (x, y, indexes) {
    var _a = __read(indexes, 4), xMin = _a[0], xMax = _a[1], yMin = _a[2], yMax = _a[3];
    return x >= xMin && x <= xMax && y >= yMin && y <= yMax;
};
var allIndexes = function (indexes) {
    var _a = __read(indexes, 4), minI = _a[0], maxI = _a[1], minJ = _a[2], maxJ = _a[3];
    var r = [];
    for (var i = minI; i <= maxI; i += 1) {
        for (var j = minJ; j <= maxJ; j += 1) {
            r.push([i, j]);
        }
    }
    return r;
};
/**
 * 计算两个 indexes 的 diff，获取 sourceIndexes -> targetIndexes 过程中新增的和移除的index
 * @param sourceIndexes
 * @param targetIndexes
 */
var diffIndexes = function (sourceIndexes, targetIndexes) {
    var add = [];
    var remove = [];
    // source 为空
    if (isEmpty(sourceIndexes)) {
        if (isEmpty(targetIndexes)) {
            // 都为空
            return { add: add, remove: remove };
        }
        // target 不为空
        return { add: allIndexes(targetIndexes), remove: remove };
    }
    // source 不为空，target 为空
    if (isEmpty(targetIndexes)) {
        return { add: add, remove: allIndexes(sourceIndexes) };
    }
    var _a = __read(sourceIndexes, 4), sourceMinI = _a[0], sourceMaxI = _a[1], sourceMinJ = _a[2], sourceMaxJ = _a[3];
    var _b = __read(targetIndexes, 4), targetMinI = _b[0], targetMaxI = _b[1], targetMinJ = _b[2], targetMaxJ = _b[3];
    // sourceIndexes -> targetIndexes 过程中，remove 掉的单元格
    for (var i = sourceMinI; i <= sourceMaxI; i++) {
        for (var j = sourceMinJ; j <= sourceMaxJ; j++) {
            if (!isXYInRange(i, j, targetIndexes)) {
                remove.push([i, j]);
            }
        }
    }
    // sourceIndexes -> targetIndexes 过程中，add 新增的单元格
    for (var i = targetMinI; i <= targetMaxI; i += 1) {
        for (var j = targetMinJ; j <= targetMaxJ; j += 1) {
            if (!isXYInRange(i, j, sourceIndexes)) {
                add.push([i, j]);
            }
        }
    }
    return {
        add: add,
        remove: remove,
    };
};
/**
 * 计算 Panel 下所有子 Group的 Indexes Diff
 */
var diffPanelIndexes = function (sourceIndexes, targetIndexes) {
    var allAdd = [];
    var allRemove = [];
    Object.keys(targetIndexes).forEach(function (key) {
        var _a = diffIndexes((sourceIndexes === null || sourceIndexes === void 0 ? void 0 : sourceIndexes[key]) || [], targetIndexes[key]), add = _a.add, remove = _a.remove;
        allAdd.push.apply(allAdd, __spreadArray$1([], __read(add), false));
        allRemove.push.apply(allRemove, __spreadArray$1([], __read(remove), false));
    });
    return {
        add: allAdd,
        remove: allRemove,
    };
};

// BBox相同数据结构，便于已有逻辑的直接复用
var BaseBBox = /** @class */ (function () {
    function BaseBBox(facet, autoCalculateBBoxWhenCreated) {
        if (autoCalculateBBoxWhenCreated === void 0) { autoCalculateBBoxWhenCreated = false; }
        this.x = 0;
        this.y = 0;
        this.minX = 0;
        this.minY = 0;
        this.maxX = 0;
        this.maxY = 0;
        this.width = 0;
        this.height = 0;
        // 记录未裁剪时的原始宽高
        this.originalWidth = 0;
        this.originalHeight = 0;
        // 视口宽高，数据少时可能小于 bbox 的宽高
        this.viewportHeight = 0;
        this.viewportWidth = 0;
        this.facet = facet;
        this.spreadsheet = facet.spreadsheet;
        this.layoutResult = facet.layoutResult;
        if (autoCalculateBBoxWhenCreated) {
            this.calculateBBox();
        }
    }
    return BaseBBox;
}());

var CornerBBox = /** @class */ (function (_super) {
    __extends(CornerBBox, _super);
    function CornerBBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CornerBBox.prototype.calculateBBox = function () {
        var width = this.getCornerBBoxWidth();
        var height = this.getCornerBBoxHeight();
        this.width = width;
        this.height = height;
        this.maxX = width;
        this.maxY = height;
    };
    CornerBBox.prototype.getCornerBBoxOriginalHeight = function () {
        var colsHierarchy = this.layoutResult.colsHierarchy;
        var colCfg = this.spreadsheet.options.style.colCfg;
        /**
         * 角头分为两部分, 一部分对应行头, 一部分对应列头, 角头的叶子节点对应行头节点, 以下极端情况让没有列头的时候也能 [行头对应的角头] 正常显示
         * 1. 只配置了 rows, 而 columns, values 都为空, 此时列头为空
         * 2. 配置了 rows, values, 此时存在一级列头 (即 EXTRA_FIELD 数值节点), 但是隐藏了数值 (hideMeasureColumn), 此时列头为空
         */
        if (!colsHierarchy.sampleNodeForLastLevel) {
            return colCfg === null || colCfg === void 0 ? void 0 : colCfg.height;
        }
        return Math.floor(colsHierarchy.height);
    };
    CornerBBox.prototype.getCornerBBoxHeight = function () {
        this.originalHeight = this.getCornerBBoxOriginalHeight();
        return this.originalHeight;
    };
    CornerBBox.prototype.getCornerBBoxWidth = function () {
        var rowsHierarchy = this.layoutResult.rowsHierarchy;
        this.originalWidth = Math.floor(rowsHierarchy.width + this.facet.getSeriesNumberWidth());
        // 在行头不固定时，无需对角头 BBox 进行裁剪
        if (this.spreadsheet.isScrollContainsRowHeader()) {
            return this.originalWidth;
        }
        return this.adjustCornerBBoxWidth();
    };
    CornerBBox.prototype.adjustCornerBBoxWidth = function () {
        var colsHierarchy = this.layoutResult.colsHierarchy;
        var canvasWidth = this.spreadsheet.options.width;
        var maxCornerBBoxWidth = canvasWidth * CORNER_MAX_WIDTH_RATIO;
        var colsHierarchyWidth = colsHierarchy === null || colsHierarchy === void 0 ? void 0 : colsHierarchy.width;
        var panelWidthWidthUnClippedCorner = canvasWidth - this.originalWidth;
        // 不需要裁剪条件：
        // 1. 角头的宽度没有超过最大的角头范围
        // 2. 列头的宽度没有超过在不裁剪角头前提下的剩余范围
        if (this.originalWidth <= maxCornerBBoxWidth ||
            colsHierarchyWidth <= panelWidthWidthUnClippedCorner) {
            return this.originalWidth;
        }
        var clippedWidth = 0;
        var maxPanelWidth = canvasWidth - maxCornerBBoxWidth;
        // 列头宽度超过了剩余宽度，但是小于 Panel 的最大宽度
        if (colsHierarchyWidth <= maxPanelWidth) {
            clippedWidth =
                this.originalWidth -
                    (colsHierarchyWidth - panelWidthWidthUnClippedCorner);
        }
        else {
            clippedWidth = maxCornerBBoxWidth;
        }
        return Math.floor(clippedWidth);
    };
    return CornerBBox;
}(BaseBBox));

var PanelBBox = /** @class */ (function (_super) {
    __extends(PanelBBox, _super);
    function PanelBBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PanelBBox.prototype.calculateBBox = function () {
        this.originalWidth = this.facet.getRealWidth();
        this.originalHeight = this.facet.getRealHeight();
        var cornerBBox = this.facet.cornerBBox;
        var cornerPosition = {
            x: Math.floor(cornerBBox.maxX),
            y: Math.floor(cornerBBox.maxY),
        };
        var scrollBarSize = this.spreadsheet.theme.scrollBar.size;
        var _a = this.spreadsheet.options, canvasWidth = _a.width, canvasHeight = _a.height;
        var panelWidth = Math.max(0, canvasWidth - cornerPosition.x);
        var panelHeight = Math.max(0, canvasHeight - cornerPosition.y - scrollBarSize);
        this.x = cornerPosition.x;
        this.y = cornerPosition.y;
        this.width = panelWidth;
        this.height = panelHeight;
        this.viewportHeight = Math.abs(Math.floor(Math.min(panelHeight, this.originalHeight)));
        this.viewportWidth = Math.abs(Math.floor(Math.min(panelWidth, this.originalWidth)));
        this.maxX = cornerPosition.x + this.viewportWidth;
        this.maxY = cornerPosition.y + this.viewportHeight;
        this.minX = cornerPosition.x;
        this.minY = cornerPosition.y;
        var _b = this.spreadsheet.options, frozenTrailingColCount = _b.frozenTrailingColCount, frozenTrailingRowCount = _b.frozenTrailingRowCount;
        if (frozenTrailingColCount > 0) {
            this.viewportWidth = this.width;
            this.maxX = cornerPosition.x + this.width;
        }
        if (frozenTrailingRowCount > 0) {
            this.viewportHeight = this.height;
            this.maxY = cornerPosition.y + this.height;
        }
    };
    return PanelBBox;
}(BaseBBox));

/**
 * New Base Header for all headers(cornerHeader, rowHeader, colHeader)
 * NOTE: Do not use this.cfg(which lays in group) to get header config,
 * use {@see headerConfig} instead
 */
var BaseHeader = /** @class */ (function (_super) {
    __extends(BaseHeader, _super);
    function BaseHeader(cfg) {
        var _this = _super.call(this, cfg) || this;
        /**
         * Check whether header cell in viewPort
         * @param gridPos
         * @param gridSize
         * @param viewportPos
         * @param viewportSize
         */
        _this.isHeaderCellInViewport = function (gridPos, gridSize, viewportPos, viewportSize) {
            return (gridPos + gridSize >= viewportPos && viewportPos + viewportSize >= gridPos);
        };
        _this.headerConfig = cfg;
        return _this;
    }
    BaseHeader.prototype.getConfig = function () {
        return this.headerConfig;
    };
    /**
     * 清空热区，为重绘做准备，防止热区重复渲染
     * @param type 当前重绘的header类型
     */
    BaseHeader.prototype.clearResizeAreaGroup = function (type) {
        var foregroundGroup = this.get('parent');
        var resizerGroup = foregroundGroup === null || foregroundGroup === void 0 ? void 0 : foregroundGroup.findById(type);
        resizerGroup === null || resizerGroup === void 0 ? void 0 : resizerGroup.clear();
    };
    // start render header
    BaseHeader.prototype.render = function (type) {
        // clear resize group
        this.clearResizeAreaGroup(type);
        // clear self first
        this.clear();
        // draw by new data
        this.layout();
        // offset group
        this.offset();
        // clip group
        this.clip();
    };
    /**
     * Scroll header group's x,y
     * @param scrollX hScrollBar horizontal offset
     * @param scrollY hScrollBar vertical offset
     * @param type
     */
    BaseHeader.prototype.onScrollXY = function (scrollX, scrollY, type) {
        this.headerConfig.scrollX = scrollX;
        this.headerConfig.scrollY = scrollY;
        this.render(type);
    };
    /**
     * Only call when hRowScrollBar scrolls
     * @param rowHeaderScrollX  hRowScrollbar horizontal offset
     * @param type
     */
    BaseHeader.prototype.onRowScrollX = function (rowHeaderScrollX, type) {
        this.headerConfig.scrollX = rowHeaderScrollX;
        this.render(type);
    };
    BaseHeader.prototype.clear = function () {
        _super.prototype.clear.call(this);
    };
    return BaseHeader;
}(Group));

/**
 * Column Header for SpreadSheet
 */
var ColHeader = /** @class */ (function (_super) {
    __extends(ColHeader, _super);
    function ColHeader(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.scrollGroup = _this.addGroup({
            name: KEY_GROUP_COL_SCROLL,
            zIndex: FRONT_GROUND_GROUP_SCROLL_Z_INDEX,
        });
        return _this;
    }
    /**
     * Make colHeader scroll with hScrollBar
     * @param scrollX horizontal offset
     * @param cornerWidth only has real meaning when scroll contains rowCell
     * @param type
     */
    ColHeader.prototype.onColScroll = function (scrollX, type) {
        if (this.headerConfig.scrollX !== scrollX) {
            this.headerConfig.scrollX = scrollX;
            this.render(type);
        }
    };
    ColHeader.prototype.clip = function () {
        var _a = this.headerConfig, width = _a.width, height = _a.height, scrollX = _a.scrollX, spreadsheet = _a.spreadsheet;
        var isFrozenRowHeader = spreadsheet.isFrozenRowHeader();
        this.scrollGroup.setClip({
            type: 'rect',
            attrs: {
                x: isFrozenRowHeader ? scrollX : 0,
                y: 0,
                width: isFrozenRowHeader ? width : width + scrollX,
                height: height,
            },
        });
    };
    ColHeader.prototype.clear = function () {
        var _a, _b;
        (_a = this.scrollGroup) === null || _a === void 0 ? void 0 : _a.clear();
        (_b = this.background) === null || _b === void 0 ? void 0 : _b.remove(true);
    };
    ColHeader.prototype.getCellInstance = function (item, spreadsheet, headerConfig) {
        return new ColCell(item, spreadsheet, headerConfig);
    };
    ColHeader.prototype.getCellGroup = function (node) {
        return this.scrollGroup;
    };
    ColHeader.prototype.isColCellInRect = function (node) {
        var _a = this.headerConfig, spreadsheet = _a.spreadsheet, cornerWidth = _a.cornerWidth, width = _a.width, scrollX = _a.scrollX;
        return (
        // don't care about scrollY, because there is only freeze col-header exist
        width + scrollX > node.x &&
            scrollX - (spreadsheet.isFrozenRowHeader() ? 0 : cornerWidth) <
                node.x + node.width);
    };
    ColHeader.prototype.layout = function () {
        var _this = this;
        var _a = this.headerConfig, data = _a.data, spreadsheet = _a.spreadsheet;
        var colCell = spreadsheet.options.colCell;
        forEach(data, function (node) {
            var item = node;
            if (_this.isColCellInRect(item)) {
                var cell = (colCell === null || colCell === void 0 ? void 0 : colCell(item, spreadsheet, _this.headerConfig)) ||
                    _this.getCellInstance(item, spreadsheet, _this.headerConfig);
                item.belongsCell = cell;
                var group = _this.getCellGroup(item);
                group.add(cell);
            }
        });
    };
    ColHeader.prototype.offset = function () {
        var _a = this.headerConfig, position = _a.position, scrollX = _a.scrollX;
        // 暂时不考虑移动y
        translateGroupX(this.scrollGroup, position.x - scrollX);
    };
    return ColHeader;
}(BaseHeader));

/**
 * Corner Header for SpreadSheet
 */
var CornerHeader = /** @class */ (function (_super) {
    __extends(CornerHeader, _super);
    function CornerHeader(cfg) {
        return _super.call(this, cfg) || this;
    }
    /**
     * Get corner Header by config
     * @param panelBBox
     * @param cornerBBox
     * @param seriesNumberWidth
     * @param cfg
     * @param layoutResult
     * @param s2 spreadsheet
     */
    CornerHeader.getCornerHeader = function (panelBBox, cornerBBox, seriesNumberWidth, cfg, layoutResult, s2) {
        var width = panelBBox.width, height = panelBBox.height;
        var cornerOriginalWidth = cornerBBox.originalWidth, cornerOriginalHeight = cornerBBox.originalHeight, cornerWidth = cornerBBox.width, cornerHeight = cornerBBox.height;
        var cornerNodes = this.getCornerNodes({ x: cornerBBox.x, y: cornerBBox.y }, cornerOriginalWidth, cornerOriginalHeight, cfg.rows, cfg.columns, layoutResult.rowsHierarchy, layoutResult.colsHierarchy, cfg.dataSet, seriesNumberWidth, s2);
        return new CornerHeader({
            data: cornerNodes,
            position: { x: cornerBBox.x, y: cornerBBox.y },
            width: cornerWidth,
            height: cornerHeight,
            originalHeight: cornerOriginalHeight,
            originalWidth: cornerOriginalWidth,
            viewportWidth: width,
            viewportHeight: height,
            hierarchyType: cfg.hierarchyType,
            hierarchyCollapse: cfg.hierarchyCollapse,
            rows: cfg.rows,
            columns: cfg.columns,
            seriesNumberWidth: seriesNumberWidth,
            spreadsheet: s2,
        });
    };
    CornerHeader.getCornerNodes = function (position, width, height, rows, columns, rowsHierarchy, colsHierarchy, dataSet, seriesNumberWidth, s2) {
        var _a, _b, _c;
        var cornerNodes = [];
        var colCfg = s2.options.style.colCfg;
        var leafNode = colsHierarchy === null || colsHierarchy === void 0 ? void 0 : colsHierarchy.sampleNodeForLastLevel;
        var cornerNodeY = (_a = leafNode === null || leafNode === void 0 ? void 0 : leafNode.y) !== null && _a !== void 0 ? _a : 0;
        var cornerNodeHeight = (_c = (_b = leafNode === null || leafNode === void 0 ? void 0 : leafNode.height) !== null && _b !== void 0 ? _b : colCfg === null || colCfg === void 0 ? void 0 : colCfg.height) !== null && _c !== void 0 ? _c : 0;
        // check if show series number node
        if (seriesNumberWidth) {
            var sNode = new Node$1({
                id: '',
                key: KEY_SERIES_NUMBER_NODE,
                value: i18n('序号'),
            });
            sNode.x = position === null || position === void 0 ? void 0 : position.x;
            // different type different y
            sNode.y = cornerNodeY;
            sNode.width = seriesNumberWidth;
            // different type different height
            sNode.height = cornerNodeHeight;
            sNode.isPivotMode = true;
            sNode.spreadsheet = s2;
            sNode.cornerType = CornerNodeType.Series;
            cornerNodes.push(sNode);
        }
        // spreadsheet type tree mode
        if (s2.isHierarchyTreeType()) {
            var cornerText = this.getTreeCornerText(s2);
            var cNode = new Node$1({
                key: '',
                id: cornerText,
                value: cornerText,
            });
            cNode.x = position.x + seriesNumberWidth;
            cNode.y = cornerNodeY;
            // cNode should subtract series width
            cNode.width = width - seriesNumberWidth;
            cNode.height = cornerNodeHeight;
            cNode.seriesNumberWidth = seriesNumberWidth;
            cNode.isPivotMode = true;
            cNode.spreadsheet = s2;
            cNode.cornerType = CornerNodeType.Row;
            cornerNodes.push(cNode);
        }
        else {
            // spreadsheet type grid mode
            rowsHierarchy.sampleNodesForAllLevels.forEach(function (rowNode) {
                var field = rows[rowNode.level];
                var cNode = new Node$1({
                    key: field,
                    id: field,
                    value: dataSet.getFieldName(field),
                });
                cNode.x = rowNode.x + seriesNumberWidth;
                cNode.y = cornerNodeY;
                cNode.width = rowNode.width;
                cNode.height = cornerNodeHeight;
                cNode.field = field;
                cNode.isPivotMode = true;
                cNode.cornerType = CornerNodeType.Row;
                cNode.spreadsheet = s2;
                cornerNodes.push(cNode);
            });
        }
        colsHierarchy.sampleNodesForAllLevels.forEach(function (colNode) {
            // 列头最后一个层级的位置为行头 label 标识，需要过滤
            if (colNode.level < colsHierarchy.maxLevel) {
                var field = columns[colNode.level];
                var cNode = new Node$1({
                    key: field,
                    id: field,
                    value: dataSet.getFieldName(field),
                });
                cNode.x = position.x;
                cNode.y = colNode.y;
                cNode.width = width;
                cNode.height = colNode.height;
                cNode.field = field;
                cNode.isPivotMode = true;
                cNode.cornerType = CornerNodeType.Col;
                cNode.spreadsheet = s2;
                cornerNodes.push(cNode);
            }
        });
        return cornerNodes;
    };
    CornerHeader.getTreeCornerText = function (s2) {
        var _a = s2.dataSet.fields.rows, rows = _a === void 0 ? [] : _a;
        var defaultCornerText = s2.options.cornerText;
        if (defaultCornerText) {
            return defaultCornerText;
        }
        var drillDownFieldInLevel = s2.store.get('drillDownFieldInLevel', []);
        var drillFields = drillDownFieldInLevel.map(function (field) { return field.drillField; });
        // 角头过滤下钻的维度
        var treeLabel = rows
            .filter(function (value) { return !includes(drillFields, value); })
            .map(function (field) { return s2.dataSet.getFieldName(field); })
            .join('/');
        return treeLabel;
    };
    /**
     *  Make cornerHeader scroll with hScrollBar
     * @param scrollX
     */
    CornerHeader.prototype.onCorScroll = function (scrollX, type) {
        this.headerConfig.scrollX = scrollX;
        this.render(type);
    };
    CornerHeader.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    CornerHeader.prototype.layout = function () {
        this.renderCells();
    };
    CornerHeader.prototype.renderCells = function () {
        var _this = this;
        var _a, _b, _c, _d;
        var _e = this.headerConfig, data = _e.data, spreadsheet = _e.spreadsheet;
        var cornerHeader = (_b = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _a === void 0 ? void 0 : _a.cfg) === null || _b === void 0 ? void 0 : _b.cornerHeader;
        var cornerCell = (_d = (_c = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _c === void 0 ? void 0 : _c.cfg) === null || _d === void 0 ? void 0 : _d.cornerCell;
        if (cornerHeader) {
            cornerHeader(this, spreadsheet, this.headerConfig);
            return;
        }
        data.forEach(function (node) {
            var cell;
            if (cornerCell) {
                cell = cornerCell(node, _this.headerConfig.spreadsheet, _this.headerConfig);
            }
            if (isEmpty(cell)) {
                cell = new CornerCell(node, _this.headerConfig.spreadsheet, _this.headerConfig);
            }
            _this.add(cell);
        });
    };
    CornerHeader.prototype.offset = function () {
        var scrollX = this.headerConfig.scrollX;
        translateGroupX(this, -scrollX);
    };
    CornerHeader.prototype.clip = function () {
        var _a = this.headerConfig, width = _a.width, height = _a.height, scrollX = _a.scrollX;
        this.setClip({
            type: 'rect',
            attrs: {
                x: scrollX,
                y: 0,
                width: width,
                height: height,
            },
        });
    };
    CornerHeader.prototype.getNodes = function () {
        return this.headerConfig.data || [];
    };
    return CornerHeader;
}(BaseHeader));

var Frame = /** @class */ (function (_super) {
    __extends(Frame, _super);
    function Frame(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.render();
        return _this;
    }
    Frame.prototype.layout = function () {
        // corner底部的横线条
        this.addCornerBottomBorder();
        // corner右边的竖线条
        this.addCornerRightBorder();
        // 一级纵向分割线两侧的shadow
        this.addSplitLineShadow();
    };
    /**
     * 渲染
     */
    Frame.prototype.render = function () {
        this.clear();
        this.layout();
    };
    Frame.prototype.onBorderScroll = function (scrollX) {
        this.cfg.scrollX = scrollX;
        var position = this.cfg.position;
        translateGroup(this, position.x - scrollX, 0);
        this.render();
    };
    Frame.prototype.onChangeShadowVisibility = function (scrollX, maxScrollX) {
        this.cfg.showViewportLeftShadow = scrollX > 0;
        // baseFacet#renderHScrollBar render condition
        this.cfg.showViewportRightShadow =
            Math.floor(scrollX) < Math.floor(maxScrollX);
        this.render();
    };
    Frame.prototype.addCornerRightBorder = function () {
        var _a;
        var cfg = this.cfg;
        // 是否是透视表
        var isPivotMode = cfg.isPivotMode;
        // 明细表啥也不要
        if (!isPivotMode) {
            return;
        }
        var width = cfg.width, height = cfg.height, viewportHeight = cfg.viewportHeight, position = cfg.position, spreadsheet = cfg.spreadsheet;
        var splitLine = (_a = spreadsheet.theme) === null || _a === void 0 ? void 0 : _a.splitLine;
        var x = position.x + width;
        var y1 = position.y;
        var y2 = position.y + height + viewportHeight;
        this.addShape('line', {
            attrs: {
                x1: x,
                y1: y1,
                x2: x,
                y2: y2,
                stroke: splitLine.verticalBorderColor,
                lineWidth: splitLine.verticalBorderWidth,
                opacity: splitLine.verticalBorderColorOpacity,
                lineDash: splitLine.borderDash,
            },
        });
    };
    Frame.prototype.addCornerBottomBorder = function () {
        var _a;
        var cfg = this.cfg;
        var width = cfg.width, height = cfg.height, viewportWidth = cfg.viewportWidth, position = cfg.position, scrollX = cfg.scrollX, scrollContainsRowHeader = cfg.scrollContainsRowHeader, spreadsheet = cfg.spreadsheet;
        var splitLine = (_a = spreadsheet.theme) === null || _a === void 0 ? void 0 : _a.splitLine;
        var x1 = position.x;
        var x2 = x1 + width + viewportWidth + (scrollContainsRowHeader ? scrollX : 0);
        var y = position.y + height - 1;
        this.addShape('line', {
            attrs: {
                x1: x1,
                y1: y,
                x2: x2,
                y2: y,
                stroke: splitLine.horizontalBorderColor,
                lineWidth: splitLine.horizontalBorderWidth,
                opacity: splitLine.horizontalBorderColorOpacity,
                lineDash: splitLine.borderDash,
            },
        });
    };
    Frame.prototype.addSplitLineShadow = function () {
        var _a;
        var cfg = this.cfg;
        var isPivotMode = cfg.isPivotMode, spreadsheet = cfg.spreadsheet;
        var splitLine = (_a = spreadsheet.theme) === null || _a === void 0 ? void 0 : _a.splitLine;
        if (!isPivotMode ||
            !splitLine.showShadow ||
            !spreadsheet.isFrozenRowHeader()) {
            return;
        }
        // do render...
        this.addSplitLineLeftShadow();
        this.addSplitLineRightShadow();
    };
    Frame.prototype.addSplitLineLeftShadow = function () {
        var _a, _b, _c;
        if (!this.cfg.showViewportLeftShadow) {
            return;
        }
        var _d = this.cfg, width = _d.width, height = _d.height, viewportHeight = _d.viewportHeight, position = _d.position, spreadsheet = _d.spreadsheet;
        var splitLine = (_a = spreadsheet.theme) === null || _a === void 0 ? void 0 : _a.splitLine;
        var x = position.x + width;
        var y = position.y;
        this.addShape('rect', {
            attrs: {
                x: x,
                y: y,
                width: splitLine.shadowWidth,
                height: viewportHeight + height,
                fill: "l (0) 0:".concat((_b = splitLine.shadowColors) === null || _b === void 0 ? void 0 : _b.left, " 1:").concat((_c = splitLine.shadowColors) === null || _c === void 0 ? void 0 : _c.right),
            },
        });
    };
    Frame.prototype.addSplitLineRightShadow = function () {
        var _a, _b, _c;
        if (!this.cfg.showViewportRightShadow) {
            return;
        }
        var _d = this.cfg, width = _d.width, height = _d.height, viewportHeight = _d.viewportHeight, viewportWidth = _d.viewportWidth, position = _d.position, spreadsheet = _d.spreadsheet;
        var splitLine = (_a = spreadsheet.theme) === null || _a === void 0 ? void 0 : _a.splitLine;
        var x = position.x + width + viewportWidth - splitLine.shadowWidth;
        var y = position.y;
        this.addShape('rect', {
            attrs: {
                x: x,
                y: y,
                width: splitLine.shadowWidth,
                height: viewportHeight + height,
                fill: "l (0) 0:".concat((_b = splitLine.shadowColors) === null || _b === void 0 ? void 0 : _b.right, " 1:").concat((_c = splitLine.shadowColors) === null || _c === void 0 ? void 0 : _c.left),
            },
        });
    };
    return Frame;
}(Group));

/**
 * Row Header for SpreadSheet
 */
var RowHeader = /** @class */ (function (_super) {
    __extends(RowHeader, _super);
    function RowHeader(cfg) {
        return _super.call(this, cfg) || this;
    }
    RowHeader.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.gm) {
            this.gm.destroy();
        }
    };
    // row'cell only show when visible
    RowHeader.prototype.rowCellInRect = function (item) {
        var _a = this.headerConfig, width = _a.width, viewportHeight = _a.viewportHeight, seriesNumberWidth = _a.seriesNumberWidth, scrollY = _a.scrollY, scrollX = _a.scrollX;
        return (viewportHeight + scrollY > item.y && // bottom
            scrollY < item.y + item.height && // top
            width - seriesNumberWidth + scrollX > item.x && // left
            scrollX - seriesNumberWidth < item.x + item.width); // right
    };
    RowHeader.prototype.createCellInstance = function (node) {
        return new RowCell(node, this.headerConfig.spreadsheet, this.headerConfig);
    };
    RowHeader.prototype.getCellGroup = function (node) {
        return this;
    };
    RowHeader.prototype.getCustomRowCell = function () {
        var _a, _b;
        var spreadsheet = this.headerConfig.spreadsheet;
        return (_b = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _a === void 0 ? void 0 : _a.cfg) === null || _b === void 0 ? void 0 : _b.rowCell;
    };
    RowHeader.prototype.layout = function () {
        var _this = this;
        var _a = this.headerConfig, data = _a.data, spreadsheet = _a.spreadsheet;
        var rowCell = this.getCustomRowCell();
        forEach(data, function (item) {
            if (_this.rowCellInRect(item) && item.height !== 0) {
                var cell = void 0;
                // 首先由外部控制UI展示
                if (rowCell) {
                    cell = rowCell(item, spreadsheet, _this.headerConfig);
                }
                // 如果外部没处理，就用默认的
                if (isEmpty(cell)) {
                    if (spreadsheet.isPivotMode()) {
                        cell = _this.createCellInstance(item);
                    }
                }
                item.belongsCell = cell;
                var group = _this.getCellGroup(item);
                group.add(cell);
            }
        });
    };
    RowHeader.prototype.offset = function () {
        var _a = this.headerConfig, scrollX = _a.scrollX, scrollY = _a.scrollY, position = _a.position, seriesNumberWidth = _a.seriesNumberWidth;
        // 向右多移动的seriesNumberWidth是序号的宽度
        translateGroup(this, position.x - scrollX + seriesNumberWidth, position.y - scrollY);
    };
    RowHeader.prototype.clip = function () {
        var _a = this.headerConfig, width = _a.width, viewportHeight = _a.viewportHeight, scrollX = _a.scrollX, scrollY = _a.scrollY, seriesNumberWidth = _a.seriesNumberWidth;
        this.setClip({
            type: 'rect',
            attrs: {
                // 由于多移动了seriesNumberWidth跨度，所有需要向左切。 - 是反向剪裁（右 -> 左）
                x: scrollX - seriesNumberWidth,
                y: scrollY,
                width: width,
                height: viewportHeight,
            },
        });
    };
    return RowHeader;
}(BaseHeader));

var BaseFrozenRowHeader = /** @class */ (function (_super) {
    __extends(BaseFrozenRowHeader, _super);
    function BaseFrozenRowHeader(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.scrollGroup = _this.addGroup({
            name: KEY_GROUP_ROW_SCROLL,
            zIndex: FRONT_GROUND_GROUP_SCROLL_Z_INDEX,
        });
        _this.frozenHeadGroup = _this.addGroup({
            name: KEY_GROUP_ROW_HEADER_FROZEN,
            zIndex: FRONT_GROUND_GROUP_FROZEN_Z_INDEX,
        });
        var _a = _this.headerConfig, position = _a.position, seriesNumberWidth = _a.seriesNumberWidth;
        translateGroup(_this.frozenHeadGroup, position.x + seriesNumberWidth, position.y);
        return _this;
    }
    BaseFrozenRowHeader.prototype.rowCellInRectXDir = function (item) {
        var _a = this.headerConfig, width = _a.width, scrollX = _a.scrollX, seriesNumberWidth = _a.seriesNumberWidth;
        var itemX = item.x + seriesNumberWidth;
        return width + scrollX > itemX && scrollX < itemX + item.width;
    };
    BaseFrozenRowHeader.prototype.rowCellInRectYDir = function (item) {
        var _a = this.headerConfig, viewportHeight = _a.viewportHeight, scrollY = _a.scrollY;
        var itemY = item.y - this.getFrozenFirstRowHeight();
        return viewportHeight + scrollY > itemY && scrollY < itemY + item.height;
    };
    BaseFrozenRowHeader.prototype.rowCellInRect = function (item) {
        var visibleInXDir = this.rowCellInRectXDir(item);
        if (this.isFrozenRow(item)) {
            return visibleInXDir;
        }
        return visibleInXDir && this.rowCellInRectYDir(item);
    };
    BaseFrozenRowHeader.prototype.getCellGroup = function (item) {
        if (this.isFrozenRow(item)) {
            return this.frozenHeadGroup;
        }
        return this.scrollGroup;
    };
    BaseFrozenRowHeader.prototype.offset = function () {
        var _a = this.headerConfig, scrollX = _a.scrollX, scrollY = _a.scrollY, position = _a.position, seriesNumberWidth = _a.seriesNumberWidth;
        // 向右多移动的seriesNumberWidth是序号的宽度
        var translateX = position.x - scrollX + seriesNumberWidth;
        translateGroup(this.scrollGroup, translateX, position.y - scrollY);
        translateGroupX(this.frozenHeadGroup, translateX);
    };
    BaseFrozenRowHeader.prototype.clip = function () {
        var _a = this.headerConfig, width = _a.width, viewportHeight = _a.viewportHeight, scrollX = _a.scrollX, scrollY = _a.scrollY, seriesNumberWidth = _a.seriesNumberWidth;
        // 由于多移动了seriesNumberWidth跨度，所有需要向左切。 - 是反向剪裁（右 -> 左）
        var clipX = scrollX - seriesNumberWidth;
        this.scrollGroup.setClip({
            type: 'rect',
            attrs: {
                x: clipX,
                y: scrollY + this.getFrozenFirstRowHeight(),
                width: width,
                height: viewportHeight,
            },
        });
        this.frozenHeadGroup.setClip({
            type: 'rect',
            attrs: {
                x: clipX,
                y: 0,
                width: this.headerConfig.width,
                height: this.getFrozenFirstRowHeight(),
            },
        });
    };
    BaseFrozenRowHeader.prototype.isFrozenRow = function (node) {
        var _a;
        var spreadsheet = this.headerConfig.spreadsheet;
        var facet = spreadsheet.facet;
        var frozenRowCount = getFrozenRowCfgPivot(spreadsheet.options, (_a = facet.layoutResult) === null || _a === void 0 ? void 0 : _a.rowNodes).frozenRowCount;
        return (frozenRowCount > 0 && node.rowIndex >= 0 && node.rowIndex < frozenRowCount);
    };
    BaseFrozenRowHeader.prototype.getFrozenFirstRowHeight = function () {
        var _a;
        var spreadsheet = this.headerConfig.spreadsheet;
        var facet = spreadsheet.facet;
        var frozenRowHeight = getFrozenRowCfgPivot(spreadsheet.options, (_a = facet.layoutResult) === null || _a === void 0 ? void 0 : _a.rowNodes).frozenRowHeight;
        return frozenRowHeight;
    };
    BaseFrozenRowHeader.prototype.clear = function () {
        this.frozenHeadGroup.clear();
        this.scrollGroup.clear();
    };
    return BaseFrozenRowHeader;
}(RowHeader));

var SeriesNumberHeader = /** @class */ (function (_super) {
    __extends(SeriesNumberHeader, _super);
    function SeriesNumberHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get seriesNumber header by config
     * @param viewportBBox
     * @param seriesNumberWidth
     * @param leafNodes
     * @param spreadsheet
     * @param cornerWidth
     */
    SeriesNumberHeader.getSeriesNumberHeader = function (_a) {
        var _b;
        var viewportBBox = _a.viewportBBox, seriesNumberWidth = _a.seriesNumberWidth, leafNodes = _a.leafNodes, spreadsheet = _a.spreadsheet, cornerWidth = _a.cornerWidth;
        var height = viewportBBox.height, viewportHeight = viewportBBox.viewportHeight;
        var seriesNodes = [];
        var isHierarchyTreeType = spreadsheet.isHierarchyTreeType();
        leafNodes.forEach(function (node) {
            // 1、is spreadsheet and node is not total(grand or sub)
            // 2、is listSheet
            var sNode = new Node$1({
                id: '',
                key: '',
                value: "".concat(seriesNodes.length + 1),
            });
            sNode.x = node.x;
            sNode.y = node.y;
            sNode.height = isHierarchyTreeType
                ? node.getTotalHeightForTreeHierarchy()
                : node.height;
            sNode.width = seriesNumberWidth;
            sNode.rowIndex = node.rowIndex;
            sNode.spreadsheet = spreadsheet;
            sNode.isLeaf = true;
            seriesNodes.push(sNode);
        });
        var facet = spreadsheet.facet;
        var _c = getFrozenRowCfgPivot(spreadsheet.options, (_b = facet.layoutResult) === null || _b === void 0 ? void 0 : _b.rowNodes), frozenRowCount = _c.frozenRowCount, frozenRowHeight = _c.frozenRowHeight;
        var enableFrozenFirstRow = !!frozenRowCount;
        return new SeriesNumberHeader({
            width: cornerWidth,
            height: height,
            viewportWidth: cornerWidth,
            viewportHeight: enableFrozenFirstRow
                ? viewportHeight - frozenRowHeight
                : viewportHeight,
            position: { x: 0, y: viewportBBox.y },
            data: seriesNodes,
            spreadsheet: spreadsheet,
            // There are no other lines before the serial number row
            seriesNumberWidth: 0,
            hierarchyType: spreadsheet.options.hierarchyType,
            linkFields: [],
        });
    };
    SeriesNumberHeader.prototype.createCellInstance = function (node) {
        var frozenRow = this.isFrozenRow(node);
        return new SeriesNumberCell(node, this.headerConfig.spreadsheet, __assign(__assign({}, this.headerConfig), { scrollY: frozenRow ? 0 : this.headerConfig.scrollY }), frozenRow);
    };
    SeriesNumberHeader.prototype.getCustomRowCell = function () {
        return null;
    };
    return SeriesNumberHeader;
}(BaseFrozenRowHeader));

var PivotRowHeader = /** @class */ (function (_super) {
    __extends(PivotRowHeader, _super);
    function PivotRowHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PivotRowHeader.prototype.createCellInstance = function (node) {
        var _a = this.headerConfig, spreadsheet = _a.spreadsheet, scrollY = _a.scrollY;
        var frozenRow = this.isFrozenRow(node);
        return new RowCell(node, spreadsheet, __assign(__assign({}, this.headerConfig), { scrollY: frozenRow ? 0 : scrollY }), frozenRow);
    };
    return PivotRowHeader;
}(BaseFrozenRowHeader));

var BaseFacet = /** @class */ (function () {
    function BaseFacet(cfg) {
        var _this = this;
        this.scrollFrameId = null;
        this.hideScrollBar = function () {
            var _a, _b, _c;
            (_a = _this.hRowScrollBar) === null || _a === void 0 ? void 0 : _a.hide();
            (_b = _this.hScrollBar) === null || _b === void 0 ? void 0 : _b.hide();
            (_c = _this.vScrollBar) === null || _c === void 0 ? void 0 : _c.hide();
        };
        this.delayHideScrollBar = debounce(this.hideScrollBar, 1000);
        this.delayHideScrollbarOnMobile = function () {
            if (isMobile()) {
                _this.delayHideScrollBar();
            }
        };
        this.showVerticalScrollBar = function () {
            var _a;
            (_a = _this.vScrollBar) === null || _a === void 0 ? void 0 : _a.show();
        };
        this.showHorizontalScrollBar = function () {
            var _a, _b;
            (_a = _this.hRowScrollBar) === null || _a === void 0 ? void 0 : _a.show();
            (_b = _this.hScrollBar) === null || _b === void 0 ? void 0 : _b.show();
        };
        this.onContainerWheelForMobileCompatibility = function () {
            var canvas = _this.spreadsheet.getCanvasElement();
            var startY;
            var endY;
            canvas.addEventListener('touchstart', function (event) {
                startY = event.touches[0].clientY;
            });
            canvas.addEventListener('touchend', function (event) {
                endY = event.changedTouches[0].clientY;
                if (endY < startY) {
                    _this.scrollDirection = ScrollDirection.SCROLL_UP;
                }
                else if (endY > startY) {
                    _this.scrollDirection = ScrollDirection.SCROLL_DOWN;
                }
            });
        };
        this.onContainerWheel = function () {
            _this.onContainerWheelForPc();
            _this.onContainerWheelForMobile();
        };
        // g-gesture@1.0.1 手指快速往上滚动时, deltaY 有时会为负数, 导致向下滚动时然后回弹, 看起来就像表格在抖动, 需要判断滚动方向, 修正一下.
        this.getMobileWheelDeltaY = function (deltaY) {
            if (_this.scrollDirection === ScrollDirection.SCROLL_UP) {
                return Math.max(0, deltaY);
            }
            if (_this.scrollDirection === ScrollDirection.SCROLL_DOWN) {
                return Math.min(0, deltaY);
            }
            return deltaY;
        };
        this.onContainerWheelForPc = function () {
            var canvas = _this.spreadsheet.getCanvasElement();
            canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('wheel', _this.onWheel);
        };
        this.onContainerWheelForMobile = function () {
            _this.mobileWheel = new Wheel(_this.spreadsheet.container);
            _this.mobileWheel.on('wheel', function (ev) {
                _this.spreadsheet.hideTooltip();
                var originEvent = ev.event;
                var deltaX = ev.deltaX, defaultDeltaY = ev.deltaY, x = ev.x, y = ev.y;
                var deltaY = _this.getMobileWheelDeltaY(defaultDeltaY);
                _this.onWheel(__assign(__assign({}, originEvent), { deltaX: deltaX, deltaY: deltaY, offsetX: x, offsetY: y }));
            });
            _this.onContainerWheelForMobileCompatibility();
        };
        this.bindEvents = function () {
            _this.onContainerWheel();
            _this.emitPaginationEvent();
        };
        this.setScrollOffset = function (scrollOffset) {
            Object.keys(scrollOffset).forEach(function (key) {
                var offset = scrollOffset[key];
                if (!isUndefined(offset)) {
                    _this.spreadsheet.store.set(key, Math.floor(offset));
                }
            });
        };
        this.getScrollOffset = function () {
            var store = _this.spreadsheet.store;
            return {
                scrollX: store.get('scrollX', 0),
                scrollY: store.get('scrollY', 0),
                rowHeaderScrollX: store.get('rowHeaderScrollX', 0),
            };
        };
        this.emitPaginationEvent = function () {
            var pagination = _this.cfg.pagination;
            if (pagination) {
                var _a = pagination.current, current = _a === void 0 ? DEFAULT_PAGE_INDEX : _a, pageSize = pagination.pageSize;
                var total = _this.viewCellHeights.getTotalLength();
                var pageCount = Math.floor((total - 1) / pageSize) + 1;
                _this.cfg.spreadsheet.emit(S2Event.LAYOUT_PAGINATION, {
                    pageSize: pageSize,
                    pageCount: pageCount,
                    total: total,
                    current: current,
                });
            }
        };
        this.unbindEvents = function () {
            var canvas = _this.spreadsheet.getCanvasElement();
            canvas === null || canvas === void 0 ? void 0 : canvas.removeEventListener('wheel', _this.onWheel);
            _this.mobileWheel.destroy();
        };
        this.clipPanelGroup = function () {
            var _a;
            _this.foregroundGroup = _this.spreadsheet.foregroundGroup;
            _this.backgroundGroup = _this.spreadsheet.backgroundGroup;
            _this.panelGroup = _this.spreadsheet.panelGroup;
            var _b = _this.panelBBox, width = _b.width, height = _b.height;
            (_a = _this.spreadsheet.panelScrollGroup) === null || _a === void 0 ? void 0 : _a.setClip({
                type: 'rect',
                attrs: {
                    x: 0,
                    y: _this.cornerBBox.height,
                    width: width,
                    height: height,
                },
            });
        };
        this.calculateCellWidthHeight = function () {
            var colLeafNodes = _this.layoutResult.colLeafNodes;
            var widths = reduce(colLeafNodes, function (result, node) {
                result.push(last(result) + node.width);
                return result;
            }, [0]);
            _this.viewCellWidths = widths;
            _this.viewCellHeights = _this.getViewCellHeights(_this.layoutResult);
        };
        this.getRealScrollX = function (scrollX, hRowScroll) {
            if (hRowScroll === void 0) { hRowScroll = 0; }
            return _this.cfg.spreadsheet.isScrollContainsRowHeader()
                ? scrollX
                : hRowScroll;
        };
        this.calculatePanelBBox = function () {
            _this.panelBBox = new PanelBBox(_this, true);
        };
        this.getRealWidth = function () {
            return last(_this.viewCellWidths);
        };
        this.getRealHeight = function () {
            var pagination = _this.cfg.pagination;
            var heights = _this.viewCellHeights;
            if (pagination) {
                var _a = _this.getCellRange(), start = _a.start, end = _a.end;
                return heights.getCellOffsetY(end + 1) - heights.getCellOffsetY(start);
            }
            return heights.getTotalHeight();
        };
        this.clearAllGroup = function () {
            var children = _this.panelGroup.getChildren() || [];
            for (var i = children.length - 1; i >= 0; i--) {
                var child = children[i];
                if (child instanceof Group) {
                    child.set('children', []);
                }
                else {
                    children[i].remove();
                }
            }
            _this.foregroundGroup.set('children', []);
            _this.backgroundGroup.set('children', []);
        };
        this.scrollWithAnimation = function (offsetConfig, duration, cb) {
            var _a, _b, _c, _d;
            if (offsetConfig === void 0) { offsetConfig = {}; }
            if (duration === void 0) { duration = 200; }
            var _e = _this.getAdjustedScrollOffset({
                scrollX: ((_a = offsetConfig.offsetX) === null || _a === void 0 ? void 0 : _a.value) || 0,
                scrollY: ((_b = offsetConfig.offsetY) === null || _b === void 0 ? void 0 : _b.value) || 0,
                rowHeaderScrollX: ((_c = offsetConfig.rowHeaderOffsetX) === null || _c === void 0 ? void 0 : _c.value) || 0,
            }), adjustedScrollX = _e.scrollX, adjustedScrollY = _e.scrollY, adjustedRowScrollX = _e.rowHeaderScrollX;
            (_d = _this.timer) === null || _d === void 0 ? void 0 : _d.stop();
            var scrollOffset = _this.getScrollOffset();
            var newOffset = [
                adjustedScrollX !== null && adjustedScrollX !== void 0 ? adjustedScrollX : scrollOffset.scrollX,
                adjustedScrollY !== null && adjustedScrollY !== void 0 ? adjustedScrollY : scrollOffset.scrollY,
                adjustedRowScrollX !== null && adjustedRowScrollX !== void 0 ? adjustedRowScrollX : scrollOffset.rowHeaderScrollX,
            ];
            var interpolate = interpolateArray(Object.values(scrollOffset), newOffset);
            _this.timer = timer(function (elapsed) {
                try {
                    var ratio = Math.min(elapsed / duration, 1);
                    var _a = __read(interpolate(ratio), 3), scrollX_1 = _a[0], scrollY_1 = _a[1], rowHeaderScrollX = _a[2];
                    _this.setScrollOffset({
                        rowHeaderScrollX: rowHeaderScrollX,
                        scrollX: scrollX_1,
                        scrollY: scrollY_1,
                    });
                    _this.startScroll();
                    if (elapsed > duration) {
                        _this.timer.stop();
                        cb === null || cb === void 0 ? void 0 : cb();
                    }
                }
                catch (e) {
                    // eslint-disable-next-line no-console
                    console.error(e);
                    _this.timer.stop();
                }
            });
        };
        this.scrollImmediately = function (offsetConfig) {
            var _a, _b, _c;
            if (offsetConfig === void 0) { offsetConfig = {}; }
            var _d = _this.getAdjustedScrollOffset({
                scrollX: ((_a = offsetConfig.offsetX) === null || _a === void 0 ? void 0 : _a.value) || 0,
                scrollY: ((_b = offsetConfig.offsetY) === null || _b === void 0 ? void 0 : _b.value) || 0,
                rowHeaderScrollX: ((_c = offsetConfig.rowHeaderOffsetX) === null || _c === void 0 ? void 0 : _c.value) || 0,
            }), scrollX = _d.scrollX, scrollY = _d.scrollY, rowHeaderScrollX = _d.rowHeaderScrollX;
            _this.setScrollOffset({ scrollX: scrollX, scrollY: scrollY, rowHeaderScrollX: rowHeaderScrollX });
            _this.startScroll();
        };
        /**
         *
         * @param skipScrollEvent 不触发 S2Event.GLOBAL_SCROLL
         */
        this.startScroll = function (skipScrollEvent) {
            var _a, _b, _c;
            if (skipScrollEvent === void 0) { skipScrollEvent = false; }
            var _d = _this.getScrollOffset(), rowHeaderScrollX = _d.rowHeaderScrollX, scrollX = _d.scrollX, scrollY = _d.scrollY;
            (_a = _this.hRowScrollBar) === null || _a === void 0 ? void 0 : _a.onlyUpdateThumbOffset(_this.getScrollBarOffset(rowHeaderScrollX, _this.hRowScrollBar));
            (_b = _this.hScrollBar) === null || _b === void 0 ? void 0 : _b.onlyUpdateThumbOffset(_this.getScrollBarOffset(scrollX, _this.hScrollBar));
            (_c = _this.vScrollBar) === null || _c === void 0 ? void 0 : _c.onlyUpdateThumbOffset(_this.getScrollBarOffset(scrollY, _this.vScrollBar));
            _this.dynamicRenderCell(skipScrollEvent);
        };
        this.getRendererHeight = function () {
            var _a = _this.getCellRange(), start = _a.start, end = _a.end;
            return (_this.viewCellHeights.getCellOffsetY(end + 1) -
                _this.viewCellHeights.getCellOffsetY(start));
        };
        this.getAdjustedScrollOffset = function (_a) {
            var scrollX = _a.scrollX, scrollY = _a.scrollY, rowHeaderScrollX = _a.rowHeaderScrollX;
            return {
                scrollX: getAdjustedScrollOffset(scrollX, _this.layoutResult.colsHierarchy.width, _this.panelBBox.width),
                scrollY: getAdjustedScrollOffset(scrollY, _this.getRendererHeight(), _this.panelBBox.height),
                rowHeaderScrollX: getAdjustedRowScrollX(rowHeaderScrollX, _this.cornerBBox),
            };
        };
        this.renderRowScrollBar = function (rowHeaderScrollX) {
            if (!_this.cfg.spreadsheet.isScrollContainsRowHeader() &&
                _this.cornerBBox.width < _this.cornerBBox.originalWidth) {
                var maxOffset_1 = _this.cornerBBox.originalWidth - _this.cornerBBox.width;
                var maxY = _this.getScrollbarPosition().maxY;
                var _a = _this.spreadsheet.theme, splitLine = _a.splitLine, scrollBar = _a.scrollBar;
                var thumbSize = Math.max((_this.cornerBBox.width * _this.cornerBBox.width) /
                    _this.cornerBBox.originalWidth, scrollBar === null || scrollBar === void 0 ? void 0 : scrollBar.thumbHorizontalMinSize);
                // 行头有分割线, 滚动条应该预留分割线的宽度
                var displayThumbSize = thumbSize - (splitLine === null || splitLine === void 0 ? void 0 : splitLine.verticalBorderWidth);
                _this.hRowScrollBar = new ScrollBar({
                    isHorizontal: true,
                    trackLen: _this.cornerBBox.width,
                    thumbLen: displayThumbSize,
                    position: {
                        x: _this.cornerBBox.minX + _this.scrollBarSize / 2,
                        y: maxY,
                    },
                    thumbOffset: (rowHeaderScrollX * (_this.cornerBBox.width - thumbSize)) / maxOffset_1,
                    theme: _this.scrollBarTheme,
                    scrollTargetMaxOffset: maxOffset_1,
                });
                _this.hRowScrollBar.on(ScrollType.ScrollChange, function (_a) {
                    var _b, _c;
                    var offset = _a.offset;
                    var newOffset = _this.getValidScrollBarOffset(offset, maxOffset_1);
                    var rowHeaderScrollX = Math.floor(newOffset);
                    _this.setScrollOffset({ rowHeaderScrollX: rowHeaderScrollX });
                    (_b = _this.rowHeader) === null || _b === void 0 ? void 0 : _b.onRowScrollX(rowHeaderScrollX, KEY_GROUP_ROW_RESIZE_AREA);
                    (_c = _this.rowIndexHeader) === null || _c === void 0 ? void 0 : _c.onRowScrollX(rowHeaderScrollX, KEY_GROUP_ROW_INDEX_RESIZE_AREA);
                    _this.cornerHeader.onRowScrollX(rowHeaderScrollX, KEY_GROUP_CORNER_RESIZE_AREA);
                    var scrollBarOffsetX = _this.getScrollBarOffset(rowHeaderScrollX, _this.hRowScrollBar);
                    var _d = _this.getScrollOffset(), scrollX = _d.scrollX, scrollY = _d.scrollY;
                    var position = {
                        scrollX: scrollX,
                        scrollY: scrollY,
                        rowHeaderScrollX: scrollBarOffsetX,
                    };
                    _this.hRowScrollBar.updateThumbOffset(scrollBarOffsetX, false);
                    _this.spreadsheet.emit(S2Event.ROW_CELL_SCROLL, position);
                    _this.spreadsheet.emit(S2Event.GLOBAL_SCROLL, position);
                });
                _this.foregroundGroup.add(_this.hRowScrollBar);
            }
        };
        this.getValidScrollBarOffset = function (offset, maxOffset) {
            return clamp$1(offset, 0, maxOffset);
        };
        this.renderHScrollBar = function (width, realWidth, scrollX) {
            if (Math.floor(width) < Math.floor(realWidth)) {
                var halfScrollSize = _this.scrollBarSize / 2;
                var maxY = _this.getScrollbarPosition().maxY;
                var finalWidth = width +
                    (_this.cfg.spreadsheet.isScrollContainsRowHeader()
                        ? Math.min(_this.cornerBBox.width, _this.getCanvasHW().width)
                        : 0);
                var finalPosition = {
                    x: _this.panelBBox.minX +
                        (_this.cfg.spreadsheet.isScrollContainsRowHeader()
                            ? -_this.cornerBBox.width + halfScrollSize
                            : halfScrollSize),
                    y: maxY,
                };
                var finaleRealWidth = realWidth +
                    (_this.cfg.spreadsheet.isScrollContainsRowHeader()
                        ? _this.cornerBBox.width
                        : 0);
                var scrollBar = _this.spreadsheet.theme.scrollBar;
                var maxOffset_2 = finaleRealWidth - finalWidth;
                var thumbLen = Math.max((finalWidth / finaleRealWidth) * finalWidth, scrollBar === null || scrollBar === void 0 ? void 0 : scrollBar.thumbHorizontalMinSize);
                // TODO abstract
                _this.hScrollBar = new ScrollBar({
                    isHorizontal: true,
                    trackLen: finalWidth,
                    thumbLen: thumbLen,
                    position: finalPosition,
                    thumbOffset: (scrollX * (finalWidth - thumbLen)) / maxOffset_2,
                    theme: _this.scrollBarTheme,
                    scrollTargetMaxOffset: maxOffset_2,
                });
                _this.hScrollBar.on(ScrollType.ScrollChange, function (_a) {
                    var offset = _a.offset, updateThumbOffset = _a.updateThumbOffset;
                    var newScrollX = _this.getValidScrollBarOffset(offset, maxOffset_2);
                    if (updateThumbOffset) {
                        _this.hScrollBar.updateThumbOffset(_this.getScrollBarOffset(newScrollX, _this.hScrollBar), false);
                    }
                    _this.setScrollOffset({
                        scrollX: newScrollX,
                    });
                    _this.dynamicRenderCell();
                });
                _this.foregroundGroup.add(_this.hScrollBar);
            }
        };
        this.getScrollbarPosition = function () {
            var _a = _this.panelBBox, maxX = _a.maxX, maxY = _a.maxY;
            var _b = _this.getCanvasHW(), width = _b.width, height = _b.height;
            var isContentMode = _this.spreadsheet.options.interaction.scrollbarPosition ===
                ScrollbarPositionType.CONTENT;
            return {
                maxX: (isContentMode ? maxX : width) - _this.scrollBarSize,
                maxY: isContentMode ? maxY : height - _this.scrollBarSize,
            };
        };
        this.renderVScrollBar = function (height, realHeight, scrollY) {
            if (height < realHeight) {
                var scrollBar = _this.spreadsheet.theme.scrollBar;
                var thumbLen = Math.max((height / realHeight) * height, scrollBar === null || scrollBar === void 0 ? void 0 : scrollBar.thumbVerticalMinSize);
                var maxOffset_3 = realHeight - height;
                var maxX = _this.getScrollbarPosition().maxX;
                _this.vScrollBar = new ScrollBar({
                    isHorizontal: false,
                    trackLen: height,
                    thumbLen: thumbLen,
                    thumbOffset: (scrollY * (height - thumbLen)) / maxOffset_3,
                    position: {
                        x: maxX,
                        y: _this.panelBBox.minY,
                    },
                    theme: _this.scrollBarTheme,
                    scrollTargetMaxOffset: maxOffset_3,
                });
                _this.vScrollBar.on(ScrollType.ScrollChange, function (_a) {
                    var offset = _a.offset, updateThumbOffset = _a.updateThumbOffset;
                    var newScrollY = _this.getValidScrollBarOffset(offset, maxOffset_3);
                    if (updateThumbOffset) {
                        _this.vScrollBar.updateThumbOffset(_this.getScrollBarOffset(newScrollY, _this.vScrollBar), false);
                    }
                    _this.setScrollOffset({ scrollY: newScrollY });
                    _this.dynamicRenderCell();
                });
                _this.foregroundGroup.add(_this.vScrollBar);
            }
        };
        // (滑动 offset / 最大 offset（滚动对象真正长度 - 轨道长）) = (滑块 offset / 最大滑动距离（轨道长 - 滑块长）)
        this.getScrollBarOffset = function (offset, scrollbar) {
            var trackLen = scrollbar.trackLen, thumbLen = scrollbar.thumbLen, scrollTargetMaxOffset = scrollbar.scrollTargetMaxOffset;
            return (offset * (trackLen - thumbLen)) / scrollTargetMaxOffset;
        };
        this.isScrollOverThePanelArea = function (_a) {
            var offsetX = _a.offsetX, offsetY = _a.offsetY;
            return (offsetX > _this.panelBBox.minX &&
                offsetX < _this.panelBBox.maxX &&
                offsetY > _this.panelBBox.minY &&
                offsetY < _this.panelBBox.maxY);
        };
        this.isScrollOverTheCornerArea = function (_a) {
            var offsetX = _a.offsetX, offsetY = _a.offsetY;
            return (offsetX > _this.cornerBBox.minX &&
                offsetX < _this.cornerBBox.maxX &&
                offsetY > _this.cornerBBox.minY &&
                offsetY < _this.cornerBBox.maxY + _this.panelBBox.height);
        };
        this.updateHorizontalRowScrollOffset = function (_a) {
            var _b;
            var offset = _a.offset, offsetX = _a.offsetX, offsetY = _a.offsetY;
            // 在行头区域滚动时 才更新行头水平滚动条
            if (_this.isScrollOverTheCornerArea({ offsetX: offsetX, offsetY: offsetY })) {
                (_b = _this.hRowScrollBar) === null || _b === void 0 ? void 0 : _b.emitScrollChange(offset);
            }
        };
        this.updateHorizontalScrollOffset = function (_a) {
            var _b;
            var offset = _a.offset, offsetX = _a.offsetX, offsetY = _a.offsetY;
            // 1.行头没有滚动条 2.在数值区域滚动时 才更新数值区域水平滚动条
            if (!_this.hRowScrollBar ||
                _this.isScrollOverThePanelArea({ offsetX: offsetX, offsetY: offsetY })) {
                (_b = _this.hScrollBar) === null || _b === void 0 ? void 0 : _b.emitScrollChange(offset);
            }
        };
        this.isScrollToLeft = function (_a) {
            var deltaX = _a.deltaX, offsetX = _a.offsetX, offsetY = _a.offsetY;
            if (!_this.hScrollBar && !_this.hRowScrollBar) {
                return true;
            }
            var isScrollRowHeaderToLeft = !_this.hRowScrollBar ||
                _this.isScrollOverThePanelArea({ offsetY: offsetY, offsetX: offsetX }) ||
                _this.hRowScrollBar.thumbOffset <= 0;
            var isScrollPanelToLeft = !_this.hScrollBar || _this.hScrollBar.thumbOffset <= 0;
            return deltaX <= 0 && isScrollPanelToLeft && isScrollRowHeaderToLeft;
        };
        this.isScrollToRight = function (_a) {
            var _b, _c, _d, _e, _f, _g;
            var deltaX = _a.deltaX, offsetX = _a.offsetX, offsetY = _a.offsetY;
            if (!_this.hScrollBar && !_this.hRowScrollBar) {
                return true;
            }
            var viewportWidth = _this.spreadsheet.isFrozenRowHeader()
                ? (_b = _this.panelBBox) === null || _b === void 0 ? void 0 : _b.width
                : (_c = _this.panelBBox) === null || _c === void 0 ? void 0 : _c.maxX;
            var isScrollRowHeaderToRight = !_this.hRowScrollBar ||
                _this.isScrollOverThePanelArea({ offsetY: offsetY, offsetX: offsetX }) ||
                ((_d = _this.hRowScrollBar) === null || _d === void 0 ? void 0 : _d.thumbOffset) + ((_e = _this.hRowScrollBar) === null || _e === void 0 ? void 0 : _e.thumbLen) >=
                    _this.cornerBBox.width;
            var isScrollPanelToRight = (_this.hRowScrollBar &&
                _this.isScrollOverTheCornerArea({ offsetX: offsetX, offsetY: offsetY })) ||
                ((_f = _this.hScrollBar) === null || _f === void 0 ? void 0 : _f.thumbOffset) + ((_g = _this.hScrollBar) === null || _g === void 0 ? void 0 : _g.thumbLen) >= viewportWidth;
            return deltaX >= 0 && isScrollPanelToRight && isScrollRowHeaderToRight;
        };
        this.isScrollToTop = function (deltaY) {
            var _a;
            if (!_this.vScrollBar) {
                return true;
            }
            return deltaY <= 0 && ((_a = _this.vScrollBar) === null || _a === void 0 ? void 0 : _a.thumbOffset) <= 0;
        };
        this.isScrollToBottom = function (deltaY) {
            var _a, _b, _c;
            if (!_this.vScrollBar) {
                return true;
            }
            return (deltaY >= 0 &&
                ((_a = _this.vScrollBar) === null || _a === void 0 ? void 0 : _a.thumbOffset) + ((_b = _this.vScrollBar) === null || _b === void 0 ? void 0 : _b.thumbLen) >=
                    ((_c = _this.panelBBox) === null || _c === void 0 ? void 0 : _c.height));
        };
        this.isVerticalScrollOverTheViewport = function (deltaY) {
            return !_this.isScrollToTop(deltaY) && !_this.isScrollToBottom(deltaY);
        };
        this.isHorizontalScrollOverTheViewport = function (scrollOffset) {
            return (!_this.isScrollToLeft(scrollOffset) && !_this.isScrollToRight(scrollOffset));
        };
        /**
          在当前表格滚动分两种情况:
          1. 当前表格无滚动条: 无需阻止外部容器滚动
          2. 当前表格有滚动条:
            - 未滚动到顶部或底部: 当前表格滚动, 阻止外部容器滚动
            - 滚动到顶部或底部: 恢复外部容器滚动
        */
        this.isScrollOverTheViewport = function (scrollOffset) {
            var deltaY = scrollOffset.deltaY, deltaX = scrollOffset.deltaX, offsetY = scrollOffset.offsetY;
            var isScrollOverTheHeader = offsetY <= _this.cornerBBox.maxY;
            // 光标在角头或列头时, 不触发表格自身滚动
            if (isScrollOverTheHeader) {
                return false;
            }
            if (deltaY !== 0) {
                return _this.isVerticalScrollOverTheViewport(deltaY);
            }
            if (deltaX !== 0) {
                return _this.isHorizontalScrollOverTheViewport(scrollOffset);
            }
            return false;
        };
        this.cancelScrollFrame = function () {
            if (isMobile() && _this.scrollFrameId) {
                return false;
            }
            cancelAnimationFrame(_this.scrollFrameId);
            return true;
        };
        this.clearScrollFrameIdOnMobile = function () {
            if (isMobile()) {
                _this.scrollFrameId = null;
            }
        };
        /**
          https://developer.mozilla.org/zh-CN/docs/Web/CSS/overscroll-behavior
          阻止外部容器滚动: 表格是虚拟滚动, 这里按照标准模拟浏览器的 [overscroll-behavior] 实现
          1. auto => 只有在滚动到表格顶部或底部时才触发外部容器滚动
          1. contain => 默认的滚动边界行为不变（“触底”效果或者刷新），但是临近的滚动区域不会被滚动链影响到
          2. none => 临近滚动区域不受到滚动链影响，而且默认的滚动到边界的表现也被阻止
          所以只要不为 `auto`, 或者表格内, 都需要阻止外部容器滚动
        */
        this.stopScrollChainingIfNeeded = function (event) {
            var interaction = _this.spreadsheet.options.interaction;
            if (interaction.overscrollBehavior !== 'auto') {
                _this.cancelScrollFrame();
                _this.stopScrollChaining(event);
            }
        };
        this.stopScrollChaining = function (event) {
            var _a, _b;
            if (event === null || event === void 0 ? void 0 : event.cancelable) {
                (_a = event === null || event === void 0 ? void 0 : event.preventDefault) === null || _a === void 0 ? void 0 : _a.call(event);
            }
            // 移动端的 prevent 存在于 originalEvent上
            var mobileEvent = event === null || event === void 0 ? void 0 : event.originalEvent;
            if (mobileEvent === null || mobileEvent === void 0 ? void 0 : mobileEvent.cancelable) {
                (_b = mobileEvent === null || mobileEvent === void 0 ? void 0 : mobileEvent.preventDefault) === null || _b === void 0 ? void 0 : _b.call(mobileEvent);
            }
        };
        this.onWheel = function (event) {
            var interaction = _this.spreadsheet.options.interaction;
            var deltaX = event.deltaX, deltaY = event.deltaY, offsetX = event.offsetX, offsetY = event.offsetY;
            var shiftKey = event.shiftKey;
            // Windows 环境，按住 shift 时，固定为水平方向滚动，macOS 环境默认有该行为
            // see https://github.com/antvis/S2/issues/2198
            if (shiftKey && isWindows()) {
                offsetX = offsetX - deltaX + deltaY;
                deltaX = deltaY;
                offsetY -= deltaY;
                deltaY = 0;
            }
            var _a = __read(optimizeScrollXY(deltaX, deltaY, interaction.scrollSpeedRatio), 2), optimizedDeltaX = _a[0], optimizedDeltaY = _a[1];
            _this.spreadsheet.hideTooltip();
            _this.spreadsheet.interaction.clearHoverTimer();
            if (!_this.isScrollOverTheViewport({
                deltaX: optimizedDeltaX,
                deltaY: optimizedDeltaY,
                offsetX: offsetX,
                offsetY: offsetY,
            })) {
                _this.stopScrollChainingIfNeeded(event);
                return;
            }
            _this.stopScrollChaining(event);
            _this.spreadsheet.interaction.addIntercepts([InterceptType.HOVER]);
            if (!_this.cancelScrollFrame()) {
                return;
            }
            _this.scrollFrameId = requestAnimationFrame(function () {
                var _a;
                var _b = _this.getScrollOffset(), currentScrollX = _b.scrollX, currentScrollY = _b.scrollY, rowHeaderScrollX = _b.rowHeaderScrollX;
                if (optimizedDeltaX !== 0) {
                    _this.showHorizontalScrollBar();
                    _this.updateHorizontalRowScrollOffset({
                        offsetX: offsetX,
                        offsetY: offsetY,
                        offset: optimizedDeltaX + rowHeaderScrollX,
                    });
                    _this.updateHorizontalScrollOffset({
                        offsetX: offsetX,
                        offsetY: offsetY,
                        offset: optimizedDeltaX + currentScrollX,
                    });
                }
                if (optimizedDeltaY !== 0) {
                    _this.showVerticalScrollBar();
                    (_a = _this.vScrollBar) === null || _a === void 0 ? void 0 : _a.emitScrollChange(optimizedDeltaY + currentScrollY);
                }
                _this.delayHideScrollbarOnMobile();
                _this.clearScrollFrameIdOnMobile();
            });
        };
        this.addCell = function (cell) {
            var panelScrollGroup = _this.spreadsheet.panelScrollGroup;
            panelScrollGroup === null || panelScrollGroup === void 0 ? void 0 : panelScrollGroup.add(cell);
        };
        this.realCellRender = function (scrollX, scrollY) {
            var indexes = _this.calculateXYIndexes(scrollX, scrollY);
            DebuggerUtil.getInstance().logger('renderIndex:', _this.preCellIndexes, indexes);
            var _a = diffPanelIndexes(_this.preCellIndexes, indexes), add = _a.add, remove = _a.remove;
            DebuggerUtil.getInstance().debugCallback(DEBUG_VIEW_RENDER, function () {
                // add new cell in panelCell
                forEach(add, function (_a) {
                    var _b = __read(_a, 2), i = _b[0], j = _b[1];
                    var viewMeta = _this.layoutResult.getCellMeta(j, i);
                    if (viewMeta) {
                        var cell = _this.cfg.dataCell(viewMeta);
                        // mark cell for removing
                        cell.set('name', "".concat(i, "-").concat(j));
                        _this.addCell(cell);
                    }
                });
                var allCells = getAllChildCells(_this.panelGroup.getChildren(), DataCell);
                // remove cell from panelCell
                forEach(remove, function (_a) {
                    var _b = __read(_a, 2), i = _b[0], j = _b[1];
                    var findOne = find$1(allCells, function (cell) { return cell.get('name') === "".concat(i, "-").concat(j); });
                    findOne === null || findOne === void 0 ? void 0 : findOne.remove(true);
                });
                DebuggerUtil.getInstance().logger("Render Cell Panel: ".concat(allCells === null || allCells === void 0 ? void 0 : allCells.length, ", Add: ").concat(add === null || add === void 0 ? void 0 : add.length, ", Remove: ").concat(remove === null || remove === void 0 ? void 0 : remove.length));
            });
            _this.preCellIndexes = indexes;
            _this.spreadsheet.emit(S2Event.LAYOUT_AFTER_REAL_DATA_CELL_RENDER, {
                add: add,
                remove: remove,
                spreadsheet: _this.spreadsheet,
            });
        };
        this.getGridInfo = function () {
            var _a = __read(_this.preCellIndexes.center, 4), colMin = _a[0], colMax = _a[1], rowMin = _a[2], rowMax = _a[3];
            var cols = getColsForGrid(colMin, colMax, _this.layoutResult.colLeafNodes);
            var rows = getRowsForGrid(rowMin, rowMax, _this.viewCellHeights);
            return {
                cols: cols,
                rows: rows,
            };
        };
        this.onAfterScroll = debounce(function () {
            var _a = _this.spreadsheet, interaction = _a.interaction, container = _a.container;
            // 如果是选中单元格状态, 则继续保留 hover 拦截, 避免滚动后 hover 清空已选单元格
            if (!interaction.isSelectedState()) {
                interaction.removeIntercepts([InterceptType.HOVER]);
                if (interaction.getHoverAfterScroll()) {
                    // https://github.com/antvis/S2/issues/2222
                    var canvasMousemoveEvent = interaction.eventController.canvasMousemoveEvent;
                    if (canvasMousemoveEvent) {
                        var x = canvasMousemoveEvent.x, y = canvasMousemoveEvent.y;
                        var shape = container.getShape(x, y);
                        if (shape) {
                            container.emit(OriginEventType.MOUSE_MOVE, __assign(__assign({}, canvasMousemoveEvent), { shape: shape, target: shape, timestamp: performance.now() }));
                        }
                    }
                }
            }
        }, 300);
        this.cfg = cfg;
        this.spreadsheet = cfg.spreadsheet;
        this.init();
    }
    Object.defineProperty(BaseFacet.prototype, "scrollBarTheme", {
        get: function () {
            return this.spreadsheet.theme.scrollBar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseFacet.prototype, "scrollBarSize", {
        get: function () {
            return this.scrollBarTheme.size;
        },
        enumerable: false,
        configurable: true
    });
    BaseFacet.prototype.getCellCustomWidth = function (node, width) {
        return isFunction(width) ? width === null || width === void 0 ? void 0 : width(node) : width;
    };
    BaseFacet.prototype.getCellDraggedWidth = function (node) {
        var colCfg = this.cfg.colCfg;
        return get(colCfg === null || colCfg === void 0 ? void 0 : colCfg.widthByFieldValue, "".concat(node.value));
    };
    /**
     * Start render, call from outside
     */
    BaseFacet.prototype.render = function () {
        if (areAllFieldsEmpty(this.spreadsheet.dataCfg.fields)) {
            return;
        }
        this.adjustScrollOffset();
        this.renderHeaders();
        this.renderScrollBars();
        this.renderBackground();
        this.dynamicRenderCell();
    };
    /**
     * 在每次render, 校验scroll offset是否在合法范围中
     * 比如在滚动条已经滚动到100%的状态的前提下：（ maxAvailableScrollOffsetX = colsHierarchy.width - viewportBBox.width ）
     *     此时changeSheetSize，sheet从 small width 变为 big width
     *     导致后者 viewport 区域更大，其结果就是后者的 maxAvailableScrollOffsetX 更小
     *     此时就需要重置 scrollOffsetX，否则就会导致滚动过多，出现空白区域
     */
    BaseFacet.prototype.adjustScrollOffset = function () {
        var offset = this.getAdjustedScrollOffset(this.getScrollOffset());
        this.setScrollOffset(offset);
    };
    BaseFacet.prototype.getSeriesNumberWidth = function () {
        var showSeriesNumber = this.cfg.showSeriesNumber;
        return showSeriesNumber
            ? this.spreadsheet.theme.rowCell.seriesNumberWidth
            : 0;
    };
    BaseFacet.prototype.getCanvasHW = function () {
        return {
            width: this.cfg.width,
            height: this.cfg.height,
        };
    };
    BaseFacet.prototype.updateScrollOffset = function (offsetConfig) {
        var _a, _b, _c, _d, _e, _f;
        if (((_a = offsetConfig.rowHeaderOffsetX) === null || _a === void 0 ? void 0 : _a.value) !== undefined) {
            if ((_b = offsetConfig.rowHeaderOffsetX) === null || _b === void 0 ? void 0 : _b.animate) {
                this.scrollWithAnimation(offsetConfig);
            }
            else {
                this.scrollImmediately(offsetConfig);
            }
            return;
        }
        if (((_c = offsetConfig.offsetX) === null || _c === void 0 ? void 0 : _c.value) !== undefined) {
            if ((_d = offsetConfig.offsetX) === null || _d === void 0 ? void 0 : _d.animate) {
                this.scrollWithAnimation(offsetConfig);
            }
            else {
                this.scrollImmediately(offsetConfig);
            }
            return;
        }
        if (((_e = offsetConfig.offsetY) === null || _e === void 0 ? void 0 : _e.value) !== undefined) {
            if ((_f = offsetConfig.offsetY) === null || _f === void 0 ? void 0 : _f.animate) {
                this.scrollWithAnimation(offsetConfig);
            }
            else {
                this.scrollImmediately(offsetConfig);
            }
        }
    };
    BaseFacet.prototype.getPaginationScrollY = function () {
        var pagination = this.cfg.pagination;
        if (pagination) {
            var _a = pagination.current, current = _a === void 0 ? DEFAULT_PAGE_INDEX : _a, pageSize = pagination.pageSize;
            var heights = this.viewCellHeights;
            var offset = Math.max((current - 1) * pageSize, 0);
            return heights.getCellOffsetY(offset);
        }
        return 0;
    };
    BaseFacet.prototype.destroy = function () {
        this.unbindEvents();
        this.clearAllGroup();
        this.preCellIndexes = null;
        cancelAnimationFrame(this.scrollFrameId);
    };
    /**
     * The purpose of this rewrite is to take into account that when rowHeader supports scrollbars
     the panel viewable area must vary with the horizontal distance of the scroll
     * @param scrollX
     * @param scrollY
     * @public
     */
    BaseFacet.prototype.calculateXYIndexes = function (scrollX, scrollY) {
        var _a = this.panelBBox, height = _a.viewportHeight, width = _a.viewportWidth;
        var indexes = calculateInViewIndexes(scrollX, scrollY, this.viewCellWidths, this.viewCellHeights, {
            width: width,
            height: height,
            x: 0,
            y: 0,
        }, this.getRealScrollX(this.cornerBBox.width));
        return {
            center: indexes,
        };
    };
    BaseFacet.prototype.calculateCornerBBox = function () {
        this.cornerBBox = new CornerBBox(this, true);
    };
    BaseFacet.prototype.getCellRange = function () {
        var pagination = this.cfg.pagination;
        return getCellRange(this.viewCellHeights, pagination);
    };
    BaseFacet.prototype.panelScrollGroupClip = function (scrollX, scrollY) {
        var _a;
        var isFrozenRowHeader = this.spreadsheet.isFrozenRowHeader();
        (_a = this.spreadsheet.panelScrollGroup) === null || _a === void 0 ? void 0 : _a.setClip({
            type: 'rect',
            attrs: {
                x: isFrozenRowHeader ? scrollX : 0,
                y: scrollY,
                width: this.panelBBox.width + (isFrozenRowHeader ? 0 : scrollX),
                height: this.panelBBox.height,
            },
        });
    };
    BaseFacet.prototype.clip = function (scrollX, scrollY) {
        this.panelScrollGroupClip(scrollX, scrollY);
    };
    /**
     * Translate panelGroup, rowHeader, cornerHeader, columnHeader ect
     * according to new scroll offset
     * @param scrollX
     * @param scrollY
     * @param hRowScroll
     * @protected
     */
    BaseFacet.prototype.translateRelatedGroups = function (scrollX, scrollY, hRowScroll) {
        var _a, _b, _c, _d, _e, _f;
        translateGroup(this.spreadsheet.panelScrollGroup, this.cornerBBox.width - scrollX, this.cornerBBox.height - scrollY);
        (_a = this.rowHeader) === null || _a === void 0 ? void 0 : _a.onScrollXY(this.getRealScrollX(scrollX, hRowScroll), scrollY, KEY_GROUP_ROW_RESIZE_AREA);
        (_b = this.rowIndexHeader) === null || _b === void 0 ? void 0 : _b.onScrollXY(this.getRealScrollX(scrollX, hRowScroll), scrollY, KEY_GROUP_ROW_INDEX_RESIZE_AREA);
        (_c = this.cornerHeader) === null || _c === void 0 ? void 0 : _c.onCorScroll(this.getRealScrollX(scrollX, hRowScroll), KEY_GROUP_CORNER_RESIZE_AREA);
        (_d = this.centerFrame) === null || _d === void 0 ? void 0 : _d.onChangeShadowVisibility(scrollX, this.getRealWidth() - this.panelBBox.width);
        (_e = this.centerFrame) === null || _e === void 0 ? void 0 : _e.onBorderScroll(this.getRealScrollX(scrollX));
        (_f = this.columnHeader) === null || _f === void 0 ? void 0 : _f.onColScroll(scrollX, KEY_GROUP_COL_RESIZE_AREA);
    };
    BaseFacet.prototype.init = function () {
        var _this = this;
        // layout
        DebuggerUtil.getInstance().debugCallback(DEBUG_HEADER_LAYOUT, function () {
            _this.layoutResult = _this.doLayout();
            _this.saveInitColumnLeafNodes(_this.layoutResult.colLeafNodes);
            _this.spreadsheet.emit(S2Event.LAYOUT_AFTER_HEADER_LAYOUT, _this.layoutResult);
        });
        // all cell's width&height
        this.calculateCellWidthHeight();
        this.calculateCornerBBox();
        this.calculatePanelBBox();
        this.clipPanelGroup();
        this.bindEvents();
    };
    BaseFacet.prototype.renderBackground = function () {
        var _a = this.getCanvasHW(), width = _a.width, height = _a.height;
        var _b = this.spreadsheet.theme.background, color = _b.color, opacity = _b.opacity;
        this.backgroundGroup.addShape('rect', {
            attrs: {
                fill: color,
                opacity: opacity,
                x: 0,
                y: 0,
                width: width,
                height: height,
            },
        });
    };
    /**
     * Render all scrollbars, default horizontal scrollbar only control viewport
     * area(it means not contains row header)
     * 1. individual row scrollbar
     * 2. horizontal scroll bar(can control whether contains row header)
     * 3. vertical scroll bar
     */
    BaseFacet.prototype.renderScrollBars = function () {
        var _a = this.getScrollOffset(), scrollX = _a.scrollX, scrollY = _a.scrollY, rowHeaderScrollX = _a.rowHeaderScrollX;
        var _b = this.panelBBox, width = _b.width, height = _b.height;
        var realWidth = this.layoutResult.colsHierarchy.width;
        var realHeight = this.getRealHeight();
        // scroll row header separate from the whole canvas
        this.renderRowScrollBar(rowHeaderScrollX);
        // render horizontal scroll bar(default not contains row header)
        this.renderHScrollBar(width, realWidth, scrollX);
        // render vertical scroll bar
        this.renderVScrollBar(height, realHeight, scrollY);
    };
    /**
     * Render all headers in {@link #foregroundGroup}, contains:
     * 1. row header
     * 2. col header
     * 3. center frame
     * 4. corner header
     * 5. series number header
     */
    BaseFacet.prototype.renderHeaders = function () {
        var seriesNumberWidth = this.getSeriesNumberWidth();
        this.rowHeader = this.getRowHeader();
        this.columnHeader = this.getColHeader();
        if (seriesNumberWidth > 0 && !this.rowIndexHeader) {
            this.rowIndexHeader = this.getSeriesNumberHeader();
        }
        this.cornerHeader = this.getCornerHeader();
        this.centerFrame = this.getCenterFrame();
        if (this.rowIndexHeader) {
            this.foregroundGroup.add(this.rowIndexHeader);
        }
        if (this.rowHeader) {
            this.foregroundGroup.add(this.rowHeader);
        }
        this.foregroundGroup.add(this.columnHeader);
        this.foregroundGroup.add(this.cornerHeader);
        this.foregroundGroup.add(this.centerFrame);
    };
    BaseFacet.prototype.getRowHeaderCfg = function () {
        var _a, _b, _c;
        var _d = this.panelBBox, y = _d.y, viewportHeight = _d.viewportHeight, viewportWidth = _d.viewportWidth, height = _d.height;
        var seriesNumberWidth = this.getSeriesNumberWidth();
        return {
            width: this.cornerBBox.width,
            height: height,
            viewportWidth: viewportWidth,
            viewportHeight: viewportHeight,
            position: { x: 0, y: y },
            data: this.layoutResult.rowNodes,
            hierarchyType: this.cfg.hierarchyType,
            linkFields: (_c = (_b = (_a = this.cfg.spreadsheet.options) === null || _a === void 0 ? void 0 : _a.interaction) === null || _b === void 0 ? void 0 : _b.linkFields) !== null && _c !== void 0 ? _c : [],
            seriesNumberWidth: seriesNumberWidth,
            spreadsheet: this.spreadsheet,
        };
    };
    BaseFacet.prototype.getRowHeader = function () {
        if (!this.rowHeader) {
            return new RowHeader(this.getRowHeaderCfg());
        }
        return this.rowHeader;
    };
    BaseFacet.prototype.getColHeader = function () {
        if (!this.columnHeader) {
            var _a = this.panelBBox, x = _a.x, width = _a.width, viewportHeight = _a.viewportHeight, viewportWidth = _a.viewportWidth;
            return new ColHeader({
                width: width,
                cornerWidth: this.cornerBBox.width,
                height: this.cornerBBox.height,
                viewportWidth: viewportWidth,
                viewportHeight: viewportHeight,
                position: { x: x, y: 0 },
                data: this.layoutResult.colNodes,
                scrollContainsRowHeader: this.cfg.spreadsheet.isScrollContainsRowHeader(),
                sortParam: this.cfg.spreadsheet.store.get('sortParam'),
                spreadsheet: this.spreadsheet,
            });
        }
        return this.columnHeader;
    };
    BaseFacet.prototype.getCornerHeader = function () {
        if (!this.cornerHeader) {
            return CornerHeader.getCornerHeader(this.panelBBox, this.cornerBBox, this.getSeriesNumberWidth(), this.cfg, this.layoutResult, this.spreadsheet);
        }
        return this.cornerHeader;
    };
    BaseFacet.prototype.getSeriesNumberHeader = function () {
        return SeriesNumberHeader.getSeriesNumberHeader({
            viewportBBox: this.panelBBox,
            seriesNumberWidth: this.getSeriesNumberWidth(),
            leafNodes: this.layoutResult.rowsHierarchy.getNodes(0),
            spreadsheet: this.spreadsheet,
            cornerWidth: this.cornerBBox.width,
        });
    };
    BaseFacet.prototype.getCenterFrame = function () {
        var _a;
        if (!this.centerFrame) {
            var _b = this.panelBBox, viewportWidth = _b.viewportWidth, viewportHeight = _b.viewportHeight;
            var cornerWidth = this.cornerBBox.width;
            var cornerHeight = this.cornerBBox.height;
            var frame = (_a = this.cfg) === null || _a === void 0 ? void 0 : _a.frame;
            var frameCfg = {
                position: {
                    x: this.cornerBBox.x,
                    y: this.cornerBBox.y,
                },
                width: cornerWidth,
                height: cornerHeight,
                viewportWidth: viewportWidth,
                viewportHeight: viewportHeight,
                showViewportLeftShadow: false,
                showViewportRightShadow: false,
                scrollContainsRowHeader: this.cfg.spreadsheet.isScrollContainsRowHeader(),
                isPivotMode: this.cfg.spreadsheet.isPivotMode(),
                spreadsheet: this.cfg.spreadsheet,
            };
            return frame ? frame(frameCfg) : new Frame(frameCfg);
        }
        return this.centerFrame;
    };
    BaseFacet.prototype.updatePanelScrollGroup = function () {
        this.gridInfo = this.getGridInfo();
        this.spreadsheet.panelScrollGroup.update(this.gridInfo);
    };
    /**
     *
     * @param skipScrollEvent: 如true则不触发GLOBAL_SCROLL事件
     * During scroll behavior, first call to this method fires immediately and then on interval.
     * @protected
     */
    BaseFacet.prototype.dynamicRenderCell = function (skipScrollEvent) {
        var _a = this.getScrollOffset(), scrollX = _a.scrollX, originalScrollY = _a.scrollY, rowHeaderScrollX = _a.rowHeaderScrollX;
        var defaultScrollY = originalScrollY + this.getPaginationScrollY();
        var scrollY = getAdjustedScrollOffset(defaultScrollY, this.viewCellHeights.getTotalHeight(), this.panelBBox.viewportHeight);
        this.spreadsheet.hideTooltip();
        this.spreadsheet.interaction.clearHoverTimer();
        this.realCellRender(scrollX, scrollY);
        this.updatePanelScrollGroup();
        this.translateRelatedGroups(scrollX, scrollY, rowHeaderScrollX);
        this.clip(scrollX, scrollY);
        if (!skipScrollEvent) {
            this.emitScrollEvent({ scrollX: scrollX, scrollY: scrollY, rowHeaderScrollX: rowHeaderScrollX });
        }
        this.onAfterScroll();
    };
    BaseFacet.prototype.emitScrollEvent = function (position) {
        /** @deprecated 请使用 S2Event.GLOBAL_SCROLL 代替 */
        this.spreadsheet.emit(S2Event.LAYOUT_CELL_SCROLL, position);
        this.spreadsheet.emit(S2Event.GLOBAL_SCROLL, position);
    };
    BaseFacet.prototype.saveInitColumnLeafNodes = function (columnNodes) {
        if (columnNodes === void 0) { columnNodes = []; }
        var _a = this.spreadsheet, store = _a.store, options = _a.options;
        var hiddenColumnFields = options.interaction.hiddenColumnFields;
        // 当前显示的 + 被隐藏的
        var originalColumnsLength = columnNodes.length + hiddenColumnFields.length;
        var initColumnLeafNodes = store.get('initColumnLeafNodes', []);
        if (originalColumnsLength !== initColumnLeafNodes.length) {
            store.set('initColumnLeafNodes', columnNodes);
        }
    };
    BaseFacet.prototype.getHiddenColumnsInfo = function (columnNode) {
        var hiddenColumnsDetail = this.spreadsheet.store.get('hiddenColumnsDetail', []);
        if (isEmpty(hiddenColumnsDetail)) {
            return null;
        }
        return hiddenColumnsDetail.find(function (detail) { var _a; return (_a = detail === null || detail === void 0 ? void 0 : detail.hideColumnNodes) === null || _a === void 0 ? void 0 : _a.some(function (node) { return node.id === columnNode.id; }); });
    };
    BaseFacet.prototype.getCornerNodes = function () {
        var _a;
        return ((_a = this.cornerHeader) === null || _a === void 0 ? void 0 : _a.getNodes()) || [];
    };
    return BaseFacet;
}());

/**
 * Defines the row freeze  abstract standard interface
 */
var FrozenFacet = /** @class */ (function (_super) {
    __extends(FrozenFacet, _super);
    function FrozenFacet(cfg) {
        var _a;
        var _this = _super.call(this, cfg) || this;
        _this.frozenGroupInfo = (_a = {},
            _a[FrozenGroup$1.FROZEN_COL] = {
                width: 0,
            },
            _a[FrozenGroup$1.FROZEN_ROW] = {
                height: 0,
            },
            _a[FrozenGroup$1.FROZEN_TRAILING_ROW] = {
                height: 0,
            },
            _a[FrozenGroup$1.FROZEN_TRAILING_COL] = {
                width: 0,
            },
            _a);
        _this.panelScrollGroupIndexes = [];
        _this.initFrozenGroupPosition = function () {
            var _a = _this.getScrollOffset(), scrollY = _a.scrollY, scrollX = _a.scrollX;
            var paginationScrollY = _this.getPaginationScrollY();
            translateGroup(_this.spreadsheet.frozenRowGroup, _this.cornerBBox.width - scrollX, _this.cornerBBox.height - paginationScrollY);
            translateGroup(_this.spreadsheet.frozenColGroup, _this.cornerBBox.width, _this.cornerBBox.height - scrollY - paginationScrollY);
            translateGroup(_this.spreadsheet.frozenTrailingColGroup, _this.cornerBBox.width, _this.cornerBBox.height - scrollY - paginationScrollY);
            translateGroup(_this.spreadsheet.frozenTopGroup, _this.cornerBBox.width, _this.cornerBBox.height - paginationScrollY);
        };
        // 2.3. Add the node to the frozen group.
        _this.addCell = function (cell) {
            var _a = _this.getBizRevisedFrozenOptions(), frozenRowCount = _a.frozenRowCount, frozenColCount = _a.frozenColCount, frozenTrailingRowCount = _a.frozenTrailingRowCount, frozenTrailingColCount = _a.frozenTrailingColCount;
            var colLength = _this.layoutResult.colsHierarchy.getLeaves().length;
            var cellRange = _this.getCellRange();
            var _b = _this.getRealFrozenColumns(frozenColCount, frozenTrailingColCount), colCount = _b.colCount, trailingColCount = _b.trailingColCount;
            var frozenCellType = getFrozenDataCellType(cell.getMeta(), {
                frozenRowCount: frozenRowCount,
                frozenColCount: colCount,
                frozenTrailingRowCount: frozenTrailingRowCount,
                frozenTrailingColCount: trailingColCount,
            }, colLength, cellRange);
            var group = FrozenCellGroupMap[frozenCellType];
            if (group && _this.spreadsheet[group]) {
                _this.spreadsheet[group].add(cell);
            }
        };
        // 3.3. render frozen group split line
        _this.renderFrozenGroupSplitLine = function (scrollX, scrollY) {
            var _a, _b, _c;
            var _d = _this.panelBBox, panelWidth = _d.width, panelHeight = _d.height, viewportWidth = _d.viewportWidth, viewportHeight = _d.viewportHeight;
            var cornerHeight = _this.cornerBBox.height;
            var colLeafNodes = _this.layoutResult.colNodes.filter(function (node) {
                return isTopLevelNode(node);
            });
            var cellRange = _this.getCellRange();
            var dataLength = cellRange.end - cellRange.start;
            var _e = getValidFrozenOptions(_this.getBizRevisedFrozenOptions(), colLeafNodes.length, dataLength), _f = _e.frozenRowCount, frozenRowCount = _f === void 0 ? 0 : _f, _g = _e.frozenColCount, frozenColCount = _g === void 0 ? 0 : _g, _h = _e.frozenTrailingColCount, frozenTrailingColCount = _h === void 0 ? 0 : _h, _j = _e.frozenTrailingRowCount, frozenTrailingRowCount = _j === void 0 ? 0 : _j;
            // 在分页条件下需要额外处理 Y 轴滚动值
            var relativeScrollY = Math.floor(scrollY - _this.getPaginationScrollY());
            // scroll boundary
            var maxScrollX = Math.max(0, ((_a = last(_this.viewCellWidths)) !== null && _a !== void 0 ? _a : 0) - viewportWidth);
            var maxScrollY = Math.max(0, _this.viewCellHeights.getCellOffsetY(cellRange.end + 1) -
                _this.viewCellHeights.getCellOffsetY(cellRange.start) -
                viewportHeight);
            // remove previous splitline group
            (_b = _this.foregroundGroup.findById(KEY_GROUP_FROZEN_SPLIT_LINE)) === null || _b === void 0 ? void 0 : _b.remove();
            var style = get(_this.cfg, 'spreadsheet.theme.splitLine');
            var splitLineGroup = _this.foregroundGroup.addGroup({
                id: KEY_GROUP_FROZEN_SPLIT_LINE,
                zIndex: FRONT_GROUND_GROUP_FROZEN_Z_INDEX,
            });
            var verticalBorderStyle = {
                lineWidth: style === null || style === void 0 ? void 0 : style.verticalBorderWidth,
                stroke: style === null || style === void 0 ? void 0 : style.verticalBorderColor,
                opacity: style === null || style === void 0 ? void 0 : style.verticalBorderColorOpacity,
                lineDash: style === null || style === void 0 ? void 0 : style.borderDash,
            };
            var horizontalBorderStyle = {
                lineWidth: style === null || style === void 0 ? void 0 : style.horizontalBorderWidth,
                stroke: style === null || style === void 0 ? void 0 : style.horizontalBorderColor,
                opacity: style === null || style === void 0 ? void 0 : style.horizontalBorderColorOpacity,
                lineDash: style === null || style === void 0 ? void 0 : style.borderDash,
            };
            if (frozenColCount > 0) {
                var x = colLeafNodes.reduce(function (prev, item, idx) {
                    if (idx < frozenColCount) {
                        return prev + item.width;
                    }
                    return prev;
                }, 0);
                var height = frozenTrailingRowCount > 0 ? panelHeight : viewportHeight;
                renderLine(splitLineGroup, {
                    x1: x,
                    x2: x,
                    y1: cornerHeight,
                    y2: cornerHeight + height,
                }, __assign({}, verticalBorderStyle));
                if (style.showShadow && scrollX > 0) {
                    splitLineGroup.addShape('rect', {
                        attrs: {
                            x: x,
                            y: cornerHeight,
                            width: style.shadowWidth,
                            height: height,
                            fill: _this.getShadowFill(0),
                        },
                    });
                }
            }
            if (frozenRowCount > 0) {
                var y = cornerHeight +
                    _this.getTotalHeightForRange(cellRange.start, cellRange.start + frozenRowCount - 1);
                var width = frozenTrailingColCount > 0 ? panelWidth : viewportWidth;
                renderLine(splitLineGroup, {
                    x1: 0,
                    x2: width,
                    y1: y,
                    y2: y,
                }, __assign({}, horizontalBorderStyle));
                if (style.showShadow && relativeScrollY > 0) {
                    splitLineGroup.addShape('rect', {
                        attrs: {
                            x: 0,
                            y: y,
                            width: width,
                            height: style.shadowWidth,
                            fill: _this.getShadowFill(90),
                        },
                    });
                }
            }
            if (frozenTrailingColCount > 0) {
                var x = colLeafNodes[colLeafNodes.length - frozenTrailingColCount].x;
                var height = frozenTrailingRowCount ? panelHeight : viewportHeight;
                renderLine(splitLineGroup, {
                    x1: x,
                    x2: x,
                    y1: cornerHeight,
                    y2: cornerHeight + height,
                }, __assign({}, verticalBorderStyle));
                if (style.showShadow && Math.floor(scrollX) < Math.floor(maxScrollX)) {
                    splitLineGroup.addShape('rect', {
                        attrs: {
                            x: x - ((_c = style.shadowWidth) !== null && _c !== void 0 ? _c : 0),
                            y: cornerHeight,
                            width: style.shadowWidth,
                            height: height,
                            fill: _this.getShadowFill(180),
                        },
                    });
                }
            }
            if (frozenTrailingRowCount > 0) {
                var y = _this.panelBBox.maxY -
                    _this.getTotalHeightForRange(cellRange.end - frozenTrailingRowCount + 1, cellRange.end);
                var width = frozenTrailingColCount > 0 ? panelWidth : viewportWidth;
                renderLine(splitLineGroup, {
                    x1: 0,
                    x2: width,
                    y1: y,
                    y2: y,
                }, __assign({}, horizontalBorderStyle));
                if (style.showShadow && relativeScrollY < Math.floor(maxScrollY)) {
                    splitLineGroup.addShape('rect', {
                        attrs: {
                            x: 0,
                            y: y - style.shadowWidth,
                            width: width,
                            height: style.shadowWidth,
                            fill: _this.getShadowFill(270),
                        },
                    });
                }
            }
            _this.foregroundGroup.sort();
        };
        _this.getRealFrozenColumns = function (frozenColCount, frozenTrailingColCount) {
            var _a;
            var colCount = frozenColCount;
            var trailingColCount = frozenTrailingColCount;
            if (frozenColCount || frozenTrailingColCount) {
                var nodes = _this.layoutResult.colsHierarchy.getNodes();
                nodes = nodes.filter(function (node) { return isTopLevelNode(node); });
                (_a = getFrozenLeafNodesCount(nodes, frozenColCount, frozenTrailingColCount), colCount = _a.colCount, trailingColCount = _a.trailingColCount);
            }
            return { colCount: colCount, trailingColCount: trailingColCount };
        };
        _this.getTotalHeightForRange = function (start, end) {
            if (start < 0 || end < 0) {
                return 0;
            }
            if (_this.rowOffsets) {
                return _this.rowOffsets[end + 1] - _this.rowOffsets[start];
            }
            var totalHeight = 0;
            for (var index = start; index < end + 1; index++) {
                var height = _this.getDefaultCellHeight();
                totalHeight += height;
            }
            return totalHeight;
        };
        _this.getShadowFill = function (angle) {
            var _a, _b;
            var style = get(_this.cfg, 'spreadsheet.theme.splitLine');
            return "l (".concat(angle, ") 0:").concat((_a = style.shadowColors) === null || _a === void 0 ? void 0 : _a.left, " 1:").concat((_b = style.shadowColors) === null || _b === void 0 ? void 0 : _b.right);
        };
        return _this;
    }
    // The core process of freezing is as follows:
    // 1. prepareGroup
    // 1.1. spread-sheet defined group and added panelGroup
    // 1.2. prepare frozenGroup info and init frozenGroup position
    FrozenFacet.prototype.calculateFrozenGroupInfo = function () {
        var _a = this.getFrozenOptionsDirectly(), frozenColCount = _a.frozenColCount, frozenRowCount = _a.frozenRowCount, frozenTrailingColCount = _a.frozenTrailingColCount, frozenTrailingRowCount = _a.frozenTrailingRowCount;
        var colLeafNodes = this.layoutResult.colNodes.filter(function (node) {
            return isTopLevelNode(node);
        });
        var viewCellHeights = this.viewCellHeights;
        var cellRange = this.getCellRange();
        var _b = this.frozenGroupInfo, frozenCol = _b.frozenCol, frozenTrailingCol = _b.frozenTrailingCol, frozenRow = _b.frozenRow, frozenTrailingRow = _b.frozenTrailingRow;
        if (frozenColCount > 0) {
            frozenCol.width =
                colLeafNodes[frozenColCount - 1].x +
                    colLeafNodes[frozenColCount - 1].width -
                    0;
            frozenCol.range = [0, frozenColCount - 1];
        }
        if (frozenRowCount > 0) {
            frozenRow.height =
                viewCellHeights.getCellOffsetY(cellRange.start + frozenRowCount) -
                    viewCellHeights.getCellOffsetY(cellRange.start);
            frozenRow.range = [cellRange.start, cellRange.start + frozenRowCount - 1];
        }
        if (frozenTrailingColCount > 0) {
            frozenTrailingCol.width =
                colLeafNodes[colLeafNodes.length - 1].x -
                    colLeafNodes[colLeafNodes.length - frozenTrailingColCount].x +
                    colLeafNodes[colLeafNodes.length - 1].width;
            frozenTrailingCol.range = [
                colLeafNodes.length - frozenTrailingColCount,
                colLeafNodes.length - 1,
            ];
        }
        if (frozenTrailingRowCount > 0) {
            frozenTrailingRow.height =
                viewCellHeights.getCellOffsetY(cellRange.end + 1) -
                    viewCellHeights.getCellOffsetY(cellRange.end + 1 - frozenTrailingRowCount);
            frozenTrailingRow.range = [
                cellRange.end - frozenTrailingRowCount + 1,
                cellRange.end,
            ];
        }
    };
    // 2. renderGroupingNodes
    // 2.1. doLayout: "No public logic extraction, please define implementation in subclasses"
    // 2.2. calculate the offsets scrollX and scrollY, the index of the frozen nodes within the visible viewport is determined.
    FrozenFacet.prototype.calculateXYIndexes = function (scrollX, scrollY) {
        var _a, _b, _c;
        var colLength = this.layoutResult.colLeafNodes.length;
        var cellRange = this.getCellRange();
        var _d = this.panelBBox, height = _d.viewportHeight, width = _d.viewportWidth;
        var _e = this.getFrozenOptionsDirectly(), _f = _e.frozenColCount, frozenColCount = _f === void 0 ? 0 : _f, _g = _e.frozenRowCount, frozenRowCount = _g === void 0 ? 0 : _g, _h = _e.frozenTrailingColCount, frozenTrailingColCount = _h === void 0 ? 0 : _h, _j = _e.frozenTrailingRowCount, frozenTrailingRowCount = _j === void 0 ? 0 : _j;
        var finalViewport = {
            width: width,
            height: height,
            x: 0,
            y: 0,
        };
        if (frozenTrailingColCount > 0 || frozenColCount > 0) {
            var _k = this.frozenGroupInfo, frozenTrailingCol = _k.frozenTrailingCol, frozenCol = _k.frozenCol;
            finalViewport.width -= frozenTrailingCol.width + frozenCol.width;
            finalViewport.x += (_a = frozenCol.width) !== null && _a !== void 0 ? _a : 0;
        }
        if (frozenTrailingRowCount > 0 || frozenRowCount > 0) {
            var _l = this.frozenGroupInfo, frozenRow = _l.frozenRow, frozenTrailingRow = _l.frozenTrailingRow;
            // canvas 高度小于row height和trailingRow height的时候 height 为 0
            if (finalViewport.height <
                frozenRow.height + frozenTrailingRow.height) {
                finalViewport.height = 0;
                finalViewport.y = 0;
            }
            else {
                finalViewport.height -= frozenRow.height + frozenTrailingRow.height;
                finalViewport.y += frozenRow.height;
            }
        }
        var indexes = this.spreadsheet.isTableMode() && ((_c = (_b = this.spreadsheet.dataSet) === null || _b === void 0 ? void 0 : _b.isEmpty) === null || _c === void 0 ? void 0 : _c.call(_b))
            ? this.spreadsheet.dataSet.getEmptyViewIndexes()
            : calculateInViewIndexes(scrollX, scrollY, this.viewCellWidths, this.viewCellHeights, finalViewport, this.getRealScrollX(this.cornerBBox.width));
        this.panelScrollGroupIndexes = indexes;
        var _m = this.getRealFrozenColumns(frozenColCount, frozenTrailingColCount), colCount = _m.colCount, trailingColCount = _m.trailingColCount;
        return splitInViewIndexesWithFrozen(indexes, {
            frozenColCount: colCount,
            frozenRowCount: frozenRowCount,
            frozenTrailingColCount: trailingColCount,
            frozenTrailingRowCount: frozenTrailingRowCount,
        }, colLength, cellRange);
    };
    // 2.4. update the coordinates of the frozen rows and columns' dividers based on scrollX and scrollY.
    FrozenFacet.prototype.updateFrozenGroupGrid = function () {
        var _this = this;
        [
            FrozenGroup$1.FROZEN_COL,
            FrozenGroup$1.FROZEN_ROW,
            FrozenGroup$1.FROZEN_TRAILING_COL,
            FrozenGroup$1.FROZEN_TRAILING_ROW,
        ].forEach(function (key) {
            if (!_this.frozenGroupInfo[key].range) {
                return;
            }
            var cols = [];
            var rows = [];
            if (key.toLowerCase().includes('row')) {
                var _a = __read(_this.frozenGroupInfo[key].range, 2), rowMin = _a[0], rowMax = _a[1];
                cols = _this.gridInfo.cols;
                rows = getRowsForGrid(rowMin, rowMax, _this.viewCellHeights);
                if (key === FrozenGroup$1.FROZEN_TRAILING_ROW) {
                    var minY = _this.spreadsheet.frozenTrailingRowGroup.getBBox().minY;
                    rows = getFrozenRowsForGrid(rowMin, rowMax, Math.ceil(minY), _this.viewCellHeights);
                }
            }
            else {
                var _b = __read(_this.frozenGroupInfo[key].range, 2), colMin = _b[0], colMax = _b[1];
                var nodes = _this.layoutResult.colNodes.filter(function (node) {
                    return isTopLevelNode(node);
                });
                cols = getColsForGrid(colMin, colMax, nodes);
                rows = _this.gridInfo.rows;
            }
            _this.spreadsheet["".concat(key, "Group")].updateGrid({
                cols: cols,
                rows: rows,
            }, "".concat(key, "Group"));
        });
    };
    FrozenFacet.prototype.updatePanelScrollGroup = function () {
        _super.prototype.updatePanelScrollGroup.call(this);
        this.updateFrozenGroupGrid();
    };
    // 3. scrollInteraction
    // 3.1. translate row and columns frozen group by scrollX and scrollY
    FrozenFacet.prototype.translateRelatedGroups = function (scrollX, scrollY, hRowScroll) {
        var _this = this;
        var _a = this.spreadsheet, frozenColGroup = _a.frozenColGroup, frozenTrailingColGroup = _a.frozenTrailingColGroup, frozenRowGroup = _a.frozenRowGroup, frozenTrailingRowGroup = _a.frozenTrailingRowGroup;
        [frozenRowGroup, frozenTrailingRowGroup].forEach(function (g) {
            translateGroupX(g, _this.cornerBBox.width - scrollX);
        });
        [frozenColGroup, frozenTrailingColGroup].forEach(function (g) {
            translateGroupY(g, _this.cornerBBox.height - scrollY);
        });
        _super.prototype.translateRelatedGroups.call(this, scrollX, scrollY, hRowScroll);
        this.updateRowResizeArea();
        this.renderFrozenGroupSplitLine(scrollX, scrollY);
    };
    // 3.2. frozen cell drawResizeArea
    FrozenFacet.prototype.updateRowResizeArea = function () { };
    // 3.4. clip frozen group by scrolX and scrollY
    // 对 panelScrollGroup 以及四个方向的 frozenGroup 做 Clip，避免有透明度时冻结分组和滚动分组展示重叠
    FrozenFacet.prototype.clip = function (scrollX, scrollY) {
        var _a, _b, _c;
        var paginationScrollY = this.getPaginationScrollY();
        var _d = this.spreadsheet, frozenRowGroup = _d.frozenRowGroup, frozenColGroup = _d.frozenColGroup, frozenTrailingColGroup = _d.frozenTrailingColGroup, frozenTrailingRowGroup = _d.frozenTrailingRowGroup, panelScrollGroup = _d.panelScrollGroup;
        var frozenColGroupWidth = 0;
        var frozenRowGroupHeight = 0;
        var frozenTrailingRowGroupHeight = 0;
        if (frozenColGroup) {
            frozenColGroupWidth = frozenColGroup.getBBox().width;
        }
        if (frozenRowGroup) {
            frozenRowGroupHeight = frozenRowGroup.getBBox().height;
        }
        var frozenTrailingColBBox;
        if (frozenTrailingColGroup) {
            frozenTrailingColBBox = frozenTrailingColGroup.getBBox();
        }
        if (frozenTrailingRowGroup) {
            frozenTrailingRowGroupHeight = frozenTrailingRowGroup.getBBox().height;
        }
        var panelScrollGroupWidth = this.panelBBox.width -
            frozenColGroupWidth -
            ((_a = frozenTrailingColBBox === null || frozenTrailingColBBox === void 0 ? void 0 : frozenTrailingColBBox.width) !== null && _a !== void 0 ? _a : 0);
        var panelScrollGroupHeight = this.panelBBox.height -
            frozenRowGroupHeight -
            frozenTrailingRowGroupHeight;
        panelScrollGroup.setClip({
            type: 'rect',
            attrs: {
                x: scrollX + frozenColGroupWidth,
                y: scrollY + frozenRowGroupHeight,
                width: panelScrollGroupWidth,
                height: panelScrollGroupHeight,
            },
        });
        frozenRowGroup.setClip({
            type: 'rect',
            attrs: {
                x: scrollX + frozenColGroupWidth,
                y: paginationScrollY,
                width: panelScrollGroupWidth,
                height: frozenRowGroupHeight,
            },
        });
        frozenTrailingRowGroup === null || frozenTrailingRowGroup === void 0 ? void 0 : frozenTrailingRowGroup.setClip({
            type: 'rect',
            attrs: {
                x: scrollX + frozenColGroupWidth,
                y: frozenTrailingRowGroup.getBBox().minY,
                width: panelScrollGroupWidth,
                height: frozenTrailingRowGroupHeight,
            },
        });
        var colClipArea = {
            y: scrollY + frozenRowGroupHeight,
            height: panelScrollGroupHeight,
        };
        frozenColGroup === null || frozenColGroup === void 0 ? void 0 : frozenColGroup.setClip({
            type: 'rect',
            attrs: __assign(__assign({}, colClipArea), { x: 0, width: frozenColGroupWidth }),
        });
        frozenTrailingColGroup === null || frozenTrailingColGroup === void 0 ? void 0 : frozenTrailingColGroup.setClip({
            type: 'rect',
            attrs: __assign(__assign({}, colClipArea), { x: (_b = frozenTrailingColBBox === null || frozenTrailingColBBox === void 0 ? void 0 : frozenTrailingColBBox.minX) !== null && _b !== void 0 ? _b : 0, width: (_c = frozenTrailingColBBox === null || frozenTrailingColBBox === void 0 ? void 0 : frozenTrailingColBBox.width) !== null && _c !== void 0 ? _c : 0 }),
        });
    };
    FrozenFacet.prototype.init = function () {
        _super.prototype.init.call(this);
    };
    FrozenFacet.prototype.render = function () {
        this.calculateFrozenGroupInfo();
        _super.prototype.render.call(this);
        this.initFrozenGroupPosition();
    };
    FrozenFacet.prototype.getFrozenOptionsDirectly = function () {
        var colLength = this.layoutResult.colLeafNodes.length;
        var cellRange = this.getCellRange();
        return getValidFrozenOptions(this.getBizRevisedFrozenOptions(), colLength, cellRange.end - cellRange.start + 1);
    };
    FrozenFacet.prototype.getBizRevisedFrozenOptions = function () {
        var _a = this.cfg, frozenColCount = _a.frozenColCount, frozenRowCount = _a.frozenRowCount, frozenTrailingColCount = _a.frozenTrailingColCount, frozenTrailingRowCount = _a.frozenTrailingRowCount;
        return {
            frozenColCount: frozenColCount,
            frozenRowCount: frozenRowCount,
            frozenTrailingColCount: frozenTrailingColCount,
            frozenTrailingRowCount: frozenTrailingRowCount,
        };
    };
    FrozenFacet.prototype.getDefaultCellHeight = function () {
        var _a;
        var cellCfg = this.cfg.cellCfg;
        return (_a = cellCfg === null || cellCfg === void 0 ? void 0 : cellCfg.height) !== null && _a !== void 0 ? _a : 0;
    };
    return FrozenFacet;
}(BaseFacet));

/**
 * 自定义🌲结构设计原则：
 * 1、渲染的节点全部跟着定义的数据结构走，如果需要结构变（数据挂父节点）等场景，建议直接改
 * 传入的customTreeItems配置
 * 2、没有总计小计的概念，如果有类似的，建议也是直接改customTreeItems配置
 * 3、是否展开和收起完全由 customTreeItem.collapsed 来控制（默认都展开）
 * @param params
 */
var buildRowCustomTreeHierarchy = function (params) {
    var e_1, _a, _b;
    var facetCfg = params.facetCfg, _c = params.customTreeItems, customTreeItems = _c === void 0 ? [] : _c, level = params.level, parentNode = params.parentNode, hierarchy = params.hierarchy;
    var spreadsheet = facetCfg.spreadsheet, collapsedRows = facetCfg.collapsedRows, hierarchyCollapse = facetCfg.hierarchyCollapse;
    try {
        for (var customTreeItems_1 = __values(customTreeItems), customTreeItems_1_1 = customTreeItems_1.next(); !customTreeItems_1_1.done; customTreeItems_1_1 = customTreeItems_1.next()) {
            var customTreeItem = customTreeItems_1_1.value;
            var key = customTreeItem.key, title = customTreeItem.title, collapsed = customTreeItem.collapsed, children = customTreeItem.children, rest = __rest(customTreeItem, ["key", "title", "collapsed", "children"]);
            // query只与值本身有关，不会涉及到parent节点
            var valueQuery = (_b = {}, _b[EXTRA_FIELD] = key, _b);
            // 保持和其他场景头部生成id的格式一致
            var uniqueId = generateId(parentNode.id, title);
            var defaultCollapsed = collapsed !== null && collapsed !== void 0 ? collapsed : false;
            var isCollapsedRow = get(collapsedRows, uniqueId);
            var isCollapsed = isCollapsedRow !== null && isCollapsedRow !== void 0 ? isCollapsedRow : (hierarchyCollapse || defaultCollapsed);
            var node = new Node$1({
                id: uniqueId,
                key: key,
                label: title,
                value: title,
                level: level,
                parent: parentNode,
                field: key,
                isTotals: false,
                isCollapsed: isCollapsed,
                hierarchy: hierarchy,
                query: valueQuery,
                spreadsheet: spreadsheet,
                extra: rest,
            });
            if (level > hierarchy.maxLevel) {
                hierarchy.maxLevel = level;
            }
            if (isEmpty(children)) {
                node.isLeaf = true;
            }
            var expandCurrentNode = layoutHierarchy(facetCfg, parentNode, node, hierarchy);
            // go recursive
            if (!isEmpty(children) && !isCollapsed && expandCurrentNode) {
                buildRowCustomTreeHierarchy({
                    facetCfg: facetCfg,
                    parentNode: node,
                    level: level + 1,
                    hierarchy: hierarchy,
                    customTreeItems: children,
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (customTreeItems_1_1 && !customTreeItems_1_1.done && (_a = customTreeItems_1.return)) _a.call(customTreeItems_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};

var addTotals = function (spreadsheet, currentField, fieldValues) {
    var totalsConfig = spreadsheet.getTotalsConfig(currentField);
    // tree mode only has grand totals, but if there are subTotals configs,
    // it will display in cross-area cell
    // TODO valueInCol = false and one or more values
    if (totalsConfig.showGrandTotals) {
        var func = totalsConfig.reverseLayout ? 'unshift' : 'push';
        fieldValues[func](new TotalClass({
            label: totalsConfig.label,
            isSubTotals: false,
            isGrandTotals: true,
        }));
    }
};
/**
 * Only row header has tree hierarchy, in this scene:
 * 1、value in rows is not work => valueInCols is ineffective
 * 2、can't add extra sub total node in row
 * @param params
 */
var buildRowTreeHierarchy = function (params) {
    var e_1, _a, _b;
    var _c, _d, _e;
    var parentNode = params.parentNode, currentField = params.currentField, level = params.level, facetCfg = params.facetCfg, hierarchy = params.hierarchy, pivotMeta = params.pivotMeta;
    var spreadsheet = facetCfg.spreadsheet, collapsedRows = facetCfg.collapsedRows, hierarchyCollapse = facetCfg.hierarchyCollapse, rowExpandDepth = facetCfg.rowExpandDepth;
    var query = parentNode.query, parentId = parentNode.id;
    var isDrillDownItem = ((_c = spreadsheet.dataCfg.fields.rows) === null || _c === void 0 ? void 0 : _c.length) <= level;
    var dimValues = filterOutDetail(Array.from(pivotMeta.keys()));
    var fieldValues = layoutArrange(dimValues, facetCfg, parentNode, currentField);
    // limit displayed drill down data by drillItemsNum
    var drillItemsNum = spreadsheet.store.get('drillItemsNum');
    if (isDrillDownItem && drillItemsNum > 0) {
        fieldValues = fieldValues.slice(0, drillItemsNum);
    }
    if (level === 0) {
        addTotals(spreadsheet, currentField, fieldValues);
    }
    try {
        for (var fieldValues_1 = __values(fieldValues), fieldValues_1_1 = fieldValues_1.next(); !fieldValues_1_1.done; fieldValues_1_1 = fieldValues_1.next()) {
            var fieldValue = fieldValues_1_1.value;
            var isTotals = fieldValue instanceof TotalClass;
            var pivotMetaValue = isTotals
                ? null
                : pivotMeta.get(fieldValue);
            var value = void 0;
            var nodeQuery = query;
            var isGrandTotals = false;
            var isSubTotals = false;
            if (isTotals) {
                var totalClass = fieldValue;
                isGrandTotals = totalClass.isGrandTotals;
                isSubTotals = totalClass.isSubTotals;
                value = i18n(fieldValue.label);
                nodeQuery = query;
            }
            else {
                value = fieldValue;
                nodeQuery = __assign(__assign({}, query), (_b = {}, _b[currentField] = value, _b));
            }
            var uniqueId = generateId(parentId, value);
            // 行头收起/展开配置优先级:collapseRows -> rowExpandDepth -> hierarchyCollapse
            // 优先从读取 collapseRows 中的特定 node 的值
            // 如果没有特定配置，再查看是否配置了层级展开配置，
            // 最后再降级到 hierarchyCollapse 中
            var isCollapsedRow = collapsedRows === null || collapsedRows === void 0 ? void 0 : collapsedRows[uniqueId];
            // 如果 level 大于 rowExpandDepth或者没有配置层级展开配置时，返回null，保证能正确降级到 hierarchyCollapse
            var isLevelCollapsed = isNumber(rowExpandDepth)
                ? level > rowExpandDepth
                : null;
            var isCollapse = (_d = isCollapsedRow !== null && isCollapsedRow !== void 0 ? isCollapsedRow : isLevelCollapsed) !== null && _d !== void 0 ? _d : hierarchyCollapse;
            var node = new Node$1({
                id: uniqueId,
                key: currentField,
                label: value,
                value: value,
                level: level,
                parent: parentNode,
                field: currentField,
                isTotals: isTotals,
                isGrandTotals: isGrandTotals,
                isSubTotals: isSubTotals,
                isCollapsed: isCollapse,
                hierarchy: hierarchy,
                query: nodeQuery,
                spreadsheet: spreadsheet,
            });
            if (level > hierarchy.maxLevel) {
                hierarchy.maxLevel = level;
            }
            var emptyChildren = !((_e = pivotMetaValue === null || pivotMetaValue === void 0 ? void 0 : pivotMetaValue.children) === null || _e === void 0 ? void 0 : _e.size);
            if (emptyChildren || isTotals) {
                node.isLeaf = true;
            }
            if (!emptyChildren) {
                node.isTotals = true;
            }
            var expandCurrentNode = layoutHierarchy(facetCfg, parentNode, node, hierarchy);
            if (!emptyChildren && !isCollapse && !isTotals && expandCurrentNode) {
                buildRowTreeHierarchy({
                    level: level + 1,
                    currentField: pivotMetaValue.childField,
                    pivotMeta: pivotMetaValue.children,
                    facetCfg: facetCfg,
                    parentNode: node,
                    hierarchy: hierarchy,
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (fieldValues_1_1 && !fieldValues_1_1.done && (_a = fieldValues_1.return)) _a.call(fieldValues_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};

var handleGridRowColHierarchy = function (params) {
    var isValueInCols = params.isValueInCols, moreThanOneValue = params.moreThanOneValue, rootNode = params.rootNode, facetCfg = params.facetCfg, hierarchy = params.hierarchy, fields = params.fields, isRowHeader = params.isRowHeader;
    // add new total measure in total node
    var addTotalMeasureInTotal;
    // add measure info in total query
    var addMeasureInTotalQuery;
    if (isRowHeader) {
        addTotalMeasureInTotal = !isValueInCols && moreThanOneValue;
        addMeasureInTotalQuery = !isValueInCols && !moreThanOneValue;
    }
    else {
        addTotalMeasureInTotal = isValueInCols && moreThanOneValue;
        addMeasureInTotalQuery = isValueInCols && !moreThanOneValue;
    }
    buildGridHierarchy({
        addTotalMeasureInTotal: addTotalMeasureInTotal,
        addMeasureInTotalQuery: addMeasureInTotalQuery,
        parentNode: rootNode,
        currentField: fields[0],
        fields: fields,
        facetCfg: facetCfg,
        hierarchy: hierarchy,
    });
};
var handleCustomTreeRowHierarchy = function (params) {
    var facetCfg = params.facetCfg, rootNode = params.rootNode, hierarchy = params.hierarchy;
    var customTreeItems = facetCfg.dataSet.fields.customTreeItems;
    // row custom tree header
    buildRowCustomTreeHierarchy({
        customTreeItems: customTreeItems,
        facetCfg: facetCfg,
        level: 0,
        parentNode: rootNode,
        hierarchy: hierarchy,
    });
};
var handleTreeRowHierarchy = function (params) {
    var facetCfg = params.facetCfg, rootNode = params.rootNode, hierarchy = params.hierarchy;
    var hierarchyType = facetCfg.hierarchyType, rows = facetCfg.rows, dataSet = facetCfg.dataSet;
    if (hierarchyType === 'tree') {
        // row tree hierarchy(value must stay in colHeader)
        buildRowTreeHierarchy({
            level: 0,
            currentField: rows[0],
            pivotMeta: dataSet.rowPivotMeta,
            facetCfg: facetCfg,
            parentNode: rootNode,
            hierarchy: hierarchy,
        });
    }
    else {
        handleCustomTreeRowHierarchy(params);
    }
};
var handleRowHeaderHierarchy = function (params) {
    // 只有透视表有行头
    var spreadsheet = params.spreadsheet;
    if (spreadsheet.isHierarchyTreeType()) {
        handleTreeRowHierarchy(params);
    }
    else {
        handleGridRowColHierarchy(params);
    }
};
var handleColHeaderHierarchy = function (params) {
    var isPivotMode = params.isPivotMode, hierarchy = params.hierarchy, rootNode = params.rootNode, facetCfg = params.facetCfg;
    if (isPivotMode) {
        handleGridRowColHierarchy(params);
    }
    else {
        buildTableHierarchy({
            parentNode: rootNode,
            hierarchy: hierarchy,
            facetCfg: facetCfg,
        });
    }
};
/**
 * Header Hierarchy
 * - row header
 *   - tree layout
 *     - custom tree layout
 *   - grid layout
 *   - table layout
 * - col header
 *   - grid layout
 *     - single value
 *       - total + sub_total
 *     - more than one value
 *       - total + sub_total
 *         - separate by values
 *   - table layout
 * @param params
 */
var buildHeaderHierarchy = function (params) {
    var isRowHeader = params.isRowHeader, facetCfg = params.facetCfg;
    var spreadsheet = facetCfg.spreadsheet, _a = facetCfg.rows, rows = _a === void 0 ? [] : _a, _b = facetCfg.columns, columns = _b === void 0 ? [] : _b;
    var isValueInCols = spreadsheet.dataCfg.fields.valueInCols;
    var isPivotMode = spreadsheet.isPivotMode();
    var moreThanOneValue = facetCfg.dataSet.moreThanOneValue();
    var rootNode = Node$1.rootNode();
    var hierarchy = new Hierarchy();
    var headParams = {
        isValueInCols: isValueInCols,
        isPivotMode: isPivotMode,
        moreThanOneValue: moreThanOneValue,
        rootNode: rootNode,
        hierarchy: hierarchy,
        spreadsheet: spreadsheet,
        facetCfg: facetCfg,
        fields: isRowHeader ? rows : columns,
        isRowHeader: isRowHeader,
    };
    if (isRowHeader) {
        handleRowHeaderHierarchy(headParams);
    }
    else {
        handleColHeaderHierarchy(headParams);
    }
    var getLeafNodes = function () {
        if (!isRowHeader) {
            return hierarchy.getLeaves();
        }
        return spreadsheet.isHierarchyTreeType()
            ? hierarchy.getNodes()
            : hierarchy.getLeaves();
    };
    return {
        hierarchy: hierarchy,
        leafNodes: getLeafNodes(),
    };
};

var PivotFacet = /** @class */ (function (_super) {
    __extends(PivotFacet, _super);
    function PivotFacet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderFrozenGroupSplitLine = function (scrollX, scrollY) {
            var _a;
            // remove previous splitline group
            (_a = _this.foregroundGroup.findById(KEY_GROUP_FROZEN_SPLIT_LINE)) === null || _a === void 0 ? void 0 : _a.remove();
            if (_this.enableFrozenFirstRow()) {
                // 在分页条件下需要额外处理 Y 轴滚动值
                var relativeScrollY = Math.floor(scrollY - _this.getPaginationScrollY());
                var splitLineGroup = _this.foregroundGroup.addGroup({
                    id: KEY_GROUP_FROZEN_SPLIT_LINE,
                    zIndex: FRONT_GROUND_GROUP_FROZEN_Z_INDEX,
                });
                var style = get(_this.cfg, 'spreadsheet.theme.splitLine');
                var horizontalBorderStyle = {
                    lineWidth: style === null || style === void 0 ? void 0 : style.horizontalBorderWidth,
                    stroke: style === null || style === void 0 ? void 0 : style.horizontalBorderColor,
                    opacity: style === null || style === void 0 ? void 0 : style.horizontalBorderColorOpacity,
                };
                var cornerHeight = _this.cornerBBox.height;
                var cellRange = _this.getCellRange();
                var y = cornerHeight +
                    _this.getTotalHeightForRange(cellRange.start, cellRange.start);
                var width = _this.panelBBox.viewportWidth +
                    _this.layoutResult.rowsHierarchy.width +
                    _this.getSeriesNumberWidth();
                renderLine(splitLineGroup, {
                    x1: 0,
                    x2: width,
                    y1: y,
                    y2: y,
                }, __assign({}, horizontalBorderStyle));
                if (style.showShadow && relativeScrollY > 0) {
                    splitLineGroup.addShape('rect', {
                        attrs: {
                            x: 0,
                            y: y,
                            width: width,
                            height: style.shadowWidth,
                            fill: _this.getShadowFill(90),
                        },
                    });
                }
            }
        };
        return _this;
    }
    PivotFacet.prototype.updateFrozenGroupGrid = function () {
        var _this = this;
        [FrozenGroup$1.FROZEN_ROW].forEach(function (key) {
            if (!_this.frozenGroupInfo[key].range) {
                return;
            }
            var cols = [];
            var rows = [];
            if (key.toLowerCase().includes('row')) {
                var _a = __read(_this.frozenGroupInfo[key].range, 2), rowMin = _a[0], rowMax = _a[1];
                cols = _this.gridInfo.cols;
                rows = getRowsForGrid(rowMin, rowMax, _this.viewCellHeights);
            }
            _this.spreadsheet["".concat(key, "Group")].updateGrid({
                cols: cols,
                rows: rows,
            }, "".concat(key, "Group"));
        });
    };
    PivotFacet.prototype.getBizRevisedFrozenOptions = function () {
        return getFrozenRowCfgPivot(this.cfg, this.layoutResult.rowNodes);
    };
    PivotFacet.prototype.clip = function (scrollX, scrollY) {
        var _a = this.spreadsheet, isFrozenRowHeader = _a.isFrozenRowHeader, frozenRowGroup = _a.frozenRowGroup;
        if (!isFrozenRowHeader.call(this.spreadsheet)) {
            // adapt: close the entire frozen header.
            // 1. panelScrollGroup clip (default)
            // 2. frozenRowGroup clip
            this.panelScrollGroupClip(scrollX, scrollY);
            if (this.enableFrozenFirstRow()) {
                var paginationScrollY = this.getPaginationScrollY();
                frozenRowGroup.setClip({
                    type: 'rect',
                    attrs: {
                        x: 0,
                        y: paginationScrollY,
                        width: this.panelBBox.width + scrollX,
                        height: frozenRowGroup.getBBox().height,
                    },
                });
            }
            return;
        }
        _super.prototype.clip.call(this, scrollX, scrollY);
    };
    Object.defineProperty(PivotFacet.prototype, "rowCellTheme", {
        get: function () {
            return this.spreadsheet.theme.rowCell.cell;
        },
        enumerable: false,
        configurable: true
    });
    PivotFacet.prototype.getContentHeight = function () {
        var _a = this.layoutResult, rowsHierarchy = _a.rowsHierarchy, colsHierarchy = _a.colsHierarchy;
        return rowsHierarchy.height + colsHierarchy.height;
    };
    PivotFacet.prototype.doLayout = function () {
        // 1、layout all nodes in rowHeader and colHeader
        var _a = buildHeaderHierarchy({
            isRowHeader: true,
            facetCfg: this.cfg,
        }), rowLeafNodes = _a.leafNodes, rowsHierarchy = _a.hierarchy;
        var _b = buildHeaderHierarchy({
            isRowHeader: false,
            facetCfg: this.cfg,
        }), colLeafNodes = _b.leafNodes, colsHierarchy = _b.hierarchy;
        // 2、calculate all related nodes coordinate
        this.calculateNodesCoordinate(rowLeafNodes, rowsHierarchy, colLeafNodes, colsHierarchy);
        var _c = this.cfg, dataSet = _c.dataSet, spreadsheet = _c.spreadsheet;
        var getCellMeta = function (rowIndex, colIndex) {
            var _a;
            var _b, _c;
            var i = rowIndex || 0;
            var j = colIndex || 0;
            var row = rowLeafNodes[i];
            var col = colLeafNodes[j];
            if (!row || !col) {
                return null;
            }
            var rowQuery = row.query;
            var colQuery = col.query;
            var isTotals = row.isTotals ||
                row.isTotalMeasure ||
                col.isTotals ||
                col.isTotalMeasure;
            var hierarchyType = spreadsheet.options.hierarchyType;
            var hideMeasure = (_b = get(spreadsheet, 'facet.cfg.colCfg.hideMeasureColumn')) !== null && _b !== void 0 ? _b : false;
            // 如果在非自定义目录情况下hide measure query中是没有度量信息的，所以需要自动补上
            // 存在一个场景的冲突，如果是多个度量，定位数据数据是无法知道哪一列代表什么
            // 因此默认只会去 第一个度量拼接query
            var measureInfo = hideMeasure && hierarchyType !== 'customTree'
                ? (_a = {},
                    _a[EXTRA_FIELD] = (_c = dataSet.fields.values) === null || _c === void 0 ? void 0 : _c[0],
                    _a) : {};
            var dataQuery = merge$1({}, rowQuery, colQuery, measureInfo);
            var totalStatus = getHeaderTotalStatus(row, col);
            var data = dataSet.getCellData({
                query: dataQuery,
                rowNode: row,
                isTotals: isTotals,
                totalStatus: totalStatus,
            });
            var valueField = dataQuery[EXTRA_FIELD];
            var fieldValue = get(data, VALUE_FIELD, null);
            return {
                spreadsheet: spreadsheet,
                x: col.x,
                y: row.y,
                width: col.width,
                height: row.height,
                data: data,
                rowIndex: i,
                colIndex: j,
                isTotals: isTotals,
                valueField: valueField,
                fieldValue: fieldValue,
                rowQuery: rowQuery,
                colQuery: colQuery,
                rowId: row.id,
                colId: col.id,
                id: getDataCellId(row.id, col.id),
            };
        };
        var layoutResult = {
            colNodes: colsHierarchy.getNodes(),
            colsHierarchy: colsHierarchy,
            rowNodes: rowsHierarchy.getNodes(),
            rowsHierarchy: rowsHierarchy,
            rowLeafNodes: rowLeafNodes,
            colLeafNodes: colLeafNodes,
            getCellMeta: getCellMeta,
            spreadsheet: spreadsheet,
        };
        return layoutDataPosition(this.cfg, layoutResult);
    };
    PivotFacet.prototype.calculateNodesCoordinate = function (rowLeafNodes, rowsHierarchy, colLeafNodes, colsHierarchy) {
        this.calculateRowNodesCoordinate(rowLeafNodes, rowsHierarchy, colLeafNodes);
        this.calculateColNodesCoordinate(colLeafNodes, colsHierarchy, rowLeafNodes, rowsHierarchy.width);
    };
    /**
     * Calculate all col header related coordinate
     * height, width, x, y
     * colsHierarchy's height
     * colsHierarchy's width
     * @param colLeafNodes
     * @param colsHierarchy
     * @param rowLeafNodes
     * @param rowHeaderWidth
     */
    PivotFacet.prototype.calculateColNodesCoordinate = function (colLeafNodes, colsHierarchy, rowLeafNodes, rowHeaderWidth) {
        var _a, _b, _c;
        var preLeafNode = Node$1.blankNode();
        var allNodes = colsHierarchy.getNodes();
        var sampleNodesForAllLevels = colsHierarchy.sampleNodesForAllLevels;
        for (var level = 0; level < sampleNodesForAllLevels.length; level++) {
            var levelSample = sampleNodesForAllLevels[level];
            levelSample.height = this.getColNodeHeight(levelSample);
            colsHierarchy.height += levelSample.height;
            if (levelSample.level === 0) {
                levelSample.y = 0;
            }
            else {
                var preLevelSample = sampleNodesForAllLevels[level - 1];
                levelSample.y = (_a = (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.y) + (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.height)) !== null && _a !== void 0 ? _a : 0;
            }
        }
        var currentCollIndex = 0;
        var _loop_1 = function (i) {
            var currentNode = allNodes[i];
            if (currentNode.isLeaf) {
                currentNode.colIndex = currentCollIndex;
                currentCollIndex += 1;
                currentNode.x = preLeafNode.x + preLeafNode.width;
                currentNode.width = this_1.calculateColLeafNodesWidth(currentNode, colLeafNodes, rowLeafNodes, rowHeaderWidth);
                colsHierarchy.width += currentNode.width;
                preLeafNode = currentNode;
            }
            if (currentNode.level === 0) {
                currentNode.y = 0;
            }
            else {
                var preLevelSample = colsHierarchy.sampleNodesForAllLevels.find(function (n) { return n.level === currentNode.level - 1; });
                currentNode.y = (_b = (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.y) + (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.height)) !== null && _b !== void 0 ? _b : 0;
            }
            currentNode.height = this_1.getColNodeHeight(currentNode);
            layoutCoordinate(this_1.cfg, null, currentNode);
        };
        var this_1 = this;
        for (var i = 0; i < allNodes.length; i++) {
            _loop_1(i);
        }
        this.autoCalculateColNodeWidthAndX(colLeafNodes);
        if (!isEmpty((_c = this.spreadsheet.options.totals) === null || _c === void 0 ? void 0 : _c.col)) {
            this.adjustTotalNodesCoordinate({
                hierarchy: colsHierarchy,
                isRowHeader: false,
                isSubTotal: true,
            });
            this.adjustTotalNodesCoordinate({
                hierarchy: colsHierarchy,
                isRowHeader: false,
                isSubTotal: false,
            });
        }
    };
    /**
     * Auto Auto Auto column no-leaf node's width and x coordinate
     * @param colLeafNodes
     */
    PivotFacet.prototype.autoCalculateColNodeWidthAndX = function (colLeafNodes) {
        var _a;
        var prevColParent = null;
        var i = 0;
        var leafNodes = colLeafNodes.slice(0);
        while (i < leafNodes.length) {
            var node = leafNodes[i++];
            var parentNode = node.parent;
            if (prevColParent !== parentNode && parentNode) {
                leafNodes.push(parentNode);
                var firstVisibleChildNode = (_a = parentNode.children) === null || _a === void 0 ? void 0 : _a.find(function (childNode) { return childNode.width; });
                // 父节点 x 坐标 = 第一个正常布局处理过的子节点 x 坐标(width 有值认为是正常布局过)
                var parentNodeX = firstVisibleChildNode === null || firstVisibleChildNode === void 0 ? void 0 : firstVisibleChildNode.x;
                // 父节点宽度 = 所有子节点宽度之和
                var parentNodeWidth = sumBy(parentNode.children, 'width');
                parentNode.x = parentNodeX;
                parentNode.width = parentNodeWidth;
                prevColParent = parentNode;
            }
        }
    };
    PivotFacet.prototype.calculateColLeafNodesWidth = function (col, colLeafNodes, rowLeafNodes, rowHeaderWidth) {
        var _a, _b, _c, _d, _e;
        var _f = this.cfg, colCfg = _f.colCfg, dataSet = _f.dataSet, filterDisplayDataItem = _f.filterDisplayDataItem;
        var cellDraggedWidth = this.getCellDraggedWidth(col);
        // 1. 拖拽后的宽度优先级最高
        if (isNumber(cellDraggedWidth)) {
            return cellDraggedWidth;
        }
        // 2. 其次是自定义, 返回 null 则使用默认宽度
        var cellCustomWidth = this.getCellCustomWidth(col, colCfg === null || colCfg === void 0 ? void 0 : colCfg.width);
        if (isNumber(cellCustomWidth)) {
            return cellCustomWidth;
        }
        // 3. 紧凑布局
        if (this.spreadsheet.getLayoutWidthType() === LayoutWidthTypes.Compact) {
            var _g = this.spreadsheet.theme.colCell, colCellTextStyle = _g.bolderText, colCellStyle = _g.cell, colIconStyle = _g.icon;
            var dataCellTextStyle = this.spreadsheet.theme.dataCell.text;
            // leaf node rough width
            var cellFormatter = this.spreadsheet.dataSet.getFieldFormatter(col.field);
            var leafNodeLabel = (_a = cellFormatter === null || cellFormatter === void 0 ? void 0 : cellFormatter(col.value)) !== null && _a !== void 0 ? _a : col.label;
            var iconWidth = this.getExpectedCellIconWidth(CellTypes.COL_CELL, this.spreadsheet.isValueInCols() &&
                this.spreadsheet.options.showDefaultHeaderActionIcon, colIconStyle);
            var leafNodeRoughWidth = this.spreadsheet.measureTextWidthRoughly(leafNodeLabel, colCellTextStyle) + iconWidth;
            // 采样 50 个 label，逐个计算找出最长的 label
            var maxDataLabel = void 0;
            var maxDataLabelWidth = 0;
            for (var index = 0; index < LAYOUT_SAMPLE_COUNT; index++) {
                var rowNode = rowLeafNodes[index];
                if (rowNode) {
                    var cellData = dataSet.getCellData({
                        query: __assign(__assign({}, col.query), rowNode.query),
                        rowNode: rowNode,
                        isTotals: col.isTotals ||
                            col.isTotalMeasure ||
                            rowNode.isTotals ||
                            rowNode.isTotalMeasure,
                        totalStatus: getHeaderTotalStatus(rowNode, col),
                    });
                    if (cellData) {
                        // 总小计格子不一定有数据
                        var valueData = handleDataItem(cellData, filterDisplayDataItem);
                        var formattedValue = (_c = (_b = this.spreadsheet.dataSet.getFieldFormatter(cellData[EXTRA_FIELD])) === null || _b === void 0 ? void 0 : _b(valueData)) !== null && _c !== void 0 ? _c : valueData;
                        var cellLabel = "".concat(formattedValue);
                        var cellLabelWidth = this.spreadsheet.measureTextWidthRoughly(cellLabel, dataCellTextStyle);
                        if (cellLabelWidth > maxDataLabelWidth) {
                            maxDataLabel = cellLabel;
                            maxDataLabelWidth = cellLabelWidth;
                        }
                    }
                }
            }
            var isLeafNodeWidthLonger = leafNodeRoughWidth > maxDataLabelWidth;
            var maxLabel = isLeafNodeWidthLonger ? leafNodeLabel : maxDataLabel;
            var appendedWidth = isLeafNodeWidthLonger ? iconWidth : 0;
            DebuggerUtil.getInstance().logger('Max Label In Col:', col.field, maxLabel, maxDataLabelWidth);
            // 取列头/数值字体最大的文本宽度 https://github.com/antvis/S2/issues/2385
            var maxTextWidth = this.spreadsheet.measureTextWidth(maxLabel, __assign(__assign({}, colCellTextStyle), { fontSize: Math.max(dataCellTextStyle.fontSize, colCellTextStyle.fontSize) }));
            return (maxTextWidth +
                ((_d = colCellStyle.padding) === null || _d === void 0 ? void 0 : _d.left) +
                ((_e = colCellStyle.padding) === null || _e === void 0 ? void 0 : _e.right) +
                appendedWidth);
        }
        // 4. 自适应 adaptive
        // 4.1 树状自定义
        if (this.spreadsheet.isHierarchyTreeType()) {
            return this.getAdaptTreeColWidth(col, colLeafNodes, rowLeafNodes);
        }
        // 4.2 网格自定义
        return this.getAdaptGridColWidth(colLeafNodes, rowHeaderWidth);
    };
    PivotFacet.prototype.getColNodeHeight = function (col) {
        var colCfg = this.cfg.colCfg;
        var userDraggedHeight = get(colCfg, ['heightByField', col.key]);
        return userDraggedHeight !== null && userDraggedHeight !== void 0 ? userDraggedHeight : colCfg === null || colCfg === void 0 ? void 0 : colCfg.height;
    };
    /**
     * 获得图标区域预估宽度
     * 不考虑用户自定义的 displayCondition 条件
     * @param iconStyle 图标样式
     * @returns 宽度
     */
    PivotFacet.prototype.getExpectedCellIconWidth = function (cellType, useDefaultIcon, iconStyle) {
        var _a;
        // count icons
        var iconCount = 0;
        if (useDefaultIcon) {
            iconCount = 1;
        }
        else {
            var customIcons = getActionIconConfig(map(this.spreadsheet.options.headerActionIcons, function (iconCfg) { return (__assign(__assign({}, iconCfg), { 
                // ignore condition func when layout calc
                displayCondition: function () { return true; } })); }), null, cellType);
            iconCount = (_a = customIcons === null || customIcons === void 0 ? void 0 : customIcons.iconNames.length) !== null && _a !== void 0 ? _a : 0;
        }
        // calc width
        return iconCount
            ? iconCount * (iconStyle.size + iconStyle.margin.left) +
                iconStyle.margin.right
            : 0;
    };
    /**
     * Calculate all row header related coordinate
     * height, width, x, y
     * rowHierarchy's height
     * rowHierarchy's width
     * @param rowLeafNodes
     * @param rowsHierarchy
     */
    PivotFacet.prototype.calculateRowNodesCoordinate = function (rowLeafNodes, rowsHierarchy, colLeafNodes) {
        var e_1, _a;
        var _b, _c, _d, _e, _f, _g, _h, _j;
        var _k = this.cfg, cellCfg = _k.cellCfg, spreadsheet = _k.spreadsheet;
        var isTree = spreadsheet.isHierarchyTreeType();
        var heightByField = get(spreadsheet, 'options.style.rowCfg.heightByField', {});
        var sampleNodeByLevel = (_b = rowsHierarchy.sampleNodesForAllLevels) !== null && _b !== void 0 ? _b : [];
        // 1、calculate first node's width in every level
        if (isTree) {
            rowsHierarchy.width = this.getTreeRowHeaderWidth();
        }
        else {
            try {
                for (var _l = __values(rowsHierarchy.sampleNodesForAllLevels), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var levelSample = _m.value;
                    levelSample.width = this.calculateGridRowNodesWidth(levelSample, colLeafNodes);
                    rowsHierarchy.width += levelSample.width;
                    var preLevelSample = (_c = sampleNodeByLevel[levelSample.level - 1]) !== null && _c !== void 0 ? _c : {
                        x: 0,
                        width: 0,
                    };
                    levelSample.x = (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.x) + (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.width);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_a = _l.return)) _a.call(_l);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // 2、calculate node's height & y（leaf nodes）, x-coordinate & width(all nodes), height & y (not-leaf),
        var preLeafNode = Node$1.blankNode();
        var allNodes = rowsHierarchy.getNodes();
        for (var i = 0; i < allNodes.length; i++) {
            var currentNode = allNodes[i];
            // in tree type, all nodes treat as leaf
            var isLeaf = isTree || (!isTree && currentNode.isLeaf);
            if (isLeaf) {
                // leaf node
                (_d = currentNode.rowIndex) !== null && _d !== void 0 ? _d : (currentNode.rowIndex = i);
                (_e = currentNode.colIndex) !== null && _e !== void 0 ? _e : (currentNode.colIndex = i);
                currentNode.y = preLeafNode.y + preLeafNode.height;
                currentNode.height =
                    ((_f = heightByField === null || heightByField === void 0 ? void 0 : heightByField[currentNode.id]) !== null && _f !== void 0 ? _f : cellCfg === null || cellCfg === void 0 ? void 0 : cellCfg.height) +
                        ((_g = this.rowCellTheme.padding) === null || _g === void 0 ? void 0 : _g.top) +
                        ((_h = this.rowCellTheme.padding) === null || _h === void 0 ? void 0 : _h.bottom);
                preLeafNode = currentNode;
                // mark row hierarchy's height
                rowsHierarchy.height += currentNode.height;
            }
            // calc node.x
            if (isTree || currentNode.level === 0) {
                currentNode.x = 0;
            }
            else {
                var preLevelSample = sampleNodeByLevel[currentNode.level - 1];
                currentNode.x = (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.x) + (preLevelSample === null || preLevelSample === void 0 ? void 0 : preLevelSample.width);
            }
            // calc node.width
            if (isTree) {
                currentNode.width = this.getTreeRowHeaderWidth();
            }
            else {
                // same level -> same width
                var levelSampleNode = sampleNodeByLevel[currentNode.level];
                currentNode.width = levelSampleNode === null || levelSampleNode === void 0 ? void 0 : levelSampleNode.width;
            }
            layoutCoordinate(this.cfg, currentNode, null);
        }
        if (!isTree) {
            this.autoCalculateRowNodeHeightAndY(rowLeafNodes);
            if (!isEmpty((_j = spreadsheet.options.totals) === null || _j === void 0 ? void 0 : _j.row)) {
                this.adjustTotalNodesCoordinate({
                    hierarchy: rowsHierarchy,
                    isRowHeader: true,
                    isSubTotal: false,
                });
                this.adjustTotalNodesCoordinate({
                    hierarchy: rowsHierarchy,
                    isRowHeader: true,
                    isSubTotal: true,
                });
            }
        }
    };
    /**
     * @description Auto calculate row no-leaf node's height and y coordinate
     * @param rowLeafNodes
     */
    PivotFacet.prototype.autoCalculateRowNodeHeightAndY = function (rowLeafNodes) {
        var prevRowParent = null;
        var i = 0;
        var leafNodes = rowLeafNodes.slice(0);
        while (i < leafNodes.length) {
            var node = leafNodes[i++];
            var parent_1 = node.parent;
            if (prevRowParent !== parent_1 && parent_1) {
                leafNodes.push(parent_1);
                // parent's y = first child's y
                parent_1.y = parent_1.children[0].y;
                // parent's height = all children's height
                parent_1.height = parent_1.children.reduce(function (sum, current) { return sum + current.height; }, 0);
                prevRowParent = parent_1;
            }
        }
    };
    // please read README-adjustTotalNodesCoordinate.md to understand this function
    PivotFacet.prototype.getMultipleMap = function (hierarchy, isRowHeader, isSubTotal) {
        var maxLevel = hierarchy.maxLevel;
        var _a = this.cfg, totals = _a.totals, dataSet = _a.dataSet;
        var moreThanOneValue = dataSet.moreThanOneValue();
        var _b = dataSet.fields, rows = _b.rows, columns = _b.columns;
        var fields = isRowHeader ? rows : columns;
        var totalConfig = isRowHeader ? totals.row : totals.col;
        var dimensionGroup = isSubTotal
            ? totalConfig.subTotalsGroupDimensions || []
            : totalConfig.totalsGroupDimensions || [];
        var multipleMap = Array.from({ length: maxLevel + 1 }, function () { return 1; });
        for (var level = maxLevel; level > 0; level--) {
            var currentField = fields[level];
            // 若不符合【分组维度包含此维度】或【者指标维度下非单指标维度】，此表头单元格为空，将宽高合并到上级单元格
            var existValueField = currentField === EXTRA_FIELD && moreThanOneValue;
            if (!(dimensionGroup.includes(currentField) || existValueField)) {
                multipleMap[level - 1] += multipleMap[level];
                multipleMap[level] = 0;
            }
        }
        return multipleMap;
    };
    // please read README-adjustTotalNodesCoordinate.md to understand this function
    PivotFacet.prototype.adjustTotalNodesCoordinate = function (params) {
        var hierarchy = params.hierarchy, isRowHeader = params.isRowHeader, isSubTotal = params.isSubTotal;
        var multipleMap = this.getMultipleMap(hierarchy, isRowHeader, isSubTotal);
        var totalNodes = filter(hierarchy.getNodes(), function (node) {
            return isSubTotal ? node.isSubTotals : node.isGrandTotals;
        });
        var key = isRowHeader ? 'width' : 'height';
        forEach(totalNodes, function (node) {
            var multiple = multipleMap[node.level];
            // 小计根节点若为 0，则改为最近上级倍数 - level 差
            if (!multiple && isSubTotal) {
                var lowerLevelIndex = 1;
                while (multiple < 1) {
                    multiple =
                        multipleMap[node.level - lowerLevelIndex] - lowerLevelIndex;
                    lowerLevelIndex++;
                }
            }
            var res = 0;
            var _loop_2 = function (i) {
                res += hierarchy.sampleNodesForAllLevels.find(function (sampleNode) { return sampleNode.level === node.level + i; })[key];
            };
            for (var i = 0; i < multiple; i++) {
                _loop_2(i);
            }
            node[key] = res;
        });
    };
    /**
     * 计算 grid 模式下 node 宽度
     * @param node
     * @returns
     */
    PivotFacet.prototype.calculateGridRowNodesWidth = function (node, colLeafNodes) {
        var _a = this.cfg, rowCfg = _a.rowCfg, spreadsheet = _a.spreadsheet;
        var cellDraggedWidth = get(rowCfg, ['widthByField', node.key]);
        if (isNumber(cellDraggedWidth)) {
            return cellDraggedWidth;
        }
        var cellCustomWidth = this.getCellCustomWidth(node, rowCfg === null || rowCfg === void 0 ? void 0 : rowCfg.width);
        if (isNumber(cellCustomWidth)) {
            return cellCustomWidth;
        }
        if (spreadsheet.getLayoutWidthType() !== LayoutWidthTypes.Adaptive) {
            // compact or colAdaptive
            return this.getCompactGridRowWidth(node);
        }
        // adaptive
        return this.getAdaptGridColWidth(colLeafNodes);
    };
    /**
     *  计算树状模式等宽条件下的列宽
     * @returns number
     */
    PivotFacet.prototype.getAdaptTreeColWidth = function (col, colLeafNodes, rowLeafNodes) {
        // tree row width = [config width, canvas / 2]
        var canvasW = this.getCanvasHW().width;
        var availableWidth = canvasW - this.getSeriesNumberWidth();
        var rowHeaderWidth = Math.min(availableWidth / 2, this.getTreeRowHeaderWidth());
        // calculate col width
        var colSize = Math.max(1, colLeafNodes.length);
        var cellCfg = this.cfg.cellCfg;
        return Math.max(getCellWidth(cellCfg, this.getColLabelLength(col, rowLeafNodes)), (availableWidth - rowHeaderWidth) / colSize);
    };
    PivotFacet.prototype.getColLabelLength = function (col, rowLeafNodes) {
        var _a;
        // 如果 label 字段形如 "["xx","xxx"]"，直接获取其长度
        var labels = safeJsonParse(col === null || col === void 0 ? void 0 : col.value);
        if (isArray$1(labels)) {
            return labels.length;
        }
        // 采样前50，根据指标个数获取单元格列宽
        var maxLength = 1;
        for (var index = 0; index < LAYOUT_SAMPLE_COUNT; index++) {
            var rowNode = rowLeafNodes[index];
            if (!rowNode) {
                // 抽样个数大于叶子节点个数
                return maxLength;
            }
            var cellData = this.cfg.dataSet.getCellData({
                query: __assign(__assign({}, col.query), rowNode.query),
                rowNode: rowNode,
                isTotals: col.isTotals ||
                    col.isTotalMeasure ||
                    rowNode.isTotals ||
                    rowNode.isTotalMeasure,
                totalStatus: getHeaderTotalStatus(rowNode, col),
            });
            var cellDataKeys = keys(cellData === null || cellData === void 0 ? void 0 : cellData[ORIGIN_FIELD]);
            for (var j = 0; j < cellDataKeys.length; j++) {
                var dataValue = cellData[cellDataKeys[j]];
                var valueSize = size((_a = dataValue === null || dataValue === void 0 ? void 0 : dataValue.values) === null || _a === void 0 ? void 0 : _a[0]);
                if (valueSize > maxLength) {
                    // greater length
                    maxLength = valueSize;
                }
            }
        }
        return maxLength;
    };
    /**
     *  计算平铺模式等宽条件下的列宽
     * @returns number
     */
    PivotFacet.prototype.getAdaptGridColWidth = function (colLeafNodes, rowHeaderWidth) {
        var _a = this.cfg, rows = _a.rows, cellCfg = _a.cellCfg;
        var rowHeaderColSize = rows.length;
        var colHeaderColSize = colLeafNodes.length;
        var canvasW = this.getCanvasHW().width;
        var availableWidth = canvasW - this.getSeriesNumberWidth();
        var size = Math.max(1, rowHeaderColSize + colHeaderColSize);
        if (!rowHeaderWidth) {
            return Math.max(getCellWidth(cellCfg), availableWidth / size);
        }
        return Math.max(getCellWidth(cellCfg), (availableWidth - rowHeaderWidth) / colHeaderColSize);
    };
    /**
     * 计算树状结构行头宽度
     * @returns number
     */
    PivotFacet.prototype.getTreeRowHeaderWidth = function () {
        var _a, _b, _c, _d;
        var _e = this.cfg, rows = _e.rows, dataSet = _e.dataSet, rowCfg = _e.rowCfg, treeRowsWidth = _e.treeRowsWidth;
        // 1. 用户拖拽或手动指定的行头宽度优先级最高
        // TODO: 由于历史原因, 存在两个行头宽度, (1. style.rowCfg.treeRowsWidth  2.style.treeRowsWidth) 暂时保持兼容
        var currentTreeRowsWidth = treeRowsWidth !== null && treeRowsWidth !== void 0 ? treeRowsWidth : rowCfg === null || rowCfg === void 0 ? void 0 : rowCfg.treeRowsWidth;
        if (isNumber(currentTreeRowsWidth)) {
            return currentTreeRowsWidth;
        }
        // 2. 其次是自定义
        var customRowWidth = this.getCellCustomWidth(null, rowCfg === null || rowCfg === void 0 ? void 0 : rowCfg.width);
        if (isNumber(customRowWidth)) {
            return customRowWidth;
        }
        // 3. 然后是计算 (+ icon province/city/level)
        var treeHeaderLabel = rows
            .map(function (key) { return dataSet.getFieldName(key); })
            .join('/');
        var _f = this.spreadsheet.theme.cornerCell, cornerCellTextStyle = _f.bolderText, cornerIconStyle = _f.icon;
        // 初始化角头时，保证其在树形模式下不换行
        // 给与两个icon的宽度空余（tree icon 和 action icon），减少复杂的 action icon 判断
        // 额外增加 1，当内容和容器宽度恰好相等时会出现换行
        var maxLabelWidth = 1 +
            this.spreadsheet.measureTextWidth(treeHeaderLabel, cornerCellTextStyle) +
            cornerIconStyle.size * 2 +
            ((_a = cornerIconStyle.margin) === null || _a === void 0 ? void 0 : _a.left) +
            ((_b = cornerIconStyle.margin) === null || _b === void 0 ? void 0 : _b.right) +
            ((_c = this.rowCellTheme.padding) === null || _c === void 0 ? void 0 : _c.left) +
            ((_d = this.rowCellTheme.padding) === null || _d === void 0 ? void 0 : _d.right);
        var width = Math.max(currentTreeRowsWidth !== null && currentTreeRowsWidth !== void 0 ? currentTreeRowsWidth : DEFAULT_TREE_ROW_WIDTH, maxLabelWidth);
        return Number.isNaN(width) ? DEFAULT_TREE_ROW_WIDTH : width;
    };
    /**
     * 计算 compact 模式下 node 宽度
     *
     * |   fieldName  |
     *  _______________
     * | label - icon  | <- node
     * | label - icon  |
     * | label - icon  |
     *
     * @param node 目标节点
     * @returns 宽度
     */
    PivotFacet.prototype.getCompactGridRowWidth = function (node) {
        var _this = this;
        var _a;
        var _b = this.cfg, dataSet = _b.dataSet, spreadsheet = _b.spreadsheet;
        var _c = spreadsheet.theme.rowCell, rowTextStyle = _c.bolderText, rowIconStyle = _c.icon, rowCellStyle = _c.cell;
        var _d = spreadsheet.theme.cornerCell, cornerTextStyle = _d.bolderText, cornerIconStyle = _d.icon, cornerCellStyle = _d.cell;
        var field = node.field, isLeaf = node.isLeaf;
        // calc rowNode width
        var rowIconWidth = this.getExpectedCellIconWidth(CellTypes.ROW_CELL, !spreadsheet.isValueInCols() &&
            isLeaf &&
            spreadsheet.options.showDefaultHeaderActionIcon, rowIconStyle);
        var allLabels = (_a = dataSet
            .getDimensionValues(field)) === null || _a === void 0 ? void 0 : _a.slice(0, LAYOUT_SAMPLE_COUNT).map(function (dimValue) {
            var _a, _b;
            return (_b = (_a = _this.spreadsheet.dataSet.getFieldFormatter(field)) === null || _a === void 0 ? void 0 : _a(dimValue)) !== null && _b !== void 0 ? _b : dimValue;
        });
        var maxLabel = maxBy(allLabels, function (label) { return "".concat(label).length; });
        var rowNodeWidth = spreadsheet.measureTextWidth(maxLabel, rowTextStyle) +
            rowIconWidth +
            rowCellStyle.padding.left +
            rowCellStyle.padding.right;
        // calc corner fieldNameNodeWidth
        var fieldName = dataSet.getFieldName(field);
        var cornerIconWidth = this.getExpectedCellIconWidth(CellTypes.CORNER_CELL, false, cornerIconStyle);
        var fieldNameNodeWidth = spreadsheet.measureTextWidth(fieldName, cornerTextStyle) +
            cornerIconWidth +
            cornerCellStyle.padding.left +
            cornerCellStyle.padding.right;
        DebuggerUtil.getInstance().logger('Max Label In Row:', field, rowNodeWidth > fieldNameNodeWidth ? maxLabel : fieldName);
        // return max
        return Math.max(rowNodeWidth, fieldNameNodeWidth);
    };
    PivotFacet.prototype.getViewCellHeights = function (layoutResult) {
        var rowLeafNodes = layoutResult.rowLeafNodes;
        var heights = reduce(rowLeafNodes, function (result, node) {
            result.push(last(result) + node.height);
            return result;
        }, [0]);
        return {
            getTotalHeight: function () {
                return last(heights);
            },
            getCellOffsetY: function (index) {
                return heights[index];
            },
            getTotalLength: function () {
                // 多了一个数据 [0]
                return heights.length - 1;
            },
            getIndexRange: function (minHeight, maxHeight) {
                return getIndexRangeWithOffsets(heights, minHeight, maxHeight);
            },
        };
    };
    PivotFacet.prototype.getRowHeader = function () {
        if (!this.rowHeader) {
            var _a = this.getRowHeaderCfg(), viewportHeight = _a.viewportHeight, otherProps = __rest(_a, ["viewportHeight"]);
            var frozenRowHeight = getFrozenRowCfgPivot(this.cfg, this.layoutResult.rowNodes).frozenRowHeight;
            return new PivotRowHeader(__assign(__assign({}, otherProps), { viewportHeight: viewportHeight - frozenRowHeight }));
        }
    };
    PivotFacet.prototype.enableFrozenFirstRow = function () {
        return !!this.getBizRevisedFrozenOptions().frozenRowCount;
    };
    return PivotFacet;
}(FrozenFacet));

/**
 * Column Header for SpreadSheet
 */
var TableColHeader = /** @class */ (function (_super) {
    __extends(TableColHeader, _super);
    function TableColHeader(cfg) {
        var _this = this;
        var _a;
        _this = _super.call(this, cfg) || this;
        _this.getScrollGroupClipBBox = function () {
            var _a;
            var _b = _this.headerConfig, width = _b.width, height = _b.height, scrollX = _b.scrollX, spreadsheet = _b.spreadsheet;
            var options = spreadsheet.options;
            if (!options.frozenColCount && !options.frozenTrailingColCount) {
                return {
                    x: scrollX,
                    y: 0,
                    width: width,
                    height: height,
                };
            }
            var colLeafNodes = (_a = spreadsheet.facet) === null || _a === void 0 ? void 0 : _a.layoutResult.colLeafNodes;
            var _c = getValidFrozenOptions(spreadsheet.options, colLeafNodes.length), frozenColCount = _c.frozenColCount, frozenTrailingColCount = _c.frozenTrailingColCount;
            var frozenColWidth = 0;
            var frozenTrailingColWidth = 0;
            for (var i = 0; i < frozenColCount; i++) {
                frozenColWidth += colLeafNodes[i].width;
            }
            for (var i = 0; i < frozenTrailingColCount; i++) {
                frozenTrailingColWidth += colLeafNodes[colLeafNodes.length - 1 - i].width;
            }
            var frozenClipWidth = width - frozenColWidth - frozenTrailingColWidth;
            return {
                x: scrollX + frozenColWidth,
                y: 0,
                width: frozenClipWidth,
                height: height,
            };
        };
        var _b = (_a = _this.headerConfig.spreadsheet) === null || _a === void 0 ? void 0 : _a.options, frozenColCount = _b.frozenColCount, frozenTrailingColCount = _b.frozenTrailingColCount;
        if (frozenColCount) {
            _this.frozenColGroup = _this.addGroup({
                name: KEY_GROUP_COL_FROZEN,
                zIndex: FRONT_GROUND_GROUP_FROZEN_Z_INDEX,
            });
        }
        if (frozenTrailingColCount) {
            _this.frozenTrailingColGroup = _this.addGroup({
                name: KEY_GROUP_COL_FROZEN_TRAILING,
                zIndex: FRONT_GROUND_GROUP_FROZEN_Z_INDEX,
            });
        }
        return _this;
    }
    TableColHeader.prototype.isFrozenCell = function (meta) {
        var spreadsheet = this.headerConfig.spreadsheet;
        var _a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.options, frozenColCount = _a.frozenColCount, frozenTrailingColCount = _a.frozenTrailingColCount;
        var colIndex = meta.colIndex;
        var colLeafNodes = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet.layoutResult.colLeafNodes;
        return (isFrozenCol(colIndex, frozenColCount) ||
            isFrozenTrailingCol(colIndex, frozenTrailingColCount, colLeafNodes.length));
    };
    TableColHeader.prototype.clear = function () {
        var _a, _b;
        var spreadsheet = this.headerConfig.spreadsheet;
        _super.prototype.clear.call(this);
        (_a = this.frozenTrailingColGroup) === null || _a === void 0 ? void 0 : _a.clear();
        (_b = this.frozenColGroup) === null || _b === void 0 ? void 0 : _b.clear();
        // 额外清除冻结列的 Resizer Area
        var resizerArea = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.foregroundGroup.findById(KEY_GROUP_FROZEN_COL_RESIZE_AREA);
        resizerArea === null || resizerArea === void 0 ? void 0 : resizerArea.clear();
    };
    TableColHeader.prototype.getCellInstance = function (item, spreadsheet, headerConfig) {
        return item.field === SERIES_NUMBER_FIELD
            ? new TableCornerCell(item, spreadsheet, headerConfig)
            : new TableColCell(item, spreadsheet, headerConfig);
    };
    TableColHeader.prototype.getCellGroup = function (node) {
        var _a, _b;
        var spreadsheet = this.headerConfig.spreadsheet;
        var _c = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.options, frozenColCount = _c.frozenColCount, frozenTrailingColCount = _c.frozenTrailingColCount;
        var topLevelNodes = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _a === void 0 ? void 0 : _a.layoutResult.colNodes.filter(function (cell) {
            return isTopLevelNode(cell);
        });
        var _d = getFrozenLeafNodesCount(topLevelNodes, frozenColCount, frozenTrailingColCount), colCount = _d.colCount, trailingColCount = _d.trailingColCount;
        if (isFrozenCol(getLeftLeafNode(node).colIndex, colCount)) {
            return this.frozenColGroup;
        }
        if (isFrozenTrailingCol(getLeftLeafNode(node).colIndex, trailingColCount, (_b = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _b === void 0 ? void 0 : _b.layoutResult.colLeafNodes.length)) {
            return this.frozenTrailingColGroup;
        }
        return this.scrollGroup;
    };
    TableColHeader.prototype.isColCellInRect = function (item) {
        var _a, _b;
        var spreadsheet = this.headerConfig.spreadsheet;
        var _c = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.options, frozenColCount = _c.frozenColCount, frozenTrailingColCount = _c.frozenTrailingColCount;
        var colLength = (_a = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _a === void 0 ? void 0 : _a.layoutResult.colLeafNodes.length;
        var topLevelNodes = (_b = spreadsheet === null || spreadsheet === void 0 ? void 0 : spreadsheet.facet) === null || _b === void 0 ? void 0 : _b.layoutResult.colNodes.filter(function (cell) {
            return isTopLevelNode(cell);
        });
        var _d = getFrozenLeafNodesCount(topLevelNodes, frozenColCount, frozenTrailingColCount), colCount = _d.colCount, trailingColCount = _d.trailingColCount;
        if (isFrozenCol(getLeftLeafNode(item).colIndex, colCount) ||
            isFrozenTrailingCol(getLeftLeafNode(item).colIndex, trailingColCount, colLength)) {
            return true;
        }
        return _super.prototype.isColCellInRect.call(this, item);
    };
    TableColHeader.prototype.clip = function () {
        this.scrollGroup.setClip({
            type: 'rect',
            attrs: this.getScrollGroupClipBBox(),
        });
    };
    return TableColHeader;
}(ColHeader));

var TableFacet = /** @class */ (function (_super) {
    __extends(TableFacet, _super);
    function TableFacet(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.onSortHandler = function (sortParams) {
            var s2 = _this.spreadsheet;
            var params = sortParams;
            // 兼容之前 sortParams 为对象的用法
            if (!Array.isArray(sortParams)) {
                params = [sortParams];
            }
            var currentParams = s2.dataCfg.sortParams || [];
            params = params.map(function (item) {
                var _a, _b;
                var newItem = __assign(__assign({}, item), { 
                    // 兼容之前 sortKey 的用法
                    sortFieldId: (_a = item.sortKey) !== null && _a !== void 0 ? _a : item.sortFieldId });
                var oldItem = (_b = currentParams.find(function (p) { return p.sortFieldId === newItem.sortFieldId; })) !== null && _b !== void 0 ? _b : {};
                return __assign(__assign({}, oldItem), newItem);
            });
            var oldConfigs = currentParams.filter(function (config) {
                var newItem = params.find(function (p) { return p.sortFieldId === config.sortFieldId; });
                if (newItem) {
                    return false;
                }
                return true;
            });
            set(s2.dataCfg, 'sortParams', __spreadArray$1(__spreadArray$1([], __read(oldConfigs), false), __read(params), false));
            s2.setDataCfg(s2.dataCfg);
            s2.render(true);
            s2.emit(S2Event.RANGE_SORTED, s2.dataSet.getDisplayDataSet());
        };
        _this.onFilterHandler = function (params) {
            var s2 = _this.spreadsheet;
            var unFilter = !params.filteredValues || params.filteredValues.length === 0;
            var oldConfig = s2.dataCfg.filterParams || [];
            // check whether filter condition already exists on column, if so, modify it instead.
            var oldIndex = oldConfig.findIndex(function (item) { return item.filterKey === params.filterKey; });
            if (oldIndex !== -1) {
                if (unFilter) {
                    // remove filter params on current key if passed an empty filterValues field
                    oldConfig.splice(oldIndex, 1);
                }
                else {
                    // if filter with same key already exists, replace it
                    oldConfig[oldIndex] = params;
                }
            }
            else {
                oldConfig.push(params);
            }
            set(s2.dataCfg, 'filterParams', oldConfig);
            s2.render(true);
            s2.emit(S2Event.RANGE_FILTERED, s2.dataSet.getDisplayDataSet());
        };
        _this.renderFrozenPanelCornerGroup = function () {
            var topLevelNodes = _this.layoutResult.colNodes.filter(function (node) {
                return isTopLevelNode(node);
            });
            var cellRange = _this.getCellRange();
            var _a = getValidFrozenOptions(_this.spreadsheet.options, topLevelNodes.length, cellRange.end - cellRange.start + 1), frozenRowCount = _a.frozenRowCount, frozenColCount = _a.frozenColCount, frozenTrailingRowCount = _a.frozenTrailingRowCount, frozenTrailingColCount = _a.frozenTrailingColCount;
            var _b = getFrozenLeafNodesCount(topLevelNodes, frozenColCount, frozenTrailingColCount), colCount = _b.colCount, trailingColCount = _b.trailingColCount;
            var result = calculateFrozenCornerCells({
                frozenRowCount: frozenRowCount,
                frozenColCount: colCount,
                frozenTrailingRowCount: frozenTrailingRowCount,
                frozenTrailingColCount: trailingColCount,
            }, _this.layoutResult.colLeafNodes.length, cellRange);
            Object.keys(result).forEach(function (key) {
                var cells = result[key];
                var group = _this.spreadsheet[FrozenCellGroupMap[key]];
                if (group) {
                    cells.forEach(function (cell) {
                        _this.addFrozenCell(cell.x, cell.y, group);
                    });
                }
            });
        };
        _this.addFrozenCell = function (colIndex, rowIndex, group) {
            var viewMeta = _this.layoutResult.getCellMeta(rowIndex, colIndex);
            viewMeta.isFrozenCorner = true;
            if (viewMeta) {
                var cell = _this.cfg.dataCell(viewMeta);
                group.add(cell);
            }
        };
        var s2 = _this.spreadsheet;
        s2.on(S2Event.RANGE_SORT, _this.onSortHandler);
        s2.on(S2Event.RANGE_FILTER, _this.onFilterHandler);
        return _this;
    }
    TableFacet.prototype.updateRowResizeArea = function () {
        var _a = this.spreadsheet, foregroundGroup = _a.foregroundGroup, options = _a.options;
        var resize = get(options, 'interaction.resize');
        var shouldDrawResize = isBoolean(resize)
            ? resize
            : resize === null || resize === void 0 ? void 0 : resize.rowCellVertical;
        if (!shouldDrawResize) {
            return;
        }
        var rowResizeGroup = foregroundGroup.findById(KEY_GROUP_ROW_RESIZE_AREA);
        var rowResizeFrozenGroup = foregroundGroup.findById(KEY_GROUP_FROZEN_ROW_RESIZE_AREA);
        if (rowResizeGroup) {
            rowResizeGroup.set('children', []);
        }
        if (rowResizeFrozenGroup) {
            rowResizeFrozenGroup.set('children', []);
        }
        var allCells = getAllChildCells(this.panelGroup.getChildren(), TableDataCell).filter(function (cell) { return cell.shouldDrawResizeArea(); });
        allCells === null || allCells === void 0 ? void 0 : allCells.forEach(function (cell) {
            cell.drawResizeArea();
        });
    };
    TableFacet.prototype.clip = function (scrollX, scrollY) {
        _super.prototype.clip.call(this, scrollX, scrollY);
        this.clipResizeAreaGroup();
    };
    TableFacet.prototype.clipResizeAreaGroup = function () {
        var _a, _b;
        var rowResizeGroup = this.spreadsheet.foregroundGroup.findById(KEY_GROUP_ROW_RESIZE_AREA);
        if (rowResizeGroup) {
            var colLeafNodes = this.layoutResult.colLeafNodes;
            var _c = this.spreadsheet, frozenRowGroup = _c.frozenRowGroup, frozenTrailingRowGroup = _c.frozenTrailingRowGroup;
            var frozenRowGroupHeight = 0;
            var frozenTrailingRowGroupHeight = 0;
            if (frozenRowGroup) {
                frozenRowGroupHeight = frozenRowGroup.getBBox().height;
            }
            if (frozenTrailingRowGroup) {
                frozenTrailingRowGroupHeight = frozenTrailingRowGroup.getBBox().height;
            }
            var panelScrollGroupHeight = this.panelBBox.height -
                frozenRowGroupHeight -
                frozenTrailingRowGroupHeight;
            rowResizeGroup.setClip({
                type: 'rect',
                attrs: {
                    x: 0,
                    y: frozenRowGroupHeight + this.cornerBBox.height,
                    width: (_b = (_a = colLeafNodes === null || colLeafNodes === void 0 ? void 0 : colLeafNodes[0]) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : 0,
                    height: panelScrollGroupHeight,
                },
            });
        }
    };
    TableFacet.prototype.getContentHeight = function () {
        var getTotalHeight = this.getViewCellHeights().getTotalHeight;
        var colsHierarchy = this.layoutResult.colsHierarchy;
        return getTotalHeight() + colsHierarchy.height;
    };
    Object.defineProperty(TableFacet.prototype, "dataCellTheme", {
        get: function () {
            return this.spreadsheet.theme.dataCell.cell;
        },
        enumerable: false,
        configurable: true
    });
    TableFacet.prototype.destroy = function () {
        var s2 = this.spreadsheet;
        s2.off(S2Event.RANGE_SORT, this.onSortHandler);
        s2.off(S2Event.RANGE_FILTER, this.onFilterHandler);
        _super.prototype.destroy.call(this);
    };
    TableFacet.prototype.calculateCornerBBox = function () {
        var colsHierarchy = this.layoutResult.colsHierarchy;
        var height = Math.floor(colsHierarchy.height);
        this.cornerBBox = new CornerBBox(this);
        this.cornerBBox.height = height;
        this.cornerBBox.maxY = height;
    };
    TableFacet.prototype.doLayout = function () {
        var _this = this;
        var _a = this.cfg, dataSet = _a.dataSet, spreadsheet = _a.spreadsheet;
        var rowsHierarchy = new Hierarchy();
        var _b = buildHeaderHierarchy({
            isRowHeader: false,
            facetCfg: this.cfg,
        }), colLeafNodes = _b.leafNodes, colsHierarchy = _b.hierarchy;
        this.calculateColNodesCoordinate(colLeafNodes, colsHierarchy);
        var getCellMeta = function (rowIndex, colIndex) {
            var _a;
            var showSeriesNumber = _this.cfg.showSeriesNumber;
            var col = colLeafNodes[colIndex];
            var cellHeight = _this.getCellHeight(rowIndex);
            var cellRange = _this.getCellRange();
            var frozenTrailingRowCount = getValidFrozenOptions(_this.cfg, colLeafNodes.length, cellRange.end - cellRange.start + 1).frozenTrailingRowCount;
            var data;
            var x = col.x;
            var y = _this.viewCellHeights.getCellOffsetY(rowIndex);
            if (isFrozenTrailingRow(rowIndex, cellRange.end, frozenTrailingRowCount)) {
                y =
                    _this.panelBBox.maxY -
                        _this.getTotalHeightForRange(rowIndex, cellRange.end);
            }
            if (showSeriesNumber && col.field === SERIES_NUMBER_FIELD) {
                data = "".concat(rowIndex + 1);
            }
            else {
                data = dataSet.getCellData({
                    query: {
                        field: col.field,
                        rowIndex: rowIndex,
                    },
                });
            }
            return {
                spreadsheet: spreadsheet,
                x: x,
                y: y,
                width: col.width,
                height: cellHeight,
                data: (_a = {},
                    _a[col.field] = data,
                    _a),
                rowIndex: rowIndex,
                colIndex: colIndex,
                isTotals: false,
                colId: col.id,
                rowId: String(rowIndex),
                valueField: col.field,
                fieldValue: data,
                id: getDataCellId(String(rowIndex), col.id),
            };
        };
        var layoutResult = {
            colNodes: colsHierarchy.getNodes(),
            colsHierarchy: colsHierarchy,
            rowNodes: rowsHierarchy.getNodes(),
            rowsHierarchy: rowsHierarchy,
            rowLeafNodes: rowsHierarchy.getLeaves(),
            colLeafNodes: colLeafNodes,
            getCellMeta: getCellMeta,
            spreadsheet: spreadsheet,
        };
        return layoutResult;
    };
    TableFacet.prototype.getAdaptiveColWidth = function (colLeafNodes) {
        var cellCfg = this.cfg.cellCfg;
        var showSeriesNumber = this.cfg.showSeriesNumber;
        if (this.spreadsheet.getLayoutWidthType() !== LayoutWidthTypes.Compact) {
            var seriesNumberWidth = this.getSeriesNumberWidth();
            var colHeaderColSize = colLeafNodes.length - (showSeriesNumber ? 1 : 0);
            var canvasW = this.getCanvasHW().width - seriesNumberWidth;
            return Math.max(cellCfg === null || cellCfg === void 0 ? void 0 : cellCfg.width, canvasW / Math.max(1, colHeaderColSize));
        }
        return cellCfg === null || cellCfg === void 0 ? void 0 : cellCfg.width;
    };
    TableFacet.prototype.getColNodeHeight = function (col, totalHeight) {
        var colCfg = this.cfg.colCfg;
        // 明细表所有列节点高度保持一致
        var userDragHeight = values(colCfg === null || colCfg === void 0 ? void 0 : colCfg.heightByField)[0];
        var height = userDragHeight || (colCfg === null || colCfg === void 0 ? void 0 : colCfg.height);
        if (!totalHeight) {
            return height;
        }
        // 如果传递了总高，则需要根据层级情况获得高度
        if (col.children && col.children.length) {
            return height;
        }
        while (col.parent) {
            totalHeight -= isTopLevelNode(col) ? 0 : height;
            col = col.parent;
        }
        return totalHeight;
    };
    TableFacet.prototype.calculateColNodesCoordinate = function (colLeafNodes, colsHierarchy) {
        var e_1, _a;
        var _b, _c, _d, _e;
        var preLeafNode = Node$1.blankNode();
        var allNodes = colsHierarchy.getNodes();
        try {
            for (var _f = __values(colsHierarchy.sampleNodesForAllLevels), _g = _f.next(); !_g.done; _g = _f.next()) {
                var levelSample = _g.value;
                levelSample.height = this.getColNodeHeight(levelSample);
                colsHierarchy.height += levelSample.height;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var adaptiveColWidth = this.getAdaptiveColWidth(colLeafNodes);
        var currentCollIndex = 0;
        for (var i = 0; i < allNodes.length; i++) {
            var currentNode = allNodes[i];
            if (currentNode.isLeaf) {
                currentNode.colIndex = currentCollIndex;
                currentCollIndex += 1;
                currentNode.x = preLeafNode.x + preLeafNode.width;
                currentNode.width = this.calculateColLeafNodesWidth(currentNode, adaptiveColWidth);
                layoutCoordinate(this.cfg, null, currentNode);
                colsHierarchy.width += currentNode.width;
                preLeafNode = currentNode;
            }
            if (currentNode.level === 0) {
                currentNode.y = 0;
            }
            else {
                currentNode.y = (_d = ((_b = currentNode.parent) === null || _b === void 0 ? void 0 : _b.y) + ((_c = currentNode.parent) === null || _c === void 0 ? void 0 : _c.height)) !== null && _d !== void 0 ? _d : 0;
            }
            currentNode.height = this.getColNodeHeight(currentNode, colsHierarchy.height);
        }
        var topLevelNodes = allNodes.filter(function (node) { return isTopLevelNode(node); });
        var frozenTrailingColCount = getValidFrozenOptions((_e = this.spreadsheet) === null || _e === void 0 ? void 0 : _e.options, topLevelNodes.length).frozenTrailingColCount;
        preLeafNode = Node$1.blankNode();
        var canvasW = this.getCanvasHW().width;
        if (frozenTrailingColCount > 0) {
            var realFrozenTrailingColCount = getFrozenLeafNodesCount(topLevelNodes, 0, frozenTrailingColCount).trailingColCount;
            var leafNodes = allNodes.filter(function (node) { return node.isLeaf; });
            for (var i = 1; i <= realFrozenTrailingColCount; i++) {
                var currentNode = leafNodes[leafNodes.length - i];
                if (i === 1) {
                    currentNode.x = canvasW - currentNode.width;
                }
                else {
                    currentNode.x = preLeafNode.x - currentNode.width;
                }
                preLeafNode = currentNode;
            }
        }
        this.autoCalculateColNodeWidthAndX(colLeafNodes);
    };
    /**
     * Auto column no-leaf node's width and x coordinate
     * @param colLeafNodes
     */
    TableFacet.prototype.autoCalculateColNodeWidthAndX = function (colLeafNodes) {
        var prevColParent = null;
        var leafNodes = colLeafNodes.slice(0);
        while (leafNodes.length) {
            var node = leafNodes.shift();
            var parent_1 = node.parent;
            if (prevColParent !== parent_1 && parent_1) {
                leafNodes.push(parent_1);
                // parent's x = first child's x
                parent_1.x = parent_1.children[0].x;
                // parent's width = all children's width
                parent_1.width = parent_1.children
                    .map(function (value) { return value.width; })
                    .reduce(function (sum, current) { return sum + current; }, 0);
                prevColParent = parent_1;
            }
        }
    };
    TableFacet.prototype.calculateColLeafNodesWidth = function (col, adaptiveColWidth) {
        var _a = this.cfg, colCfg = _a.colCfg, dataSet = _a.dataSet, spreadsheet = _a.spreadsheet;
        var layoutWidthType = this.spreadsheet.getLayoutWidthType();
        var cellDraggedWidth = this.getCellDraggedWidth(col);
        // 1. 拖拽后的宽度优先级最高
        if (isNumber(cellDraggedWidth)) {
            return cellDraggedWidth;
        }
        // 2. 其次是自定义, 返回 null 则使用默认宽度
        var cellCustomWidth = this.getCellCustomWidth(col, colCfg === null || colCfg === void 0 ? void 0 : colCfg.width);
        if (isNumber(cellCustomWidth)) {
            return cellCustomWidth;
        }
        var colWidth;
        if (layoutWidthType === LayoutWidthTypes.Compact) {
            var datas = dataSet.getDisplayDataSet();
            var formatter_1 = dataSet.getFieldFormatter(col.field);
            // 采样前50，找出表身最长的数据
            var maxLabel = maxBy(datas === null || datas === void 0 ? void 0 : datas.slice(0, 50).map(function (data) { var _a; return "".concat((_a = formatter_1 === null || formatter_1 === void 0 ? void 0 : formatter_1(data[col.field])) !== null && _a !== void 0 ? _a : data[col.field]); }), function (label) { return spreadsheet.measureTextWidthRoughly(label); });
            DebuggerUtil.getInstance().logger('Max Label In Col:', col.field, maxLabel);
            var colCellTextStyle = spreadsheet.theme.colCell.bolderText;
            var _b = spreadsheet.theme.dataCell, dataCellTextStyle = _b.text, cellStyle = _b.cell;
            // 额外添加一像素余量，防止 maxLabel 有多个同样长度情况下，一些 label 不能展示完全
            var EXTRA_PIXEL = 1;
            var maxLabelWidth = spreadsheet.measureTextWidth(maxLabel, dataCellTextStyle) +
                cellStyle.padding.left +
                cellStyle.padding.right +
                EXTRA_PIXEL;
            // 计算表头 label+icon 占用的空间
            var colHeaderNodeWidth = spreadsheet.measureTextWidth(col.label, colCellTextStyle) +
                getOccupiedWidthForTableCol(this.spreadsheet, col, spreadsheet.theme.colCell);
            colWidth = Math.max(colHeaderNodeWidth, maxLabelWidth);
        }
        else {
            colWidth = adaptiveColWidth;
        }
        if (col.field === SERIES_NUMBER_FIELD) {
            colWidth = this.getSeriesNumberWidth();
        }
        return colWidth;
    };
    TableFacet.prototype.initRowOffsets = function () {
        var _this = this;
        var _a;
        var dataSet = this.cfg.dataSet;
        var _b = (((_a = this.spreadsheet.options.style) === null || _a === void 0 ? void 0 : _a.rowCfg) || {}).heightByField, heightByField = _b === void 0 ? {} : _b;
        if (Object.keys(heightByField).length) {
            var data = dataSet.getDisplayDataSet();
            this.rowOffsets = [0];
            var lastOffset_1 = 0;
            data.forEach(function (_, idx) {
                var _a;
                var currentHeight = (_a = heightByField === null || heightByField === void 0 ? void 0 : heightByField[String(idx)]) !== null && _a !== void 0 ? _a : _this.getDefaultCellHeight();
                var currentOffset = lastOffset_1 + currentHeight;
                _this.rowOffsets.push(currentOffset);
                lastOffset_1 = currentOffset;
            });
        }
    };
    TableFacet.prototype.getCellHeight = function (rowIndex) {
        var _a;
        if (this.rowOffsets) {
            var _b = (((_a = this.spreadsheet.options.style) === null || _a === void 0 ? void 0 : _a.rowCfg) || {}).heightByField, heightByField = _b === void 0 ? {} : _b;
            var customHeight = heightByField === null || heightByField === void 0 ? void 0 : heightByField[String(rowIndex)];
            if (isNumber(customHeight)) {
                return customHeight;
            }
        }
        return this.getDefaultCellHeight();
    };
    TableFacet.prototype.getViewCellHeights = function () {
        var _this = this;
        var dataSet = this.cfg.dataSet;
        var defaultCellHeight = this.getDefaultCellHeight();
        return {
            getTotalHeight: function () {
                if (_this.rowOffsets) {
                    return last(_this.rowOffsets);
                }
                return defaultCellHeight * dataSet.getDisplayDataSet().length;
            },
            getCellOffsetY: function (offset) {
                if (offset <= 0) {
                    return 0;
                }
                if (_this.rowOffsets) {
                    return _this.rowOffsets[offset];
                }
                var totalOffset = 0;
                for (var index = 0; index < offset; index++) {
                    totalOffset += defaultCellHeight;
                }
                return totalOffset;
            },
            getTotalLength: function () {
                return dataSet.getDisplayDataSet().length;
            },
            getIndexRange: function (minHeight, maxHeight) {
                if (_this.rowOffsets) {
                    return getIndexRangeWithOffsets(_this.rowOffsets, minHeight, maxHeight);
                }
                var yMin = Math.floor(minHeight / defaultCellHeight);
                // 防止数组index溢出导致报错
                var yMax = maxHeight % defaultCellHeight === 0
                    ? maxHeight / defaultCellHeight - 1
                    : Math.floor(maxHeight / defaultCellHeight);
                return {
                    start: Math.max(0, yMin),
                    end: Math.max(0, yMax),
                };
            },
        };
    };
    TableFacet.prototype.init = function () {
        this.initRowOffsets();
        _super.prototype.init.call(this);
        var _a = this.panelBBox, width = _a.width, height = _a.height;
        this.spreadsheet.panelGroup.setClip({
            type: 'rect',
            attrs: {
                x: 0,
                y: this.cornerBBox.height,
                width: width,
                height: height,
            },
        });
    };
    TableFacet.prototype.getColHeader = function () {
        if (!this.columnHeader) {
            var _a = this.panelBBox, x = _a.x, width = _a.width, viewportHeight = _a.viewportHeight, viewportWidth = _a.viewportWidth;
            return new TableColHeader({
                width: width,
                height: this.cornerBBox.height,
                viewportWidth: viewportWidth,
                viewportHeight: viewportHeight,
                cornerWidth: this.cornerBBox.width,
                position: { x: x, y: 0 },
                data: this.layoutResult.colNodes,
                scrollContainsRowHeader: this.cfg.spreadsheet.isScrollContainsRowHeader(),
                sortParam: this.cfg.spreadsheet.store.get('sortParam'),
                spreadsheet: this.spreadsheet,
            });
        }
        return this.columnHeader;
    };
    TableFacet.prototype.render = function () {
        this.renderFrozenPanelCornerGroup();
        _super.prototype.render.call(this);
    };
    TableFacet.prototype.getRowHeader = function () {
        return null;
    };
    TableFacet.prototype.getSeriesNumberHeader = function () {
        return null;
    };
    return TableFacet;
}(FrozenFacet));

var GridGroup = /** @class */ (function (_super) {
    __extends(GridGroup, _super);
    function GridGroup(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.gridInfo = {
            cols: [],
            rows: [],
        };
        _this.updateGrid = function (gridInfo, id) {
            if (id === void 0) { id = KEY_GROUP_GRID_GROUP; }
            var bbox = _this.getBBox();
            var _a = _this.s2, theme = _a.theme, isTableMode = _a.isTableMode;
            var style = theme.dataCell.cell;
            // 在明细表中需要补全左侧的边框，分为两种情况：
            // 1. 存在行头冻结，需要为冻结的行头组添加边框
            // 2. 不存在行头冻结，需要为默认的 Grid 组添加边框
            var shouldDrawLeftBorder = isTableMode() &&
                (id === KEY_GROUP_GRID_GROUP || id === KEY_GROUP_PANEL_FROZEN_COL);
            if (!_this.gridGroup || !_this.findById(id)) {
                _this.gridGroup = _this.addGroup({
                    id: id,
                });
            }
            _this.gridGroup.clear();
            _this.gridInfo = gridInfo;
            if (shouldDrawLeftBorder) {
                _this.gridInfo.cols.unshift(0);
            }
            // line 在绘制时，包围盒计算有点问题，会代入lineWidth
            // 比如传入的 x1=0, x2=10, lineWidth=20
            // 最后line得出来的包围盒 minX=-10, maxX=20，会将lineWidth/2纳入计算中
            // 最后就会导致更新过程中，GridGroup的包围盒不断被放大
            // 因此在传入时，将这部分坐标减去，并结合lineCap将这部分绘制出来，达到内容区域绘制不变，包围盒计算正确的目的
            var verticalBorderWidth = style.verticalBorderWidth;
            var halfVerticalBorderWidthBorderWidth = style.verticalBorderWidth / 2;
            _this.gridInfo.cols.forEach(function (x) {
                renderLine(_this.gridGroup, {
                    x1: x,
                    x2: x,
                    y1: Math.ceil(bbox.minY + halfVerticalBorderWidthBorderWidth),
                    y2: Math.floor(bbox.maxY - halfVerticalBorderWidthBorderWidth),
                }, {
                    stroke: style.verticalBorderColor,
                    strokeOpacity: style.verticalBorderColorOpacity,
                    lineWidth: verticalBorderWidth,
                    lineCap: SQUARE_LINE_CAP,
                    lineDash: style.borderDash,
                });
            });
            var horizontalBorderWidth = style.horizontalBorderWidth;
            var halfHorizontalBorderWidth = style.horizontalBorderWidth / 2;
            _this.gridInfo.rows.forEach(function (y) {
                renderLine(_this.gridGroup, {
                    x1: Math.ceil(bbox.minX + halfHorizontalBorderWidth),
                    x2: Math.floor(bbox.maxX - halfHorizontalBorderWidth),
                    y1: y,
                    y2: y,
                }, {
                    stroke: style.horizontalBorderColor,
                    strokeOpacity: style.horizontalBorderColorOpacity,
                    lineWidth: horizontalBorderWidth,
                    lineCap: SQUARE_LINE_CAP,
                    lineDash: style.borderDash,
                });
            });
            _this.gridGroup.toFront();
        };
        _this.s2 = cfg.s2;
        return _this;
    }
    return GridGroup;
}(Group));

var FrozenGroup = /** @class */ (function (_super) {
    __extends(FrozenGroup, _super);
    function FrozenGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FrozenGroup;
}(GridGroup));

var PanelScrollGroup = /** @class */ (function (_super) {
    __extends(PanelScrollGroup, _super);
    function PanelScrollGroup(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.initMergedCellsGroup();
        return _this;
    }
    PanelScrollGroup.prototype.initMergedCellsGroup = function () {
        if (this.mergedCellsGroup && this.findById(KEY_GROUP_MERGED_CELLS)) {
            return;
        }
        this.mergedCellsGroup = this.addGroup({
            id: KEY_GROUP_MERGED_CELLS,
        });
    };
    PanelScrollGroup.prototype.updateMergedCells = function () {
        this.initMergedCellsGroup();
        updateMergedCells(this.s2, this.mergedCellsGroup);
        this.mergedCellsGroup.toFront();
    };
    PanelScrollGroup.prototype.addMergeCell = function (mergeCell) {
        var _a;
        (_a = this.mergedCellsGroup) === null || _a === void 0 ? void 0 : _a.add(mergeCell);
    };
    PanelScrollGroup.prototype.update = function (gridInfo) {
        this.updateGrid(gridInfo);
        this.updateMergedCells();
    };
    return PanelScrollGroup;
}(GridGroup));

var BaseEvent = /** @class */ (function () {
    function BaseEvent(spreadsheet) {
        var _this = this;
        this.isLinkFieldText = function (eventTarget) {
            var cellAppendInfo = _this.getCellAppendInfo(eventTarget);
            return cellAppendInfo === null || cellAppendInfo === void 0 ? void 0 : cellAppendInfo.isLinkFieldText;
        };
        this.spreadsheet = spreadsheet;
        this.bindEvents();
    }
    BaseEvent.prototype.getCellAppendInfo = function (eventTarget) {
        var _a, _b;
        return (((_a = eventTarget === null || eventTarget === void 0 ? void 0 : eventTarget.attr) === null || _a === void 0 ? void 0 : _a.call(eventTarget, 'appendInfo')) || ((_b = eventTarget === null || eventTarget === void 0 ? void 0 : eventTarget.attrs) === null || _b === void 0 ? void 0 : _b.appendInfo) || {});
    };
    BaseEvent.prototype.reset = function () { };
    return BaseEvent;
}());

var DataCellClick = /** @class */ (function (_super) {
    __extends(DataCellClick, _super);
    function DataCellClick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataCellClick.prototype.bindEvents = function () {
        this.bindDataCellClick();
    };
    DataCellClick.prototype.bindDataCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.DATA_CELL_CLICK, function (event) {
            var _a;
            event.stopPropagation();
            var interaction = _this.spreadsheet.interaction;
            interaction.clearHoverTimer();
            if (interaction.hasIntercepts([InterceptType.CLICK])) {
                return;
            }
            if (_this.isLinkFieldText(event.target)) {
                _this.emitLinkFieldClickEvent(event);
                return;
            }
            var cell = _this.spreadsheet.getCell(event.target);
            var meta = cell.getMeta();
            if (!meta) {
                return;
            }
            interaction.addIntercepts([InterceptType.HOVER]);
            if (interaction.isSelectedCell(cell)) {
                // https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail，使用 detail 属性来判断是否是双击，双击时不触发选择态 reset
                if (((_a = event.originalEvent) === null || _a === void 0 ? void 0 : _a.detail) === 1) {
                    interaction.reset();
                    // https://github.com/antvis/S2/issues/2447
                    _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
                }
                return;
            }
            interaction.changeState({
                cells: [getCellMeta(cell)],
                stateName: InteractionStateName.SELECTED,
                onUpdateCells: afterSelectDataCells,
            });
            _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, [cell]);
            _this.showTooltip(event, meta);
            // 点击单元格，高亮对应的行头、列头
            var rowId = meta.rowId, colId = meta.colId, spreadsheet = meta.spreadsheet;
            var _b = interaction.getSelectedCellHighlight(), colHeader = _b.colHeader, rowHeader = _b.rowHeader;
            if (colHeader) {
                updateAllColHeaderCellState(colId, interaction.getAllColHeaderCells(), InteractionStateName.SELECTED);
            }
            if (rowHeader) {
                if (rowId) {
                    var allRowHeaderCells = getRowCellForSelectedCell(meta, spreadsheet);
                    forEach(allRowHeaderCells, function (rowCell) {
                        rowCell.updateByState(InteractionStateName.SELECTED);
                    });
                }
            }
        });
    };
    DataCellClick.prototype.getTooltipOperator = function (event, meta) {
        var _this = this;
        var TOOLTIP_OPERATOR_TREND_MENU = getTooltipOperatorTrendMenu();
        var cell = this.spreadsheet.getCell(event.target);
        var operation = getTooltipOptions(this.spreadsheet, event).operation;
        var trendMenu = operation.trend && __assign(__assign({}, TOOLTIP_OPERATOR_TREND_MENU), { onClick: function () {
                _this.spreadsheet.emit(S2Event.DATA_CELL_TREND_ICON_CLICK, __assign(__assign({}, meta), { 
                    // record 只有明细模式下存在
                    record: _this.spreadsheet.isTableMode()
                        ? _this.spreadsheet.dataSet.getCellData({
                            query: { rowIndex: meta.rowIndex },
                        })
                        : undefined }));
                _this.spreadsheet.hideTooltip();
            } });
        return getTooltipVisibleOperator(operation, {
            defaultMenus: [trendMenu],
            cell: cell,
        });
    };
    DataCellClick.prototype.showTooltip = function (event, meta) {
        var data = meta.data, _a = meta.isTotals, isTotals = _a === void 0 ? false : _a, value = meta.value, fieldValue = meta.fieldValue, field = meta.field, valueField = meta.valueField;
        var currentCellMeta = data;
        var showSingleTips = this.spreadsheet.isTableMode();
        var cellData = showSingleTips
            ? __assign(__assign({}, currentCellMeta), { value: value || fieldValue, valueField: field || valueField }) : currentCellMeta;
        var cellInfos = [
            cellData || __assign(__assign({}, meta.rowQuery), meta.colQuery),
        ];
        var operator = this.getTooltipOperator(event, meta);
        this.spreadsheet.showTooltipWithInfo(event, cellInfos, {
            isTotals: isTotals,
            operator: operator,
            enterable: true,
            hideSummary: true,
            showSingleTips: showSingleTips,
        });
    };
    DataCellClick.prototype.emitLinkFieldClickEvent = function (event) {
        var cellData = this.getCellAppendInfo(event.target).cellData;
        var key = cellData.valueField, record = cellData.data;
        this.spreadsheet.emit(S2Event.GLOBAL_LINK_FIELD_JUMP, {
            key: key,
            cellData: cellData,
            record: Object.assign({ rowIndex: cellData.rowIndex }, record),
        });
    };
    return DataCellClick;
}(BaseEvent));

var MergedCellClick = /** @class */ (function (_super) {
    __extends(MergedCellClick, _super);
    function MergedCellClick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MergedCellClick.prototype.bindEvents = function () {
        this.bindDataCellClick();
    };
    MergedCellClick.prototype.bindDataCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.MERGED_CELLS_CLICK, function (event) {
            event.stopPropagation();
            var interaction = _this.spreadsheet.interaction;
            if (interaction.hasIntercepts([InterceptType.CLICK])) {
                return;
            }
            interaction.addIntercepts([InterceptType.HOVER]);
        });
    };
    return MergedCellClick;
}(BaseEvent));

var RowColumnClick = /** @class */ (function (_super) {
    __extends(RowColumnClick, _super);
    function RowColumnClick() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMultiSelection = false;
        _this.handleRowColClick = function (event) {
            event.stopPropagation();
            if (_this.isLinkFieldText(event.target)) {
                return;
            }
            var _a = _this.spreadsheet, interaction = _a.interaction, options = _a.options;
            var cell = _this.spreadsheet.getCell(event.target);
            var enableMultiSelection = options.interaction.multiSelection;
            // 关闭了多选就算按下了 Ctrl/Commend, 行/列也按单选处理
            var isMultiSelection = !!(enableMultiSelection && _this.isMultiSelection);
            var success = interaction.selectHeaderCell({
                cell: cell,
                isMultiSelection: isMultiSelection,
            });
            if (success) {
                _this.showTooltip(event);
            }
        };
        _this.getHideColumnField = function (node) {
            return _this.spreadsheet.isTableMode() ? node.field : node.id;
        };
        return _this;
    }
    RowColumnClick.prototype.bindEvents = function () {
        this.bindKeyboardDown();
        this.bindKeyboardUp();
        this.bindColCellClick();
        this.bindRowCellClick();
        this.bindTableColExpand();
        this.bindMouseMove();
    };
    RowColumnClick.prototype.reset = function () {
        this.isMultiSelection = false;
        this.spreadsheet.interaction.removeIntercepts([InterceptType.CLICK]);
    };
    RowColumnClick.prototype.bindKeyboardDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_DOWN, function (event) {
            if (isMultiSelectionKey(event)) {
                _this.isMultiSelection = true;
            }
        });
    };
    RowColumnClick.prototype.bindKeyboardUp = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_UP, function (event) {
            if (isMultiSelectionKey(event)) {
                _this.reset();
            }
        });
    };
    RowColumnClick.prototype.bindMouseMove = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_MOVE, function (event) {
            // 当快捷键被系统拦截后，按需补充调用一次 reset
            if (_this.isMultiSelection && !isMouseEventWithMeta(event)) {
                _this.reset();
            }
        });
    };
    RowColumnClick.prototype.bindRowCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.ROW_CELL_CLICK, function (event) {
            _this.handleRowColClick(event);
        });
    };
    RowColumnClick.prototype.bindColCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.COL_CELL_CLICK, function (event) {
            _this.handleRowColClick(event);
        });
    };
    RowColumnClick.prototype.showTooltip = function (event) {
        var _a = getTooltipOptions(this.spreadsheet, event), operation = _a.operation, showTooltip = _a.showTooltip;
        if (!showTooltip) {
            return;
        }
        var interaction = this.spreadsheet.interaction;
        var cellInfos = interaction.isSelectedState()
            ? mergeCellInfo(interaction.getActiveCells())
            : [];
        var operator = this.getTooltipOperator(event, operation);
        this.spreadsheet.showTooltipWithInfo(event, cellInfos, {
            showSingleTips: true,
            operator: operator,
        });
    };
    RowColumnClick.prototype.getTooltipOperator = function (event, operation) {
        var _this = this;
        var cell = this.spreadsheet.getCell(event.target);
        var cellMeta = cell.getMeta();
        var isColCell = cell.cellType === CellTypes.COL_CELL;
        // 只有一个叶子节点时, 不显示隐藏按钮
        var isOnlyOneLeafColumn = this.spreadsheet.getColumnLeafNodes().length === 1;
        var TOOLTIP_OPERATOR_HIDDEN_COLUMNS_MENU = getTooltipOperatorHiddenColumnsMenu();
        var enableHiddenColumnOperator = isColCell &&
            !isOnlyOneLeafColumn &&
            cellMeta.isLeaf &&
            operation.hiddenColumns;
        var hiddenColumnsMenu = enableHiddenColumnOperator && __assign(__assign({}, TOOLTIP_OPERATOR_HIDDEN_COLUMNS_MENU), { onClick: function () {
                _this.hideSelectedColumns();
            } });
        return getTooltipVisibleOperator(operation, {
            defaultMenus: [hiddenColumnsMenu],
            cell: cell,
        });
    };
    RowColumnClick.prototype.bindTableColExpand = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.LAYOUT_COLS_EXPANDED, function (node) {
            _this.handleExpandIconClick(node);
        });
    };
    /**
     * 隐藏选中的列
     * 每次点击存储两个信息
     * 1. [hiddenColumnFields]: 当前选中 (单/多选) 的 field, 对应 dataCfg 里面的 column
     *    用于点击展开按钮后还原, 区别于 options.hiddenColumnFields, 这里需要分段存储, 比如现在有两个隐藏的列
     *    [1,2, (3隐藏), 4, 5, (6隐藏), 7]
     *    展开按钮在 4, 7, 点击任意按钮, 应该只展开所对应的那组 : 4 => [3], 7 => [6]
     * 2. [displaySiblingNode]: 当前这一组的列隐藏后, 需要将展开按钮显示到对应的兄弟节点
     * 这样不用每次 render 的时候实时计算, 渲染列头单元格 直接取数据即可
     */
    RowColumnClick.prototype.hideSelectedColumns = function () {
        var interaction = this.spreadsheet.interaction;
        var selectedColumnNodes = interaction
            .getActiveCells()
            .map(function (cell) { return cell.getMeta(); });
        var selectedColumnFields = selectedColumnNodes.map(this.getHideColumnField);
        // 兼容多选
        hideColumnsByThunkGroup(this.spreadsheet, selectedColumnFields, true);
    };
    RowColumnClick.prototype.handleExpandIconClick = function (node) {
        var lastHiddenColumnsDetail = this.spreadsheet.store.get('hiddenColumnsDetail', []);
        // 当前单元格的前/后节点都被隐藏时, 会出现两个展开按钮, 优先展开靠右的
        var _a = (findLast$1(lastHiddenColumnsDetail, function (_a) {
            var displaySiblingNode = _a.displaySiblingNode;
            return isEqualDisplaySiblingNodeId(displaySiblingNode, node.id);
        }) || {}).hideColumnNodes, hideColumnNodes = _a === void 0 ? [] : _a;
        var lastHideColumnFields = this.spreadsheet.options.interaction.hiddenColumnFields;
        var willDisplayColumnFields = hideColumnNodes.map(this.getHideColumnField);
        var hiddenColumnFields = difference$1(lastHideColumnFields, willDisplayColumnFields);
        var hiddenColumnsDetail = lastHiddenColumnsDetail.filter(function (_a) {
            var displaySiblingNode = _a.displaySiblingNode;
            return !isEqualDisplaySiblingNodeId(displaySiblingNode, node.id);
        });
        this.spreadsheet.setOptions({
            interaction: {
                hiddenColumnFields: hiddenColumnFields,
            },
        });
        this.spreadsheet.store.set('hiddenColumnsDetail', hiddenColumnsDetail);
        this.spreadsheet.interaction.reset();
        this.spreadsheet.render(false);
    };
    return RowColumnClick;
}(BaseEvent));

/**
 * Row header click navigation interaction
 */
var RowTextClick = /** @class */ (function (_super) {
    __extends(RowTextClick, _super);
    function RowTextClick() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getRowData = function (cellData) {
            var _a;
            var leafNode = cellData.getHeadLeafChild();
            var data = _this.spreadsheet.dataSet.getMultiData(leafNode === null || leafNode === void 0 ? void 0 : leafNode.query)[0];
            return __assign(__assign({}, data), { rowIndex: (_a = cellData.rowIndex) !== null && _a !== void 0 ? _a : leafNode.rowIndex });
        };
        return _this;
    }
    RowTextClick.prototype.bindEvents = function () {
        this.bindRowCellClick();
    };
    RowTextClick.prototype.bindRowCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.ROW_CELL_CLICK, function (event) {
            if (_this.spreadsheet.interaction.hasIntercepts([InterceptType.CLICK])) {
                return;
            }
            if (!_this.isLinkFieldText(event.target)) {
                return;
            }
            var cellData = _this.getCellAppendInfo(event.target).cellData;
            var key = cellData.key;
            var rowData = _this.getRowData(cellData);
            _this.spreadsheet.emit(S2Event.GLOBAL_LINK_FIELD_JUMP, {
                key: key,
                cellData: cellData,
                record: rowData,
            });
        });
    };
    return RowTextClick;
}(BaseEvent));

var CornerCellClick = /** @class */ (function (_super) {
    __extends(CornerCellClick, _super);
    function CornerCellClick() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CornerCellClick.prototype.bindEvents = function () {
        this.bindCornerCellClick();
    };
    CornerCellClick.prototype.bindCornerCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.CORNER_CELL_CLICK, function (event) {
            var _a;
            var interaction = _this.spreadsheet.interaction;
            var cornerCell = _this.spreadsheet.getCell(event.target);
            if (!cornerCell) {
                return;
            }
            // 获取当前角头所对应那一列的行头单元格节点
            var cornerCellMeta = cornerCell.getMeta();
            var rowNodes = _this.getRowNodesByField(cornerCellMeta === null || cornerCellMeta === void 0 ? void 0 : cornerCellMeta.field);
            var sample = (_a = rowNodes[0]) === null || _a === void 0 ? void 0 : _a.belongsCell;
            var cells = _this.getRowCells(rowNodes);
            if (sample && interaction.isSelectedCell(sample)) {
                interaction.reset();
                _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
                return;
            }
            if (isEmpty(rowNodes) || isEmpty(cells)) {
                return;
            }
            // TODO: next 版本统一梳理下对外暴露的 api, 也可以新增一些 交互方法, 减少模板代码: eg. `selectRowCells`, `selectColCells`, `getRowNodesByField`
            interaction.addIntercepts([InterceptType.HOVER]);
            interaction.changeState({
                cells: cells,
                stateName: InteractionStateName.SELECTED,
            });
            interaction.highlightNodes(rowNodes);
            _this.showTooltip(event);
            _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
        });
    };
    CornerCellClick.prototype.getRowNodesByField = function (field) {
        return this.spreadsheet
            .getRowNodes()
            .filter(function (node) { return node.field === field; });
    };
    CornerCellClick.prototype.getRowCells = function (nodes) {
        return nodes.map(function (node) {
            return {
                id: node.id,
                // 选中角头而高亮的行头, 不需要联动数值单元格, 所以索引设置为 -1
                colIndex: -1,
                rowIndex: -1,
                type: CellTypes.ROW_CELL,
            };
        });
    };
    CornerCellClick.prototype.showTooltip = function (event) {
        // 角头的选中是维值, 不需要计算数值总和, 显示 [`xx 项已选中`] 即可
        var selectedData = this.spreadsheet.interaction.getActiveCells();
        this.spreadsheet.showTooltipWithInfo(event, [], {
            data: {
                summaries: [
                    {
                        selectedData: selectedData,
                        name: '',
                        value: null,
                    },
                ],
            },
        });
    };
    return CornerCellClick;
}(BaseEvent));

/**
 * @description Hover event for data cells, row cells and col cells
 */
var HoverEvent = /** @class */ (function (_super) {
    __extends(HoverEvent, _super);
    function HoverEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HoverEvent.prototype.bindEvents = function () {
        this.bindCornerCellHover();
        this.bindDataCellHover();
        this.bindRowCellHover();
        this.bindColCellHover();
    };
    HoverEvent.prototype.updateRowColCells = function (meta) {
        var rowId = meta.rowId, colId = meta.colId;
        var interaction = this.spreadsheet.interaction;
        var _a = interaction.getHoverHighlight(), rowHeader = _a.rowHeader, colHeader = _a.colHeader;
        if (colHeader) {
            updateAllColHeaderCellState(colId, interaction.getAllColHeaderCells(), InteractionStateName.HOVER);
        }
        if (rowHeader && rowId) {
            // update rowHeader cells
            var allRowHeaderCells = getActiveHoverRowColCells(rowId, interaction.getAllRowHeaderCells(), this.spreadsheet.isHierarchyTreeType());
            forEach(allRowHeaderCells, function (cell) {
                cell.updateByState(InteractionStateName.HOVER);
            });
        }
    };
    /**
     * @description change the data cell state from hover to hover focus
     * @param cell
     * @param event
     * @param meta
     */
    HoverEvent.prototype.changeStateToHoverFocus = function (cell, event, meta) {
        var _this = this;
        var _a;
        var interaction = this.spreadsheet.interaction;
        var interactionOptions = this.spreadsheet.options.interaction;
        var hoverFocus = interactionOptions.hoverFocus;
        interaction.clearHoverTimer();
        var handleHoverFocus = function () {
            if (interaction.hasIntercepts([InterceptType.HOVER])) {
                return;
            }
            interaction.changeState({
                cells: [getCellMeta(cell)],
                stateName: InteractionStateName.HOVER_FOCUS,
            });
            var showSingleTips = _this.spreadsheet.isTableMode();
            var options = {
                isTotals: meta.isTotals,
                enterable: true,
                hideSummary: true,
                showSingleTips: showSingleTips,
            };
            var _a = interaction.getHoverHighlight(), rowHeader = _a.rowHeader, colHeader = _a.colHeader;
            if (rowHeader || colHeader) {
                // highlight all the row and column cells which the cell belongs to
                _this.updateRowColCells(meta);
            }
            var data = _this.getCellData(meta, showSingleTips);
            _this.spreadsheet.showTooltipWithInfo(event, data, options);
        };
        var hoverFocusDuration = HOVER_FOCUS_DURATION;
        if (!isBoolean(hoverFocus)) {
            hoverFocusDuration = (_a = hoverFocus === null || hoverFocus === void 0 ? void 0 : hoverFocus.duration) !== null && _a !== void 0 ? _a : HOVER_FOCUS_DURATION;
        }
        if (hoverFocusDuration === 0) {
            handleHoverFocus();
        }
        else {
            var hoverTimer = window.setTimeout(function () { return handleHoverFocus(); }, hoverFocusDuration);
            interaction.setHoverTimer(hoverTimer);
        }
    };
    /**
     * @description handle the row or column header hover state
     * @param event
     */
    HoverEvent.prototype.handleHeaderHover = function (event) {
        var cell = this.spreadsheet.getCell(event.target);
        if (isEmpty(cell)) {
            return;
        }
        var interaction = this.spreadsheet.interaction;
        interaction.clearHoverTimer();
        // 避免在同一单元格内鼠标移动造成的多次渲染
        if (interaction.isActiveCell(cell)) {
            return;
        }
        interaction.changeState({
            cells: [getCellMeta(cell)],
            stateName: InteractionStateName.HOVER,
        });
        cell.update();
        this.showEllipsisTooltip(event, cell);
    };
    HoverEvent.prototype.showEllipsisTooltip = function (event, cell) {
        if (!cell || !cell.isTextOverflowing()) {
            this.spreadsheet.hideTooltip();
            return;
        }
        var meta = cell.getMeta();
        var showSingleTips = true;
        var options = {
            isTotals: meta.isTotals,
            enterable: true,
            hideSummary: true,
            showSingleTips: showSingleTips,
            enableFormat: true,
        };
        var data = this.getCellData(meta, showSingleTips);
        this.spreadsheet.showTooltipWithInfo(event, data, options);
    };
    HoverEvent.prototype.getCellData = function (meta, showSingleTips) {
        if (meta === void 0) { meta = {}; }
        var data = meta.data, query = meta.query, value = meta.value, field = meta.field, fieldValue = meta.fieldValue, valueField = meta.valueField, rowQuery = meta.rowQuery, colQuery = meta.colQuery;
        var currentCellMeta = data;
        var cellInfos = showSingleTips
            ? [
                __assign(__assign({}, query), { value: value || fieldValue, valueField: field || valueField }),
            ]
            : [currentCellMeta || __assign(__assign({}, rowQuery), colQuery)];
        return cellInfos;
    };
    HoverEvent.prototype.bindDataCellHover = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.DATA_CELL_HOVER, function (event) {
            var cell = _this.spreadsheet.getCell(event.target);
            if (isEmpty(cell)) {
                return;
            }
            var _a = _this.spreadsheet, interaction = _a.interaction, options = _a.options;
            var interactionOptions = options.interaction;
            var meta = cell === null || cell === void 0 ? void 0 : cell.getMeta();
            // 避免在同一单元格内鼠标移动造成的多次渲染
            if (interaction.isActiveCell(cell)) {
                return;
            }
            interaction.changeState({
                cells: [getCellMeta(cell)],
                stateName: InteractionStateName.HOVER,
            });
            var _b = interaction.getHoverHighlight(), rowHeader = _b.rowHeader, colHeader = _b.colHeader;
            if (rowHeader || colHeader) {
                // highlight all the row and column cells which the cell belongs to
                _this.updateRowColCells(meta);
            }
            if (interactionOptions.hoverFocus) {
                _this.changeStateToHoverFocus(cell, event, meta);
            }
        });
    };
    HoverEvent.prototype.bindRowCellHover = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.ROW_CELL_HOVER, function (event) {
            _this.handleHeaderHover(event);
        });
    };
    HoverEvent.prototype.bindColCellHover = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.COL_CELL_HOVER, function (event) {
            _this.handleHeaderHover(event);
        });
    };
    HoverEvent.prototype.bindCornerCellHover = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.CORNER_CELL_HOVER, function (event) {
            _this.handleHeaderHover(event);
        });
    };
    return HoverEvent;
}(BaseEvent));

/**
 * 刷选基类, dataCell, rowCell, colCell 支持滚动刷选
 */
var BaseBrushSelection = /** @class */ (function (_super) {
    __extends(BaseBrushSelection, _super);
    function BaseBrushSelection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.displayedCells = [];
        _this.brushRangeCells = [];
        _this.brushSelectionStage = InteractionBrushSelectionStage.UN_DRAGGED;
        _this.brushSelectionMinimumMoveDistance = 5;
        _this.scrollAnimationComplete = true;
        _this.mouseMoveDistanceFromCanvas = 0;
        _this.setMoveDistanceFromCanvas = function (delta, needScrollForX, needScrollForY) {
            var deltaVal = 0;
            if (needScrollForX) {
                deltaVal = delta.x;
            }
            if (needScrollForY) {
                var deltaY = delta.y;
                if (needScrollForX) {
                    deltaVal = Math.max(deltaY, deltaVal);
                }
                else {
                    deltaVal = deltaY;
                }
            }
            _this.mouseMoveDistanceFromCanvas = Math.abs(deltaVal);
        };
        _this.formatBrushPointForScroll = function (delta, isRowHeader) {
            var _a, _b, _c, _d;
            if (isRowHeader === void 0) { isRowHeader = false; }
            var x = delta.x, y = delta.y;
            var facet = _this.spreadsheet.facet;
            var _e = isRowHeader ? facet.cornerBBox : facet.panelBBox, minX = _e.minX, maxX = _e.maxX;
            var _f = facet.panelBBox, minY = _f.minY, maxY = _f.maxY;
            var newX = ((_a = _this.endBrushPoint) === null || _a === void 0 ? void 0 : _a.x) + x;
            var newY = ((_b = _this.endBrushPoint) === null || _b === void 0 ? void 0 : _b.y) + y;
            var needScrollForX = true;
            var needScrollForY = true;
            var vScrollBarWidth = (_d = (_c = facet.vScrollBar) === null || _c === void 0 ? void 0 : _c.getBBox()) === null || _d === void 0 ? void 0 : _d.width;
            var extraPixel = 2; // 额外加缩进，保证 getShape 在 panelBox 内
            if (newX > maxX) {
                newX = maxX - vScrollBarWidth - extraPixel;
            }
            else if (newX < minX) {
                newX = minX + extraPixel;
            }
            else {
                needScrollForX = false;
            }
            if (newY > maxY) {
                newY = maxY - extraPixel;
            }
            else if (newY <= minY) {
                newY = minY + extraPixel;
            }
            else {
                needScrollForY = false;
            }
            return {
                x: {
                    value: newX,
                    needScroll: needScrollForX,
                },
                y: {
                    value: newY,
                    needScroll: needScrollForY,
                },
            };
        };
        // 矩形相交算法: 通过判断两矩形左右上下的线是否相交
        _this.rectanglesIntersect = function (rect1, rect2) {
            return (rect1.maxX > rect2.minX &&
                rect1.minX < rect2.maxX &&
                rect1.minY < rect2.maxY &&
                rect1.maxY > rect2.minY);
        };
        _this.autoScrollIntervalId = null;
        _this.autoScrollConfig = cloneDeep(BRUSH_AUTO_SCROLL_INITIAL_CONFIG);
        _this.validateYIndex = function (yIndex) {
            var _a, _b;
            var facet = _this.spreadsheet.facet;
            var frozenInfo = facet.frozenGroupInfo;
            var min = 0;
            var frozenRowRange = (_a = frozenInfo === null || frozenInfo === void 0 ? void 0 : frozenInfo.frozenRow) === null || _a === void 0 ? void 0 : _a.range;
            if (frozenRowRange) {
                min = frozenRowRange[1] + 1;
            }
            if (yIndex < min) {
                return null;
            }
            var max = facet.getCellRange().end;
            var frozenTrailingRowRange = (_b = frozenInfo === null || frozenInfo === void 0 ? void 0 : frozenInfo.frozenTrailingRow) === null || _b === void 0 ? void 0 : _b.range;
            if (frozenTrailingRowRange) {
                max = frozenTrailingRowRange[0] - 1;
            }
            if (yIndex > max) {
                return null;
            }
            return yIndex;
        };
        _this.validateXIndex = function (xIndex) {
            var _a, _b;
            var facet = _this.spreadsheet.facet;
            var frozenInfo = facet.frozenGroupInfo;
            var min = 0;
            var frozenColRange = (_a = frozenInfo === null || frozenInfo === void 0 ? void 0 : frozenInfo.frozenCol) === null || _a === void 0 ? void 0 : _a.range;
            if (frozenColRange) {
                min = frozenColRange[1] + 1;
            }
            if (xIndex < min) {
                return null;
            }
            var max = facet.layoutResult.colLeafNodes.length - 1;
            var frozenTrailingColRange = (_b = frozenInfo === null || frozenInfo === void 0 ? void 0 : frozenInfo.frozenTrailingCol) === null || _b === void 0 ? void 0 : _b.range;
            if (frozenTrailingColRange) {
                max = frozenTrailingColRange[0] - 1;
            }
            if (xIndex > max) {
                return null;
            }
            return xIndex;
        };
        _this.adjustNextColIndexWithFrozen = function (colIndex, dir) {
            var _a = _this.spreadsheet, facet = _a.facet, dataSet = _a.dataSet, options = _a.options;
            var dataLength = dataSet.getDisplayDataSet().length;
            var colLength = facet.layoutResult.colLeafNodes.length;
            var _b = getValidFrozenOptions(options, colLength, dataLength), frozenTrailingColCount = _b.frozenTrailingColCount, frozenColCount = _b.frozenColCount;
            var panelIndexes = facet.panelScrollGroupIndexes;
            if (frozenTrailingColCount > 0 &&
                dir === ScrollDirection.SCROLL_DOWN &&
                isFrozenTrailingCol(colIndex, frozenTrailingColCount, colLength)) {
                return panelIndexes[1];
            }
            if (frozenColCount > 0 &&
                dir === ScrollDirection.SCROLL_UP &&
                isFrozenCol(colIndex, frozenColCount)) {
                return panelIndexes[0];
            }
            return colIndex;
        };
        _this.adjustNextRowIndexWithFrozen = function (rowIndex, dir) {
            var _a = _this.spreadsheet, facet = _a.facet, dataSet = _a.dataSet, options = _a.options;
            var dataLength = dataSet.getDisplayDataSet().length;
            var colLength = facet.layoutResult.colLeafNodes.length;
            var cellRange = facet.getCellRange();
            var _b = getValidFrozenOptions(options, colLength, dataLength), frozenTrailingRowCount = _b.frozenTrailingRowCount, frozenRowCount = _b.frozenRowCount;
            var panelIndexes = facet.panelScrollGroupIndexes;
            if (frozenTrailingRowCount > 0 &&
                dir === ScrollDirection.SCROLL_DOWN &&
                isFrozenTrailingRow(rowIndex, cellRange.end, frozenTrailingRowCount)) {
                return panelIndexes[3];
            }
            if (frozenRowCount > 0 &&
                dir === ScrollDirection.SCROLL_UP &&
                isFrozenRow(rowIndex, cellRange.start, frozenRowCount)) {
                return panelIndexes[2];
            }
            return rowIndex;
        };
        _this.getWillScrollRowIndexDiff = function (dir) {
            return dir === ScrollDirection.SCROLL_DOWN
                ? ScrollDirectionRowIndexDiff.SCROLL_DOWN
                : ScrollDirectionRowIndexDiff.SCROLL_UP;
        };
        _this.getDefaultWillScrollToRowIndex = function (dir) {
            var rowIndex = _this.adjustNextRowIndexWithFrozen(_this.endBrushPoint.rowIndex, dir);
            var nextRowIndex = rowIndex + _this.getWillScrollRowIndexDiff(dir);
            return _this.validateYIndex(nextRowIndex);
        };
        _this.getWillScrollToRowIndex = function (dir) {
            return _this.getDefaultWillScrollToRowIndex(dir);
        };
        _this.getNextScrollDelta = function (config) {
            var _a = _this.spreadsheet.facet.getScrollOffset(), scrollX = _a.scrollX, scrollY = _a.scrollY;
            var x = 0;
            var y = 0;
            if (config.y.scroll) {
                var dir = config.y.value > 0
                    ? ScrollDirection.SCROLL_DOWN
                    : ScrollDirection.SCROLL_UP;
                var willScrollToRowIndex = _this.getWillScrollToRowIndex(dir);
                var scrollOffsetY = getScrollOffsetForRow(willScrollToRowIndex, dir, _this.spreadsheet) -
                    scrollY;
                var isInvalidScroll = isNil(willScrollToRowIndex) ||
                    isNil(scrollOffsetY) ||
                    Number.isNaN(scrollOffsetY);
                y = isInvalidScroll ? 0 : scrollOffsetY;
            }
            if (config.x.scroll) {
                var dir = config.x.value > 0
                    ? ScrollDirection.SCROLL_DOWN
                    : ScrollDirection.SCROLL_UP;
                var colIndex = _this.adjustNextColIndexWithFrozen(_this.endBrushPoint.colIndex, dir);
                var nextIndex = _this.validateXIndex(colIndex + (config.x.value > 0 ? 1 : -1));
                x = isNil(nextIndex)
                    ? 0
                    : getScrollOffsetForCol(nextIndex, dir, _this.spreadsheet) - scrollX;
            }
            return {
                x: x,
                y: y,
            };
        };
        _this.onScrollAnimationComplete = function () {
            _this.scrollAnimationComplete = true;
            if (_this.brushSelectionStage !== InteractionBrushSelectionStage.UN_DRAGGED) {
                _this.renderPrepareSelected(_this.endBrushPoint);
            }
        };
        _this.autoScroll = function (isRowHeader) {
            if (isRowHeader === void 0) { isRowHeader = false; }
            if (_this.brushSelectionStage === InteractionBrushSelectionStage.UN_DRAGGED ||
                !_this.scrollAnimationComplete) {
                return;
            }
            var config = _this.autoScrollConfig;
            var scrollOffset = _this.spreadsheet.facet.getScrollOffset();
            var key = isRowHeader
                ? 'rowHeaderOffsetX'
                : 'offsetX';
            var offsetCfg = {
                rowHeaderOffsetX: {
                    value: scrollOffset.rowHeaderScrollX,
                    animate: true,
                },
                offsetX: {
                    value: scrollOffset.scrollX,
                    animate: true,
                },
                offsetY: {
                    value: scrollOffset.scrollY,
                    animate: true,
                },
            };
            var _a = _this.getNextScrollDelta(config), deltaX = _a.x, deltaY = _a.y;
            if (deltaY === 0 && deltaX === 0) {
                _this.clearAutoScroll();
                return;
            }
            if (config.y.scroll) {
                offsetCfg.offsetY.value += deltaY;
            }
            if (config.x.scroll) {
                var offset = offsetCfg[key];
                offset.value += deltaX;
                if (offset.value < 0) {
                    offset.value = 0;
                }
            }
            _this.scrollAnimationComplete = false;
            // x 轴滚动速度慢
            var ratio = config.x.scroll ? 1 : 3;
            var duration = Math.max(16, 300 - _this.mouseMoveDistanceFromCanvas * ratio);
            _this.spreadsheet.facet.scrollWithAnimation(offsetCfg, duration, _this.onScrollAnimationComplete);
        };
        _this.handleScroll = throttle(function (x, y, isRowHeader) {
            if (isRowHeader === void 0) { isRowHeader = false; }
            if (_this.brushSelectionStage === InteractionBrushSelectionStage.UN_DRAGGED) {
                return;
            }
            var _a = _this.formatBrushPointForScroll({ x: x, y: y }, isRowHeader), _b = _a.x, newX = _b.value, needScrollForX = _b.needScroll, _c = _a.y, newY = _c.value, needScrollForY = _c.needScroll;
            var config = _this.autoScrollConfig;
            if (needScrollForY) {
                config.y.value = y;
                config.y.scroll = true;
            }
            if (needScrollForX) {
                config.x.value = x;
                config.x.scroll = true;
            }
            _this.setMoveDistanceFromCanvas({ x: x, y: y }, needScrollForX, needScrollForY);
            _this.renderPrepareSelected({
                x: newX,
                y: newY,
            });
            if (needScrollForY || needScrollForX) {
                _this.clearAutoScroll();
                _this.autoScroll(isRowHeader);
                _this.autoScrollIntervalId = setInterval(function () {
                    _this.autoScroll(isRowHeader);
                }, 16);
            }
        }, 30);
        _this.clearAutoScroll = function () {
            if (_this.autoScrollIntervalId) {
                clearInterval(_this.autoScrollIntervalId);
                _this.autoScrollIntervalId = null;
                _this.resetScrollDelta();
            }
        };
        _this.onUpdateCells = function (_, defaultOnUpdateCells) {
            return defaultOnUpdateCells();
        };
        // 刷选过程中高亮的cell
        _this.showPrepareSelectedCells = function () {
            _this.brushRangeCells = _this.getBrushRangeCells();
            _this.spreadsheet.interaction.changeState({
                cells: map(_this.brushRangeCells, function (item) { return getCellMeta(item); }),
                stateName: InteractionStateName.PREPARE_SELECT,
                // 刷选首先会经过 hover => mousedown => mousemove, hover时会将当前行全部高亮 (row cell + data cell)
                // 如果是有效刷选, 更新时会重新渲染, hover 高亮的格子 会正常重置
                // 如果是无效刷选(全部都是没数据的格子), brushRangeDataCells = [], 更新时会跳过, 需要强制重置 hover 高亮
                force: true,
                onUpdateCells: _this.onUpdateCells,
            });
        };
        _this.renderPrepareSelected = function (point) {
            var x = point.x, y = point.y;
            var target = _this.spreadsheet.container.getShape(x, y);
            var cell = _this.spreadsheet.getCell(target);
            // 只有行头，列头，单元格可以刷选
            var isBrushCellType = cell instanceof DataCell ||
                cell instanceof RowCell ||
                cell instanceof ColCell;
            if (!cell || !isBrushCellType) {
                return;
            }
            var _a = cell.getMeta(), rowIndex = _a.rowIndex, colIndex = _a.colIndex;
            _this.endBrushPoint = {
                x: x,
                y: y,
                rowIndex: rowIndex,
                colIndex: colIndex,
            };
            var interaction = _this.spreadsheet.interaction;
            interaction.addIntercepts([InterceptType.HOVER]);
            interaction.clearStyleIndependent();
            if (_this.isValidBrushSelection()) {
                _this.showPrepareSelectedCells();
                _this.updatePrepareSelectMask();
            }
        };
        return _this;
    }
    BaseBrushSelection.prototype.bindEvents = function () {
        this.bindMouseDown();
        this.bindMouseMove();
        this.bindMouseUp();
    };
    BaseBrushSelection.prototype.getPrepareSelectMaskTheme = function () {
        var _a;
        return (_a = this.spreadsheet.theme) === null || _a === void 0 ? void 0 : _a.prepareSelectMask;
    };
    BaseBrushSelection.prototype.initPrepareSelectMaskShape = function () {
        var foregroundGroup = this.spreadsheet.foregroundGroup;
        if (!foregroundGroup) {
            return;
        }
        foregroundGroup.removeChild(this.prepareSelectMaskShape);
        var prepareSelectMaskTheme = this.getPrepareSelectMaskTheme();
        this.prepareSelectMaskShape = foregroundGroup.addShape('rect', {
            visible: false,
            attrs: {
                width: 0,
                height: 0,
                x: 0,
                y: 0,
                fill: prepareSelectMaskTheme === null || prepareSelectMaskTheme === void 0 ? void 0 : prepareSelectMaskTheme.backgroundColor,
                fillOpacity: prepareSelectMaskTheme === null || prepareSelectMaskTheme === void 0 ? void 0 : prepareSelectMaskTheme.backgroundOpacity,
                zIndex: FRONT_GROUND_GROUP_BRUSH_SELECTION_Z_INDEX,
            },
            capture: false,
        });
    };
    BaseBrushSelection.prototype.setBrushSelectionStage = function (stage) {
        this.brushSelectionStage = stage;
    };
    // 默认是 Data cell 的绘制区
    BaseBrushSelection.prototype.isPointInCanvas = function (point) {
        var _a = this.spreadsheet.facet.getCanvasHW(), height = _a.height, width = _a.width;
        var _b = this.spreadsheet.facet.panelBBox, minX = _b.minX, minY = _b.minY;
        return (point.x > minX && point.x < width && point.y > minY && point.y < height);
    };
    BaseBrushSelection.prototype.resetDrag = function () {
        this.hidePrepareSelectMaskShape();
        this.setBrushSelectionStage(InteractionBrushSelectionStage.UN_DRAGGED);
    };
    BaseBrushSelection.prototype.isValidBrushSelection = function () {
        var _a = this.getBrushRange(), start = _a.start, end = _a.end;
        var isMovedEnoughDistance = end.x - start.x > this.brushSelectionMinimumMoveDistance ||
            end.y - start.y > this.brushSelectionMinimumMoveDistance;
        return isMovedEnoughDistance;
    };
    BaseBrushSelection.prototype.setDisplayedCells = function () {
        this.displayedCells =
            this.spreadsheet.interaction.getPanelGroupAllDataCells();
    };
    BaseBrushSelection.prototype.updatePrepareSelectMask = function () {
        var brushRange = this.getBrushRange();
        var _a = this.getPrepareSelectMaskPosition(brushRange), x = _a.x, y = _a.y;
        this.prepareSelectMaskShape.attr({
            x: x,
            y: y,
            width: brushRange.width,
            height: brushRange.height,
        });
        this.prepareSelectMaskShape.show();
    };
    BaseBrushSelection.prototype.hidePrepareSelectMaskShape = function () {
        var _a;
        (_a = this.prepareSelectMaskShape) === null || _a === void 0 ? void 0 : _a.hide();
    };
    BaseBrushSelection.prototype.resetScrollDelta = function () {
        this.autoScrollConfig = cloneDeep(BRUSH_AUTO_SCROLL_INITIAL_CONFIG);
    };
    BaseBrushSelection.prototype.getBrushPoint = function (event) {
        var _a = this.spreadsheet.facet.getScrollOffset(), scrollY = _a.scrollY, scrollX = _a.scrollX;
        var point = {
            x: event === null || event === void 0 ? void 0 : event.x,
            y: event === null || event === void 0 ? void 0 : event.y,
        };
        var cell = this.spreadsheet.getCell(event.target);
        var _b = cell.getMeta(), colIndex = _b.colIndex, rowIndex = _b.rowIndex;
        return __assign(__assign({}, point), { rowIndex: rowIndex, colIndex: colIndex, scrollY: scrollY, scrollX: scrollX });
    };
    // 四个刷选方向: 左 => 右, 右 => 左, 上 => 下, 下 => 上, 将最终结果进行重新排序, 获取真实的 row, col index
    BaseBrushSelection.prototype.getBrushRange = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var _j = this.spreadsheet.facet.getScrollOffset(), scrollX = _j.scrollX, scrollY = _j.scrollY;
        var minRowIndex = Math.min(this.startBrushPoint.rowIndex, (_a = this.endBrushPoint) === null || _a === void 0 ? void 0 : _a.rowIndex);
        var maxRowIndex = Math.max(this.startBrushPoint.rowIndex, (_b = this.endBrushPoint) === null || _b === void 0 ? void 0 : _b.rowIndex);
        var minColIndex = Math.min(this.startBrushPoint.colIndex, (_c = this.endBrushPoint) === null || _c === void 0 ? void 0 : _c.colIndex);
        var maxColIndex = Math.max(this.startBrushPoint.colIndex, (_d = this.endBrushPoint) === null || _d === void 0 ? void 0 : _d.colIndex);
        var startXInView = this.startBrushPoint.x + this.startBrushPoint.scrollX - scrollX;
        var startYInView = this.startBrushPoint.y + this.startBrushPoint.scrollY - scrollY;
        // startBrushPoint 和 endBrushPoint 加上当前 offset
        var minX = Math.min(startXInView, (_e = this.endBrushPoint) === null || _e === void 0 ? void 0 : _e.x);
        var maxX = Math.max(startXInView, (_f = this.endBrushPoint) === null || _f === void 0 ? void 0 : _f.x);
        var minY = Math.min(startYInView, (_g = this.endBrushPoint) === null || _g === void 0 ? void 0 : _g.y);
        var maxY = Math.max(startYInView, (_h = this.endBrushPoint) === null || _h === void 0 ? void 0 : _h.y);
        // x, y: 表示从整个表格（包含表头）从左上角作为 (0, 0) 的画布区域。
        // 这个 x, y 只有在绘制虚拟画布 和 是否有效移动时有效。
        return {
            start: {
                rowIndex: minRowIndex,
                colIndex: minColIndex,
                x: minX,
                y: minY,
            },
            end: {
                rowIndex: maxRowIndex,
                colIndex: maxColIndex,
                x: maxX,
                y: maxY,
            },
            width: maxX - minX,
            height: maxY - minY,
        };
    };
    // 获取对角线的两个坐标, 得到对应矩阵并且有数据的单元格
    BaseBrushSelection.prototype.getBrushRangeCells = function () {
        var _this = this;
        this.setDisplayedCells();
        return this.displayedCells.filter(function (cell) {
            var meta = cell.getMeta();
            return _this.isInBrushRange(meta);
        });
    };
    BaseBrushSelection.prototype.mouseDown = function (event) {
        var _a;
        (_a = event === null || event === void 0 ? void 0 : event.preventDefault) === null || _a === void 0 ? void 0 : _a.call(event);
        if (this.spreadsheet.interaction.hasIntercepts([InterceptType.CLICK])) {
            return;
        }
        this.setBrushSelectionStage(InteractionBrushSelectionStage.CLICK);
        this.initPrepareSelectMaskShape();
        this.setDisplayedCells();
        this.startBrushPoint = this.getBrushPoint(event);
    };
    BaseBrushSelection.prototype.addBrushIntercepts = function () {
        this.spreadsheet.interaction.addIntercepts([InterceptType.BRUSH_SELECTION]);
    };
    BaseBrushSelection.prototype.bindMouseUp = function (enableScroll) {
        var _this = this;
        if (enableScroll === void 0) { enableScroll = false; }
        // 使用全局的 mouseup, 而不是 canvas 的 mouse up 防止刷选过程中移出表格区域时无法响应事件
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_UP, function (event) {
            if (_this.brushSelectionStage !== InteractionBrushSelectionStage.DRAGGED) {
                _this.resetDrag();
                return;
            }
            if (enableScroll) {
                _this.clearAutoScroll();
            }
            if (_this.isValidBrushSelection()) {
                _this.addBrushIntercepts();
                _this.updateSelectedCells();
                var tooltipData = getCellsTooltipData(_this.spreadsheet);
                _this.spreadsheet.showTooltipWithInfo(event, tooltipData);
            }
            if (_this.spreadsheet.interaction.getCurrentStateName() ===
                InteractionStateName.PREPARE_SELECT) {
                _this.spreadsheet.interaction.reset();
            }
            _this.resetDrag();
        });
        // 刷选过程中右键弹出系统菜单时, 应该重置刷选, 防止系统菜单关闭后 mouse up 未相应依然是刷选状态
        this.spreadsheet.on(S2Event.GLOBAL_CONTEXT_MENU, function () {
            if (_this.brushSelectionStage === InteractionBrushSelectionStage.UN_DRAGGED) {
                return;
            }
            _this.spreadsheet.interaction.removeIntercepts([InterceptType.HOVER]);
            _this.resetDrag();
        });
    };
    BaseBrushSelection.prototype.autoBrushScroll = function (point, isRowHeader) {
        var _a, _b;
        if (isRowHeader === void 0) { isRowHeader = false; }
        this.clearAutoScroll();
        if (!this.isPointInCanvas(point)) {
            var deltaX = (point === null || point === void 0 ? void 0 : point.x) - ((_a = this.endBrushPoint) === null || _a === void 0 ? void 0 : _a.x);
            var deltaY = (point === null || point === void 0 ? void 0 : point.y) - ((_b = this.endBrushPoint) === null || _b === void 0 ? void 0 : _b.y);
            this.handleScroll(deltaX, deltaY, isRowHeader);
            return true;
        }
        return false;
    };
    BaseBrushSelection.prototype.emitBrushSelectionEvent = function (event, scrollBrushRangeCells) {
        this.spreadsheet.emit(event, scrollBrushRangeCells);
        this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, scrollBrushRangeCells);
        // 未刷选到有效单元格, 允许 hover
        if (isEmpty(scrollBrushRangeCells)) {
            this.spreadsheet.interaction.removeIntercepts([InterceptType.HOVER]);
        }
    };
    BaseBrushSelection.prototype.getVisibleBrushRangeCells = function (nodeId) {
        return this.brushRangeCells.find(function (cell) {
            var visibleCellMeta = cell.getMeta();
            return (visibleCellMeta === null || visibleCellMeta === void 0 ? void 0 : visibleCellMeta.id) === nodeId;
        });
    };
    // 需要查看继承他的父类是如何定义的
    BaseBrushSelection.prototype.isInBrushRange = function (meta) {
        return false;
    };
    BaseBrushSelection.prototype.bindMouseDown = function () { };
    BaseBrushSelection.prototype.bindMouseMove = function () { };
    BaseBrushSelection.prototype.updateSelectedCells = function () { };
    BaseBrushSelection.prototype.getPrepareSelectMaskPosition = function (brushRange) {
        return {
            x: brushRange.start.x,
            y: brushRange.start.y,
        };
    };
    return BaseBrushSelection;
}(BaseEvent));

var ColBrushSelection = /** @class */ (function (_super) {
    __extends(ColBrushSelection, _super);
    function ColBrushSelection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.displayedCells = [];
        _this.brushRangeCells = [];
        _this.onUpdateCells = function (root) {
            return root.updateCells(root.getAllColHeaderCells());
        };
        return _this;
    }
    ColBrushSelection.prototype.bindEvents = function () {
        this.bindMouseDown();
        this.bindMouseMove();
        this.bindMouseUp();
    };
    ColBrushSelection.prototype.bindMouseDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.COL_CELL_MOUSE_DOWN, function (event) {
            if (!_this.spreadsheet.interaction.getBrushSelection().col) {
                return;
            }
            _super.prototype.mouseDown.call(_this, event);
        });
    };
    ColBrushSelection.prototype.isPointInCanvas = function (point) {
        // 获取列头的区域范围
        var maxX = this.spreadsheet.facet.getCanvasHW().width;
        var _a = this.spreadsheet.facet.cornerBBox, minX = _a.width, minY = _a.minY, maxY = _a.maxY;
        return (point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY);
    };
    ColBrushSelection.prototype.bindMouseMove = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.COL_CELL_MOUSE_MOVE, function (event) {
            if (_this.brushSelectionStage === InteractionBrushSelectionStage.UN_DRAGGED) {
                return;
            }
            _this.setBrushSelectionStage(InteractionBrushSelectionStage.DRAGGED);
            var pointInCanvas = _this.spreadsheet.container.getPointByEvent(event.originalEvent);
            if (!_this.isPointInCanvas(pointInCanvas)) {
                return;
            }
            _this.renderPrepareSelected(pointInCanvas);
        });
    };
    ColBrushSelection.prototype.setDisplayedCells = function () {
        this.displayedCells = this.spreadsheet.interaction.getAllColHeaderCells();
    };
    /**
     * 用户判断 colCell 是否在当前刷选的范围内
     * @param meta colCell 位置等属性存储的对象
     * @returns boolean
     */
    ColBrushSelection.prototype.isInBrushRange = function (meta) {
        var _a = this.getBrushRange(), start = _a.start, end = _a.end;
        var scrollX = this.spreadsheet.facet.getScrollOffset().scrollX;
        var cornerBBox = this.spreadsheet.facet.cornerBBox;
        var _b = meta.x, x = _b === void 0 ? 0 : _b, _c = meta.y, y = _c === void 0 ? 0 : _c, _d = meta.width, width = _d === void 0 ? 0 : _d, _e = meta.height, height = _e === void 0 ? 0 : _e;
        return this.rectanglesIntersect({
            // 由于刷选的时候，是以列头的左上角为起点，所以需要减去角头的宽度，在滚动后需要加上滚动条的偏移量
            minX: start.x - cornerBBox.width + scrollX,
            minY: start.y,
            maxX: end.x - cornerBBox.width + scrollX,
            maxY: end.y,
        }, {
            minX: x,
            maxX: x + width,
            minY: y,
            maxY: y + height,
        });
    };
    // 最终刷选的 cell
    ColBrushSelection.prototype.updateSelectedCells = function () {
        var interaction = this.spreadsheet.interaction;
        interaction.changeState({
            cells: map(this.brushRangeCells, getCellMeta),
            stateName: InteractionStateName.BRUSH_SELECTED,
            onUpdateCells: this.onUpdateCells,
        });
        this.spreadsheet.emit(S2Event.COL_CELL_BRUSH_SELECTION, this.brushRangeCells);
        this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, this.brushRangeCells);
        // 未刷选到有效格子, 允许 hover
        if (isEmpty(this.brushRangeCells)) {
            interaction.removeIntercepts([InterceptType.HOVER]);
        }
    };
    ColBrushSelection.prototype.addBrushIntercepts = function () {
        this.spreadsheet.interaction.addIntercepts([
            InterceptType.COL_BRUSH_SELECTION,
        ]);
    };
    return ColBrushSelection;
}(BaseBrushSelection));

var DataCellBrushSelection = /** @class */ (function (_super) {
    __extends(DataCellBrushSelection, _super);
    function DataCellBrushSelection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.displayedCells = [];
        _this.brushRangeCells = [];
        _this.getSelectedCellMetas = function (brushRange) {
            var metas = [];
            var _a = _this.spreadsheet.facet.layoutResult, _b = _a.rowLeafNodes, rowLeafNodes = _b === void 0 ? [] : _b, _c = _a.colLeafNodes, colLeafNodes = _c === void 0 ? [] : _c;
            var rowIndexRange = range$1(brushRange.start.rowIndex, brushRange.end.rowIndex + 1);
            var colIndexRange = range$1(brushRange.start.colIndex, brushRange.end.colIndex + 1);
            rowIndexRange.forEach(function (rowIndex) {
                colIndexRange.forEach(function (colIndex) {
                    var colId = String(colLeafNodes[colIndex].id);
                    var rowId = isEmpty(rowLeafNodes)
                        ? String(rowIndex)
                        : String(rowLeafNodes[rowIndex].id);
                    metas.push({
                        colIndex: colIndex,
                        rowIndex: rowIndex,
                        id: "".concat(rowId, "-").concat(colId),
                        type: CellTypes.DATA_CELL,
                        rowId: rowId,
                        colId: colId,
                        spreadsheet: _this.spreadsheet,
                    });
                });
            });
            return metas;
        };
        return _this;
    }
    DataCellBrushSelection.prototype.bindMouseDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.DATA_CELL_MOUSE_DOWN, function (event) {
            if (!_this.spreadsheet.interaction.getBrushSelection().data) {
                return;
            }
            _super.prototype.mouseDown.call(_this, event);
            _this.resetScrollDelta();
        });
    };
    DataCellBrushSelection.prototype.bindMouseMove = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_MOVE, function (event) {
            if (_this.brushSelectionStage === InteractionBrushSelectionStage.UN_DRAGGED) {
                return;
            }
            _this.setBrushSelectionStage(InteractionBrushSelectionStage.DRAGGED);
            var pointInCanvas = _this.spreadsheet.container.getPointByEvent(event);
            if (_this.autoBrushScroll(pointInCanvas)) {
                return;
            }
            _this.renderPrepareSelected(pointInCanvas);
        });
    };
    DataCellBrushSelection.prototype.isInBrushRange = function (meta) {
        var _a = this.getBrushRange(), start = _a.start, end = _a.end;
        var rowIndex = meta.rowIndex, colIndex = meta.colIndex;
        return (rowIndex >= start.rowIndex &&
            rowIndex <= end.rowIndex &&
            colIndex >= start.colIndex &&
            colIndex <= end.colIndex);
    };
    // 最终刷选的 cell
    DataCellBrushSelection.prototype.updateSelectedCells = function () {
        var brushRange = this.getBrushRange();
        var selectedCellMetas = this.getSelectedCellMetas(brushRange);
        this.spreadsheet.interaction.changeState({
            cells: selectedCellMetas,
            // TODO: 怕上层有直接消费 stateName, 暂时保留, 2.0 版本改成 InteractionStateName.BRUSH_SELECTED
            stateName: InteractionStateName.SELECTED,
            onUpdateCells: afterSelectDataCells,
        });
        var scrollBrushRangeCells = this.getScrollBrushRangeCells(selectedCellMetas);
        this.emitBrushSelectionEvent(S2Event.DATA_CELL_BRUSH_SELECTION, scrollBrushRangeCells);
    };
    /**
     * @name 获取刷选 (含滚动后不再可视范围内) 的单元格
     * @description DataCell 存在滚动刷选, 由于按需加载的特性, 非可视范围内的单元格已被注销
     * 如果在可视范围, 直接返回 DataCell, 非可视范围, 由于实例已被销毁, 构造实例后返回
     */
    DataCellBrushSelection.prototype.getScrollBrushRangeCells = function (selectedCellMetas) {
        var _this = this;
        return selectedCellMetas.map(function (meta) {
            var visibleCell = _this.getVisibleBrushRangeCells(meta.id);
            if (visibleCell) {
                return visibleCell;
            }
            var viewMeta = _this.spreadsheet.facet.layoutResult.getCellMeta(meta.rowIndex, meta.colIndex);
            // TODO: next 分支把这些单元格 (包括自定义单元格) 都放在了 s2.options.dataCell 里, 合并后不需要判断是不是明细表了
            var Cell = _this.spreadsheet.isTableMode() ? TableDataCell : DataCell;
            return new Cell(viewMeta, _this.spreadsheet);
        });
    };
    DataCellBrushSelection.prototype.bindMouseUp = function () {
        _super.prototype.bindMouseUp.call(this, true);
    };
    DataCellBrushSelection.prototype.getPrepareSelectMaskPosition = function (brushRange) {
        var _a = this.spreadsheet.facet.panelBBox, minX = _a.minX, minY = _a.minY;
        var x = Math.max(brushRange.start.x, minX);
        var y = Math.max(brushRange.start.y, minY);
        return {
            x: x,
            y: y,
        };
    };
    return DataCellBrushSelection;
}(BaseBrushSelection));

var RowBrushSelection = /** @class */ (function (_super) {
    __extends(RowBrushSelection, _super);
    function RowBrushSelection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isInBrushRange = function (meta) {
            // start、end 都是相对位置
            var _a = _this.getBrushRange(), start = _a.start, end = _a.end;
            var _b = _this.spreadsheet.facet.getScrollOffset(), scrollY = _b.scrollY, rowHeaderScrollX = _b.rowHeaderScrollX;
            var cornerBBox = _this.spreadsheet.facet.cornerBBox;
            // 绝对位置，不随滚动条变化
            var _c = meta.x, x = _c === void 0 ? 0 : _c, _d = meta.y, y = _d === void 0 ? 0 : _d, _e = meta.width, width = _e === void 0 ? 0 : _e, _f = meta.height, height = _f === void 0 ? 0 : _f;
            return _this.rectanglesIntersect({
                // 行头过长时，可以单独进行滚动，所以需要加上滚动的距离
                minX: start.x + rowHeaderScrollX,
                // 由于刷选的时候，是以行头的左上角为起点，所以需要减去角头的宽度，在滚动后需要加上滚动条的偏移量
                minY: start.y - cornerBBox.height + scrollY,
                maxX: end.x + rowHeaderScrollX,
                maxY: end.y - cornerBBox.height + scrollY,
            }, {
                minX: x,
                maxX: x + width,
                minY: y,
                maxY: y + height,
            });
        };
        _this.onUpdateCells = function (root) {
            return root.updateCells(root.getAllRowHeaderCells());
        };
        _this.getSelectedRowNodes = function () {
            return _this.spreadsheet.getRowNodes().filter(_this.isInBrushRange);
        };
        /**
           * 行头的非叶子节点滚动刷选, 以当前节点所对应 [可视范围] 内叶子节点为基准
           * 例: 当前刷选 [浙江省] 行头的这一列, 向 🔽 滚动以 [纸张] 为准, 向 🔼滚动以 [桌子] 为准
             ---------------------------------------
           * |       | 杭州市 | 家具    | 🔼 [桌子]   |
           * |       |       |        | 沙发   |
           * |       |       | 办公用品 | 笔    |
           * |       |       |         | 纸张  |
           * | 浙江省 |       |         |      |
           * |       | 绍兴市 | 家具     | 桌子  |
           * |       |       |         | 沙发  |
           * |       |       | 办公用品 | 笔    |
           * |       |       |         | 🔽 [纸张] |
           * -------------------------------------
           */
        _this.getVisibleRowLeafCellByScrollDirection = function (dir) {
            var rowCell = _this.spreadsheet.interaction.getAllRowHeaderCells();
            if (dir === ScrollDirection.SCROLL_DOWN) {
                return last(rowCell);
            }
            return rowCell.find(function (cell) {
                var meta = cell.getMeta();
                return meta.isLeaf;
            });
        };
        _this.getWillScrollToRowIndex = function (dir) {
            var _a, _b;
            // 行头叶子节点, 按默认逻辑处理即可
            if (!isNil(_this.endBrushPoint.rowIndex)) {
                return _this.getDefaultWillScrollToRowIndex(dir);
            }
            var visibleCell = _this.getVisibleRowLeafCellByScrollDirection(dir);
            var lastRowIndex = (_b = (_a = visibleCell === null || visibleCell === void 0 ? void 0 : visibleCell.getMeta()) === null || _a === void 0 ? void 0 : _a.rowIndex) !== null && _b !== void 0 ? _b : 0;
            var nextRowIndex = lastRowIndex + _this.getWillScrollRowIndexDiff(dir);
            return _this.validateYIndex(nextRowIndex);
        };
        return _this;
    }
    RowBrushSelection.prototype.bindMouseDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.ROW_CELL_MOUSE_DOWN, function (event) {
            if (!_this.spreadsheet.interaction.getBrushSelection().row) {
                return;
            }
            _super.prototype.mouseDown.call(_this, event);
        });
    };
    RowBrushSelection.prototype.isPointInCanvas = function (point) {
        // 获取行头的区域范围
        var maxY = this.spreadsheet.facet.getCanvasHW().height;
        var _a = this.spreadsheet.facet.cornerBBox, minX = _a.minX, minY = _a.height, maxX = _a.maxX;
        return (point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY);
    };
    RowBrushSelection.prototype.bindMouseMove = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_MOVE, function (event) {
            if (_this.brushSelectionStage === InteractionBrushSelectionStage.UN_DRAGGED) {
                return;
            }
            _this.setBrushSelectionStage(InteractionBrushSelectionStage.DRAGGED);
            var pointInCanvas = _this.spreadsheet.container.getPointByEvent(event);
            if (_this.autoBrushScroll(pointInCanvas, true)) {
                return;
            }
            _this.renderPrepareSelected(pointInCanvas);
        });
    };
    RowBrushSelection.prototype.setDisplayedCells = function () {
        this.displayedCells = this.spreadsheet.interaction.getAllRowHeaderCells();
    };
    // 最终刷选的 cells
    RowBrushSelection.prototype.updateSelectedCells = function () {
        var selectedRowNodes = this.getSelectedRowNodes();
        var scrollBrushRangeCells = this.getScrollBrushRangeCells(selectedRowNodes);
        var selectedCellMetas = map(scrollBrushRangeCells, getCellMeta);
        this.spreadsheet.interaction.changeState({
            cells: selectedCellMetas,
            stateName: InteractionStateName.BRUSH_SELECTED,
            onUpdateCells: this.onUpdateCells,
        });
        this.emitBrushSelectionEvent(S2Event.ROW_CELL_BRUSH_SELECTION, scrollBrushRangeCells);
    };
    RowBrushSelection.prototype.addBrushIntercepts = function () {
        this.spreadsheet.interaction.addIntercepts([
            InterceptType.ROW_BRUSH_SELECTION,
        ]);
    };
    RowBrushSelection.prototype.getScrollBrushRangeCells = function (nodes) {
        var _this = this;
        return nodes.map(function (node) {
            var visibleCell = _this.getVisibleBrushRangeCells(node.id);
            if (visibleCell) {
                return visibleCell;
            }
            // TODO: 先暂时不考虑自定义单元格的情况, next 分支把这些单元格 (包括自定义单元格) 都放在了 s2.options.rowCell 里
            return _this.spreadsheet.facet.rowHeader.createCellInstance(node);
        });
    };
    RowBrushSelection.prototype.getPrepareSelectMaskPosition = function (brushRange) {
        var minY = this.spreadsheet.facet.panelBBox.minY;
        var x = brushRange.start.x;
        var y = Math.max(brushRange.start.y, minY);
        return {
            x: x,
            y: y,
        };
    };
    return RowBrushSelection;
}(BaseBrushSelection));

var DataCellMultiSelection = /** @class */ (function (_super) {
    __extends(DataCellMultiSelection, _super);
    function DataCellMultiSelection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMultiSelection = false;
        return _this;
    }
    DataCellMultiSelection.prototype.bindEvents = function () {
        this.bindKeyboardDown();
        this.bindDataCellClick();
        this.bindKeyboardUp();
        this.bindMouseMove();
    };
    DataCellMultiSelection.prototype.reset = function () {
        this.isMultiSelection = false;
        this.spreadsheet.interaction.removeIntercepts([InterceptType.CLICK]);
    };
    DataCellMultiSelection.prototype.bindKeyboardDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_DOWN, function (event) {
            if (isMultiSelectionKey(event)) {
                _this.isMultiSelection = true;
                _this.spreadsheet.interaction.addIntercepts([InterceptType.CLICK]);
            }
        });
    };
    DataCellMultiSelection.prototype.bindKeyboardUp = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_UP, function (event) {
            if (isMultiSelectionKey(event)) {
                _this.reset();
            }
        });
    };
    DataCellMultiSelection.prototype.bindMouseMove = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_MOVE, function (event) {
            // 当快捷键被系统拦截后，按需补充调用一次 reset
            if (_this.isMultiSelection && !isMouseEventWithMeta(event)) {
                _this.reset();
            }
        });
    };
    DataCellMultiSelection.prototype.getSelectedCells = function (cell) {
        var id = cell.getMeta().id;
        var interaction = this.spreadsheet.interaction;
        var selectedCells = interaction.getCells([CellTypes.DATA_CELL]);
        var cells = [];
        if (interaction.getCurrentStateName() !== InteractionStateName.SELECTED) {
            selectedCells = [];
        }
        if (selectedCells.find(function (meta) { return meta.id === id; })) {
            cells = selectedCells.filter(function (item) { return item.id !== id; });
        }
        else {
            cells = __spreadArray$1(__spreadArray$1([], __read(selectedCells), false), [getCellMeta(cell)], false);
        }
        return cells;
    };
    DataCellMultiSelection.prototype.bindDataCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.DATA_CELL_CLICK, function (event) {
            event.stopPropagation();
            var cell = _this.spreadsheet.getCell(event.target);
            var meta = cell.getMeta();
            var interaction = _this.spreadsheet.interaction;
            if (_this.isMultiSelection && meta) {
                var selectedCells = _this.getSelectedCells(cell);
                if (isEmpty(selectedCells)) {
                    interaction.clearState();
                    _this.spreadsheet.hideTooltip();
                    _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
                    return;
                }
                interaction.addIntercepts([InterceptType.CLICK, InterceptType.HOVER]);
                _this.spreadsheet.hideTooltip();
                interaction.changeState({
                    cells: selectedCells,
                    stateName: InteractionStateName.SELECTED,
                    onUpdateCells: afterSelectDataCells,
                });
                _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
                _this.spreadsheet.showTooltipWithInfo(event, getCellsTooltipData(_this.spreadsheet));
            }
        });
    };
    return DataCellMultiSelection;
}(BaseEvent));

var EventController = /** @class */ (function () {
    function EventController(spreadsheet) {
        var _this = this;
        this.canvasEventHandlers = [];
        this.s2EventHandlers = [];
        this.domEventListeners = [];
        this.isCanvasEffect = false;
        // 不能单独判断是否 Image Shape, 用户如果自定义单元格绘制图片, 会导致判断错误
        this.isGuiIconShape = function (target) {
            return target instanceof ImageShape$1 && target.attrs.type === GuiIcon.type;
        };
        this.onCanvasMousedown = function (event) {
            _this.target = event.target;
            // 点击时清除 hover focus 状态
            _this.spreadsheet.interaction.clearHoverTimer();
            if (_this.isResizeArea(event)) {
                _this.spreadsheet.emit(S2Event.LAYOUT_RESIZE_MOUSE_DOWN, event);
                // 仅捕获在 canvas 之外触发的事件 https://github.com/antvis/S2/issues/1592
                var resizeMouseMoveCapture_1 = function (mouseEvent) {
                    if (!_this.spreadsheet.getCanvasElement()) {
                        return false;
                    }
                    if (_this.spreadsheet.getCanvasElement() !== mouseEvent.target) {
                        event.clientX = mouseEvent.clientX;
                        event.clientY = mouseEvent.clientY;
                        event.originalEvent = mouseEvent;
                        _this.spreadsheet.emit(S2Event.LAYOUT_RESIZE_MOUSE_MOVE, event);
                    }
                };
                window.addEventListener('mousemove', resizeMouseMoveCapture_1);
                window.addEventListener('mouseup', function () {
                    window.removeEventListener('mousemove', resizeMouseMoveCapture_1);
                }, { once: true });
                return;
            }
            var cellType = _this.spreadsheet.getCellType(event.target);
            switch (cellType) {
                case CellTypes.DATA_CELL:
                    _this.spreadsheet.emit(S2Event.DATA_CELL_MOUSE_DOWN, event);
                    break;
                case CellTypes.ROW_CELL:
                    _this.spreadsheet.emit(S2Event.ROW_CELL_MOUSE_DOWN, event);
                    break;
                case CellTypes.COL_CELL:
                    _this.spreadsheet.emit(S2Event.COL_CELL_MOUSE_DOWN, event);
                    break;
                case CellTypes.CORNER_CELL:
                    _this.spreadsheet.emit(S2Event.CORNER_CELL_MOUSE_DOWN, event);
                    break;
                case CellTypes.MERGED_CELL:
                    _this.spreadsheet.emit(S2Event.MERGED_CELLS_MOUSE_DOWN, event);
                    break;
            }
        };
        this.onCanvasMousemove = function (event) {
            _this.canvasMousemoveEvent = event;
            if (_this.isResizeArea(event)) {
                _this.activeResizeArea(event);
                _this.spreadsheet.emit(S2Event.LAYOUT_RESIZE_MOUSE_MOVE, event);
                return;
            }
            _this.resetResizeArea();
            var cell = _this.spreadsheet.getCell(event.target);
            if (cell) {
                var cellType = cell.cellType;
                switch (cellType) {
                    case CellTypes.DATA_CELL:
                        _this.spreadsheet.emit(S2Event.DATA_CELL_MOUSE_MOVE, event);
                        break;
                    case CellTypes.ROW_CELL:
                        _this.spreadsheet.emit(S2Event.ROW_CELL_MOUSE_MOVE, event);
                        break;
                    case CellTypes.COL_CELL:
                        _this.spreadsheet.emit(S2Event.COL_CELL_MOUSE_MOVE, event);
                        break;
                    case CellTypes.CORNER_CELL:
                        _this.spreadsheet.emit(S2Event.CORNER_CELL_MOUSE_MOVE, event);
                        break;
                    case CellTypes.MERGED_CELL:
                        _this.spreadsheet.emit(S2Event.MERGED_CELLS_MOUSE_MOVE, event);
                        break;
                }
                if (!_this.hasBrushSelectionIntercepts()) {
                    _this.spreadsheet.emit(S2Event.GLOBAL_HOVER, event);
                    switch (cellType) {
                        case CellTypes.DATA_CELL:
                            _this.spreadsheet.emit(S2Event.DATA_CELL_HOVER, event);
                            break;
                        case CellTypes.ROW_CELL:
                            _this.spreadsheet.emit(S2Event.ROW_CELL_HOVER, event);
                            break;
                        case CellTypes.COL_CELL:
                            _this.spreadsheet.emit(S2Event.COL_CELL_HOVER, event);
                            break;
                        case CellTypes.CORNER_CELL:
                            _this.spreadsheet.emit(S2Event.CORNER_CELL_HOVER, event);
                            break;
                        case CellTypes.MERGED_CELL:
                            _this.spreadsheet.emit(S2Event.MERGED_CELLS_HOVER, event);
                            break;
                    }
                }
            }
        };
        this.onCanvasMouseup = function (event) {
            if (_this.isResizeArea(event)) {
                _this.spreadsheet.emit(S2Event.LAYOUT_RESIZE_MOUSE_UP, event);
                return;
            }
            var cell = _this.spreadsheet.getCell(event.target);
            if (cell) {
                var cellType = cell.cellType;
                // target相同，说明是一个cell内的 click 事件
                if (_this.target === event.target) {
                    var isGuiIconShape = _this.isGuiIconShape(event.target);
                    switch (cellType) {
                        case CellTypes.DATA_CELL:
                            _this.spreadsheet.emit(S2Event.DATA_CELL_CLICK, event);
                            break;
                        case CellTypes.ROW_CELL:
                            // 屏蔽 actionIcons 的点击，只有 HeaderCells 需要， DataCell 有状态类 icon， 不需要屏蔽
                            if (isGuiIconShape) {
                                break;
                            }
                            _this.spreadsheet.emit(S2Event.ROW_CELL_CLICK, event);
                            break;
                        case CellTypes.COL_CELL:
                            if (isGuiIconShape) {
                                break;
                            }
                            _this.spreadsheet.emit(S2Event.COL_CELL_CLICK, event);
                            break;
                        case CellTypes.CORNER_CELL:
                            if (isGuiIconShape) {
                                break;
                            }
                            _this.spreadsheet.emit(S2Event.CORNER_CELL_CLICK, event);
                            break;
                        case CellTypes.MERGED_CELL:
                            _this.spreadsheet.emit(S2Event.MERGED_CELLS_CLICK, event);
                            break;
                    }
                }
                // 通用的mouseup事件
                switch (cellType) {
                    case CellTypes.DATA_CELL:
                        _this.spreadsheet.emit(S2Event.DATA_CELL_MOUSE_UP, event);
                        break;
                    case CellTypes.ROW_CELL:
                        _this.spreadsheet.emit(S2Event.ROW_CELL_MOUSE_UP, event);
                        break;
                    case CellTypes.COL_CELL:
                        _this.spreadsheet.emit(S2Event.COL_CELL_MOUSE_UP, event);
                        break;
                    case CellTypes.CORNER_CELL:
                        _this.spreadsheet.emit(S2Event.CORNER_CELL_MOUSE_UP, event);
                        break;
                    case CellTypes.MERGED_CELL:
                        _this.spreadsheet.emit(S2Event.MERGED_CELLS_MOUSE_UP, event);
                        break;
                }
            }
        };
        this.onCanvasClick = function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_CLICK, event);
        };
        this.onCanvasDoubleClick = function (event) {
            var spreadsheet = _this.spreadsheet;
            if (_this.isResizeArea(event)) {
                spreadsheet.emit(S2Event.LAYOUT_RESIZE_MOUSE_UP, event);
                return;
            }
            spreadsheet.emit(S2Event.GLOBAL_DOUBLE_CLICK, event);
            var cell = spreadsheet.getCell(event.target);
            if (cell) {
                var cellType = cell.cellType;
                if (_this.target === event.target) {
                    switch (cellType) {
                        case CellTypes.DATA_CELL:
                            spreadsheet.emit(S2Event.DATA_CELL_DOUBLE_CLICK, event);
                            break;
                        case CellTypes.ROW_CELL:
                            spreadsheet.emit(S2Event.ROW_CELL_DOUBLE_CLICK, event);
                            break;
                        case CellTypes.COL_CELL:
                            spreadsheet.emit(S2Event.COL_CELL_DOUBLE_CLICK, event);
                            break;
                        case CellTypes.CORNER_CELL:
                            spreadsheet.emit(S2Event.CORNER_CELL_DOUBLE_CLICK, event);
                            break;
                        case CellTypes.MERGED_CELL:
                            spreadsheet.emit(S2Event.MERGED_CELLS_DOUBLE_CLICK, event);
                            break;
                    }
                }
            }
        };
        this.onCanvasMouseout = function (event) {
            if (!_this.isAutoResetSheetStyle || (event === null || event === void 0 ? void 0 : event.shape)) {
                return;
            }
            var interaction = _this.spreadsheet.interaction;
            // 两种情况不能重置 1. 选中单元格 2. 有 intercepts 时（重置会清空 intercepts）
            if (!interaction.isSelectedState() && !(interaction.intercepts.size > 0)) {
                interaction.reset();
            }
        };
        this.onCanvasContextMenu = function (event) {
            var spreadsheet = _this.spreadsheet;
            if (_this.isResizeArea(event)) {
                spreadsheet.emit(S2Event.LAYOUT_RESIZE_MOUSE_UP, event);
                return;
            }
            spreadsheet.emit(S2Event.GLOBAL_CONTEXT_MENU, event);
            var cellType = _this.spreadsheet.getCellType(event.target);
            switch (cellType) {
                case CellTypes.DATA_CELL:
                    _this.spreadsheet.emit(S2Event.DATA_CELL_CONTEXT_MENU, event);
                    break;
                case CellTypes.ROW_CELL:
                    _this.spreadsheet.emit(S2Event.ROW_CELL_CONTEXT_MENU, event);
                    break;
                case CellTypes.COL_CELL:
                    _this.spreadsheet.emit(S2Event.COL_CELL_CONTEXT_MENU, event);
                    break;
                case CellTypes.CORNER_CELL:
                    _this.spreadsheet.emit(S2Event.CORNER_CELL_CONTEXT_MENU, event);
                    break;
                case CellTypes.MERGED_CELL:
                    _this.spreadsheet.emit(S2Event.MERGED_CELLS_CONTEXT_MENU, event);
                    break;
            }
        };
        this.spreadsheet = spreadsheet;
        this.bindEvents();
    }
    Object.defineProperty(EventController.prototype, "canvasContainer", {
        get: function () {
            return this.spreadsheet.container;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventController.prototype, "isAutoResetSheetStyle", {
        get: function () {
            return this.spreadsheet.options.interaction.autoResetSheetStyle;
        },
        enumerable: false,
        configurable: true
    });
    EventController.prototype.bindEvents = function () {
        var _this = this;
        this.clearAllEvents();
        // canvas events
        this.addCanvasEvent(OriginEventType.CLICK, this.onCanvasClick);
        this.addCanvasEvent(OriginEventType.MOUSE_DOWN, this.onCanvasMousedown);
        this.addCanvasEvent(OriginEventType.MOUSE_MOVE, this.onCanvasMousemove);
        this.addCanvasEvent(OriginEventType.MOUSE_OUT, this.onCanvasMouseout);
        this.addCanvasEvent(OriginEventType.MOUSE_UP, this.onCanvasMouseup);
        this.addCanvasEvent(OriginEventType.DOUBLE_CLICK, this.onCanvasDoubleClick);
        this.addCanvasEvent(OriginEventType.CONTEXT_MENU, this.onCanvasContextMenu);
        // spreadsheet events
        this.addS2Event(S2Event.GLOBAL_ACTION_ICON_CLICK, function () {
            _this.spreadsheet.interaction.addIntercepts([InterceptType.HOVER]);
            _this.spreadsheet.interaction.clearState();
        });
        // dom events
        this.addDomEventListener(window, OriginEventType.CLICK, function (event) {
            _this.resetSheetStyle(event);
            _this.isCanvasEffect = _this.isMouseOnTheCanvasContainer(event);
        });
        this.addDomEventListener(window, OriginEventType.KEY_DOWN, function (event) {
            _this.onKeyboardCopy(event);
            _this.onKeyboardEsc(event);
            _this.spreadsheet.emit(S2Event.GLOBAL_KEYBOARD_DOWN, event);
        });
        this.addDomEventListener(window, OriginEventType.KEY_UP, function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_KEYBOARD_UP, event);
        });
        this.addDomEventListener(window, OriginEventType.MOUSE_UP, function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_MOUSE_UP, event);
        });
        this.addDomEventListener(window, OriginEventType.MOUSE_MOVE, function (event) {
            _this.spreadsheet.emit(S2Event.GLOBAL_MOUSE_MOVE, event);
        });
    };
    EventController.prototype.onKeyboardCopy = function (event) {
        // windows and macos copy
        if (this.isCanvasEffect &&
            this.spreadsheet.options.interaction.enableCopy &&
            // todo: 在copy header 时有问题
            keyEqualTo(event.key, InteractionKeyboardKey.COPY) &&
            (event.metaKey || event.ctrlKey)) {
            var copyData = getSelectedData(this.spreadsheet);
            if (!isNil(copyData)) {
                this.spreadsheet.emit(S2Event.GLOBAL_COPIED, copyData);
            }
        }
    };
    EventController.prototype.onKeyboardEsc = function (event) {
        if (this.isCanvasEffect &&
            keyEqualTo(event.key, InteractionKeyboardKey.ESC)) {
            this.resetSheetStyle(event);
        }
    };
    EventController.prototype.resetSheetStyle = function (event) {
        if (!this.isAutoResetSheetStyle || !this.spreadsheet) {
            return;
        }
        // 全局有 mouseUp 和 click 事件, 当刷选完成后会同时触发, 当选中单元格后, 会同时触发 click 对应的 reset 事件
        // 所以如果是 刷选过程中 引起的 click(mousedown + mouseup) 事件, 则不需要重置
        var interaction = this.spreadsheet.interaction;
        if (interaction.hasIntercepts([
            InterceptType.BRUSH_SELECTION,
            InterceptType.COL_BRUSH_SELECTION,
            InterceptType.ROW_BRUSH_SELECTION,
        ])) {
            interaction.removeIntercepts([
                InterceptType.BRUSH_SELECTION,
                InterceptType.ROW_BRUSH_SELECTION,
                InterceptType.COL_BRUSH_SELECTION,
            ]);
            return;
        }
        if (this.isMouseOnTheTooltip(event) ||
            this.isMouseOnTheCanvasContainer(event)) {
            return;
        }
        interaction.reset();
        this.spreadsheet.emit(S2Event.GLOBAL_RESET, event);
        this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
    };
    EventController.prototype.isMouseEvent = function (event) {
        // 通过 MouseEvent 特有属性判断，避免 instanceof 失效的问题
        return hasIn(event, 'clientX') && hasIn(event, 'clientY');
    };
    EventController.prototype.isMouseOnTheCanvasContainer = function (event) {
        if (this.isMouseEvent(event)) {
            var canvas = this.spreadsheet.getCanvasElement();
            if (!canvas) {
                return false;
            }
            var _a = canvas.getBoundingClientRect() || {}, x = _a.x, y = _a.y;
            // 这里不能使用 bounding rect 的 width 和 height, 高清适配后 canvas 实际宽高会变
            // 比如实际 400 * 300 => hd (800 * 600)
            // 从视觉来看, 虽然点击了空白处, 但其实还是处于 放大后的 canvas 区域, 所以还需要额外判断一下坐标
            var _b = this.getContainerRect(), width = _b.width, height = _b.height;
            return (canvas.contains(event.target) &&
                event.clientX <= x + width &&
                event.clientY <= y + height);
        }
        return false;
    };
    EventController.prototype.getContainerRect = function () {
        var _a;
        var _b = this.spreadsheet, facet = _b.facet, options = _b.options;
        var scrollBar = facet.hRowScrollBar || facet.hScrollBar;
        var _c = (facet === null || facet === void 0 ? void 0 : facet.panelBBox) || {}, maxX = _c.maxX, maxY = _c.maxY;
        var width = options.width, height = options.height;
        /**
         * https://github.com/antvis/S2/issues/2376
         * 横向的滚动条在表格外 (Canvas 内), 点击滚动条(含滑道区域) 不应该重置交互
         */
        var trackHeight = ((_a = scrollBar === null || scrollBar === void 0 ? void 0 : scrollBar.theme) === null || _a === void 0 ? void 0 : _a.size) || 0;
        return {
            width: Math.min(width, maxX),
            height: Math.min(height, maxY + trackHeight),
        };
    };
    EventController.prototype.isMouseOnTheTooltip = function (event) {
        var _a, _b, _c, _d;
        var tooltip = this.spreadsheet.tooltip;
        if (!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.visible)) {
            return false;
        }
        var _e = ((_c = (_b = (_a = this.spreadsheet.tooltip) === null || _a === void 0 ? void 0 : _a.container) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect) === null || _c === void 0 ? void 0 : _c.call(_b)) || {}, x = _e.x, y = _e.y, width = _e.width, height = _e.height;
        if (event.target instanceof Node) {
            return verifyTheElementInTooltip((_d = this.spreadsheet.tooltip) === null || _d === void 0 ? void 0 : _d.container, event.target);
        }
        if (this.isMouseEvent(event)) {
            return (event.clientX >= x &&
                event.clientX <= x + width &&
                event.clientY >= y &&
                event.clientY <= y + height);
        }
        return false;
    };
    EventController.prototype.isResizeArea = function (event) {
        var appendInfo = get(event.target, 'attrs.appendInfo');
        return appendInfo === null || appendInfo === void 0 ? void 0 : appendInfo.isResizeArea;
    };
    EventController.prototype.activeResizeArea = function (event) {
        this.resetResizeArea();
        var resizeArea = event.target;
        this.spreadsheet.store.set('activeResizeArea', resizeArea);
        resizeArea.attr(SHAPE_STYLE_MAP.backgroundOpacity, this.spreadsheet.theme.resizeArea.interactionState.hover
            .backgroundOpacity);
    };
    EventController.prototype.resetResizeArea = function () {
        var resizeArea = this.spreadsheet.store.get('activeResizeArea');
        if (!isEmpty(resizeArea)) {
            resizeArea.attr(SHAPE_STYLE_MAP.backgroundOpacity, this.spreadsheet.theme.resizeArea.backgroundOpacity);
        }
        this.spreadsheet.store.set('activeResizeArea', resizeArea);
    };
    EventController.prototype.hasBrushSelectionIntercepts = function () {
        return this.spreadsheet.interaction.hasIntercepts([
            InterceptType.HOVER,
            InterceptType.BRUSH_SELECTION,
            InterceptType.ROW_BRUSH_SELECTION,
            InterceptType.COL_BRUSH_SELECTION,
        ]);
    };
    EventController.prototype.clear = function () {
        this.unbindEvents();
    };
    EventController.prototype.unbindEvents = function () {
        this.clearAllEvents();
    };
    EventController.prototype.addCanvasEvent = function (eventType, handler) {
        var _a;
        (_a = this.canvasContainer) === null || _a === void 0 ? void 0 : _a.on(eventType, handler);
        this.canvasEventHandlers.push({ type: eventType, handler: handler });
    };
    EventController.prototype.addS2Event = function (eventType, handler) {
        this.spreadsheet.on(eventType, handler);
        this.s2EventHandlers.push({
            type: eventType,
            handler: handler,
        });
    };
    EventController.prototype.addDomEventListener = function (target, type, handler) {
        if (target.addEventListener) {
            var eventListenerOptions = this.spreadsheet.options.interaction.eventListenerOptions;
            target.addEventListener(type, handler, eventListenerOptions);
            this.domEventListeners.push({
                target: target,
                type: type,
                handler: handler,
                options: eventListenerOptions,
            });
        }
        else {
            // eslint-disable-next-line no-console
            console.error("Please make sure ".concat(target, " has addEventListener function"));
        }
    };
    EventController.prototype.clearAllEvents = function () {
        var _this = this;
        forEach(this.canvasEventHandlers, function (_a) {
            var _b;
            var type = _a.type, handler = _a.handler;
            (_b = _this.canvasContainer) === null || _b === void 0 ? void 0 : _b.off(type, handler);
        });
        forEach(this.s2EventHandlers, function (_a) {
            var type = _a.type, handler = _a.handler;
            _this.spreadsheet.off(type, handler);
        });
        forEach(this.domEventListeners, function (listener) {
            listener.target.removeEventListener(listener.type, listener.handler, listener.options);
        });
        this.canvasEventHandlers = [];
        this.s2EventHandlers = [];
        this.domEventListeners = [];
    };
    return EventController;
}());

var RangeSelection = /** @class */ (function (_super) {
    __extends(RangeSelection, _super);
    function RangeSelection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isRangeSelection = false;
        _this.handleColClick = function (event) {
            event.stopPropagation();
            var interaction = _this.spreadsheet.interaction;
            var cell = _this.spreadsheet.getCell(event.target);
            var meta = cell === null || cell === void 0 ? void 0 : cell.getMeta();
            if (!isNil(meta === null || meta === void 0 ? void 0 : meta.x)) {
                interaction.addIntercepts([InterceptType.HOVER]);
                var selectedCells = [getCellMeta(cell)];
                var lastCell = _this.spreadsheet.store.get('lastClickedCell');
                // 处理shift区间多选
                if (_this.isRangeSelection &&
                    lastCell &&
                    lastCell.cellType === cell.cellType &&
                    lastCell.getMeta().level === cell.getMeta().level) {
                    var _a = __read([
                        _this.spreadsheet.facet.layoutResult.rowsHierarchy.maxLevel,
                        _this.spreadsheet.facet.layoutResult.colsHierarchy.maxLevel,
                    ], 2), rowMaxLevel = _a[0], colMaxLevel = _a[1];
                    var _b = getRangeIndex(lastCell.getMeta(), cell.getMeta()), start = _b.start, end = _b.end;
                    if (cell instanceof DataCell) {
                        selectedCells = _this.handleSeriesNumberRowSelected(start.rowIndex, end.rowIndex, cell);
                    }
                    else if (cell.cellType === CellTypes.ROW_CELL &&
                        cell.getMeta().level === rowMaxLevel) {
                        selectedCells = _this.handleRowSelected(start.rowIndex, end.rowIndex, cell);
                    }
                    else if (cell.cellType === CellTypes.COL_CELL &&
                        cell.getMeta().level === colMaxLevel) {
                        selectedCells = _this.handleColSelected(start.colIndex, end.colIndex, cell);
                    }
                    // 兼容行列多选
                    // Set the header cells (colCell or RowCell)  selected information and update the dataCell state.
                    interaction.changeState({
                        cells: selectedCells,
                        stateName: InteractionStateName.SELECTED,
                    });
                }
                else {
                    if (isEmpty(interaction.getCells())) {
                        interaction.removeIntercepts([InterceptType.HOVER]);
                    }
                    _this.spreadsheet.store.set('lastClickedCell', cell);
                }
                var selectedCellIds = selectedCells.map(function (_a) {
                    var id = _a.id;
                    return id;
                });
                // Update the interaction state of all the selected cells:  header cells(colCell or RowCell) and dataCells belong to them.
                interaction.updateCells(interaction.getRowColActiveCells(selectedCellIds));
                _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
            }
        };
        return _this;
    }
    RangeSelection.prototype.bindEvents = function () {
        this.bindKeyboardDown();
        this.bindDataCellClick();
        this.bindColCellClick();
        this.bindKeyboardUp();
        this.bindMouseMove();
    };
    RangeSelection.prototype.reset = function () {
        this.isRangeSelection = false;
        this.spreadsheet.interaction.removeIntercepts([InterceptType.CLICK]);
    };
    RangeSelection.prototype.bindKeyboardDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_DOWN, function (event) {
            if (event.key === InteractionKeyboardKey.SHIFT) {
                _this.isRangeSelection = true;
                _this.spreadsheet.interaction.addIntercepts([InterceptType.CLICK]);
            }
        });
    };
    RangeSelection.prototype.bindKeyboardUp = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_UP, function (event) {
            if (event.key === InteractionKeyboardKey.SHIFT) {
                _this.reset();
            }
        });
    };
    RangeSelection.prototype.bindMouseMove = function () {
        var _this = this;
        // 当快捷键被系统拦截后，按需补充调用一次 reset
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_MOVE, function (event) {
            if (_this.isRangeSelection && !event.shiftKey) {
                _this.reset();
            }
        });
    };
    RangeSelection.prototype.bindColCellClick = function () {
        var _this = this;
        if (this.spreadsheet.isTableMode()) {
            // series-number click
            this.spreadsheet.on(S2Event.ROW_CELL_CLICK, function (event) {
                _this.handleColClick(event);
            });
        }
        this.spreadsheet.on(S2Event.COL_CELL_CLICK, function (event) {
            _this.handleColClick(event);
        });
    };
    RangeSelection.prototype.bindDataCellClick = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.DATA_CELL_CLICK, function (event) {
            event.stopPropagation();
            var cell = _this.spreadsheet.getCell(event.target);
            var meta = cell.getMeta();
            var interaction = _this.spreadsheet.interaction;
            if (!meta) {
                return;
            }
            var lastClickedCell = _this.spreadsheet.store.get('lastClickedCell');
            var isShiftSelect = _this.isRangeSelection && (lastClickedCell === null || lastClickedCell === void 0 ? void 0 : lastClickedCell.cellType) === cell.cellType;
            if (!isShiftSelect) {
                _this.spreadsheet.store.set('lastClickedCell', cell);
                return;
            }
            var _a = getRangeIndex(lastClickedCell.getMeta(), cell.getMeta()), start = _a.start, end = _a.end;
            var cells = range$1(start.colIndex, end.colIndex + 1).flatMap(function (col) {
                var cellIdSuffix = _this.spreadsheet.facet.layoutResult.colLeafNodes[col].id;
                return range$1(start.rowIndex, end.rowIndex + 1).map(function (row) {
                    var cellIdPrefix = _this.spreadsheet.facet.getSeriesNumberWidth() ||
                        _this.spreadsheet.isTableMode()
                        ? String(row)
                        : _this.spreadsheet.facet.layoutResult.rowLeafNodes[row].id;
                    return {
                        id: cellIdPrefix + '-' + cellIdSuffix,
                        colIndex: col,
                        rowIndex: row,
                        type: cell.cellType,
                    };
                });
            });
            interaction.addIntercepts([InterceptType.CLICK, InterceptType.HOVER]);
            interaction.changeState({
                cells: cells,
                stateName: InteractionStateName.SELECTED,
            });
            _this.spreadsheet.showTooltipWithInfo(event, getCellsTooltipData(_this.spreadsheet));
            _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, interaction.getActiveCells());
        });
    };
    RangeSelection.prototype.handleSeriesNumberRowSelected = function (startIndex, endIndex, cell) {
        // table模式下序列号行头
        var cellIdSufFix = this.spreadsheet.facet.layoutResult.colLeafNodes[0].id;
        return range$1(startIndex, endIndex + 1).map(function (row) {
            var cellIdPrefix = String(row);
            return {
                id: cellIdPrefix + '-' + cellIdSufFix,
                colIndex: 0,
                rowIndex: row,
                type: cell.cellType,
            };
        });
    };
    RangeSelection.prototype.handleRowSelected = function (startIndex, endIndex, cell) {
        // ROW_CELL类型 最后一个Level支持区间选择
        return this.spreadsheet.facet.layoutResult.rowNodes
            .filter(function (_a) {
            var rowIndex = _a.rowIndex;
            return inRange(rowIndex, startIndex, endIndex + 1);
        })
            .map(function (e) { return ({
            id: e.id,
            colIndex: e.colIndex,
            rowIndex: e.rowIndex,
            type: cell.cellType,
        }); });
    };
    RangeSelection.prototype.handleColSelected = function (startIndex, endIndex, cell) {
        // COL_CELL类型 最后一个Level支持区间选择
        return this.spreadsheet.facet.layoutResult.colLeafNodes
            .filter(function (_a) {
            var colIndex = _a.colIndex;
            return inRange(colIndex, startIndex, endIndex + 1);
        })
            .map(function (e) { return ({
            id: e.id,
            colIndex: e.colIndex,
            rowIndex: e.rowIndex,
            type: cell.cellType,
        }); });
    };
    return RangeSelection;
}(BaseEvent));

var RowColumnResize = /** @class */ (function (_super) {
    __extends(RowColumnResize, _super);
    function RowColumnResize() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.resizeStartPosition = {};
        _this.resizeMouseMove = function (event) {
            var _a, _b;
            if (!((_a = _this.resizeReferenceGroup) === null || _a === void 0 ? void 0 : _a.get('visible'))) {
                return;
            }
            (_b = event === null || event === void 0 ? void 0 : event.preventDefault) === null || _b === void 0 ? void 0 : _b.call(event);
            var originalEvent = event.originalEvent;
            var resizeInfo = _this.getResizeInfo();
            var resizeShapes = _this.resizeReferenceGroup.getChildren() || [];
            if (isEmpty(resizeShapes)) {
                return;
            }
            var _c = __read(resizeShapes, 2), endGuideLineShape = _c[1];
            var _d = __read(clone$1(endGuideLineShape.attr('path')), 2), guideLineStart = _d[0], guideLineEnd = _d[1];
            if (resizeInfo.type === ResizeDirectionType.Horizontal) {
                _this.updateHorizontalResizingEndGuideLinePosition(originalEvent, resizeInfo, guideLineStart, guideLineEnd);
            }
            else {
                _this.updateVerticalResizingEndGuideLinePosition(originalEvent, resizeInfo, guideLineStart, guideLineEnd);
            }
            _this.updateResizeGuideLineTheme(endGuideLineShape);
            endGuideLineShape.attr('path', [guideLineStart, guideLineEnd]);
        };
        return _this;
    }
    RowColumnResize.prototype.bindEvents = function () {
        this.bindMouseDown();
        this.bindMouseMove();
        this.bindMouseUp();
    };
    RowColumnResize.prototype.initResizeGroup = function () {
        if (this.resizeReferenceGroup) {
            return;
        }
        this.resizeReferenceGroup = this.spreadsheet.foregroundGroup.addGroup();
        var _a = this.spreadsheet.options, width = _a.width, height = _a.height;
        var _b = this.getResizeAreaTheme(), guideLineColor = _b.guideLineColor, guideLineDash = _b.guideLineDash, size = _b.size;
        var attrs = {
            path: '',
            lineDash: guideLineDash,
            stroke: guideLineColor,
            lineWidth: size,
        };
        // 起始参考线
        this.resizeReferenceGroup.addShape('path', {
            id: RESIZE_START_GUIDE_LINE_ID,
            attrs: attrs,
        });
        // 结束参考线
        this.resizeReferenceGroup.addShape('path', {
            id: RESIZE_END_GUIDE_LINE_ID,
            attrs: attrs,
        });
        // Resize 蒙层
        this.resizeReferenceGroup.addShape('rect', {
            id: RESIZE_MASK_ID,
            attrs: {
                appendInfo: {
                    isResizeArea: true,
                },
                x: 0,
                y: 0,
                width: width,
                height: height,
                fill: 'transparent',
            },
        });
    };
    RowColumnResize.prototype.getResizeAreaTheme = function () {
        return this.spreadsheet.theme.resizeArea;
    };
    RowColumnResize.prototype.setResizeTarget = function (target) {
        this.resizeTarget = target;
    };
    RowColumnResize.prototype.getGuideLineWidthAndHeight = function () {
        var _a = this.spreadsheet.options, canvasWidth = _a.width, canvasHeight = _a.height;
        var _b = this.spreadsheet.facet.panelBBox, maxY = _b.maxY, maxX = _b.maxX;
        var width = Math.min(maxX, canvasWidth);
        var height = Math.min(maxY, canvasHeight);
        return {
            width: width,
            height: height,
        };
    };
    RowColumnResize.prototype.getResizeShapes = function () {
        var _a;
        return ((_a = this.resizeReferenceGroup) === null || _a === void 0 ? void 0 : _a.get('children')) || [];
    };
    RowColumnResize.prototype.setResizeMaskCursor = function (cursor) {
        var _a = __read(this.getResizeShapes(), 3), resizeMask = _a[2];
        resizeMask === null || resizeMask === void 0 ? void 0 : resizeMask.attr('cursor', cursor);
    };
    RowColumnResize.prototype.updateResizeGuideLinePosition = function (event, resizeInfo) {
        var resizeShapes = this.getResizeShapes();
        if (isEmpty(resizeShapes)) {
            return;
        }
        var _a = __read(resizeShapes, 2), startResizeGuideLineShape = _a[0], endResizeGuideLineShape = _a[1];
        var type = resizeInfo.type, offsetX = resizeInfo.offsetX, offsetY = resizeInfo.offsetY, width = resizeInfo.width, height = resizeInfo.height;
        var _b = this.getGuideLineWidthAndHeight(), guideLineMaxWidth = _b.width, guideLineMaxHeight = _b.height;
        this.setResizeMaskCursor("".concat(type, "-resize"));
        if (type === ResizeDirectionType.Horizontal) {
            startResizeGuideLineShape.attr('path', [
                ['M', offsetX, offsetY],
                ['L', offsetX, guideLineMaxHeight],
            ]);
            endResizeGuideLineShape.attr('path', [
                ['M', offsetX + width, offsetY],
                ['L', offsetX + width, guideLineMaxHeight],
            ]);
            this.resizeStartPosition.offsetX = event.offsetX;
            this.resizeStartPosition.clientX = event.clientX;
            return;
        }
        startResizeGuideLineShape.attr('path', [
            ['M', offsetX, offsetY],
            ['L', guideLineMaxWidth, offsetY],
        ]);
        endResizeGuideLineShape.attr('path', [
            ['M', offsetX, offsetY + height],
            ['L', guideLineMaxWidth, offsetY + height],
        ]);
        this.resizeStartPosition.offsetY = event.offsetY;
        this.resizeStartPosition.clientY = event.clientY;
    };
    RowColumnResize.prototype.bindMouseDown = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.LAYOUT_RESIZE_MOUSE_DOWN, function (event) {
            var shape = event.target;
            var originalEvent = event.originalEvent;
            var resizeInfo = _this.getCellAppendInfo(event.target);
            _this.spreadsheet.store.set('resized', false);
            if (!(resizeInfo === null || resizeInfo === void 0 ? void 0 : resizeInfo.isResizeArea)) {
                return;
            }
            // 鼠标在 resize 热区 按下时, 将 tooltip 关闭, 避免造成干扰
            _this.spreadsheet.interaction.reset();
            _this.spreadsheet.interaction.addIntercepts([InterceptType.RESIZE]);
            _this.setResizeTarget(shape);
            _this.showResizeGroup();
            _this.updateResizeGuideLinePosition(originalEvent, resizeInfo);
        });
    };
    RowColumnResize.prototype.bindMouseMove = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.LAYOUT_RESIZE_MOUSE_MOVE, function (event) {
            throttle(_this.resizeMouseMove, 33)(event);
        });
    };
    // 将 SVG 的 path 转成更可读的坐标对象
    RowColumnResize.prototype.getResizeGuideLinePosition = function () {
        var _a = __read(this.resizeReferenceGroup.getChildren() || [], 2), startGuideLineShape = _a[0], endGuideLineShape = _a[1];
        var startGuideLinePath = (startGuideLineShape === null || startGuideLineShape === void 0 ? void 0 : startGuideLineShape.attr('path')) || [];
        var endGuideLinePath = (endGuideLineShape === null || endGuideLineShape === void 0 ? void 0 : endGuideLineShape.attr('path')) || [];
        var _b = __read(startGuideLinePath[0] || [], 3), _c = _b[1], startX = _c === void 0 ? 0 : _c, _d = _b[2], startY = _d === void 0 ? 0 : _d;
        var _e = __read(endGuideLinePath[0] || [], 3), _f = _e[1], endX = _f === void 0 ? 0 : _f, _g = _e[2], endY = _g === void 0 ? 0 : _g;
        return {
            start: {
                x: startX,
                y: startY,
            },
            end: {
                x: endX,
                y: endY,
            },
        };
    };
    RowColumnResize.prototype.getDisAllowResizeInfo = function () {
        var _a;
        var resizeInfo = this.getResizeInfo();
        var resize = this.spreadsheet.options.interaction.resize;
        var originalWidth = resizeInfo.width, originalHeight = resizeInfo.height, resizedWidth = resizeInfo.resizedWidth, resizedHeight = resizeInfo.resizedHeight;
        var isDisabled = (_a = resize === null || resize === void 0 ? void 0 : resize.disable) === null || _a === void 0 ? void 0 : _a.call(resize, resizeInfo);
        var displayWidth = isDisabled ? originalWidth : resizedWidth;
        var displayHeight = isDisabled ? originalHeight : resizedHeight;
        return {
            displayWidth: displayWidth,
            displayHeight: displayHeight,
            isDisabled: isDisabled,
        };
    };
    RowColumnResize.prototype.getResizeWidthDetail = function () {
        var _a, _b;
        var resizeInfo = this.getResizeInfo();
        var displayWidth = this.getDisAllowResizeInfo().displayWidth;
        switch (resizeInfo.effect) {
            case ResizeAreaEffect.Field:
                return {
                    eventType: S2Event.LAYOUT_RESIZE_ROW_WIDTH,
                    style: {
                        rowCfg: {
                            widthByField: (_a = {},
                                _a[resizeInfo.id] = displayWidth,
                                _a),
                        },
                    },
                };
            case ResizeAreaEffect.Tree:
                return {
                    eventType: S2Event.LAYOUT_RESIZE_TREE_WIDTH,
                    style: {
                        treeRowsWidth: displayWidth,
                        rowCfg: {
                            /**
                             * @deprecated 已废弃, 以 style.treeRowsWidth 为准, 保持兼容, 暂时保留
                             */
                            treeRowsWidth: displayWidth,
                        },
                    },
                };
            case ResizeAreaEffect.Cell:
                return {
                    eventType: S2Event.LAYOUT_RESIZE_COL_WIDTH,
                    style: {
                        colCfg: {
                            widthByFieldValue: (_b = {},
                                _b[resizeInfo.id] = displayWidth,
                                _b),
                        },
                    },
                };
            case ResizeAreaEffect.Series:
                return {
                    eventType: S2Event.LAYOUT_RESIZE_SERIES_WIDTH,
                    seriesNumberWidth: displayWidth,
                };
            default:
                return null;
        }
    };
    RowColumnResize.prototype.getResizeHeightDetail = function () {
        var _a, _b;
        var _c = this.spreadsheet.options, resize = _c.interaction.resize, heightByField = _c.style.rowCfg.heightByField;
        var rowCellPadding = this.spreadsheet.theme.rowCell.cell.padding;
        var resizeInfo = this.getResizeInfo();
        var displayHeight = this.getDisAllowResizeInfo().displayHeight;
        var height = displayHeight - rowCellPadding.top - rowCellPadding.bottom;
        var rowCellStyle;
        switch (resizeInfo.effect) {
            case ResizeAreaEffect.Field:
                return {
                    eventType: S2Event.LAYOUT_RESIZE_COL_HEIGHT,
                    style: {
                        colCfg: {
                            heightByField: (_a = {},
                                _a[resizeInfo.id] = displayHeight,
                                _a),
                        },
                    },
                };
            case ResizeAreaEffect.Cell:
                if ((heightByField === null || heightByField === void 0 ? void 0 : heightByField[String(resizeInfo.id)]) ||
                    (resize === null || resize === void 0 ? void 0 : resize.rowResizeType) ===
                        ResizeType.CURRENT) {
                    rowCellStyle = {
                        rowCfg: {
                            heightByField: (_b = {},
                                _b[resizeInfo.id] = height,
                                _b),
                        },
                    };
                }
                else {
                    rowCellStyle = {
                        cellCfg: {
                            height: height,
                        },
                    };
                }
                return {
                    eventType: S2Event.LAYOUT_RESIZE_ROW_HEIGHT,
                    style: rowCellStyle,
                };
            default:
                return null;
        }
    };
    RowColumnResize.prototype.getResizeDetail = function () {
        var resizeInfo = this.getResizeInfo();
        return resizeInfo.type === ResizeDirectionType.Horizontal
            ? this.getResizeWidthDetail()
            : this.getResizeHeightDetail();
    };
    RowColumnResize.prototype.showResizeGroup = function () {
        this.initResizeGroup();
        this.resizeReferenceGroup.set('visible', true);
    };
    RowColumnResize.prototype.hideResizeGroup = function () {
        this.resizeReferenceGroup.set('visible', false);
    };
    RowColumnResize.prototype.bindMouseUp = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_MOUSE_UP, function () {
            var _a;
            _this.setResizeMaskCursor('default');
            if (!_this.resizeReferenceGroup ||
                isEmpty((_a = _this.resizeReferenceGroup) === null || _a === void 0 ? void 0 : _a.getChildren())) {
                return;
            }
            _this.hideResizeGroup();
            _this.renderResizedResult();
        });
    };
    RowColumnResize.prototype.updateResizeGuideLineTheme = function (endGuideLineShape) {
        var _a = this.getResizeAreaTheme(), guideLineColor = _a.guideLineColor, guideLineDisableColor = _a.guideLineDisableColor;
        var isDisabled = this.getDisAllowResizeInfo().isDisabled;
        endGuideLineShape.attr('stroke', isDisabled ? guideLineDisableColor : guideLineColor);
        this.setResizeMaskCursor(isDisabled ? 'no-drop' : 'default');
    };
    RowColumnResize.prototype.updateHorizontalResizingEndGuideLinePosition = function (originalEvent, resizeInfo, guideLineStart, guideLineEnd) {
        var offsetX = originalEvent.clientX - this.resizeStartPosition.clientX;
        if (resizeInfo.width + offsetX < MIN_CELL_WIDTH) {
            // 禁止拖到最小宽度
            offsetX = -(resizeInfo.width - MIN_CELL_WIDTH);
        }
        var resizedOffsetX = resizeInfo.offsetX + resizeInfo.width + offsetX;
        guideLineStart[1] = resizedOffsetX;
        guideLineEnd[1] = resizedOffsetX;
        this.resizeTarget.attr({
            x: resizedOffsetX - resizeInfo.size / 2,
        });
    };
    RowColumnResize.prototype.updateVerticalResizingEndGuideLinePosition = function (originalEvent, resizeInfo, guideLineStart, guideLineEnd) {
        var offsetY = originalEvent.clientY - this.resizeStartPosition.clientY;
        if (resizeInfo.height + offsetY < MIN_CELL_HEIGHT) {
            offsetY = -(resizeInfo.height - MIN_CELL_HEIGHT);
        }
        var resizedOffsetY = resizeInfo.offsetY + resizeInfo.height + offsetY;
        guideLineStart[2] = resizedOffsetY;
        guideLineEnd[2] = resizedOffsetY;
        this.resizeTarget.attr({
            y: resizedOffsetY - resizeInfo.size / 2,
        });
    };
    RowColumnResize.prototype.renderResizedResult = function () {
        var resizeInfo = this.getResizeInfo();
        var _a = this.getResizeDetail() || {}, style = _a.style, seriesNumberWidth = _a.seriesNumberWidth, resizeEventType = _a.eventType;
        var resizeDetail = {
            info: resizeInfo,
            style: style,
        };
        this.spreadsheet.emit(S2Event.LAYOUT_RESIZE, resizeDetail);
        this.spreadsheet.emit(resizeEventType, resizeDetail);
        if (style) {
            this.spreadsheet.setOptions({ style: style });
        }
        if (seriesNumberWidth) {
            this.spreadsheet.setTheme({
                rowCell: {
                    seriesNumberWidth: seriesNumberWidth,
                },
            });
        }
        this.spreadsheet.store.set('resized', true);
        this.render();
    };
    RowColumnResize.prototype.getResizeInfo = function () {
        var defaultResizeInfo = this.getCellAppendInfo(this.resizeTarget);
        var _a = this.getResizeGuideLinePosition(), start = _a.start, end = _a.end;
        var resizedWidth = Math.floor(end.x - start.x);
        var resizedHeight = Math.floor(end.y - start.y);
        return __assign(__assign({}, defaultResizeInfo), { resizedWidth: resizedWidth, resizedHeight: resizedHeight });
    };
    RowColumnResize.prototype.render = function () {
        this.resizeStartPosition = {};
        this.resizeTarget = null;
        this.resizeReferenceGroup = null;
        this.spreadsheet.render(false);
    };
    return RowColumnResize;
}(BaseEvent));

var SelectedCellMoveMap = [
    InteractionKeyboardKey.ARROW_LEFT,
    InteractionKeyboardKey.ARROW_RIGHT,
    InteractionKeyboardKey.ARROW_UP,
    InteractionKeyboardKey.ARROW_DOWN,
];
var SelectedCellMove = /** @class */ (function (_super) {
    __extends(SelectedCellMove, _super);
    function SelectedCellMove(spreadsheet) {
        return _super.call(this, spreadsheet) || this;
    }
    SelectedCellMove.prototype.isCanvasEffect = function () {
        return this.spreadsheet.interaction.eventController.isCanvasEffect;
    };
    SelectedCellMove.prototype.bindEvents = function () {
        var _this = this;
        this.spreadsheet.on(S2Event.GLOBAL_KEYBOARD_DOWN, function (event) {
            if (!_this.isCanvasEffect()) {
                return;
            }
            var isShift = event.shiftKey;
            var isMeta = event.metaKey;
            var hasDirection = SelectedCellMoveMap.includes(event.key);
            var changeStartCell = false;
            var isJumpMode = false;
            var isSingleSelection = false;
            if (hasDirection) {
                if (isMeta && isShift) {
                    // META + SHIFT + Direction
                    changeStartCell = false;
                    isJumpMode = true;
                    isSingleSelection = false;
                }
                else if (isMeta) {
                    // META + Direction
                    changeStartCell = true;
                    isJumpMode = true;
                    isSingleSelection = true;
                }
                else if (isShift) {
                    // SHIFT + Direction
                    changeStartCell = false;
                    isJumpMode = false;
                    isSingleSelection = false;
                }
                else {
                    // Only Direction
                    changeStartCell = true;
                    isJumpMode = false;
                    isSingleSelection = true;
                }
                _this.handleMove({
                    event: event,
                    changeStartCell: changeStartCell,
                    isJumpMode: isJumpMode,
                    isSingleSelection: isSingleSelection,
                });
            }
        });
        this.spreadsheet.on(S2Event.DATA_CELL_CLICK, function (event) {
            var cell = _this.spreadsheet.getCell(event.target).getMeta();
            if (cell) {
                _this.startCell = _this.getCellMetaFromViewMeta(cell);
                _this.endCell = _this.startCell;
            }
        });
    };
    SelectedCellMove.prototype.getCellMetaFromViewMeta = function (meta) {
        return {
            rowIndex: meta.rowIndex,
            colIndex: meta.colIndex,
            id: meta.id,
            type: CellTypes.DATA_CELL,
        };
    };
    // core move function
    SelectedCellMove.prototype.handleMove = function (_a) {
        var event = _a.event, changeStartCell = _a.changeStartCell, isJumpMode = _a.isJumpMode, isSingleSelection = _a.isSingleSelection;
        var _b = this, spreadsheet = _b.spreadsheet, startCell = _b.startCell, endCell = _b.endCell;
        var cell = changeStartCell ? startCell : endCell;
        var rowCol = this.getMoveInfo(event.key, cell, isJumpMode);
        if (!rowCol) {
            return;
        }
        var _c = __read([rowCol.row, rowCol.col], 2), rowIndex = _c[0], colIndex = _c[1];
        this.scrollToActiveCell(spreadsheet, rowIndex, colIndex);
        var movedCell = this.generateCellMeta(spreadsheet, rowIndex, colIndex);
        var selectedCells = isSingleSelection
            ? [movedCell]
            : this.getRangeCells(spreadsheet, startCell, movedCell);
        selectCells(spreadsheet, selectedCells);
        if (changeStartCell) {
            this.startCell = movedCell;
        }
        this.endCell = movedCell;
        this.spreadsheet.emit(S2Event.DATA_CELL_SELECT_MOVE, selectedCells);
    };
    SelectedCellMove.prototype.generateCellMeta = function (spreadsheet, row, col) {
        var isTableMode = spreadsheet.isTableMode, _a = spreadsheet.facet.layoutResult, colLeafNodes = _a.colLeafNodes, rowLeafNodes = _a.rowLeafNodes;
        var rowId = isTableMode() ? String(row) : rowLeafNodes[row].id;
        var colId = colLeafNodes[col].id;
        return {
            rowIndex: row,
            colIndex: col,
            id: getDataCellId(rowId, colId),
            type: CellTypes.DATA_CELL,
        };
    };
    SelectedCellMove.prototype.getRangeCells = function (spreadsheet, start, end) {
        var _a = getRangeIndex(start, end), _b = _a.start, startRowIndex = _b.rowIndex, startColIndex = _b.colIndex, _c = _a.end, endRowIndex = _c.rowIndex, endColIndex = _c.colIndex;
        var cells = [];
        for (var row = startRowIndex; row <= endRowIndex; row++) {
            for (var col = startColIndex; col <= endColIndex; col++) {
                cells.push(this.generateCellMeta(spreadsheet, row, col));
            }
        }
        return cells;
    };
    SelectedCellMove.prototype.getMoveInfo = function (code, cell, isJump) {
        var spreadsheet = this.spreadsheet;
        var _a = spreadsheet.options, _b = _a.frozenColCount, frozenColCount = _b === void 0 ? 0 : _b, _c = _a.frozenRowCount, frozenRowCount = _c === void 0 ? 0 : _c, _d = _a.frozenTrailingColCount, frozenTrailingColCount = _d === void 0 ? 0 : _d, _e = _a.frozenTrailingRowCount, frozenTrailingRowCount = _e === void 0 ? 0 : _e;
        var _f = spreadsheet.facet.layoutResult, rowLeafNodes = _f.rowLeafNodes, colLeafNodes = _f.colLeafNodes;
        var _g = __read([
            0 + frozenColCount,
            colLeafNodes.length - frozenTrailingColCount - 1,
        ], 2), minCol = _g[0], maxCol = _g[1];
        var _h = __read([
            0 + frozenRowCount,
            (spreadsheet.isTableMode()
                ? spreadsheet.dataSet.getDisplayDataSet().length
                : rowLeafNodes.length) -
                frozenTrailingRowCount -
                1,
        ], 2), minRow = _h[0], maxRow = _h[1];
        if (!cell) {
            return;
        }
        switch (code) {
            case InteractionKeyboardKey.ARROW_RIGHT:
                if (cell.colIndex + 1 > maxCol) {
                    return;
                }
                return {
                    row: cell.rowIndex,
                    col: isJump ? maxCol : cell.colIndex + 1,
                };
            case InteractionKeyboardKey.ARROW_LEFT:
                if (cell.colIndex - 1 < minCol) {
                    return;
                }
                return {
                    row: cell.rowIndex,
                    col: isJump ? minCol : cell.colIndex - 1,
                };
            case InteractionKeyboardKey.ARROW_UP:
                if (cell.rowIndex - 1 < minRow) {
                    return;
                }
                return {
                    row: isJump ? minRow : cell.rowIndex - 1,
                    col: cell.colIndex,
                };
            case InteractionKeyboardKey.ARROW_DOWN:
                if (cell.rowIndex + 1 > maxRow) {
                    return;
                }
                return {
                    row: isJump ? maxRow : cell.rowIndex + 1,
                    col: cell.colIndex,
                };
        }
    };
    // 计算需要滚动的offset
    SelectedCellMove.prototype.calculateOffset = function (spreadsheet, rowIndex, colIndex) {
        var _a = spreadsheet.options, _b = _a.frozenRowCount, frozenRowCount = _b === void 0 ? 0 : _b, _c = _a.frozenTrailingRowCount, frozenTrailingRowCount = _c === void 0 ? 0 : _c;
        var facet = spreadsheet.facet, frozenColGroup = spreadsheet.frozenColGroup, frozenTrailingColGroup = spreadsheet.frozenTrailingColGroup, frozenRowGroup = spreadsheet.frozenRowGroup, frozenTrailingRowGroup = spreadsheet.frozenTrailingRowGroup;
        var colLeafNodes = facet.layoutResult.colLeafNodes;
        var _d = facet.getScrollOffset(), scrollX = _d.scrollX, scrollY = _d.scrollY;
        var _e = facet.panelBBox, height = _e.viewportHeight, width = _e.viewportWidth;
        var splitLineStyle = get(spreadsheet, 'theme.splitLine');
        var frozenColWidth = frozenColGroup
            ? Math.floor(frozenColGroup.getBBox().width -
                splitLineStyle.verticalBorderWidth / 2)
            : 0;
        var frozenTrailingColWidth = frozenTrailingColGroup
            ? Math.floor(frozenTrailingColGroup.getBBox().width)
            : 0;
        var frozenRowHeight = frozenRowGroup
            ? Math.floor(frozenRowGroup.getBBox().height -
                splitLineStyle.horizontalBorderWidth / 2)
            : 0;
        var frozenTrailingRowHeight = frozenTrailingRowGroup
            ? Math.floor(frozenTrailingRowGroup.getBBox().height)
            : 0;
        var indexes = calculateInViewIndexes(scrollX, scrollY, facet.viewCellWidths, facet.viewCellHeights, {
            width: width - frozenColWidth - frozenTrailingColWidth,
            height: height - frozenRowHeight - frozenTrailingRowHeight,
            x: frozenColWidth,
            y: frozenRowHeight,
        }, facet.getRealScrollX(facet.cornerBBox.width));
        // 小于0的初始值
        var offsetX = -1;
        var offsetY = -1;
        var targetNode = colLeafNodes.find(function (node) { return node.colIndex === colIndex; });
        // offsetX
        if (colIndex <= indexes[0]) {
            // scroll left
            offsetX = targetNode.x - frozenColWidth;
        }
        else if (colIndex >= indexes[1] &&
            colIndex < colLeafNodes.length - frozenTrailingRowCount) {
            // scroll right
            offsetX =
                targetNode.x + targetNode.width - width + frozenTrailingColWidth;
        }
        // offsetY
        if (rowIndex <= indexes[2]) {
            // scroll top
            offsetY = facet.viewCellHeights.getCellOffsetY(rowIndex - frozenRowCount);
        }
        else if (rowIndex >= indexes[3]) {
            // scroll bottom
            var y = facet.viewCellHeights.getCellOffsetY(rowIndex + 1);
            offsetY = y + frozenTrailingRowHeight - height;
        }
        return { offsetX: offsetX, offsetY: offsetY };
    };
    SelectedCellMove.prototype.scrollToActiveCell = function (spreadsheet, rowIndex, colIndex) {
        var _a = this.calculateOffset(spreadsheet, rowIndex, colIndex), offsetX = _a.offsetX, offsetY = _a.offsetY;
        var facet = spreadsheet.facet;
        var _b = spreadsheet.facet.getScrollOffset(), scrollX = _b.scrollX, scrollY = _b.scrollY;
        facet.scrollWithAnimation({
            offsetX: { value: offsetX > -1 ? offsetX : scrollX },
            offsetY: { value: offsetY > -1 ? offsetY : scrollY },
        });
    };
    return SelectedCellMove;
}(BaseEvent));

var RootInteraction = /** @class */ (function () {
    function RootInteraction(spreadsheet) {
        var _this = this;
        this.interactions = new Map();
        // 用来标记需要拦截的交互，interaction和本身的hover等事件可能会有冲突，有冲突时在此屏蔽
        this.intercepts = new Set();
        // hover有keep-hover态，是个计时器，hover后800毫秒还在当前cell的情况下，该cell进入keep-hover状态
        // 在任何触发点击，或者点击空白区域时，说明已经不是hover了，因此需要取消这个计时器。
        this.hoverTimer = null;
        this.defaultState = {
            cells: [],
            force: false,
        };
        this.onTriggerInteractionsResetEffect = function () {
            _this.interactions.forEach(function (interaction) {
                interaction.reset();
            });
        };
        this.selectAll = function () {
            _this.changeState({
                stateName: InteractionStateName.ALL_SELECTED,
            });
        };
        this.getCellChildrenNodes = function (cell) {
            var _a;
            var meta = (_a = cell === null || cell === void 0 ? void 0 : cell.getMeta) === null || _a === void 0 ? void 0 : _a.call(cell);
            var isRowCell = (cell === null || cell === void 0 ? void 0 : cell.cellType) === CellTypes.ROW_CELL;
            var isHierarchyTree = _this.spreadsheet.isHierarchyTreeType();
            // 树状模式的行头点击不需要遍历当前行头的所有子节点，因为只会有一级
            if (isHierarchyTree && isRowCell) {
                return Node$1.getAllLeaveNodes(meta).filter(function (node) { return node.rowIndex === meta.rowIndex; });
            }
            // 平铺模式 或 树状模式的列头点击遍历所有子节点
            return Node$1.getAllChildrenNodes(meta);
        };
        this.selectHeaderCell = function (selectHeaderCellInfo) {
            var _a;
            if (selectHeaderCellInfo === void 0) { selectHeaderCellInfo = {}; }
            var cell = selectHeaderCellInfo.cell;
            if (isEmpty(cell)) {
                return;
            }
            var currentCellMeta = (_a = cell === null || cell === void 0 ? void 0 : cell.getMeta) === null || _a === void 0 ? void 0 : _a.call(cell);
            if (!currentCellMeta || isNil(currentCellMeta === null || currentCellMeta === void 0 ? void 0 : currentCellMeta.x)) {
                return;
            }
            _this.addIntercepts([InterceptType.HOVER]);
            var isHierarchyTree = _this.spreadsheet.isHierarchyTreeType();
            var isColCell = (cell === null || cell === void 0 ? void 0 : cell.cellType) === CellTypes.COL_CELL;
            var lastState = _this.getState();
            var isSelectedCell = _this.isSelectedCell(cell);
            var isMultiSelected = (selectHeaderCellInfo === null || selectHeaderCellInfo === void 0 ? void 0 : selectHeaderCellInfo.isMultiSelection) && _this.isSelectedState();
            // 如果是已选中的单元格, 则取消选中, 兼容行列多选 (含叶子节点)
            var childrenNodes = isSelectedCell ? [] : _this.getCellChildrenNodes(cell);
            var selectedCells = isSelectedCell ? [] : [getCellMeta(cell)];
            if (isMultiSelected) {
                selectedCells = concat(lastState === null || lastState === void 0 ? void 0 : lastState.cells, selectedCells);
                childrenNodes = concat(lastState === null || lastState === void 0 ? void 0 : lastState.nodes, childrenNodes);
                if (isSelectedCell) {
                    selectedCells = selectedCells.filter(function (_a) {
                        var id = _a.id;
                        return id !== currentCellMeta.id;
                    });
                    childrenNodes = childrenNodes.filter(function (node) { return !(node === null || node === void 0 ? void 0 : node.id.includes(currentCellMeta.id)); });
                }
            }
            if (isEmpty(selectedCells)) {
                _this.reset();
                _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, _this.getActiveCells());
                return;
            }
            // 兼容行列多选 (高亮 行/列头 以及相对应的数值单元格)
            _this.changeState({
                cells: selectedCells,
                nodes: childrenNodes,
                stateName: InteractionStateName.SELECTED,
            });
            var selectedCellIds = selectedCells.map(function (_a) {
                var id = _a.id;
                return id;
            });
            _this.updateCells(_this.getRowColActiveCells(selectedCellIds));
            // 平铺模式或者是树状模式下的列头单元格, 高亮子节点
            if (!isHierarchyTree || isColCell) {
                _this.highlightNodes(childrenNodes);
            }
            _this.spreadsheet.emit(S2Event.GLOBAL_SELECTED, _this.getActiveCells());
            return true;
        };
        this.highlightNodes = function (nodes) {
            if (nodes === void 0) { nodes = []; }
            nodes.forEach(function (node) {
                var _a;
                (_a = node === null || node === void 0 ? void 0 : node.belongsCell) === null || _a === void 0 ? void 0 : _a.updateByState(InteractionStateName.SELECTED, node.belongsCell);
            });
        };
        this.mergeCells = function (cellsInfo, hideData) {
            mergeCell(_this.spreadsheet, cellsInfo, hideData);
        };
        this.unmergeCell = function (removedCells) {
            unmergeCell(_this.spreadsheet, removedCells);
        };
        this.spreadsheet = spreadsheet;
        this.registerEventController();
        this.registerInteractions();
        window.addEventListener('visibilitychange', this.onTriggerInteractionsResetEffect);
    }
    RootInteraction.prototype.destroy = function () {
        this.interactions.clear();
        this.intercepts.clear();
        this.eventController.clear();
        this.clearHoverTimer();
        this.resetState();
        window.removeEventListener('visibilitychange', this.onTriggerInteractionsResetEffect);
    };
    RootInteraction.prototype.reset = function () {
        this.clearState();
        this.clearHoverTimer();
        this.intercepts.clear();
        this.spreadsheet.hideTooltip();
    };
    RootInteraction.prototype.setState = function (interactionStateInfo) {
        setState(this.spreadsheet, interactionStateInfo);
    };
    RootInteraction.prototype.getState = function () {
        return (this.spreadsheet.store.get(INTERACTION_STATE_INFO_KEY) ||
            this.defaultState);
    };
    RootInteraction.prototype.setInteractedCells = function (cell) {
        var interactedCells = this.getInteractedCells().concat([cell]);
        var state = this.getState();
        state.interactedCells = interactedCells;
        this.setState(state);
    };
    RootInteraction.prototype.getInteractedCells = function () {
        var currentState = this.getState();
        return (currentState === null || currentState === void 0 ? void 0 : currentState.interactedCells) || [];
    };
    RootInteraction.prototype.resetState = function () {
        this.spreadsheet.store.set(INTERACTION_STATE_INFO_KEY, this.defaultState);
    };
    RootInteraction.prototype.getCurrentStateName = function () {
        return this.getState().stateName;
    };
    RootInteraction.prototype.isEqualStateName = function (stateName) {
        return this.getCurrentStateName() === stateName;
    };
    RootInteraction.prototype.isStateOf = function (stateName) {
        var currentState = this.getState();
        return (currentState === null || currentState === void 0 ? void 0 : currentState.stateName) === stateName;
    };
    RootInteraction.prototype.isSelectedState = function () {
        return (this.isStateOf(InteractionStateName.SELECTED) ||
            this.isStateOf(InteractionStateName.BRUSH_SELECTED));
    };
    RootInteraction.prototype.isAllSelectedState = function () {
        return this.isStateOf(InteractionStateName.ALL_SELECTED);
    };
    RootInteraction.prototype.isHoverFocusState = function () {
        return this.isStateOf(InteractionStateName.HOVER_FOCUS);
    };
    RootInteraction.prototype.isHoverState = function () {
        return this.isStateOf(InteractionStateName.HOVER);
    };
    RootInteraction.prototype.isActiveCell = function (cell) {
        return !!this.getCells().find(function (meta) { return cell.getMeta().id === meta.id; });
    };
    RootInteraction.prototype.isSelectedCell = function (cell) {
        return this.isSelectedState() && this.isActiveCell(cell);
    };
    // 获取当前 interaction 记录的 Cells 元信息列表，包括不在可视区域内的格子
    RootInteraction.prototype.getCells = function (cellType) {
        var currentState = this.getState();
        var cells = (currentState === null || currentState === void 0 ? void 0 : currentState.cells) || [];
        if (isNil(cellType)) {
            return cells;
        }
        return cells.filter(function (cell) { return cellType.includes(cell.type); });
    };
    // 获取 cells 中在可视区域内的实例列表
    RootInteraction.prototype.getActiveCells = function () {
        var ids = this.getCells().map(function (item) { return item.id; });
        var allCells = this.getAllCells();
        // 这里的顺序要以 ids 中的顺序为准，代表点击 cell 的顺序
        return map(ids, function (id) {
            return find$1(allCells, function (cell) { var _a; return ((_a = cell === null || cell === void 0 ? void 0 : cell.getMeta()) === null || _a === void 0 ? void 0 : _a.id) === id; });
        }).filter(function (cell) { return cell; }); // 去除 undefined
    };
    RootInteraction.prototype.clearStyleIndependent = function () {
        if (!this.isSelectedState() &&
            !this.isHoverState() &&
            !this.isAllSelectedState()) {
            return;
        }
        this.getPanelGroupAllDataCells().forEach(function (cell) {
            cell.hideInteractionShape();
        });
    };
    RootInteraction.prototype.getPanelGroupAllUnSelectedDataCells = function () {
        var _this = this;
        return this.getPanelGroupAllDataCells().filter(function (cell) { return !_this.isActiveCell(cell); });
    };
    RootInteraction.prototype.getPanelGroupAllDataCells = function () {
        var _a;
        return getAllChildCells((_a = this.spreadsheet.panelGroup) === null || _a === void 0 ? void 0 : _a.getChildren(), DataCell);
    };
    RootInteraction.prototype.getAllRowHeaderCells = function () {
        var _a, _b;
        var children = ((_a = this.spreadsheet.foregroundGroup) === null || _a === void 0 ? void 0 : _a.getChildren()) || [];
        var rowHeader = children.find(function (group) {
            return group instanceof RowHeader && !(group instanceof SeriesNumberHeader);
        });
        var headerChildren = ((_b = rowHeader === null || rowHeader === void 0 ? void 0 : rowHeader.cfg) === null || _b === void 0 ? void 0 : _b.children) || [];
        return getAllChildCells(headerChildren, RowCell).filter(function (cell) { return cell.cellType === CellTypes.ROW_CELL; });
    };
    RootInteraction.prototype.getAllColHeaderCells = function () {
        var _a, _b;
        var children = ((_a = this.spreadsheet.foregroundGroup) === null || _a === void 0 ? void 0 : _a.getChildren()) || [];
        var colHeader = children.find(function (group) { return group instanceof ColHeader; });
        var headerChildren = ((_b = colHeader === null || colHeader === void 0 ? void 0 : colHeader.cfg) === null || _b === void 0 ? void 0 : _b.children) || [];
        return getAllChildCells(headerChildren, ColCell).filter(function (cell) { return cell.cellType === CellTypes.COL_CELL; });
    };
    RootInteraction.prototype.getRowColActiveCells = function (ids) {
        return concat(this.getAllRowHeaderCells(), this.getAllColHeaderCells()).filter(function (item) { return ids.includes(item.getMeta().id); });
    };
    RootInteraction.prototype.getAllCells = function () {
        return concat(this.getPanelGroupAllDataCells(), this.getAllRowHeaderCells(), this.getAllColHeaderCells());
    };
    RootInteraction.prototype.hideColumns = function (hiddenColumnFields, forceRender) {
        if (hiddenColumnFields === void 0) { hiddenColumnFields = []; }
        if (forceRender === void 0) { forceRender = true; }
        hideColumnsByThunkGroup(this.spreadsheet, hiddenColumnFields, forceRender);
    };
    RootInteraction.prototype.getBrushSelectionInfo = function (brushSelection) {
        var _a, _b, _c;
        if (isBoolean(brushSelection)) {
            return {
                dataBrushSelection: brushSelection,
                rowBrushSelection: brushSelection,
                colBrushSelection: brushSelection,
            };
        }
        return {
            dataBrushSelection: (_a = brushSelection === null || brushSelection === void 0 ? void 0 : brushSelection.data) !== null && _a !== void 0 ? _a : false,
            rowBrushSelection: (_b = brushSelection === null || brushSelection === void 0 ? void 0 : brushSelection.row) !== null && _b !== void 0 ? _b : false,
            colBrushSelection: (_c = brushSelection === null || brushSelection === void 0 ? void 0 : brushSelection.col) !== null && _c !== void 0 ? _c : false,
        };
    };
    RootInteraction.prototype.getDefaultInteractions = function () {
        var _a = this.spreadsheet.options.interaction, resize = _a.resize, brushSelection = _a.brushSelection, multiSelection = _a.multiSelection, rangeSelection = _a.rangeSelection, selectedCellMove = _a.selectedCellMove;
        var _b = this.getBrushSelectionInfo(brushSelection), dataBrushSelection = _b.dataBrushSelection, rowBrushSelection = _b.rowBrushSelection, colBrushSelection = _b.colBrushSelection;
        return [
            {
                key: InteractionName.CORNER_CELL_CLICK,
                interaction: CornerCellClick,
            },
            {
                key: InteractionName.DATA_CELL_CLICK,
                interaction: DataCellClick,
            },
            {
                key: InteractionName.ROW_COLUMN_CLICK,
                interaction: RowColumnClick,
            },
            {
                key: InteractionName.ROW_TEXT_CLICK,
                interaction: RowTextClick,
            },
            {
                key: InteractionName.MERGED_CELLS_CLICK,
                interaction: MergedCellClick,
            },
            {
                key: InteractionName.HOVER,
                interaction: HoverEvent,
                enable: !isMobile(),
            },
            {
                key: InteractionName.BRUSH_SELECTION,
                interaction: DataCellBrushSelection,
                enable: !isMobile() && dataBrushSelection,
            },
            {
                key: InteractionName.ROW_BRUSH_SELECTION,
                interaction: RowBrushSelection,
                enable: !isMobile() && rowBrushSelection,
            },
            {
                key: InteractionName.COL_BRUSH_SELECTION,
                interaction: ColBrushSelection,
                enable: !isMobile() && colBrushSelection,
            },
            {
                key: InteractionName.COL_ROW_RESIZE,
                interaction: RowColumnResize,
                enable: !isMobile() && resize,
            },
            {
                key: InteractionName.DATA_CELL_MULTI_SELECTION,
                interaction: DataCellMultiSelection,
                enable: !isMobile() && multiSelection,
            },
            {
                key: InteractionName.RANGE_SELECTION,
                interaction: RangeSelection,
                enable: !isMobile() && rangeSelection,
            },
            {
                key: InteractionName.SELECTED_CELL_MOVE,
                interaction: SelectedCellMove,
                enable: !isMobile() && selectedCellMove,
            },
        ];
    };
    RootInteraction.prototype.registerInteractions = function () {
        var _this = this;
        var customInteractions = this.spreadsheet.options.interaction.customInteractions;
        this.interactions.clear();
        var defaultInteractions = this.getDefaultInteractions();
        defaultInteractions.forEach(function (_a) {
            var key = _a.key, Interaction = _a.interaction, enable = _a.enable;
            if (enable !== false) {
                _this.interactions.set(key, new Interaction(_this.spreadsheet));
            }
        });
        if (!isEmpty(customInteractions)) {
            forEach(customInteractions, function (customInteraction) {
                var CustomInteractionClass = customInteraction.interaction;
                _this.interactions.set(customInteraction.key, new CustomInteractionClass(_this.spreadsheet));
            });
        }
    };
    RootInteraction.prototype.registerEventController = function () {
        this.eventController = new EventController(this.spreadsheet);
    };
    RootInteraction.prototype.draw = function () {
        this.spreadsheet.container.draw();
    };
    RootInteraction.prototype.clearState = function () {
        if (clearState(this.spreadsheet)) {
            this.draw();
        }
    };
    // 改变 cell 交互状态后，进行了更新和重新绘制
    RootInteraction.prototype.changeState = function (interactionStateInfo) {
        var _this = this;
        var interaction = this.spreadsheet.interaction;
        var _a = interactionStateInfo.cells, cells = _a === void 0 ? [] : _a, force = interactionStateInfo.force, stateName = interactionStateInfo.stateName, onUpdateCells = interactionStateInfo.onUpdateCells;
        if (isEmpty(cells) && stateName === InteractionStateName.SELECTED) {
            if (force) {
                interaction.changeState({
                    cells: [],
                    stateName: InteractionStateName.UNSELECTED,
                });
            }
            return;
        }
        // 之前是全选状态，需要清除格子的样式
        if (this.getCurrentStateName() === InteractionStateName.ALL_SELECTED) {
            this.clearStyleIndependent();
        }
        this.clearState();
        this.setState(interactionStateInfo);
        // 更新单元格
        var update = function () {
            _this.updatePanelGroupAllDataCells();
        };
        if (onUpdateCells) {
            onUpdateCells(this, update);
        }
        else {
            update();
        }
        this.draw();
    };
    RootInteraction.prototype.updatePanelGroupAllDataCells = function () {
        this.updateCells(this.getPanelGroupAllDataCells());
    };
    RootInteraction.prototype.updateCells = function (cells) {
        if (cells === void 0) { cells = []; }
        cells.forEach(function (cell) {
            cell.update();
        });
    };
    RootInteraction.prototype.addIntercepts = function (interceptTypes) {
        var _this = this;
        if (interceptTypes === void 0) { interceptTypes = []; }
        interceptTypes.forEach(function (interceptType) {
            _this.intercepts.add(interceptType);
        });
    };
    RootInteraction.prototype.hasIntercepts = function (interceptTypes) {
        var _this = this;
        if (interceptTypes === void 0) { interceptTypes = []; }
        return interceptTypes.some(function (interceptType) {
            return _this.intercepts.has(interceptType);
        });
    };
    RootInteraction.prototype.removeIntercepts = function (interceptTypes) {
        var _this = this;
        if (interceptTypes === void 0) { interceptTypes = []; }
        interceptTypes.forEach(function (interceptType) {
            _this.intercepts.delete(interceptType);
        });
    };
    RootInteraction.prototype.clearHoverTimer = function () {
        clearTimeout(this.hoverTimer);
    };
    RootInteraction.prototype.setHoverTimer = function (timer) {
        this.hoverTimer = timer;
    };
    RootInteraction.prototype.getHoverTimer = function () {
        return this.hoverTimer;
    };
    RootInteraction.prototype.getSelectedCellHighlight = function () {
        var selectedCellHighlight = this.spreadsheet.options.interaction.selectedCellHighlight;
        if (isBoolean(selectedCellHighlight)) {
            return {
                rowHeader: selectedCellHighlight,
                colHeader: selectedCellHighlight,
                currentRow: false,
                currentCol: false,
            };
        }
        var _a = selectedCellHighlight !== null && selectedCellHighlight !== void 0 ? selectedCellHighlight : {}, _b = _a.rowHeader, rowHeader = _b === void 0 ? false : _b, _c = _a.colHeader, colHeader = _c === void 0 ? false : _c, _d = _a.currentRow, currentRow = _d === void 0 ? false : _d, _e = _a.currentCol, currentCol = _e === void 0 ? false : _e;
        return {
            rowHeader: rowHeader,
            colHeader: colHeader,
            currentRow: currentRow,
            currentCol: currentCol,
        };
    };
    RootInteraction.prototype.getHoverAfterScroll = function () {
        return this.spreadsheet.options.interaction.hoverAfterScroll;
    };
    RootInteraction.prototype.getHoverHighlight = function () {
        var hoverHighlight = this.spreadsheet.options.interaction.hoverHighlight;
        if (isBoolean(hoverHighlight)) {
            return {
                rowHeader: hoverHighlight,
                colHeader: hoverHighlight,
                currentRow: hoverHighlight,
                currentCol: hoverHighlight,
            };
        }
        var _a = hoverHighlight !== null && hoverHighlight !== void 0 ? hoverHighlight : {}, _b = _a.rowHeader, rowHeader = _b === void 0 ? false : _b, _c = _a.colHeader, colHeader = _c === void 0 ? false : _c, _d = _a.currentRow, currentRow = _d === void 0 ? false : _d, _e = _a.currentCol, currentCol = _e === void 0 ? false : _e;
        return {
            rowHeader: rowHeader,
            colHeader: colHeader,
            currentRow: currentRow,
            currentCol: currentCol,
        };
    };
    RootInteraction.prototype.getBrushSelection = function () {
        var brushSelection = this.spreadsheet.options.interaction.brushSelection;
        if (isBoolean(brushSelection)) {
            return {
                data: brushSelection,
                row: brushSelection,
                col: brushSelection,
            };
        }
        var _a = brushSelection !== null && brushSelection !== void 0 ? brushSelection : {}, _b = _a.data, data = _b === void 0 ? false : _b, _c = _a.row, row = _c === void 0 ? false : _c, _d = _a.col, col = _d === void 0 ? false : _d;
        return {
            data: data,
            row: row,
            col: col,
        };
    };
    return RootInteraction;
}());

var HdAdapter = /** @class */ (function () {
    function HdAdapter(spreadsheet) {
        var _this = this;
        this.viewport = window;
        this.isDevicePixelRatioChange = false;
        this.init = function () {
            _this.initDevicePixelRatioListener();
            _this.initDeviceZoomListener();
        };
        this.destroy = function () {
            _this.removeDevicePixelRatioListener();
            _this.removeDeviceZoomListener();
        };
        this.removeDevicePixelRatioListener = function () {
            var _a;
            if ((_a = _this.devicePixelRatioMedia) === null || _a === void 0 ? void 0 : _a.removeEventListener) {
                _this.devicePixelRatioMedia.removeEventListener('change', _this.renderByDevicePixelRatioChanged);
            }
            else {
                _this.devicePixelRatioMedia.removeListener(_this.renderByDevicePixelRatioChanged);
            }
        };
        this.initDeviceZoomListener = function () {
            var _a, _b;
            if (isMobile()) {
                return;
            }
            // VisualViewport support browser zoom & mac touch tablet
            (_b = (_a = _this.viewport) === null || _a === void 0 ? void 0 : _a.visualViewport) === null || _b === void 0 ? void 0 : _b.addEventListener('resize', _this.renderByZoomScaleWithoutResizeEffect);
        };
        this.removeDeviceZoomListener = function () {
            var _a, _b;
            if (isMobile()) {
                return;
            }
            (_b = (_a = _this.viewport) === null || _a === void 0 ? void 0 : _a.visualViewport) === null || _b === void 0 ? void 0 : _b.removeEventListener('resize', _this.renderByZoomScaleWithoutResizeEffect);
        };
        /**
         * DPR 改变也会触发 visualViewport 的 resize 事件, 预期是只监听双指缩放, 所以这里规避掉
         * @see https://github.com/antvis/S2/issues/2072
         */
        this.renderByZoomScaleWithoutResizeEffect = function (event) {
            _this.isDevicePixelRatioChange = false;
            _this.renderByZoomScale(event);
        };
        this.renderByDevicePixelRatioChanged = function () {
            _this.isDevicePixelRatioChange = true;
            _this.renderByDevicePixelRatio();
        };
        this.renderByDevicePixelRatio = function (ratio) {
            if (ratio === void 0) { ratio = window.devicePixelRatio; }
            var _a = _this.spreadsheet, container = _a.container, _b = _a.options, width = _b.width, height = _b.height, devicePixelRatio = _b.devicePixelRatio;
            var canvas = _this.spreadsheet.getCanvasElement();
            var lastRatio = container.get('pixelRatio');
            if (lastRatio === ratio || !canvas) {
                return;
            }
            // 缩放时, 以向上取整后的缩放比为准
            // 设备像素比改变时, 取当前和用户配置中最大的, 保证显示效果
            var pixelRatio = Math.max(ratio, devicePixelRatio, MIN_DEVICE_PIXEL_RATIO);
            container.set('pixelRatio', pixelRatio);
            container.changeSize(width, height);
            _this.spreadsheet.render(false);
        };
        this.renderByZoomScale = debounce(function (event) {
            var ratio = Math.ceil(event.target.scale);
            if (ratio >= 1 && !_this.isDevicePixelRatioChange) {
                _this.renderByDevicePixelRatio(ratio);
            }
        }, 350);
        this.spreadsheet = spreadsheet;
    }
    HdAdapter.prototype.initDevicePixelRatioListener = function () {
        var _a;
        this.devicePixelRatioMedia = window.matchMedia("(resolution: ".concat(window.devicePixelRatio, "dppx)"));
        if ((_a = this.devicePixelRatioMedia) === null || _a === void 0 ? void 0 : _a.addEventListener) {
            this.devicePixelRatioMedia.addEventListener('change', this.renderByDevicePixelRatioChanged);
        }
        else {
            this.devicePixelRatioMedia.addListener(this.renderByDevicePixelRatioChanged);
        }
    };
    return HdAdapter;
}());

/**
 * Base tooltips component
 */
var BaseTooltip = /** @class */ (function () {
    function BaseTooltip(spreadsheet) {
        this.visible = false;
        this.position = { x: 0, y: 0 }; // tooltips position info
        this.spreadsheet = spreadsheet;
    }
    BaseTooltip.prototype.show = function (showOptions) {
        var _a, _b, _c;
        var position = showOptions.position, options = showOptions.options, content = showOptions.content, event = showOptions.event;
        var enterable = getTooltipDefaultOptions(options).enterable;
        var _d = this.spreadsheet.options.tooltip || {}, autoAdjustBoundary = _d.autoAdjustBoundary, adjustPosition = _d.adjustPosition;
        this.visible = true;
        this.options = showOptions;
        var container = this.getContainer();
        this.renderContent(content);
        var _e = getAutoAdjustPosition({
            spreadsheet: this.spreadsheet,
            position: position,
            tooltipContainer: container,
            autoAdjustBoundary: autoAdjustBoundary,
        }), x = _e.x, y = _e.y;
        this.position = (_a = adjustPosition === null || adjustPosition === void 0 ? void 0 : adjustPosition({ position: { x: x, y: y }, event: event })) !== null && _a !== void 0 ? _a : {
            x: x,
            y: y,
        };
        setTooltipContainerStyle(container, {
            style: {
                left: "".concat((_b = this.position) === null || _b === void 0 ? void 0 : _b.x, "px"),
                top: "".concat((_c = this.position) === null || _c === void 0 ? void 0 : _c.y, "px"),
                pointerEvents: enterable ? 'all' : 'none',
            },
            visible: true,
        });
    };
    BaseTooltip.prototype.hide = function () {
        this.visible = false;
        if (!this.container) {
            return;
        }
        setTooltipContainerStyle(this.container, {
            style: {
                pointerEvents: 'none',
            },
            visible: false,
        });
        this.resetPosition();
    };
    BaseTooltip.prototype.destroy = function () {
        var _a, _b;
        this.visible = false;
        if (!this.container) {
            return;
        }
        this.resetPosition();
        (_b = (_a = this.container).remove) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.container = null;
    };
    BaseTooltip.prototype.renderContent = function (content) {
        if (!this.container) {
            return;
        }
        this.clearContent();
        var contentFromOptions = (this.spreadsheet.options.tooltip || {}).content;
        var displayContent = content !== null && content !== void 0 ? content : contentFromOptions;
        // 兼容 displayContent = '' 空字符串的场景
        if (isNil(displayContent)) {
            return;
        }
        if (typeof displayContent === 'string') {
            this.container.innerHTML = displayContent;
            return;
        }
        if (displayContent instanceof Element) {
            this.container.appendChild(displayContent);
        }
    };
    BaseTooltip.prototype.clearContent = function () {
        if (!this.container) {
            return;
        }
        this.container.innerHTML = '';
    };
    BaseTooltip.prototype.disablePointerEvent = function () {
        if (!this.container) {
            return;
        }
        if (this.container.style.pointerEvents === 'none') {
            return;
        }
        setTooltipContainerStyle(this.container, {
            style: {
                pointerEvents: 'none',
            },
        });
    };
    BaseTooltip.prototype.resetPosition = function () {
        this.position = { x: 0, y: 0 };
    };
    BaseTooltip.prototype.getContainer = function () {
        var _a;
        if (!this.container) {
            var tooltip = this.spreadsheet.options.tooltip;
            var rootContainer = ((_a = tooltip.getContainer) === null || _a === void 0 ? void 0 : _a.call(tooltip)) || document.body;
            var container = document.createElement('div');
            setTooltipContainerStyle(container, {
                style: tooltip.style,
                className: [TOOLTIP_CONTAINER_CLS].concat(tooltip.className),
            });
            rootContainer.appendChild(container);
            this.container = container;
            return this.container;
        }
        return this.container;
    };
    return BaseTooltip;
}());

var SpreadSheet = /** @class */ (function (_super) {
    __extends(SpreadSheet, _super);
    function SpreadSheet(dom, dataCfg, options) {
        var _this = _super.call(this) || this;
        // store some temporary data
        _this.store = new Store();
        _this.untypedOn = _this.on;
        _this.untypedEmit = _this.emit;
        _this.on = function (event, listener) { return _this.untypedOn(event, listener); };
        _this.emit = function (event) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return _this.untypedEmit.apply(_this, __spreadArray$1([event], __read(args), false));
        };
        // 初次渲染时, 如果配置了隐藏列, 则生成一次相关配置信息
        _this.initHiddenColumnsDetail = function () {
            var hiddenColumnFields = _this.options.interaction.hiddenColumnFields;
            var lastHiddenColumnsDetail = _this.store.get('hiddenColumnsDetail');
            // 隐藏列为空, 并且没有操作的情况下, 则无需生成
            if (isEmpty(hiddenColumnFields) && isEmpty(lastHiddenColumnsDetail)) {
                return;
            }
            hideColumnsByThunkGroup(_this, hiddenColumnFields, true);
        };
        /**
         * 获取文本在画布中的测量信息
         * @param text 待计算的文本
         * @param font 文本 css 样式
         * @returns 文本测量信息 TextMetrics
         */
        _this.measureText = memoize(function (text, font) {
            var _a;
            if (text === void 0) { text = ''; }
            if (!font) {
                return null;
            }
            var ctx = (_a = _this.getCanvasElement()) === null || _a === void 0 ? void 0 : _a.getContext('2d');
            var _b = font, fontSize = _b.fontSize, fontFamily = _b.fontFamily, fontWeight = _b.fontWeight, fontStyle = _b.fontStyle, fontVariant = _b.fontVariant;
            ctx.font = [
                fontStyle,
                fontVariant,
                fontWeight,
                "".concat(fontSize, "px"),
                fontFamily,
            ]
                .join(' ')
                .trim();
            return ctx.measureText(String(text));
        }, function (text, font) { return __spreadArray$1([text], __read(values(font)), false).join(''); });
        /**
         * 计算文本在画布中的宽度
         * @param text 待计算的文本
         * @param font 文本 css 样式
         * @returns 文本宽度
         */
        _this.measureTextWidth = function (text, font) {
            if (text === void 0) { text = ''; }
            var textMetrics = _this.measureText(text, font);
            return (textMetrics === null || textMetrics === void 0 ? void 0 : textMetrics.width) || 0;
        };
        /**
         * 计算文本在画布中的宽度 https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics
         * @param text 待计算的文本
         * @param font 文本 css 样式
         * @returns 文本高度
         */
        _this.measureTextHeight = function (text, font) {
            if (text === void 0) { text = ''; }
            var textMetrics = _this.measureText(text, font);
            if (!textMetrics) {
                return 0;
            }
            return (textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent);
        };
        /**
         * 粗略计算文本在画布中的宽度
         * @param text 待计算的文本
         * @param font 文本 css 样式
         * @returns 文本宽度
         */
        _this.measureTextWidthRoughly = function (text, font) {
            var e_1, _a;
            if (font === void 0) { font = {}; }
            var alphaWidth = _this.measureTextWidth('a', font);
            var chineseWidth = _this.measureTextWidth('蚂', font);
            var w = 0;
            if (!text) {
                return w;
            }
            try {
                // eslint-disable-next-line no-restricted-syntax
                for (var text_1 = __values(text), text_1_1 = text_1.next(); !text_1_1.done; text_1_1 = text_1.next()) {
                    var char = text_1_1.value;
                    var code = char.charCodeAt(0);
                    // /[\u0000-\u00ff]/
                    w += code >= 0 && code <= 255 ? alphaWidth : chineseWidth;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (text_1_1 && !text_1_1.done && (_a = text_1.return)) _a.call(text_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return w;
        };
        _this.dataCfg = getSafetyDataConfig(dataCfg);
        _this.options = getSafetyOptions(options);
        _this.dataSet = _this.getDataSet(_this.options);
        _this.setDebug();
        _this.initTooltip();
        _this.initGroups(dom);
        _this.bindEvents();
        _this.initInteraction();
        _this.initTheme();
        _this.initHdAdapter();
        _this.registerIcons();
        _this.setOverscrollBehavior();
        return _this;
    }
    SpreadSheet.prototype.setOverscrollBehavior = function () {
        var overscrollBehavior = this.options.interaction.overscrollBehavior;
        // 行内样式 + css 样式
        var initOverscrollBehavior = window
            .getComputedStyle(document.body)
            .getPropertyValue('overscroll-behavior');
        // 用户没有在 body 上主动设置过 overscrollBehavior，才进行更新
        var hasInitOverscrollBehavior = initOverscrollBehavior && initOverscrollBehavior !== 'auto';
        if (hasInitOverscrollBehavior) {
            this.store.set('initOverscrollBehavior', initOverscrollBehavior);
        }
        else if (overscrollBehavior) {
            document.body.style.overscrollBehavior = overscrollBehavior;
        }
    };
    SpreadSheet.prototype.restoreOverscrollBehavior = function () {
        document.body.style.overscrollBehavior =
            this.store.get('initOverscrollBehavior') || '';
    };
    SpreadSheet.prototype.setDebug = function () {
        DebuggerUtil.getInstance().setDebug(this.options.debug);
    };
    SpreadSheet.prototype.initTheme = function () {
        // When calling spreadsheet directly, there is no theme and initialization is required
        this.setThemeCfg({
            name: 'default',
        });
    };
    SpreadSheet.prototype.getMountContainer = function (dom) {
        var mountContainer = isString(dom) ? document.querySelector(dom) : dom;
        if (!mountContainer) {
            throw new Error('Target mount container is not a DOM element');
        }
        return mountContainer;
    };
    SpreadSheet.prototype.initHdAdapter = function () {
        if (this.options.hdAdapter) {
            this.hdAdapter = new HdAdapter(this);
            this.hdAdapter.init();
        }
    };
    SpreadSheet.prototype.initInteraction = function () {
        var _a, _b;
        (_b = (_a = this.interaction) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.interaction = new RootInteraction(this);
    };
    SpreadSheet.prototype.initTooltip = function () {
        var _a, _b, _c, _d;
        (_b = (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.tooltip = this.renderTooltip();
        if (!(this.tooltip instanceof BaseTooltip)) {
            // eslint-disable-next-line no-console
            console.warn("[Custom Tooltip]: ".concat((_d = (_c = this.tooltip) === null || _c === void 0 ? void 0 : _c.constructor) === null || _d === void 0 ? void 0 : _d.toString(), " should be extends from BaseTooltip"));
        }
    };
    SpreadSheet.prototype.renderTooltip = function () {
        var _a, _b;
        return ((_b = (_a = this.options.tooltip) === null || _a === void 0 ? void 0 : _a.renderTooltip) === null || _b === void 0 ? void 0 : _b.call(_a, this)) || new BaseTooltip(this);
    };
    SpreadSheet.prototype.showTooltip = function (showOptions) {
        var _a, _b;
        var content = showOptions.content, event = showOptions.event;
        var cell = this.getCell(event === null || event === void 0 ? void 0 : event.target);
        var displayContent = isFunction(content)
            ? content(cell, showOptions)
            : content;
        (_b = (_a = this.tooltip).show) === null || _b === void 0 ? void 0 : _b.call(_a, __assign(__assign({}, showOptions), { content: displayContent }));
    };
    SpreadSheet.prototype.showTooltipWithInfo = function (event, cellInfos, options) {
        var _a;
        var _b = getTooltipOptions(this, event), showTooltip = _b.showTooltip, content = _b.content;
        if (!showTooltip) {
            return;
        }
        var targetCell = this.getCell(event === null || event === void 0 ? void 0 : event.target);
        var tooltipData = (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : getTooltipData({
            spreadsheet: this,
            cellInfos: cellInfos,
            targetCell: targetCell,
            options: __assign({ enableFormat: true }, options),
        });
        this.showTooltip({
            data: tooltipData,
            position: {
                x: event.clientX,
                y: event.clientY,
            },
            options: __assign({ enterable: true }, options),
            event: event,
            content: content,
        });
    };
    SpreadSheet.prototype.hideTooltip = function () {
        var _a, _b;
        (_b = (_a = this.tooltip).hide) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    SpreadSheet.prototype.destroyTooltip = function () {
        var _a, _b;
        (_b = (_a = this.tooltip).destroy) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    SpreadSheet.prototype.registerIcons = function () {
        var customSVGIcons = this.options.customSVGIcons;
        if (isEmpty(customSVGIcons)) {
            return;
        }
        forEach(customSVGIcons, function (customSVGIcon) {
            registerIcon(customSVGIcon.name, customSVGIcon.svg);
        });
    };
    /**
     * Update data config and keep pre-sort operations
     * Group sort params kept in {@see store} and
     * Priority: group sort > advanced sort
     * @param dataCfg
     * @param reset 是否使用传入的 dataCfg 重置已保存的 dataCfg
     *
     * @example setDataCfg(dataCfg, true) 直接使用传入的 DataCfg，不再与上次数据进行合并
     */
    SpreadSheet.prototype.setDataCfg = function (dataCfg, reset) {
        this.store.set('originalDataCfg', dataCfg);
        if (reset) {
            this.dataCfg = getSafetyDataConfig(dataCfg);
        }
        else {
            this.dataCfg = getSafetyDataConfig(this.dataCfg, dataCfg);
        }
        // clear value ranger after each updated data cfg
        clearValueRangeState(this);
    };
    SpreadSheet.prototype.setOptions = function (options, reset) {
        var _a;
        this.hideTooltip();
        if (reset) {
            this.options = getSafetyOptions(options);
        }
        else {
            this.options = customMerge(this.options, options);
        }
        if (reset || ((_a = options.tooltip) === null || _a === void 0 ? void 0 : _a.renderTooltip)) {
            this.initTooltip();
        }
        this.resetHiddenColumnsDetailInfoIfNeeded();
        this.registerIcons();
    };
    /**
     * 配置都是 merge 操作, 但是隐藏列配置比较特殊, 变更时, 应该是全量覆盖, 而不应该是合并
     * https://github.com/antvis/S2/issues/2495
     */
    SpreadSheet.prototype.resetHiddenColumnsDetailInfoIfNeeded = function () {
        var _a;
        if (!isEmpty((_a = this.options.interaction) === null || _a === void 0 ? void 0 : _a.hiddenColumnFields)) {
            this.store.set('hiddenColumnsDetail', []);
        }
    };
    SpreadSheet.prototype.render = function (reloadData, options) {
        if (reloadData === void 0) { reloadData = true; }
        if (options === void 0) { options = {}; }
        // 防止表格卸载后, 再次调用 render 函数的报错
        if (!this.getCanvasElement()) {
            return;
        }
        var _a = options.reBuildDataSet, reBuildDataSet = _a === void 0 ? false : _a, _b = options.reBuildHiddenColumnsDetail, reBuildHiddenColumnsDetail = _b === void 0 ? true : _b;
        this.emit(S2Event.LAYOUT_BEFORE_RENDER);
        if (reBuildDataSet) {
            this.dataSet = this.getDataSet(this.options);
        }
        if (reloadData) {
            this.clearDrillDownData('', true);
            this.dataSet.setDataCfg(this.dataCfg);
        }
        this.buildFacet();
        if (reBuildHiddenColumnsDetail) {
            this.initHiddenColumnsDetail();
        }
        this.emit(S2Event.LAYOUT_AFTER_RENDER);
    };
    SpreadSheet.prototype.destroy = function () {
        var _a, _b, _c, _d, _e;
        this.restoreOverscrollBehavior();
        this.emit(S2Event.LAYOUT_DESTROY);
        (_a = this.facet) === null || _a === void 0 ? void 0 : _a.destroy();
        (_b = this.hdAdapter) === null || _b === void 0 ? void 0 : _b.destroy();
        (_c = this.interaction) === null || _c === void 0 ? void 0 : _c.destroy();
        (_d = this.store) === null || _d === void 0 ? void 0 : _d.clear();
        this.destroyTooltip();
        this.clearCanvasEvent();
        (_e = this.container) === null || _e === void 0 ? void 0 : _e.destroy();
        removeOffscreenCanvas();
    };
    SpreadSheet.prototype.setThemeCfg = function (themeCfg) {
        if (themeCfg === void 0) { themeCfg = {}; }
        var theme = (themeCfg === null || themeCfg === void 0 ? void 0 : themeCfg.theme) || {};
        var newTheme = getTheme(__assign(__assign({}, themeCfg), { spreadsheet: this }));
        this.theme = customMerge(newTheme, theme);
    };
    SpreadSheet.prototype.setTheme = function (theme) {
        this.theme = customMerge(this.theme, theme);
    };
    /**
     * Update pagination config which store in {@see options}
     * @param pagination
     */
    SpreadSheet.prototype.updatePagination = function (pagination) {
        this.options = customMerge(this.options, {
            pagination: pagination,
        });
        // 清空滚动进度
        this.store.set('scrollX', 0);
        this.store.set('scrollY', 0);
    };
    /**
     * 获取当前表格实际内容高度
     */
    SpreadSheet.prototype.getContentHeight = function () {
        return this.facet.getContentHeight();
    };
    /**
     * @param width
     * @param height
     * @deprecated 该方法将会在2.0被移除, 请使用 changeSheetSize 代替
     */
    SpreadSheet.prototype.changeSize = function (width, height) {
        if (width === void 0) { width = this.options.width; }
        if (height === void 0) { height = this.options.height; }
        this.changeSheetSize(width, height);
    };
    /**
     * 修改表格画布大小，不用重新加载数据
     * @param width
     * @param height
     */
    SpreadSheet.prototype.changeSheetSize = function (width, height) {
        if (width === void 0) { width = this.options.width; }
        if (height === void 0) { height = this.options.height; }
        var canvas = this.getCanvasElement();
        var containerWidth = this.container.get('width');
        var containerHeight = this.container.get('height');
        var isSizeChanged = width !== containerWidth || height !== containerHeight;
        if (!isSizeChanged || !canvas) {
            return;
        }
        this.options = customMerge(this.options, { width: width, height: height });
        // resize the canvas
        this.container.changeSize(width, height);
    };
    /**
     * 获取 <canvas/> HTML元素
     */
    SpreadSheet.prototype.getCanvasElement = function () {
        return this.container.get('el');
    };
    SpreadSheet.prototype.getLayoutWidthType = function () {
        return this.options.style.layoutWidthType;
    };
    SpreadSheet.prototype.getRowNodes = function (level) {
        if (level === void 0) { level = -1; }
        if (level === -1) {
            return this.facet.layoutResult.rowNodes;
        }
        return this.facet.layoutResult.rowNodes.filter(function (node) { return node.level === level; });
    };
    SpreadSheet.prototype.getRowLeafNodes = function () {
        var _a;
        return ((_a = this.facet) === null || _a === void 0 ? void 0 : _a.layoutResult.rowLeafNodes) || [];
    };
    /**
     * get columnNode in levels,
     * @param level -1 = get all
     */
    SpreadSheet.prototype.getColumnNodes = function (level) {
        var _a;
        if (level === void 0) { level = -1; }
        var colNodes = ((_a = this.facet) === null || _a === void 0 ? void 0 : _a.layoutResult.colNodes) || [];
        if (level === -1) {
            return colNodes;
        }
        return colNodes.filter(function (node) { return node.level === level; });
    };
    SpreadSheet.prototype.getColumnLeafNodes = function () {
        var _a;
        return ((_a = this.facet) === null || _a === void 0 ? void 0 : _a.layoutResult.colLeafNodes) || [];
    };
    /**
     * Update scroll's offset, the value can be undefined,
     * indicate not update current value
     * @param offsetConfig
     * default offsetX(horizontal scroll need animation)
     * but offsetY(vertical scroll don't need animation)
     */
    SpreadSheet.prototype.updateScrollOffset = function (offsetConfig) {
        var config = {
            offsetX: {
                value: undefined,
                animate: false,
            },
            offsetY: {
                value: undefined,
                animate: false,
            },
            rowHeaderOffsetX: {
                value: undefined,
                animate: false,
            },
        };
        this.facet.updateScrollOffset(customMerge(config, offsetConfig));
    };
    SpreadSheet.prototype.getTooltipDataItemMappingCallback = function () {
        var _a;
        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.mappingDisplayDataItem;
    };
    SpreadSheet.prototype.isCellType = function (cell) {
        return cell instanceof BaseCell;
    };
    // 获取当前cell实例
    SpreadSheet.prototype.getCell = function (target) {
        var _a;
        var parent = target;
        // 一直索引到g顶层的canvas来检查是否在指定的cell中
        while (parent && !(parent instanceof Canvas)) {
            if (this.isCellType(parent)) {
                // 在单元格中，返回true
                return parent;
            }
            parent = (_a = parent.get) === null || _a === void 0 ? void 0 : _a.call(parent, 'parent');
        }
        return null;
    };
    // 获取当前cell类型
    SpreadSheet.prototype.getCellType = function (target) {
        var cell = this.getCell(target);
        return cell === null || cell === void 0 ? void 0 : cell.cellType;
    };
    /**
     * get total's config by dimension id
     * @param dimension unique dimension id
     */
    SpreadSheet.prototype.getTotalsConfig = function (dimension) {
        var totals = this.options.totals;
        var rows = this.dataSet.fields.rows;
        var totalConfig = get(totals, includes(rows, dimension) ? 'row' : 'col', {});
        var showSubTotals = totalConfig.showSubTotals &&
            includes(totalConfig.subTotalsDimensions, dimension)
            ? totalConfig.showSubTotals
            : false;
        return __assign(__assign({ label: i18n('总计'), subLabel: i18n('小计'), totalsGroupDimensions: [], subTotalsGroupDimensions: [] }, totalConfig), { showSubTotals: showSubTotals });
    };
    /**
     * Create all related groups, contains:
     * 1. container -- base canvas group
     * 2. backgroundGroup
     * 3. panelGroup -- main facet group belongs to
     * 4. foregroundGroup
     * @param dom
     * @private
     */
    SpreadSheet.prototype.initGroups = function (dom) {
        var _a = this.options, width = _a.width, height = _a.height, supportCSSTransform = _a.supportCSSTransform, devicePixelRatio = _a.devicePixelRatio;
        // base canvas group
        this.container = new Canvas({
            container: this.getMountContainer(dom),
            width: width,
            height: height,
            localRefresh: false,
            supportCSSTransform: supportCSSTransform,
            pixelRatio: Math.max(devicePixelRatio, MIN_DEVICE_PIXEL_RATIO),
        });
        // the main three layer groups
        this.backgroundGroup = this.container.addGroup({
            name: KEY_GROUP_BACK_GROUND,
            zIndex: BACK_GROUND_GROUP_CONTAINER_Z_INDEX,
        });
        this.panelGroup = this.container.addGroup({
            name: KEY_GROUP_PANEL_GROUND,
            zIndex: PANEL_GROUP_GROUP_CONTAINER_Z_INDEX,
        });
        this.foregroundGroup = this.container.addGroup({
            name: KEY_GROUP_FORE_GROUND,
            zIndex: FRONT_GROUND_GROUP_CONTAINER_Z_INDEX,
        });
        this.initPanelGroupChildren();
        this.updateContainerStyle();
    };
    // canvas 需要设置为 块级元素, 不然和父元素有 5px 的高度差
    SpreadSheet.prototype.updateContainerStyle = function () {
        var canvas = this.getCanvasElement();
        if (canvas) {
            canvas.style.display = 'block';
        }
    };
    SpreadSheet.prototype.initPanelGroupChildren = function () {
        this.panelScrollGroup = new PanelScrollGroup({
            name: KEY_GROUP_PANEL_SCROLL,
            zIndex: PANEL_GROUP_SCROLL_GROUP_Z_INDEX,
            s2: this,
        });
        this.panelGroup.add(this.panelScrollGroup);
    };
    SpreadSheet.prototype.getInitColumnLeafNodes = function () {
        return this.store.get('initColumnLeafNodes', []);
    };
    /**
     * @deprecated 已废弃, 请使用 clearInitColumnLeafNodes
     */
    SpreadSheet.prototype.clearColumnLeafNodes = function () {
        this.clearInitColumnLeafNodes();
    };
    SpreadSheet.prototype.clearInitColumnLeafNodes = function () {
        this.store.set('initColumnLeafNodes', undefined);
    };
    SpreadSheet.prototype.clearCanvasEvent = function () {
        var _this = this;
        var canvasEvents = this.getEvents();
        forIn(canvasEvents, function (_, event) {
            _this.off(event);
        });
    };
    SpreadSheet.prototype.updateSortMethodMap = function (nodeId, sortMethod, replace) {
        var _a;
        if (replace === void 0) { replace = false; }
        var lastSortMethodMap = !replace ? this.store.get('sortMethodMap') : null;
        this.store.set('sortMethodMap', __assign(__assign({}, lastSortMethodMap), (_a = {}, _a[nodeId] = sortMethod, _a)));
    };
    SpreadSheet.prototype.getMenuDefaultSelectedKeys = function (nodeId) {
        var sortMethodMap = this.store.get('sortMethodMap');
        var selectedSortMethod = get(sortMethodMap, nodeId);
        return selectedSortMethod ? [selectedSortMethod] : [];
    };
    return SpreadSheet;
}(EventEmitter));

var PivotSheet = /** @class */ (function (_super) {
    __extends(PivotSheet, _super);
    function PivotSheet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PivotSheet.prototype.getDataSet = function (options) {
        var dataSet = options.dataSet, hierarchyType = options.hierarchyType;
        if (dataSet) {
            return dataSet(this);
        }
        var realDataSet = hierarchyType === 'customTree'
            ? new CustomTreePivotDataSet(this)
            : new PivotDataSet(this);
        return realDataSet;
    };
    PivotSheet.prototype.getContentHeight = function () {
        return this.facet.getContentHeight();
    };
    /**
     * Check if is pivot mode
     */
    PivotSheet.prototype.isPivotMode = function () {
        return true;
    };
    /**
     * Check if is pivot mode
     */
    PivotSheet.prototype.isTableMode = function () {
        return false;
    };
    /**
     * tree type must be in strategy mode
     */
    PivotSheet.prototype.isHierarchyTreeType = function () {
        var type = this.options.hierarchyType;
        // custom tree and tree!!!
        return type === 'tree' || type === 'customTree';
    };
    /**
     * Check whether scroll contains row header
     * For now contains row header in ListSheet mode by default
     */
    PivotSheet.prototype.isScrollContainsRowHeader = function () {
        return !this.isFrozenRowHeader();
    };
    /**
     * Scroll Freeze Row Header
     */
    PivotSheet.prototype.isFrozenRowHeader = function () {
        var _a;
        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.frozenRowHeader;
    };
    /**
     * Check if the value is in the columns
     */
    PivotSheet.prototype.isValueInCols = function () {
        return this.dataSet.fields.valueInCols;
    };
    PivotSheet.prototype.clearDrillDownData = function (rowNodeId, preventRender) {
        if (this.dataSet instanceof PivotDataSet) {
            var cleaned = this.dataSet.clearDrillDownData(rowNodeId);
            if (cleaned && !preventRender) {
                // 重置当前交互
                this.interaction.reset();
                this.render(false);
            }
        }
    };
    PivotSheet.prototype.getFacetCfgFromDataSetAndOptions = function () {
        var _this = this;
        var _a = this.dataSet, fields = _a.fields, meta = _a.meta;
        var _b = this.options, style = _b.style, dataCell = _b.dataCell;
        // 默认单元格实现
        var defaultCell = function (facet) { return new DataCell(facet, _this); };
        return __assign(__assign(__assign(__assign({}, this.options), fields), style), { meta: meta, spreadsheet: this, dataSet: this.dataSet, dataCell: dataCell !== null && dataCell !== void 0 ? dataCell : defaultCell });
    };
    PivotSheet.prototype.buildFacet = function () {
        var _a;
        var facetCfg = this.getFacetCfgFromDataSetAndOptions();
        (_a = this.facet) === null || _a === void 0 ? void 0 : _a.destroy();
        this.facet = new PivotFacet(facetCfg);
        this.facet.render();
    };
    PivotSheet.prototype.bindEvents = function () {
        this.off(S2Event.ROW_CELL_COLLAPSE_TREE_ROWS);
        this.off(S2Event.LAYOUT_TREE_ROWS_COLLAPSE_ALL);
        this.on(S2Event.ROW_CELL_COLLAPSE_TREE_ROWS, this.handleRowCellCollapseTreeRows);
        // 收起、展开按钮
        this.on(S2Event.LAYOUT_TREE_ROWS_COLLAPSE_ALL, this.handleTreeRowsCollapseAll);
    };
    PivotSheet.prototype.handleRowCellCollapseTreeRows = function (data) {
        var _a;
        var id = data.id, isCollapsed = data.isCollapsed;
        var options = {
            style: {
                collapsedRows: (_a = {},
                    _a[id] = isCollapsed,
                    _a),
            },
        };
        this.emit(S2Event.LAYOUT_COLLAPSE_ROWS, {
            collapsedRows: options.style.collapsedRows,
            meta: data === null || data === void 0 ? void 0 : data.node,
        });
        this.setOptions(options);
        this.render(false);
        this.emit(S2Event.LAYOUT_AFTER_COLLAPSE_ROWS, {
            collapsedRows: options.style.collapsedRows,
            meta: data === null || data === void 0 ? void 0 : data.node,
        });
    };
    PivotSheet.prototype.handleTreeRowsCollapseAll = function (isCollapsed) {
        var options = {
            style: {
                hierarchyCollapse: !isCollapsed,
                collapsedRows: null,
                rowExpandDepth: null,
            },
        };
        this.setOptions(options);
        this.render(false);
    };
    PivotSheet.prototype.groupSortByMethod = function (sortMethod, meta) {
        var _a = this.dataCfg.fields, rows = _a.rows, columns = _a.columns;
        var ifHideMeasureColumn = this.options.style.colCfg.hideMeasureColumn;
        var sortFieldId = this.isValueInCols()
            ? last(rows)
            : last(columns);
        var query = meta.query, value = meta.value;
        var sortQuery = clone$1(query);
        var sortValue = value;
        // 数值置于列头且隐藏了指标列头的情况, 会默认取第一个指标做组内排序, 需要还原指标列的query, 所以多指标时请不要这么用……
        if (ifHideMeasureColumn && this.isValueInCols()) {
            sortValue = this.dataSet.fields.values[0];
            sortQuery[EXTRA_FIELD] = sortValue;
        }
        var sortParam = {
            sortFieldId: sortFieldId,
            sortMethod: sortMethod,
            sortByMeasure: sortValue,
            query: sortQuery,
        };
        var prevSortParams = this.dataCfg.sortParams.filter(function (item) { return (item === null || item === void 0 ? void 0 : item.sortFieldId) !== sortFieldId; });
        this.updateSortMethodMap(meta.id, sortMethod, true);
        var sortParams = __spreadArray$1(__spreadArray$1([], __read(prevSortParams), false), [sortParam], false);
        // 触发排序事件
        this.emit(S2Event.RANGE_SORT, sortParams);
        this.setDataCfg(__assign(__assign({}, this.dataCfg), { sortParams: sortParams }));
        this.render();
    };
    PivotSheet.prototype.handleGroupSort = function (event, meta) {
        var _this = this;
        event.stopPropagation();
        this.interaction.addIntercepts([InterceptType.HOVER]);
        var defaultSelectedKeys = this.getMenuDefaultSelectedKeys(meta === null || meta === void 0 ? void 0 : meta.id);
        var operator = {
            onClick: function (_a) {
                var key = _a.key;
                var sortMethod = key;
                _this.groupSortByMethod(sortMethod, meta);
                _this.emit(S2Event.RANGE_SORTED, event);
            },
            menus: getTooltipOperatorSortMenus(),
            defaultSelectedKeys: defaultSelectedKeys,
        };
        this.showTooltipWithInfo(event, [], {
            operator: operator,
            onlyMenu: true,
            // 确保 tooltip 内容更新 https://github.com/antvis/S2/issues/1716
            forceRender: true,
        });
    };
    PivotSheet.prototype.initPanelGroupChildren = function () {
        _super.prototype.initPanelGroupChildren.call(this);
        var commonParams = {
            zIndex: PANEL_GROUP_FROZEN_GROUP_Z_INDEX,
            s2: this,
        };
        this.frozenRowGroup = new FrozenGroup(__assign({ KEY_GROUP_PANEL_FROZEN_ROW: KEY_GROUP_PANEL_FROZEN_ROW }, commonParams));
        this.panelGroup.add(this.frozenRowGroup);
    };
    PivotSheet.prototype.isCellType = function (cell) {
        return cell instanceof BaseCell && !(cell instanceof SeriesNumberCell);
    };
    return PivotSheet;
}(SpreadSheet));

var TableSheet = /** @class */ (function (_super) {
    __extends(TableSheet, _super);
    function TableSheet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // TODO: 好迷的写法, 拿到 key 又硬要写成 {key: key} 然后又解构一次, 不确定有没有被外面调用, 暂时不动
        _this.onSortTooltipClick = function (_a, meta) {
            var key = _a.key;
            var field = meta.field;
            var sortParam = {
                sortFieldId: field,
                sortMethod: key,
            };
            _this.updateSortMethodMap(meta.id, key);
            // 触发排序事件
            _this.emit(S2Event.RANGE_SORT, [sortParam]);
        };
        return _this;
    }
    TableSheet.prototype.getDataSet = function (options) {
        var dataSet = options.dataSet;
        if (dataSet) {
            return dataSet(this);
        }
        return new TableDataSet(this);
    };
    /**
     * Check if is pivot mode
     */
    TableSheet.prototype.isPivotMode = function () {
        return false;
    };
    /**
     * Check if is pivot mode
     */
    TableSheet.prototype.isTableMode = function () {
        return true;
    };
    /**
     * tree type must be in strategy mode
     */
    TableSheet.prototype.isHierarchyTreeType = function () {
        return false;
    };
    /**
     * Check whether scroll contains row header
     * For now contains row header in ListSheet mode by default
     */
    TableSheet.prototype.isScrollContainsRowHeader = function () {
        return false;
    };
    /**
     * Scroll Freeze Row Header
     */
    TableSheet.prototype.isFrozenRowHeader = function () {
        return false;
    };
    TableSheet.prototype.clearDrillDownData = function () { };
    /**
     * Check if the value is in the columns
     */
    TableSheet.prototype.isValueInCols = function () {
        return false;
    };
    TableSheet.prototype.bindEvents = function () { };
    TableSheet.prototype.initPanelGroupChildren = function () {
        var _a;
        var _this = this;
        _super.prototype.initPanelGroupChildren.call(this);
        var commonParams = {
            zIndex: PANEL_GROUP_FROZEN_GROUP_Z_INDEX,
            s2: this,
        };
        _a = __read([
            KEY_GROUP_PANEL_FROZEN_ROW,
            KEY_GROUP_PANEL_FROZEN_COL,
            KEY_GROUP_PANEL_FROZEN_TRAILING_ROW,
            KEY_GROUP_PANEL_FROZEN_TRAILING_COL,
            KEY_GROUP_PANEL_FROZEN_TOP,
            KEY_GROUP_PANEL_FROZEN_BOTTOM,
        ].map(function (name) {
            var g = new FrozenGroup(__assign({ name: name }, commonParams));
            _this.panelGroup.add(g);
            return g;
        }), 6), this.frozenRowGroup = _a[0], this.frozenColGroup = _a[1], this.frozenTrailingRowGroup = _a[2], this.frozenTrailingColGroup = _a[3], this.frozenTopGroup = _a[4], this.frozenBottomGroup = _a[5];
    };
    TableSheet.prototype.getFacetCfgFromDataSetAndOptions = function () {
        var _this = this;
        var _a = this.dataSet, fields = _a.fields, meta = _a.meta;
        var _b = this.options, style = _b.style, dataCell = _b.dataCell;
        // 默认单元格实现
        var defaultCell = function (facet) {
            if (_this.options.showSeriesNumber && facet.colIndex === 0) {
                return new TableSeriesCell(facet, _this);
            }
            return new TableDataCell(facet, _this);
        };
        return __assign(__assign(__assign(__assign({}, this.options), fields), style), { meta: meta, spreadsheet: this, dataSet: this.dataSet, dataCell: dataCell !== null && dataCell !== void 0 ? dataCell : defaultCell });
    };
    TableSheet.prototype.buildFacet = function () {
        var _a;
        var facetCfg = this.getFacetCfgFromDataSetAndOptions();
        (_a = this.facet) === null || _a === void 0 ? void 0 : _a.destroy();
        this.facet = new TableFacet(facetCfg);
        this.facet.render();
    };
    TableSheet.prototype.clearFrozenGroups = function () {
        this.frozenRowGroup.set('children', []);
        this.frozenColGroup.set('children', []);
        this.frozenTrailingRowGroup.set('children', []);
        this.frozenTrailingColGroup.set('children', []);
        this.frozenTopGroup.set('children', []);
        this.frozenBottomGroup.set('children', []);
    };
    TableSheet.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.clearFrozenGroups();
        this.off(S2Event.RANGE_SORT);
        this.off(S2Event.RANGE_FILTER);
    };
    TableSheet.prototype.handleGroupSort = function (event, meta) {
        var _this = this;
        event.stopPropagation();
        this.interaction.addIntercepts([InterceptType.HOVER]);
        var defaultSelectedKeys = this.getMenuDefaultSelectedKeys(meta === null || meta === void 0 ? void 0 : meta.id);
        var operator = {
            onClick: function (_a) {
                var key = _a.key;
                var sortMethod = key;
                _this.onSortTooltipClick({ key: sortMethod }, meta);
            },
            menus: getTooltipOperatorTableSortMenus(),
            defaultSelectedKeys: defaultSelectedKeys,
        };
        this.showTooltipWithInfo(event, [], {
            operator: operator,
            onlyMenu: true,
            forceRender: true,
        });
    };
    return TableSheet;
}(SpreadSheet));

var version = '@antv/s2-v1.54.5';

export { Aggregation, BACK_GROUND_GROUP_CONTAINER_Z_INDEX, BRUSH_AUTO_SCROLL_INITIAL_CONFIG, BaseBrushSelection, BaseCell, BaseDataSet, BaseEvent, BaseRowCell, BaseTooltip, CORNER_MAX_WIDTH_RATIO, CellBorderPosition, CellTypes, ColBrushSelection, ColCell, ColHeader, CopyMIMEType, CopyType, CornerCell, CornerCellClick, CornerHeader, CornerNodeType, CustomTreePivotDataSet, DEBUG_HEADER_LAYOUT, DEBUG_TRANSFORM_DATA, DEBUG_VIEW_RENDER, DEFAULT_DATA_CONFIG, DEFAULT_FONT_COLOR, DEFAULT_OPTIONS, DEFAULT_PAGE_INDEX, DEFAULT_STYLE, DEFAULT_TREE_ROW_WIDTH, DEFAULT_VALUE_RANGES, DataCell, DataCellBrushSelection, DataCellClick, DataCellMultiSelection, DebuggerUtil, ELLIPSIS_SYMBOL, EMPTY_EXTRA_FIELD_PLACEHOLDER, EMPTY_FIELD_VALUE, EMPTY_PLACEHOLDER, EXTRA_COLUMN_FIELD, EXTRA_FIELD, EventController, FONT_FAMILY, FRONT_GROUND_GROUP_BRUSH_SELECTION_Z_INDEX, FRONT_GROUND_GROUP_CONTAINER_Z_INDEX, FRONT_GROUND_GROUP_FROZEN_Z_INDEX, FRONT_GROUND_GROUP_RESIZE_AREA_Z_INDEX, FRONT_GROUND_GROUP_SCROLL_Z_INDEX, Frame, FrozenCellGroupMap, FrozenCellType, FrozenGroup$1 as FrozenGroup, GraphEvent as GEvent, GuiIcon, HORIZONTAL_RESIZE_AREA_KEY_PRE, HOVER_FOCUS_DURATION, HeaderCell, Hierarchy, HoverEvent, ID_SEPARATOR, IMAGE, INTERACTION_STATE_INFO_KEY, INTERVAL_BAR_HEIGHT, InteractionBrushSelectionStage, InteractionEvent, InteractionKeyboardKey, InteractionName, InteractionStateName, InterceptType, KEY_COL_REAL_WIDTH_INFO, KEY_GROUP_BACK_GROUND, KEY_GROUP_COL_FROZEN, KEY_GROUP_COL_FROZEN_TRAILING, KEY_GROUP_COL_HORIZONTAL_RESIZE_AREA, KEY_GROUP_COL_RESIZE_AREA, KEY_GROUP_COL_SCROLL, KEY_GROUP_CORNER_RESIZE_AREA, KEY_GROUP_FORE_GROUND, KEY_GROUP_FROZEN_COL_RESIZE_AREA, KEY_GROUP_FROZEN_ROW_RESIZE_AREA, KEY_GROUP_FROZEN_SPLIT_LINE, KEY_GROUP_GRID_GROUP, KEY_GROUP_MERGED_CELLS, KEY_GROUP_PANEL_FROZEN_BOTTOM, KEY_GROUP_PANEL_FROZEN_COL, KEY_GROUP_PANEL_FROZEN_ROW, KEY_GROUP_PANEL_FROZEN_TOP, KEY_GROUP_PANEL_FROZEN_TRAILING_COL, KEY_GROUP_PANEL_FROZEN_TRAILING_ROW, KEY_GROUP_PANEL_GROUND, KEY_GROUP_PANEL_SCROLL, KEY_GROUP_ROW_HEADER_FROZEN, KEY_GROUP_ROW_INDEX_RESIZE_AREA, KEY_GROUP_ROW_RESIZE_AREA, KEY_GROUP_ROW_SCROLL, KEY_SERIES_NUMBER_NODE, LAYOUT_SAMPLE_COUNT, LayoutWidthTypes, MIN_CELL_HEIGHT, MIN_CELL_WIDTH, MIN_DEVICE_PIXEL_RATIO, MULTI_VALUE, MergedCell, MergedCellClick, MergedCellConvertTempMergedCells, MiniChartTypes, Node$1 as Node, ORIGIN_FIELD, OriginEventType, PADDING_DOWN, PADDING_LEFT, PADDING_RIGHT, PADDING_TOP, PALETTE_MAP, PANEL_GROUP_FROZEN_GROUP_Z_INDEX, PANEL_GROUP_GROUP_CONTAINER_Z_INDEX, PANEL_GROUP_HOVER_BOX_GROUP_Z_INDEX, PANEL_GROUP_SCROLL_GROUP_Z_INDEX, PRECISION, PivotDataSet, PivotRowHeader, PivotSheet, QueryDataType, RESIZE_END_GUIDE_LINE_ID, RESIZE_MASK_ID, RESIZE_START_GUIDE_LINE_ID, REVERSE_FONT_COLOR, ROOT_BEGINNING_REGEX, ROOT_ID, RangeSelection, ResizeAreaEffect, ResizeDirectionType, ResizeType, RootInteraction, RowBrushSelection, RowCell, RowColumnClick, RowColumnResize, RowHeader, RowTextClick, S2Event, S2_PREFIX_CLS, SERIES_NUMBER_FIELD, SHAPE_ATTRS_MAP, SHAPE_STYLE_MAP, SQUARE_LINE_CAP, ScrollDirection, ScrollDirectionRowIndexDiff, ScrollbarPositionType, SelectedCellMove, SeriesNumberCell, SeriesNumberHeader, SortMethodType, SpreadSheet, Store, TABLE_COL_HORIZONTAL_RESIZE_AREA_KEY, TOOLTIP_CONTAINER_CLS, TOOLTIP_CONTAINER_HIDE_CLS, TOOLTIP_CONTAINER_SHOW_CLS, TOOLTIP_OPERATION_PREFIX_CLS, TOOLTIP_POSITION_OFFSET, TOOLTIP_PREFIX_CLS, TOTAL_VALUE, TableColCell, TableCornerCell, TableDataCell, TableDataSet, TableSeriesCell, TableSheet, VALUE_FIELD, VALUE_RANGES_KEY, adjustColHeaderScrollingTextPosition, adjustColHeaderScrollingViewport, afterSelectDataCells, auto, buildTableHierarchy, checkIsLinkField, clearState, convertString, copyData, copyToClipboard, copyToClipboardByClipboard, copyToClipboardByExecCommand, customMerge, differenceTempMergedCells, download, drawBar, drawBullet, drawInterval, drawLine, drawObjectText, extendLocale, generateId, generatePalette, generateStandardColors, getActiveCellsInfo, getActiveHoverRowColCells, getAutoAdjustPosition, getBaseCellData, getBorderPositionAndStyle, getBulletRangeColor, getCellMeta, getCellWidth, getCellsTooltipData, getClassNameWithPrefix, getColHeaderByCellId, getContentArea, getContentAreaForMultiData, getCopyData, getDataByRowData, getDataCellId, getDescription, getEllipsisText, getEllipsisTextInner, getEmptyPlaceholder, getFieldFormatter, getFieldList, getFriendlyVal, getHeadInfo, getIcon, getInteractionCells, getInteractionCellsBySelectedCells, getInvisibleInfo, getLang, getListItem, getLocale, getMaxTextWidth, getMergedCellInstance, getMergedQuery, getNextEdge, getPalette, getPolygonPoints, getRangeIndex, getRectangleEdges, getRowCellForSelectedCell, getRowHeaderByCellId, getSafetyDataConfig, getSafetyOptions, getScrollOffsetForCol, getScrollOffsetForRow, getSelectedCellIndexes, getSelectedCellsData, getSelectedCellsMeta, getSelectedData, getSortByMeasureValues, getSortTypeIcon, getSortedPivotMeta, getSummaries, getSummaryName, getTempMergedCell, getTextAndFollowingIconPosition, getTextAreaRange, getTextPosition, getTheme, getTooltipData, getTooltipDefaultOptions, getTooltipDetailList, getTooltipOperatorHiddenColumnsMenu, getTooltipOperatorSortMenus, getTooltipOperatorTableSortMenus, getTooltipOperatorTrendMenu, getTooltipOptions, getTooltipOptionsByCellType, getTooltipVisibleOperator, getValidFrozenOptions, getVerticalPosition, getVisibleInfo, handleDataItem, handleSortAction, i18n, includeCell, isAscSort, isDataCell, isDescSort, isIPhoneX, isMobile, isMouseEventWithMeta, isMultiSelectionKey, isUnchangedValue, isUpDataValue, isWindows, isZeroOrEmptyValue, keyEqualTo, measureTextWidth, measureTextWidthRoughly, mergeCell, mergeCellInfo, mergeTempMergedCell, processCopyData, processSort, registerIcon, registerTransformer, removeUnmergedCellsInfo, renderCircle, renderIcon, renderLine, renderMiniChart, renderPolygon, renderPolyline, renderRect, renderText, renderTreeIcon, safeJsonParse, scale, selectCells, setLang, setState, setTooltipContainerStyle, shouldReverseFontColor, shouldUpdateBySelectedCellsHighlight, sortAction, sortByCustom, sortByFunc, sortByMethod, transformRatioToPercent, unique, unmergeCell, updateAllColHeaderCellState, updateBySelectedCellsHighlight, updateCurrentCellState, updateCurrentColumnCellState, updateCurrentRowCellState, updateFillOpacity, updateMergedCells, updateShapeAttr, updateStrokeOpacity, verifyTheElementInTooltip, version };
//# sourceMappingURL=index.js.map
