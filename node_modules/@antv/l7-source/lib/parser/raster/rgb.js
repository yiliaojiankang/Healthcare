var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/parser/raster/rgb.ts
var rgb_exports = {};
__export(rgb_exports, {
  default: () => rasterRgb
});
module.exports = __toCommonJS(rgb_exports);
var import_operationSchema = require("../../utils/bandOperation/operationSchema");
function rasterRgb(data, cfg) {
  const { extent, width, height, ...options } = cfg;
  if (data.length < 3) {
    console.warn("RGB解析需要三个波段的数据");
  }
  const [r, g, b] = options.bands || [0, 1, 2];
  const bandsData = [data[r], data[g], data[b]];
  const rgbdata = [];
  const [low, high] = (options == null ? void 0 : options.countCut) || [2, 98];
  const minMaxR = (options == null ? void 0 : options.RMinMax) || (0, import_operationSchema.percentile)(bandsData[0], low, high);
  const minMaxG = (options == null ? void 0 : options.GMinMax) || (0, import_operationSchema.percentile)(bandsData[1], low, high);
  const minMaxB = (options == null ? void 0 : options.BMinMax) || (0, import_operationSchema.percentile)(bandsData[2], low, high);
  for (let i = 0; i < bandsData[0].length; i++) {
    rgbdata.push(Math.max(0, bandsData[0][i] - minMaxR[0]));
    rgbdata.push(Math.max(0, bandsData[1][i] - minMaxG[0]));
    rgbdata.push(Math.max(0, bandsData[2][i] - minMaxB[0]));
  }
  const resultData = {
    _id: 1,
    dataArray: [
      {
        _id: 1,
        data: rgbdata,
        width,
        height,
        rMinMax: minMaxR,
        gMinMax: minMaxG,
        bMinMax: minMaxB,
        ...options,
        coordinates: [
          [extent[0], extent[1]],
          [extent[2], extent[3]]
        ]
      }
    ]
  };
  return resultData;
}
