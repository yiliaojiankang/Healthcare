import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["extent", "width", "height"];
import { percentile } from "../../utils/bandOperation/operationSchema";

/**
 * @description: 栅格数据解析
 */

export default function rasterRgb(data, cfg) {
  var extent = cfg.extent,
    width = cfg.width,
    height = cfg.height,
    options = _objectWithoutProperties(cfg, _excluded);
  if (data.length < 3) {
    console.warn('RGB解析需要三个波段的数据');
  }
  var _ref = options.bands || [0, 1, 2],
    _ref2 = _slicedToArray(_ref, 3),
    r = _ref2[0],
    g = _ref2[1],
    b = _ref2[2];
  var bandsData = [data[r], data[g], data[b]];
  var rgbdata = [];
  var _ref3 = (options === null || options === void 0 ? void 0 : options.countCut) || [2, 98],
    _ref4 = _slicedToArray(_ref3, 2),
    low = _ref4[0],
    high = _ref4[1];
  var minMaxR = (options === null || options === void 0 ? void 0 : options.RMinMax) || percentile(bandsData[0], low, high);
  var minMaxG = (options === null || options === void 0 ? void 0 : options.GMinMax) || percentile(bandsData[1], low, high);
  var minMaxB = (options === null || options === void 0 ? void 0 : options.BMinMax) || percentile(bandsData[2], low, high);
  for (var i = 0; i < bandsData[0].length; i++) {
    rgbdata.push(Math.max(0, bandsData[0][i] - minMaxR[0]));
    rgbdata.push(Math.max(0, bandsData[1][i] - minMaxG[0]));
    rgbdata.push(Math.max(0, bandsData[2][i] - minMaxB[0]));
  }
  var resultData = {
    _id: 1,
    dataArray: [_objectSpread(_objectSpread({
      _id: 1,
      data: rgbdata,
      width: width,
      height: height,
      rMinMax: minMaxR,
      gMinMax: minMaxG,
      bMinMax: minMaxB
    }, options), {}, {
      coordinates: [[extent[0], extent[1]], [extent[2], extent[3]]]
    })]
  };
  return resultData;
}