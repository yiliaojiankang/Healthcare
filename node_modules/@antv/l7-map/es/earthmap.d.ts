import Camera from './camera';
import './css/l7.css';
import type { LngLatLike } from './geo/lng_lat';
import LngLat from './geo/lng_lat';
import type { LngLatBoundsLike } from './geo/lng_lat_bounds';
import LngLatBounds from './geo/lng_lat_bounds';
import type { PointLike } from './geo/point';
import Point from './geo/point';
import type BoxZoomHandler from './handler/box_zoom';
import HandlerManager from './handler/handler_manager';
import type KeyboardHandler from './handler/keyboard';
import type ScrollZoomHandler from './handler/scroll_zoom';
import type DoubleClickZoomHandler from './handler/shim/dblclick_zoom';
import type DragPanHandler from './handler/shim/drag_pan';
import type DragRotateHandler from './handler/shim/drag_rotate';
import type TouchZoomRotateHandler from './handler/shim/touch_zoom_rotate';
import type { TouchPitchHandler } from './handler/touch';
import type { IMapOptions } from './interface';
import type { TaskID } from './utils/task_queue';
type CallBack = (_: number) => void;
export declare class EarthMap extends Camera {
    doubleClickZoom: DoubleClickZoomHandler;
    dragRotate: DragRotateHandler;
    dragPan: DragPanHandler;
    touchZoomRotate: TouchZoomRotateHandler;
    scrollZoom: ScrollZoomHandler;
    keyboard: KeyboardHandler;
    touchPitch: TouchPitchHandler;
    boxZoom: BoxZoomHandler;
    handlers: HandlerManager;
    private container;
    private canvas;
    private canvasContainer;
    private renderTaskQueue;
    private frame;
    private trackResize;
    constructor(options: Partial<IMapOptions>);
    resize(eventData?: any): this;
    getContainer(): HTMLElement;
    getCanvas(): HTMLCanvasElement;
    getCanvasContainer(): HTMLElement;
    project(lngLat: LngLatLike): Point;
    unproject(point: PointLike): LngLat;
    getBounds(): LngLatBounds;
    getMaxBounds(): LngLatBounds | null;
    setMaxBounds(bounds: LngLatBoundsLike): void;
    setStyle(style: any): void;
    setMinZoom(minZoom?: number): this;
    getMinZoom(): number;
    setMaxZoom(maxZoom?: number): this;
    getMaxZoom(): number;
    setMinPitch(minPitch?: number): this;
    getMinPitch(): number;
    setMaxPitch(maxPitch?: number): this;
    getMaxPitch(): number;
    getRenderWorldCopies(): boolean;
    setRenderWorldCopies(renderWorldCopies?: boolean): void;
    remove(): void;
    requestRenderFrame(cb: CallBack): TaskID;
    cancelRenderFrame(id: TaskID): void;
    triggerRepaint(): void;
    update(time?: number): void;
    private initContainer;
    private containerDimensions;
    private resizeCanvas;
    private onWindowOnline;
    private onWindowResize;
}
export {};
