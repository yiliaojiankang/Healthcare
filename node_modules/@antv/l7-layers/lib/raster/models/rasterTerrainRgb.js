"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _BaseModel2 = _interopRequireDefault(require("../../core/BaseModel"));
var _triangulation = require("../../core/triangulation");
var _CommonStyleAttribute = require("../../core/CommonStyleAttribute");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/* babel-plugin-inline-import '../shaders/terrain/terrain_rgb_frag.glsl' */
var Raster_terrainFrag = "uniform sampler2D u_texture;\nuniform sampler2D u_colorTexture;\n\nlayout(std140) uniform commonUniforms {\n vec4 u_unpack;\n vec2 u_domain;\n float u_opacity;\n float u_noDataValue;\n float u_clampLow;\n float u_clampHigh;\n};\n\nin vec2 v_texCoord;\nout vec4 outputColor;\n\n\nfloat getElevation(vec2 coord, float bias) {\n    // Convert encoded elevation value to meters\n    vec4 data =  texture(SAMPLER_2D(u_texture), coord,bias) * 255.0;\n    data.a = -1.0;\n    return dot(data, u_unpack);\n}\n\nvec4 getColor(float value) {\n   float normalisedValue =(value- u_domain[0]) / (u_domain[1] - u_domain[0]);\n    vec2 coord = vec2(normalisedValue, 0);\n    return  texture(SAMPLER_2D(u_colorTexture), coord);\n}\n\nvoid main() {\n  float value = getElevation(v_texCoord,0.0);\n  if (value == u_noDataValue) {\n    outputColor = vec4(0.0, 0, 0, 0.0);\n  } else if ((u_clampLow < 0.5 && value < u_domain[0]) || (u_clampHigh < 0.5 && value > u_domain[1])) {\n     outputColor = vec4(0.0, 0, 0, 0.0);\n  } else {\n   \n    outputColor = getColor(value);\n    outputColor.a =  outputColor.a * u_opacity ;\n      if(outputColor.a < 0.01)\n      discard;\n  }\n}\n";
/* babel-plugin-inline-import '../shaders/terrain/terrain_rgb_vert.glsl' */
var Raster_terrainVert = "layout(location = 0) in vec3 a_Position;\nlayout(location = 14) in vec2 a_Uv;\n\nlayout(std140) uniform commonUniforms {\n   vec4 u_unpack;\n   vec2 u_domain;\n   float u_opacity;\n   float u_noDataValue;\n   float u_clampLow;\n   float u_clampHigh;\n};\nout vec2 v_texCoord;\n#pragma include \"projection\"\n\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n   gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xy,0., 1.0));\n}\n";
var RasterTerrainRGB = exports.default = /*#__PURE__*/function (_BaseModel) {
  (0, _inherits2.default)(RasterTerrainRGB, _BaseModel);
  var _super = _createSuper(RasterTerrainRGB);
  function RasterTerrainRGB() {
    (0, _classCallCheck2.default)(this, RasterTerrainRGB);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(RasterTerrainRGB, [{
    key: "getCommonUniformsInfo",
    value: function getCommonUniformsInfo() {
      var _ref = this.layer.getLayerConfig(),
        opacity = _ref.opacity,
        _ref$clampLow = _ref.clampLow,
        clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,
        _ref$clampHigh = _ref.clampHigh,
        clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,
        _ref$noDataValue = _ref.noDataValue,
        noDataValue = _ref$noDataValue === void 0 ? -9999999 : _ref$noDataValue,
        domain = _ref.domain,
        rampColors = _ref.rampColors,
        colorTexture = _ref.colorTexture,
        _ref$rScaler = _ref.rScaler,
        rScaler = _ref$rScaler === void 0 ? 6553.6 : _ref$rScaler,
        _ref$gScaler = _ref.gScaler,
        gScaler = _ref$gScaler === void 0 ? 25.6 : _ref$gScaler,
        _ref$bScaler = _ref.bScaler,
        bScaler = _ref$bScaler === void 0 ? 0.1 : _ref$bScaler,
        _ref$offset = _ref.offset,
        offset = _ref$offset === void 0 ? 10000 : _ref$offset;
      var newdomain = domain || (0, _l7Utils.getDefaultDomain)(rampColors);
      var texture = colorTexture;
      if (!colorTexture) {
        texture = this.layer.textureService.getColorTexture(rampColors, newdomain);
      } else {
        this.layer.textureService.setColorTexture(colorTexture, rampColors, newdomain);
      }
      var commonOptions = {
        u_unpack: [rScaler, gScaler, bScaler, offset],
        u_domain: newdomain,
        u_opacity: opacity || 1,
        u_noDataValue: noDataValue,
        u_clampLow: clampLow,
        u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,
        u_texture: this.texture,
        u_colorTexture: texture
      };
      this.textures = [this.texture, texture];
      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
      return commonBufferInfo;
    }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var source, createTexture2D, imageData, model;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.initUniformsBuffer();
              source = this.layer.getSource();
              createTexture2D = this.rendererService.createTexture2D;
              _context.next = 5;
              return source.data.images;
            case 5:
              imageData = _context.sent;
              this.texture = createTexture2D({
                data: imageData[0],
                width: imageData[0].width,
                height: imageData[0].height,
                min: _l7Core.gl.LINEAR,
                mag: _l7Core.gl.LINEAR
              });
              _context.next = 9;
              return this.layer.buildLayerModel({
                moduleName: 'RasterTileDataImage',
                vertexShader: Raster_terrainVert,
                fragmentShader: Raster_terrainFrag,
                triangulation: _triangulation.RasterImageTriangulation,
                primitive: _l7Core.gl.TRIANGLES,
                depth: {
                  enable: false
                }
              });
            case 9:
              model = _context.sent;
              return _context.abrupt("return", [model]);
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;
      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.initModels());
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Uv',
          shaderLocation: _CommonStyleAttribute.ShaderLocation.UV,
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return RasterTerrainRGB;
}(_BaseModel2.default);