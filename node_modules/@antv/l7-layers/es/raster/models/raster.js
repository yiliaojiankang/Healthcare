import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { getDefaultDomain } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { ShaderLocation } from "../../core/CommonStyleAttribute";
import { RasterImageTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/raster/raster_2d_frag.glsl' */
var rasterFrag = "layout(std140) uniform commonUniforms {\n  vec2 u_domain;\n  float u_opacity;\n  float u_noDataValue;\n  float u_clampLow;\n  float u_clampHigh;\n};\n\nuniform sampler2D u_rasterTexture;\nuniform sampler2D u_colorTexture;\n\nin vec2 v_texCoord;\n\nbool isnan_emu(float x) { return (x > 0.0 || x < 0.0) ? x != x : x != 0.0; }\n\nout vec4 outputColor;\n\nvoid main() {\n  // Can use any component here since u_rasterTexture is under luminance format.\n  float value = texture(SAMPLER_2D(u_rasterTexture), vec2(v_texCoord.x, v_texCoord.y)).r;\n  if (value == u_noDataValue || isnan_emu(value)) {\n    discard;\n  } else if ((u_clampLow < 0.5 && value < u_domain[0]) || (u_clampHigh < 0.5 && value > u_domain[1])) {\n    discard;\n  } else {\n    float normalisedValue =(value - u_domain[0]) / (u_domain[1] - u_domain[0]);\n    vec4 color = texture(SAMPLER_2D(u_colorTexture), vec2(normalisedValue, 0));\n    \n    outputColor = color;\n    outputColor.a = outputColor.a * u_opacity ;\n    if (outputColor.a < 0.01)\n      discard;\n  }\n}\n";
/* babel-plugin-inline-import '../shaders/raster/raster_2d_vert.glsl' */
var rasterVert = "\nlayout(location = 0) in vec3 a_Position;\nlayout(location = 14) in vec2 a_Uv;\n\nlayout(std140) uniform commonUniforms {\n  vec2 u_domain;\n  float u_opacity;\n  float u_noDataValue;\n  float u_clampLow;\n  float u_clampHigh;\n};\n\nout vec2 v_texCoord;\n\n#pragma include \"projection\"\n\nvoid main() {\n   v_texCoord = a_Uv;\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\n  gl_Position = project_common_position_to_clipspace_v2(vec4(project_pos.xy,0., 1.0));\n}\n";
var RasterModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(RasterModel, _BaseModel);
  var _super = _createSuper(RasterModel);
  function RasterModel() {
    _classCallCheck(this, RasterModel);
    return _super.apply(this, arguments);
  }
  _createClass(RasterModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var commoninfo = this.getCommonUniformsInfo();
      var attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());
      this.updateStyleUnifoms();
      return _objectSpread(_objectSpread({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);
    }
  }, {
    key: "getCommonUniformsInfo",
    value: function getCommonUniformsInfo() {
      var _ref = this.layer.getLayerConfig(),
        _ref$opacity = _ref.opacity,
        opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,
        _ref$clampLow = _ref.clampLow,
        clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,
        _ref$clampHigh = _ref.clampHigh,
        clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,
        _ref$noDataValue = _ref.noDataValue,
        noDataValue = _ref$noDataValue === void 0 ? -9999999 : _ref$noDataValue,
        domain = _ref.domain,
        rampColors = _ref.rampColors;
      var newdomain = domain || getDefaultDomain(rampColors);
      this.colorTexture = this.layer.textureService.getColorTexture(rampColors, newdomain);
      var commonOptions = {
        u_domain: newdomain,
        u_opacity: opacity || 1,
        u_noDataValue: noDataValue,
        u_clampLow: clampLow ? 1 : 0,
        u_clampHigh: (typeof clampHigh !== 'undefined' ? clampHigh : clampLow) ? 1 : 0,
        u_rasterTexture: this.texture,
        u_colorTexture: this.colorTexture
      };
      this.textures = [this.texture, this.colorTexture];
      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
      return commonBufferInfo;
    }
  }, {
    key: "getRasterData",
    value: function () {
      var _getRasterData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(parserDataItem) {
        var _yield$parserDataItem, rasterData, width, height;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!Array.isArray(parserDataItem.data)) {
                _context.next = 4;
                break;
              }
              return _context.abrupt("return", {
                data: parserDataItem.data,
                width: parserDataItem.width,
                height: parserDataItem.height
              });
            case 4:
              _context.next = 6;
              return parserDataItem.data;
            case 6:
              _yield$parserDataItem = _context.sent;
              rasterData = _yield$parserDataItem.rasterData;
              width = _yield$parserDataItem.width;
              height = _yield$parserDataItem.height;
              return _context.abrupt("return", {
                data: Array.from(rasterData),
                width: width,
                height: height
              });
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function getRasterData(_x) {
        return _getRasterData.apply(this, arguments);
      }
      return getRasterData;
    }()
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.buildModels());
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var source, _this$rendererService, createTexture2D, queryVerdorInfo, parserDataItem, _yield$this$getRaster, data, width, height, model;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              this.initUniformsBuffer();
              source = this.layer.getSource();
              _this$rendererService = this.rendererService, createTexture2D = _this$rendererService.createTexture2D, queryVerdorInfo = _this$rendererService.queryVerdorInfo;
              parserDataItem = source.data.dataArray[0];
              _context3.next = 6;
              return this.getRasterData(parserDataItem);
            case 6:
              _yield$this$getRaster = _context3.sent;
              data = _yield$this$getRaster.data;
              width = _yield$this$getRaster.width;
              height = _yield$this$getRaster.height;
              this.texture = createTexture2D({
                // @ts-ignore
                data: new Float32Array(data),
                width: width,
                height: height,
                /**
                 * WebGL1 allow the combination of gl.LUMINANCE & gl.FLOAT with OES_texture_float
                 */
                format: queryVerdorInfo() === 'WebGL1' ? gl.LUMINANCE : gl.RED,
                type: gl.FLOAT,
                alignment: 1
              });
              _context3.next = 13;
              return this.layer.buildLayerModel({
                moduleName: 'rasterImageData',
                vertexShader: rasterVert,
                fragmentShader: rasterFrag,
                triangulation: RasterImageTriangulation,
                primitive: gl.TRIANGLES,
                depth: {
                  enable: false
                },
                pickingEnabled: false
              });
            case 13:
              model = _context3.sent;
              return _context3.abrupt("return", [model]);
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture, _this$colorTexture;
      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();
      (_this$colorTexture = this.colorTexture) === null || _this$colorTexture === void 0 || _this$colorTexture.destroy();
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          shaderLocation: ShaderLocation.UV,
          name: 'a_Uv',
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature, featureIdx, vertex) {
            return [vertex[3], vertex[4]];
          }
        }
      });
    }
  }]);
  return RasterModel;
}(BaseModel);
export { RasterModel as default };