import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
export function loadImage(_x) {
  return _loadImage.apply(this, arguments);
}
function _loadImage() {
  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {
    var response, imageBitmap, image;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (!window.createImageBitmap) {
            _context.next = 14;
            break;
          }
          _context.next = 3;
          return fetch(url);
        case 3:
          response = _context.sent;
          _context.t0 = createImageBitmap;
          _context.next = 7;
          return response.blob();
        case 7:
          _context.t1 = _context.sent;
          _context.next = 10;
          return (0, _context.t0)(_context.t1);
        case 10:
          imageBitmap = _context.sent;
          return _context.abrupt("return", imageBitmap);
        case 14:
          image = new window.Image();
          return _context.abrupt("return", new Promise(function (res) {
            image.onload = function () {
              return res(image);
            };
            image.src = url;
            image.crossOrigin = 'Anonymous';
          }));
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _loadImage.apply(this, arguments);
}