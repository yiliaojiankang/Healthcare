import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { AttributeType, gl } from '@antv/l7-core';
import { LineTriangulation, rgb2arr } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { LinearDir, TextureBlend } from "../../core/interface";
// import { LineTriangulation } from '../../core/triangulation';

import { ShaderLocation } from "../../core/CommonStyleAttribute";
/* babel-plugin-inline-import '../shaders/line/line_frag.glsl' */
var line_frag = "// #extension GL_OES_standard_derivatives : enable\n#define Animate 0.0\n#define LineTexture 1.0\n\nuniform sampler2D u_texture;\nlayout(std140) uniform commonUniorm {\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\n  vec4 u_dash_array;\n  vec4 u_blur;\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  vec2 u_textSize;\n  float u_icon_step: 100;\n  float u_heightfixed: 0.0;\n  float u_vertexScale: 1.0;\n  float u_raisingHeight: 0.0;\n  float u_strokeWidth: 0.0;\n  float u_textureBlend;\n  float u_line_texture;\n  float u_linearDir: 1.0;\n  float u_linearColor: 0;\n  float u_time;\n};\n\nin vec4 v_color;\nin vec4 v_stroke;\n// dash\nin vec4 v_dash_array;\nin float v_d_distance_ratio;\nin vec2 v_iconMapUV;\nin vec4 v_texture_data;\n\nout vec4 outputColor;\n#pragma include \"picking\"\n\n// [animate, duration, interval, trailLength],\nvoid main() {\n  if(u_dash_array!=vec4(0.0)){\n    float dashLength = mod(v_d_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\n    if(!(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z))) {\n      // \u865A\u7EBF\u90E8\u5206\n      discard;\n    };\n  }\n  float animateSpeed = 0.0; // \u8FD0\u52A8\u901F\u5EA6\n  float d_distance_ratio = v_texture_data.r; // \u5F53\u524D\u70B9\u4F4D\u8DDD\u79BB\u5360\u7EBF\u603B\u957F\u7684\u6BD4\u4F8B\n  if(u_linearDir < 1.0) {\n    d_distance_ratio = v_texture_data.a;\n  }\n  if(u_linearColor == 1.0) { // \u4F7F\u7528\u6E10\u53D8\u989C\u8272\n    outputColor = mix(u_sourceColor, u_targetColor, d_distance_ratio);\n    outputColor.a *= v_color.a;\n  } else { // \u4F7F\u7528 color \u65B9\u6CD5\u4F20\u5165\u7684\u989C\u8272\n     outputColor = v_color;\n  }\n  // anti-alias\n  // float blur = 1.0 - smoothstep(u_blur, 1., length(v_normal.xy));\n  if(u_animate.x == Animate) {\n      animateSpeed = u_time / u_animate.y;\n       float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_animate.z)* (1.0/ u_animate.z) + animateSpeed);\n      alpha = (alpha + u_animate.w -1.0) / u_animate.w;\n      alpha = smoothstep(0., 1., alpha);\n      outputColor.a *= alpha;\n  }\n\n  if(u_line_texture == LineTexture) { // while load texture\n    float aDistance = v_texture_data.g;      // \u5F53\u524D\u9876\u70B9\u7684\u8DDD\u79BB\n    float d_texPixelLen = v_texture_data.b;  // \u8D34\u56FE\u7684\u50CF\u7D20\u957F\u5EA6\uFF0C\u6839\u636E\u5730\u56FE\u5C42\u7EA7\u7F29\u653E\n    float u = fract(mod(aDistance, d_texPixelLen)/d_texPixelLen - animateSpeed);\n    float v = v_texture_data.a;  // \u7EBF\u56FE\u5C42\u8D34\u56FE\u90E8\u5206\u7684 v \u5750\u6807\u503C\n\n    // v = max(smoothstep(0.95, 1.0, v), v);\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\n     vec4 pattern = texture(SAMPLER_2D(u_texture), uv);\n\n    if(u_textureBlend == 0.0) { // normal\n      pattern.a = 0.0;\n      outputColor += pattern;\n    } else { // replace\n        pattern.a *= v_color.a;\n        if(outputColor.a <= 0.0) {\n          pattern.a = 0.0;\n        }\n        outputColor = pattern;\n    }\n  } \n\n  float v = v_texture_data.a;\n  float strokeWidth = min(0.5, u_strokeWidth);\n  // \u7ED8\u5236 border\n  if(strokeWidth > 0.01) {\n    float borderOuterWidth = strokeWidth / 2.0;\n\n\n    if(v >= 1.0 - strokeWidth || v <= strokeWidth) {\n      if(v > strokeWidth) { // \u5916\u4FA7\n        float linear = smoothstep(0.0, 1.0, (v - (1.0 - strokeWidth))/strokeWidth);\n        //  float linear = step(0.0, (v - (1.0 - borderWidth))/borderWidth);\n        outputColor.rgb = mix(outputColor.rgb, v_stroke.rgb, linear);\n      } else if(v <= strokeWidth) {\n        float linear = smoothstep(0.0, 1.0, v/strokeWidth);\n        outputColor.rgb = mix(v_stroke.rgb, outputColor.rgb, linear);\n      }\n    }\n\n    if(v < borderOuterWidth) {\n      outputColor.a = mix(0.0, outputColor.a, v/borderOuterWidth);\n    } else if(v > 1.0 - borderOuterWidth) {\n      outputColor.a = mix(outputColor.a, 0.0, (v - (1.0 - borderOuterWidth))/borderOuterWidth);\n    }\n  }\n\n  // blur\n  float blurV = v_texture_data.a;\n  if(blurV < 0.5) {\n    outputColor.a *= mix(u_blur.r, u_blur.g, blurV/0.5);\n  } else {\n    outputColor.a *= mix(u_blur.g, u_blur.b, (blurV - 0.5)/0.5);\n  }\n  \n  outputColor = filterColor(outputColor);\n}\n";
/* babel-plugin-inline-import '../shaders/line/line_vert.glsl' */
var line_vert = "\n#define Animate 0.0\n\nlayout(location = 0) in vec3 a_Position;\nlayout(location = 1) in vec4 a_Color;\nlayout(location = 9) in vec2 a_Size;\nlayout(location = 10) in vec3 a_DistanceAndIndexAndMiter;\nlayout(location = 13) in vec4 a_Normal_Total_Distance;\nlayout(location = 14) in vec2 a_iconMapUV;\n\nlayout(std140) uniform commonUniorm {\n  vec4 u_animate: [ 1., 2., 1.0, 0.2 ];\n  vec4 u_dash_array;\n  vec4 u_blur;\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  vec2 u_textSize;\n  float u_icon_step: 100;\n  float u_heightfixed: 0.0;\n  float u_vertexScale: 1.0;\n  float u_raisingHeight: 0.0;\n  float u_strokeWidth: 0.0;\n  float u_textureBlend;\n  float u_line_texture;\n  float u_linearDir: 1.0;\n  float u_linearColor: 0;\n  float u_time;\n};\n\n\nout vec4 v_color;\nout vec4 v_stroke;\n//dash\nout vec4 v_dash_array;\nout float v_d_distance_ratio;\n// texV \u7EBF\u56FE\u5C42 - \u8D34\u56FE\u90E8\u5206\u7684 v \u5750\u6807\uFF08\u7EBF\u7684\u5BBD\u5EA6\u65B9\u5411\uFF09\nout vec2 v_iconMapUV;\nout vec4 v_texture_data;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvoid main() {\n  vec2 a_DistanceAndIndex = a_DistanceAndIndexAndMiter.xy;\n  float a_Miter = a_DistanceAndIndexAndMiter.z;\n  vec3 a_Normal = a_Normal_Total_Distance.xyz;\n  float a_Total_Distance = a_Normal_Total_Distance.w;\n  //dash\u8F93\u51FA\n  v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / a_Total_Distance;\n  v_d_distance_ratio = a_DistanceAndIndex.x / a_Total_Distance;\n\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n  float d_texPixelLen;    // \u8D34\u56FE\u7684\u50CF\u7D20\u957F\u5EA6\uFF0C\u6839\u636E\u5730\u56FE\u5C42\u7EA7\u7F29\u653E\n  v_iconMapUV = a_iconMapUV;\n  d_texPixelLen = project_float_pixel(u_icon_step);\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\n    d_texPixelLen *= 10.0;\n  }\n\n  v_color = a_Color;\n  v_color.a *= opacity;\n  v_stroke = stroke;\n\n  vec3 size = a_Miter * setPickingSize(a_Size.x) * reverse_offset_normal(a_Normal);\n  \n  vec2 offset = project_pixel(size.xy);\n\n  float lineDistance = a_DistanceAndIndex.x;\n  float currentLinePointRatio = lineDistance / a_Total_Distance;\n \n\n  float lineOffsetWidth = length(offset + offset * sign(a_Miter)); // \u7EBF\u6A2A\u5411\u504F\u79FB\u7684\u8DDD\u79BB\uFF08\u5411\u4E24\u4FA7\u504F\u79FB\u7684\u548C\uFF09\n  float linePixelSize = project_pixel(a_Size.x) * 2.0;  // \u5B9A\u70B9\u4F4D\u7F6E\u504F\u79FB\uFF0C\u6309\u5730\u56FE\u7B49\u7EA7\u7F29\u653E\u540E\u7684\u8DDD\u79BB \u5355\u4FA7 * 2\n  float texV = lineOffsetWidth/linePixelSize; // \u7EBF\u56FE\u5C42\u8D34\u56FE\u90E8\u5206\u7684 v \u5750\u6807\u503C\n  \n  v_texture_data = vec4(currentLinePointRatio, lineDistance, d_texPixelLen, texV);\n  // \u8BBE\u7F6E\u6570\u636E\u96C6\u7684\u53C2\u6570\n\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\n\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\n\n  float h = float(a_Position.z) * u_vertexScale; // \u7EBF\u9876\u70B9\u7684\u9AD8\u5EA6 - \u517C\u5BB9\u4E0D\u5B58\u5728\u7B2C\u4E09\u4E2A\u6570\u503C\u7684\u60C5\u51B5 vertex height\n  float lineHeight = a_Size.y; // size \u7B2C\u4E8C\u4E2A\u53C2\u6570\u4EE3\u8868\u7684\u9AD8\u5EA6 [linewidth, lineheight]\n\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\n    lineHeight *= 0.2; // \u4FDD\u6301\u548C amap/mapbox \u4E00\u81F4\u7684\u6548\u679C\n    h *= 0.2;\n    if(u_heightfixed < 1.0) {\n      lineHeight = project_pixel(a_Size.y);\n    }\n    gl_Position = u_Mvp * (vec4(project_pos.xy + offset, lineHeight + h + u_raisingHeight, 1.0));\n  } else {\n    // mapbox -  amap\n    \n    // \u517C\u5BB9 mapbox \u5728\u7EBF\u9AD8\u5EA6\u4E0A\u7684\u6548\u679C\u8868\u73B0\u57FA\u672C\u4E00\u81F4\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      // mapbox\n      // \u4FDD\u6301\u9AD8\u5EA6\u76F8\u5BF9\u4E0D\u53D8\n      float mapboxZoomScale = 4.0/pow(2.0, 21.0 - u_Zoom);\n      h *= mapboxZoomScale;\n      h += u_raisingHeight * mapboxZoomScale;\n      if(u_heightfixed > 0.0) {\n        lineHeight *= mapboxZoomScale;\n      }\n      \n    } else {\n      // amap\n      h += u_raisingHeight;\n      // lineHeight \u9876\u70B9\u504F\u79FB\u9AD8\u5EA6\n      if(u_heightfixed < 1.0) {\n        lineHeight *= pow(2.0, 20.0 - u_Zoom);\n      }\n    }\n\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, lineHeight + h, 1.0));\n  }\n\n  setPickingColor(a_PickingColor);\n}\n";
var lineStyleObj = {
  solid: 0.0,
  dash: 1.0
};
var LineModel = /*#__PURE__*/function (_BaseModel) {
  _inherits(LineModel, _BaseModel);
  var _super = _createSuper(LineModel);
  function LineModel() {
    var _this;
    _classCallCheck(this, LineModel);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "textureEventFlag", false);
    _defineProperty(_assertThisInitialized(_this), "texture", _this.createTexture2D({
      data: new Uint8Array([0, 0, 0, 0]),
      width: 1,
      height: 1
    }));
    _defineProperty(_assertThisInitialized(_this), "updateTexture", function () {
      var createTexture2D = _this.rendererService.createTexture2D;
      if (_this.textures.length === 0) {
        _this.textures = [_this.texture];
      }
      if (_this.texture) {
        _this.texture.update({
          data: _this.iconService.getCanvas()
        });
        _this.layer.render();
        return;
      }
      _this.texture = createTexture2D({
        data: _this.iconService.getCanvas(),
        mag: gl.NEAREST,
        min: gl.NEAREST,
        premultiplyAlpha: false,
        width: 1024,
        height: _this.iconService.canvasHeight || 128
      });
    });
    return _this;
  }
  _createClass(LineModel, [{
    key: "getCommonUniformsInfo",
    value: function getCommonUniformsInfo() {
      var _ref = this.layer.getLayerConfig(),
        sourceColor = _ref.sourceColor,
        targetColor = _ref.targetColor,
        _ref$textureBlend = _ref.textureBlend,
        textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,
        _ref$lineType = _ref.lineType,
        lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,
        _ref$dashArray = _ref.dashArray,
        dashArray = _ref$dashArray === void 0 ? [10, 5, 0, 0] : _ref$dashArray,
        _ref$lineTexture = _ref.lineTexture,
        lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,
        _ref$iconStep = _ref.iconStep,
        iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,
        _ref$vertexHeightScal = _ref.vertexHeightScale,
        vertexHeightScale = _ref$vertexHeightScal === void 0 ? 20.0 : _ref$vertexHeightScal,
        _ref$strokeWidth = _ref.strokeWidth,
        strokeWidth = _ref$strokeWidth === void 0 ? 0.0 : _ref$strokeWidth,
        _ref$raisingHeight = _ref.raisingHeight,
        raisingHeight = _ref$raisingHeight === void 0 ? 0 : _ref$raisingHeight,
        _ref$heightfixed = _ref.heightfixed,
        heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,
        _ref$linearDir = _ref.linearDir,
        linearDir = _ref$linearDir === void 0 ? LinearDir.VERTICAL : _ref$linearDir,
        _ref$blur = _ref.blur,
        blur = _ref$blur === void 0 ? [1, 1, 1, 0] : _ref$blur;
      var u_dash_array = dashArray;
      if (lineType !== 'dash') {
        u_dash_array = [0, 0, 0, 0];
      }
      if (u_dash_array.length === 2) {
        u_dash_array.push(0, 0);
      }
      if (this.rendererService.getDirty() && this.texture) {
        this.texture.bind();
      }
      var _ref2 = this.layer.getLayerConfig(),
        animateOption = _ref2.animateOption;
      // 转化渐变色
      var useLinearColor = 0; // 默认不生效
      var sourceColorArr = [0, 0, 0, 0];
      var targetColorArr = [0, 0, 0, 0];
      if (sourceColor && targetColor) {
        sourceColorArr = rgb2arr(sourceColor);
        targetColorArr = rgb2arr(targetColor);
        useLinearColor = 1;
      }
      var commonOptions = {
        u_animate: this.animateOption2Array(animateOption),
        u_dash_array: u_dash_array,
        u_blur: blur,
        u_sourceColor: sourceColorArr,
        u_targetColor: targetColorArr,
        u_textSize: [1024, this.iconService.canvasHeight || 128],
        u_icon_step: iconStep,
        // 是否固定高度
        u_heightfixed: Number(heightfixed),
        // 顶点高度 scale
        u_vertexScale: vertexHeightScale,
        u_raisingHeight: Number(raisingHeight),
        // line border 参数
        u_strokeWidth: strokeWidth,
        u_textureBlend: textureBlend === TextureBlend.NORMAL ? 0.0 : 1.0,
        u_line_texture: lineTexture ? 1.0 : 0.0,
        // 传入线的标识
        u_linearDir: linearDir === LinearDir.VERTICAL ? 1.0 : 0.0,
        u_linearColor: useLinearColor,
        u_time: this.layer.getLayerAnimateTime() || 0
      };
      var commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
      return commonBufferInfo;
    }
    // public getAnimateUniforms(): IModelUniform {
    //   const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;
    //   return {
    //     u_animate: this.animateOption2Array(animateOption as IAnimateOption),
    //     u_time: this.layer.getLayerAnimateTime(),
    //   };
    // }
  }, {
    key: "initModels",
    value: function () {
      var _initModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.initUniformsBuffer();
              // this.updateTexture();
              // this.iconService.on('imageUpdate', this.updateTexture);
              if (!this.textureEventFlag) {
                this.textureEventFlag = true;
                this.updateTexture();
                this.iconService.on('imageUpdate', this.updateTexture);
              }
              return _context.abrupt("return", this.buildModels());
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function initModels() {
        return _initModels.apply(this, arguments);
      }
      return initModels;
    }()
  }, {
    key: "clearModels",
    value: function clearModels() {
      var _this$texture;
      (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();
      this.iconService.off('imageUpdate', this.updateTexture);
    }
  }, {
    key: "buildModels",
    value: function () {
      var _buildModels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _ref3, _ref3$depth, depth, _this$getShaders, frag, vert, type, model;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _ref3 = this.layer.getLayerConfig(), _ref3$depth = _ref3.depth, depth = _ref3$depth === void 0 ? false : _ref3$depth;
              _this$getShaders = this.getShaders(), frag = _this$getShaders.frag, vert = _this$getShaders.vert, type = _this$getShaders.type; // console.log(frag)
              this.layer.triangulation = LineTriangulation;
              _context2.next = 5;
              return this.layer.buildLayerModel({
                moduleName: 'line' + type,
                vertexShader: vert,
                fragmentShader: frag,
                triangulation: LineTriangulation,
                inject: this.getInject(),
                depth: {
                  enable: depth
                }
              });
            case 5:
              model = _context2.sent;
              return _context2.abrupt("return", [model]);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function buildModels() {
        return _buildModels.apply(this, arguments);
      }
      return buildModels;
    }()
    /**
     * 根据参数获取不同的 shader 代码
     * @returns
     */
  }, {
    key: "getShaders",
    value: function getShaders() {
      return {
        frag: line_frag,
        vert: line_vert,
        type: ''
      };
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      var _this2 = this;
      this.styleAttributeService.registerStyleAttribute({
        name: 'distanceAndIndex',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_DistanceAndIndexAndMiter',
          shaderLocation: 10,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal, vertexIndex) {
            return vertexIndex === undefined ? [vertex[3], 10, vertex[4]] : [vertex[3], vertexIndex, vertex[4]];
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'size',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Size',
          shaderLocation: ShaderLocation.SIZE,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature) {
            var _feature$size = feature.size,
              size = _feature$size === void 0 ? 1 : _feature$size;
            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];
          }
        }
      });

      // point layer size;
      this.styleAttributeService.registerStyleAttribute({
        name: 'normal_total_distance',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Normal_Total_Distance',
          shaderLocation: ShaderLocation.NORMAL,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.STATIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 4,
          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {
            return [].concat(_toConsumableArray(normal), [vertex[5]]);
          }
        }
      });
      this.styleAttributeService.registerStyleAttribute({
        name: 'uv',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_iconMapUV',
          shaderLocation: ShaderLocation.UV,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 2,
          update: function update(feature) {
            var iconMap = _this2.iconService.getIconMap();
            var texture = feature.texture;
            var _ref4 = iconMap[texture] || {
                x: 0,
                y: 0
              },
              x = _ref4.x,
              y = _ref4.y;
            return [x, y];
          }
        }
      });
    }
  }]);
  return LineModel;
}(BaseModel);
export { LineModel as default };