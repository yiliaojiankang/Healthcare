import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { Format, TextureUsage } from '@antv/g-device-api';
import { isTexture2D } from "./DeviceTexture2D";

/**
 * Contains 2 render targets: color and depth.
 */
var DeviceFramebuffer = /*#__PURE__*/function () {
  function DeviceFramebuffer(device, options) {
    _classCallCheck(this, DeviceFramebuffer);
    this.device = device;
    this.options = options;
    this.createColorRenderTarget();
    this.createDepthRenderTarget();
  }
  _createClass(DeviceFramebuffer, [{
    key: "createColorRenderTarget",
    value: function createColorRenderTarget() {
      var resize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var _this$options = this.options,
        width = _this$options.width,
        height = _this$options.height,
        color = _this$options.color;
      if (color) {
        if (isTexture2D(color)) {
          if (resize) {
            color.resize({
              width: width,
              height: height
            });
          }
          this.colorTexture = color.get();
          this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);
          this.width = color['width'];
          this.height = color['height'];
        } else if (width && height) {
          this.colorTexture = this.device.createTexture({
            format: Format.U8_RGBA_RT,
            usage: TextureUsage.RENDER_TARGET,
            width: width,
            height: height
          });
          this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);
          this.width = width;
          this.height = height;
        }
      }
    }
  }, {
    key: "createDepthRenderTarget",
    value: function createDepthRenderTarget() {
      var resize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var _this$options2 = this.options,
        width = _this$options2.width,
        height = _this$options2.height,
        depth = _this$options2.depth;
      // TODO: avoid creating depth texture if not needed
      if (depth) {
        if (isTexture2D(depth)) {
          if (resize) {
            depth.resize({
              width: width,
              height: height
            });
          }
          this.depthTexture = depth.get();
          this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);
          this.width = depth['width'];
          this.height = depth['height'];
        } else if (width && height) {
          this.depthTexture = this.device.createTexture({
            format: Format.D24_S8,
            usage: TextureUsage.RENDER_TARGET,
            width: width,
            height: height
          });
          this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);
          this.width = width;
          this.height = height;
        }
      }
    }
  }, {
    key: "get",
    value: function get() {
      return this.colorRenderTarget;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this$colorRenderTarg, _this$depthRenderTarg;
      (_this$colorRenderTarg = this.colorRenderTarget) === null || _this$colorRenderTarg === void 0 || _this$colorRenderTarg.destroy();
      (_this$depthRenderTarg = this.depthRenderTarget) === null || _this$depthRenderTarg === void 0 || _this$depthRenderTarg.destroy();
    }
  }, {
    key: "resize",
    value: function resize(_ref) {
      var width = _ref.width,
        height = _ref.height;
      if (this.width !== width || this.height !== height) {
        this.destroy();
        // Prevent double free texture.
        // @ts-ignore
        this.colorTexture.destroyed = true;
        // @ts-ignore
        this.depthTexture.destroyed = true;
        this.options.width = width;
        this.options.height = height;
        this.createColorRenderTarget(true);
        this.createDepthRenderTarget(true);
      }
    }
  }]);
  return DeviceFramebuffer;
}();
export { DeviceFramebuffer as default };