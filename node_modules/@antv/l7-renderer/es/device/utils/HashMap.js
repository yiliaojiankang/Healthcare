import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Jenkins One-at-a-Time hash from http://www.burtleburtle.net/bob/hash/doobs.html
export function hashCodeNumberUpdate(hash) {
  var v = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  hash += v;
  hash += hash << 10;
  hash += hash >>> 6;
  return hash >>> 0;
}
export function hashCodeNumberFinish(hash) {
  hash += hash << 3;
  hash ^= hash >>> 11;
  hash += hash << 15;
  return hash >>> 0;
}

// Pass this as a hash function to use a one-bucket HashMap (equivalent to linear search in an array),
// which can be efficient for small numbers of items.
export function nullHashFunc(k) {
  return 0;
}
var HashBucket = /*#__PURE__*/_createClass(function HashBucket() {
  _classCallCheck(this, HashBucket);
  _defineProperty(this, "keys", []);
  _defineProperty(this, "values", []);
});
export var HashMap = /*#__PURE__*/function () {
  function HashMap(keyEqualFunc, keyHashFunc) {
    _classCallCheck(this, HashMap);
    _defineProperty(this, "buckets", new Map());
    this.keyEqualFunc = keyEqualFunc;
    this.keyHashFunc = keyHashFunc;
  }
  _createClass(HashMap, [{
    key: "findBucketIndex",
    value: function findBucketIndex(bucket, k) {
      for (var i = 0; i < bucket.keys.length; i++) if (this.keyEqualFunc(k, bucket.keys[i])) return i;
      return -1;
    }
  }, {
    key: "findBucket",
    value: function findBucket(k) {
      var bw = this.keyHashFunc(k);
      return this.buckets.get(bw);
    }
  }, {
    key: "get",
    value: function get(k) {
      var bucket = this.findBucket(k);
      if (bucket === undefined) return null;
      var bi = this.findBucketIndex(bucket, k);
      if (bi < 0) return null;
      return bucket.values[bi];
    }
  }, {
    key: "add",
    value: function add(k, v) {
      var bw = this.keyHashFunc(k);
      if (this.buckets.get(bw) === undefined) this.buckets.set(bw, new HashBucket());
      var bucket = this.buckets.get(bw);
      bucket.keys.push(k);
      bucket.values.push(v);
    }
  }, {
    key: "delete",
    value: function _delete(k) {
      var bucket = this.findBucket(k);
      if (bucket === undefined) return;
      var bi = this.findBucketIndex(bucket, k);
      if (bi === -1) return;
      bucket.keys.splice(bi, 1);
      bucket.values.splice(bi, 1);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.buckets.clear();
    }
  }, {
    key: "size",
    value: function size() {
      var acc = 0;
      var _iterator = _createForOfIteratorHelper(this.buckets.values()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var bucket = _step.value;
          acc += bucket.values.length;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return acc;
    }
  }, {
    key: "values",
    value: /*#__PURE__*/_regeneratorRuntime.mark(function values() {
      var _iterator2, _step2, bucket, j;
      return _regeneratorRuntime.wrap(function values$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _iterator2 = _createForOfIteratorHelper(this.buckets.values());
            _context.prev = 1;
            _iterator2.s();
          case 3:
            if ((_step2 = _iterator2.n()).done) {
              _context.next = 14;
              break;
            }
            bucket = _step2.value;
            j = bucket.values.length - 1;
          case 6:
            if (!(j >= 0)) {
              _context.next = 12;
              break;
            }
            _context.next = 9;
            return bucket.values[j];
          case 9:
            j--;
            _context.next = 6;
            break;
          case 12:
            _context.next = 3;
            break;
          case 14:
            _context.next = 19;
            break;
          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](1);
            _iterator2.e(_context.t0);
          case 19:
            _context.prev = 19;
            _iterator2.f();
            return _context.finish(19);
          case 22:
          case "end":
            return _context.stop();
        }
      }, values, this, [[1, 16, 19, 22]]);
    })
  }]);
  return HashMap;
}();