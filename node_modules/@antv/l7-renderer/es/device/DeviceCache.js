import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { TransparentBlack, bindingsDescriptorCopy, bindingsDescriptorEquals, inputLayoutDescriptorCopy, inputLayoutDescriptorEquals, renderPipelineDescriptorCopy, renderPipelineDescriptorEquals } from '@antv/g-device-api';
import { HashMap, hashCodeNumberFinish, hashCodeNumberUpdate, nullHashFunc } from "./utils/HashMap";
function blendStateHash(hash, a) {
  hash = hashCodeNumberUpdate(hash, a.blendMode);
  hash = hashCodeNumberUpdate(hash, a.blendSrcFactor);
  hash = hashCodeNumberUpdate(hash, a.blendDstFactor);
  return hash;
}
function attachmentStateHash(hash, a) {
  hash = blendStateHash(hash, a.rgbBlendState);
  hash = blendStateHash(hash, a.alphaBlendState);
  hash = hashCodeNumberUpdate(hash, a.channelWriteMask);
  return hash;
}
function colorHash(hash, a) {
  hash = hashCodeNumberUpdate(hash, a.r << 24 | a.g << 16 | a.b << 8 | a.a);
  return hash;
}
function megaStateDescriptorHash(hash, a) {
  var _a$stencilFront, _a$stencilFront2, _a$stencilFront3, _a$stencilFront4, _a$stencilBack, _a$stencilBack2, _a$stencilBack3, _a$stencilBack4;
  for (var i = 0; i < a.attachmentsState.length; i++) hash = attachmentStateHash(hash, a.attachmentsState[i]);
  hash = colorHash(hash, a.blendConstant || TransparentBlack);
  hash = hashCodeNumberUpdate(hash, a.depthCompare);
  hash = hashCodeNumberUpdate(hash, a.depthWrite ? 1 : 0);
  hash = hashCodeNumberUpdate(hash, (_a$stencilFront = a.stencilFront) === null || _a$stencilFront === void 0 ? void 0 : _a$stencilFront.compare);
  hash = hashCodeNumberUpdate(hash, (_a$stencilFront2 = a.stencilFront) === null || _a$stencilFront2 === void 0 ? void 0 : _a$stencilFront2.passOp);
  hash = hashCodeNumberUpdate(hash, (_a$stencilFront3 = a.stencilFront) === null || _a$stencilFront3 === void 0 ? void 0 : _a$stencilFront3.failOp);
  hash = hashCodeNumberUpdate(hash, (_a$stencilFront4 = a.stencilFront) === null || _a$stencilFront4 === void 0 ? void 0 : _a$stencilFront4.depthFailOp);
  hash = hashCodeNumberUpdate(hash, (_a$stencilBack = a.stencilBack) === null || _a$stencilBack === void 0 ? void 0 : _a$stencilBack.compare);
  hash = hashCodeNumberUpdate(hash, (_a$stencilBack2 = a.stencilBack) === null || _a$stencilBack2 === void 0 ? void 0 : _a$stencilBack2.passOp);
  hash = hashCodeNumberUpdate(hash, (_a$stencilBack3 = a.stencilBack) === null || _a$stencilBack3 === void 0 ? void 0 : _a$stencilBack3.failOp);
  hash = hashCodeNumberUpdate(hash, (_a$stencilBack4 = a.stencilBack) === null || _a$stencilBack4 === void 0 ? void 0 : _a$stencilBack4.depthFailOp);
  hash = hashCodeNumberUpdate(hash, a.stencilWrite ? 1 : 0);
  hash = hashCodeNumberUpdate(hash, a.cullMode);
  hash = hashCodeNumberUpdate(hash, a.frontFace ? 1 : 0);
  hash = hashCodeNumberUpdate(hash, a.polygonOffset ? 1 : 0);
  return hash;
}
function renderPipelineDescriptorHash(a) {
  var hash = 0;
  hash = hashCodeNumberUpdate(hash, a.program.id);
  if (a.inputLayout !== null) hash = hashCodeNumberUpdate(hash, a.inputLayout.id);
  hash = megaStateDescriptorHash(hash, a.megaStateDescriptor);
  for (var i = 0; i < a.colorAttachmentFormats.length; i++) hash = hashCodeNumberUpdate(hash, a.colorAttachmentFormats[i] || 0);
  hash = hashCodeNumberUpdate(hash, a.depthStencilAttachmentFormat || 0);
  return hashCodeNumberFinish(hash);
}
function bindingsDescriptorHash(a) {
  var hash = 0;
  if (a.samplerBindings) {
    for (var i = 0; i < a.samplerBindings.length; i++) {
      var binding = a.samplerBindings[i];
      if (binding !== null && binding.texture !== null) hash = hashCodeNumberUpdate(hash, binding.texture.id);
    }
  }
  if (a.uniformBufferBindings) {
    for (var _i = 0; _i < a.uniformBufferBindings.length; _i++) {
      var _binding = a.uniformBufferBindings[_i];
      if (_binding !== null && _binding.buffer !== null) {
        hash = hashCodeNumberUpdate(hash, _binding.buffer.id);
        hash = hashCodeNumberUpdate(hash, _binding.binding);
        hash = hashCodeNumberUpdate(hash, _binding.offset);
        hash = hashCodeNumberUpdate(hash, _binding.size);
      }
    }
  }
  if (a.storageBufferBindings) {
    for (var _i2 = 0; _i2 < a.storageBufferBindings.length; _i2++) {
      var _binding2 = a.storageBufferBindings[_i2];
      if (_binding2 !== null && _binding2.buffer !== null) {
        hash = hashCodeNumberUpdate(hash, _binding2.buffer.id);
        hash = hashCodeNumberUpdate(hash, _binding2.binding);
        hash = hashCodeNumberUpdate(hash, _binding2.offset);
        hash = hashCodeNumberUpdate(hash, _binding2.size);
      }
    }
  }
  if (a.storageTextureBindings) {
    for (var _i3 = 0; _i3 < a.storageTextureBindings.length; _i3++) {
      var _binding3 = a.storageTextureBindings[_i3];
      if (_binding3 !== null && _binding3.texture !== null) {
        hash = hashCodeNumberUpdate(hash, _binding3.texture.id);
        hash = hashCodeNumberUpdate(hash, _binding3.binding);
      }
    }
  }
  return hashCodeNumberFinish(hash);
}
function programDescriptorEquals(a, b) {
  var _a$vertex, _b$vertex, _a$fragment, _b$fragment;
  return ((_a$vertex = a.vertex) === null || _a$vertex === void 0 ? void 0 : _a$vertex.glsl) === ((_b$vertex = b.vertex) === null || _b$vertex === void 0 ? void 0 : _b$vertex.glsl) && ((_a$fragment = a.fragment) === null || _a$fragment === void 0 ? void 0 : _a$fragment.glsl) === ((_b$fragment = b.fragment) === null || _b$fragment === void 0 ? void 0 : _b$fragment.glsl);
}
function programDescriptorCopy(a) {
  var _a$vertex2, _a$fragment2;
  return {
    vertex: {
      glsl: (_a$vertex2 = a.vertex) === null || _a$vertex2 === void 0 ? void 0 : _a$vertex2.glsl
    },
    fragment: {
      glsl: (_a$fragment2 = a.fragment) === null || _a$fragment2 === void 0 ? void 0 : _a$fragment2.glsl
    }
  };
}
export var RenderCache = /*#__PURE__*/function () {
  function RenderCache(device) {
    _classCallCheck(this, RenderCache);
    _defineProperty(this, "bindingsCache", new HashMap(bindingsDescriptorEquals, bindingsDescriptorHash));
    _defineProperty(this, "renderPipelinesCache", new HashMap(renderPipelineDescriptorEquals, renderPipelineDescriptorHash));
    _defineProperty(this, "inputLayoutsCache", new HashMap(inputLayoutDescriptorEquals, nullHashFunc));
    _defineProperty(this, "programCache", new HashMap(programDescriptorEquals, nullHashFunc));
    this.device = device;
  }
  _createClass(RenderCache, [{
    key: "createBindings",
    value: function createBindings(descriptor) {
      var bindings = this.bindingsCache.get(descriptor);
      if (bindings === null) {
        var _descriptorCopy$unifo;
        var descriptorCopy = bindingsDescriptorCopy(descriptor);
        descriptorCopy.uniformBufferBindings = (_descriptorCopy$unifo = descriptorCopy.uniformBufferBindings) === null || _descriptorCopy$unifo === void 0 ? void 0 : _descriptorCopy$unifo.filter(function (_ref) {
          var size = _ref.size;
          return size && size > 0;
        });
        bindings = this.device.createBindings(descriptorCopy);
        this.bindingsCache.add(descriptorCopy, bindings);
      }
      return bindings;
    }
  }, {
    key: "createRenderPipeline",
    value: function createRenderPipeline(descriptor) {
      var renderPipeline = this.renderPipelinesCache.get(descriptor);
      if (renderPipeline === null) {
        var descriptorCopy = renderPipelineDescriptorCopy(descriptor);
        descriptorCopy.colorAttachmentFormats = descriptorCopy.colorAttachmentFormats.filter(function (f) {
          return f;
        });
        renderPipeline = this.device.createRenderPipeline(descriptorCopy);
        this.renderPipelinesCache.add(descriptorCopy, renderPipeline);
      }
      return renderPipeline;
    }
  }, {
    key: "createInputLayout",
    value: function createInputLayout(descriptor) {
      // remove hollows
      descriptor.vertexBufferDescriptors = descriptor.vertexBufferDescriptors.filter(function (d) {
        return !!d;
      });
      var inputLayout = this.inputLayoutsCache.get(descriptor);
      if (inputLayout === null) {
        var descriptorCopy = inputLayoutDescriptorCopy(descriptor);
        inputLayout = this.device.createInputLayout(descriptorCopy);
        this.inputLayoutsCache.add(descriptorCopy, inputLayout);
      }
      return inputLayout;
    }
  }, {
    key: "createProgram",
    value: function createProgram(descriptor) {
      var program = this.programCache.get(descriptor);
      if (program === null) {
        var descriptorCopy = programDescriptorCopy(descriptor);
        program = this.device.createProgram(descriptor);
        this.programCache.add(descriptorCopy, program);
      }
      return program;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator = _createForOfIteratorHelper(this.bindingsCache.values()),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var bindings = _step.value;
          bindings.destroy();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _iterator2 = _createForOfIteratorHelper(this.renderPipelinesCache.values()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var renderPipeline = _step2.value;
          renderPipeline.destroy();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = _createForOfIteratorHelper(this.inputLayoutsCache.values()),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var inputLayout = _step3.value;
          inputLayout.destroy();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var _iterator4 = _createForOfIteratorHelper(this.programCache.values()),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var program = _step4.value;
          program.destroy();
        }
        // for (const sampler of this.samplerCache.values()) sampler.destroy();
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this.bindingsCache.clear();
      this.renderPipelinesCache.clear();
      this.inputLayoutsCache.clear();
      this.programCache.clear();
      // this.samplerCache.clear();
    }
  }]);
  return RenderCache;
}();