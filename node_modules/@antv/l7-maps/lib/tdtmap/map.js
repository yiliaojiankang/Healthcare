"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _BaseMapService2 = _interopRequireDefault(require("../utils/BaseMapService"));
var _l7Core = require("@antv/l7-core");
var _l7Map = require("@antv/l7-map");
var _Viewport = _interopRequireDefault(require("../utils/Viewport"));
var _maploader = require("./maploader");
var _excluded = ["id", "mapInstance", "center", "token", "version", "minZoom", "maxZoom", "logoVisible", "zoom"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var mapdivCount = 0;
var EventMap = {
  camerachange: ['move']
};
var TdtMapService = exports.default = /*#__PURE__*/function (_BaseMapService) {
  (0, _inherits2.default)(TdtMapService, _BaseMapService);
  var _super = _createSuper(TdtMapService);
  function TdtMapService() {
    var _this;
    (0, _classCallCheck2.default)(this, TdtMapService);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "viewport", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "evtCbProxyMap", new Map());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleCameraChanged", function (e) {
      _this.emit('mapchange');
      // console.log('mapchange');
      var map = _this.map;
      var _this$map$getCenter = _this.map.getCenter(),
        lng = _this$map$getCenter.lng,
        lat = _this$map$getCenter.lat;
      var option = {
        center: [lng, lat],
        // @ts-ignore
        viewportHeight: map.getContainer().clientHeight,
        // @ts-ignore
        viewportWidth: map.getContainer().clientWidth,
        // @ts-ignore
        bearing: 360,
        // @ts-ignore
        pitch: 0,
        // @ts-ignore
        zoom: map.getZoom() - 1
      };
      if (_this.viewport) {
        _this.viewport.syncWithMapCamera(option);
        _this.updateCoordinateSystemService();
        _this.cameraChangedCallback(_this.viewport);
      }
    });
    return _this;
  }
  (0, _createClass2.default)(TdtMapService, [{
    key: "addMarkerContainer",
    value:
    // @ts-ignore

    // 不直接用自带的marker的div，因为会收到天地图缩放时visibility变成hidden的影响
    function addMarkerContainer() {
      var container = this.map.getContainer();
      var div = this.markerContainer = document.createElement('div');
      container.appendChild(div);
      // div.classList.add('l7-marker-container');
      // div.classList.add('leaflet-layer');
      // div.classList.add('leaflet-zoom-animated');
      div.setAttribute('tabindex', '-1');
      div.id = 'tdt-L7-marker';
      div.style.position = 'absolute';
      div.style.left = '0px';
      div.style.top = '0px';
      div.style.zIndex = '600';
      div.style.width = '100%';
      div.style.height = '100%';
      div.style.overflow = 'visible';
      return;
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }
  }, {
    key: "resize",
    value: function resize(ev) {
      this.sceneContainer.style.width = ev.newSize.x + 'px';
      this.sceneContainer.style.height = ev.newSize.y + 'px';
    }
  }, {
    key: "update",
    value: function update() {
      var bounds = this.map.getBounds();
      var _this$map$lngLatToLay = this.map.lngLatToLayerPoint({
          lng: bounds.getSouthWest().lng,
          lat: bounds.getNorthEast().lat
        }),
        x = _this$map$lngLatToLay.x,
        y = _this$map$lngLatToLay.y;
      this.sceneContainer.style.transition = '';
      this.sceneContainer.style.transformOrigin = 'center';
      this.sceneContainer.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 0px) scale(1)");
      // @ts-ignore
      this.sceneContainer._tdt_pos = new T.Point(x, y);
      this.handleCameraChanged();
    }
  }, {
    key: "getZoomScale",
    value: function getZoomScale(toZoom, fromZoom) {
      // TODO replace with universal implementation after refactoring projections
      var crs = this.map.options.IW;
      fromZoom = fromZoom === undefined ? this.map.getZoom() : fromZoom;
      return crs.scale(toZoom) / crs.scale(fromZoom);
    }
  }, {
    key: "zoomStartUpdate",
    value: function zoomStartUpdate(ev) {
      // T._Q :DomUtil
      // this.map.options.IW.qW:map.project
      // GQ:multiply aQ:add DQ:substract
      // 都是混淆后的方法,后续需要考虑讲这些方法都实现了,避免api更新后方法名发生改变
      var center = ev.center;
      var zoom = ev.zoom;
      var scale = this.getZoomScale(zoom, this.map.getZoom());

      // @ts-ignore
      var position = T._Q.getPosition(this.sceneContainer);
      var viewHalf = this.map.getSize().GQ(0.5);
      var currentCenterPoint = this.map.options.IW.qW(this.map.getCenter(), zoom);
      var destCenterPoint = this.map.options.IW.qW(center, zoom);
      var centerOffset = destCenterPoint.DQ(currentCenterPoint);
      // @ts-ignore
      var topLeftOffset = new T.Point(viewHalf.x, viewHalf.y).GQ(-scale);
      topLeftOffset.aQ(position);
      topLeftOffset.aQ(viewHalf);
      topLeftOffset.DQ(centerOffset);
      this.sceneContainer.style.transform = "translate3d(".concat(topLeftOffset.x, "px,").concat(topLeftOffset.y, "px,0px) scale(").concat(scale, ")");
      this.sceneContainer.style.transformOrigin = '0 0';
      this.sceneContainer.style.transition = 'transform 0.25s cubic-bezier(0,0,0.25,1)';
      this.handleCameraChanged();
    }
  }, {
    key: "getOverlayContainer",
    value: function getOverlayContainer() {
      var _this$map$getPanes;
      var overlayPane = (_this$map$getPanes = this.map.getPanes()) === null || _this$map$getPanes === void 0 ? void 0 : _this$map$getPanes.overlayPane;
      var container = document.createElement('div');
      overlayPane.parentElement.appendChild(container);
      container.id = 'tdt-L7';
      var size = this.map.getSize();
      container.style.zIndex = '200'; //置于上层
      container.style.width = "".concat(size.x, "px");
      container.style.height = "".concat(size.y, "px");
      // @ts-ignore
      this.sceneContainer = container;
      return container;
    }
  }, {
    key: "init",
    value: function () {
      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var _this$config, id, mapInstance, _this$config$center, center, _this$config$token, token, _this$config$version, version, _this$config$minZoom, minZoom, _this$config$maxZoom, maxZoom, _this$config$logoVisi, logoVisible, _this$config$zoom, zoom, rest, point, map, control, container, tdtPanes;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              this.viewport = new _Viewport.default();
              _this$config = this.config, id = _this$config.id, mapInstance = _this$config.mapInstance, _this$config$center = _this$config.center, center = _this$config$center === void 0 ? [121.30654632240122, 31.25744185633306] : _this$config$center, _this$config$token = _this$config.token, token = _this$config$token === void 0 ? 'b15e548080c79819617367d3f6095c69' : _this$config$token, _this$config$version = _this$config.version, version = _this$config$version === void 0 ? '4.0' : _this$config$version, _this$config$minZoom = _this$config.minZoom, minZoom = _this$config$minZoom === void 0 ? 1 : _this$config$minZoom, _this$config$maxZoom = _this$config.maxZoom, maxZoom = _this$config$maxZoom === void 0 ? 18 : _this$config$maxZoom, _this$config$logoVisi = _this$config.logoVisible, logoVisible = _this$config$logoVisi === void 0 ? true : _this$config$logoVisi, _this$config$zoom = _this$config.zoom, zoom = _this$config$zoom === void 0 ? 3 : _this$config$zoom, rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded); // @ts-ignore
              if (window.T) {
                _context.next = 5;
                break;
              }
              _context.next = 5;
              return (0, _maploader.load)({
                tk: token
              });
            case 5:
              if (!mapInstance) {
                _context.next = 15;
                break;
              }
              this.map = mapInstance;
              // @ts-ignore
              this.map.centerAndZoom(new window.T.LngLat(center[0], center[1]), zoom);
              this.$mapContainer = this.map.getContainer();

              // @ts-ignore
              point = new window.T.LngLat(center[0], center[1]);
              this.map.centerAndZoom(point, zoom);
              this.setMinZoom(minZoom);
              this.setMaxZoom(maxZoom);
              _context.next = 22;
              break;
            case 15:
              if (id) {
                _context.next = 17;
                break;
              }
              throw Error('No container id specified');
            case 17:
              this.$mapContainer = this.creatMapContainer(id);
              // @ts-ignore
              map = new T.Map(this.$mapContainer, {
                // @ts-ignore
                center: window.T.LngLat(center[0], center[1]),
                minZoom: minZoom,
                maxZoom: maxZoom,
                zoom: zoom,
                projection: 'EPSG:900913'
              });
              this.map = map;
              // @ts-ignore
              control = new window.T.Control.Zoom();
              map.addControl(control);
            case 22:
              container = this.map.getContainer();
              tdtPanes = container.querySelector('.tdt-pane');
              tdtPanes.style.zIndex = 1;
              this.handleCameraChanged();
              this.map.on('move', this.update, this);
              //对应leaflet中的zoomanim
              this.map.on('Ge', this.zoomStartUpdate, this);
              this.map.on('resize', this.resize, this);
            case 29:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function init() {
        return _init.apply(this, arguments);
      }
      return init;
    }()
  }, {
    key: "destroy",
    value: function destroy() {
      return;
    }

    // MapEvent
  }, {
    key: "on",
    value: function on(type, handle) {
      var _this2 = this;
      if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.on(type, handle);
      } else {
        var onProxy = function onProxy(eventName) {
          var cbProxyMap = _this2.evtCbProxyMap.get(eventName);
          if (!cbProxyMap) {
            _this2.evtCbProxyMap.set(eventName, cbProxyMap = new Map());
          }
          if (cbProxyMap.get(handle)) {
            return;
          }
          var handleProxy = function handleProxy() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            if (args[0] && (0, _typeof2.default)(args[0]) === 'object' && !args[0].lngLat && !args[0].lnglat) {
              args[0].lngLat = args[0].latlng || args[0].latLng;
            }
            handle.apply(void 0, args);
          };
          cbProxyMap.set(handle, handleProxy);
          _this2.map.on(eventName, handleProxy);
        };
        if (Array.isArray(EventMap[type])) {
          EventMap[type].forEach(function (eventName) {
            onProxy(eventName || type);
          });
        } else {
          onProxy(EventMap[type] || type);
        }
      }
    }
  }, {
    key: "off",
    value: function off(type, handle) {
      var _this3 = this;
      if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.off(type, handle);
        return;
      }
      var offProxy = function offProxy(eventName) {
        var _this3$evtCbProxyMap$, _this3$evtCbProxyMap$2;
        var handleProxy = (_this3$evtCbProxyMap$ = _this3.evtCbProxyMap.get(type)) === null || _this3$evtCbProxyMap$ === void 0 ? void 0 : _this3$evtCbProxyMap$.get(handle);
        if (!handleProxy) {
          return;
        }
        (_this3$evtCbProxyMap$2 = _this3.evtCbProxyMap.get(eventName)) === null || _this3$evtCbProxyMap$2 === void 0 || _this3$evtCbProxyMap$2.delete(handle);
        _this3.map.off(eventName, handleProxy);
      };
      if (Array.isArray(EventMap[type])) {
        EventMap[type].forEach(function (eventName) {
          offProxy(eventName || type);
        });
      } else {
        offProxy(EventMap[type] || type);
      }
    }
  }, {
    key: "once",
    value: function once(type, handler) {
      throw new Error('Method not implemented.');
    }

    // get dom
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.map.getContainer();
    }
  }, {
    key: "getType",
    value: function getType() {
      return 'tdtmap';
    }
  }, {
    key: "getMapCanvasContainer",
    value: function getMapCanvasContainer() {
      var _this$map$getContaine;
      // tdt-container
      return (_this$map$getContaine = this.map.getContainer()) === null || _this$map$getContaine === void 0 ? void 0 : _this$map$getContaine.getElementsByClassName('tdt-container')[0];
    }

    // get mapStatus method
  }, {
    key: "getSize",
    value: function getSize() {
      var size = this.map.getSize();
      return [size.x, size.y];
    }

    // get mapStatus method
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.map.getZoom();
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      return this.map.setZoom(zoom);
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return this.map.getCenter();
    }
  }, {
    key: "setCenter",
    value: function setCenter(lnglat) {
      this.map.setCenter(lnglat);
    }
  }, {
    key: "getPitch",
    value: function getPitch() {
      return 0;
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      return 0;
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      this.map.setBearing(360);
    }

    //
  }, {
    key: "zoomIn",
    value: function zoomIn(option, eventData) {
      this.map.zoomIn(option, eventData);
    }
  }, {
    key: "zoomOut",
    value: function zoomOut(option, eventData) {
      this.map.zoomOut(option, eventData);
    }
  }, {
    key: "panTo",
    value: function panTo(p) {
      this.map.panTo(p);
    }
  }, {
    key: "panBy",
    value: function panBy() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // @ts-ignore
      this.map.panBy([x, y]);
    }
  }, {
    key: "fitBounds",
    value: function fitBounds(bound, fitBoundsOptions) {
      var _bound = (0, _slicedToArray2.default)(bound, 2),
        sw = _bound[0],
        ne = _bound[1];
      // @ts-ignore
      this.map.setViewport([new window.T.LngLat(sw[0], sw[1]), new window.T.LngLat(ne[0], ne[1])]);
    }
  }, {
    key: "setMaxZoom",
    value: function setMaxZoom(max) {
      this.map.setMaxZoom(max);
    }
  }, {
    key: "setMinZoom",
    value: function setMinZoom(min) {
      this.map.setMinZoom(min);
    }
  }, {
    key: "setMapStatus",
    value: function setMapStatus(option) {
      if (option.doubleClickZoom === true) {
        this.map.enableDoubleClickZoom();
      }
      if (option.doubleClickZoom === false) {
        this.map.disableDoubleClickZoom();
      }
      if (option.dragEnable === false) {
        this.map.disableDrag();
      }
      if (option.dragEnable === true) {
        this.map.enableDrag();
      }
      if (option.keyboardEnable === false) {
        this.map.disableKeyboard();
      }
      if (option.keyboardEnable === true) {
        this.map.enableKeyboard();
      }
      if (option.zoomEnable === false) {
        this.map.disableScrollWheelZoom();
      }
      if (option.zoomEnable === true) {
        this.map.enableScrollWheelZoom();
      }
    }

    // coordinates methods
  }, {
    key: "getModelMatrix",
    value: function getModelMatrix(lnglat, altitude, rotate, scale, origin) {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "pixelToLngLat",
    value: function pixelToLngLat(_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        x = _ref2[0],
        y = _ref2[1];
      var lngLat = this.map.layerPointToLngLat({
        x: x,
        y: y
      });
      return {
        lng: lngLat.lng,
        lat: lngLat.lat
      };
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(_ref3) {
      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        lng = _ref4[0],
        lat = _ref4[1];
      var pixel = this.map.lngLatToLayerPoint({
        lng: lng,
        lat: lat
      });
      return {
        x: pixel.x,
        y: pixel.y
      };
    }
  }, {
    key: "containerToLngLat",
    value: function containerToLngLat(_ref5) {
      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
        x = _ref6[0],
        y = _ref6[1];
      var point = this.map.containerPointToLngLat({
        x: x,
        y: y
      });
      return {
        lng: point.lng,
        lat: point.lat
      };
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(_ref7) {
      var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
        lng = _ref8[0],
        lat = _ref8[1];
      var overlayPixel = this.map.lngLatToContainerPoint({
        lat: lat,
        lng: lng
      });
      return {
        x: overlayPixel.x,
        y: overlayPixel.y
      };
    }
  }, {
    key: "lngLatToCoord",
    value: function lngLatToCoord(_ref9) {
      var _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
        lng = _ref10[0],
        lat = _ref10[1];
      var pixelCoord = this.lngLatToPixel([lng, lat]);
      return [pixelCoord.x, pixelCoord.y];
    }
  }, {
    key: "lngLatToCoords",
    value: function lngLatToCoords(list) {
      var _this4 = this;
      return list.map(function (item) {
        return Array.isArray(item[0]) ? _this4.lngLatToCoords(item) : _this4.lngLatToCoord(item);
      });
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      var latlngBound = this.map.getBounds();
      var sw = latlngBound.getSouthWest(),
        ne = latlngBound.getNorthEast();
      return [[sw.lng, sw.lat], [ne.lng, ne.lat]];
    }
  }, {
    key: "lngLatToMercator",
    value: function lngLatToMercator(lnglat, altitude) {
      // Use built in mercator tools due to Tencent not provided related methods
      var _MercatorCoordinate$f = _l7Map.MercatorCoordinate.fromLngLat(lnglat, altitude),
        _MercatorCoordinate$f2 = _MercatorCoordinate$f.x,
        x = _MercatorCoordinate$f2 === void 0 ? 0 : _MercatorCoordinate$f2,
        _MercatorCoordinate$f3 = _MercatorCoordinate$f.y,
        y = _MercatorCoordinate$f3 === void 0 ? 0 : _MercatorCoordinate$f3,
        _MercatorCoordinate$f4 = _MercatorCoordinate$f.z,
        z = _MercatorCoordinate$f4 === void 0 ? 0 : _MercatorCoordinate$f4;
      return {
        x: x,
        y: y,
        z: z
      };
    }
  }, {
    key: "getCustomCoordCenter",
    value: function getCustomCoordCenter() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "creatMapContainer",
    value: function creatMapContainer(id) {
      var $wrapper = id;
      if (typeof id === 'string') {
        $wrapper = document.getElementById(id);
      }
      var $tdtmapdiv = document.createElement('div');
      $tdtmapdiv.style.cssText += "\n      position: absolute;\n      top: 0;\n      height: 100%;\n      width: 100%;\n    ";
      $tdtmapdiv.id = 'l7_tdt_div' + mapdivCount++;
      $wrapper.appendChild($tdtmapdiv);
      return $tdtmapdiv;
    }

    // public exportMap() {}
    //
    // private hideLogo() {}
  }]);
  return TdtMapService;
}(_BaseMapService2.default);