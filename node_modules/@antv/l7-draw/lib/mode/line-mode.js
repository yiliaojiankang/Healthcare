"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineMode = void 0;
var _turf = require("@turf/turf");
var _constant = require("../constant");
var _utils = require("../utils");
var _midPointMode = require("./mid-point-mode");
var _helper = require("../constant/helper");
var _lodash = require("lodash");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var LineMode = exports.LineMode = /*#__PURE__*/function (_MidPointMode) {
  _inherits(LineMode, _MidPointMode);
  var _super = _createSuper(LineMode);
  function LineMode() {
    var _this;
    _classCallCheck(this, LineMode);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.previousPosition = [0, 0];
    return _this;
  }
  _createClass(LineMode, [{
    key: "lineRender",
    get:
    /**
     * 获取line类型对应的render
     * @protected
     */
    function get() {
      return this.render.line;
    }
    /**
     * 获取正在被拖拽的线
     * @protected
     */
  }, {
    key: "dragLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        return feature.properties.isDrag;
      });
    }
    /**
     * 正在绘制的线
     * @protected
     */
  }, {
    key: "drawLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        return feature.properties.isDraw;
      });
    }
    /**
     * 当前高亮的结点
     * @protected
     */
  }, {
    key: "editLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        var _feature$properties = feature.properties,
          isActive = _feature$properties.isActive,
          isDraw = _feature$properties.isDraw;
        return !isDraw && isActive;
      });
    }
    /**
     * 当前悬停的线
     * @protected
     */
  }, {
    key: "hoverLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        return feature.properties.isHover;
      });
    }
  }, {
    key: "getDragLine",
    value: function getDragLine() {
      return this.dragLine;
    }
  }, {
    key: "getDrawLine",
    value: function getDrawLine() {
      return this.drawLine;
    }
  }, {
    key: "getEditLine",
    value: function getEditLine() {
      return this.editLine;
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _objectSpread(_objectSpread({}, this.getCommonOptions(options)), {}, {
        showMidPoint: true,
        distanceOptions: false,
        helper: (0, _lodash.cloneDeep)(_helper.DEFAULT_LINE_HELPER_CONFIG)
      });
      if (options.distanceOptions) {
        newOptions.distanceOptions = _objectSpread(_objectSpread({}, _constant.DEFAULT_DISTANCE_OPTIONS), newOptions.distanceOptions);
      }
      if (options.adsorbOptions) {
        newOptions.adsorbOptions = _objectSpread(_objectSpread({}, _constant.DEFAULT_ADSORB_CONFIG), newOptions.adsorbOptions);
      }
      return newOptions;
    }
    /**
     * 获取 position 经过吸附作用后的 position，若无吸附效果则返回原始数据
     * @param position
     */
  }, {
    key: "getAdsorbPosition",
    value: function getAdsorbPosition(position) {
      var adsorbOptions = this.options.adsorbOptions;
      if (typeof adsorbOptions === 'boolean') {
        return position;
      }
      var scene = this.scene;
      var data = adsorbOptions.data,
        pointAdsorbPixel = adsorbOptions.pointAdsorbPixel,
        lineAdsorbPixel = adsorbOptions.lineAdsorbPixel;
      var adsorbPosition = null;
      var _getAdsorbFeature = (0, _utils.getAdsorbFeature)(data, this, position),
        points = _getAdsorbFeature.points,
        lines = _getAdsorbFeature.lines;
      if (points.length && pointAdsorbPixel > 0) {
        adsorbPosition = (0, _utils.getAdsorbPoint)(position, points, adsorbOptions, scene);
      }
      if (!adsorbPosition && lines.length && lineAdsorbPixel > 0) {
        adsorbPosition = (0, _utils.getAdsorbLine)(position, lines, adsorbOptions, scene);
      }
      return adsorbPosition;
    }
  }, {
    key: "bindSceneEvent",
    value: function bindSceneEvent() {
      this.sceneRender.on(_constant.RenderEvent.Mousemove, this.onSceneMouseMove.bind(this));
    }
  }, {
    key: "bindPointRenderEvent",
    value: function bindPointRenderEvent() {
      var _this$pointRender;
      _get(_getPrototypeOf(LineMode.prototype), "bindPointRenderEvent", this).call(this);
      (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(_constant.RenderEvent.Click, this.onPointClick.bind(this));
    }
  }, {
    key: "bindLineRenderEvent",
    value: function bindLineRenderEvent() {
      var _this$lineRender, _this$lineRender2, _this$lineRender3, _this$lineRender4, _this$lineRender5, _this$lineRender6;
      (_this$lineRender = this.lineRender) === null || _this$lineRender === void 0 ? void 0 : _this$lineRender.on(_constant.RenderEvent.UnClick, this.onLineUnClick.bind(this));
      (_this$lineRender2 = this.lineRender) === null || _this$lineRender2 === void 0 ? void 0 : _this$lineRender2.on(_constant.RenderEvent.Mousemove, this.onLineMouseMove.bind(this));
      (_this$lineRender3 = this.lineRender) === null || _this$lineRender3 === void 0 ? void 0 : _this$lineRender3.on(_constant.RenderEvent.Mouseout, this.onLineMouseOut.bind(this));
      (_this$lineRender4 = this.lineRender) === null || _this$lineRender4 === void 0 ? void 0 : _this$lineRender4.on(_constant.RenderEvent.Dragstart, this.onLineDragStart.bind(this));
      (_this$lineRender5 = this.lineRender) === null || _this$lineRender5 === void 0 ? void 0 : _this$lineRender5.on(_constant.RenderEvent.Dragging, this.onLineDragging.bind(this));
      (_this$lineRender6 = this.lineRender) === null || _this$lineRender6 === void 0 ? void 0 : _this$lineRender6.on(_constant.RenderEvent.Dragend, this.onLineDragEnd.bind(this));
    }
  }, {
    key: "getDashLineDistanceTexts",
    value: function getDashLineDistanceTexts(dashLines, _ref) {
      var showTotalDistance = _ref.showTotalDistance,
        format = _ref.format,
        showDashDistance = _ref.showDashDistance;
      return showDashDistance ? dashLines.map(function (dashLine) {
        return (0, _utils.calcDistanceTextsByLine)(dashLine, {
          showTotalDistance: showTotalDistance,
          format: format
        }, {
          isActive: true,
          type: 'dash'
        });
      }).flat() : [];
    }
  }, {
    key: "getLineDistanceTexts",
    value: function getLineDistanceTexts(lines, _ref2) {
      var showTotalDistance = _ref2.showTotalDistance,
        format = _ref2.format,
        showWhen = _ref2.showWhen;
      var textList = [];
      if (showWhen.includes('active')) {
        var activeLines = lines.filter(function (line) {
          return line.properties.isActive && line.properties.nodes.length > 1;
        });
        textList.push.apply(textList, _toConsumableArray(activeLines.map(function (line) {
          return (0, _utils.calcDistanceTextsByLine)(line, {
            showTotalDistance: showTotalDistance,
            format: format
          }, {
            isActive: true
          });
        }).flat()));
      }
      if (showWhen.includes('normal')) {
        var normalLines = lines.filter(function (line) {
          return !line.properties.isActive && line.properties.nodes.length > 1;
        });
        textList.push.apply(textList, _toConsumableArray(normalLines.map(function (line) {
          return (0, _utils.calcDistanceTextsByLine)(line, {
            showTotalDistance: showTotalDistance,
            format: format
          });
        }).flat()));
      }
      return textList;
    }
  }, {
    key: "getDistanceTexts",
    value: function getDistanceTexts() {
      var distanceOptions = this.options.distanceOptions;
      if (!distanceOptions) {
        return [];
      }
      var textList = [];
      var showWhen = distanceOptions.showWhen,
        showDashDistance = distanceOptions.showDashDistance,
        format = distanceOptions.format,
        showTotalDistance = distanceOptions.showTotalDistance;
      textList.push.apply(textList, _toConsumableArray(this.getDashLineDistanceTexts(this.getDashLineData(), {
        showTotalDistance: false,
        format: format,
        showDashDistance: showDashDistance
      })).concat(_toConsumableArray(this.getLineDistanceTexts(this.getLineData(), {
        showTotalDistance: showTotalDistance,
        format: format,
        showWhen: showWhen
      }))));
      return textList;
    }
  }, {
    key: "getAllTexts",
    value: function getAllTexts() {
      return this.getDistanceTexts();
    }
    /**
     * 创建LineFeature
     * @param point
     */
  }, {
    key: "handleCreateLine",
    value: function handleCreateLine(point) {
      var newLine = (0, _utils.createLineFeature)([point], {
        isActive: true,
        isDraw: true
      });
      this.setLineData(function (features) {
        return (0, _utils.updateTargetFeature)({
          target: newLine,
          data: [].concat(_toConsumableArray(features), [newLine]),
          otherHandler: function otherHandler(feature) {
            feature.properties.isActive = false;
          }
        });
      });
      this.setPointData([point]);
      this.setTextData(this.getAllTexts());
      return newLine;
    }
    /**
     * 同步当前编辑线中的结点
     * @param line
     * @param nodes
     */
  }, {
    key: "syncLineNodes",
    value: function syncLineNodes(line, nodes) {
      line.properties.nodes = nodes;
      line.geometry.coordinates = (0, _turf.coordAll)((0, _turf.featureCollection)(nodes));
      this.setLineData(function (features) {
        return features.map(function (feature) {
          if ((0, _utils.isSameFeature)(feature, line)) {
            return line;
          }
          return feature;
        });
      });
      if ((0, _utils.isSameFeature)(this.editLine, line)) {
        this.setMidPointData(this.getMidPointsByLine(line));
      }
      this.setPointData(line.properties.nodes);
      this.setTextData(this.getAllTexts());
      return line;
    }
  }, {
    key: "setActiveLine",
    value: function setActiveLine(line) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.setLineData(function (features) {
        return (0, _utils.updateTargetFeature)({
          target: line,
          data: features,
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: true,
              isDrag: false,
              isHover: false
            }, properties);
          },
          otherHandler: function otherHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: false,
              isDrag: false
            });
          }
        });
      });
      this.setPointData(line.properties.nodes.map(function (feature) {
        feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
          isHover: false,
          isActive: false
        });
        return feature;
      }));
      this.setMidPointData(this.getMidPointsByLine(line));
      this.setDashLineData([]);
      this.setTextData(this.getAllTexts());
      return line;
    }
  }, {
    key: "clearActiveLine",
    value: function clearActiveLine() {
      this.source.setData({
        point: [],
        line: this.getLineData().map(function (feature) {
          feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        }),
        midPoint: [],
        text: this.getAllTexts()
      });
    }
  }, {
    key: "handleLineUnClick",
    value: function handleLineUnClick(link) {
      this.clearActiveLine();
      return link;
    }
  }, {
    key: "handleLineHover",
    value: function handleLineHover(line) {
      if (this.drawLine) {
        return;
      }
      this.setCursor('lineHover');
      if (!(0, _utils.isSameFeature)(line, this.hoverLine)) {
        this.setLineData(function (features) {
          return (0, _utils.updateTargetFeature)({
            target: line,
            data: features,
            targetHandler: function targetHandler(feature) {
              feature.properties.isHover = true;
            },
            otherHandler: function otherHandler(feature) {
              feature.properties.isHover = false;
            }
          });
        });
      }
      return line;
    }
  }, {
    key: "handleLineUnHover",
    value: function handleLineUnHover(line) {
      if (this.drawLine) {
        return;
      }
      this.resetCursor();
      this.setLineData(function (features) {
        return features.map(function (feature) {
          feature.properties.isHover = false;
          return feature;
        });
      });
      return line;
    }
  }, {
    key: "handleLineDragStart",
    value: function handleLineDragStart(line) {
      this.setActiveLine(line, {
        isDrag: true,
        isActive: true
      });
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.setCursor('lineDrag');
      return line;
    }
  }, {
    key: "handleLineDragging",
    value: function handleLineDragging(line, _ref3) {
      var lng = _ref3.lng,
        lat = _ref3.lat;
      var nodes = line.properties.nodes;
      var _this$previousPositio = _slicedToArray(this.previousPosition, 2),
        preLng = _this$previousPositio[0],
        preLat = _this$previousPositio[1];
      nodes.forEach(function (node) {
        var coordinates = node.geometry.coordinates;
        node.geometry.coordinates = [coordinates[0] + lng - preLng, coordinates[1] + lat - preLat];
      });
      this.syncLineNodes(line, nodes);
      this.setActiveLine(line, {
        isDrag: true
      });
      this.setCursor('lineDrag');
      this.previousPosition = [lng, lat];
      return line;
    }
  }, {
    key: "handleLineDragEnd",
    value: function handleLineDragEnd(line) {
      line.properties.isDrag = false;
      this.setLineData(function (features) {
        return features;
      });
      this.scene.setMapStatus({
        dragEnable: true
      });
      return line;
    }
  }, {
    key: "resetAdsorbLngLat",
    value: function resetAdsorbLngLat(e) {
      if (!this.options.adsorbOptions) {
        return;
      }
      var adsorbPosition = this.getAdsorbPosition((0, _utils.transLngLat2Position)((0, _utils.getLngLat)(e)));
      if (adsorbPosition) {
        (0, _utils.resetEventLngLat)(e, adsorbPosition);
      }
      return adsorbPosition;
    }
    /**
     * 创建点之后，对应线段的处理
     * @param e
     */
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (this.editLine) {
        return;
      }
      this.resetAdsorbLngLat(e);
      var point = _get(_getPrototypeOf(LineMode.prototype), "onPointCreate", this).call(this, e);
      var drawLine = this.drawLine;
      if (!point) {
        return;
      }
      if (drawLine) {
        this.syncLineNodes(drawLine, [].concat(_toConsumableArray(drawLine.properties.nodes), [point]));
        this.setDashLineData([]);
      } else {
        this.handleCreateLine(point);
      }
      return point;
    }
  }, {
    key: "onPointDragStart",
    value: function onPointDragStart(e) {
      var editLine = this.editLine;
      if (!editLine) {
        return;
      }
      this.setHelper('pointDrag');
      return _get(_getPrototypeOf(LineMode.prototype), "onPointDragStart", this).call(this, e);
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = _get(_getPrototypeOf(LineMode.prototype), "onPointDragging", this).call(this, e);
      if (dragPoint) {
        var adsorbPosition = this.resetAdsorbLngLat(e);
        if (adsorbPosition) {
          dragPoint.geometry.coordinates = (0, _lodash.cloneDeep)(adsorbPosition);
        }
      }
      var editLine = this.editLine;
      if (editLine && dragPoint) {
        this.syncLineNodes(editLine, editLine.properties.nodes.map(function (node) {
          if ((0, _utils.isSameFeature)(dragPoint, node)) {
            return dragPoint;
          }
          return node;
        }));
        this.setActiveLine(editLine);
      }
      return dragPoint;
    }
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var editLine = this.editLine;
      if (editLine) {
        var dragPoint = _get(_getPrototypeOf(LineMode.prototype), "onPointDragEnd", this).call(this, e);
        this.setPointData(function (features) {
          return features.map(function (feature) {
            feature.properties.isActive = false;
            return feature;
          });
        });
        this.setHelper('pointHover');
        return dragPoint;
      }
    }
  }, {
    key: "onLineUnClick",
    value: function onLineUnClick(e) {
      var editLine = this.editLine;
      if (!editLine) {
        return;
      }
      return this.handleLineUnClick(editLine);
    }
  }, {
    key: "onLineMouseMove",
    value: function onLineMouseMove(e) {
      if (this.drawLine) {
        return;
      }
      if (!this.dragLine && !this.drawLine && this.options.editable) {
        this.setHelper('lineHover');
      }
      return this.handleLineHover(e.feature);
    }
  }, {
    key: "onLineMouseOut",
    value: function onLineMouseOut(e) {
      if (this.drawLine) {
        return;
      }
      if (!this.dragLine && !this.drawLine) {
        this.setHelper(this.addable ? 'draw' : null);
      }
      return this.handleLineUnHover(e.feature);
    }
  }, {
    key: "onLineDragStart",
    value: function onLineDragStart(e) {
      if (!this.options.editable || this.drawLine) {
        return;
      }
      this.previousPosition = (0, _utils.getPosition)(e);
      this.setHelper('lineDrag');
      return this.handleLineDragStart(e.feature);
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var dragLine = this.dragLine;
      if (!dragLine) {
        return;
      }
      return this.handleLineDragging(dragLine, (0, _utils.getLngLat)(e));
    }
  }, {
    key: "onLineDragEnd",
    value: function onLineDragEnd(e) {
      var dragLine = this.dragLine;
      if (!dragLine) {
        return;
      }
      this.setHelper('lineHover');
      return this.handleLineDragEnd(dragLine);
    }
  }, {
    key: "onPointMouseMove",
    value: function onPointMouseMove(e) {
      var feature = _get(_getPrototypeOf(LineMode.prototype), "onPointMouseMove", this).call(this, e);
      if (!this.dragLine && !this.drawLine && !this.dragPoint) {
        this.setHelper('pointHover');
      }
      return feature;
    }
  }, {
    key: "onPointMouseOut",
    value: function onPointMouseOut(e) {
      var feature = _get(_getPrototypeOf(LineMode.prototype), "onPointMouseOut", this).call(this, e);
      if (!this.dragLine && !this.drawLine && !this.dragPoint) {
        this.setHelper(this.addable ? 'draw' : null);
      }
      return feature;
    }
  }, {
    key: "onMidPointHover",
    value: function onMidPointHover(e) {
      _get(_getPrototypeOf(LineMode.prototype), "onMidPointHover", this).call(this, e);
      this.setHelper('midPointHover');
    }
  }, {
    key: "onMidPointUnHover",
    value: function onMidPointUnHover(e) {
      _get(_getPrototypeOf(LineMode.prototype), "onMidPointUnHover", this).call(this, e);
      this.setHelper(null);
    }
  }, {
    key: "onPointClick",
    value: function onPointClick(e) {}
    /**
     * 获取线数据
     */
  }, {
    key: "getLineData",
    value: function getLineData() {
      return this.source.getRenderData('line');
    }
    /**
     * 设置线数据
     * @param data
     */
  }, {
    key: "setLineData",
    value: function setLineData(data) {
      return this.source.setRenderData('line', data);
    }
  }, {
    key: "getTextData",
    value: function getTextData() {
      return this.source.getRenderData('text');
    }
  }, {
    key: "setTextData",
    value: function setTextData(data) {
      return this.source.setRenderData('text', data);
    }
    /**
     * 获取线数据
     */
  }, {
    key: "getDashLineData",
    value: function getDashLineData() {
      return this.source.getRenderData('dashLine');
    }
    /**
     * 设置线数据
     * @param data
     */
  }, {
    key: "setDashLineData",
    value: function setDashLineData(data) {
      return this.source.setRenderData('dashLine', data);
    }
  }, {
    key: "onMidPointClick",
    value: function onMidPointClick(e) {
      var editLine = this.editLine;
      var feature = e.feature;
      if (!editLine || !feature || this.dragPoint) {
        return;
      }
      var nodes = editLine.properties.nodes;
      var _feature$properties2 = feature.properties,
        startId = _feature$properties2.startId,
        endId = _feature$properties2.endId;
      var startIndex = nodes.findIndex(function (feature) {
        return feature.properties.id === startId;
      });
      var endIndex = nodes.findIndex(function (feature) {
        return feature.properties.id === endId;
      });
      if (startIndex > -1 && endIndex > -1) {
        var newNode = (0, _utils.createPointFeature)(feature.geometry.coordinates, {
          isDrag: true,
          isHover: true
        });
        this.setHelper('pointDrag');
        nodes.splice(endIndex, 0, newNode);
        editLine.geometry.coordinates = (0, _turf.coordAll)((0, _turf.featureCollection)(nodes));
        this.syncLineNodes(editLine, nodes);
        this.setActiveLine(editLine);
        return newNode;
      }
    }
  }, {
    key: "enableSceneRenderAction",
    value: function enableSceneRenderAction() {
      this.sceneRender.enableDrag();
      this.sceneRender.enableMouseMove();
      this.sceneRender.enableDblClick();
    }
  }, {
    key: "disableSceneRenderAction",
    value: function disableSceneRenderAction() {
      this.sceneRender.disableDrag();
      this.sceneRender.disableMouseMove();
      this.sceneRender.disableDblClick();
    }
  }, {
    key: "enableLineRenderAction",
    value: function enableLineRenderAction() {
      var _this$lineRender7;
      var editable = this.options.editable;
      (_this$lineRender7 = this.lineRender) === null || _this$lineRender7 === void 0 ? void 0 : _this$lineRender7.enableUnClick();
      if (editable) {
        var _this$lineRender8, _this$lineRender9;
        (_this$lineRender8 = this.lineRender) === null || _this$lineRender8 === void 0 ? void 0 : _this$lineRender8.enableHover();
        (_this$lineRender9 = this.lineRender) === null || _this$lineRender9 === void 0 ? void 0 : _this$lineRender9.enableDrag();
      }
    }
  }, {
    key: "disableLineRenderAction",
    value: function disableLineRenderAction() {
      var _this$lineRender10, _this$lineRender11, _this$lineRender12;
      (_this$lineRender10 = this.lineRender) === null || _this$lineRender10 === void 0 ? void 0 : _this$lineRender10.disableUnClick();
      (_this$lineRender11 = this.lineRender) === null || _this$lineRender11 === void 0 ? void 0 : _this$lineRender11.disableHover();
      (_this$lineRender12 = this.lineRender) === null || _this$lineRender12 === void 0 ? void 0 : _this$lineRender12.disableDrag();
    }
  }]);
  return LineMode;
}(_midPointMode.MidPointMode);