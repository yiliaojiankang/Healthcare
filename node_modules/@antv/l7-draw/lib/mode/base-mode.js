"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseMode = void 0;
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
var _lodash = require("lodash");
var _mousetrap = _interopRequireDefault(require("mousetrap"));
var _constant = require("../constant");
var _interactive = require("../interactive");
var _render = require("../render");
var _source = require("../source");
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var BaseMode = exports.BaseMode = /*#__PURE__*/function (_EventEmitter) {
  _inherits(BaseMode, _EventEmitter);
  var _super = _createSuper(BaseMode);
  function BaseMode(scene, options) {
    var _this;
    _classCallCheck(this, BaseMode);
    _this = _super.call(this);
    /**
     * L7 场景实例，在构造器中传入
     */
    _this.scene = void 0;
    /**
     * 数据管理中心
     */
    _this.source = void 0;
    /**
     * 渲染器render对象
     */
    _this.render = void 0;
    /**
     * 指针管理器
     * @protected
     */
    _this.cursor = void 0;
    /**
     * Drawer 配置
     */
    _this.options = void 0;
    /**
     * 当前Drawer是否为开启绘制状态
     */
    _this.enabled = false;
    // 在 enable 时传入，用于判断当前是否支持添加操作
    _this.allowCreate = false;
    /**
     * scene相关事件管理
     * @protected
     */
    _this.sceneRender = void 0;
    /**
     * 光标在地图上的经纬度位置
     * @protected
     */
    _this.mouseLngLat = {
      lng: 0,
      lat: 0
    };
    _this.popup = void 0;
    /**
     * 本次enable添加的绘制物个数
     * @protected
     */
    _this.addCount = 0;
    // 用于收集当前鼠标所在经纬度的回调函数，用于在数据回退时，若有存在绘制中的数据，伪造mousemove事件时使用
    _this.saveMouseLngLat = (0, _lodash.debounce)(function (e) {
      _this.mouseLngLat = (0, _utils.getLngLat)(e);
    }, 100, {
      maxWait: 100
    });
    /**
     * 保存当前数据备份
     */
    _this.saveHistory = (0, _lodash.debounce)(function () {
      if (!_this.options.history) {
        return;
      }
      _this.source.saveHistory();
    }, 100);
    _this.bindThis();
    _this.scene = scene;
    _this.sceneRender = new _render.SceneRender(scene);
    _this.options = (0, _lodash.merge)({}, _this.getDefaultOptions(options), options);
    _this.render = _this.initRender();
    _this.source = new _source.Source({
      render: _this.render,
      history: _this.options.history || undefined,
      scene: scene
    });
    _this.cursor = new _interactive.Cursor(scene, _this.options.cursor);
    var _this$options = _this.options,
      initialData = _this$options.initialData,
      popup = _this$options.popup;
    if (initialData) {
      _this.setData(initialData);
    }
    if (popup) {
      _this.popup = new _interactive.Popup(scene, popup instanceof Object ? popup : {});
    }
    _this.saveHistory();
    _this.bindCommonEvent();
    _this.emit(_constant.DrawEvent.Init, _assertThisInitialized(_this));
    _this.bindEnableEvent();
    BaseMode.instances.push(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * 获取当前options配置的方法
   */
  _createClass(BaseMode, [{
    key: "addable",
    get:
    /**
     * 当期是否可以添加新的绘制物
     */
    function get() {
      var data = this.getData();
      var _this$options2 = this.options,
        multiple = _this$options2.multiple,
        maxCount = _this$options2.maxCount;
      var drawItem = data.find(function (item) {
        return item.properties.isDraw;
      });
      if (!this.enabled || !this.allowCreate) {
        return false;
      }
      if (multiple && maxCount <= 0 || drawItem) {
        return true;
      }
      if (!multiple && this.addCount >= 1) {
        return false;
      }
      if (maxCount > 0 && data.length >= maxCount) {
        return false;
      }
      return true;
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }
    /**
     * 获取当前激活的绘制项
     */
  }, {
    key: "getEditItem",
    value: function getEditItem() {
      return this.editItem;
    }
    /**
     * 获取当前正在被拖拽的绘制项
     */
  }, {
    key: "getDragItem",
    value: function getDragItem() {
      return this.dragItem;
    }
  }, {
    key: "setHelper",
    value: function setHelper(type) {
      var _ref, _this$popup;
      var helper = this.options.helper;
      if (!helper) {
        return;
      }
      // @ts-ignore
      var content = (_ref = type in helper ? helper[type] : type) !== null && _ref !== void 0 ? _ref : null;
      (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.setContent(content);
    }
    /**
     * 获取当前是否为编辑态
     */
  }, {
    key: "isEnable",
    value: function isEnable() {
      return this.enabled;
    }
    /**
     * 绑定回调函数的this指向
     */
  }, {
    key: "bindThis",
    value: function bindThis() {
      this.initRender = this.initRender.bind(this);
      this.getData = this.getData.bind(this);
      this.setData = this.setData.bind(this);
      this.emitChangeEvent = this.emitChangeEvent.bind(this);
      this.saveHistory = this.saveHistory.bind(this);
      this.onSceneMouseMove = this.onSceneMouseMove.bind(this);
      this.revertHistory = this.revertHistory.bind(this);
      this.redoHistory = this.redoHistory.bind(this);
      this.removeActiveFeature = this.removeActiveFeature.bind(this);
      this.bindCommonEvent = this.bindCommonEvent.bind(this);
      this.bindEnableEvent = this.bindEnableEvent.bind(this);
      this.unbindEnableEvent = this.unbindEnableEvent.bind(this);
      this.setActiveFeature = this.setActiveFeature.bind(this);
    }
  }, {
    key: "bindCommonEvent",
    value: function bindCommonEvent() {
      var _this2 = this;
      this.on(_constant.DrawEvent.Add, this.emitChangeEvent);
      this.on(_constant.DrawEvent.Add, function () {
        _this2.addCount++;
      });
      this.on(_constant.DrawEvent.Edit, this.emitChangeEvent);
      this.on(_constant.DrawEvent.Remove, this.emitChangeEvent);
      this.on(_constant.DrawEvent.Clear, this.emitChangeEvent);
      this.on(_constant.DrawEvent.AddNode, this.saveHistory);
      this.on(_constant.DrawEvent.RemoveNode, this.emitChangeEvent);
      this.bindEmitSelectEvent(true);
    }
    /**
     * 绑定判断 select 事件方法
     * @param emit
     */
  }, {
    key: "bindEmitSelectEvent",
    value: function bindEmitSelectEvent() {
      var _this3 = this;
      var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var previousSelectFeature = null;
      var onSourceChange = function onSourceChange() {
        var _previousSelectFeatur, _previousSelectFeatur2, _newSelectFeature$pro;
        var newSelectFeature = _this3.getData().find(function (feature) {
          var _feature$properties;
          return (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.isActive;
        }) || null;
        if (((_previousSelectFeatur = previousSelectFeature) === null || _previousSelectFeatur === void 0 ? void 0 : (_previousSelectFeatur2 = _previousSelectFeatur.properties) === null || _previousSelectFeatur2 === void 0 ? void 0 : _previousSelectFeatur2.id) !== (newSelectFeature === null || newSelectFeature === void 0 ? void 0 : (_newSelectFeature$pro = newSelectFeature.properties) === null || _newSelectFeature$pro === void 0 ? void 0 : _newSelectFeature$pro.id)) {
          // @ts-ignore
          previousSelectFeature = newSelectFeature;
          _this3.emit(_constant.DrawEvent.Select, newSelectFeature);
        }
      };
      this.source.on(_constant.SourceEvent.Change, onSourceChange);
      if (emit) {
        onSourceChange();
      }
    }
    /**
     * 监听通用事件
     */
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      this.unbindKeyboardEvent();
      this.scene.setMapStatus({
        doubleClickZoom: false
      });
      this.scene.on(_constant.SceneEvent.Mousemove, this.saveMouseLngLat);
      this.bindKeyboardEvent();
    }
    /**
     * 监听通用事件
     */
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      this.scene.setMapStatus({
        doubleClickZoom: true
      });
      this.scene.off(_constant.SceneEvent.Mousemove, this.saveMouseLngLat);
      this.unbindKeyboardEvent();
    }
    // 快捷键绑定
  }, {
    key: "bindKeyboardEvent",
    value: function bindKeyboardEvent() {
      var _this4 = this;
      var _ref2 = this.options.keyboard || {},
        revert = _ref2.revert,
        redo = _ref2.redo,
        remove = _ref2.remove;
      remove && _mousetrap.default.bind(remove, function () {
        _this4.removeActiveFeature();
      });
      if (this.options.history) {
        revert && _mousetrap.default.bind(revert, this.revertHistory);
        redo && _mousetrap.default.bind(redo, this.redoHistory);
      }
    }
    // 快捷键解绑
  }, {
    key: "unbindKeyboardEvent",
    value: function unbindKeyboardEvent() {
      var _ref3 = this.options.keyboard || {},
        revert = _ref3.revert,
        redo = _ref3.redo,
        remove = _ref3.remove;
      remove && _mousetrap.default.unbind(remove);
      if (this.options.history) {
        revert && _mousetrap.default.unbind(revert);
        redo && _mousetrap.default.unbind(redo);
      }
    }
  }, {
    key: "emitChangeEvent",
    value:
    /**
     * 触发change事件，同时触发保存数据备份
     */
    function emitChangeEvent() {
      this.emit(_constant.DrawEvent.Change, this.getData());
      this.saveHistory();
    }
  }, {
    key: "revertHistory",
    value:
    /**
     * 回退至上一次数据备份
     */
    function revertHistory() {
      if (!this.enabled || !this.options.history) {
        return;
      }
      if (this.source.revertHistory()) {
        this.correctDrawItem();
        this.emit(_constant.DrawEvent.Change, this.getData());
      }
    }
    /**
     * 重做回退之前的数据备份
     */
  }, {
    key: "redoHistory",
    value: function redoHistory() {
      if (!this.enabled || !this.options.history) {
        return;
      }
      if (this.source.redoHistory()) {
        this.correctDrawItem();
        this.emit(_constant.DrawEvent.Change, this.getData());
      }
    }
    /**
     * 获取 renderType 与对应 L7图层的键值对
     */
  }, {
    key: "getRenderLayers",
    value: function getRenderLayers() {
      return (0, _lodash.fromPairs)((0, _lodash.toPairs)(this.render).map(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
          renderType = _ref5[0],
          render = _ref5[1];
        return [renderType, render.getLayers()];
      }));
    }
    // 传入 Feature 或者 id 获取当前数据中的目标 Feature
  }, {
    key: "getTargetFeature",
    value: function getTargetFeature(target) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getData();
      var targetFeature = null;
      if (target) {
        var _data$find;
        targetFeature = (_data$find = data.find(function (feature) {
          var _target$properties;
          return feature.properties.id === (typeof target === 'string' ? target : (_target$properties = target.properties) === null || _target$properties === void 0 ? void 0 : _target$properties.id);
        })) !== null && _data$find !== void 0 ? _data$find : null;
        if (!targetFeature && target instanceof Object) {
          var _data$find2;
          targetFeature = (_data$find2 = data.find(function (feature) {
            return (0, _lodash.isEqual)(target.geometry, feature.geometry);
          })) !== null && _data$find2 !== void 0 ? _data$find2 : null;
        }
      }
      return targetFeature;
    }
    /**
     * 删除当前active的绘制物
     */
  }, {
    key: "removeActiveFeature",
    value: function removeActiveFeature() {
      var activeItem = this.getData().find(function (item) {
        var _item$properties = item.properties,
          isActive = _item$properties.isActive,
          isDraw = _item$properties.isDraw;
        return isActive || isDraw;
      });
      if (activeItem) {
        this.removeFeature(activeItem);
      }
      return activeItem;
    }
    /**
     * 删除指定
     * @param target
     */
  }, {
    key: "removeFeature",
    value: function removeFeature(target) {
      var data = this.getData();
      var targetFeature = this.getTargetFeature(target);
      if (targetFeature) {
        // @ts-ignore
        this.setData(data.filter(function (feature) {
          return !(0, _utils.isSameFeature)(targetFeature, feature);
        }));
        this.emit(_constant.DrawEvent.Remove, target, this.getData());
      }
    }
    /**
     * 矫正正在绘制Feature的虚线部分（Drawer中都是在onSceneMouseMove中进行绘制）
     */
  }, {
    key: "correctDrawItem",
    value: function correctDrawItem() {
      var drawItem = this.getData().find(function (item) {
        return item.properties.isDraw;
      });
      // 如果当前有正在绘制的元素，需要将虚线部分与鼠标位置表现一致，而非history保存时的虚线位置
      if (drawItem) {
        this.onSceneMouseMove({
          type: 'mousemove',
          lnglat: this.mouseLngLat,
          lngLat: this.mouseLngLat
        });
      }
    }
    /**
     * 根据子类实现的 getRenderTypes 方法，初始化对应的Render实例。
     */
  }, {
    key: "initRender",
    value: function initRender() {
      var renderMap = {};
      var renderTypeList = this.getRenderTypes();
      var _iterator = _createForOfIteratorHelper(renderTypeList),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var renderType = _step.value;
          var Render = _constant.RENDER_MAP[renderType];
          var style = this.options.style[renderType];
          // @ts-ignore
          renderMap[renderType] = new Render(this.scene, {
            // @ts-ignore
            style: style
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return renderMap;
    }
    /**
     * 根据用户传入的options返回通用的options默认配置
     * @param options
     */
  }, {
    key: "getCommonOptions",
    value: function getCommonOptions(options) {
      return {
        initialData: [],
        autoActive: true,
        cursor: (0, _lodash.cloneDeep)(_constant.DEFAULT_CURSOR_MAP),
        editable: true,
        style: (0, _lodash.cloneDeep)(_constant.DEFAULT_STYLE),
        multiple: true,
        history: (0, _lodash.cloneDeep)(_constant.DEFAULT_HISTORY_CONFIG),
        keyboard: (0, _lodash.cloneDeep)(_constant.DEFAULT_KEYBOARD_CONFIG),
        popup: true,
        helper: {},
        maxCount: -1
      };
    }
    /**
     * 设置地图上光标样式类型
     * @param cursor
     */
  }, {
    key: "setCursor",
    value: function setCursor(cursor) {
      this.cursor.setCursor(cursor);
    }
    /**
     * 重置光标到常规状态
     */
  }, {
    key: "resetCursor",
    value: function resetCursor() {
      this.setCursor(this.addable ? 'draw' : null);
    }
    /**
     * 启用 Drawer
     * @param allowCreate 是否支持添加操作
     */
  }, {
    key: "enable",
    value: function enable() {
      var _this5 = this;
      var allowCreate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.allowCreate = allowCreate;
      this.addCount = 0;
      this.enabled = true;
      this.bindEnableEvent();
      this.resetCursor();
      this.setHelper(this.addable ? 'draw' : null);
      setTimeout(function () {
        _this5.emit(_constant.DrawEvent.Enable, _this5);
      }, 0);
    }
    /**
     * 禁用Drawer
     */
  }, {
    key: "disable",
    value: function disable() {
      var _this6 = this;
      this.resetFeatures();
      this.enabled = false;
      this.setCursor(null);
      this.unbindEnableEvent();
      this.addCount = 0;
      this.setHelper(null);
      setTimeout(function () {
        _this6.emit(_constant.DrawEvent.Disable, _this6);
      }, 0);
    }
    /**
     * 清空所有数据
     */
  }, {
    key: "clear",
    value: function clear() {
      var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.source.clear();
      this.emit(_constant.DrawEvent.Clear, this);
      if (disable) {
        this.disable();
      }
    }
    /**
     * 显示该Drawer下所有图层
     */
  }, {
    key: "show",
    value: function show() {
      return Object.values(this.render).forEach(function (render) {
        render.show();
      });
    }
    /**
     * 隐藏该Drawer下所有图层
     */
  }, {
    key: "hide",
    value: function hide() {
      return Object.values(this.render).forEach(function (render) {
        render.hide();
      });
    }
    /**
     * 销毁当前Drawer
     */
  }, {
    key: "destroy",
    value: function destroy() {
      var _this7 = this,
        _this$popup2;
      Object.values(this.render).forEach(function (render) {
        render.destroy();
      });
      Object.values(_constant.RenderEvent).forEach(function (EventName) {
        Object.values(_this7.render).forEach(function (render) {
          render.removeAllListeners(EventName);
        });
        _this7.sceneRender.removeAllListeners(EventName);
      });
      setTimeout(function () {
        Object.values(_constant.DrawEvent).forEach(function (EventName) {
          _this7.removeAllListeners(EventName);
        });
      }, 0);
      (_this$popup2 = this.popup) === null || _this$popup2 === void 0 ? void 0 : _this$popup2.destroy();
      this.cursor.destroy();
      this.emit(_constant.DrawEvent.Destroy, this);
      var targetIndex = BaseMode.instances.indexOf(this);
      if (targetIndex > -1) {
        BaseMode.instances.splice(targetIndex, 1);
      }
    }
  }]);
  return BaseMode;
}(_eventemitter.default);
BaseMode.instances = [];