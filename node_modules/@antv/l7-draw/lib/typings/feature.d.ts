import { Geometry, GeometryCollection } from '@turf/helpers/dist/js/lib/geojson';
import { Feature, LineString, Point, Polygon } from '@turf/turf';
export interface IBaseProperties {
    id: string;
    isDraw?: boolean;
    isActive?: boolean;
    [key: string]: any;
}
export interface IBaseFeature<G extends Geometry | GeometryCollection = Geometry, P extends IBaseProperties = IBaseProperties> extends Feature {
    type: 'Feature';
    geometry: G;
    properties: P;
}
export interface IPointProperties extends IBaseProperties {
    isHover?: boolean;
    isDrag?: boolean;
    createTime: number;
}
export type IPointFeature = IBaseFeature<Point, IPointProperties>;
export interface ILineProperties extends IBaseProperties {
    nodes: IPointFeature[];
    isHover?: boolean;
    isDrag?: boolean;
    createTime: number;
}
export type ILineFeature = IBaseFeature<LineString, ILineProperties>;
export interface IPolygonProperties extends IBaseProperties {
    nodes: IPointFeature[];
    line: ILineFeature;
    isHover?: boolean;
    isDrag?: boolean;
    createTime: number;
}
export type IPolygonFeature = IBaseFeature<Polygon, IPolygonProperties>;
export interface IMidPointProperties extends IBaseProperties {
    startId: string;
    endId: string;
}
export type IMidPointFeature = IBaseFeature<Point, IMidPointProperties>;
export type IDashLineFeature = IBaseFeature<LineString, IBaseProperties>;
export interface ITextProperties extends IBaseProperties {
    type: 'distance' | 'totalDistance' | 'dash' | 'area';
    text: string;
    meters: number;
}
export type ITextFeature = IBaseFeature<Point, ITextProperties>;
export type FeatureUpdater<F extends IBaseFeature> = F[] | ((newFeatures: F[]) => F[]);
