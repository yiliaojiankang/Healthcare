"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointDrawer = void 0;
var _constant = require("../constant");
var _mode = require("../mode");
var _utils = require("../utils");
var _helper = require("../constant/helper");
var _lodash = require("lodash");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var PointDrawer = exports.PointDrawer = /*#__PURE__*/function (_PointMode) {
  _inherits(PointDrawer, _PointMode);
  var _super = _createSuper(PointDrawer);
  function PointDrawer(scene, options) {
    var _this;
    _classCallCheck(this, PointDrawer);
    _this = _super.call(this, scene, options);
    _this.bindPointRenderEvent();
    return _this;
  }
  _createClass(PointDrawer, [{
    key: "dragItem",
    get: function get() {
      return this.dragPoint;
    }
  }, {
    key: "editItem",
    get: function get() {
      return this.editPoint;
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var defaultOptions = _objectSpread(_objectSpread({}, this.getCommonOptions(options)), {}, {
        helper: (0, _lodash.cloneDeep)(_helper.DEFAULT_POINT_HELPER_CONFIG),
        initialData: options.initialData
      });
      defaultOptions.style.point = _constant.DEFAULT_POINT_STYLE;
      return defaultOptions;
    }
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      _get(_getPrototypeOf(PointDrawer.prototype), "bindEnableEvent", this).call(this);
      this.enablePointRenderAction();
    }
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      _get(_getPrototypeOf(PointDrawer.prototype), "unbindEnableEvent", this).call(this);
      this.disablePointRenderAction();
    }
  }, {
    key: "getRenderTypes",
    value: function getRenderTypes() {
      return ['point'];
    }
  }, {
    key: "getMainLayer",
    value: function getMainLayer() {
      var _this$render$point$ge, _this$render$point;
      return (_this$render$point$ge = (_this$render$point = this.render.point) === null || _this$render$point === void 0 ? void 0 : _this$render$point.getLayers()) !== null && _this$render$point$ge !== void 0 ? _this$render$point$ge : [];
    }
  }, {
    key: "setData",
    value: function setData(points) {
      this.setPointData(points.map(function (point) {
        var _point$properties;
        point.properties = _objectSpread(_objectSpread({}, (0, _utils.getDefaultPointProperties)()), (_point$properties = point.properties) !== null && _point$properties !== void 0 ? _point$properties : {});
        return point;
      }));
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.getPointData();
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (!this.addable) {
        this.setPointData(function (features) {
          return features.map(function (feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isHover: false,
              isActive: false
            });
            return feature;
          });
        });
        return;
      }
      var newFeature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointCreate", this).call(this, e);
      if (!newFeature) {
        return;
      }
      if (this.options.editable) {
        this.setHelper('pointHover');
      }
      this.emit(_constant.DrawEvent.Add, newFeature, this.getData());
      return newFeature;
    }
  }, {
    key: "onPointMouseMove",
    value: function onPointMouseMove(e) {
      var feature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointMouseMove", this).call(this, e);
      if (this.options.editable && !this.dragPoint) {
        this.setHelper('pointHover');
      }
      return feature;
    }
  }, {
    key: "onPointMouseOut",
    value: function onPointMouseOut(e) {
      var feature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointMouseOut", this).call(this, e);
      this.setHelper(this.addable ? 'draw' : null);
      return feature;
    }
  }, {
    key: "onPointDragStart",
    value: function onPointDragStart(e) {
      var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragStart", this).call(this, e);
      this.setHelper('pointDrag');
      this.emit(_constant.DrawEvent.DragStart, dragPoint, this.getData());
      return dragPoint;
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragging", this).call(this, e);
      if (dragPoint && this.options.editable) {
        this.emit(_constant.DrawEvent.Dragging, dragPoint, this.getData());
      }
      return dragPoint;
    }
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragEnd", this).call(this, e);
      if (dragPoint && this.options.editable) {
        this.setHelper('pointHover');
        this.emit(_constant.DrawEvent.DragEnd, dragPoint, this.getData());
        this.emit(_constant.DrawEvent.Edit, dragPoint, this.getData());
      }
      return dragPoint;
    }
  }, {
    key: "bindThis",
    value: function bindThis() {
      _get(_getPrototypeOf(PointDrawer.prototype), "bindThis", this).call(this);
      this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {}
  }, {
    key: "setActiveFeature",
    value: function setActiveFeature(target) {
      var targetFeature = this.getTargetFeature(target);
      this.setPointData(function (oldData) {
        return oldData.map(function (feature) {
          feature.properties.isActive = (0, _utils.isSameFeature)(targetFeature, feature);
          return feature;
        });
      });
    }
  }, {
    key: "resetFeatures",
    value: function resetFeatures() {
      this.setPointData(function (features) {
        return features.map(function (feature) {
          feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        });
      });
    }
  }]);
  return PointDrawer;
}(_mode.PointMode);