"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineDrawer = void 0;
var _turf = require("@turf/turf");
var _lodash = require("lodash");
var _constant = require("../constant");
var _mode = require("../mode");
var _utils = require("../utils");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var LineDrawer = exports.LineDrawer = /*#__PURE__*/function (_LineMode) {
  _inherits(LineDrawer, _LineMode);
  var _super = _createSuper(LineDrawer);
  function LineDrawer(scene, options) {
    var _this;
    _classCallCheck(this, LineDrawer);
    _this = _super.call(this, scene, options);
    _this.drawLineFinish = function () {
      var _drawLine$properties$;
      var drawLine = _this.drawLine;
      var nodes = (_drawLine$properties$ = drawLine === null || drawLine === void 0 ? void 0 : drawLine.properties.nodes) !== null && _drawLine$properties$ !== void 0 ? _drawLine$properties$ : [];
      if (!drawLine || (nodes === null || nodes === void 0 ? void 0 : nodes.length) <= 1) {
        return;
      }
      _this.setActiveLine(drawLine);
      var _this$options = _this.options,
        autoActive = _this$options.autoActive,
        editable = _this$options.editable;
      if (!autoActive || !editable) {
        _this.handleLineUnClick(drawLine);
      }
      if (editable && autoActive) {
        _this.setHelper('pointHover');
      } else {
        _this.setHelper(_this.addable ? 'draw' : null);
      }
      _this.emit(_constant.DrawEvent.Add, drawLine, _this.getLineData());
    };
    _this.sceneRender.on(_constant.RenderEvent.DblClick, _this.drawLineFinish);
    _this.bindPointRenderEvent();
    _this.bindSceneEvent();
    _this.bindMidPointRenderEvent();
    _this.bindLineRenderEvent();
    return _this;
  }
  _createClass(LineDrawer, [{
    key: "dragItem",
    get: function get() {
      return this.dragLine;
    }
  }, {
    key: "editItem",
    get: function get() {
      return this.editLine;
    }
  }, {
    key: "getMainLayer",
    value: function getMainLayer() {
      var _this$render$line$get, _this$render$line;
      return (_this$render$line$get = (_this$render$line = this.render.line) === null || _this$render$line === void 0 ? void 0 : _this$render$line.getLayers()) !== null && _this$render$line$get !== void 0 ? _this$render$line$get : [];
    }
  }, {
    key: "setData",
    value: function setData(lines) {
      var lineFeatures = lines.map(function (line) {
        var _line$properties, _line$properties$node;
        line.properties = _objectSpread(_objectSpread({}, (0, _utils.getDefaultLineProperties)()), (_line$properties = line.properties) !== null && _line$properties !== void 0 ? _line$properties : {});
        if (!((_line$properties$node = line.properties.nodes) === null || _line$properties$node === void 0 ? void 0 : _line$properties$node.length)) {
          line.properties.nodes = (0, _turf.coordAll)(line).map(function (position) {
            return (0, _utils.createPointFeature)(position);
          });
        }
        return line;
      });
      this.source.setData({
        point: [],
        midPoint: [],
        dashLine: [],
        line: lineFeatures
      });
      this.setTextData(this.getAllTexts());
      if (this.editLine) {
        this.setActiveLine(this.editLine);
      }
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.getLineData();
    }
  }, {
    key: "getRenderTypes",
    value: function getRenderTypes() {
      return ['line', 'dashLine', 'midPoint', 'point', 'text'];
    }
  }, {
    key: "bindPointRenderEvent",
    value: function bindPointRenderEvent() {
      var _this$pointRender;
      _get(_getPrototypeOf(LineDrawer.prototype), "bindPointRenderEvent", this).call(this);
      (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(_constant.RenderEvent.Contextmenu, this.onPointContextMenu.bind(this));
    }
  }, {
    key: "onPointClick",
    value: function onPointClick(e) {
      var _drawLine$properties$2,
        _this2 = this;
      var drawLine = this.drawLine;
      var nodes = (_drawLine$properties$2 = drawLine === null || drawLine === void 0 ? void 0 : drawLine.properties.nodes) !== null && _drawLine$properties$2 !== void 0 ? _drawLine$properties$2 : [];
      var feature = e.feature;
      if ((0, _utils.isSameFeature)(feature, (0, _lodash.last)(nodes))) {
        requestAnimationFrame(function () {
          _this2.drawLineFinish();
        });
      } else {
        var _feature$geometry$coo = _slicedToArray(feature.geometry.coordinates, 2),
          lng = _feature$geometry$coo[0],
          lat = _feature$geometry$coo[1];
        e.lngLat = {
          lng: lng,
          lat: lat
        };
        this.onPointCreate(e);
      }
    }
  }, {
    key: "removeNode",
    value: function removeNode(node, feature) {
      var _targetFeature$proper;
      var targetFeature = this.getTargetFeature(feature);
      var targetNode = this.getTargetFeature(node, (_targetFeature$proper = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper !== void 0 ? _targetFeature$proper : []);
      if (targetFeature && targetNode) {
        var _targetFeature$proper2;
        var nodes = (_targetFeature$proper2 = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper2 !== void 0 ? _targetFeature$proper2 : [];
        if (nodes.length < 3) {
          return;
        }
        this.syncLineNodes(targetFeature, nodes.filter(function (node) {
          return !(0, _utils.isSameFeature)(targetNode, node);
        }));
        this.emit(_constant.DrawEvent.RemoveNode, targetNode, targetFeature, this.getLineData());
        this.emit(_constant.DrawEvent.Edit, targetFeature, this.getLineData());
      }
    }
  }, {
    key: "onPointContextMenu",
    value: function onPointContextMenu(e) {
      var _editLine$properties$;
      var editLine = this.editLine;
      var deleteNode = e.feature;
      var nodes = (_editLine$properties$ = editLine === null || editLine === void 0 ? void 0 : editLine.properties.nodes) !== null && _editLine$properties$ !== void 0 ? _editLine$properties$ : [];
      if (!editLine || nodes.length < 3) {
        return;
      }
      this.removeNode(deleteNode, editLine);
      this.scene.setMapStatus({
        dragEnable: true
      });
      return deleteNode;
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (!this.addable) {
        return;
      }
      var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onPointCreate", this).call(this, e);
      if (feature) {
        this.setHelper('drawFinish');
        this.emit(_constant.DrawEvent.AddNode, feature, this.drawLine, this.getLineData());
      }
      return feature;
    }
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var editLine = this.editLine;
      var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onPointDragEnd", this).call(this, e);
      if (editLine && feature) {
        this.emit(_constant.DrawEvent.Edit, editLine, this.getLineData());
      }
      return feature;
    }
  }, {
    key: "onLineDragStart",
    value: function onLineDragStart(e) {
      var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onLineDragStart", this).call(this, e);
      if (feature) {
        this.emit(_constant.DrawEvent.DragStart, feature, this.getLineData());
      }
      return feature;
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onLineDragging", this).call(this, e);
      if (feature) {
        this.emit(_constant.DrawEvent.Dragging, feature, this.getLineData());
      }
      return feature;
    }
  }, {
    key: "onLineDragEnd",
    value: function onLineDragEnd(e) {
      var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onLineDragEnd", this).call(this, e);
      if (feature) {
        this.emit(_constant.DrawEvent.DragEnd, feature, this.getLineData());
        this.emit(_constant.DrawEvent.Edit, feature, this.getLineData());
      }
      return feature;
    }
  }, {
    key: "onMidPointClick",
    value: function onMidPointClick(e) {
      var editLine = this.editLine;
      var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onMidPointClick", this).call(this, e);
      if (editLine && feature) {
        this.emit(_constant.DrawEvent.Edit, editLine, this.getLineData());
        this.emit(_constant.DrawEvent.AddNode, feature, editLine, this.getLineData());
      }
      return feature;
    }
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {
      var drawLine = this.drawLine;
      if (!drawLine) {
        return;
      }
      var lastNode = (0, _lodash.last)(drawLine.properties.nodes);
      var mousePosition = (0, _utils.getPosition)(e);
      if (this.options.adsorbOptions) {
        var _this$getAdsorbPositi;
        mousePosition = (_this$getAdsorbPositi = this.getAdsorbPosition(mousePosition)) !== null && _this$getAdsorbPositi !== void 0 ? _this$getAdsorbPositi : mousePosition;
      }
      this.setDashLineData([(0, _utils.createDashLine)([mousePosition, lastNode.geometry.coordinates])]);
      this.setTextData(this.getAllTexts());
    }
  }, {
    key: "setActiveFeature",
    value: function setActiveFeature(target) {
      var targetFeature = this.getTargetFeature(target);
      if (targetFeature) {
        this.setActiveLine(targetFeature);
      } else {
        this.clearActiveLine();
      }
    }
  }, {
    key: "resetFeatures",
    value: function resetFeatures() {
      var features = this.getLineData();
      if (this.drawLine) {
        features = features.filter(function (feature) {
          return !feature.properties.isDraw;
        });
        this.source.setData({
          point: [],
          dashLine: [],
          midPoint: []
        });
        this.setTextData(function (features) {
          return features.filter(function (feature) {
            return !feature.properties.isActive;
          });
        });
      }
      if (this.editLine) {
        this.handleLineUnClick(this.editLine);
      }
      this.setLineData(features.map(function (feature) {
        feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
          isDrag: false,
          isActive: false,
          isHover: false
        });
        return feature;
      }));
    }
  }, {
    key: "enablePointRenderAction",
    value: function enablePointRenderAction() {
      _get(_getPrototypeOf(LineDrawer.prototype), "enablePointRenderAction", this).call(this);
      if (this.options.editable) {
        var _this$pointRender2;
        (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.enableContextMenu();
      }
    }
  }, {
    key: "disablePointRenderAction",
    value: function disablePointRenderAction() {
      var _this$pointRender3;
      _get(_getPrototypeOf(LineDrawer.prototype), "disablePointRenderAction", this).call(this);
      (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.disableContextMenu();
    }
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      _get(_getPrototypeOf(LineDrawer.prototype), "bindEnableEvent", this).call(this);
      this.enableSceneRenderAction();
      this.enablePointRenderAction();
      this.enableLineRenderAction();
      this.enableMidPointRenderAction();
      this.sceneRender.enableDblClick();
    }
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      _get(_getPrototypeOf(LineDrawer.prototype), "unbindEnableEvent", this).call(this);
      this.disableSceneRenderAction();
      this.disablePointRenderAction();
      this.disableLineRenderAction();
      this.disableMidPointRenderAction();
      this.sceneRender.disableDblClick();
    }
  }, {
    key: "bindThis",
    value: function bindThis() {
      _get(_getPrototypeOf(LineDrawer.prototype), "bindThis", this).call(this);
      this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
      this.bindSceneEvent = this.bindSceneEvent.bind(this);
      this.bindLineRenderEvent = this.bindLineRenderEvent.bind(this);
      this.bindMidPointRenderEvent = this.bindMidPointRenderEvent.bind(this);
    }
  }]);
  return LineDrawer;
}(_mode.LineMode);