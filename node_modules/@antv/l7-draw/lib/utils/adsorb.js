"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAdsorbPoint = exports.getAdsorbLine = exports.getAdsorbFeature = void 0;
var _mode = require("../mode");
var _turf = require("@turf/turf");
var _common = require("./common");
var _lodash = require("lodash");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * 获取当前数据对应的吸附点、线数组
 * @param adsorbDataConfig
 * @param draw
 * @param position
 */
var getAdsorbFeature = exports.getAdsorbFeature = function getAdsorbFeature(adsorbDataConfig, draw, position) {
  var features = [];
  var adsorbPoints = [];
  var adsorbLines = [];
  if (adsorbDataConfig === 'allDrawData') {
    features = _mode.BaseMode.instances.map(function (draw) {
      return draw.getData();
    }).flat();
  } else if (adsorbDataConfig === 'drawData') {
    features = draw.getData();
  } else if (adsorbDataConfig instanceof Function) {
    features = adsorbDataConfig(position);
  } else {
    features = adsorbDataConfig;
  }
  if (features.length) {
    adsorbPoints = features.map(function (feature) {
      var _feature$properties;
      var _ref = (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 ? _feature$properties : {},
        _ref$nodes = _ref.nodes,
        nodes = _ref$nodes === void 0 ? [] : _ref$nodes,
        _ref$isActive = _ref.isActive,
        isActive = _ref$isActive === void 0 ? false : _ref$isActive;
      return isActive ? nodes.filter(function (node) {
        return !(0, _lodash.isEqual)(node.geometry.coordinates, position);
      }) : nodes;
    }).flat().filter(function (feature) {
      return feature;
    });
    if (!adsorbPoints.length) {
      adsorbPoints = (0, _turf.coordAll)((0, _turf.featureCollection)(features)).map(function (position) {
        return (0, _turf.point)(position);
      });
    }
    adsorbLines = features.map(function (feature) {
      var _feature$properties2, _feature$properties3;
      var line = (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.line;
      if (((_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.isActive) && line) {
        var nodes = line.properties.nodes;
        var positionsList = (0, _common.splitByPosition)(nodes.map(function (node) {
          return node.geometry.coordinates;
        }), position).filter(function (positions) {
          return positions.length > 1;
        });
        return positionsList.map(function (positions) {
          return (0, _turf.lineString)(positions);
        });
      }
      return [line];
    }).flat().filter(function (feature) {
      return feature;
    });
    if (!adsorbLines.length) {
      features.forEach(function (feature) {
        var featureType = (0, _turf.getType)(feature);
        if (/linestring/i.test(featureType)) {
          adsorbLines.push(feature);
        }
        if (/polygon/i.test(featureType)) {
          var _adsorbLines, _result$features;
          var result = (0, _turf.polygonToLine)(feature);
          // @ts-ignore
          return (_adsorbLines = adsorbLines).push.apply(_adsorbLines, _toConsumableArray((_result$features = result === null || result === void 0 ? void 0 : result.features) !== null && _result$features !== void 0 ? _result$features : [result]));
        }
      });
    }
  }
  return {
    points: adsorbPoints,
    lines: adsorbLines
  };
};
var getAdsorbPoint = exports.getAdsorbPoint = function getAdsorbPoint(position, points, options, scene) {
  var pointAdsorbPixel = options.pointAdsorbPixel;
  var _position = _slicedToArray(position, 2),
    lng = _position[0],
    lat = _position[1];
  var _scene$lngLatToPixel = scene.lngLatToPixel([lng, lat]),
    mouseX = _scene$lngLatToPixel.x,
    mouseY = _scene$lngLatToPixel.y;
  var squareDistanceList = points.map(function (point) {
    var _point$geometry$coord = _slicedToArray(point.geometry.coordinates, 2),
      lng = _point$geometry$coord[0],
      lat = _point$geometry$coord[1];
    var _scene$lngLatToPixel2 = scene.lngLatToPixel([lng, lat]),
      x = _scene$lngLatToPixel2.x,
      y = _scene$lngLatToPixel2.y;
    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2);
  });
  var minIndex = (0, _common.findMinIndex)(squareDistanceList);
  var minDistance = Math.pow(squareDistanceList[minIndex], 0.5);
  if (minDistance <= pointAdsorbPixel) {
    return points[minIndex].geometry.coordinates;
  } else {
    return null;
  }
};
var getAdsorbLine = exports.getAdsorbLine = function getAdsorbLine(position, lines, options, scene) {
  var lineAdsorbPixel = options.lineAdsorbPixel;
  var _position2 = _slicedToArray(position, 2),
    lng = _position2[0],
    lat = _position2[1];
  var _scene$lngLatToPixel3 = scene.lngLatToPixel([lng, lat]),
    mouseX = _scene$lngLatToPixel3.x,
    mouseY = _scene$lngLatToPixel3.y;
  var nearestPointList = lines.filter(function (line) {
    return (0, _turf.coordAll)(line).length > 1;
  }).map(function (line) {
    return (0, _turf.nearestPointOnLine)(line, position);
  });
  if (!nearestPointList.length) {
    return null;
  }
  var squareDistanceList = nearestPointList.map(function (point) {
    var _point$geometry$coord2 = _slicedToArray(point.geometry.coordinates, 2),
      lng = _point$geometry$coord2[0],
      lat = _point$geometry$coord2[1];
    var _scene$lngLatToPixel4 = scene.lngLatToPixel([lng, lat]),
      x = _scene$lngLatToPixel4.x,
      y = _scene$lngLatToPixel4.y;
    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2);
  });
  var minIndex = (0, _common.findMinIndex)(squareDistanceList);
  var minDistance = Math.pow(squareDistanceList[minIndex], 0.5);
  if (minDistance <= lineAdsorbPixel) {
    return nearestPointList[minIndex].geometry.coordinates;
  } else {
    return null;
  }
};