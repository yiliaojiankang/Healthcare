"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLineCenterPoint = exports.calcDistanceTextsByLine = exports.calcAreaText = void 0;
var _turf = require("@turf/turf");
var _feature = require("./feature");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * 获取线段的中心点Feature
 * @param feature
 */
var getLineCenterPoint = exports.getLineCenterPoint = function getLineCenterPoint(feature) {
  var dis = (0, _turf.length)(feature, {
    units: 'meters'
  });
  return (0, _turf.along)(feature, dis / 2, {
    units: 'meters'
  });
};
/**
 * 返回线段对应的距离文本
 * @param feature
 * @param showTotalDistance
 * @param format
 * @param properties
 */
var calcDistanceTextsByLine = exports.calcDistanceTextsByLine = function calcDistanceTextsByLine(feature, _ref) {
  var showTotalDistance = _ref.showTotalDistance,
    format = _ref.format;
  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var textList = [];
  if (showTotalDistance) {
    var text = getLineCenterPoint(feature);
    var meters = (0, _turf.length)(feature, {
      units: 'meters'
    });
    text.properties = _objectSpread({
      id: (0, _feature.getUuid)('text'),
      isActive: false,
      meters: meters,
      text: format(meters),
      type: 'totalDistance'
    }, properties);
    textList.push(text);
  } else {
    var coordinates = feature.geometry.coordinates;
    for (var index = 0; index < coordinates.length - 1; index++) {
      var currentPoint = (0, _turf.point)(coordinates[index]);
      var nextPoint = (0, _turf.point)(coordinates[index + 1]);
      var _meters = (0, _turf.distance)(currentPoint, nextPoint, {
        units: 'meters'
      });
      var _text = (0, _turf.center)((0, _turf.featureCollection)([currentPoint, nextPoint]));
      _text.properties = _objectSpread({
        id: (0, _feature.getUuid)('text'),
        isActive: false,
        meters: _meters,
        text: format(_meters),
        type: 'distance'
      }, properties);
      textList.push(_text);
    }
  }
  return textList;
};
/**
 * 根据传入的polygon和options配置获取面积文本Feature
 * @param feature
 * @param options
 * @param properties
 */
var calcAreaText = exports.calcAreaText = function calcAreaText(feature, options) {
  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var format = options.format;
  var meters = (0, _turf.area)(feature);
  return (0, _turf.centerOfMass)(feature, {
    properties: _objectSpread({
      meters: meters,
      text: format(meters),
      type: 'area',
      isActive: false
    }, properties)
  });
};