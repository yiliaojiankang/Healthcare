function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import EventEmitter from 'eventemitter3';
import { cloneDeep, fromPairs } from 'lodash';
import { DEFAULT_SOURCE_DATA, SourceEvent } from '../constant';
import { History } from './history';
export var Source = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Source, _EventEmitter);
  var _super = _createSuper(Source);
  function Source(_ref) {
    var _this;
    var data = _ref.data,
      render = _ref.render,
      historyConfig = _ref.history,
      scene = _ref.scene;
    _classCallCheck(this, Source);
    _this = _super.call(this);
    _this.scene = void 0;
    /**
     * 用于存储渲染器render映射
     * @protected
     */
    _this.render = void 0;
    /**
     * 用于存储当前最新数据
     * @protected
     */
    _this.data = cloneDeep(DEFAULT_SOURCE_DATA);
    /**
     * 存储当前延迟更新函数的timeout
     * @protected
     */
    _this.timeout = null;
    /**
     * 用于需要待更新的renderType以及对应的最新数据
     * @protected
     */
    _this.diffData = {};
    /**
     *
     * @protected
     */
    _this.history = void 0;
    _this.scene = scene;
    _this.render = render;
    if (historyConfig) {
      _this.history = new History({
        config: historyConfig
      });
    }
    if (data) {
      _this.setData(data);
    }
    return _this;
  }
  _createClass(Source, [{
    key: "saveHistory",
    value: function saveHistory() {
      var _this$history;
      return (_this$history = this.history) === null || _this$history === void 0 ? void 0 : _this$history.save(this.data);
    }
  }, {
    key: "revertHistory",
    value: function revertHistory() {
      var _this$history2;
      var data = (_this$history2 = this.history) === null || _this$history2 === void 0 ? void 0 : _this$history2.revert();
      if (data) {
        this.setData(data);
        return data;
      }
    }
  }, {
    key: "redoHistory",
    value: function redoHistory() {
      var _this$history3;
      var data = (_this$history3 = this.history) === null || _this$history3 === void 0 ? void 0 : _this$history3.redo();
      if (data) {
        this.setData(data);
        return data;
      }
    }
    /**
     * 更新数据的方法，新的数据会累积延迟更新
     * @param data
     */
  }, {
    key: "setData",
    value: function setData(data) {
      var _this2 = this;
      if (Object.keys(data).length) {
        this.data = _objectSpread(_objectSpread({}, this.data), data);
        this.diffData = _objectSpread(_objectSpread({}, this.diffData), data);
        if (!this.timeout) {
          this.timeout = requestAnimationFrame(function () {
            return _this2.updateDiffData();
          });
        }
        this.emit(SourceEvent.Change, {
          data: this.data
        });
      }
      return this.data;
    }
    /**
     * 获取全量source数据
     */
  }, {
    key: "getData",
    value: function getData() {
      return this.data;
    }
    /**
     * 获取单项source数据
     * @param renderType
     */
  }, {
    key: "getRenderData",
    value: function getRenderData(renderType) {
      return this.data[renderType];
    }
    /**
     * 设置单项
     * @param renderType
     * @param updater
     */
  }, {
    key: "setRenderData",
    value: function setRenderData(renderType, updater) {
      var data = typeof updater === 'function' ? updater(this.getRenderData(renderType)) : updater;
      this.setData(_defineProperty({}, renderType, data));
      this.emit(SourceEvent.Change, this.data);
      return data;
    }
    /**
     * 根据当前diffData中积累的数据更新对应render
     */
  }, {
    key: "updateDiffData",
    value: function updateDiffData() {
      var _this3 = this;
      var renderTypes = Object.entries(this.diffData);
      if (renderTypes.length) {
        renderTypes.forEach(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            renderType = _ref3[0],
            renderData = _ref3[1];
          if (Array.isArray(renderData)) {
            var _this3$getRender;
            (_this3$getRender = _this3.getRender(renderType)) === null || _this3$getRender === void 0 ? void 0 : _this3$getRender.setData(renderData);
          }
        });
        this.emit(SourceEvent.Update, this.data, this.diffData);
        this.diffData = {};
        this.timeout = null;
        requestAnimationFrame(function () {
          _this3.scene.render();
        });
      }
    }
    /**
     * 获取对应renderType类型的render实例，如果没有获取到则代表
     * @param type
     */
  }, {
    key: "getRender",
    value: function getRender(type) {
      return this.render[type];
    }
    /**
     * 清空所有数据
     */
  }, {
    key: "clear",
    value: function clear() {
      this.setData(fromPairs(Object.keys(this.render).map(function (renderType) {
        return [renderType, []];
      })));
    }
  }]);
  return Source;
}(EventEmitter);