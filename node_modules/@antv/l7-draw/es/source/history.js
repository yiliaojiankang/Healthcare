function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { cloneDeep } from 'lodash';
export var History = /*#__PURE__*/function () {
  function History(_ref) {
    var config = _ref.config;
    _classCallCheck(this, History);
    /**
     * 保存历史数组的队列，越新的数据越靠前
     * @protected
     */
    this.historyList = [];
    /**
     * 当前回退/重做操作后对应的index下标，回退对应index++，重做对应index--
     * @protected
     */
    this.historyIndex = 0;
    /**
     * 配置
     * @protected
     */
    this.config = void 0;
    this.config = config;
  }
  _createClass(History, [{
    key: "save",
    value: function save(data) {
      if (!this.config) {
        return;
      }
      var maxSize = this.config.maxSize;
      if (this.historyIndex) {
        this.historyList = this.historyList.slice(this.historyIndex);
        this.historyIndex = 0;
      }
      if (this.historyList.length >= maxSize) {
        this.historyList.pop();
      }
      var cloneData = cloneDeep(data);
      this.historyList.unshift(cloneData);
      return cloneData;
    }
  }, {
    key: "revert",
    value: function revert() {
      if (!this.historyList.length || this.historyIndex >= this.historyList.length - 1) {
        return;
      }
      var previousData = this.historyList[++this.historyIndex];
      if (previousData) {
        return cloneDeep(previousData);
      }
    }
  }, {
    key: "redo",
    value: function redo() {
      if (!this.historyList.length || this.historyIndex <= 0) {
        return;
      }
      var nextData = this.historyList[--this.historyIndex];
      if (nextData) {
        return cloneDeep(nextData);
      }
    }
  }]);
  return History;
}();