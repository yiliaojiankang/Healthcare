function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import { coordAll, featureCollection } from '@turf/turf';
import { first, last } from 'lodash';
import { DrawEvent, RenderEvent } from '../constant';
import { PolygonMode } from '../mode';
import { createDashLine, createLineFeature, createPointFeature, getDefaultPolygonProperties, getPosition, isSameFeature } from '../utils';
export var PolygonDrawer = /*#__PURE__*/function (_PolygonMode) {
  _inherits(PolygonDrawer, _PolygonMode);
  var _super = _createSuper(PolygonDrawer);
  function PolygonDrawer(scene, options) {
    var _this;
    _classCallCheck(this, PolygonDrawer);
    _this = _super.call(this, scene, options);
    _this.drawPolygonFinish = function () {
      var _drawPolygon$properti;
      var drawPolygon = _this.drawPolygon;
      var nodes = (_drawPolygon$properti = drawPolygon === null || drawPolygon === void 0 ? void 0 : drawPolygon.properties.nodes) !== null && _drawPolygon$properti !== void 0 ? _drawPolygon$properti : [];
      if (!drawPolygon || nodes.length < 3) {
        return;
      }
      drawPolygon.properties.isDraw = false;
      _this.syncPolygonNodes(drawPolygon, nodes);
      _this.setActivePolygon(drawPolygon);
      var _this$options = _this.options,
        autoActive = _this$options.autoActive,
        editable = _this$options.editable;
      if (!autoActive || !editable) {
        _this.handlePolygonUnClick(drawPolygon);
      }
      if (editable) {
        _this.setHelper(autoActive ? 'pointHover' : 'polygonHover');
      } else {
        _this.setHelper(_this.addable ? 'draw' : null);
      }
      _this.emit(DrawEvent.Add, drawPolygon, _this.getPolygonData());
    };
    _this.sceneRender.on(RenderEvent.DblClick, _this.drawPolygonFinish);
    _this.bindPointRenderEvent();
    _this.bindSceneEvent();
    _this.bindMidPointRenderEvent();
    _this.bindLineRenderEvent();
    _this.bindPolygonRenderEvent();
    return _this;
  }
  _createClass(PolygonDrawer, [{
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PolygonDrawer.prototype), "getDefaultOptions", this).call(this, options)), {}, {
        liveUpdate: false
      });
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var polygonFeatures = data.map(function (polygon) {
        var _polygon$properties, _polygon$properties$n;
        polygon.properties = _objectSpread(_objectSpread({}, getDefaultPolygonProperties()), (_polygon$properties = polygon.properties) !== null && _polygon$properties !== void 0 ? _polygon$properties : {});
        if (!((_polygon$properties$n = polygon.properties.nodes) === null || _polygon$properties$n === void 0 ? void 0 : _polygon$properties$n.length)) {
          var positions = coordAll(polygon);
          positions = positions.slice(0, positions.length - 1);
          polygon.properties.nodes = positions.map(function (position) {
            return createPointFeature(position);
          });
        }
        if (!polygon.properties.line) {
          var nodes = polygon.properties.nodes;
          polygon.properties.line = createLineFeature([].concat(_toConsumableArray(nodes), [createPointFeature(first(nodes).geometry.coordinates)]));
        }
        return polygon;
      });
      this.source.setData({
        point: [],
        midPoint: [],
        dashLine: [],
        polygon: polygonFeatures,
        line: polygonFeatures.map(function (feature) {
          return feature.properties.line;
        })
      });
      this.setTextData(this.getAllTexts());
      if (this.editPolygon) {
        this.setActivePolygon(this.editPolygon);
      }
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (!this.addable || this.dragPoint) {
        return;
      }
      var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onPointCreate", this).call(this, e);
      var drawPolygon = this.drawPolygon;
      var drawLine = this.drawLine;
      if (feature) {
        if (drawPolygon) {
          this.syncPolygonNodes(drawPolygon, [].concat(_toConsumableArray(drawPolygon.properties.nodes), [feature]));
          this.setDashLineData([createDashLine([getPosition(e), drawPolygon.properties.nodes[0].geometry.coordinates])]);
          var nodeLength = drawPolygon.properties.nodes.length;
          if (nodeLength > 1) {
            this.setHelper('drawFinish');
          }
        } else if (drawLine) {
          this.handleCreatePolygon([feature], drawLine);
          this.setHelper('drawContinue');
        }
        this.emit(DrawEvent.AddNode, feature, drawPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onPointClick",
    value: function onPointClick(e) {
      var _this2 = this;
      var drawPolygon = this.drawPolygon;
      var feature = e.feature;
      if (!drawPolygon) {
        return;
      }
      var nodes = drawPolygon.properties.nodes;
      if (nodes.length >= 3 && (isSameFeature(first(nodes), feature) || isSameFeature(last(nodes), feature))) {
        requestAnimationFrame(function () {
          _this2.drawPolygonFinish();
        });
      } else {
        var _feature$geometry$coo = _slicedToArray(feature.geometry.coordinates, 2),
          lng = _feature$geometry$coo[0],
          lat = _feature$geometry$coo[1];
        e.lngLat = {
          lng: lng,
          lat: lat
        };
        this.onPointCreate(e);
      }
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var feature = this.dragPoint;
      var editPolygon = this.editPolygon;
      if (feature && editPolygon) {
        var line = editPolygon.properties.line;
        line.properties.nodes = line.properties.nodes.map(function (node) {
          return isSameFeature(node, feature) ? feature : node;
        });
        var lineNodes = line.properties.nodes;
        var nodes = lineNodes.slice(0, lineNodes.length - 1);
        var firstLineNode = first(lineNodes);
        var lastLineNode = last(lineNodes);
        var isSame = isSameFeature(firstLineNode, feature) || isSameFeature(lastLineNode, feature);
        if (isSame) {
          firstLineNode.geometry.coordinates = lastLineNode.geometry.coordinates = getPosition(e);
        }
        if (this.options.adsorbOptions && isSame) {
          var adsorbPosition = this.resetAdsorbLngLat(e);
          if (adsorbPosition) {
            firstLineNode.geometry.coordinates = lastLineNode.geometry.coordinates = adsorbPosition;
          }
        }
        _get(_getPrototypeOf(PolygonDrawer.prototype), "onPointDragging", this).call(this, e);
        this.syncPolygonNodes(editPolygon, nodes);
        this.setActivePolygon(editPolygon);
      }
      return feature;
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var dragPolygon = this.dragPolygon;
      var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onLineDragging", this).call(this, e);
      if (feature && dragPolygon) {
        var lineNodes = feature.properties.nodes;
        this.syncPolygonNodes(dragPolygon, lineNodes.slice(0, lineNodes.length - 1));
        this.emit(DrawEvent.Dragging, dragPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onMidPointClick",
    value: function onMidPointClick(e) {
      var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onMidPointClick", this).call(this, e);
      var editPolygon = this.editPolygon;
      if (feature && editPolygon) {
        this.emit(DrawEvent.Edit, editPolygon, this.getPolygonData());
        this.emit(DrawEvent.AddNode, feature, editPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {
      var _drawPolygon$properti2;
      var drawPolygon = this.drawPolygon;
      var nodes = (_drawPolygon$properti2 = drawPolygon === null || drawPolygon === void 0 ? void 0 : drawPolygon.properties.nodes) !== null && _drawPolygon$properti2 !== void 0 ? _drawPolygon$properti2 : [];
      if (!drawPolygon || !nodes.length) {
        return;
      }
      if (this.options.adsorbOptions) {
        this.resetAdsorbLngLat(e);
      }
      var mousePosition = getPosition(e);
      var dashLineData = [];
      dashLineData.push(createDashLine([mousePosition, first(nodes).geometry.coordinates]));
      if (nodes.length > 1) {
        dashLineData.push(createDashLine([mousePosition, last(nodes).geometry.coordinates]));
      }
      if (this.options.liveUpdate && nodes.length >= 2) {
        var nodePositions = coordAll(featureCollection(nodes));
        drawPolygon.geometry.coordinates = [[].concat(_toConsumableArray(nodePositions), [mousePosition, nodePositions[0]])];
        this.setPolygonData(this.getPolygonData());
      }
      this.setDashLineData(dashLineData);
      this.setTextData(this.getAllTexts());
    }
  }, {
    key: "removeNode",
    value: function removeNode(node, feature) {
      var _targetFeature$proper;
      var targetFeature = this.getTargetFeature(feature);
      var targetNode = this.getTargetFeature(node, (_targetFeature$proper = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper !== void 0 ? _targetFeature$proper : []);
      if (targetFeature && targetNode) {
        var _targetFeature$proper2;
        var nodes = (_targetFeature$proper2 = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper2 !== void 0 ? _targetFeature$proper2 : [];
        if (nodes.length < 4) {
          return;
        }
        this.syncPolygonNodes(targetFeature, nodes.filter(function (node) {
          return !isSameFeature(targetNode, node);
        }));
        this.emit(DrawEvent.RemoveNode, targetNode, targetFeature, this.getLineData());
        this.emit(DrawEvent.Edit, targetFeature, this.getPolygonData());
      }
    }
  }, {
    key: "onPointContextMenu",
    value: function onPointContextMenu(e) {
      var _editPolygon$properti;
      var editPolygon = this.editPolygon;
      var deleteNode = e.feature;
      var nodes = (_editPolygon$properti = editPolygon === null || editPolygon === void 0 ? void 0 : editPolygon.properties.nodes) !== null && _editPolygon$properti !== void 0 ? _editPolygon$properti : [];
      if (!editPolygon || nodes.length < 4) {
        return;
      }
      if (!nodes.find(function (node) {
        return isSameFeature(node, deleteNode);
      })) {
        deleteNode = nodes[0];
      }
      this.removeNode(deleteNode, editPolygon);
      return deleteNode;
    }
  }, {
    key: "bindPointRenderEvent",
    value: function bindPointRenderEvent() {
      var _this$pointRender;
      _get(_getPrototypeOf(PolygonDrawer.prototype), "bindPointRenderEvent", this).call(this);
      (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(RenderEvent.Contextmenu, this.onPointContextMenu.bind(this));
    }
  }, {
    key: "enablePointRenderAction",
    value: function enablePointRenderAction() {
      _get(_getPrototypeOf(PolygonDrawer.prototype), "enablePointRenderAction", this).call(this);
      if (this.options.editable) {
        var _this$pointRender2;
        (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.enableContextMenu();
      }
    }
  }, {
    key: "disablePointRenderAction",
    value: function disablePointRenderAction() {
      var _this$pointRender3;
      _get(_getPrototypeOf(PolygonDrawer.prototype), "disablePointRenderAction", this).call(this);
      (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.disableContextMenu();
    }
  }]);
  return PolygonDrawer;
}(PolygonMode);