function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import { bbox, coordAll, envelope, featureCollection } from '@turf/turf';
import { cloneDeep, isEqual } from 'lodash';
import { DrawEvent } from '../constant';
import { DragPolygonMode } from '../mode';
import { createLineFeature, createPointFeature, getDefaultPolygonProperties, isSameFeature } from '../utils';
import { DEFAULT_RECT_HELPER_CONFIG } from '../constant/helper';
export var RectDrawer = /*#__PURE__*/function (_DragPolygonMode) {
  _inherits(RectDrawer, _DragPolygonMode);
  var _super = _createSuper(RectDrawer);
  function RectDrawer(scene, options) {
    var _this;
    _classCallCheck(this, RectDrawer);
    _this = _super.call(this, scene, options);
    _this.bindPointRenderEvent();
    _this.bindSceneEvent();
    _this.bindMidPointRenderEvent();
    _this.bindLineRenderEvent();
    _this.bindPolygonRenderEvent();
    return _this;
  }
  _createClass(RectDrawer, [{
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _get(_getPrototypeOf(RectDrawer.prototype), "getDefaultOptions", this).call(this, options);
      if (newOptions.helper) {
        newOptions.helper = _objectSpread(_objectSpread({}, newOptions.helper), DEFAULT_RECT_HELPER_CONFIG);
      }
      return newOptions;
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var _this2 = this;
      var result = data.map(function (feature) {
        var _feature$properties, _nodes, _feature$properties2;
        feature.properties = _objectSpread(_objectSpread({}, getDefaultPolygonProperties()), (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 ? _feature$properties : {});
        var nodes = feature.properties.nodes;
        if (((_nodes = nodes) === null || _nodes === void 0 ? void 0 : _nodes.length) !== 2) {
          var _bbox = bbox(feature),
            _bbox2 = _slicedToArray(_bbox, 4),
            lng1 = _bbox2[0],
            lat1 = _bbox2[1],
            lng2 = _bbox2[2],
            lat2 = _bbox2[3];
          nodes = [createPointFeature([lng1, lat1]), createPointFeature([lng2, lat2])];
          feature.properties.nodes = nodes;
        }
        var _nodes2 = nodes,
          _nodes3 = _slicedToArray(_nodes2, 2),
          startNode = _nodes3[0],
          endNode = _nodes3[1];
        var isActive = !!((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.isActive);
        var line = feature.properties.line;
        if (!line) {
          line = _this2.handleCreatePolygonLine(startNode, endNode, {
            isActive: isActive
          });
          feature.properties.line = line;
        }
        return _this2.handleCreatePolygon([startNode, endNode], line, _objectSpread(_objectSpread({}, feature.properties), {}, {
          isActive: isActive
        }));
      });
      this.source.setData({
        point: [],
        midPoint: [],
        dashLine: [],
        polygon: result,
        line: result.map(function (feature) {
          return feature.properties.line;
        })
      });
      this.setTextData(this.getAllTexts());
      if (this.editPolygon) {
        this.setActivePolygon(this.editPolygon);
      }
    }
  }, {
    key: "handleCreatePolygonLine",
    value: function handleCreatePolygonLine(startNode, endNode) {
      var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var positions = coordAll(envelope(featureCollection([startNode, endNode])));
      var nodes = positions.map(function (position, index) {
        if (index === 0) {
          return startNode;
        }
        if (index === 2) {
          return endNode;
        }
        return createPointFeature(position);
      });
      return createLineFeature(nodes, properties);
    }
  }, {
    key: "syncPolygonNodes",
    value: function syncPolygonNodes(polygon, nodes) {
      var line = polygon.properties.line;
      var positions = coordAll(envelope(featureCollection(nodes)));
      polygon.properties.nodes = nodes;
      polygon.geometry.coordinates = [positions];
      this.setPolygonData(function (features) {
        return features.map(function (feature) {
          if (isSameFeature(feature, polygon)) {
            return polygon;
          }
          return feature;
        });
      });
      this.setPointData(polygon.properties.isDraw ? [nodes[0]] : nodes);
      var lineNodes = line.properties.nodes;
      var otherPositions = positions.filter(function (position) {
        return !isEqual(position, nodes[0].geometry.coordinates) && !isEqual(position, nodes[1].geometry.coordinates);
      });
      lineNodes.forEach(function (lineNode, index) {
        var position = [0, 0];
        switch (index) {
          case 0:
            position = nodes[0].geometry.coordinates;
            break;
          case 1:
            position = otherPositions[0];
            break;
          case 2:
            position = nodes[1].geometry.coordinates;
            break;
          case 3:
            position = otherPositions[1];
            break;
          case 4:
            position = cloneDeep(nodes[0].geometry.coordinates);
            break;
        }
        lineNode.geometry.coordinates = position;
      });
      line.geometry.coordinates = positions;
      return polygon;
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var feature = _get(_getPrototypeOf(RectDrawer.prototype), "onLineDragging", this).call(this, e);
      var dragPolygon = this.dragPolygon;
      if (feature && dragPolygon) {
        var lineNodes = dragPolygon.properties.line.properties.nodes;
        this.syncPolygonNodes(dragPolygon, [lineNodes[0], lineNodes[2]]);
        this.setActivePolygon(dragPolygon, {
          isDrag: true
        });
        this.emit(DrawEvent.Dragging, dragPolygon, this.getPolygonData());
      }
      return feature;
    }
  }]);
  return RectDrawer;
}(DragPolygonMode);