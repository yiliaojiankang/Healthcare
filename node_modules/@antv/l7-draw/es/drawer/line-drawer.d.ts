import { Scene } from '@antv/l7';
import { Feature, LineString } from '@turf/turf';
import { ILineModeOptions, LineMode } from '../mode';
import { DeepPartial, ILayerMouseEvent, ILineFeature, IMidPointFeature, IPointFeature, IRenderType, ISceneMouseEvent } from '../typings';
export type ILineDrawerOptions = ILineModeOptions<Feature<LineString>>;
export declare class LineDrawer extends LineMode<ILineDrawerOptions> {
    constructor(scene: Scene, options: DeepPartial<ILineDrawerOptions>);
    protected get dragItem(): ILineFeature | undefined;
    protected get editItem(): ILineFeature | undefined;
    getMainLayer(): import("@antv/l7").ILayer[];
    setData(lines: Feature<LineString>[]): void;
    getData(): ILineFeature[];
    getRenderTypes(): IRenderType[];
    bindPointRenderEvent(): void;
    drawLineFinish: () => void;
    onPointClick(e: ILayerMouseEvent<IPointFeature>): void;
    removeNode(node: Feature | string, feature: Feature | string): void;
    onPointContextMenu(e: ILayerMouseEvent<IPointFeature>): IPointFeature | undefined;
    onPointCreate(e: ILayerMouseEvent): IPointFeature | undefined;
    onPointDragEnd(e: ISceneMouseEvent): IPointFeature | undefined;
    onLineDragStart(e: ILayerMouseEvent<ILineFeature>): ILineFeature | undefined;
    onLineDragging(e: ISceneMouseEvent): ILineFeature | undefined;
    onLineDragEnd(e: ISceneMouseEvent): ILineFeature | undefined;
    onMidPointClick(e: ILayerMouseEvent<IMidPointFeature>): IPointFeature | undefined;
    onSceneMouseMove(e: ISceneMouseEvent): void;
    setActiveFeature(target: Feature | string | null | undefined): void;
    resetFeatures(): void;
    enablePointRenderAction(): void;
    disablePointRenderAction(): void;
    bindEnableEvent(): void;
    unbindEnableEvent(): void;
    bindThis(): void;
}
