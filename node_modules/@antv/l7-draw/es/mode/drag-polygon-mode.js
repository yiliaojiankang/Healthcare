function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import { cloneDeep, first, last } from 'lodash';
import { DrawEvent, RenderEvent } from '../constant';
import { createPointFeature, createPolygonFeature, getLngLat, getPosition, isSameFeature, updateTargetFeature } from '../utils';
import { PolygonMode } from './polygon-mode';
import { DEFAULT_TRIGGER_DRAG_HELPER_CONFIG, DEFAULT_DRAG_POLYGON_HELPER_CONFIg } from '../constant/helper';
export var DragPolygonMode = /*#__PURE__*/function (_PolygonMode) {
  _inherits(DragPolygonMode, _PolygonMode);
  var _super = _createSuper(DragPolygonMode);
  function DragPolygonMode(scene, options) {
    var _this;
    _classCallCheck(this, DragPolygonMode);
    _this = _super.call(this, scene, options);
    _this.onSceneDragStart = _this.onSceneDragStart.bind(_assertThisInitialized(_this));
    _this.onSceneDragEnd = _this.onSceneDragEnd.bind(_assertThisInitialized(_this));
    return _this;
  }
  _createClass(DragPolygonMode, [{
    key: "drawLine",
    get: function get() {
      var _this$drawPolygon;
      return (_this$drawPolygon = this.drawPolygon) === null || _this$drawPolygon === void 0 ? void 0 : _this$drawPolygon.properties.line;
    }
  }, {
    key: "isDragTrigger",
    get: function get() {
      return this.options.trigger === 'drag';
    }
  }, {
    key: "isClickTrigger",
    get: function get() {
      return this.options.trigger === 'click';
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(DragPolygonMode.prototype), "getDefaultOptions", this).call(this, options)), {}, {
        showMidPoint: false,
        trigger: 'click',
        autoActive: false,
        helper: cloneDeep(DEFAULT_DRAG_POLYGON_HELPER_CONFIg)
      });
      if (options.trigger === 'drag') {
        newOptions.helper = _objectSpread(_objectSpread({}, newOptions.helper), DEFAULT_TRIGGER_DRAG_HELPER_CONFIG);
      }
      return newOptions;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "getMidPointsByLine",
    value: function getMidPointsByLine(line) {
      return [];
    }
  }, {
    key: "handleCreatePolygon",
    value: function handleCreatePolygon(points, line) {
      var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var lineNodes = line.properties.nodes;
      return createPolygonFeature(lineNodes.slice(0, lineNodes.length - 1), _objectSpread({
        nodes: points,
        line: line
      }, properties));
    }
  }, {
    key: "handleFirstNodeCreate",
    value: function handleFirstNodeCreate(firstNode) {
      var lastNode = createPointFeature(firstNode.geometry.coordinates);
      var line = this.handleCreatePolygonLine(firstNode, lastNode, {
        isDraw: true,
        isActive: true
      });
      var polygon = this.handleCreatePolygon([firstNode, lastNode], line, {
        isDraw: true,
        isActive: true
      });
      this.setPolygonData(function (features) {
        return updateTargetFeature({
          target: polygon,
          data: [].concat(_toConsumableArray(features), [polygon]),
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: true,
              isActive: true
            });
          }
        });
      });
      this.emit(DrawEvent.AddNode, firstNode, this.drawPolygon, this.getPolygonData());
      this.setHelper('drawFinish');
      return firstNode;
    }
  }, {
    key: "handleLastNodeCreate",
    value: function handleLastNodeCreate(lastNode) {
      var _this$options = this.options,
        autoActive = _this$options.autoActive,
        editable = _this$options.editable;
      var drawPolygon = this.drawPolygon;
      if (!drawPolygon) {
        return lastNode;
      }
      this.setLineData(function (features) {
        return [].concat(_toConsumableArray(features), [drawPolygon.properties.line]);
      });
      this.setActivePolygon(drawPolygon);
      if (!(autoActive && editable)) {
        this.handlePolygonUnClick(drawPolygon);
      }
      this.emit(DrawEvent.Add, drawPolygon, this.getPolygonData());
      this.emit(DrawEvent.AddNode, drawPolygon.properties.nodes[1], this.drawPolygon, this.getPolygonData());
      if (editable) {
        this.setHelper(autoActive ? 'pointHover' : 'polygonHover');
      } else {
        this.setHelper(this.addable ? 'draw' : null);
      }
      return lastNode;
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      var _this2 = this;
      if (!this.addable || this.dragPoint || this.editLine || !this.isClickTrigger) {
        return;
      }
      var drawPolygon = this.drawPolygon;
      var position = getPosition(e);
      var feature = this.handleCreatePoint(position);
      if (drawPolygon) {
        requestAnimationFrame(function () {
          _this2.handleLastNodeCreate(feature);
        });
      } else {
        this.handleFirstNodeCreate(feature);
      }
      return feature;
    }
  }, {
    key: "setActivePolygon",
    value: function setActivePolygon(polygon) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.setActiveLine(polygon.properties.line, properties);
      this.setPolygonData(function (features) {
        return updateTargetFeature({
          target: polygon,
          data: features,
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: true,
              isDrag: false,
              isHover: false
            }, properties);
          },
          otherHandler: function otherHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: false,
              isDrag: false
            });
          }
        });
      });
      this.setPointData(polygon.properties.nodes);
      this.setDashLineData([]);
      var texts = this.getAllTexts();
      this.setTextData(texts);
      return polygon;
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = this.dragPoint;
      if (!dragPoint) {
        return;
      }
      var feature = this.handlePointDragging(dragPoint, getLngLat(e));
      var editPolygon = this.editPolygon;
      if (feature && editPolygon) {
        this.syncPolygonNodes(editPolygon, editPolygon.properties.nodes.map(function (node) {
          if (isSameFeature(node, feature)) {
            return feature;
          }
          return node;
        }));
        this.setActivePolygon(editPolygon);
      }
      return feature;
    }
  }, {
    key: "onSceneDragStart",
    value: function onSceneDragStart(e) {
      if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine) {
        return;
      }
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.handleFirstNodeCreate(this.handleCreatePoint(getPosition(e)));
    }
  }, {
    key: "onSceneDragEnd",
    value: function onSceneDragEnd(e) {
      if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine || !this.drawPolygon) {
        return;
      }
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.handleLastNodeCreate(this.handleCreatePoint(getPosition(e)));
    }
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {
      var drawPolygon = this.drawPolygon;
      if (!drawPolygon) {
        return;
      }
      var nodes = drawPolygon.properties.nodes;
      var firstNode = first(nodes);
      var lastNode = last(nodes);
      lastNode.geometry.coordinates = getPosition(e);
      this.syncPolygonNodes(drawPolygon, [firstNode, lastNode]);
      this.setDashLineData([drawPolygon.properties.line]);
      this.setTextData(this.getAllTexts());
      this.resetCursor();
    }
  }, {
    key: "bindSceneDragEvent",
    value: function bindSceneDragEvent() {
      this.unbindSceneDragEvent();
      this.sceneRender.on(RenderEvent.Dragstart, this.onSceneDragStart);
      this.sceneRender.on(RenderEvent.Dragend, this.onSceneDragEnd);
      this.scene.setMapStatus({
        dragEnable: false
      });
    }
  }, {
    key: "unbindSceneDragEvent",
    value: function unbindSceneDragEvent() {
      this.sceneRender.off(RenderEvent.Dragstart, this.onSceneDragStart);
      this.sceneRender.off(RenderEvent.Dragend, this.onSceneDragEnd);
      this.scene.setMapStatus({
        dragEnable: true
      });
    }
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      _get(_getPrototypeOf(DragPolygonMode.prototype), "bindEnableEvent", this).call(this);
      if (this.isDragTrigger) {
        this.bindSceneDragEvent();
      }
    }
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      _get(_getPrototypeOf(DragPolygonMode.prototype), "unbindEnableEvent", this).call(this);
      if (this.isDragTrigger) {
        this.unbindSceneDragEvent();
      }
    }
  }, {
    key: "bindThis",
    value: function bindThis() {
      _get(_getPrototypeOf(DragPolygonMode.prototype), "bindThis", this).call(this);
      this.onSceneDragStart = this.onSceneDragStart.bind(this);
      this.onSceneDragEnd = this.onSceneDragEnd.bind(this);
    }
  }]);
  return DragPolygonMode;
}(PolygonMode);