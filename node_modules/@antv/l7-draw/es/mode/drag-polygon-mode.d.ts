import { Scene } from '@antv/l7';
import { Feature } from '@turf/turf';
import { DeepPartial, ILayerMouseEvent, ILineFeature, ILineProperties, IMidPointFeature, IPointFeature, IPolygonFeature, IPolygonHelperOptions, IPolygonProperties, ISceneMouseEvent } from '../typings';
import { IPolygonModeOptions, PolygonMode } from './polygon-mode';
export interface IDragPolygonModeOptions<F extends Feature = Feature> extends IPolygonModeOptions<F> {
    trigger: 'click' | 'drag';
    helper: IPolygonHelperOptions | boolean;
}
export declare abstract class DragPolygonMode<T extends IDragPolygonModeOptions> extends PolygonMode<T> {
    constructor(scene: Scene, options: DeepPartial<T>);
    get drawLine(): ILineFeature | undefined;
    get isDragTrigger(): boolean;
    get isClickTrigger(): boolean;
    getDefaultOptions(options: DeepPartial<T>): T;
    getMidPointsByLine(line: ILineFeature): IMidPointFeature[];
    abstract handleCreatePolygonLine(startNode: IPointFeature, endNode: IPointFeature, properties: Partial<ILineProperties>): ILineFeature;
    handleCreatePolygon(points: IPointFeature[], line: ILineFeature, properties?: Partial<IPolygonProperties>): IPolygonFeature;
    handleFirstNodeCreate(firstNode: IPointFeature): IPointFeature;
    handleLastNodeCreate(lastNode: IPointFeature): IPointFeature;
    onPointCreate(e: ILayerMouseEvent): IPointFeature | undefined;
    setActivePolygon(polygon: IPolygonFeature, properties?: Partial<IPolygonProperties>): IPolygonFeature;
    onPointDragging(e: ISceneMouseEvent): IPointFeature | undefined;
    onSceneDragStart(e: ISceneMouseEvent): void;
    onSceneDragEnd(e: ISceneMouseEvent): void;
    onSceneMouseMove(e: ISceneMouseEvent): void;
    bindSceneDragEvent(): void;
    unbindSceneDragEvent(): void;
    bindEnableEvent(): void;
    unbindEnableEvent(): void;
    bindThis(): void;
}
