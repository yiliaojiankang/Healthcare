function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import { RenderEvent } from '../constant';
import { createPointFeature, getLngLat, isSameFeature, transLngLat2Position, updateTargetFeature } from '../utils';
import { BaseMode } from './base-mode';
export var PointMode = /*#__PURE__*/function (_BaseMode) {
  _inherits(PointMode, _BaseMode);
  var _super = _createSuper(PointMode);
  function PointMode() {
    _classCallCheck(this, PointMode);
    return _super.apply(this, arguments);
  }
  _createClass(PointMode, [{
    key: "pointRender",
    get:
    /**
     * 获取point类型对应的render
     * @protected
     */
    function get() {
      return this.render.point;
    }
    /**
     * 获取正在被拖拽的结点
     * @protected
     */
  }, {
    key: "dragPoint",
    get: function get() {
      return this.getPointData().find(function (feature) {
        return feature.properties.isDrag;
      });
    }
    /**
     * 当前高亮的结点
     * @protected
     */
  }, {
    key: "editPoint",
    get: function get() {
      return this.getPointData().find(function (feature) {
        return feature.properties.isActive;
      });
    }
    /**
     * 当前悬停的结点
     * @protected
     */
  }, {
    key: "hoverPoint",
    get: function get() {
      return this.getPointData().find(function (feature) {
        return feature.properties.isHover;
      });
    }
  }, {
    key: "getDragPoint",
    value: function getDragPoint() {
      return this.dragPoint;
    }
  }, {
    key: "getEditPoint",
    value: function getEditPoint() {
      return this.editPoint;
    }
    /**
     * 获取点数据
     */
  }, {
    key: "getPointData",
    value: function getPointData() {
      return this.source.getRenderData('point');
    }
    /**
     * 设置点数据
     * @param data
     */
  }, {
    key: "setPointData",
    value: function setPointData(data) {
      return this.source.setRenderData('point', data);
    }
    /**
     * 绑定点Render相关事件
     */
  }, {
    key: "bindPointRenderEvent",
    value: function bindPointRenderEvent() {
      var _this$pointRender, _this$pointRender2, _this$pointRender3, _this$pointRender4, _this$pointRender5, _this$pointRender6;
      (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(RenderEvent.UnClick, this.onPointCreate.bind(this));
      (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.on(RenderEvent.Mousemove, this.onPointMouseMove.bind(this));
      (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.on(RenderEvent.Mouseout, this.onPointMouseOut.bind(this));
      (_this$pointRender4 = this.pointRender) === null || _this$pointRender4 === void 0 ? void 0 : _this$pointRender4.on(RenderEvent.Dragstart, this.onPointDragStart.bind(this));
      (_this$pointRender5 = this.pointRender) === null || _this$pointRender5 === void 0 ? void 0 : _this$pointRender5.on(RenderEvent.Dragging, this.onPointDragging.bind(this));
      (_this$pointRender6 = this.pointRender) === null || _this$pointRender6 === void 0 ? void 0 : _this$pointRender6.on(RenderEvent.Dragend, this.onPointDragEnd.bind(this));
    }
    /**
     * 创建点Feature
     * @param position
     */
  }, {
    key: "handleCreatePoint",
    value: function handleCreatePoint(position) {
      var _this$options = this.options,
        autoActive = _this$options.autoActive,
        editable = _this$options.editable;
      var newFeature = createPointFeature(position);
      this.setPointData(function (oldData) {
        return updateTargetFeature({
          target: newFeature,
          data: [].concat(_toConsumableArray(oldData), [newFeature]),
          targetHandler: function targetHandler(item) {
            item.properties = _objectSpread(_objectSpread({}, item.properties), {}, {
              isHover: editable,
              isActive: autoActive && editable
            });
          },
          otherHandler: function otherHandler(item) {
            item.properties = _objectSpread(_objectSpread({}, item.properties), {}, {
              isHover: false,
              isActive: false,
              isDrag: false
            });
          }
        });
      });
      return newFeature;
    }
  }, {
    key: "handlePointHover",
    value: function handlePointHover(point) {
      this.setCursor('pointHover');
      if (!isSameFeature(point, this.hoverPoint)) {
        this.setPointData(function (features) {
          return updateTargetFeature({
            target: point,
            data: features,
            targetHandler: function targetHandler(item) {
              item.properties.isHover = true;
            },
            otherHandler: function otherHandler(item) {
              item.properties.isHover = false;
            }
          });
        });
      }
      return point;
    }
  }, {
    key: "handlePointUnHover",
    value: function handlePointUnHover(point) {
      this.resetCursor();
      this.setPointData(function (features) {
        return features.map(function (feature) {
          feature.properties.isHover = false;
          return feature;
        });
      });
      return point;
    }
  }, {
    key: "handlePointDragStart",
    value: function handlePointDragStart(point) {
      this.setPointData(function (features) {
        return updateTargetFeature({
          target: point,
          data: features,
          targetHandler: function targetHandler(item) {
            item.properties = _objectSpread(_objectSpread({}, item.properties), {}, {
              isDrag: true,
              isActive: true
            });
          },
          otherHandler: function otherHandler(item) {
            item.properties = _objectSpread(_objectSpread({}, item.properties), {}, {
              isDrag: false,
              isActive: false
            });
          }
        });
      });
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.setCursor('pointDrag');
      return point;
    }
  }, {
    key: "handlePointDragging",
    value: function handlePointDragging(point, lngLat) {
      this.setPointData(function (features) {
        return updateTargetFeature({
          target: point,
          data: features,
          targetHandler: function targetHandler(item) {
            item.geometry.coordinates = transLngLat2Position(lngLat);
          }
        });
      });
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.setCursor('pointDrag');
      return point;
    }
  }, {
    key: "handlePointDragEnd",
    value: function handlePointDragEnd(point) {
      this.setPointData(function (features) {
        return updateTargetFeature({
          target: point,
          data: features,
          targetHandler: function targetHandler(item) {
            item.properties.isDrag = false;
          }
        });
      });
      this.scene.setMapStatus({
        dragEnable: true
      });
      this.setCursor('pointHover');
      return point;
    }
    /**
     * 创建点回调
     * @param e
     */
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      return this.handleCreatePoint(transLngLat2Position(getLngLat(e)));
    }
  }, {
    key: "onPointMouseMove",
    value: function onPointMouseMove(e) {
      return this.handlePointHover(e.feature);
    }
  }, {
    key: "onPointMouseOut",
    value: function onPointMouseOut(e) {
      return this.handlePointUnHover(e.feature);
    }
    /**
     * 开始拖拽点回调
     * @param e
     */
  }, {
    key: "onPointDragStart",
    value: function onPointDragStart(e) {
      if (!this.options.editable) {
        return;
      }
      return this.handlePointDragStart(e.feature);
    }
    /**
     * 拖拽中点回调
     * @param e
     */
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = this.dragPoint;
      if (!this.options.editable || !dragPoint) {
        return;
      }
      return this.handlePointDragging(dragPoint, getLngLat(e));
    }
    /**
     * 拖拽结束点回调
     * @param e
     */
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var dragPoint = this.dragPoint;
      if (!this.options.editable || !dragPoint) {
        return;
      }
      return this.handlePointDragEnd(dragPoint);
    }
  }, {
    key: "enablePointRenderAction",
    value: function enablePointRenderAction() {
      var _this$pointRender8;
      var editable = this.options.editable;
      if (this.enabled) {
        var _this$pointRender7;
        (_this$pointRender7 = this.pointRender) === null || _this$pointRender7 === void 0 ? void 0 : _this$pointRender7.enableCreate();
      }
      (_this$pointRender8 = this.pointRender) === null || _this$pointRender8 === void 0 ? void 0 : _this$pointRender8.enableClick();
      if (editable) {
        var _this$pointRender9, _this$pointRender10;
        (_this$pointRender9 = this.pointRender) === null || _this$pointRender9 === void 0 ? void 0 : _this$pointRender9.enableHover();
        (_this$pointRender10 = this.pointRender) === null || _this$pointRender10 === void 0 ? void 0 : _this$pointRender10.enableDrag();
      }
    }
  }, {
    key: "disablePointRenderAction",
    value: function disablePointRenderAction() {
      var _this$pointRender11, _this$pointRender12, _this$pointRender13, _this$pointRender14;
      (_this$pointRender11 = this.pointRender) === null || _this$pointRender11 === void 0 ? void 0 : _this$pointRender11.disableCreate();
      (_this$pointRender12 = this.pointRender) === null || _this$pointRender12 === void 0 ? void 0 : _this$pointRender12.disableHover();
      (_this$pointRender13 = this.pointRender) === null || _this$pointRender13 === void 0 ? void 0 : _this$pointRender13.disableDrag();
      (_this$pointRender14 = this.pointRender) === null || _this$pointRender14 === void 0 ? void 0 : _this$pointRender14.disableClick();
    }
  }]);
  return PointMode;
}(BaseMode);