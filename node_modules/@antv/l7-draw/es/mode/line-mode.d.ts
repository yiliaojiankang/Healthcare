import { Feature, Position } from '@turf/turf';
import { LineRender } from '../render';
import { DeepPartial, FeatureUpdater, IAdsorbOptions, IDashLineFeature, IDistanceOptions, ILayerMouseEvent, ILineFeature, ILineHelperOptions, ILineProperties, ILngLat, IMidPointFeature, IPointFeature, ISceneMouseEvent, ITextFeature } from '../typings';
import { IMidPointModeOptions, MidPointMode } from './mid-point-mode';
export interface ILineModeOptions<F extends Feature = Feature> extends IMidPointModeOptions<F> {
    distanceOptions: false | IDistanceOptions;
    helper: ILineHelperOptions | boolean;
    adsorbOptions: IAdsorbOptions | false;
}
export declare abstract class LineMode<T extends ILineModeOptions> extends MidPointMode<T> {
    /**
     * 获取line类型对应的render
     * @protected
     */
    protected get lineRender(): LineRender | undefined;
    /**
     * 获取正在被拖拽的线
     * @protected
     */
    protected get dragLine(): ILineFeature | undefined;
    /**
     * 正在绘制的线
     * @protected
     */
    protected get drawLine(): ILineFeature | undefined;
    /**
     * 当前高亮的结点
     * @protected
     */
    protected get editLine(): ILineFeature | undefined;
    /**
     * 当前悬停的线
     * @protected
     */
    protected get hoverLine(): ILineFeature | undefined;
    protected previousPosition: Position;
    getDragLine(): ILineFeature | undefined;
    getDrawLine(): ILineFeature | undefined;
    getEditLine(): ILineFeature | undefined;
    getDefaultOptions(options: DeepPartial<T>): T;
    /**
     * 获取 position 经过吸附作用后的 position，若无吸附效果则返回原始数据
     * @param position
     */
    getAdsorbPosition(position: Position): Position | null;
    bindSceneEvent(): void;
    bindPointRenderEvent(): void;
    bindLineRenderEvent(): void;
    getDashLineDistanceTexts(dashLines: IDashLineFeature[], { showTotalDistance, format, showDashDistance, }: Pick<IDistanceOptions, 'showTotalDistance' | 'format' | 'showDashDistance'>): ITextFeature[];
    getLineDistanceTexts(lines: ILineFeature[], { showTotalDistance, format, showWhen, }: Pick<IDistanceOptions, 'showTotalDistance' | 'format' | 'showWhen'>): ITextFeature[];
    getDistanceTexts(): ITextFeature[];
    getAllTexts(): ITextFeature[];
    /**
     * 创建LineFeature
     * @param point
     */
    handleCreateLine(point: IPointFeature): ILineFeature;
    /**
     * 同步当前编辑线中的结点
     * @param line
     * @param nodes
     */
    syncLineNodes(line: ILineFeature, nodes: IPointFeature[]): ILineFeature;
    setActiveLine(line: ILineFeature, properties?: Partial<ILineProperties>): ILineFeature;
    clearActiveLine(): void;
    handleLineUnClick(link: ILineFeature): ILineFeature;
    handleLineHover(line: ILineFeature): ILineFeature | undefined;
    handleLineUnHover(line: ILineFeature): ILineFeature | undefined;
    handleLineDragStart(line: ILineFeature): ILineFeature;
    handleLineDragging(line: ILineFeature, { lng, lat }: ILngLat): ILineFeature;
    handleLineDragEnd(line: ILineFeature): ILineFeature;
    resetAdsorbLngLat(e: ILayerMouseEvent | ISceneMouseEvent): Position | null | undefined;
    /**
     * 创建点之后，对应线段的处理
     * @param e
     */
    onPointCreate(e: ILayerMouseEvent): IPointFeature | undefined;
    onPointDragStart(e: ILayerMouseEvent<IPointFeature>): IPointFeature | undefined;
    onPointDragging(e: ISceneMouseEvent): IPointFeature | undefined;
    onPointDragEnd(e: ISceneMouseEvent): IPointFeature | undefined;
    onLineUnClick(e: ILayerMouseEvent): ILineFeature | undefined;
    onLineMouseMove(e: ILayerMouseEvent<ILineFeature>): ILineFeature | undefined;
    onLineMouseOut(e: ILayerMouseEvent<ILineFeature>): ILineFeature | undefined;
    onLineDragStart(e: ILayerMouseEvent<ILineFeature>): ILineFeature | undefined;
    onLineDragging(e: ISceneMouseEvent): ILineFeature | undefined;
    onLineDragEnd(e: ISceneMouseEvent): ILineFeature | undefined;
    onPointMouseMove(e: ILayerMouseEvent<IPointFeature>): IPointFeature;
    onPointMouseOut(e: ILayerMouseEvent<IPointFeature>): IPointFeature;
    onMidPointHover(e: ILayerMouseEvent<IMidPointFeature>): void;
    onMidPointUnHover(e: ILayerMouseEvent<IMidPointFeature>): void;
    onPointClick(e: ILayerMouseEvent<IPointFeature>): void;
    /**
     * 获取线数据
     */
    getLineData(): ILineFeature[];
    /**
     * 设置线数据
     * @param data
     */
    setLineData(data: FeatureUpdater<ILineFeature>): ILineFeature[];
    getTextData(): ITextFeature[];
    setTextData(data: FeatureUpdater<ITextFeature>): ITextFeature[];
    /**
     * 获取线数据
     */
    getDashLineData(): IDashLineFeature[];
    /**
     * 设置线数据
     * @param data
     */
    setDashLineData(data: FeatureUpdater<IDashLineFeature>): IDashLineFeature[];
    onMidPointClick(e: ILayerMouseEvent<IMidPointFeature>): IPointFeature | undefined;
    enableSceneRenderAction(): void;
    disableSceneRenderAction(): void;
    enableLineRenderAction(): void;
    disableLineRenderAction(): void;
}
