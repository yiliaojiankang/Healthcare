function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import EventEmitter from 'eventemitter3';
import { debounce } from 'lodash';
import { RenderEvent, SceneEvent } from '../constant';
export var SceneRender = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SceneRender, _EventEmitter);
  var _super = _createSuper(SceneRender);
  function SceneRender(scene) {
    var _this;
    _classCallCheck(this, SceneRender);
    _this = _super.call(this);
    _this.scene = void 0;
    _this.previousClick = void 0;
    /**
     * L7原生dblclick经常误触发，故改用这种方式
     * @param e
     */
    _this.onDblClick = function (e) {
      var _ref2, _e$pixel;
      var _ref = (_ref2 = (_e$pixel = e.pixel) !== null && _e$pixel !== void 0 ? _e$pixel : e.point) !== null && _ref2 !== void 0 ? _ref2 : {},
        _ref$x = _ref.x,
        x = _ref$x === void 0 ? 0 : _ref$x,
        _ref$y = _ref.y,
        y = _ref$y === void 0 ? 0 : _ref$y;
      var time = Date.now();
      if (_this.previousClick) {
        var _this$previousClick = _this.previousClick,
          oldX = _this$previousClick.x,
          oldY = _this$previousClick.y,
          oldTime = _this$previousClick.time;
        if (time - oldTime < 300 && Math.abs(x - oldX) < 5 && Math.abs(y - oldY) < 5) {
          _this.emit(RenderEvent.DblClick, e);
        }
      }
      _this.previousClick = {
        x: x,
        y: y,
        time: time
      };
    };
    _this.onMouseMove = function (e) {
      _this.emit(RenderEvent.Mousemove, e);
    };
    _this.onMouseDown = function (e) {
      _this.emit(RenderEvent.Dragstart, e);
    };
    _this.onDragging = function (e) {
      _this.emit(RenderEvent.Dragging, e);
    };
    _this.onDragEnd = debounce(function (e) {
      _this.emit(RenderEvent.Dragend, e);
    }, 0);
    _this.scene = scene;
    return _this;
  }
  _createClass(SceneRender, [{
    key: "enableDrag",
    value: function enableDrag() {
      this.disableDrag();
      this.scene.on(SceneEvent.Mousedown, this.onMouseDown);
      this.scene.on(SceneEvent.Dragging, this.onDragging);
      this.scene.on(SceneEvent.Mouseup, this.onDragEnd);
      this.scene.on(SceneEvent.Dragend, this.onDragEnd);
    }
  }, {
    key: "disableDrag",
    value: function disableDrag() {
      this.scene.off(SceneEvent.Mousedown, this.onMouseDown);
      this.scene.off(SceneEvent.Dragging, this.onDragging);
      this.scene.off(SceneEvent.Mouseup, this.onDragEnd);
      this.scene.off(SceneEvent.Dragend, this.onDragEnd);
    }
  }, {
    key: "enableMouseMove",
    value: function enableMouseMove() {
      this.disableMouseMove();
      this.scene.on(SceneEvent.Mousemove, this.onMouseMove);
    }
  }, {
    key: "disableMouseMove",
    value: function disableMouseMove() {
      this.scene.off(SceneEvent.Mousemove, this.onMouseMove);
    }
  }, {
    key: "enableDblClick",
    value: function enableDblClick() {
      this.disableDblClick();
      this.scene.on(SceneEvent.Mousedown, this.onDblClick);
    }
  }, {
    key: "disableDblClick",
    value: function disableDblClick() {
      this.scene.off(SceneEvent.Mousedown, this.onDblClick);
    }
  }]);
  return SceneRender;
}(EventEmitter);