function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
import { featureCollection } from '@turf/turf';
import { EventEmitter } from 'eventemitter3';
export var LayerRender = /*#__PURE__*/function (_EventEmitter) {
  _inherits(LayerRender, _EventEmitter);
  var _super = _createSuper(LayerRender);
  function LayerRender(scene, _ref) {
    var _this;
    var style = _ref.style;
    _classCallCheck(this, LayerRender);
    _this = _super.call(this);
    /**
     * 地图场景Scene的实例
     */
    _this.scene = void 0;
    /**
     * 样式配置
     */
    _this.style = void 0;
    /**
     * 图层列表
     */
    _this.layers = void 0;
    /**
     * 当前展示的数据
     */
    _this.data = [];
    _this.scene = scene;
    _this.style = style;
    _this.layers = _this.initLayers();
    _this.layers.forEach(function (layer) {
      scene.addLayer(layer);
      // layer.active(true);
    });

    if (style.callback instanceof Function) {
      style.callback(_this.layers);
    }
    return _this;
  }
  _createClass(LayerRender, [{
    key: "getLayers",
    value: function getLayers() {
      return this.layers;
    }
    /**
     * 显示所有图层
     */
  }, {
    key: "show",
    value: function show() {
      this.layers.forEach(function (layer) {
        layer.show();
      });
    }
    /**
     * 隐藏所有图层
     */
  }, {
    key: "hide",
    value: function hide() {
      this.layers.forEach(function (layer) {
        layer.hide();
      });
    }
    /**
     * 设置数据
     * @param features 设置对应的Feature数组
     */
  }, {
    key: "setData",
    value: function setData(features) {
      var newFeatures = _toConsumableArray(features).sort(function (a, b) {
        return +a.properties.isActive - +b.properties.isActive;
      });
      this.data = newFeatures;
      this.layers.forEach(function (layer) {
        layer.setData(featureCollection(newFeatures));
      });
    }
    /**
     * render销毁时，需要把图层从Scene中移除
     */
  }, {
    key: "destroy",
    value: function destroy() {
      var _this2 = this;
      this.layers.forEach(function (layer) {
        _this2.scene.removeLayer(layer);
      });
    }
  }]);
  return LayerRender;
}(EventEmitter);