function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import Tippy from 'tippy.js';
import { getMapDom } from '../utils';
import 'tippy.js/dist/tippy.css';
import 'tippy.js/themes/light.css';
import { DEFAULT_POPUP_CONFIG, SceneEvent } from '../constant';
import { debounce } from 'lodash';
export var Popup = /*#__PURE__*/function () {
  function Popup(scene, tippyProps) {
    var _this = this;
    _classCallCheck(this, Popup);
    this.content = '';
    this.tippy = void 0;
    this.scene = void 0;
    this.isMouseInner = false;
    this.onMouseMove = function () {
      _this.isMouseInner = true;
      _this.checkTippyShow();
    };
    this.onMouseOut = function () {
      _this.isMouseInner = false;
      _this.checkTippyShow();
    };
    this.setContent = debounce(function (content) {
      _this.content = content !== null && content !== void 0 ? content : '';
      _this.tippy.setContent(content !== null && content !== void 0 ? content : '');
      _this.checkTippyShow();
    }, 16, {
      maxWait: 16
    });
    this.tippy = Tippy(getMapDom(scene), _objectSpread(_objectSpread({}, DEFAULT_POPUP_CONFIG), tippyProps));
    this.tippy.hide();
    this.scene = scene;
    scene.on(SceneEvent.Mousemove, this.onMouseMove);
    scene.on(SceneEvent.Mouseout, this.onMouseOut);
  }
  _createClass(Popup, [{
    key: "getContent",
    value: function getContent() {
      return this.content;
    }
  }, {
    key: "checkTippyShow",
    value: function checkTippyShow() {
      if (this.content && this.isMouseInner) {
        this.tippy.show();
      } else {
        this.tippy.hide();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.scene.off(SceneEvent.Mousemove, this.onMouseMove);
      this.scene.off(SceneEvent.Mouseout, this.onMouseOut);
      this.tippy.destroy();
    }
  }]);
  return Popup;
}();