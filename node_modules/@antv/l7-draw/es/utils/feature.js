function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { coordAll, featureCollection, lineString, point } from '@turf/turf';
import { first } from 'lodash';
/**
 * 获取feature唯一id
 */
export var getUuid = function () {
  var count = 1;
  return function (prefix) {
    return "".concat(prefix, "-").concat(count++);
  };
}();
/**
 * 根据id判断两个feature是否为同一feature
 * @param feature1
 * @param feature2
 */
export var isSameFeature = function isSameFeature(feature1, feature2) {
  var _feature1$properties, _feature2$properties;
  return !!(feature1 && feature2 && ((_feature1$properties = feature1.properties) === null || _feature1$properties === void 0 ? void 0 : _feature1$properties.id) === ((_feature2$properties = feature2.properties) === null || _feature2$properties === void 0 ? void 0 : _feature2$properties.id));
};
/**
 * 对target数据使用targetHandler，对target以外数据采用otherHandler
 * @param target
 * @param data
 * @param targetHandler
 * @param otherHandler
 */
export var updateTargetFeature = function updateTargetFeature(_ref) {
  var target = _ref.target,
    data = _ref.data,
    targetHandler = _ref.targetHandler,
    otherHandler = _ref.otherHandler;
  return data.map(function (item, index) {
    var _handler;
    var handler = isSameFeature(item, target) ? targetHandler : otherHandler;
    return (_handler = handler === null || handler === void 0 ? void 0 : handler(item, index)) !== null && _handler !== void 0 ? _handler : item;
  });
};
export var getDefaultPointProperties = function getDefaultPointProperties() {
  return {
    id: getUuid('point'),
    isHover: false,
    isActive: false,
    isDrag: false,
    createTime: Date.now()
  };
};
export var getDefaultLineProperties = function getDefaultLineProperties() {
  return {
    id: getUuid('line'),
    isHover: false,
    isActive: false,
    isDrag: false,
    isDraw: false,
    createTime: Date.now()
  };
};
export var getDefaultPolygonProperties = function getDefaultPolygonProperties() {
  return {
    id: getUuid('polygon'),
    isHover: false,
    isActive: false,
    isDrag: false,
    isDraw: false,
    createTime: Date.now()
  };
};
// export const getDefaultLinePro
/**
 * 创建
 * @param position
 * @param properties
 */
export var createPointFeature = function createPointFeature(position) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return point(position, _objectSpread(_objectSpread({}, getDefaultPointProperties()), properties));
};
export var createLineFeature = function createLineFeature(nodes) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    type: 'Feature',
    properties: _objectSpread(_objectSpread({}, getDefaultLineProperties()), {}, {
      nodes: nodes
    }, properties),
    geometry: {
      type: 'LineString',
      coordinates: coordAll(featureCollection(nodes))
    }
  };
};
export var createDashLine = function createDashLine(positions) {
  return lineString(positions, {
    id: getUuid('dashLine')
  });
};
export var createPolygonFeature = function createPolygonFeature(nodes) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    type: 'Feature',
    properties: _objectSpread(_objectSpread({}, getDefaultPolygonProperties()), {}, {
      nodes: nodes
    }, properties),
    geometry: {
      type: 'Polygon',
      coordinates: [coordAll(featureCollection([].concat(_toConsumableArray(nodes), [first(nodes)])))]
    }
  };
};